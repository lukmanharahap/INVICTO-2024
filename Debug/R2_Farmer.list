
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bf8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08013d88  08013d88  00014d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014620  08014620  000162c8  2**0
                  CONTENTS
  4 .ARM          00000008  08014620  08014620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014628  08014628  000162c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014628  08014628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801462c  0801462c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08014630  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000162c8  2**0
                  CONTENTS
 10 .bss          00000578  200002c8  200002c8  000162c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000840  20000840  000162c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000162c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014528  00000000  00000000  000162f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d51  00000000  00000000  0002a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e64  00000000  00000000  0002e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013136  00000000  00000000  0002f614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005669  00000000  00000000  0004274a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00047db3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006864  00000000  00000000  00047df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0004e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d70 	.word	0x08013d70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	08013d70 	.word	0x08013d70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f009 f9a5 	bl	800a388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f009 f99d 	bl	800a388 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(int Vx, int Vy, int W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001154:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff f9df 	bl	8000524 <__aeabi_i2d>
 8001166:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff f9d2 	bl	8000524 <__aeabi_i2d>
 8001180:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_i2d>
 80011a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f867 	bl	8000288 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff f9ae 	bl	8000524 <__aeabi_i2d>
 80011c8:	a3f8      	add	r3, pc, #992	@ (adr r3, 80015ac <Inverse_Kinematics+0x464>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa13 	bl	80005f8 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	a3ee      	add	r3, pc, #952	@ (adr r3, 800159c <Inverse_Kinematics+0x454>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa07 	bl	80005f8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff f84b 	bl	800028c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f990 	bl	8000524 <__aeabi_i2d>
 8001204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001208:	f7ff f9f6 	bl	80005f8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7ff f838 	bl	8000288 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	a3e3      	add	r3, pc, #908	@ (adr r3, 80015b4 <Inverse_Kinematics+0x46c>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9e4 	bl	80005f8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4614      	mov	r4, r2
 8001236:	461d      	mov	r5, r3
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	a3df      	add	r3, pc, #892	@ (adr r3, 80015bc <Inverse_Kinematics+0x474>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f809 	bl	8000288 <__aeabi_dsub>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff f950 	bl	8000524 <__aeabi_i2d>
 8001284:	a3cf      	add	r3, pc, #828	@ (adr r3, 80015c4 <Inverse_Kinematics+0x47c>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9b5 	bl	80005f8 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	461d      	mov	r5, r3
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff f944 	bl	8000524 <__aeabi_i2d>
 800129c:	a3cb      	add	r3, pc, #812	@ (adr r3, 80015cc <Inverse_Kinematics+0x484>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9a9 	bl	80005f8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7fe ffed 	bl	800028c <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f932 	bl	8000524 <__aeabi_i2d>
 80012c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffda 	bl	8000288 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 550 || M1 < -550) ? fmin(fmax(M1, -2600), 2600) : ((M1 < 0) ? -550 : ((M1 > 0) ? 550 : 0));
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4bab      	ldr	r3, [pc, #684]	@ (8001590 <Inverse_Kinematics+0x448>)
 80012e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012e6:	f7ff fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <Inverse_Kinematics+0x1bc>
 80012f0:	a39d      	add	r3, pc, #628	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012fa:	f7ff fbef 	bl	8000adc <__aeabi_dcmplt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d016      	beq.n	8001332 <Inverse_Kinematics+0x1ea>
 8001304:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8001570 <Inverse_Kinematics+0x428>
 8001308:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800130c:	f010 fe83 	bl	8012016 <fmax>
 8001310:	eeb0 7a40 	vmov.f32	s14, s0
 8001314:	eef0 7a60 	vmov.f32	s15, s1
 8001318:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8001578 <Inverse_Kinematics+0x430>
 800131c:	eeb0 0a47 	vmov.f32	s0, s14
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	f010 fea1 	bl	801206a <fmin>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	eef0 7a60 	vmov.f32	s15, s1
 8001330:	e01d      	b.n	800136e <Inverse_Kinematics+0x226>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800133e:	f7ff fbcd 	bl	8000adc <__aeabi_dcmplt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <Inverse_Kinematics+0x206>
 8001348:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001568 <Inverse_Kinematics+0x420>
 800134c:	e00f      	b.n	800136e <Inverse_Kinematics+0x226>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800135a:	f7ff fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <Inverse_Kinematics+0x222>
 8001364:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001580 <Inverse_Kinematics+0x438>
 8001368:	e001      	b.n	800136e <Inverse_Kinematics+0x226>
 800136a:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001588 <Inverse_Kinematics+0x440>
 800136e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 550 || M2 < -550) ? fmin(fmax(M2, -2600), 2600) : ((M2 < 0) ? -550 : ((M2 > 0) ? 550 : 0));
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b86      	ldr	r3, [pc, #536]	@ (8001590 <Inverse_Kinematics+0x448>)
 8001378:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800137c:	f7ff fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <Inverse_Kinematics+0x252>
 8001386:	a378      	add	r3, pc, #480	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001390:	f7ff fba4 	bl	8000adc <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <Inverse_Kinematics+0x280>
 800139a:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001570 <Inverse_Kinematics+0x428>
 800139e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80013a2:	f010 fe38 	bl	8012016 <fmax>
 80013a6:	eeb0 7a40 	vmov.f32	s14, s0
 80013aa:	eef0 7a60 	vmov.f32	s15, s1
 80013ae:	ed9f 1b72 	vldr	d1, [pc, #456]	@ 8001578 <Inverse_Kinematics+0x430>
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	f010 fe56 	bl	801206a <fmin>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	eef0 7a60 	vmov.f32	s15, s1
 80013c6:	e01d      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013d4:	f7ff fb82 	bl	8000adc <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <Inverse_Kinematics+0x29c>
 80013de:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8001568 <Inverse_Kinematics+0x420>
 80013e2:	e00f      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013f0:	f7ff fb92 	bl	8000b18 <__aeabi_dcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <Inverse_Kinematics+0x2b8>
 80013fa:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001580 <Inverse_Kinematics+0x438>
 80013fe:	e001      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 8001400:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001588 <Inverse_Kinematics+0x440>
 8001404:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 550 || M3 < -550) ? fmin(fmax(M3, -2600), 2600) : ((M3 < 0) ? -550 : ((M3 > 0) ? 550 : 0));
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <Inverse_Kinematics+0x448>)
 800140e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001412:	f7ff fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <Inverse_Kinematics+0x2e8>
 800141c:	a352      	add	r3, pc, #328	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001426:	f7ff fb59 	bl	8000adc <__aeabi_dcmplt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <Inverse_Kinematics+0x316>
 8001430:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001570 <Inverse_Kinematics+0x428>
 8001434:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001438:	f010 fded 	bl	8012016 <fmax>
 800143c:	eeb0 7a40 	vmov.f32	s14, s0
 8001440:	eef0 7a60 	vmov.f32	s15, s1
 8001444:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8001578 <Inverse_Kinematics+0x430>
 8001448:	eeb0 0a47 	vmov.f32	s0, s14
 800144c:	eef0 0a67 	vmov.f32	s1, s15
 8001450:	f010 fe0b 	bl	801206a <fmin>
 8001454:	eeb0 7a40 	vmov.f32	s14, s0
 8001458:	eef0 7a60 	vmov.f32	s15, s1
 800145c:	e01d      	b.n	800149a <Inverse_Kinematics+0x352>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800146a:	f7ff fb37 	bl	8000adc <__aeabi_dcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <Inverse_Kinematics+0x332>
 8001474:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001568 <Inverse_Kinematics+0x420>
 8001478:	e00f      	b.n	800149a <Inverse_Kinematics+0x352>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001486:	f7ff fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <Inverse_Kinematics+0x34e>
 8001490:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001580 <Inverse_Kinematics+0x438>
 8001494:	e001      	b.n	800149a <Inverse_Kinematics+0x352>
 8001496:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001588 <Inverse_Kinematics+0x440>
 800149a:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 550 || M4 < -550) ? fmin(fmax(M4, -2600), 2600) : ((M4 < 0) ? -550 : ((M4 > 0) ? 550 : 0));
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <Inverse_Kinematics+0x448>)
 80014a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014a8:	f7ff fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <Inverse_Kinematics+0x37e>
 80014b2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014bc:	f7ff fb0e 	bl	8000adc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <Inverse_Kinematics+0x3ac>
 80014c6:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001570 <Inverse_Kinematics+0x428>
 80014ca:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80014ce:	f010 fda2 	bl	8012016 <fmax>
 80014d2:	eeb0 7a40 	vmov.f32	s14, s0
 80014d6:	eef0 7a60 	vmov.f32	s15, s1
 80014da:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001578 <Inverse_Kinematics+0x430>
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	f010 fdc0 	bl	801206a <fmin>
 80014ea:	eeb0 7a40 	vmov.f32	s14, s0
 80014ee:	eef0 7a60 	vmov.f32	s15, s1
 80014f2:	e01d      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001500:	f7ff faec 	bl	8000adc <__aeabi_dcmplt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <Inverse_Kinematics+0x3c8>
 800150a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001568 <Inverse_Kinematics+0x420>
 800150e:	e00f      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800151c:	f7ff fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <Inverse_Kinematics+0x3e4>
 8001526:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001580 <Inverse_Kinematics+0x438>
 800152a:	e001      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 800152c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001588 <Inverse_Kinematics+0x440>
 8001530:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 8001534:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001538:	2006      	movs	r0, #6
 800153a:	f7ff fd8f 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 800153e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001542:	2008      	movs	r0, #8
 8001544:	f7ff fd8a 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8001548:	ed97 0b06 	vldr	d0, [r7, #24]
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fd85 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 8001552:	ed97 0b04 	vldr	d0, [r7, #16]
 8001556:	2005      	movs	r0, #5
 8001558:	f7ff fd80 	bl	800105c <setMotorSpeed>
}
 800155c:	bf00      	nop
 800155e:	3758      	adds	r7, #88	@ 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	00000000 	.word	0x00000000
 800156c:	c0813000 	.word	0xc0813000
 8001570:	00000000 	.word	0x00000000
 8001574:	c0a45000 	.word	0xc0a45000
 8001578:	00000000 	.word	0x00000000
 800157c:	40a45000 	.word	0x40a45000
 8001580:	00000000 	.word	0x00000000
 8001584:	40813000 	.word	0x40813000
	...
 8001590:	40813000 	.word	0x40813000
 8001594:	66666666 	.word	0x66666666
 8001598:	401e6666 	.word	0x401e6666
 800159c:	667f3bcc 	.word	0x667f3bcc
 80015a0:	bfe6a09e 	.word	0xbfe6a09e
 80015a4:	667f3bcd 	.word	0x667f3bcd
 80015a8:	3fe6a09e 	.word	0x3fe6a09e
 80015ac:	667f3bcd 	.word	0x667f3bcd
 80015b0:	bfe6a09e 	.word	0xbfe6a09e
 80015b4:	667f3bcc 	.word	0x667f3bcc
 80015b8:	3fe6a09e 	.word	0x3fe6a09e
 80015bc:	667f3bce 	.word	0x667f3bce
 80015c0:	bfe6a09e 	.word	0xbfe6a09e
 80015c4:	667f3bce 	.word	0x667f3bce
 80015c8:	3fe6a09e 	.word	0x3fe6a09e
 80015cc:	667f3bcb 	.word	0x667f3bcb
 80015d0:	3fe6a09e 	.word	0x3fe6a09e
 80015d4:	00000000 	.word	0x00000000

080015d8 <baru>:

void baru(double Vx, double Vy, double W)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b0b8      	sub	sp, #224	@ 0xe0
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 80015e2:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 80015e6:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6; // Radius or distance from the center to the wheel, in centimeters
 80015ea:	f20f 5328 	addw	r3, pc, #1320	@ 0x528
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double wheelMaxSpeed = 2600; // Max speed for each wheel
 80015f6:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

    // Calculate the raw motor speeds based on inverse kinematics
    double M1 = -sin(M_PI_4) * Vx + cos(M_PI_4) * Vy - R * W;
 8001602:	f20f 5320 	addw	r3, pc, #1312	@ 0x520
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4614      	mov	r4, r2
 8001618:	461d      	mov	r5, r3
 800161a:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001626:	f7fe ffe7 	bl	80005f8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7fe fe2b 	bl	800028c <__adddf3>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001642:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fe19 	bl	8000288 <__aeabi_dsub>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 800165e:	f20f 43d4 	addw	r3, pc, #1236	@ 0x4d4
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800166a:	f7fe ffc5 	bl	80005f8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	f20f 43ac 	addw	r3, pc, #1196	@ 0x4ac
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001682:	f7fe ffb9 	bl	80005f8 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7fe fdfd 	bl	800028c <__adddf3>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4614      	mov	r4, r2
 8001698:	461d      	mov	r5, r3
 800169a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800169e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016a2:	f7fe ffa9 	bl	80005f8 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe fdeb 	bl	8000288 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 80016ba:	f20f 4380 	addw	r3, pc, #1152	@ 0x480
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80016c6:	f7fe ff97 	bl	80005f8 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	461d      	mov	r5, r3
 80016d2:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80016de:	f7fe ff8b 	bl	80005f8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4620      	mov	r0, r4
 80016e8:	4629      	mov	r1, r5
 80016ea:	f7fe fdcf 	bl	800028c <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4614      	mov	r4, r2
 80016f4:	461d      	mov	r5, r3
 80016f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016fa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016fe:	f7fe ff7b 	bl	80005f8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe fdbd 	bl	8000288 <__aeabi_dsub>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001716:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001722:	f7fe ff69 	bl	80005f8 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4614      	mov	r4, r2
 800172c:	461d      	mov	r5, r3
 800172e:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800173a:	f7fe ff5d 	bl	80005f8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda1 	bl	800028c <__adddf3>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001756:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800175a:	f7fe ff4d 	bl	80005f8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd8f 	bl	8000288 <__aeabi_dsub>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    // Find the maximum absolute value among the motor speeds
    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 8001772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800177c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001782:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
 8001788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800178c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
 8001792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800179c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017a6:	623b      	str	r3, [r7, #32]
 80017a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b2:	ed97 1b08 	vldr	d1, [r7, #32]
 80017b6:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80017ba:	f010 fc2c 	bl	8012016 <fmax>
 80017be:	eeb0 7a40 	vmov.f32	s14, s0
 80017c2:	eef0 7a60 	vmov.f32	s15, s1
 80017c6:	eeb0 1a47 	vmov.f32	s2, s14
 80017ca:	eef0 1a67 	vmov.f32	s3, s15
 80017ce:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80017d2:	f010 fc20 	bl	8012016 <fmax>
 80017d6:	eeb0 7a40 	vmov.f32	s14, s0
 80017da:	eef0 7a60 	vmov.f32	s15, s1
 80017de:	eeb0 1a47 	vmov.f32	s2, s14
 80017e2:	eef0 1a67 	vmov.f32	s3, s15
 80017e6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80017ea:	f010 fc14 	bl	8012016 <fmax>
 80017ee:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8

    // Scale the motor speeds to fit within the allowed range if necessary
    if (maxM > wheelMaxSpeed) {
 80017f2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80017f6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80017fa:	f7ff f98d 	bl	8000b18 <__aeabi_dcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d031      	beq.n	8001868 <baru+0x290>
        double scale = wheelMaxSpeed / maxM;
 8001804:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001808:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800180c:	f7ff f81e 	bl	800084c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
        M1 *= scale;
 8001818:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800181c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001820:	f7fe feea 	bl	80005f8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 800182c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001830:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001834:	f7fe fee0 	bl	80005f8 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 8001840:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001844:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001848:	f7fe fed6 	bl	80005f8 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 8001854:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001858:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800185c:	f7fe fecc 	bl	80005f8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    }

    // Apply a minimum threshold for movement to overcome static friction
    double minThreshold = 500;
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4ba8      	ldr	r3, [pc, #672]	@ (8001b10 <baru+0x538>)
 800186e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 8001872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800187c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001886:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800188a:	f7ff f927 	bl	8000adc <__aeabi_dcmplt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <baru+0x2c6>
 8001894:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8001898:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800189c:	e027      	b.n	80018ee <baru+0x316>
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80018aa:	f7ff f917 	bl	8000adc <__aeabi_dcmplt>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <baru+0x2ee>
 80018b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018c4:	e013      	b.n	80018ee <baru+0x316>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80018d2:	f7ff f921 	bl	8000b18 <__aeabi_dcmpgt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <baru+0x30e>
 80018dc:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 80018e0:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80018e4:	e003      	b.n	80018ee <baru+0x316>
 80018e6:	ed9f 7b88 	vldr	d7, [pc, #544]	@ 8001b08 <baru+0x530>
 80018ea:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80018ee:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80018f2:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80018f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800190a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800190e:	f7ff f8e5 	bl	8000adc <__aeabi_dcmplt>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <baru+0x34a>
 8001918:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 800191c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001920:	e027      	b.n	8001972 <baru+0x39a>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800192e:	f7ff f8d5 	bl	8000adc <__aeabi_dcmplt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <baru+0x372>
 8001938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800193c:	653b      	str	r3, [r7, #80]	@ 0x50
 800193e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001942:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001946:	657b      	str	r3, [r7, #84]	@ 0x54
 8001948:	e013      	b.n	8001972 <baru+0x39a>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001956:	f7ff f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <baru+0x392>
 8001960:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001964:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001968:	e003      	b.n	8001972 <baru+0x39a>
 800196a:	ed9f 7b67 	vldr	d7, [pc, #412]	@ 8001b08 <baru+0x530>
 800196e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001972:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001976:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 800197a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001992:	f7ff f8a3 	bl	8000adc <__aeabi_dcmplt>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <baru+0x3ce>
 800199c:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 80019a0:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80019a4:	e027      	b.n	80019f6 <baru+0x41e>
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80019b2:	f7ff f893 	bl	8000adc <__aeabi_dcmplt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <baru+0x3f6>
 80019bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019c6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019cc:	e013      	b.n	80019f6 <baru+0x41e>
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80019da:	f7ff f89d 	bl	8000b18 <__aeabi_dcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <baru+0x416>
 80019e4:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 80019e8:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80019ec:	e003      	b.n	80019f6 <baru+0x41e>
 80019ee:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8001b08 <baru+0x530>
 80019f2:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80019f6:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80019fa:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 80019fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a12:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a16:	f7ff f861 	bl	8000adc <__aeabi_dcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <baru+0x452>
 8001a20:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001a24:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001a28:	e027      	b.n	8001a7a <baru+0x4a2>
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a36:	f7ff f851 	bl	8000adc <__aeabi_dcmplt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <baru+0x47a>
 8001a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a4a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a50:	e013      	b.n	8001a7a <baru+0x4a2>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a5e:	f7ff f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <baru+0x49a>
 8001a68:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001a6c:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001a70:	e003      	b.n	8001a7a <baru+0x4a2>
 8001a72:	ed9f 7b25 	vldr	d7, [pc, #148]	@ 8001b08 <baru+0x530>
 8001a76:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001a7a:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001a7e:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    // Set the motor speeds
    setMotorSpeed(6, (int)V1);
 8001a82:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001a86:	f7ff f867 	bl	8000b58 <__aeabi_d2iz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd49 	bl	8000524 <__aeabi_i2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	ec43 2b10 	vmov	d0, r2, r3
 8001a9a:	2006      	movs	r0, #6
 8001a9c:	f7ff fade 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V2);
 8001aa0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001aa4:	f7ff f858 	bl	8000b58 <__aeabi_d2iz>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd3a 	bl	8000524 <__aeabi_i2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	ec43 2b10 	vmov	d0, r2, r3
 8001ab8:	2008      	movs	r0, #8
 8001aba:	f7ff facf 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 8001abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ac2:	f7ff f849 	bl	8000b58 <__aeabi_d2iz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd2b 	bl	8000524 <__aeabi_i2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	ec43 2b10 	vmov	d0, r2, r3
 8001ad6:	2004      	movs	r0, #4
 8001ad8:	f7ff fac0 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V4);
 8001adc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001ae0:	f7ff f83a 	bl	8000b58 <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd1c 	bl	8000524 <__aeabi_i2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	ec43 2b10 	vmov	d0, r2, r3
 8001af4:	2005      	movs	r0, #5
 8001af6:	f7ff fab1 	bl	800105c <setMotorSpeed>
}
 8001afa:	bf00      	nop
 8001afc:	37e0      	adds	r7, #224	@ 0xe0
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
	...
 8001b10:	407f4000 	.word	0x407f4000
 8001b14:	66666666 	.word	0x66666666
 8001b18:	401e6666 	.word	0x401e6666
 8001b1c:	00000000 	.word	0x00000000
 8001b20:	40a45000 	.word	0x40a45000
 8001b24:	667f3bcc 	.word	0x667f3bcc
 8001b28:	bfe6a09e 	.word	0xbfe6a09e
 8001b2c:	667f3bcd 	.word	0x667f3bcd
 8001b30:	3fe6a09e 	.word	0x3fe6a09e
 8001b34:	667f3bcd 	.word	0x667f3bcd
 8001b38:	bfe6a09e 	.word	0xbfe6a09e
 8001b3c:	667f3bcc 	.word	0x667f3bcc
 8001b40:	3fe6a09e 	.word	0x3fe6a09e
 8001b44:	667f3bce 	.word	0x667f3bce
 8001b48:	bfe6a09e 	.word	0xbfe6a09e
 8001b4c:	667f3bce 	.word	0x667f3bce
 8001b50:	3fe6a09e 	.word	0x3fe6a09e
 8001b54:	667f3bcb 	.word	0x667f3bcb
 8001b58:	3fe6a09e 	.word	0x3fe6a09e
 8001b5c:	00000000 	.word	0x00000000

08001b60 <putar>:
     setMotorSpeed(4, V3);
     setMotorSpeed(5, V4);
}

void putar(int Vx, int Vy, int W)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b096      	sub	sp, #88	@ 0x58
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001b6c:	f20f 4340 	addw	r3, pc, #1088	@ 0x440
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7fe fcd3 	bl	8000524 <__aeabi_i2d>
 8001b7e:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fd37 	bl	80005f8 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4614      	mov	r4, r2
 8001b90:	461d      	mov	r5, r3
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f7fe fcc6 	bl	8000524 <__aeabi_i2d>
 8001b98:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fd2a 	bl	80005f8 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fb6e 	bl	800028c <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7fe fcb3 	bl	8000524 <__aeabi_i2d>
 8001bbe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001bc2:	f7fe fd19 	bl	80005f8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe fb5b 	bl	8000288 <__aeabi_dsub>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7fe fca2 	bl	8000524 <__aeabi_i2d>
 8001be0:	a3f9      	add	r3, pc, #996	@ (adr r3, 8001fc8 <putar+0x468>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	68b8      	ldr	r0, [r7, #8]
 8001bf4:	f7fe fc96 	bl	8000524 <__aeabi_i2d>
 8001bf8:	a3ef      	add	r3, pc, #956	@ (adr r3, 8001fb8 <putar+0x458>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fcfb 	bl	80005f8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fb3f 	bl	800028c <__adddf3>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4614      	mov	r4, r2
 8001c14:	461d      	mov	r5, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fc84 	bl	8000524 <__aeabi_i2d>
 8001c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c20:	f7fe fcea 	bl	80005f8 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fb2c 	bl	8000288 <__aeabi_dsub>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7fe fc73 	bl	8000524 <__aeabi_i2d>
 8001c3e:	a3e4      	add	r3, pc, #912	@ (adr r3, 8001fd0 <putar+0x470>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	f7fe fcd8 	bl	80005f8 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	461d      	mov	r5, r3
 8001c50:	68b8      	ldr	r0, [r7, #8]
 8001c52:	f7fe fc67 	bl	8000524 <__aeabi_i2d>
 8001c56:	a3e0      	add	r3, pc, #896	@ (adr r3, 8001fd8 <putar+0x478>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fccc 	bl	80005f8 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb10 	bl	800028c <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7fe fc55 	bl	8000524 <__aeabi_i2d>
 8001c7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c7e:	f7fe fcbb 	bl	80005f8 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4620      	mov	r0, r4
 8001c88:	4629      	mov	r1, r5
 8001c8a:	f7fe fafd 	bl	8000288 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7fe fc44 	bl	8000524 <__aeabi_i2d>
 8001c9c:	a3d0      	add	r3, pc, #832	@ (adr r3, 8001fe0 <putar+0x480>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe fca9 	bl	80005f8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4614      	mov	r4, r2
 8001cac:	461d      	mov	r5, r3
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	f7fe fc38 	bl	8000524 <__aeabi_i2d>
 8001cb4:	a3cc      	add	r3, pc, #816	@ (adr r3, 8001fe8 <putar+0x488>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fc9d 	bl	80005f8 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fae1 	bl	800028c <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fc26 	bl	8000524 <__aeabi_i2d>
 8001cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cdc:	f7fe fc8c 	bl	80005f8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe face 	bl	8000288 <__aeabi_dsub>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 400 || M1 < -400) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -400 : ((M1 > 0) ? 400 : 0));
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4bab      	ldr	r3, [pc, #684]	@ (8001fa8 <putar+0x448>)
 8001cfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001cfe:	f7fe ff0b 	bl	8000b18 <__aeabi_dcmpgt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <putar+0x1bc>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4ba7      	ldr	r3, [pc, #668]	@ (8001fac <putar+0x44c>)
 8001d0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d12:	f7fe fee3 	bl	8000adc <__aeabi_dcmplt>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d016      	beq.n	8001d4a <putar+0x1ea>
 8001d1c:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 8001f80 <putar+0x420>
 8001d20:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001d24:	f010 f977 	bl	8012016 <fmax>
 8001d28:	eeb0 7a40 	vmov.f32	s14, s0
 8001d2c:	eef0 7a60 	vmov.f32	s15, s1
 8001d30:	ed9f 1b95 	vldr	d1, [pc, #596]	@ 8001f88 <putar+0x428>
 8001d34:	eeb0 0a47 	vmov.f32	s0, s14
 8001d38:	eef0 0a67 	vmov.f32	s1, s15
 8001d3c:	f010 f995 	bl	801206a <fmin>
 8001d40:	eeb0 7a40 	vmov.f32	s14, s0
 8001d44:	eef0 7a60 	vmov.f32	s15, s1
 8001d48:	e01d      	b.n	8001d86 <putar+0x226>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d56:	f7fe fec1 	bl	8000adc <__aeabi_dcmplt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <putar+0x206>
 8001d60:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8001f90 <putar+0x430>
 8001d64:	e00f      	b.n	8001d86 <putar+0x226>
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d72:	f7fe fed1 	bl	8000b18 <__aeabi_dcmpgt>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <putar+0x222>
 8001d7c:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001f98 <putar+0x438>
 8001d80:	e001      	b.n	8001d86 <putar+0x226>
 8001d82:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001fa0 <putar+0x440>
 8001d86:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 400 || M2 < -400) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -400 : ((M2 > 0) ? 400 : 0));
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b86      	ldr	r3, [pc, #536]	@ (8001fa8 <putar+0x448>)
 8001d90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d94:	f7fe fec0 	bl	8000b18 <__aeabi_dcmpgt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <putar+0x252>
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b82      	ldr	r3, [pc, #520]	@ (8001fac <putar+0x44c>)
 8001da4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001da8:	f7fe fe98 	bl	8000adc <__aeabi_dcmplt>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <putar+0x280>
 8001db2:	ed9f 1b73 	vldr	d1, [pc, #460]	@ 8001f80 <putar+0x420>
 8001db6:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001dba:	f010 f92c 	bl	8012016 <fmax>
 8001dbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001dc2:	eef0 7a60 	vmov.f32	s15, s1
 8001dc6:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8001f88 <putar+0x428>
 8001dca:	eeb0 0a47 	vmov.f32	s0, s14
 8001dce:	eef0 0a67 	vmov.f32	s1, s15
 8001dd2:	f010 f94a 	bl	801206a <fmin>
 8001dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dda:	eef0 7a60 	vmov.f32	s15, s1
 8001dde:	e01d      	b.n	8001e1c <putar+0x2bc>
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001dec:	f7fe fe76 	bl	8000adc <__aeabi_dcmplt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <putar+0x29c>
 8001df6:	ed9f 7b66 	vldr	d7, [pc, #408]	@ 8001f90 <putar+0x430>
 8001dfa:	e00f      	b.n	8001e1c <putar+0x2bc>
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e08:	f7fe fe86 	bl	8000b18 <__aeabi_dcmpgt>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <putar+0x2b8>
 8001e12:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001f98 <putar+0x438>
 8001e16:	e001      	b.n	8001e1c <putar+0x2bc>
 8001e18:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001fa0 <putar+0x440>
 8001e1c:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 400 || M3 < -400) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -400 : ((M3 > 0) ? 400 : 0));
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b60      	ldr	r3, [pc, #384]	@ (8001fa8 <putar+0x448>)
 8001e26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e2a:	f7fe fe75 	bl	8000b18 <__aeabi_dcmpgt>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d109      	bne.n	8001e48 <putar+0x2e8>
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <putar+0x44c>)
 8001e3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e3e:	f7fe fe4d 	bl	8000adc <__aeabi_dcmplt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d016      	beq.n	8001e76 <putar+0x316>
 8001e48:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8001f80 <putar+0x420>
 8001e4c:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001e50:	f010 f8e1 	bl	8012016 <fmax>
 8001e54:	eeb0 7a40 	vmov.f32	s14, s0
 8001e58:	eef0 7a60 	vmov.f32	s15, s1
 8001e5c:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 8001f88 <putar+0x428>
 8001e60:	eeb0 0a47 	vmov.f32	s0, s14
 8001e64:	eef0 0a67 	vmov.f32	s1, s15
 8001e68:	f010 f8ff 	bl	801206a <fmin>
 8001e6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e70:	eef0 7a60 	vmov.f32	s15, s1
 8001e74:	e01d      	b.n	8001eb2 <putar+0x352>
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e82:	f7fe fe2b 	bl	8000adc <__aeabi_dcmplt>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <putar+0x332>
 8001e8c:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 8001f90 <putar+0x430>
 8001e90:	e00f      	b.n	8001eb2 <putar+0x352>
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e9e:	f7fe fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <putar+0x34e>
 8001ea8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001f98 <putar+0x438>
 8001eac:	e001      	b.n	8001eb2 <putar+0x352>
 8001eae:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001fa0 <putar+0x440>
 8001eb2:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 400 || M4 < -400) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -400 : ((M4 > 0) ? 400 : 0));
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <putar+0x448>)
 8001ebc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ec0:	f7fe fe2a 	bl	8000b18 <__aeabi_dcmpgt>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <putar+0x37e>
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <putar+0x44c>)
 8001ed0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ed4:	f7fe fe02 	bl	8000adc <__aeabi_dcmplt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <putar+0x3ac>
 8001ede:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8001f80 <putar+0x420>
 8001ee2:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001ee6:	f010 f896 	bl	8012016 <fmax>
 8001eea:	eeb0 7a40 	vmov.f32	s14, s0
 8001eee:	eef0 7a60 	vmov.f32	s15, s1
 8001ef2:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8001f88 <putar+0x428>
 8001ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8001efa:	eef0 0a67 	vmov.f32	s1, s15
 8001efe:	f010 f8b4 	bl	801206a <fmin>
 8001f02:	eeb0 7a40 	vmov.f32	s14, s0
 8001f06:	eef0 7a60 	vmov.f32	s15, s1
 8001f0a:	e01d      	b.n	8001f48 <putar+0x3e8>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f18:	f7fe fde0 	bl	8000adc <__aeabi_dcmplt>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <putar+0x3c8>
 8001f22:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8001f90 <putar+0x430>
 8001f26:	e00f      	b.n	8001f48 <putar+0x3e8>
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f34:	f7fe fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <putar+0x3e4>
 8001f3e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001f98 <putar+0x438>
 8001f42:	e001      	b.n	8001f48 <putar+0x3e8>
 8001f44:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001fa0 <putar+0x440>
 8001f48:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 8001f4c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001f50:	2006      	movs	r0, #6
 8001f52:	f7ff f883 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 8001f56:	ed97 0b08 	vldr	d0, [r7, #32]
 8001f5a:	2008      	movs	r0, #8
 8001f5c:	f7ff f87e 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8001f60:	ed97 0b06 	vldr	d0, [r7, #24]
 8001f64:	2004      	movs	r0, #4
 8001f66:	f7ff f879 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 8001f6a:	ed97 0b04 	vldr	d0, [r7, #16]
 8001f6e:	2005      	movs	r0, #5
 8001f70:	f7ff f874 	bl	800105c <setMotorSpeed>
}
 8001f74:	bf00      	nop
 8001f76:	3758      	adds	r7, #88	@ 0x58
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7c:	f3af 8000 	nop.w
 8001f80:	00000000 	.word	0x00000000
 8001f84:	c0a45000 	.word	0xc0a45000
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	40a45000 	.word	0x40a45000
 8001f90:	00000000 	.word	0x00000000
 8001f94:	c0790000 	.word	0xc0790000
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	40790000 	.word	0x40790000
	...
 8001fa8:	40790000 	.word	0x40790000
 8001fac:	c0790000 	.word	0xc0790000
 8001fb0:	66666666 	.word	0x66666666
 8001fb4:	401e6666 	.word	0x401e6666
 8001fb8:	667f3bcc 	.word	0x667f3bcc
 8001fbc:	bfe6a09e 	.word	0xbfe6a09e
 8001fc0:	667f3bcd 	.word	0x667f3bcd
 8001fc4:	3fe6a09e 	.word	0x3fe6a09e
 8001fc8:	667f3bcd 	.word	0x667f3bcd
 8001fcc:	bfe6a09e 	.word	0xbfe6a09e
 8001fd0:	667f3bcc 	.word	0x667f3bcc
 8001fd4:	3fe6a09e 	.word	0x3fe6a09e
 8001fd8:	667f3bce 	.word	0x667f3bce
 8001fdc:	bfe6a09e 	.word	0xbfe6a09e
 8001fe0:	667f3bce 	.word	0x667f3bce
 8001fe4:	3fe6a09e 	.word	0x3fe6a09e
 8001fe8:	667f3bcb 	.word	0x667f3bcb
 8001fec:	3fe6a09e 	.word	0x3fe6a09e

08001ff0 <kanan>:

void kanan(int Vx, int Vy, int W)
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b096      	sub	sp, #88	@ 0x58
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001ffc:	f20f 434c 	addw	r3, pc, #1100	@ 0x44c
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7fe fa8b 	bl	8000524 <__aeabi_i2d>
 800200e:	f20f 4344 	addw	r3, pc, #1092	@ 0x444
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe faef 	bl	80005f8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4614      	mov	r4, r2
 8002020:	461d      	mov	r5, r3
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f7fe fa7e 	bl	8000524 <__aeabi_i2d>
 8002028:	f20f 4330 	addw	r3, pc, #1072	@ 0x430
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fae2 	bl	80005f8 <__aeabi_dmul>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4620      	mov	r0, r4
 800203a:	4629      	mov	r1, r5
 800203c:	f7fe f926 	bl	800028c <__adddf3>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4614      	mov	r4, r2
 8002046:	461d      	mov	r5, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fa6b 	bl	8000524 <__aeabi_i2d>
 800204e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002052:	f7fe fad1 	bl	80005f8 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe f913 	bl	8000288 <__aeabi_dsub>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7fe fa5a 	bl	8000524 <__aeabi_i2d>
 8002070:	a3fc      	add	r3, pc, #1008	@ (adr r3, 8002464 <kanan+0x474>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe fabf 	bl	80005f8 <__aeabi_dmul>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4614      	mov	r4, r2
 8002080:	461d      	mov	r5, r3
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f7fe fa4e 	bl	8000524 <__aeabi_i2d>
 8002088:	a3f2      	add	r3, pc, #968	@ (adr r3, 8002454 <kanan+0x464>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fab3 	bl	80005f8 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	f7fe f8f7 	bl	800028c <__adddf3>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4614      	mov	r4, r2
 80020a4:	461d      	mov	r5, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fa3c 	bl	8000524 <__aeabi_i2d>
 80020ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020b0:	f7fe faa2 	bl	80005f8 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f8e4 	bl	8000288 <__aeabi_dsub>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7fe fa2b 	bl	8000524 <__aeabi_i2d>
 80020ce:	a3e7      	add	r3, pc, #924	@ (adr r3, 800246c <kanan+0x47c>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fa90 	bl	80005f8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	461d      	mov	r5, r3
 80020e0:	68b8      	ldr	r0, [r7, #8]
 80020e2:	f7fe fa1f 	bl	8000524 <__aeabi_i2d>
 80020e6:	a3e3      	add	r3, pc, #908	@ (adr r3, 8002474 <kanan+0x484>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fa84 	bl	80005f8 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4620      	mov	r0, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	f7fe f8c8 	bl	800028c <__adddf3>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7fe fa0d 	bl	8000524 <__aeabi_i2d>
 800210a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800210e:	f7fe fa73 	bl	80005f8 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4620      	mov	r0, r4
 8002118:	4629      	mov	r1, r5
 800211a:	f7fe f8b5 	bl	8000288 <__aeabi_dsub>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W)*1.056;
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f7fe f9fc 	bl	8000524 <__aeabi_i2d>
 800212c:	a3d3      	add	r3, pc, #844	@ (adr r3, 800247c <kanan+0x48c>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe fa61 	bl	80005f8 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4614      	mov	r4, r2
 800213c:	461d      	mov	r5, r3
 800213e:	68b8      	ldr	r0, [r7, #8]
 8002140:	f7fe f9f0 	bl	8000524 <__aeabi_i2d>
 8002144:	a3cf      	add	r3, pc, #828	@ (adr r3, 8002484 <kanan+0x494>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fa55 	bl	80005f8 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f899 	bl	800028c <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4614      	mov	r4, r2
 8002160:	461d      	mov	r5, r3
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe f9de 	bl	8000524 <__aeabi_i2d>
 8002168:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800216c:	f7fe fa44 	bl	80005f8 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4620      	mov	r0, r4
 8002176:	4629      	mov	r1, r5
 8002178:	f7fe f886 	bl	8000288 <__aeabi_dsub>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	a3c1      	add	r3, pc, #772	@ (adr r3, 800248c <kanan+0x49c>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa35 	bl	80005f8 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 550 || M1 < -550) ? fmin(fmax(M1, -2600), 2600) : ((M1 < 0) ? -550 : ((M1 > 0) ? 550 : 0));
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4bab      	ldr	r3, [pc, #684]	@ (8002448 <kanan+0x458>)
 800219c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80021a0:	f7fe fcba 	bl	8000b18 <__aeabi_dcmpgt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <kanan+0x1ce>
 80021aa:	a39d      	add	r3, pc, #628	@ (adr r3, 8002420 <kanan+0x430>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80021b4:	f7fe fc92 	bl	8000adc <__aeabi_dcmplt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <kanan+0x1fc>
 80021be:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8002428 <kanan+0x438>
 80021c2:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 80021c6:	f00f ff26 	bl	8012016 <fmax>
 80021ca:	eeb0 7a40 	vmov.f32	s14, s0
 80021ce:	eef0 7a60 	vmov.f32	s15, s1
 80021d2:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8002430 <kanan+0x440>
 80021d6:	eeb0 0a47 	vmov.f32	s0, s14
 80021da:	eef0 0a67 	vmov.f32	s1, s15
 80021de:	f00f ff44 	bl	801206a <fmin>
 80021e2:	eeb0 7a40 	vmov.f32	s14, s0
 80021e6:	eef0 7a60 	vmov.f32	s15, s1
 80021ea:	e01d      	b.n	8002228 <kanan+0x238>
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80021f8:	f7fe fc70 	bl	8000adc <__aeabi_dcmplt>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <kanan+0x218>
 8002202:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8002420 <kanan+0x430>
 8002206:	e00f      	b.n	8002228 <kanan+0x238>
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002214:	f7fe fc80 	bl	8000b18 <__aeabi_dcmpgt>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <kanan+0x234>
 800221e:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8002438 <kanan+0x448>
 8002222:	e001      	b.n	8002228 <kanan+0x238>
 8002224:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8002440 <kanan+0x450>
 8002228:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 550 || M2 < -550) ? fmin(fmax(M2, -2600), 2600) : ((M2 < 0) ? -550 : ((M2 > 0) ? 550 : 0));
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b85      	ldr	r3, [pc, #532]	@ (8002448 <kanan+0x458>)
 8002232:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002236:	f7fe fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <kanan+0x264>
 8002240:	a377      	add	r3, pc, #476	@ (adr r3, 8002420 <kanan+0x430>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800224a:	f7fe fc47 	bl	8000adc <__aeabi_dcmplt>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d016      	beq.n	8002282 <kanan+0x292>
 8002254:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8002428 <kanan+0x438>
 8002258:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 800225c:	f00f fedb 	bl	8012016 <fmax>
 8002260:	eeb0 7a40 	vmov.f32	s14, s0
 8002264:	eef0 7a60 	vmov.f32	s15, s1
 8002268:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 8002430 <kanan+0x440>
 800226c:	eeb0 0a47 	vmov.f32	s0, s14
 8002270:	eef0 0a67 	vmov.f32	s1, s15
 8002274:	f00f fef9 	bl	801206a <fmin>
 8002278:	eeb0 7a40 	vmov.f32	s14, s0
 800227c:	eef0 7a60 	vmov.f32	s15, s1
 8002280:	e01d      	b.n	80022be <kanan+0x2ce>
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800228e:	f7fe fc25 	bl	8000adc <__aeabi_dcmplt>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <kanan+0x2ae>
 8002298:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002420 <kanan+0x430>
 800229c:	e00f      	b.n	80022be <kanan+0x2ce>
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80022aa:	f7fe fc35 	bl	8000b18 <__aeabi_dcmpgt>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <kanan+0x2ca>
 80022b4:	ed9f 7b60 	vldr	d7, [pc, #384]	@ 8002438 <kanan+0x448>
 80022b8:	e001      	b.n	80022be <kanan+0x2ce>
 80022ba:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002440 <kanan+0x450>
 80022be:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 550 || M3 < -550) ? fmin(fmax(M3, -2600), 2600) : ((M3 < 0) ? -550 : ((M3 > 0) ? 550 : 0));
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	4b60      	ldr	r3, [pc, #384]	@ (8002448 <kanan+0x458>)
 80022c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80022cc:	f7fe fc24 	bl	8000b18 <__aeabi_dcmpgt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <kanan+0x2fa>
 80022d6:	a352      	add	r3, pc, #328	@ (adr r3, 8002420 <kanan+0x430>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80022e0:	f7fe fbfc 	bl	8000adc <__aeabi_dcmplt>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <kanan+0x328>
 80022ea:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8002428 <kanan+0x438>
 80022ee:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80022f2:	f00f fe90 	bl	8012016 <fmax>
 80022f6:	eeb0 7a40 	vmov.f32	s14, s0
 80022fa:	eef0 7a60 	vmov.f32	s15, s1
 80022fe:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8002430 <kanan+0x440>
 8002302:	eeb0 0a47 	vmov.f32	s0, s14
 8002306:	eef0 0a67 	vmov.f32	s1, s15
 800230a:	f00f feae 	bl	801206a <fmin>
 800230e:	eeb0 7a40 	vmov.f32	s14, s0
 8002312:	eef0 7a60 	vmov.f32	s15, s1
 8002316:	e01d      	b.n	8002354 <kanan+0x364>
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002324:	f7fe fbda 	bl	8000adc <__aeabi_dcmplt>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <kanan+0x344>
 800232e:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8002420 <kanan+0x430>
 8002332:	e00f      	b.n	8002354 <kanan+0x364>
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002340:	f7fe fbea 	bl	8000b18 <__aeabi_dcmpgt>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <kanan+0x360>
 800234a:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8002438 <kanan+0x448>
 800234e:	e001      	b.n	8002354 <kanan+0x364>
 8002350:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8002440 <kanan+0x450>
 8002354:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 550 || M4 < -550) ? fmin(fmax(M4, -2600), 2600) : ((M4 < 0) ? -550 : ((M4 > 0) ? 550 : 0));
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	4b3a      	ldr	r3, [pc, #232]	@ (8002448 <kanan+0x458>)
 800235e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002362:	f7fe fbd9 	bl	8000b18 <__aeabi_dcmpgt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <kanan+0x390>
 800236c:	a32c      	add	r3, pc, #176	@ (adr r3, 8002420 <kanan+0x430>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002376:	f7fe fbb1 	bl	8000adc <__aeabi_dcmplt>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d016      	beq.n	80023ae <kanan+0x3be>
 8002380:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8002428 <kanan+0x438>
 8002384:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8002388:	f00f fe45 	bl	8012016 <fmax>
 800238c:	eeb0 7a40 	vmov.f32	s14, s0
 8002390:	eef0 7a60 	vmov.f32	s15, s1
 8002394:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8002430 <kanan+0x440>
 8002398:	eeb0 0a47 	vmov.f32	s0, s14
 800239c:	eef0 0a67 	vmov.f32	s1, s15
 80023a0:	f00f fe63 	bl	801206a <fmin>
 80023a4:	eeb0 7a40 	vmov.f32	s14, s0
 80023a8:	eef0 7a60 	vmov.f32	s15, s1
 80023ac:	e01d      	b.n	80023ea <kanan+0x3fa>
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023ba:	f7fe fb8f 	bl	8000adc <__aeabi_dcmplt>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <kanan+0x3da>
 80023c4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002420 <kanan+0x430>
 80023c8:	e00f      	b.n	80023ea <kanan+0x3fa>
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023d6:	f7fe fb9f 	bl	8000b18 <__aeabi_dcmpgt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <kanan+0x3f6>
 80023e0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8002438 <kanan+0x448>
 80023e4:	e001      	b.n	80023ea <kanan+0x3fa>
 80023e6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002440 <kanan+0x450>
 80023ea:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 80023ee:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80023f2:	2006      	movs	r0, #6
 80023f4:	f7fe fe32 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 80023f8:	ed97 0b08 	vldr	d0, [r7, #32]
 80023fc:	2008      	movs	r0, #8
 80023fe:	f7fe fe2d 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8002402:	ed97 0b06 	vldr	d0, [r7, #24]
 8002406:	2004      	movs	r0, #4
 8002408:	f7fe fe28 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 800240c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002410:	2005      	movs	r0, #5
 8002412:	f7fe fe23 	bl	800105c <setMotorSpeed>
}
 8002416:	bf00      	nop
 8002418:	3758      	adds	r7, #88	@ 0x58
 800241a:	46bd      	mov	sp, r7
 800241c:	bdb0      	pop	{r4, r5, r7, pc}
 800241e:	bf00      	nop
 8002420:	00000000 	.word	0x00000000
 8002424:	c0813000 	.word	0xc0813000
 8002428:	00000000 	.word	0x00000000
 800242c:	c0a45000 	.word	0xc0a45000
 8002430:	00000000 	.word	0x00000000
 8002434:	40a45000 	.word	0x40a45000
 8002438:	00000000 	.word	0x00000000
 800243c:	40813000 	.word	0x40813000
	...
 8002448:	40813000 	.word	0x40813000
 800244c:	66666666 	.word	0x66666666
 8002450:	401e6666 	.word	0x401e6666
 8002454:	667f3bcc 	.word	0x667f3bcc
 8002458:	bfe6a09e 	.word	0xbfe6a09e
 800245c:	667f3bcd 	.word	0x667f3bcd
 8002460:	3fe6a09e 	.word	0x3fe6a09e
 8002464:	667f3bcd 	.word	0x667f3bcd
 8002468:	bfe6a09e 	.word	0xbfe6a09e
 800246c:	667f3bcc 	.word	0x667f3bcc
 8002470:	3fe6a09e 	.word	0x3fe6a09e
 8002474:	667f3bce 	.word	0x667f3bce
 8002478:	bfe6a09e 	.word	0xbfe6a09e
 800247c:	667f3bce 	.word	0x667f3bce
 8002480:	3fe6a09e 	.word	0x3fe6a09e
 8002484:	667f3bcb 	.word	0x667f3bcb
 8002488:	3fe6a09e 	.word	0x3fe6a09e
 800248c:	4189374c 	.word	0x4189374c
 8002490:	3ff0e560 	.word	0x3ff0e560
 8002494:	00000000 	.word	0x00000000

08002498 <start>:

void start(int Vx, int Vy, int W, uint8_t battery)
{
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b096      	sub	sp, #88	@ 0x58
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	70fb      	strb	r3, [r7, #3]
    double R = 7.6;
 80024a6:	f60f 43e4 	addw	r3, pc, #3300	@ 0xce4
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double M1, M2, M3, M4;

    switch (battery)
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	2b0a      	cmp	r3, #10
 80024b8:	f200 850d 	bhi.w	8002ed6 <start+0xa3e>
 80024bc:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <start+0x2c>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024f1 	.word	0x080024f1
 80024c8:	080026a5 	.word	0x080026a5
 80024cc:	08002857 	.word	0x08002857
 80024d0:	080029f5 	.word	0x080029f5
 80024d4:	08002ba7 	.word	0x08002ba7
 80024d8:	08002ed7 	.word	0x08002ed7
 80024dc:	08002ed7 	.word	0x08002ed7
 80024e0:	08002ed7 	.word	0x08002ed7
 80024e4:	08002ed7 	.word	0x08002ed7
 80024e8:	08002ed7 	.word	0x08002ed7
 80024ec:	08002d59 	.word	0x08002d59
    {
		case 1: // 24.3 < x < 24.7
			M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7fe f817 	bl	8000524 <__aeabi_i2d>
 80024f6:	f60f 439c 	addw	r3, pc, #3228	@ 0xc9c
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe f87b 	bl	80005f8 <__aeabi_dmul>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4614      	mov	r4, r2
 8002508:	461d      	mov	r5, r3
 800250a:	68b8      	ldr	r0, [r7, #8]
 800250c:	f7fe f80a 	bl	8000524 <__aeabi_i2d>
 8002510:	f60f 4388 	addw	r3, pc, #3208	@ 0xc88
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f86e 	bl	80005f8 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fd feb2 	bl	800028c <__adddf3>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4614      	mov	r4, r2
 800252e:	461d      	mov	r5, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fd fff7 	bl	8000524 <__aeabi_i2d>
 8002536:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800253a:	f7fe f85d 	bl	80005f8 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fd fe9f 	bl	8000288 <__aeabi_dsub>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.057;
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7fd ffe6 	bl	8000524 <__aeabi_i2d>
 8002558:	f60f 4348 	addw	r3, pc, #3144	@ 0xc48
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe f84a 	bl	80005f8 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	68b8      	ldr	r0, [r7, #8]
 800256e:	f7fd ffd9 	bl	8000524 <__aeabi_i2d>
 8002572:	f60f 4320 	addw	r3, pc, #3104	@ 0xc20
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fe f83d 	bl	80005f8 <__aeabi_dmul>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fd fe81 	bl	800028c <__adddf3>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fd ffc6 	bl	8000524 <__aeabi_i2d>
 8002598:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800259c:	f7fe f82c 	bl	80005f8 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe6e 	bl	8000288 <__aeabi_dsub>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f60f 33f4 	addw	r3, pc, #3060	@ 0xbf4
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fe f81c 	bl	80005f8 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.058;
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7fd ffab 	bl	8000524 <__aeabi_i2d>
 80025ce:	f60f 33e4 	addw	r3, pc, #3044	@ 0xbe4
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f80f 	bl	80005f8 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	461d      	mov	r5, r3
 80025e2:	68b8      	ldr	r0, [r7, #8]
 80025e4:	f7fd ff9e 	bl	8000524 <__aeabi_i2d>
 80025e8:	f60f 33d0 	addw	r3, pc, #3024	@ 0xbd0
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fe f802 	bl	80005f8 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4620      	mov	r0, r4
 80025fa:	4629      	mov	r1, r5
 80025fc:	f7fd fe46 	bl	800028c <__adddf3>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4614      	mov	r4, r2
 8002606:	461d      	mov	r5, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fd ff8b 	bl	8000524 <__aeabi_i2d>
 800260e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002612:	f7fd fff1 	bl	80005f8 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fd fe33 	bl	8000288 <__aeabi_dsub>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f60f 3398 	addw	r3, pc, #2968	@ 0xb98
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fd ffe1 	bl	80005f8 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7fd ff70 	bl	8000524 <__aeabi_i2d>
 8002644:	f60f 3384 	addw	r3, pc, #2948	@ 0xb84
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fd ffd4 	bl	80005f8 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	68b8      	ldr	r0, [r7, #8]
 800265a:	f7fd ff63 	bl	8000524 <__aeabi_i2d>
 800265e:	f60f 3374 	addw	r3, pc, #2932	@ 0xb74
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f7fd ffc7 	bl	80005f8 <__aeabi_dmul>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4620      	mov	r0, r4
 8002670:	4629      	mov	r1, r5
 8002672:	f7fd fe0b 	bl	800028c <__adddf3>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4614      	mov	r4, r2
 800267c:	461d      	mov	r5, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fd ff50 	bl	8000524 <__aeabi_i2d>
 8002684:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002688:	f7fd ffb6 	bl	80005f8 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fd fdf8 	bl	8000288 <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 80026a0:	f000 bc19 	b.w	8002ed6 <start+0xa3e>
    	case 2: // > 24.3
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7fd ff3d 	bl	8000524 <__aeabi_i2d>
 80026aa:	f60f 23e8 	addw	r3, pc, #2792	@ 0xae8
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ffa1 	bl	80005f8 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4614      	mov	r4, r2
 80026bc:	461d      	mov	r5, r3
 80026be:	68b8      	ldr	r0, [r7, #8]
 80026c0:	f7fd ff30 	bl	8000524 <__aeabi_i2d>
 80026c4:	f60f 23d4 	addw	r3, pc, #2772	@ 0xad4
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fd ff94 	bl	80005f8 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd fdd8 	bl	800028c <__adddf3>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7fd ff1d 	bl	8000524 <__aeabi_i2d>
 80026ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80026ee:	f7fd ff83 	bl	80005f8 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7fd fdc5 	bl	8000288 <__aeabi_dsub>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.04;
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7fd ff0c 	bl	8000524 <__aeabi_i2d>
 800270c:	f60f 2394 	addw	r3, pc, #2708	@ 0xa94
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd ff70 	bl	80005f8 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4614      	mov	r4, r2
 800271e:	461d      	mov	r5, r3
 8002720:	68b8      	ldr	r0, [r7, #8]
 8002722:	f7fd feff 	bl	8000524 <__aeabi_i2d>
 8002726:	f60f 236c 	addw	r3, pc, #2668	@ 0xa6c
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fd ff63 	bl	80005f8 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4620      	mov	r0, r4
 8002738:	4629      	mov	r1, r5
 800273a:	f7fd fda7 	bl	800028c <__adddf3>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4614      	mov	r4, r2
 8002744:	461d      	mov	r5, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd feec 	bl	8000524 <__aeabi_i2d>
 800274c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002750:	f7fd ff52 	bl	80005f8 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4620      	mov	r0, r4
 800275a:	4629      	mov	r1, r5
 800275c:	f7fd fd94 	bl	8000288 <__aeabi_dsub>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f60f 2370 	addw	r3, pc, #2672	@ 0xa70
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd ff42 	bl	80005f8 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.04;
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7fd fed1 	bl	8000524 <__aeabi_i2d>
 8002782:	f60f 2330 	addw	r3, pc, #2608	@ 0xa30
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fd ff35 	bl	80005f8 <__aeabi_dmul>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4614      	mov	r4, r2
 8002794:	461d      	mov	r5, r3
 8002796:	68b8      	ldr	r0, [r7, #8]
 8002798:	f7fd fec4 	bl	8000524 <__aeabi_i2d>
 800279c:	f60f 231c 	addw	r3, pc, #2588	@ 0xa1c
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd ff28 	bl	80005f8 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7fd fd6c 	bl	800028c <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd feb1 	bl	8000524 <__aeabi_i2d>
 80027c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027c6:	f7fd ff17 	bl	80005f8 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4620      	mov	r0, r4
 80027d0:	4629      	mov	r1, r5
 80027d2:	f7fd fd59 	bl	8000288 <__aeabi_dsub>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f60f 13fc 	addw	r3, pc, #2556	@ 0x9fc
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd ff07 	bl	80005f8 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7fd fe96 	bl	8000524 <__aeabi_i2d>
 80027f8:	f60f 13d0 	addw	r3, pc, #2512	@ 0x9d0
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	f7fd fefa 	bl	80005f8 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4614      	mov	r4, r2
 800280a:	461d      	mov	r5, r3
 800280c:	68b8      	ldr	r0, [r7, #8]
 800280e:	f7fd fe89 	bl	8000524 <__aeabi_i2d>
 8002812:	f60f 13c0 	addw	r3, pc, #2496	@ 0x9c0
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f7fd feed 	bl	80005f8 <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fd fd31 	bl	800028c <__adddf3>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4614      	mov	r4, r2
 8002830:	461d      	mov	r5, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fd fe76 	bl	8000524 <__aeabi_i2d>
 8002838:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800283c:	f7fd fedc 	bl	80005f8 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4620      	mov	r0, r4
 8002846:	4629      	mov	r1, r5
 8002848:	f7fd fd1e 	bl	8000288 <__aeabi_dsub>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    		break;
 8002854:	e33f      	b.n	8002ed6 <start+0xa3e>
		case 3: // 23.8 < x < 24.3
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7fd fe64 	bl	8000524 <__aeabi_i2d>
 800285c:	f60f 1334 	addw	r3, pc, #2356	@ 0x934
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fec8 	bl	80005f8 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	68b8      	ldr	r0, [r7, #8]
 8002872:	f7fd fe57 	bl	8000524 <__aeabi_i2d>
 8002876:	f60f 1324 	addw	r3, pc, #2340	@ 0x924
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f7fd febb 	bl	80005f8 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4620      	mov	r0, r4
 8002888:	4629      	mov	r1, r5
 800288a:	f7fd fcff 	bl	800028c <__adddf3>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4614      	mov	r4, r2
 8002894:	461d      	mov	r5, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fd fe44 	bl	8000524 <__aeabi_i2d>
 800289c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028a0:	f7fd feaa 	bl	80005f8 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4620      	mov	r0, r4
 80028aa:	4629      	mov	r1, r5
 80028ac:	f7fd fcec 	bl	8000288 <__aeabi_dsub>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.062;
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7fd fe33 	bl	8000524 <__aeabi_i2d>
 80028be:	f60f 03e4 	addw	r3, pc, #2276	@ 0x8e4
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f7fd fe97 	bl	80005f8 <__aeabi_dmul>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4614      	mov	r4, r2
 80028d0:	461d      	mov	r5, r3
 80028d2:	68b8      	ldr	r0, [r7, #8]
 80028d4:	f7fd fe26 	bl	8000524 <__aeabi_i2d>
 80028d8:	f60f 03b8 	addw	r3, pc, #2232	@ 0x8b8
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fe8a 	bl	80005f8 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fcce 	bl	800028c <__adddf3>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4614      	mov	r4, r2
 80028f6:	461d      	mov	r5, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fd fe13 	bl	8000524 <__aeabi_i2d>
 80028fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002902:	f7fd fe79 	bl	80005f8 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd fcbb 	bl	8000288 <__aeabi_dsub>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f60f 03c8 	addw	r3, pc, #2248	@ 0x8c8
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd fe69 	bl	80005f8 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7fd fdf8 	bl	8000524 <__aeabi_i2d>
 8002934:	f60f 037c 	addw	r3, pc, #2172	@ 0x87c
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fe5c 	bl	80005f8 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4614      	mov	r4, r2
 8002946:	461d      	mov	r5, r3
 8002948:	68b8      	ldr	r0, [r7, #8]
 800294a:	f7fd fdeb 	bl	8000524 <__aeabi_i2d>
 800294e:	f60f 036c 	addw	r3, pc, #2156	@ 0x86c
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fe4f 	bl	80005f8 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fc93 	bl	800028c <__adddf3>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4614      	mov	r4, r2
 800296c:	461d      	mov	r5, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd fdd8 	bl	8000524 <__aeabi_i2d>
 8002974:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002978:	f7fd fe3e 	bl	80005f8 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fc80 	bl	8000288 <__aeabi_dsub>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7fd fdc7 	bl	8000524 <__aeabi_i2d>
 8002996:	f60f 0334 	addw	r3, pc, #2100	@ 0x834
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fe2b 	bl	80005f8 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4614      	mov	r4, r2
 80029a8:	461d      	mov	r5, r3
 80029aa:	68b8      	ldr	r0, [r7, #8]
 80029ac:	f7fd fdba 	bl	8000524 <__aeabi_i2d>
 80029b0:	f60f 0320 	addw	r3, pc, #2080	@ 0x820
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fe1e 	bl	80005f8 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd fc62 	bl	800028c <__adddf3>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fd fda7 	bl	8000524 <__aeabi_i2d>
 80029d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80029da:	f7fd fe0d 	bl	80005f8 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4620      	mov	r0, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	f7fd fc4f 	bl	8000288 <__aeabi_dsub>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 80029f2:	e270      	b.n	8002ed6 <start+0xa3e>
		case 4: // 23.4 < x < 23.8
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7fd fd95 	bl	8000524 <__aeabi_i2d>
 80029fa:	f20f 7398 	addw	r3, pc, #1944	@ 0x798
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fdf9 	bl	80005f8 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	461d      	mov	r5, r3
 8002a0e:	68b8      	ldr	r0, [r7, #8]
 8002a10:	f7fd fd88 	bl	8000524 <__aeabi_i2d>
 8002a14:	f20f 7384 	addw	r3, pc, #1924	@ 0x784
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fdec 	bl	80005f8 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4620      	mov	r0, r4
 8002a26:	4629      	mov	r1, r5
 8002a28:	f7fd fc30 	bl	800028c <__adddf3>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4614      	mov	r4, r2
 8002a32:	461d      	mov	r5, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7fd fd75 	bl	8000524 <__aeabi_i2d>
 8002a3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a3e:	f7fd fddb 	bl	80005f8 <__aeabi_dmul>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4620      	mov	r0, r4
 8002a48:	4629      	mov	r1, r5
 8002a4a:	f7fd fc1d 	bl	8000288 <__aeabi_dsub>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.06;
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7fd fd64 	bl	8000524 <__aeabi_i2d>
 8002a5c:	f20f 7344 	addw	r3, pc, #1860	@ 0x744
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fdc8 	bl	80005f8 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	68b8      	ldr	r0, [r7, #8]
 8002a72:	f7fd fd57 	bl	8000524 <__aeabi_i2d>
 8002a76:	f20f 731c 	addw	r3, pc, #1820	@ 0x71c
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fdbb 	bl	80005f8 <__aeabi_dmul>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fbff 	bl	800028c <__adddf3>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	461d      	mov	r5, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd fd44 	bl	8000524 <__aeabi_i2d>
 8002a9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002aa0:	f7fd fdaa 	bl	80005f8 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	4629      	mov	r1, r5
 8002aac:	f7fd fbec 	bl	8000288 <__aeabi_dsub>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f20f 7330 	addw	r3, pc, #1840	@ 0x730
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fd9a 	bl	80005f8 <__aeabi_dmul>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.03;
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7fd fd29 	bl	8000524 <__aeabi_i2d>
 8002ad2:	f20f 63e0 	addw	r3, pc, #1760	@ 0x6e0
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd fd8d 	bl	80005f8 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f7fd fd1c 	bl	8000524 <__aeabi_i2d>
 8002aec:	f20f 63cc 	addw	r3, pc, #1740	@ 0x6cc
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fd80 	bl	80005f8 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4620      	mov	r0, r4
 8002afe:	4629      	mov	r1, r5
 8002b00:	f7fd fbc4 	bl	800028c <__adddf3>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4614      	mov	r4, r2
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7fd fd09 	bl	8000524 <__aeabi_i2d>
 8002b12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b16:	f7fd fd6f 	bl	80005f8 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4629      	mov	r1, r5
 8002b22:	f7fd fbb1 	bl	8000288 <__aeabi_dsub>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f20f 63c4 	addw	r3, pc, #1732	@ 0x6c4
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fd5f 	bl	80005f8 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7fd fcee 	bl	8000524 <__aeabi_i2d>
 8002b48:	f20f 6380 	addw	r3, pc, #1664	@ 0x680
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fd52 	bl	80005f8 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4614      	mov	r4, r2
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	68b8      	ldr	r0, [r7, #8]
 8002b5e:	f7fd fce1 	bl	8000524 <__aeabi_i2d>
 8002b62:	f20f 6370 	addw	r3, pc, #1648	@ 0x670
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd fd45 	bl	80005f8 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f7fd fb89 	bl	800028c <__adddf3>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4614      	mov	r4, r2
 8002b80:	461d      	mov	r5, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd fcce 	bl	8000524 <__aeabi_i2d>
 8002b88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b8c:	f7fd fd34 	bl	80005f8 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f7fd fb76 	bl	8000288 <__aeabi_dsub>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		    break;
 8002ba4:	e197      	b.n	8002ed6 <start+0xa3e>
		case 5: // 23.5 < x < 23.8
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7fd fcbc 	bl	8000524 <__aeabi_i2d>
 8002bac:	f20f 53e4 	addw	r3, pc, #1508	@ 0x5e4
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fd20 	bl	80005f8 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	68b8      	ldr	r0, [r7, #8]
 8002bc2:	f7fd fcaf 	bl	8000524 <__aeabi_i2d>
 8002bc6:	f20f 53d4 	addw	r3, pc, #1492	@ 0x5d4
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fd13 	bl	80005f8 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	4629      	mov	r1, r5
 8002bda:	f7fd fb57 	bl	800028c <__adddf3>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4614      	mov	r4, r2
 8002be4:	461d      	mov	r5, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd fc9c 	bl	8000524 <__aeabi_i2d>
 8002bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002bf0:	f7fd fd02 	bl	80005f8 <__aeabi_dmul>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	f7fd fb44 	bl	8000288 <__aeabi_dsub>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.02;
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7fd fc8b 	bl	8000524 <__aeabi_i2d>
 8002c0e:	f20f 5394 	addw	r3, pc, #1428	@ 0x594
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fcef 	bl	80005f8 <__aeabi_dmul>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4614      	mov	r4, r2
 8002c20:	461d      	mov	r5, r3
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f7fd fc7e 	bl	8000524 <__aeabi_i2d>
 8002c28:	f20f 5368 	addw	r3, pc, #1384	@ 0x568
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fce2 	bl	80005f8 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	f7fd fb26 	bl	800028c <__adddf3>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd fc6b 	bl	8000524 <__aeabi_i2d>
 8002c4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c52:	f7fd fcd1 	bl	80005f8 <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fb13 	bl	8000288 <__aeabi_dsub>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f20f 5390 	addw	r3, pc, #1424	@ 0x590
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f7fd fcc1 	bl	80005f8 <__aeabi_dmul>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.04;
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7fd fc50 	bl	8000524 <__aeabi_i2d>
 8002c84:	f20f 532c 	addw	r3, pc, #1324	@ 0x52c
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd fcb4 	bl	80005f8 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4614      	mov	r4, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	68b8      	ldr	r0, [r7, #8]
 8002c9a:	f7fd fc43 	bl	8000524 <__aeabi_i2d>
 8002c9e:	f20f 531c 	addw	r3, pc, #1308	@ 0x51c
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f7fd fca7 	bl	80005f8 <__aeabi_dmul>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd faeb 	bl	800028c <__adddf3>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4614      	mov	r4, r2
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fc30 	bl	8000524 <__aeabi_i2d>
 8002cc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002cc8:	f7fd fc96 	bl	80005f8 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd fad8 	bl	8000288 <__aeabi_dsub>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f20f 43f8 	addw	r3, pc, #1272	@ 0x4f8
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd fc86 	bl	80005f8 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7fd fc15 	bl	8000524 <__aeabi_i2d>
 8002cfa:	f20f 43d0 	addw	r3, pc, #1232	@ 0x4d0
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f7fd fc79 	bl	80005f8 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	68b8      	ldr	r0, [r7, #8]
 8002d10:	f7fd fc08 	bl	8000524 <__aeabi_i2d>
 8002d14:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fc6c 	bl	80005f8 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4620      	mov	r0, r4
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7fd fab0 	bl	800028c <__adddf3>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7fd fbf5 	bl	8000524 <__aeabi_i2d>
 8002d3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d3e:	f7fd fc5b 	bl	80005f8 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fa9d 	bl	8000288 <__aeabi_dsub>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		    break;
 8002d56:	e0be      	b.n	8002ed6 <start+0xa3e>
		case 11:
			M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7fd fbe3 	bl	8000524 <__aeabi_i2d>
 8002d5e:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fc47 	bl	80005f8 <__aeabi_dmul>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4614      	mov	r4, r2
 8002d70:	461d      	mov	r5, r3
 8002d72:	68b8      	ldr	r0, [r7, #8]
 8002d74:	f7fd fbd6 	bl	8000524 <__aeabi_i2d>
 8002d78:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f7fd fc3a 	bl	80005f8 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fa7e 	bl	800028c <__adddf3>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fd fbc3 	bl	8000524 <__aeabi_i2d>
 8002d9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002da2:	f7fd fc29 	bl	80005f8 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4620      	mov	r0, r4
 8002dac:	4629      	mov	r1, r5
 8002dae:	f7fd fa6b 	bl	8000288 <__aeabi_dsub>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7fd fbb2 	bl	8000524 <__aeabi_i2d>
 8002dc0:	a3f8      	add	r3, pc, #992	@ (adr r3, 80031a4 <start+0xd0c>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f7fd fc17 	bl	80005f8 <__aeabi_dmul>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4614      	mov	r4, r2
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	68b8      	ldr	r0, [r7, #8]
 8002dd4:	f7fd fba6 	bl	8000524 <__aeabi_i2d>
 8002dd8:	a3ee      	add	r3, pc, #952	@ (adr r3, 8003194 <start+0xcfc>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fc0b 	bl	80005f8 <__aeabi_dmul>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fa4f 	bl	800028c <__adddf3>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4614      	mov	r4, r2
 8002df4:	461d      	mov	r5, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd fb94 	bl	8000524 <__aeabi_i2d>
 8002dfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e00:	f7fd fbfa 	bl	80005f8 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4620      	mov	r0, r4
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	f7fd fa3c 	bl	8000288 <__aeabi_dsub>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fd fb83 	bl	8000524 <__aeabi_i2d>
 8002e1e:	a3e5      	add	r3, pc, #916	@ (adr r3, 80031b4 <start+0xd1c>)
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f7fd fbe8 	bl	80005f8 <__aeabi_dmul>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4614      	mov	r4, r2
 8002e2e:	461d      	mov	r5, r3
 8002e30:	68b8      	ldr	r0, [r7, #8]
 8002e32:	f7fd fb77 	bl	8000524 <__aeabi_i2d>
 8002e36:	a3e1      	add	r3, pc, #900	@ (adr r3, 80031bc <start+0xd24>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	f7fd fbdc 	bl	80005f8 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4620      	mov	r0, r4
 8002e46:	4629      	mov	r1, r5
 8002e48:	f7fd fa20 	bl	800028c <__adddf3>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fd fb65 	bl	8000524 <__aeabi_i2d>
 8002e5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e5e:	f7fd fbcb 	bl	80005f8 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd fa0d 	bl	8000288 <__aeabi_dsub>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7fd fb54 	bl	8000524 <__aeabi_i2d>
 8002e7c:	a3d3      	add	r3, pc, #844	@ (adr r3, 80031cc <start+0xd34>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fbb9 	bl	80005f8 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4614      	mov	r4, r2
 8002e8c:	461d      	mov	r5, r3
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f7fd fb48 	bl	8000524 <__aeabi_i2d>
 8002e94:	a3cf      	add	r3, pc, #828	@ (adr r3, 80031d4 <start+0xd3c>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd fbad 	bl	80005f8 <__aeabi_dmul>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f7fd f9f1 	bl	800028c <__adddf3>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4614      	mov	r4, r2
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fb36 	bl	8000524 <__aeabi_i2d>
 8002eb8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ebc:	f7fd fb9c 	bl	80005f8 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd f9de 	bl	8000288 <__aeabi_dsub>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 8002ed4:	bf00      	nop
	}

    double V1 = (M1 > 500 || M1 < -500) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -500 : ((M1 > 0) ? 500 : 0));
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	4bab      	ldr	r3, [pc, #684]	@ (8003188 <start+0xcf0>)
 8002edc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ee0:	f7fd fe1a 	bl	8000b18 <__aeabi_dcmpgt>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <start+0xa66>
 8002eea:	a39d      	add	r3, pc, #628	@ (adr r3, 8003160 <start+0xcc8>)
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ef4:	f7fd fdf2 	bl	8000adc <__aeabi_dcmplt>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <start+0xa94>
 8002efe:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8003168 <start+0xcd0>
 8002f02:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002f06:	f00f f886 	bl	8012016 <fmax>
 8002f0a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f0e:	eef0 7a60 	vmov.f32	s15, s1
 8002f12:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8003170 <start+0xcd8>
 8002f16:	eeb0 0a47 	vmov.f32	s0, s14
 8002f1a:	eef0 0a67 	vmov.f32	s1, s15
 8002f1e:	f00f f8a4 	bl	801206a <fmin>
 8002f22:	eeb0 7a40 	vmov.f32	s14, s0
 8002f26:	eef0 7a60 	vmov.f32	s15, s1
 8002f2a:	e01d      	b.n	8002f68 <start+0xad0>
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002f38:	f7fd fdd0 	bl	8000adc <__aeabi_dcmplt>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <start+0xab0>
 8002f42:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8003160 <start+0xcc8>
 8002f46:	e00f      	b.n	8002f68 <start+0xad0>
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002f54:	f7fd fde0 	bl	8000b18 <__aeabi_dcmpgt>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <start+0xacc>
 8002f5e:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8003178 <start+0xce0>
 8002f62:	e001      	b.n	8002f68 <start+0xad0>
 8002f64:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8003180 <start+0xce8>
 8002f68:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    double V2 = (M2 > 500 || M2 < -500) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -500 : ((M2 > 0) ? 500 : 0));
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	4b85      	ldr	r3, [pc, #532]	@ (8003188 <start+0xcf0>)
 8002f72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002f76:	f7fd fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <start+0xafc>
 8002f80:	a377      	add	r3, pc, #476	@ (adr r3, 8003160 <start+0xcc8>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002f8a:	f7fd fda7 	bl	8000adc <__aeabi_dcmplt>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d016      	beq.n	8002fc2 <start+0xb2a>
 8002f94:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8003168 <start+0xcd0>
 8002f98:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8002f9c:	f00f f83b 	bl	8012016 <fmax>
 8002fa0:	eeb0 7a40 	vmov.f32	s14, s0
 8002fa4:	eef0 7a60 	vmov.f32	s15, s1
 8002fa8:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 8003170 <start+0xcd8>
 8002fac:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb0:	eef0 0a67 	vmov.f32	s1, s15
 8002fb4:	f00f f859 	bl	801206a <fmin>
 8002fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002fbc:	eef0 7a60 	vmov.f32	s15, s1
 8002fc0:	e01d      	b.n	8002ffe <start+0xb66>
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002fce:	f7fd fd85 	bl	8000adc <__aeabi_dcmplt>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <start+0xb46>
 8002fd8:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8003160 <start+0xcc8>
 8002fdc:	e00f      	b.n	8002ffe <start+0xb66>
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002fea:	f7fd fd95 	bl	8000b18 <__aeabi_dcmpgt>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <start+0xb62>
 8002ff4:	ed9f 7b60 	vldr	d7, [pc, #384]	@ 8003178 <start+0xce0>
 8002ff8:	e001      	b.n	8002ffe <start+0xb66>
 8002ffa:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8003180 <start+0xce8>
 8002ffe:	ed87 7b08 	vstr	d7, [r7, #32]
    double V3 = (M3 > 500 || M3 < -500) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -500 : ((M3 > 0) ? 500 : 0));
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	4b60      	ldr	r3, [pc, #384]	@ (8003188 <start+0xcf0>)
 8003008:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800300c:	f7fd fd84 	bl	8000b18 <__aeabi_dcmpgt>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <start+0xb92>
 8003016:	a352      	add	r3, pc, #328	@ (adr r3, 8003160 <start+0xcc8>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003020:	f7fd fd5c 	bl	8000adc <__aeabi_dcmplt>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <start+0xbc0>
 800302a:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8003168 <start+0xcd0>
 800302e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8003032:	f00e fff0 	bl	8012016 <fmax>
 8003036:	eeb0 7a40 	vmov.f32	s14, s0
 800303a:	eef0 7a60 	vmov.f32	s15, s1
 800303e:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8003170 <start+0xcd8>
 8003042:	eeb0 0a47 	vmov.f32	s0, s14
 8003046:	eef0 0a67 	vmov.f32	s1, s15
 800304a:	f00f f80e 	bl	801206a <fmin>
 800304e:	eeb0 7a40 	vmov.f32	s14, s0
 8003052:	eef0 7a60 	vmov.f32	s15, s1
 8003056:	e01d      	b.n	8003094 <start+0xbfc>
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003064:	f7fd fd3a 	bl	8000adc <__aeabi_dcmplt>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <start+0xbdc>
 800306e:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8003160 <start+0xcc8>
 8003072:	e00f      	b.n	8003094 <start+0xbfc>
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003080:	f7fd fd4a 	bl	8000b18 <__aeabi_dcmpgt>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <start+0xbf8>
 800308a:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8003178 <start+0xce0>
 800308e:	e001      	b.n	8003094 <start+0xbfc>
 8003090:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8003180 <start+0xce8>
 8003094:	ed87 7b06 	vstr	d7, [r7, #24]
    double V4 = (M4 > 500 || M4 < -500) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -500 : ((M4 > 0) ? 500 : 0));
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	4b3a      	ldr	r3, [pc, #232]	@ (8003188 <start+0xcf0>)
 800309e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80030a2:	f7fd fd39 	bl	8000b18 <__aeabi_dcmpgt>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <start+0xc28>
 80030ac:	a32c      	add	r3, pc, #176	@ (adr r3, 8003160 <start+0xcc8>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80030b6:	f7fd fd11 	bl	8000adc <__aeabi_dcmplt>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d016      	beq.n	80030ee <start+0xc56>
 80030c0:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8003168 <start+0xcd0>
 80030c4:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80030c8:	f00e ffa5 	bl	8012016 <fmax>
 80030cc:	eeb0 7a40 	vmov.f32	s14, s0
 80030d0:	eef0 7a60 	vmov.f32	s15, s1
 80030d4:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8003170 <start+0xcd8>
 80030d8:	eeb0 0a47 	vmov.f32	s0, s14
 80030dc:	eef0 0a67 	vmov.f32	s1, s15
 80030e0:	f00e ffc3 	bl	801206a <fmin>
 80030e4:	eeb0 7a40 	vmov.f32	s14, s0
 80030e8:	eef0 7a60 	vmov.f32	s15, s1
 80030ec:	e01d      	b.n	800312a <start+0xc92>
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80030fa:	f7fd fcef 	bl	8000adc <__aeabi_dcmplt>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <start+0xc72>
 8003104:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8003160 <start+0xcc8>
 8003108:	e00f      	b.n	800312a <start+0xc92>
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003116:	f7fd fcff 	bl	8000b18 <__aeabi_dcmpgt>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <start+0xc8e>
 8003120:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8003178 <start+0xce0>
 8003124:	e001      	b.n	800312a <start+0xc92>
 8003126:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8003180 <start+0xce8>
 800312a:	ed87 7b04 	vstr	d7, [r7, #16]

    setMotorSpeed(6, V1);
 800312e:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8003132:	2006      	movs	r0, #6
 8003134:	f7fd ff92 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, V2);
 8003138:	ed97 0b08 	vldr	d0, [r7, #32]
 800313c:	2008      	movs	r0, #8
 800313e:	f7fd ff8d 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, V3);
 8003142:	ed97 0b06 	vldr	d0, [r7, #24]
 8003146:	2004      	movs	r0, #4
 8003148:	f7fd ff88 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, V4);
 800314c:	ed97 0b04 	vldr	d0, [r7, #16]
 8003150:	2005      	movs	r0, #5
 8003152:	f7fd ff83 	bl	800105c <setMotorSpeed>
}
 8003156:	bf00      	nop
 8003158:	3758      	adds	r7, #88	@ 0x58
 800315a:	46bd      	mov	sp, r7
 800315c:	bdb0      	pop	{r4, r5, r7, pc}
 800315e:	bf00      	nop
 8003160:	00000000 	.word	0x00000000
 8003164:	c07f4000 	.word	0xc07f4000
 8003168:	00000000 	.word	0x00000000
 800316c:	c0a45000 	.word	0xc0a45000
 8003170:	00000000 	.word	0x00000000
 8003174:	40a45000 	.word	0x40a45000
 8003178:	00000000 	.word	0x00000000
 800317c:	407f4000 	.word	0x407f4000
	...
 8003188:	407f4000 	.word	0x407f4000
 800318c:	66666666 	.word	0x66666666
 8003190:	401e6666 	.word	0x401e6666
 8003194:	667f3bcc 	.word	0x667f3bcc
 8003198:	bfe6a09e 	.word	0xbfe6a09e
 800319c:	667f3bcd 	.word	0x667f3bcd
 80031a0:	3fe6a09e 	.word	0x3fe6a09e
 80031a4:	667f3bcd 	.word	0x667f3bcd
 80031a8:	bfe6a09e 	.word	0xbfe6a09e
 80031ac:	d4fdf3b6 	.word	0xd4fdf3b6
 80031b0:	3ff0e978 	.word	0x3ff0e978
 80031b4:	667f3bcc 	.word	0x667f3bcc
 80031b8:	3fe6a09e 	.word	0x3fe6a09e
 80031bc:	667f3bce 	.word	0x667f3bce
 80031c0:	bfe6a09e 	.word	0xbfe6a09e
 80031c4:	6872b021 	.word	0x6872b021
 80031c8:	3ff0ed91 	.word	0x3ff0ed91
 80031cc:	667f3bce 	.word	0x667f3bce
 80031d0:	3fe6a09e 	.word	0x3fe6a09e
 80031d4:	667f3bcb 	.word	0x667f3bcb
 80031d8:	3fe6a09e 	.word	0x3fe6a09e
 80031dc:	0a3d70a4 	.word	0x0a3d70a4
 80031e0:	3ff0a3d7 	.word	0x3ff0a3d7
 80031e4:	b645a1cb 	.word	0xb645a1cb
 80031e8:	3ff0fdf3 	.word	0x3ff0fdf3
 80031ec:	8f5c28f6 	.word	0x8f5c28f6
 80031f0:	3ff0f5c2 	.word	0x3ff0f5c2
 80031f4:	47ae147b 	.word	0x47ae147b
 80031f8:	3ff07ae1 	.word	0x3ff07ae1
 80031fc:	851eb852 	.word	0x851eb852
 8003200:	3ff051eb 	.word	0x3ff051eb

08003204 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	4603      	mov	r3, r0
 800320c:	460a      	mov	r2, r1
 800320e:	71fb      	strb	r3, [r7, #7]
 8003210:	4613      	mov	r3, r2
 8003212:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	b2db      	uxtb	r3, r3
 800321a:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	79bb      	ldrb	r3, [r7, #6]
 8003220:	4313      	orrs	r3, r2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8003226:	4b16      	ldr	r3, [pc, #88]	@ (8003280 <lcd_write_nibble+0x7c>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	b25a      	sxtb	r2, r3
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	b25b      	sxtb	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b25b      	sxtb	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	b2db      	uxtb	r3, r3
 8003242:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8003244:	f107 020f 	add.w	r2, r7, #15
 8003248:	2364      	movs	r3, #100	@ 0x64
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2301      	movs	r3, #1
 800324e:	214e      	movs	r1, #78	@ 0x4e
 8003250:	480c      	ldr	r0, [pc, #48]	@ (8003284 <lcd_write_nibble+0x80>)
 8003252:	f007 fa0f 	bl	800a674 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f006 fd1a 	bl	8009c90 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	b2db      	uxtb	r3, r3
 8003264:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8003266:	f107 020f 	add.w	r2, r7, #15
 800326a:	2364      	movs	r3, #100	@ 0x64
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2301      	movs	r3, #1
 8003270:	214e      	movs	r1, #78	@ 0x4e
 8003272:	4804      	ldr	r0, [pc, #16]	@ (8003284 <lcd_write_nibble+0x80>)
 8003274:	f007 f9fe 	bl	800a674 <HAL_I2C_Master_Transmit>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200000c8 	.word	0x200000c8
 8003284:	200002e4 	.word	0x200002e4

08003288 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ffad 	bl	8003204 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80032aa:	7bbb      	ldrb	r3, [r7, #14]
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ffa8 	bl	8003204 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d002      	beq.n	80032c0 <lcd_send_cmd+0x38>
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d102      	bne.n	80032c6 <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 80032c0:	2002      	movs	r0, #2
 80032c2:	f006 fce5 	bl	8009c90 <HAL_Delay>
  }
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2101      	movs	r1, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff8a 	bl	8003204 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff85 	bl	8003204 <lcd_write_nibble>
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <lcd_init>:

void lcd_init()
{
 8003302:	b580      	push	{r7, lr}
 8003304:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8003306:	2032      	movs	r0, #50	@ 0x32
 8003308:	f006 fcc2 	bl	8009c90 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800330c:	2100      	movs	r1, #0
 800330e:	2003      	movs	r0, #3
 8003310:	f7ff ff78 	bl	8003204 <lcd_write_nibble>
  HAL_Delay(5);
 8003314:	2005      	movs	r0, #5
 8003316:	f006 fcbb 	bl	8009c90 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800331a:	2100      	movs	r1, #0
 800331c:	2003      	movs	r0, #3
 800331e:	f7ff ff71 	bl	8003204 <lcd_write_nibble>
  HAL_Delay(1);
 8003322:	2001      	movs	r0, #1
 8003324:	f006 fcb4 	bl	8009c90 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8003328:	2100      	movs	r1, #0
 800332a:	2003      	movs	r0, #3
 800332c:	f7ff ff6a 	bl	8003204 <lcd_write_nibble>
  HAL_Delay(1);
 8003330:	2001      	movs	r0, #1
 8003332:	f006 fcad 	bl	8009c90 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8003336:	2100      	movs	r1, #0
 8003338:	2002      	movs	r0, #2
 800333a:	f7ff ff63 	bl	8003204 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 800333e:	2028      	movs	r0, #40	@ 0x28
 8003340:	f7ff ffa2 	bl	8003288 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8003344:	200c      	movs	r0, #12
 8003346:	f7ff ff9f 	bl	8003288 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800334a:	2006      	movs	r0, #6
 800334c:	f7ff ff9c 	bl	8003288 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8003350:	2001      	movs	r0, #1
 8003352:	f7ff ff99 	bl	8003288 <lcd_send_cmd>
  HAL_Delay(2);
 8003356:	2002      	movs	r0, #2
 8003358:	f006 fc9a 	bl	8009c90 <HAL_Delay>
}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}

08003360 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  while (*str)
 8003368:	e006      	b.n	8003378 <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ffab 	bl	80032ce <lcd_send_data>
  while (*str)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f4      	bne.n	800336a <lcd_write_string+0xa>
  }
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	460a      	mov	r2, r1
 8003396:	71fb      	strb	r3, [r7, #7]
 8003398:	4613      	mov	r3, r2
 800339a:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d816      	bhi.n	80033d0 <lcd_set_cursor+0x44>
 80033a2:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <lcd_set_cursor+0x1c>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033bf 	.word	0x080033bf
 80033b0:	080033c5 	.word	0x080033c5
 80033b4:	080033cb 	.word	0x080033cb
  {
  case 0:
    address = 0x00;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
    break;
 80033bc:	e00a      	b.n	80033d4 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 80033be:	2340      	movs	r3, #64	@ 0x40
 80033c0:	73fb      	strb	r3, [r7, #15]
    break;
 80033c2:	e007      	b.n	80033d4 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 80033c4:	2314      	movs	r3, #20
 80033c6:	73fb      	strb	r3, [r7, #15]
    break;
 80033c8:	e004      	b.n	80033d4 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 80033ca:	2354      	movs	r3, #84	@ 0x54
 80033cc:	73fb      	strb	r3, [r7, #15]
    break;
 80033ce:	e001      	b.n	80033d4 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	79bb      	ldrb	r3, [r7, #6]
 80033d8:	4413      	add	r3, r2
 80033da:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff4f 	bl	8003288 <lcd_send_cmd>
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <lcd_clear>:

void lcd_clear(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f7ff ff45 	bl	8003288 <lcd_send_cmd>
  HAL_Delay(2);
 80033fe:	2002      	movs	r0, #2
 8003400:	f006 fc46 	bl	8009c90 <HAL_Delay>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
movingState mode = VOID;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d11d      	bne.n	8003454 <HAL_GPIO_EXTI_Callback+0x4c>
 8003418:	2108      	movs	r1, #8
 800341a:	4890      	ldr	r0, [pc, #576]	@ (800365c <HAL_GPIO_EXTI_Callback+0x254>)
 800341c:	f006 ff9c 	bl	800a358 <HAL_GPIO_ReadPin>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	d116      	bne.n	8003454 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 8003426:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800342a:	488d      	ldr	r0, [pc, #564]	@ (8003660 <HAL_GPIO_EXTI_Callback+0x258>)
 800342c:	f006 ff94 	bl	800a358 <HAL_GPIO_ReadPin>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_GPIO_EXTI_Callback+0x3a>
 8003436:	4b8b      	ldr	r3, [pc, #556]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x25c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3b01      	subs	r3, #1
 800343c:	4a89      	ldr	r2, [pc, #548]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x25c>)
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e004      	b.n	800344c <HAL_GPIO_EXTI_Callback+0x44>
 8003442:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x25c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	4a86      	ldr	r2, [pc, #536]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x25c>)
 800344a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 800344c:	4b86      	ldr	r3, [pc, #536]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 800344e:	2208      	movs	r2, #8
 8003450:	615a      	str	r2, [r3, #20]
 8003452:	e15b      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d11c      	bne.n	8003494 <HAL_GPIO_EXTI_Callback+0x8c>
 800345a:	2102      	movs	r1, #2
 800345c:	4883      	ldr	r0, [pc, #524]	@ (800366c <HAL_GPIO_EXTI_Callback+0x264>)
 800345e:	f006 ff7b 	bl	800a358 <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d115      	bne.n	8003494 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8003468:	2101      	movs	r1, #1
 800346a:	4880      	ldr	r0, [pc, #512]	@ (800366c <HAL_GPIO_EXTI_Callback+0x264>)
 800346c:	f006 ff74 	bl	800a358 <HAL_GPIO_ReadPin>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_GPIO_EXTI_Callback+0x7a>
 8003476:	4b7e      	ldr	r3, [pc, #504]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x268>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	4a7c      	ldr	r2, [pc, #496]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x268>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e004      	b.n	800348c <HAL_GPIO_EXTI_Callback+0x84>
 8003482:	4b7b      	ldr	r3, [pc, #492]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x268>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	4a79      	ldr	r2, [pc, #484]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x268>)
 800348a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 800348c:	4b76      	ldr	r3, [pc, #472]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 800348e:	2202      	movs	r2, #2
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	e13b      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	2b20      	cmp	r3, #32
 8003498:	d11c      	bne.n	80034d4 <HAL_GPIO_EXTI_Callback+0xcc>
 800349a:	2120      	movs	r1, #32
 800349c:	486f      	ldr	r0, [pc, #444]	@ (800365c <HAL_GPIO_EXTI_Callback+0x254>)
 800349e:	f006 ff5b 	bl	800a358 <HAL_GPIO_ReadPin>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d115      	bne.n	80034d4 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 80034a8:	2110      	movs	r1, #16
 80034aa:	486c      	ldr	r0, [pc, #432]	@ (800365c <HAL_GPIO_EXTI_Callback+0x254>)
 80034ac:	f006 ff54 	bl	800a358 <HAL_GPIO_ReadPin>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_GPIO_EXTI_Callback+0xba>
 80034b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003674 <HAL_GPIO_EXTI_Callback+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	4a6d      	ldr	r2, [pc, #436]	@ (8003674 <HAL_GPIO_EXTI_Callback+0x26c>)
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_EXTI_Callback+0xc4>
 80034c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003674 <HAL_GPIO_EXTI_Callback+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003674 <HAL_GPIO_EXTI_Callback+0x26c>)
 80034ca:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 80034cc:	4b66      	ldr	r3, [pc, #408]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 80034ce:	2220      	movs	r2, #32
 80034d0:	615a      	str	r2, [r3, #20]
 80034d2:	e11b      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d11c      	bne.n	8003514 <HAL_GPIO_EXTI_Callback+0x10c>
 80034da:	2104      	movs	r1, #4
 80034dc:	4863      	ldr	r0, [pc, #396]	@ (800366c <HAL_GPIO_EXTI_Callback+0x264>)
 80034de:	f006 ff3b 	bl	800a358 <HAL_GPIO_ReadPin>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d115      	bne.n	8003514 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 80034e8:	2108      	movs	r1, #8
 80034ea:	4860      	ldr	r0, [pc, #384]	@ (800366c <HAL_GPIO_EXTI_Callback+0x264>)
 80034ec:	f006 ff34 	bl	800a358 <HAL_GPIO_ReadPin>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0xfa>
 80034f6:	4b60      	ldr	r3, [pc, #384]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x270>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x270>)
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	e004      	b.n	800350c <HAL_GPIO_EXTI_Callback+0x104>
 8003502:	4b5d      	ldr	r3, [pc, #372]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	4a5b      	ldr	r2, [pc, #364]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x270>)
 800350a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 800350c:	4b56      	ldr	r3, [pc, #344]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 800350e:	2204      	movs	r2, #4
 8003510:	615a      	str	r2, [r3, #20]
 8003512:	e0fb      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d11c      	bne.n	8003554 <HAL_GPIO_EXTI_Callback+0x14c>
 800351a:	2101      	movs	r1, #1
 800351c:	4850      	ldr	r0, [pc, #320]	@ (8003660 <HAL_GPIO_EXTI_Callback+0x258>)
 800351e:	f006 ff1b 	bl	800a358 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d115      	bne.n	8003554 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8003528:	2102      	movs	r1, #2
 800352a:	484d      	ldr	r0, [pc, #308]	@ (8003660 <HAL_GPIO_EXTI_Callback+0x258>)
 800352c:	f006 ff14 	bl	800a358 <HAL_GPIO_ReadPin>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_GPIO_EXTI_Callback+0x13a>
 8003536:	4b51      	ldr	r3, [pc, #324]	@ (800367c <HAL_GPIO_EXTI_Callback+0x274>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3b01      	subs	r3, #1
 800353c:	4a4f      	ldr	r2, [pc, #316]	@ (800367c <HAL_GPIO_EXTI_Callback+0x274>)
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e004      	b.n	800354c <HAL_GPIO_EXTI_Callback+0x144>
 8003542:	4b4e      	ldr	r3, [pc, #312]	@ (800367c <HAL_GPIO_EXTI_Callback+0x274>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3301      	adds	r3, #1
 8003548:	4a4c      	ldr	r2, [pc, #304]	@ (800367c <HAL_GPIO_EXTI_Callback+0x274>)
 800354a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 800354c:	4b46      	ldr	r3, [pc, #280]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 800354e:	2201      	movs	r2, #1
 8003550:	615a      	str	r2, [r3, #20]
 8003552:	e0db      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355a:	d11f      	bne.n	800359c <HAL_GPIO_EXTI_Callback+0x194>
 800355c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003560:	4847      	ldr	r0, [pc, #284]	@ (8003680 <HAL_GPIO_EXTI_Callback+0x278>)
 8003562:	f006 fef9 	bl	800a358 <HAL_GPIO_ReadPin>
 8003566:	4603      	mov	r3, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	d117      	bne.n	800359c <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 800356c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003570:	4843      	ldr	r0, [pc, #268]	@ (8003680 <HAL_GPIO_EXTI_Callback+0x278>)
 8003572:	f006 fef1 	bl	800a358 <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_GPIO_EXTI_Callback+0x180>
 800357c:	4b41      	ldr	r3, [pc, #260]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x27c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a40      	ldr	r2, [pc, #256]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x27c>)
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e004      	b.n	8003592 <HAL_GPIO_EXTI_Callback+0x18a>
 8003588:	4b3e      	ldr	r3, [pc, #248]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x27c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3b01      	subs	r3, #1
 800358e:	4a3d      	ldr	r2, [pc, #244]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x27c>)
 8003590:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8003592:	4b35      	ldr	r3, [pc, #212]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 8003594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003598:	615a      	str	r2, [r3, #20]
 800359a:	e0b7      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035a2:	d11f      	bne.n	80035e4 <HAL_GPIO_EXTI_Callback+0x1dc>
 80035a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035a8:	482d      	ldr	r0, [pc, #180]	@ (8003660 <HAL_GPIO_EXTI_Callback+0x258>)
 80035aa:	f006 fed5 	bl	800a358 <HAL_GPIO_ReadPin>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d117      	bne.n	80035e4 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 80035b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035b8:	4829      	ldr	r0, [pc, #164]	@ (8003660 <HAL_GPIO_EXTI_Callback+0x258>)
 80035ba:	f006 fecd 	bl	800a358 <HAL_GPIO_ReadPin>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_GPIO_EXTI_Callback+0x1c8>
 80035c4:	4b30      	ldr	r3, [pc, #192]	@ (8003688 <HAL_GPIO_EXTI_Callback+0x280>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003688 <HAL_GPIO_EXTI_Callback+0x280>)
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e004      	b.n	80035da <HAL_GPIO_EXTI_Callback+0x1d2>
 80035d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003688 <HAL_GPIO_EXTI_Callback+0x280>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003688 <HAL_GPIO_EXTI_Callback+0x280>)
 80035d8:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 80035da:	4b23      	ldr	r3, [pc, #140]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 80035dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035e0:	615a      	str	r2, [r3, #20]
 80035e2:	e093      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ea:	d119      	bne.n	8003620 <HAL_GPIO_EXTI_Callback+0x218>
 80035ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035f0:	4826      	ldr	r0, [pc, #152]	@ (800368c <HAL_GPIO_EXTI_Callback+0x284>)
 80035f2:	f006 feb1 	bl	800a358 <HAL_GPIO_ReadPin>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + AREA1_TO_AREA2;
 80035fc:	4b24      	ldr	r3, [pc, #144]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	b2da      	uxtb	r2, r3
 8003604:	4b22      	ldr	r3, [pc, #136]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 8003606:	701a      	strb	r2, [r3, #0]
		if(mode > AREA1_TO_AREA2)
 8003608:	4b21      	ldr	r3, [pc, #132]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d902      	bls.n	8003616 <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = 0;
 8003610:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 8003618:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800361c:	615a      	str	r2, [r3, #20]
 800361e:	e075      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	d135      	bne.n	8003694 <HAL_GPIO_EXTI_Callback+0x28c>
 8003628:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800362c:	4817      	ldr	r0, [pc, #92]	@ (800368c <HAL_GPIO_EXTI_Callback+0x284>)
 800362e:	f006 fe93 	bl	800a358 <HAL_GPIO_ReadPin>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d12d      	bne.n	8003694 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + RETRY;
 8003638:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 8003642:	701a      	strb	r2, [r3, #0]
		if(mode > RETRY)
 8003644:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b0c      	cmp	r3, #12
 800364a:	d902      	bls.n	8003652 <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = 0;
 800364c:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x288>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 8003652:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x260>)
 8003654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003658:	615a      	str	r2, [r3, #20]
 800365a:	e057      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
 800365c:	40020400 	.word	0x40020400
 8003660:	40020000 	.word	0x40020000
 8003664:	200004e8 	.word	0x200004e8
 8003668:	40013c00 	.word	0x40013c00
 800366c:	40020800 	.word	0x40020800
 8003670:	200004ec 	.word	0x200004ec
 8003674:	200004f0 	.word	0x200004f0
 8003678:	200004f4 	.word	0x200004f4
 800367c:	200004f8 	.word	0x200004f8
 8003680:	40020c00 	.word	0x40020c00
 8003684:	200004fc 	.word	0x200004fc
 8003688:	20000500 	.word	0x20000500
 800368c:	40021000 	.word	0x40021000
 8003690:	20000610 	.word	0x20000610
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800369a:	d119      	bne.n	80036d0 <HAL_GPIO_EXTI_Callback+0x2c8>
 800369c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036a0:	481c      	ldr	r0, [pc, #112]	@ (8003714 <HAL_GPIO_EXTI_Callback+0x30c>)
 80036a2:	f006 fe59 	bl	800a358 <HAL_GPIO_ReadPin>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d111      	bne.n	80036d0 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + RUNNINGTEST_1;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	3319      	adds	r3, #25
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	4b18      	ldr	r3, [pc, #96]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036b6:	701a      	strb	r2, [r3, #0]
		if(mode > RUNNINGTEST_1)
 80036b8:	4b17      	ldr	r3, [pc, #92]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b19      	cmp	r3, #25
 80036be:	d902      	bls.n	80036c6 <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = 0;
 80036c0:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <HAL_GPIO_EXTI_Callback+0x314>)
 80036c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036cc:	615a      	str	r2, [r3, #20]
 80036ce:	e01d      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d6:	d119      	bne.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
 80036d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036dc:	4810      	ldr	r0, [pc, #64]	@ (8003720 <HAL_GPIO_EXTI_Callback+0x318>)
 80036de:	f006 fe3b 	bl	800a358 <HAL_GPIO_ReadPin>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + AREA1_TO_AREA2;
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036f2:	701a      	strb	r2, [r3, #0]
		if(mode > AREA1_TO_AREA2)
 80036f4:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d902      	bls.n	8003702 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = 0;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_GPIO_EXTI_Callback+0x310>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_GPIO_EXTI_Callback+0x314>)
 8003704:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003708:	615a      	str	r2, [r3, #20]
	}
}
 800370a:	e7ff      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x304>
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	20000610 	.word	0x20000610
 800371c:	40013c00 	.word	0x40013c00
 8003720:	40020c00 	.word	0x40020c00
 8003724:	00000000 	.word	0x00000000

08003728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003732:	f006 fa3b 	bl	8009bac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003736:	f001 fd5f 	bl	80051f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800373a:	f002 f871 	bl	8005820 <MX_GPIO_Init>
  MX_I2C2_Init();
 800373e:	f001 fdc5 	bl	80052cc <MX_I2C2_Init>
  MX_TIM1_Init();
 8003742:	f001 fdf1 	bl	8005328 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003746:	f001 feb3 	bl	80054b0 <MX_TIM2_Init>
  MX_TIM8_Init();
 800374a:	f001 ff27 	bl	800559c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800374e:	f001 ffe9 	bl	8005724 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003752:	f002 f811 	bl	8005778 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003756:	f002 f839 	bl	80057cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800375a:	2100      	movs	r1, #0
 800375c:	48a8      	ldr	r0, [pc, #672]	@ (8003a00 <main+0x2d8>)
 800375e:	f008 f823 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8003762:	2104      	movs	r1, #4
 8003764:	48a6      	ldr	r0, [pc, #664]	@ (8003a00 <main+0x2d8>)
 8003766:	f008 f81f 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 800376a:	2108      	movs	r1, #8
 800376c:	48a4      	ldr	r0, [pc, #656]	@ (8003a00 <main+0x2d8>)
 800376e:	f008 f81b 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8003772:	210c      	movs	r1, #12
 8003774:	48a2      	ldr	r0, [pc, #648]	@ (8003a00 <main+0x2d8>)
 8003776:	f008 f817 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 800377a:	2100      	movs	r1, #0
 800377c:	48a1      	ldr	r0, [pc, #644]	@ (8003a04 <main+0x2dc>)
 800377e:	f008 f813 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8003782:	2104      	movs	r1, #4
 8003784:	489f      	ldr	r0, [pc, #636]	@ (8003a04 <main+0x2dc>)
 8003786:	f008 f80f 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 800378a:	2108      	movs	r1, #8
 800378c:	489d      	ldr	r0, [pc, #628]	@ (8003a04 <main+0x2dc>)
 800378e:	f008 f80b 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);
 8003792:	210c      	movs	r1, #12
 8003794:	489b      	ldr	r0, [pc, #620]	@ (8003a04 <main+0x2dc>)
 8003796:	f008 f807 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800379a:	2108      	movs	r1, #8
 800379c:	489a      	ldr	r0, [pc, #616]	@ (8003a08 <main+0x2e0>)
 800379e:	f008 f803 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 80037a2:	210c      	movs	r1, #12
 80037a4:	4898      	ldr	r0, [pc, #608]	@ (8003a08 <main+0x2e0>)
 80037a6:	f007 ffff 	bl	800b7a8 <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_IT(&huart1, receive, 1);
 80037aa:	2201      	movs	r2, #1
 80037ac:	4997      	ldr	r1, [pc, #604]	@ (8003a0c <main+0x2e4>)
 80037ae:	4898      	ldr	r0, [pc, #608]	@ (8003a10 <main+0x2e8>)
 80037b0:	f009 f80a 	bl	800c7c8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 80037b4:	2201      	movs	r2, #1
 80037b6:	4997      	ldr	r1, [pc, #604]	@ (8003a14 <main+0x2ec>)
 80037b8:	4897      	ldr	r0, [pc, #604]	@ (8003a18 <main+0x2f0>)
 80037ba:	f009 f805 	bl	800c7c8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, receiveMEGA, 1);
 80037be:	2201      	movs	r2, #1
 80037c0:	4996      	ldr	r1, [pc, #600]	@ (8003a1c <main+0x2f4>)
 80037c2:	4897      	ldr	r0, [pc, #604]	@ (8003a20 <main+0x2f8>)
 80037c4:	f009 f800 	bl	800c7c8 <HAL_UART_Receive_IT>

//  EKF tuning = {0.0, 6000.0, 0.0};
  EKF first = {140.0, 6700.0, 0.0};
 80037c8:	4b96      	ldr	r3, [pc, #600]	@ (8003a24 <main+0x2fc>)
 80037ca:	f507 75f4 	add.w	r5, r7, #488	@ 0x1e8
 80037ce:	461c      	mov	r4, r3
 80037d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037d8:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF second = {4240.0, 6750.0, 0.0};
 80037dc:	4b92      	ldr	r3, [pc, #584]	@ (8003a28 <main+0x300>)
 80037de:	f507 75e8 	add.w	r5, r7, #464	@ 0x1d0
 80037e2:	461c      	mov	r4, r3
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ec:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF third = {4300.0, 11000.0, 0.0};
 80037f0:	4b8e      	ldr	r3, [pc, #568]	@ (8003a2c <main+0x304>)
 80037f2:	f507 75dc 	add.w	r5, r7, #440	@ 0x1b8
 80037f6:	461c      	mov	r4, r3
 80037f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003800:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fourth = {4300.0, 11000.0, -90.0};
 8003804:	4b8a      	ldr	r3, [pc, #552]	@ (8003a30 <main+0x308>)
 8003806:	f507 75d0 	add.w	r5, r7, #416	@ 0x1a0
 800380a:	461c      	mov	r4, r3
 800380c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800380e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003814:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fifth = {4400.0, 14000.0, -90.0};
 8003818:	4b86      	ldr	r3, [pc, #536]	@ (8003a34 <main+0x30c>)
 800381a:	f507 75c4 	add.w	r5, r7, #392	@ 0x188
 800381e:	461c      	mov	r4, r3
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003828:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry1 = {300.0, 0.0, 0.0};
 800382c:	a372      	add	r3, pc, #456	@ (adr r3, 80039f8 <main+0x2d0>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
  EKF retry2 = {250.0, 850.0, 0.0};
 800384e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003856:	4a78      	ldr	r2, [pc, #480]	@ (8003a38 <main+0x310>)
 8003858:	461d      	mov	r5, r3
 800385a:	4614      	mov	r4, r2
 800385c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003860:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003864:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry3 = {4300.0, 1000.0, 0.0};
 8003868:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800386c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003870:	4a72      	ldr	r2, [pc, #456]	@ (8003a3c <main+0x314>)
 8003872:	461d      	mov	r5, r3
 8003874:	4614      	mov	r4, r2
 8003876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800387a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800387e:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry4 = {4300.0, 4650.0, 0.0};
 8003882:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003886:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800388a:	4a6d      	ldr	r2, [pc, #436]	@ (8003a40 <main+0x318>)
 800388c:	461d      	mov	r5, r3
 800388e:	4614      	mov	r4, r2
 8003890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003894:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003898:	e885 0003 	stmia.w	r5, {r0, r1}
//		  {4400.0, 6600.0, 0.0},
//		  {4300.0, 6300.0, 0.0},
//		  {4300.0, 11000.0, 0.0}
//  };

  uint8_t battery = 1;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
  int tolerance = 400;
 80038a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80038a6:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  double Vx = 0.0, Vy = 0.0, W = 0.0;
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 80038ce:	f7ff fd18 	bl	8003302 <lcd_init>
	  EKF position = extendedKalmanFilter();
 80038d2:	f002 fe95 	bl	8006600 <extendedKalmanFilter>
 80038d6:	eeb0 5a40 	vmov.f32	s10, s0
 80038da:	eef0 5a60 	vmov.f32	s11, s1
 80038de:	eeb0 6a41 	vmov.f32	s12, s2
 80038e2:	eef0 6a61 	vmov.f32	s13, s3
 80038e6:	eeb0 7a42 	vmov.f32	s14, s4
 80038ea:	eef0 7a62 	vmov.f32	s15, s5
 80038ee:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80038f2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80038f6:	ed83 5b00 	vstr	d5, [r3]
 80038fa:	ed83 6b02 	vstr	d6, [r3, #8]
 80038fe:	ed83 7b04 	vstr	d7, [r3, #16]
	  displayKalman(position);
 8003902:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003906:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800390a:	ed93 5b00 	vldr	d5, [r3]
 800390e:	ed93 6b02 	vldr	d6, [r3, #8]
 8003912:	ed93 7b04 	vldr	d7, [r3, #16]
 8003916:	eeb0 0a45 	vmov.f32	s0, s10
 800391a:	eef0 0a65 	vmov.f32	s1, s11
 800391e:	eeb0 1a46 	vmov.f32	s2, s12
 8003922:	eef0 1a66 	vmov.f32	s3, s13
 8003926:	eeb0 2a47 	vmov.f32	s4, s14
 800392a:	eef0 2a67 	vmov.f32	s5, s15
 800392e:	f003 fdf7 	bl	8007520 <displayKalman>

	  int frontLeftDistance = sensorMEGA[0];
 8003932:	4b44      	ldr	r3, [pc, #272]	@ (8003a44 <main+0x31c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
	  int frontRightDistance = sensorMEGA[1];
 800393a:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <main+0x31c>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

	  bool firstStep = fabs(first.x - position.x) < tolerance && fabs(first.y - position.y) < tolerance && fabs(first.h - position.h) < 1;
 8003942:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8003946:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800394a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f7fc fc99 	bl	8000288 <__aeabi_dsub>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 800395e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003962:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003966:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 800396a:	f7fc fddb 	bl	8000524 <__aeabi_i2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8003976:	f7fd f8b1 	bl	8000adc <__aeabi_dcmplt>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d065      	beq.n	8003a4c <main+0x324>
 8003980:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8003984:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003988:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800398c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003990:	f7fc fc7a 	bl	8000288 <__aeabi_dsub>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800399c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80039a4:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 80039a8:	f7fc fdbc 	bl	8000524 <__aeabi_i2d>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80039b4:	f7fd f892 	bl	8000adc <__aeabi_dcmplt>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d046      	beq.n	8003a4c <main+0x324>
 80039be:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 80039c2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80039c6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039ce:	f7fc fc5b 	bl	8000288 <__aeabi_dsub>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4690      	mov	r8, r2
 80039d8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <main+0x320>)
 80039e2:	4640      	mov	r0, r8
 80039e4:	4649      	mov	r1, r9
 80039e6:	f7fd f879 	bl	8000adc <__aeabi_dcmplt>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02d      	beq.n	8003a4c <main+0x324>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e02c      	b.n	8003a4e <main+0x326>
 80039f4:	f3af 8000 	nop.w
 80039f8:	00000000 	.word	0x00000000
 80039fc:	4072c000 	.word	0x4072c000
 8003a00:	20000338 	.word	0x20000338
 8003a04:	200003c8 	.word	0x200003c8
 8003a08:	20000380 	.word	0x20000380
 8003a0c:	20000504 	.word	0x20000504
 8003a10:	20000410 	.word	0x20000410
 8003a14:	20000550 	.word	0x20000550
 8003a18:	20000458 	.word	0x20000458
 8003a1c:	200005c0 	.word	0x200005c0
 8003a20:	200004a0 	.word	0x200004a0
 8003a24:	08013d88 	.word	0x08013d88
 8003a28:	08013da0 	.word	0x08013da0
 8003a2c:	08013db8 	.word	0x08013db8
 8003a30:	08013dd0 	.word	0x08013dd0
 8003a34:	08013de8 	.word	0x08013de8
 8003a38:	08013e00 	.word	0x08013e00
 8003a3c:	08013e18 	.word	0x08013e18
 8003a40:	08013e30 	.word	0x08013e30
 8003a44:	200005fc 	.word	0x200005fc
 8003a48:	3ff00000 	.word	0x3ff00000
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
 8003a52:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
	  bool secondStep = fabs(second.x - position.x) < tolerance && fabs(second.y - position.y) < tolerance && fabs(second.h - position.h) < 1;
 8003a5e:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8003a62:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003a66:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fc0b 	bl	8000288 <__aeabi_dsub>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8003a7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003a82:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003a86:	f7fc fd4d 	bl	8000524 <__aeabi_i2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003a92:	f7fd f823 	bl	8000adc <__aeabi_dcmplt>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d039      	beq.n	8003b10 <main+0x3e8>
 8003a9c:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8003aa0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003aa4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003aa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003aac:	f7fc fbec 	bl	8000288 <__aeabi_dsub>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003abc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003ac4:	f7fc fd2e 	bl	8000524 <__aeabi_i2d>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8003ad0:	f7fd f804 	bl	8000adc <__aeabi_dcmplt>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01a      	beq.n	8003b10 <main+0x3e8>
 8003ada:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8003ade:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003ae2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003ae6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003aea:	f7fc fbcd 	bl	8000288 <__aeabi_dsub>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4692      	mov	sl, r2
 8003af4:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	4b9c      	ldr	r3, [pc, #624]	@ (8003d70 <main+0x648>)
 8003afe:	4650      	mov	r0, sl
 8003b00:	4659      	mov	r1, fp
 8003b02:	f7fc ffeb 	bl	8000adc <__aeabi_dcmplt>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <main+0x3e8>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <main+0x3ea>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
 8003b16:	f897 3236 	ldrb.w	r3, [r7, #566]	@ 0x236
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
	  bool thirdStep = fabs(third.x - position.x) < tolerance && fabs(third.y - position.y) < tolerance && fabs(third.h - position.h) < 1;
 8003b22:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8003b26:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003b2a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f7fc fba9 	bl	8000288 <__aeabi_dsub>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8003b3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b46:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003b4a:	f7fc fceb 	bl	8000524 <__aeabi_i2d>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8003b56:	f7fc ffc1 	bl	8000adc <__aeabi_dcmplt>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d03c      	beq.n	8003bda <main+0x4b2>
 8003b60:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8003b64:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003b68:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b70:	f7fc fb8a 	bl	8000288 <__aeabi_dsub>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b84:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003b88:	f7fc fccc 	bl	8000524 <__aeabi_i2d>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b94:	f7fc ffa2 	bl	8000adc <__aeabi_dcmplt>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01d      	beq.n	8003bda <main+0x4b2>
 8003b9e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8003ba2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003ba6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003baa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003bae:	f7fc fb6b 	bl	8000288 <__aeabi_dsub>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003bba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8003d70 <main+0x648>)
 8003bc8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8003bcc:	f7fc ff86 	bl	8000adc <__aeabi_dcmplt>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <main+0x4b2>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <main+0x4b4>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f887 3235 	strb.w	r3, [r7, #565]	@ 0x235
 8003be0:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	f887 3235 	strb.w	r3, [r7, #565]	@ 0x235
	  bool fourthStep = fabs(fourth.x - position.x) < tolerance && fabs(fourth.y - position.y) < tolerance && fabs(fourth.h - position.h) < 1;
 8003bec:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8003bf0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003bf4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fc fb44 	bl	8000288 <__aeabi_dsub>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8003c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c10:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003c14:	f7fc fc86 	bl	8000524 <__aeabi_i2d>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003c20:	f7fc ff5c 	bl	8000adc <__aeabi_dcmplt>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d03c      	beq.n	8003ca4 <main+0x57c>
 8003c2a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8003c2e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003c32:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c3a:	f7fc fb25 	bl	8000288 <__aeabi_dsub>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003c46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c4e:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003c52:	f7fc fc67 	bl	8000524 <__aeabi_i2d>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c5e:	f7fc ff3d 	bl	8000adc <__aeabi_dcmplt>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01d      	beq.n	8003ca4 <main+0x57c>
 8003c68:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8003c6c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003c70:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c78:	f7fc fb06 	bl	8000288 <__aeabi_dsub>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8003c84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	4b37      	ldr	r3, [pc, #220]	@ (8003d70 <main+0x648>)
 8003c92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8003c96:	f7fc ff21 	bl	8000adc <__aeabi_dcmplt>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <main+0x57c>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <main+0x57e>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3234 	strb.w	r3, [r7, #564]	@ 0x234
 8003caa:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	f887 3234 	strb.w	r3, [r7, #564]	@ 0x234
	  bool fifthStep = fabs(fifth.x - position.x) < tolerance && fabs(fifth.y - position.y) < tolerance && fabs(fifth.h - position.h) < 1;
 8003cb6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003cba:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003cbe:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	f7fc fadf 	bl	8000288 <__aeabi_dsub>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8003cd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cda:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003cde:	f7fc fc21 	bl	8000524 <__aeabi_i2d>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003cea:	f7fc fef7 	bl	8000adc <__aeabi_dcmplt>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d03f      	beq.n	8003d74 <main+0x64c>
 8003cf4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003cf8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003cfc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003d00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d04:	f7fc fac0 	bl	8000288 <__aeabi_dsub>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8003d10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d18:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003d1c:	f7fc fc02 	bl	8000524 <__aeabi_i2d>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d28:	f7fc fed8 	bl	8000adc <__aeabi_dcmplt>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d020      	beq.n	8003d74 <main+0x64c>
 8003d32:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003d36:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003d3a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003d3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d42:	f7fc faa1 	bl	8000288 <__aeabi_dsub>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <main+0x648>)
 8003d5c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8003d60:	f7fc febc 	bl	8000adc <__aeabi_dcmplt>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <main+0x64c>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e003      	b.n	8003d76 <main+0x64e>
 8003d6e:	bf00      	nop
 8003d70:	3ff00000 	.word	0x3ff00000
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
 8003d7a:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
	  bool retry1Step = fabs(retry1.x - position.x) < tolerance && fabs(retry1.y - position.y) < tolerance && fabs(retry1.h - position.h) < 1;
 8003d86:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003d8a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003d8e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fa77 	bl	8000288 <__aeabi_dsub>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8003da2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003daa:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003dae:	f7fc fbb9 	bl	8000524 <__aeabi_i2d>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003dba:	f7fc fe8f 	bl	8000adc <__aeabi_dcmplt>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d03c      	beq.n	8003e3e <main+0x716>
 8003dc4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8003dc8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003dcc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003dd0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003dd4:	f7fc fa58 	bl	8000288 <__aeabi_dsub>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8003de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003de8:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003dec:	f7fc fb9a 	bl	8000524 <__aeabi_i2d>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003df8:	f7fc fe70 	bl	8000adc <__aeabi_dcmplt>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01d      	beq.n	8003e3e <main+0x716>
 8003e02:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8003e06:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003e0a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e12:	f7fc fa39 	bl	8000288 <__aeabi_dsub>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80040c8 <main+0x9a0>)
 8003e2c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003e30:	f7fc fe54 	bl	8000adc <__aeabi_dcmplt>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <main+0x716>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <main+0x718>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 3232 	strb.w	r3, [r7, #562]	@ 0x232
 8003e44:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	f887 3232 	strb.w	r3, [r7, #562]	@ 0x232
	  bool retry2Step = fabs(retry2.x - position.x) < tolerance && fabs(retry2.y - position.y) < tolerance && fabs(retry2.h - position.h) < 1;
 8003e50:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e5c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003e60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f7fc fa0e 	bl	8000288 <__aeabi_dsub>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003e74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e7c:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003e80:	f7fc fb50 	bl	8000524 <__aeabi_i2d>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003e8c:	f7fc fe26 	bl	8000adc <__aeabi_dcmplt>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d042      	beq.n	8003f1c <main+0x7f4>
 8003e96:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e9e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ea2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003ea6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003eaa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003eae:	f7fc f9eb 	bl	8000288 <__aeabi_dsub>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003eba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ec2:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003ec6:	f7fc fb2d 	bl	8000524 <__aeabi_i2d>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ed2:	f7fc fe03 	bl	8000adc <__aeabi_dcmplt>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01f      	beq.n	8003f1c <main+0x7f4>
 8003edc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ee4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003ee8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003eec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003ef0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ef4:	f7fc f9c8 	bl	8000288 <__aeabi_dsub>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <main+0x9a0>)
 8003f0a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003f0e:	f7fc fde5 	bl	8000adc <__aeabi_dcmplt>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <main+0x7f4>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <main+0x7f6>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3231 	strb.w	r3, [r7, #561]	@ 0x231
 8003f22:	f897 3231 	ldrb.w	r3, [r7, #561]	@ 0x231
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	f887 3231 	strb.w	r3, [r7, #561]	@ 0x231
	  bool retry3Step = fabs(retry3.x - position.x) < tolerance && fabs(retry3.y - position.y) < tolerance && fabs(retry3.h - position.h) < 1;
 8003f2e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003f32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f3a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003f3e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc f99f 	bl	8000288 <__aeabi_dsub>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003f50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f54:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f56:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003f5a:	f7fc fae3 	bl	8000524 <__aeabi_i2d>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003f66:	f7fc fdb9 	bl	8000adc <__aeabi_dcmplt>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d040      	beq.n	8003ff2 <main+0x8ca>
 8003f70:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003f74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003f7c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003f80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f88:	f7fc f97e 	bl	8000288 <__aeabi_dsub>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003f92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f98:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8003f9c:	f7fc fac2 	bl	8000524 <__aeabi_i2d>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fa8:	f7fc fd98 	bl	8000adc <__aeabi_dcmplt>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01f      	beq.n	8003ff2 <main+0x8ca>
 8003fb2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003fb6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003fba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003fbe:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003fc2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003fc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003fca:	f7fc f95d 	bl	8000288 <__aeabi_dsub>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	663a      	str	r2, [r7, #96]	@ 0x60
 8003fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <main+0x9a0>)
 8003fe0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003fe4:	f7fc fd7a 	bl	8000adc <__aeabi_dcmplt>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <main+0x8ca>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <main+0x8cc>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3230 	strb.w	r3, [r7, #560]	@ 0x230
 8003ff8:	f897 3230 	ldrb.w	r3, [r7, #560]	@ 0x230
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	f887 3230 	strb.w	r3, [r7, #560]	@ 0x230
	  bool retry4Step = fabs(retry4.x - position.x) < tolerance && fabs(retry4.y - position.y) < tolerance && fabs(retry4.h - position.h) < 1;
 8004004:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004008:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800400c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004010:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004014:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc f934 	bl	8000288 <__aeabi_dsub>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004026:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800402a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800402c:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8004030:	f7fc fa78 	bl	8000524 <__aeabi_i2d>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800403c:	f7fc fd4e 	bl	8000adc <__aeabi_dcmplt>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d042      	beq.n	80040cc <main+0x9a4>
 8004046:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800404a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800404e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004052:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004056:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800405a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800405e:	f7fc f913 	bl	8000288 <__aeabi_dsub>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	653a      	str	r2, [r7, #80]	@ 0x50
 8004068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800406c:	657b      	str	r3, [r7, #84]	@ 0x54
 800406e:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8004072:	f7fc fa57 	bl	8000524 <__aeabi_i2d>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800407e:	f7fc fd2d 	bl	8000adc <__aeabi_dcmplt>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d021      	beq.n	80040cc <main+0x9a4>
 8004088:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800408c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004090:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004094:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004098:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800409c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040a0:	f7fc f8f2 	bl	8000288 <__aeabi_dsub>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80040aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <main+0x9a0>)
 80040b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80040ba:	f7fc fd0f 	bl	8000adc <__aeabi_dcmplt>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <main+0x9a4>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e002      	b.n	80040ce <main+0x9a6>
 80040c8:	3ff00000 	.word	0x3ff00000
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 80040d2:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f

	  uint32_t timer = HAL_GetTick();
 80040de:	f005 fdcb 	bl	8009c78 <HAL_GetTick>
 80040e2:	f8c7 0228 	str.w	r0, [r7, #552]	@ 0x228
	  uint32_t lastTime = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

	  switch(mode)
 80040ec:	4bca      	ldr	r3, [pc, #808]	@ (8004418 <main+0xcf0>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	2b1c      	cmp	r3, #28
 80040f4:	f201 8045 	bhi.w	8005182 <main+0x1a5a>
 80040f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <main+0x9d8>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004175 	.word	0x08004175
 8004104:	0800427d 	.word	0x0800427d
 8004108:	0800438d 	.word	0x0800438d
 800410c:	0800446f 	.word	0x0800446f
 8004110:	080044b9 	.word	0x080044b9
 8004114:	08004525 	.word	0x08004525
 8004118:	0800457d 	.word	0x0800457d
 800411c:	08004503 	.word	0x08004503
 8004120:	080045d9 	.word	0x080045d9
 8004124:	08004621 	.word	0x08004621
 8004128:	08004641 	.word	0x08004641
 800412c:	080046a5 	.word	0x080046a5
 8004130:	08004725 	.word	0x08004725
 8004134:	08004831 	.word	0x08004831
 8004138:	08004955 	.word	0x08004955
 800413c:	08004a6d 	.word	0x08004a6d
 8004140:	08004ac1 	.word	0x08004ac1
 8004144:	08004af1 	.word	0x08004af1
 8004148:	08004b1d 	.word	0x08004b1d
 800414c:	08004be1 	.word	0x08004be1
 8004150:	08004c55 	.word	0x08004c55
 8004154:	08004cb1 	.word	0x08004cb1
 8004158:	08004d13 	.word	0x08004d13
 800415c:	08005183 	.word	0x08005183
 8004160:	08004e0d 	.word	0x08004e0d
 8004164:	08004f6b 	.word	0x08004f6b
 8004168:	080050d5 	.word	0x080050d5
 800416c:	08004da1 	.word	0x08004da1
 8004170:	08004de9 	.word	0x08004de9
	  {
		  case AREA1_TO_AREA2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8004174:	2201      	movs	r2, #1
 8004176:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800417a:	48a8      	ldr	r0, [pc, #672]	@ (800441c <main+0xcf4>)
 800417c:	f006 f904 	bl	800a388 <HAL_GPIO_WritePin>
			  lastTime = timer;
 8004180:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8004184:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
			  if(position.y < 1500)
 8004188:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800418c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004190:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004194:	a398      	add	r3, pc, #608	@ (adr r3, 80043f8 <main+0xcd0>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f7fc fc9f 	bl	8000adc <__aeabi_dcmplt>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <main+0xa90>
			  {
				  start(0, 1900, 0, battery);
 80041a4:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80041a8:	2200      	movs	r2, #0
 80041aa:	f240 716c 	movw	r1, #1900	@ 0x76c
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7fe f972 	bl	8002498 <start>
				  if(firstStep)
				  {
					  mode = RIGHT_AREA2;
				  }
			  }
			  break;
 80041b4:	f000 bff1 	b.w	800519a <main+0x1a72>
			  else if(position.y >= 1500 && position.y <= 4500)
 80041b8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80041bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80041c4:	a38c      	add	r3, pc, #560	@ (adr r3, 80043f8 <main+0xcd0>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fc fc9b 	bl	8000b04 <__aeabi_dcmpge>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d030      	beq.n	8004236 <main+0xb0e>
 80041d4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80041d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80041e0:	a387      	add	r3, pc, #540	@ (adr r3, 8004400 <main+0xcd8>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f7fc fc83 	bl	8000af0 <__aeabi_dcmple>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d022      	beq.n	8004236 <main+0xb0e>
				  double gain = sensorData[1] * 200;
 80041f0:	4b8b      	ldr	r3, [pc, #556]	@ (8004420 <main+0xcf8>)
 80041f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004424 <main+0xcfc>)
 80041fc:	f7fc f9fc 	bl	80005f8 <__aeabi_dmul>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
				  start(0, 1600 + gain, 0, battery);
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	4b86      	ldr	r3, [pc, #536]	@ (8004428 <main+0xd00>)
 800420e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8004212:	f7fc f83b 	bl	800028c <__adddf3>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fc9b 	bl	8000b58 <__aeabi_d2iz>
 8004222:	4601      	mov	r1, r0
 8004224:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8004228:	2200      	movs	r2, #0
 800422a:	2000      	movs	r0, #0
 800422c:	f7fe f934 	bl	8002498 <start>
			  {
 8004230:	bf00      	nop
			  break;
 8004232:	f000 bfb2 	b.w	800519a <main+0x1a72>
				  lastTime = timer;
 8004236:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800423a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
				  PID_Kalman(first, 3);
 800423e:	ed97 5b7a 	vldr	d5, [r7, #488]	@ 0x1e8
 8004242:	ed97 6b7c 	vldr	d6, [r7, #496]	@ 0x1f0
 8004246:	ed97 7b7e 	vldr	d7, [r7, #504]	@ 0x1f8
 800424a:	2003      	movs	r0, #3
 800424c:	eeb0 0a45 	vmov.f32	s0, s10
 8004250:	eef0 0a65 	vmov.f32	s1, s11
 8004254:	eeb0 1a46 	vmov.f32	s2, s12
 8004258:	eef0 1a66 	vmov.f32	s3, s13
 800425c:	eeb0 2a47 	vmov.f32	s4, s14
 8004260:	eef0 2a67 	vmov.f32	s5, s15
 8004264:	f004 fbb2 	bl	80089cc <PID_Kalman>
				  if(firstStep)
 8004268:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8794 	beq.w	800519a <main+0x1a72>
					  mode = RIGHT_AREA2;
 8004272:	4a69      	ldr	r2, [pc, #420]	@ (8004418 <main+0xcf0>)
 8004274:	2302      	movs	r3, #2
 8004276:	7013      	strb	r3, [r2, #0]
			  break;
 8004278:	f000 bf8f 	b.w	800519a <main+0x1a72>
		  case RIGHT_AREA2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004282:	4866      	ldr	r0, [pc, #408]	@ (800441c <main+0xcf4>)
 8004284:	f006 f880 	bl	800a388 <HAL_GPIO_WritePin>
			  bool motorState = false;
 8004288:	2300      	movs	r3, #0
 800428a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			  W = PID_controllerH(0.0, position.h, 3);
 800428e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004292:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004296:	ed93 7b04 	vldr	d7, [r3, #16]
 800429a:	2003      	movs	r0, #3
 800429c:	eeb0 1a47 	vmov.f32	s2, s14
 80042a0:	eef0 1a67 	vmov.f32	s3, s15
 80042a4:	ed9f 0b58 	vldr	d0, [pc, #352]	@ 8004408 <main+0xce0>
 80042a8:	f003 fdca 	bl	8007e40 <PID_controllerH>
 80042ac:	ed87 0b90 	vstr	d0, [r7, #576]	@ 0x240
			  PID_Kalman(second, 2);
 80042b0:	ed97 5b74 	vldr	d5, [r7, #464]	@ 0x1d0
 80042b4:	ed97 6b76 	vldr	d6, [r7, #472]	@ 0x1d8
 80042b8:	ed97 7b78 	vldr	d7, [r7, #480]	@ 0x1e0
 80042bc:	2002      	movs	r0, #2
 80042be:	eeb0 0a45 	vmov.f32	s0, s10
 80042c2:	eef0 0a65 	vmov.f32	s1, s11
 80042c6:	eeb0 1a46 	vmov.f32	s2, s12
 80042ca:	eef0 1a66 	vmov.f32	s3, s13
 80042ce:	eeb0 2a47 	vmov.f32	s4, s14
 80042d2:	eef0 2a67 	vmov.f32	s5, s15
 80042d6:	f004 fb79 	bl	80089cc <PID_Kalman>
//			  if(position.x < 3500)
//			  {
//				  kanan(1800, 0, 0);
//			  }
			  if(secondStep)
 80042da:	f897 3236 	ldrb.w	r3, [r7, #566]	@ 0x236
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 875d 	beq.w	800519e <main+0x1a76>
			  {
				  if(fabs(second.h - position.h) >= 0.5)
 80042e4:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 80042e8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80042ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80042f4:	f7fb ffc8 	bl	8000288 <__aeabi_dsub>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80042fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004302:	647b      	str	r3, [r7, #68]	@ 0x44
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	4b48      	ldr	r3, [pc, #288]	@ (800442c <main+0xd04>)
 800430a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800430e:	f7fc fbf9 	bl	8000b04 <__aeabi_dcmpge>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d034      	beq.n	8004382 <main+0xc5a>
				  {
			        	if(timer - lastTime >= 1000)
 8004318:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800431c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004326:	f0c0 873a 	bcc.w	800519e <main+0x1a76>
			        	{
			            	lastTime = timer;
 800432a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800432e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
			            	if(motorState)
 8004332:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <main+0xc28>
			            	{
			                	Inverse_Kinematics(0, 0, W);
 800433a:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 800433e:	f7fc fc0b 	bl	8000b58 <__aeabi_d2iz>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	2100      	movs	r1, #0
 8004348:	2000      	movs	r0, #0
 800434a:	f7fc fefd 	bl	8001148 <Inverse_Kinematics>
 800434e:	e004      	b.n	800435a <main+0xc32>
			            	}
			            	else
			            	{
			            		Inverse_Kinematics(0, 0, 0);
 8004350:	2200      	movs	r2, #0
 8004352:	2100      	movs	r1, #0
 8004354:	2000      	movs	r0, #0
 8004356:	f7fc fef7 	bl	8001148 <Inverse_Kinematics>
			            	}
			            	motorState = !motorState;
 800435a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf14      	ite	ne
 8004362:	2301      	movne	r3, #1
 8004364:	2300      	moveq	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f083 0301 	eor.w	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8004372:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				  else
				  {
					  mode = AREA2_TO_AREA3;
				  }
			  }
			  break;
 800437e:	f000 bf0e 	b.w	800519e <main+0x1a76>
					  mode = AREA2_TO_AREA3;
 8004382:	4a25      	ldr	r2, [pc, #148]	@ (8004418 <main+0xcf0>)
 8004384:	2303      	movs	r3, #3
 8004386:	7013      	strb	r3, [r2, #0]
			  break;
 8004388:	f000 bf09 	b.w	800519e <main+0x1a76>
		  case AREA2_TO_AREA3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800438c:	2201      	movs	r2, #1
 800438e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004392:	4822      	ldr	r0, [pc, #136]	@ (800441c <main+0xcf4>)
 8004394:	f005 fff8 	bl	800a388 <HAL_GPIO_WritePin>
			  if(position.y < 9000)
 8004398:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800439c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80043a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80043a4:	a31a      	add	r3, pc, #104	@ (adr r3, 8004410 <main+0xce8>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f7fc fb97 	bl	8000adc <__aeabi_dcmplt>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d03d      	beq.n	8004430 <main+0xd08>
			  {
				  double gain = sensorData[1] * 200;
 80043b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <main+0xcf8>)
 80043b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <main+0xcfc>)
 80043c0:	f7fc f91a 	bl	80005f8 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
				  start(0, 1500 + gain, 0, battery);
 80043cc:	a30a      	add	r3, pc, #40	@ (adr r3, 80043f8 <main+0xcd0>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80043d6:	f7fb ff59 	bl	800028c <__adddf3>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fc fbb9 	bl	8000b58 <__aeabi_d2iz>
 80043e6:	4601      	mov	r1, r0
 80043e8:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80043ec:	2200      	movs	r2, #0
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7fe f852 	bl	8002498 <start>
				  if(thirdStep)
				  {
					  mode = TRIAL;
				  }
			  }
			  break;
 80043f4:	f000 bed5 	b.w	80051a2 <main+0x1a7a>
 80043f8:	00000000 	.word	0x00000000
 80043fc:	40977000 	.word	0x40977000
 8004400:	00000000 	.word	0x00000000
 8004404:	40b19400 	.word	0x40b19400
	...
 8004414:	40c19400 	.word	0x40c19400
 8004418:	20000610 	.word	0x20000610
 800441c:	40020c00 	.word	0x40020c00
 8004420:	20000540 	.word	0x20000540
 8004424:	40690000 	.word	0x40690000
 8004428:	40990000 	.word	0x40990000
 800442c:	3fe00000 	.word	0x3fe00000
				  PID_Kalman(third, 3);
 8004430:	ed97 5b6e 	vldr	d5, [r7, #440]	@ 0x1b8
 8004434:	ed97 6b70 	vldr	d6, [r7, #448]	@ 0x1c0
 8004438:	ed97 7b72 	vldr	d7, [r7, #456]	@ 0x1c8
 800443c:	2003      	movs	r0, #3
 800443e:	eeb0 0a45 	vmov.f32	s0, s10
 8004442:	eef0 0a65 	vmov.f32	s1, s11
 8004446:	eeb0 1a46 	vmov.f32	s2, s12
 800444a:	eef0 1a66 	vmov.f32	s3, s13
 800444e:	eeb0 2a47 	vmov.f32	s4, s14
 8004452:	eef0 2a67 	vmov.f32	s5, s15
 8004456:	f004 fab9 	bl	80089cc <PID_Kalman>
				  if(thirdStep)
 800445a:	f897 3235 	ldrb.w	r3, [r7, #565]	@ 0x235
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 869f 	beq.w	80051a2 <main+0x1a7a>
					  mode = TRIAL;
 8004464:	4aa8      	ldr	r2, [pc, #672]	@ (8004708 <main+0xfe0>)
 8004466:	2310      	movs	r3, #16
 8004468:	7013      	strb	r3, [r2, #0]
			  break;
 800446a:	f000 be9a 	b.w	80051a2 <main+0x1a7a>
		  case AREA3_SPINNING:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800446e:	2200      	movs	r2, #0
 8004470:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004474:	48a5      	ldr	r0, [pc, #660]	@ (800470c <main+0xfe4>)
 8004476:	f005 ff87 	bl	800a388 <HAL_GPIO_WritePin>
			  PID_Kalman(fourth, 3);
 800447a:	ed97 5b68 	vldr	d5, [r7, #416]	@ 0x1a0
 800447e:	ed97 6b6a 	vldr	d6, [r7, #424]	@ 0x1a8
 8004482:	ed97 7b6c 	vldr	d7, [r7, #432]	@ 0x1b0
 8004486:	2003      	movs	r0, #3
 8004488:	eeb0 0a45 	vmov.f32	s0, s10
 800448c:	eef0 0a65 	vmov.f32	s1, s11
 8004490:	eeb0 1a46 	vmov.f32	s2, s12
 8004494:	eef0 1a66 	vmov.f32	s3, s13
 8004498:	eeb0 2a47 	vmov.f32	s4, s14
 800449c:	eef0 2a67 	vmov.f32	s5, s15
 80044a0:	f004 fa94 	bl	80089cc <PID_Kalman>
			  if(fourthStep)
 80044a4:	f897 3234 	ldrb.w	r3, [r7, #564]	@ 0x234
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 867c 	beq.w	80051a6 <main+0x1a7e>
			  {
				  mode = GOTO_STORAGE;
 80044ae:	4a96      	ldr	r2, [pc, #600]	@ (8004708 <main+0xfe0>)
 80044b0:	2305      	movs	r3, #5
 80044b2:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80044b4:	f000 be77 	b.w	80051a6 <main+0x1a7e>
		  case GOTO_STORAGE:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80044b8:	2201      	movs	r2, #1
 80044ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044be:	4893      	ldr	r0, [pc, #588]	@ (800470c <main+0xfe4>)
 80044c0:	f005 ff62 	bl	800a388 <HAL_GPIO_WritePin>
			  PID_Kalman(fifth, 3);
 80044c4:	ed97 5b62 	vldr	d5, [r7, #392]	@ 0x188
 80044c8:	ed97 6b64 	vldr	d6, [r7, #400]	@ 0x190
 80044cc:	ed97 7b66 	vldr	d7, [r7, #408]	@ 0x198
 80044d0:	2003      	movs	r0, #3
 80044d2:	eeb0 0a45 	vmov.f32	s0, s10
 80044d6:	eef0 0a65 	vmov.f32	s1, s11
 80044da:	eeb0 1a46 	vmov.f32	s2, s12
 80044de:	eef0 1a66 	vmov.f32	s3, s13
 80044e2:	eeb0 2a47 	vmov.f32	s4, s14
 80044e6:	eef0 2a67 	vmov.f32	s5, s15
 80044ea:	f004 fa6f 	bl	80089cc <PID_Kalman>
			  if(fifthStep)
 80044ee:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8659 	beq.w	80051aa <main+0x1a82>
			  {
				  mode = STORAGE_AREA;
 80044f8:	4a83      	ldr	r2, [pc, #524]	@ (8004708 <main+0xfe0>)
 80044fa:	2308      	movs	r3, #8
 80044fc:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80044fe:	f000 be54 	b.w	80051aa <main+0x1a82>
		  case STORAGE_AREA:
			  findtheBall();
 8004502:	f004 fbe9 	bl	8008cd8 <findtheBall>
			  if(sensorMEGA[4] == 0)
 8004506:	4b82      	ldr	r3, [pc, #520]	@ (8004710 <main+0xfe8>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f040 864f 	bne.w	80051ae <main+0x1a86>
			  {
				  Inverse_Kinematics(0, 0, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2100      	movs	r1, #0
 8004514:	2000      	movs	r0, #0
 8004516:	f7fc fe17 	bl	8001148 <Inverse_Kinematics>
				  mode = FACING_SILO;
 800451a:	4a7b      	ldr	r2, [pc, #492]	@ (8004708 <main+0xfe0>)
 800451c:	2306      	movs	r3, #6
 800451e:	7013      	strb	r3, [r2, #0]
//				  {
//					  setMotorSpeed(1, -800);
//					  setMotorSpeed(2, -800);
//				  }
			  }
			  break;
 8004520:	f000 be45 	b.w	80051ae <main+0x1a86>
		  case FACING_SILO:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004524:	2200      	movs	r2, #0
 8004526:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800452a:	4878      	ldr	r0, [pc, #480]	@ (800470c <main+0xfe4>)
 800452c:	f005 ff2c 	bl	800a388 <HAL_GPIO_WritePin>
			  PID_setDegree(90.0);
 8004530:	ed9f 0b6f 	vldr	d0, [pc, #444]	@ 80046f0 <main+0xfc8>
 8004534:	f004 fad4 	bl	8008ae0 <PID_setDegree>
			  if(fabs(90.0 - position.h))
 8004538:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800453c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004540:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	4972      	ldr	r1, [pc, #456]	@ (8004714 <main+0xfec>)
 800454a:	f7fb fe9d 	bl	8000288 <__aeabi_dsub>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	f7fc fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <main+0xe44>
			  {
				  HAL_Delay(50);
				  mode = GOTO_SILO;
			  }
			  break;
 8004568:	f000 be2e 	b.w	80051c8 <main+0x1aa0>
				  HAL_Delay(50);
 800456c:	2032      	movs	r0, #50	@ 0x32
 800456e:	f005 fb8f 	bl	8009c90 <HAL_Delay>
				  mode = GOTO_SILO;
 8004572:	4a65      	ldr	r2, [pc, #404]	@ (8004708 <main+0xfe0>)
 8004574:	2307      	movs	r3, #7
 8004576:	7013      	strb	r3, [r2, #0]
			  break;
 8004578:	f000 be26 	b.w	80051c8 <main+0x1aa0>
		  case GOTO_SILO:
		  	  start(0, 2200, 0, 1);
 800457c:	2301      	movs	r3, #1
 800457e:	2200      	movs	r2, #0
 8004580:	f640 0198 	movw	r1, #2200	@ 0x898
 8004584:	2000      	movs	r0, #0
 8004586:	f7fd ff87 	bl	8002498 <start>
		  	  servo_write(70);
 800458a:	2046      	movs	r0, #70	@ 0x46
 800458c:	f004 fa06 	bl	800899c <servo_write>
		  	  if(camera[3] < 600 || camera[5] < 600 || camera[7] < 600 || camera[9] < 600 || camera[11] < 600)
 8004590:	4b61      	ldr	r3, [pc, #388]	@ (8004718 <main+0xff0>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004598:	db14      	blt.n	80045c4 <main+0xe9c>
 800459a:	4b5f      	ldr	r3, [pc, #380]	@ (8004718 <main+0xff0>)
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80045a2:	db0f      	blt.n	80045c4 <main+0xe9c>
 80045a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004718 <main+0xff0>)
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80045ac:	db0a      	blt.n	80045c4 <main+0xe9c>
 80045ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004718 <main+0xff0>)
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80045b6:	db05      	blt.n	80045c4 <main+0xe9c>
 80045b8:	4b57      	ldr	r3, [pc, #348]	@ (8004718 <main+0xff0>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80045c0:	f280 85f7 	bge.w	80051b2 <main+0x1a8a>
		  	  {
		  		  Inverse_Kinematics(0, 0, 0);
 80045c4:	2200      	movs	r2, #0
 80045c6:	2100      	movs	r1, #0
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7fc fdbd 	bl	8001148 <Inverse_Kinematics>
			  	  mode = SILO_AREA;
 80045ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004708 <main+0xfe0>)
 80045d0:	2309      	movs	r3, #9
 80045d2:	7013      	strb	r3, [r2, #0]
		  	  }
			  break;
 80045d4:	f000 bded 	b.w	80051b2 <main+0x1a8a>
		  case SILO_AREA:
			  findSilo();
 80045d8:	f004 fce2 	bl	8008fa0 <findSilo>
			  if ((frontLeftDistance != 0 && frontLeftDistance <= 20))
 80045dc:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 85e8 	beq.w	80051b6 <main+0x1a8e>
 80045e6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80045ea:	2b14      	cmp	r3, #20
 80045ec:	f300 85e3 	bgt.w	80051b6 <main+0x1a8e>
			  {
				  Inverse_Kinematics(0, 0, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7fc fda7 	bl	8001148 <Inverse_Kinematics>
				  setMotorSpeed(1, -800);
 80045fa:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 80046f8 <main+0xfd0>
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fc fd2c 	bl	800105c <setMotorSpeed>
				  setMotorSpeed(2, -800);
 8004604:	ed9f 0b3c 	vldr	d0, [pc, #240]	@ 80046f8 <main+0xfd0>
 8004608:	2002      	movs	r0, #2
 800460a:	f7fc fd27 	bl	800105c <setMotorSpeed>
				  HAL_Delay(5000);
 800460e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004612:	f005 fb3d 	bl	8009c90 <HAL_Delay>
				  mode = BACKWARD_TO_STORAGE;
 8004616:	4a3c      	ldr	r2, [pc, #240]	@ (8004708 <main+0xfe0>)
 8004618:	230a      	movs	r3, #10
 800461a:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800461c:	f000 bdcb 	b.w	80051b6 <main+0x1a8e>
		  case BACKWARD_TO_STORAGE:
			  start(0, -800, 0, battery);
 8004620:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8004624:	2200      	movs	r2, #0
 8004626:	493d      	ldr	r1, [pc, #244]	@ (800471c <main+0xff4>)
 8004628:	2000      	movs	r0, #0
 800462a:	f7fd ff35 	bl	8002498 <start>
			  HAL_Delay(1000);
 800462e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004632:	f005 fb2d 	bl	8009c90 <HAL_Delay>
			  mode = FACING_STORAGE;
 8004636:	4a34      	ldr	r2, [pc, #208]	@ (8004708 <main+0xfe0>)
 8004638:	230b      	movs	r3, #11
 800463a:	7013      	strb	r3, [r2, #0]
			  break;
 800463c:	f000 bdc4 	b.w	80051c8 <main+0x1aa0>
		  case FACING_STORAGE:
			  PID_setDegree(-90.0);
 8004640:	ed9f 0b2f 	vldr	d0, [pc, #188]	@ 8004700 <main+0xfd8>
 8004644:	f004 fa4c 	bl	8008ae0 <PID_setDegree>
			  if(fabs(-90.0 - position.h) < 2)
 8004648:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800464c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004650:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	4931      	ldr	r1, [pc, #196]	@ (8004720 <main+0xff8>)
 800465a:	f7fb fe15 	bl	8000288 <__aeabi_dsub>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004664:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004672:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004676:	f7fc fa31 	bl	8000adc <__aeabi_dcmplt>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <main+0xf5c>
			  {
			  	  start(0, 1600, 0, 1);
			  	  HAL_Delay(2000);
			  	  mode = STORAGE_AREA;
			  }
			  break;
 8004680:	f000 bda2 	b.w	80051c8 <main+0x1aa0>
			  	  start(0, 1600, 0, 1);
 8004684:	2301      	movs	r3, #1
 8004686:	2200      	movs	r2, #0
 8004688:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800468c:	2000      	movs	r0, #0
 800468e:	f7fd ff03 	bl	8002498 <start>
			  	  HAL_Delay(2000);
 8004692:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004696:	f005 fafb 	bl	8009c90 <HAL_Delay>
			  	  mode = STORAGE_AREA;
 800469a:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <main+0xfe0>)
 800469c:	2308      	movs	r3, #8
 800469e:	7013      	strb	r3, [r2, #0]
			  break;
 80046a0:	f000 bd92 	b.w	80051c8 <main+0x1aa0>
		  case RETRY:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80046a4:	2201      	movs	r2, #1
 80046a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046aa:	4818      	ldr	r0, [pc, #96]	@ (800470c <main+0xfe4>)
 80046ac:	f005 fe6c 	bl	800a388 <HAL_GPIO_WritePin>
			  PID_Kalman(retry1, 3);
 80046b0:	ed97 5b5c 	vldr	d5, [r7, #368]	@ 0x170
 80046b4:	ed97 6b5e 	vldr	d6, [r7, #376]	@ 0x178
 80046b8:	ed97 7b60 	vldr	d7, [r7, #384]	@ 0x180
 80046bc:	2003      	movs	r0, #3
 80046be:	eeb0 0a45 	vmov.f32	s0, s10
 80046c2:	eef0 0a65 	vmov.f32	s1, s11
 80046c6:	eeb0 1a46 	vmov.f32	s2, s12
 80046ca:	eef0 1a66 	vmov.f32	s3, s13
 80046ce:	eeb0 2a47 	vmov.f32	s4, s14
 80046d2:	eef0 2a67 	vmov.f32	s5, s15
 80046d6:	f004 f979 	bl	80089cc <PID_Kalman>
			  if(retry1Step)
 80046da:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 856b 	beq.w	80051ba <main+0x1a92>
			  {
				  mode = RETRY2;
 80046e4:	4a08      	ldr	r2, [pc, #32]	@ (8004708 <main+0xfe0>)
 80046e6:	230d      	movs	r3, #13
 80046e8:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80046ea:	f000 bd66 	b.w	80051ba <main+0x1a92>
 80046ee:	bf00      	nop
 80046f0:	00000000 	.word	0x00000000
 80046f4:	40568000 	.word	0x40568000
 80046f8:	00000000 	.word	0x00000000
 80046fc:	c0890000 	.word	0xc0890000
 8004700:	00000000 	.word	0x00000000
 8004704:	c0568000 	.word	0xc0568000
 8004708:	20000610 	.word	0x20000610
 800470c:	40020c00 	.word	0x40020c00
 8004710:	200005fc 	.word	0x200005fc
 8004714:	40568000 	.word	0x40568000
 8004718:	2000058c 	.word	0x2000058c
 800471c:	fffffce0 	.word	0xfffffce0
 8004720:	c0568000 	.word	0xc0568000
		  case RETRY2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800472a:	48c7      	ldr	r0, [pc, #796]	@ (8004a48 <main+0x1320>)
 800472c:	f005 fe2c 	bl	800a388 <HAL_GPIO_WritePin>
			  Vy = 1.5 * (1000 - position.y);
 8004730:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004734:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004738:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800473c:	f04f 0000 	mov.w	r0, #0
 8004740:	49c2      	ldr	r1, [pc, #776]	@ (8004a4c <main+0x1324>)
 8004742:	f7fb fda1 	bl	8000288 <__aeabi_dsub>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	4bbf      	ldr	r3, [pc, #764]	@ (8004a50 <main+0x1328>)
 8004754:	f7fb ff50 	bl	80005f8 <__aeabi_dmul>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
			  W = (0.0 - position.h);
 8004760:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004764:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004768:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800476c:	f04f 0000 	mov.w	r0, #0
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	f7fb fd88 	bl	8000288 <__aeabi_dsub>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
			  if(position.y >= 850)
 8004780:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004784:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004788:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	4bb0      	ldr	r3, [pc, #704]	@ (8004a54 <main+0x132c>)
 8004792:	f7fc f9b7 	bl	8000b04 <__aeabi_dcmpge>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d03c      	beq.n	8004816 <main+0x10ee>
			  {
				  if(fabs(0.0 - position.h) < 0.7)
 800479c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80047a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80047a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	f7fb fd6a 	bl	8000288 <__aeabi_dsub>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80047ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c0:	a395      	add	r3, pc, #596	@ (adr r3, 8004a18 <main+0x12f0>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80047ca:	f7fc f987 	bl	8000adc <__aeabi_dcmplt>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <main+0x10c0>
				  {
					  Inverse_Kinematics(0, 0, 0);
 80047d4:	2200      	movs	r2, #0
 80047d6:	2100      	movs	r1, #0
 80047d8:	2000      	movs	r0, #0
 80047da:	f7fc fcb5 	bl	8001148 <Inverse_Kinematics>
					  mode = RETRY3;
 80047de:	4a9e      	ldr	r2, [pc, #632]	@ (8004a58 <main+0x1330>)
 80047e0:	230e      	movs	r3, #14
 80047e2:	7013      	strb	r3, [r2, #0]
			  }
			  else
			  {
				  start(0, Vy, 0, battery);
			  }
		  	  break;
 80047e4:	f000 bcf0 	b.w	80051c8 <main+0x1aa0>
					  putar(0, 0, W);
 80047e8:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 80047ec:	f7fc f9b4 	bl	8000b58 <__aeabi_d2iz>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	2100      	movs	r1, #0
 80047f6:	2000      	movs	r0, #0
 80047f8:	f7fd f9b2 	bl	8001b60 <putar>
					  HAL_Delay(150);
 80047fc:	2096      	movs	r0, #150	@ 0x96
 80047fe:	f005 fa47 	bl	8009c90 <HAL_Delay>
					  putar(0, 0, 0);
 8004802:	2200      	movs	r2, #0
 8004804:	2100      	movs	r1, #0
 8004806:	2000      	movs	r0, #0
 8004808:	f7fd f9aa 	bl	8001b60 <putar>
					  HAL_Delay(150);
 800480c:	2096      	movs	r0, #150	@ 0x96
 800480e:	f005 fa3f 	bl	8009c90 <HAL_Delay>
		  	  break;
 8004812:	f000 bcd9 	b.w	80051c8 <main+0x1aa0>
				  start(0, Vy, 0, battery);
 8004816:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 800481a:	f7fc f99d 	bl	8000b58 <__aeabi_d2iz>
 800481e:	4601      	mov	r1, r0
 8004820:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8004824:	2200      	movs	r2, #0
 8004826:	2000      	movs	r0, #0
 8004828:	f7fd fe36 	bl	8002498 <start>
		  	  break;
 800482c:	f000 bccc 	b.w	80051c8 <main+0x1aa0>
		  case RETRY3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8004830:	2201      	movs	r2, #1
 8004832:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004836:	4884      	ldr	r0, [pc, #528]	@ (8004a48 <main+0x1320>)
 8004838:	f005 fda6 	bl	800a388 <HAL_GPIO_WritePin>
			  Vx = (4150 - position.x);
 800483c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004840:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	a175      	add	r1, pc, #468	@ (adr r1, 8004a20 <main+0x12f8>)
 800484a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800484e:	f7fb fd1b 	bl	8000288 <__aeabi_dsub>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
			  W = (0.0 - position.h);
 800485a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800485e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004862:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004866:	f04f 0000 	mov.w	r0, #0
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	f7fb fd0b 	bl	8000288 <__aeabi_dsub>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240

			  if(position.x >= 4000)
 800487a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800487e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	4b74      	ldr	r3, [pc, #464]	@ (8004a5c <main+0x1334>)
 800488c:	f7fc f93a 	bl	8000b04 <__aeabi_dcmpge>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d03c      	beq.n	8004910 <main+0x11e8>
			  {
				  if(fabs(0.0 - position.h) < 0.7)
 8004896:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800489a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800489e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f04f 0100 	mov.w	r1, #0
 80048aa:	f7fb fced 	bl	8000288 <__aeabi_dsub>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80048b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ba:	a357      	add	r3, pc, #348	@ (adr r3, 8004a18 <main+0x12f0>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80048c4:	f7fc f90a 	bl	8000adc <__aeabi_dcmplt>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <main+0x11ba>
				  {
					  Inverse_Kinematics(0, 0, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2100      	movs	r1, #0
 80048d2:	2000      	movs	r0, #0
 80048d4:	f7fc fc38 	bl	8001148 <Inverse_Kinematics>
					  mode = RETRY4;
 80048d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004a58 <main+0x1330>)
 80048da:	230f      	movs	r3, #15
 80048dc:	7013      	strb	r3, [r2, #0]
			  }
			  else
			  {
				  kanan(Vx, 0, 0);
			  }
			  break;
 80048de:	f000 bc73 	b.w	80051c8 <main+0x1aa0>
					  putar(0, 0, W);
 80048e2:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 80048e6:	f7fc f937 	bl	8000b58 <__aeabi_d2iz>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	2100      	movs	r1, #0
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fd f935 	bl	8001b60 <putar>
					  HAL_Delay(150);
 80048f6:	2096      	movs	r0, #150	@ 0x96
 80048f8:	f005 f9ca 	bl	8009c90 <HAL_Delay>
					  putar(0, 0, 0);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2100      	movs	r1, #0
 8004900:	2000      	movs	r0, #0
 8004902:	f7fd f92d 	bl	8001b60 <putar>
					  HAL_Delay(150);
 8004906:	2096      	movs	r0, #150	@ 0x96
 8004908:	f005 f9c2 	bl	8009c90 <HAL_Delay>
			  break;
 800490c:	f000 bc5c 	b.w	80051c8 <main+0x1aa0>
			  else if(position.x < 2200)
 8004910:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004914:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491c:	a342      	add	r3, pc, #264	@ (adr r3, 8004a28 <main+0x1300>)
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f7fc f8db 	bl	8000adc <__aeabi_dcmplt>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <main+0x1214>
				  kanan(1600, 0, 0);
 800492c:	2200      	movs	r2, #0
 800492e:	2100      	movs	r1, #0
 8004930:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004934:	f7fd fb5c 	bl	8001ff0 <kanan>
			  break;
 8004938:	f000 bc46 	b.w	80051c8 <main+0x1aa0>
				  kanan(Vx, 0, 0);
 800493c:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8004940:	f7fc f90a 	bl	8000b58 <__aeabi_d2iz>
 8004944:	4603      	mov	r3, r0
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fb50 	bl	8001ff0 <kanan>
			  break;
 8004950:	f000 bc3a 	b.w	80051c8 <main+0x1aa0>
		  case RETRY4:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800495a:	483b      	ldr	r0, [pc, #236]	@ (8004a48 <main+0x1320>)
 800495c:	f005 fd14 	bl	800a388 <HAL_GPIO_WritePin>
			  Vy = (4600 - position.y);
 8004960:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004964:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004968:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800496c:	a130      	add	r1, pc, #192	@ (adr r1, 8004a30 <main+0x1308>)
 800496e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004972:	f7fb fc89 	bl	8000288 <__aeabi_dsub>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
			  double gain = sensorData[1] * 200;
 800497e:	4b38      	ldr	r3, [pc, #224]	@ (8004a60 <main+0x1338>)
 8004980:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	4b36      	ldr	r3, [pc, #216]	@ (8004a64 <main+0x133c>)
 800498a:	f7fb fe35 	bl	80005f8 <__aeabi_dmul>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
			  if(position.y < 2600)
 8004996:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800499a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800499e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80049a2:	a325      	add	r3, pc, #148	@ (adr r3, 8004a38 <main+0x1310>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fc f898 	bl	8000adc <__aeabi_dcmplt>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <main+0x12a2>
			  {
				  Vy = 1600 + gain;
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a68 <main+0x1340>)
 80049b8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80049bc:	f7fb fc66 	bl	800028c <__adddf3>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
 80049c8:	e018      	b.n	80049fc <main+0x12d4>
			  }
			  else if(position.y > 4400)
 80049ca:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80049ce:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80049d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80049d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8004a40 <main+0x1318>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fc f89c 	bl	8000b18 <__aeabi_dcmpgt>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <main+0x12d4>
			  {
				  Inverse_Kinematics(0, 0, 0);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2100      	movs	r1, #0
 80049ea:	2000      	movs	r0, #0
 80049ec:	f7fc fbac 	bl	8001148 <Inverse_Kinematics>
				  HAL_Delay(200);
 80049f0:	20c8      	movs	r0, #200	@ 0xc8
 80049f2:	f005 f94d 	bl	8009c90 <HAL_Delay>
				  mode = TRIAL;
 80049f6:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <main+0x1330>)
 80049f8:	2310      	movs	r3, #16
 80049fa:	7013      	strb	r3, [r2, #0]
			  }
			  start(0, Vy, 0, battery);
 80049fc:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8004a00:	f7fc f8aa 	bl	8000b58 <__aeabi_d2iz>
 8004a04:	4601      	mov	r1, r0
 8004a06:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7fd fd43 	bl	8002498 <start>
		  	  break;
 8004a12:	e3d9      	b.n	80051c8 <main+0x1aa0>
 8004a14:	f3af 8000 	nop.w
 8004a18:	66666666 	.word	0x66666666
 8004a1c:	3fe66666 	.word	0x3fe66666
 8004a20:	00000000 	.word	0x00000000
 8004a24:	40b03600 	.word	0x40b03600
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	40a13000 	.word	0x40a13000
 8004a30:	00000000 	.word	0x00000000
 8004a34:	40b1f800 	.word	0x40b1f800
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	40a45000 	.word	0x40a45000
 8004a40:	00000000 	.word	0x00000000
 8004a44:	40b13000 	.word	0x40b13000
 8004a48:	40020c00 	.word	0x40020c00
 8004a4c:	408f4000 	.word	0x408f4000
 8004a50:	3ff80000 	.word	0x3ff80000
 8004a54:	408a9000 	.word	0x408a9000
 8004a58:	20000610 	.word	0x20000610
 8004a5c:	40af4000 	.word	0x40af4000
 8004a60:	20000540 	.word	0x20000540
 8004a64:	40690000 	.word	0x40690000
 8004a68:	40990000 	.word	0x40990000
		  case TRIAL:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a72:	48c1      	ldr	r0, [pc, #772]	@ (8004d78 <main+0x1650>)
 8004a74:	f005 fc88 	bl	800a388 <HAL_GPIO_WritePin>
		  	  PID_setDegree(-90.0);
 8004a78:	ed9f 0bb5 	vldr	d0, [pc, #724]	@ 8004d50 <main+0x1628>
 8004a7c:	f004 f830 	bl	8008ae0 <PID_setDegree>
		  	  if(fabs(-90.0 - position.h) < 3)
 8004a80:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004a84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a8c:	f04f 0000 	mov.w	r0, #0
 8004a90:	49ba      	ldr	r1, [pc, #744]	@ (8004d7c <main+0x1654>)
 8004a92:	f7fb fbf9 	bl	8000288 <__aeabi_dsub>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	623a      	str	r2, [r7, #32]
 8004a9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	4bb6      	ldr	r3, [pc, #728]	@ (8004d80 <main+0x1658>)
 8004aa8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004aac:	f7fc f816 	bl	8000adc <__aeabi_dcmplt>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d100      	bne.n	8004ab8 <main+0x1390>
		  	  {
		  		  mode = TRIAL2;
		  	  }
			  break;
 8004ab6:	e387      	b.n	80051c8 <main+0x1aa0>
		  		  mode = TRIAL2;
 8004ab8:	4ab2      	ldr	r2, [pc, #712]	@ (8004d84 <main+0x165c>)
 8004aba:	2311      	movs	r3, #17
 8004abc:	7013      	strb	r3, [r2, #0]
			  break;
 8004abe:	e383      	b.n	80051c8 <main+0x1aa0>
		  case TRIAL2:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ac6:	48ac      	ldr	r0, [pc, #688]	@ (8004d78 <main+0x1650>)
 8004ac8:	f005 fc5e 	bl	800a388 <HAL_GPIO_WritePin>
		  	  start(0, 1500, 0, 1);
 8004acc:	2301      	movs	r3, #1
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7fd fcdf 	bl	8002498 <start>
		  	  servo_write(55);
 8004ada:	2037      	movs	r0, #55	@ 0x37
 8004adc:	f003 ff5e 	bl	800899c <servo_write>
		  	  HAL_Delay(2300);
 8004ae0:	f640 00fc 	movw	r0, #2300	@ 0x8fc
 8004ae4:	f005 f8d4 	bl	8009c90 <HAL_Delay>
		  	  mode = TRIAL3;
 8004ae8:	4aa6      	ldr	r2, [pc, #664]	@ (8004d84 <main+0x165c>)
 8004aea:	2312      	movs	r3, #18
 8004aec:	7013      	strb	r3, [r2, #0]
			  break;
 8004aee:	e36b      	b.n	80051c8 <main+0x1aa0>
		  case TRIAL3:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8004af0:	2201      	movs	r2, #1
 8004af2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004af6:	48a0      	ldr	r0, [pc, #640]	@ (8004d78 <main+0x1650>)
 8004af8:	f005 fc46 	bl	800a388 <HAL_GPIO_WritePin>
		  	  findtheBall();
 8004afc:	f004 f8ec 	bl	8008cd8 <findtheBall>
			  if(sensorMEGA[4] == 0)
 8004b00:	4ba1      	ldr	r3, [pc, #644]	@ (8004d88 <main+0x1660>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 835a 	bne.w	80051be <main+0x1a96>
			  {
				  Inverse_Kinematics(0, 0, 0);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fc fb1a 	bl	8001148 <Inverse_Kinematics>
				  mode = TRIAL4;
 8004b14:	4a9b      	ldr	r2, [pc, #620]	@ (8004d84 <main+0x165c>)
 8004b16:	2313      	movs	r3, #19
 8004b18:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8004b1a:	e350      	b.n	80051be <main+0x1a96>
		  case TRIAL4:
			  Vx = 900 * cos(position.h * M_PI/180);
 8004b1c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004b20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b24:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b28:	a38b      	add	r3, pc, #556	@ (adr r3, 8004d58 <main+0x1630>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fd63 	bl	80005f8 <__aeabi_dmul>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	4b93      	ldr	r3, [pc, #588]	@ (8004d8c <main+0x1664>)
 8004b40:	f7fb fe84 	bl	800084c <__aeabi_ddiv>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	ec43 2b17 	vmov	d7, r2, r3
 8004b4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b50:	eef0 0a67 	vmov.f32	s1, s15
 8004b54:	f00d f978 	bl	8011e48 <cos>
 8004b58:	ec51 0b10 	vmov	r0, r1, d0
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	4b8b      	ldr	r3, [pc, #556]	@ (8004d90 <main+0x1668>)
 8004b62:	f7fb fd49 	bl	80005f8 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
			  Vy = 900 * sin(position.h * M_PI/180);
 8004b6e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004b72:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b76:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b7a:	a377      	add	r3, pc, #476	@ (adr r3, 8004d58 <main+0x1630>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fd3a 	bl	80005f8 <__aeabi_dmul>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	4b7e      	ldr	r3, [pc, #504]	@ (8004d8c <main+0x1664>)
 8004b92:	f7fb fe5b 	bl	800084c <__aeabi_ddiv>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	ec43 2b17 	vmov	d7, r2, r3
 8004b9e:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba2:	eef0 0a67 	vmov.f32	s1, s15
 8004ba6:	f00d f9a3 	bl	8011ef0 <sin>
 8004baa:	ec51 0b10 	vmov	r0, r1, d0
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	4b77      	ldr	r3, [pc, #476]	@ (8004d90 <main+0x1668>)
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
			  baru(Vx, Vy, 0);
 8004bc0:	ed9f 2b67 	vldr	d2, [pc, #412]	@ 8004d60 <main+0x1638>
 8004bc4:	ed97 1b96 	vldr	d1, [r7, #600]	@ 0x258
 8004bc8:	ed97 0b92 	vldr	d0, [r7, #584]	@ 0x248
 8004bcc:	f7fc fd04 	bl	80015d8 <baru>
			  HAL_Delay(1000);
 8004bd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004bd4:	f005 f85c 	bl	8009c90 <HAL_Delay>
			  mode = TRIAL5;
 8004bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8004d84 <main+0x165c>)
 8004bda:	2314      	movs	r3, #20
 8004bdc:	7013      	strb	r3, [r2, #0]
			  break;
 8004bde:	e2f3      	b.n	80051c8 <main+0x1aa0>
		  case TRIAL5:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004be0:	2200      	movs	r2, #0
 8004be2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004be6:	4864      	ldr	r0, [pc, #400]	@ (8004d78 <main+0x1650>)
 8004be8:	f005 fbce 	bl	800a388 <HAL_GPIO_WritePin>
		  	  PID_setDegree(90.0);
 8004bec:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 8004d68 <main+0x1640>
 8004bf0:	f003 ff76 	bl	8008ae0 <PID_setDegree>
		  	  setMotorSpeed(1, 0);
 8004bf4:	ed9f 0b5a 	vldr	d0, [pc, #360]	@ 8004d60 <main+0x1638>
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7fc fa2f 	bl	800105c <setMotorSpeed>
		  	  setMotorSpeed(2, 0);
 8004bfe:	ed9f 0b58 	vldr	d0, [pc, #352]	@ 8004d60 <main+0x1638>
 8004c02:	2002      	movs	r0, #2
 8004c04:	f7fc fa2a 	bl	800105c <setMotorSpeed>
		  	  if(fabs(90.0 - position.h) < 2)
 8004c08:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004c0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004c10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	495e      	ldr	r1, [pc, #376]	@ (8004d94 <main+0x166c>)
 8004c1a:	f7fb fb35 	bl	8000288 <__aeabi_dsub>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	61ba      	str	r2, [r7, #24]
 8004c24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c36:	f7fb ff51 	bl	8000adc <__aeabi_dcmplt>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d100      	bne.n	8004c42 <main+0x151a>
		  	  {
		  		  Inverse_Kinematics(0, 0, 0);
		  		  mode = TRIAL6;
		  	  }
			  break;
 8004c40:	e2c2      	b.n	80051c8 <main+0x1aa0>
		  		  Inverse_Kinematics(0, 0, 0);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2100      	movs	r1, #0
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7fc fa7e 	bl	8001148 <Inverse_Kinematics>
		  		  mode = TRIAL6;
 8004c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8004d84 <main+0x165c>)
 8004c4e:	2315      	movs	r3, #21
 8004c50:	7013      	strb	r3, [r2, #0]
			  break;
 8004c52:	e2b9      	b.n	80051c8 <main+0x1aa0>
		  case TRIAL6:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8004c54:	2201      	movs	r2, #1
 8004c56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c5a:	4847      	ldr	r0, [pc, #284]	@ (8004d78 <main+0x1650>)
 8004c5c:	f005 fb94 	bl	800a388 <HAL_GPIO_WritePin>
		  	  start(0, 2400, 0, 1);
 8004c60:	2301      	movs	r3, #1
 8004c62:	2200      	movs	r2, #0
 8004c64:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7fd fc15 	bl	8002498 <start>
		  	  servo_write(80);
 8004c6e:	2050      	movs	r0, #80	@ 0x50
 8004c70:	f003 fe94 	bl	800899c <servo_write>
		  	  if(camera[3] < 130 || camera[5] < 130 || camera[7] < 130 || camera[9] < 130 || camera[11] < 130)
 8004c74:	4b48      	ldr	r3, [pc, #288]	@ (8004d98 <main+0x1670>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b81      	cmp	r3, #129	@ 0x81
 8004c7a:	dd10      	ble.n	8004c9e <main+0x1576>
 8004c7c:	4b46      	ldr	r3, [pc, #280]	@ (8004d98 <main+0x1670>)
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	2b81      	cmp	r3, #129	@ 0x81
 8004c82:	dd0c      	ble.n	8004c9e <main+0x1576>
 8004c84:	4b44      	ldr	r3, [pc, #272]	@ (8004d98 <main+0x1670>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	2b81      	cmp	r3, #129	@ 0x81
 8004c8a:	dd08      	ble.n	8004c9e <main+0x1576>
 8004c8c:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <main+0x1670>)
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	2b81      	cmp	r3, #129	@ 0x81
 8004c92:	dd04      	ble.n	8004c9e <main+0x1576>
 8004c94:	4b40      	ldr	r3, [pc, #256]	@ (8004d98 <main+0x1670>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	2b81      	cmp	r3, #129	@ 0x81
 8004c9a:	f300 8292 	bgt.w	80051c2 <main+0x1a9a>
		  	  {
		  		  Inverse_Kinematics(0, 0, 0);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7fc fa50 	bl	8001148 <Inverse_Kinematics>
			  	  mode = TRIAL7;
 8004ca8:	4a36      	ldr	r2, [pc, #216]	@ (8004d84 <main+0x165c>)
 8004caa:	2316      	movs	r3, #22
 8004cac:	7013      	strb	r3, [r2, #0]
		  	  }
			  break;
 8004cae:	e288      	b.n	80051c2 <main+0x1a9a>
		  case TRIAL7:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004cb6:	4830      	ldr	r0, [pc, #192]	@ (8004d78 <main+0x1650>)
 8004cb8:	f005 fb66 	bl	800a388 <HAL_GPIO_WritePin>
		  	  findSilo();
 8004cbc:	f004 f970 	bl	8008fa0 <findSilo>
			  if((frontLeftDistance > 0 && frontLeftDistance <= 10) || (frontRightDistance > 0 && frontRightDistance <= 10))
 8004cc0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dd03      	ble.n	8004cd0 <main+0x15a8>
 8004cc8:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8004ccc:	2b0a      	cmp	r3, #10
 8004cce:	dd09      	ble.n	8004ce4 <main+0x15bc>
 8004cd0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f340 8276 	ble.w	80051c6 <main+0x1a9e>
 8004cda:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8004cde:	2b0a      	cmp	r3, #10
 8004ce0:	f300 8271 	bgt.w	80051c6 <main+0x1a9e>
			  {
				  Inverse_Kinematics(0, 0, 0);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f7fc fa2d 	bl	8001148 <Inverse_Kinematics>
				  setMotorSpeed(1, -1000);
 8004cee:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8004d70 <main+0x1648>
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f7fc f9b2 	bl	800105c <setMotorSpeed>
				  setMotorSpeed(2, -1000);
 8004cf8:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8004d70 <main+0x1648>
 8004cfc:	2002      	movs	r0, #2
 8004cfe:	f7fc f9ad 	bl	800105c <setMotorSpeed>
				  HAL_Delay(4000);
 8004d02:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8004d06:	f004 ffc3 	bl	8009c90 <HAL_Delay>
				  mode = TRIAL8;
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <main+0x165c>)
 8004d0c:	2317      	movs	r3, #23
 8004d0e:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8004d10:	e259      	b.n	80051c6 <main+0x1a9e>
		  case TRIAL8:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8004d12:	2201      	movs	r2, #1
 8004d14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d18:	4817      	ldr	r0, [pc, #92]	@ (8004d78 <main+0x1650>)
 8004d1a:	f005 fb35 	bl	800a388 <HAL_GPIO_WritePin>
			  setMotorSpeed(1, 0);
 8004d1e:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 8004d60 <main+0x1638>
 8004d22:	2001      	movs	r0, #1
 8004d24:	f7fc f99a 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, 0);
 8004d28:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8004d60 <main+0x1638>
 8004d2c:	2002      	movs	r0, #2
 8004d2e:	f7fc f995 	bl	800105c <setMotorSpeed>
			  start(0, -1400, 0, battery);
 8004d32:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8004d36:	2200      	movs	r2, #0
 8004d38:	4918      	ldr	r1, [pc, #96]	@ (8004d9c <main+0x1674>)
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f7fd fbac 	bl	8002498 <start>
			  HAL_Delay(2500);
 8004d40:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8004d44:	f004 ffa4 	bl	8009c90 <HAL_Delay>
			  mode = NEXT_STEP;
 8004d48:	4a0e      	ldr	r2, [pc, #56]	@ (8004d84 <main+0x165c>)
 8004d4a:	231c      	movs	r3, #28
 8004d4c:	7013      	strb	r3, [r2, #0]
			  break;
 8004d4e:	e23b      	b.n	80051c8 <main+0x1aa0>
 8004d50:	00000000 	.word	0x00000000
 8004d54:	c0568000 	.word	0xc0568000
 8004d58:	54442d18 	.word	0x54442d18
 8004d5c:	400921fb 	.word	0x400921fb
	...
 8004d6c:	40568000 	.word	0x40568000
 8004d70:	00000000 	.word	0x00000000
 8004d74:	c08f4000 	.word	0xc08f4000
 8004d78:	40020c00 	.word	0x40020c00
 8004d7c:	c0568000 	.word	0xc0568000
 8004d80:	40080000 	.word	0x40080000
 8004d84:	20000610 	.word	0x20000610
 8004d88:	200005fc 	.word	0x200005fc
 8004d8c:	40668000 	.word	0x40668000
 8004d90:	408c2000 	.word	0x408c2000
 8004d94:	40568000 	.word	0x40568000
 8004d98:	2000058c 	.word	0x2000058c
 8004d9c:	fffffa88 	.word	0xfffffa88
		  case NEXT_STEP:
		  	  PID_setDegree(-90.0);
 8004da0:	ed9f 0bb7 	vldr	d0, [pc, #732]	@ 8005080 <main+0x1958>
 8004da4:	f003 fe9c 	bl	8008ae0 <PID_setDegree>
		  	  if(fabs(-90.0 - position.h) < 1)
 8004da8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004dac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004db0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004db4:	f04f 0000 	mov.w	r0, #0
 8004db8:	49bf      	ldr	r1, [pc, #764]	@ (80050b8 <main+0x1990>)
 8004dba:	f7fb fa65 	bl	8000288 <__aeabi_dsub>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	613a      	str	r2, [r7, #16]
 8004dc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	4bbb      	ldr	r3, [pc, #748]	@ (80050bc <main+0x1994>)
 8004dd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dd4:	f7fb fe82 	bl	8000adc <__aeabi_dcmplt>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d100      	bne.n	8004de0 <main+0x16b8>
		  	  {
		  		  mode = NEXT_STEP2;
		  	  }
			  break;
 8004dde:	e1f3      	b.n	80051c8 <main+0x1aa0>
		  		  mode = NEXT_STEP2;
 8004de0:	4ab7      	ldr	r2, [pc, #732]	@ (80050c0 <main+0x1998>)
 8004de2:	231d      	movs	r3, #29
 8004de4:	7013      	strb	r3, [r2, #0]
			  break;
 8004de6:	e1ef      	b.n	80051c8 <main+0x1aa0>
		  case NEXT_STEP2:
		  	  start(0, 1300, 0, 1);
 8004de8:	2301      	movs	r3, #1
 8004dea:	2200      	movs	r2, #0
 8004dec:	f240 5114 	movw	r1, #1300	@ 0x514
 8004df0:	2000      	movs	r0, #0
 8004df2:	f7fd fb51 	bl	8002498 <start>
		  	  servo_write(55);
 8004df6:	2037      	movs	r0, #55	@ 0x37
 8004df8:	f003 fdd0 	bl	800899c <servo_write>
		  	  HAL_Delay(2500);
 8004dfc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8004e00:	f004 ff46 	bl	8009c90 <HAL_Delay>
		  	  mode = TRIAL3;
 8004e04:	4aae      	ldr	r2, [pc, #696]	@ (80050c0 <main+0x1998>)
 8004e06:	2312      	movs	r3, #18
 8004e08:	7013      	strb	r3, [r2, #0]
			  break;
 8004e0a:	e1dd      	b.n	80051c8 <main+0x1aa0>
		  case RUNNINGTEST_1:
			  gain = sensorData[1] * 200;
 8004e0c:	4bad      	ldr	r3, [pc, #692]	@ (80050c4 <main+0x199c>)
 8004e0e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	4bac      	ldr	r3, [pc, #688]	@ (80050c8 <main+0x19a0>)
 8004e18:	f7fb fbee 	bl	80005f8 <__aeabi_dmul>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
			  Vy = 0.7*(6650 - position.y);
 8004e24:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004e28:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004e2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e30:	a195      	add	r1, pc, #596	@ (adr r1, 8005088 <main+0x1960>)
 8004e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e36:	f7fb fa27 	bl	8000288 <__aeabi_dsub>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	a393      	add	r3, pc, #588	@ (adr r3, 8005090 <main+0x1968>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f7fb fbd6 	bl	80005f8 <__aeabi_dmul>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
			  W = (0.0 - position.h);
 8004e54:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004e58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004e5c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e60:	f04f 0000 	mov.w	r0, #0
 8004e64:	f04f 0100 	mov.w	r1, #0
 8004e68:	f7fb fa0e 	bl	8000288 <__aeabi_dsub>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240

			  if(position.y >= 6500)
 8004e74:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004e78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004e7c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e80:	a385      	add	r3, pc, #532	@ (adr r3, 8005098 <main+0x1970>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f7fb fe3d 	bl	8000b04 <__aeabi_dcmpge>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d03d      	beq.n	8004f0c <main+0x17e4>
			  {
				  if(fabs(0.0 - position.h) < 0.7)
 8004e90:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004e94:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004e98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	f7fb f9f0 	bl	8000288 <__aeabi_dsub>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	60ba      	str	r2, [r7, #8]
 8004eae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	a376      	add	r3, pc, #472	@ (adr r3, 8005090 <main+0x1968>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ebe:	f7fb fe0d 	bl	8000adc <__aeabi_dcmplt>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <main+0x17b8>
				  {
					  Inverse_Kinematics(0, 0, 0);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7fc f93b 	bl	8001148 <Inverse_Kinematics>
					  HAL_Delay(200);
 8004ed2:	20c8      	movs	r0, #200	@ 0xc8
 8004ed4:	f004 fedc 	bl	8009c90 <HAL_Delay>
					  mode = RUNNINGTEST_2;
 8004ed8:	4a79      	ldr	r2, [pc, #484]	@ (80050c0 <main+0x1998>)
 8004eda:	231a      	movs	r3, #26
 8004edc:	7013      	strb	r3, [r2, #0]
			  }
			  else
			  {
				  start(0, Vy, 0, battery);
			  }
			  break;
 8004ede:	e173      	b.n	80051c8 <main+0x1aa0>
					  putar(0, 0, W);
 8004ee0:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8004ee4:	f7fb fe38 	bl	8000b58 <__aeabi_d2iz>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	2100      	movs	r1, #0
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7fc fe36 	bl	8001b60 <putar>
					  HAL_Delay(150);
 8004ef4:	2096      	movs	r0, #150	@ 0x96
 8004ef6:	f004 fecb 	bl	8009c90 <HAL_Delay>
					  putar(0, 0, 0);
 8004efa:	2200      	movs	r2, #0
 8004efc:	2100      	movs	r1, #0
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fc fe2e 	bl	8001b60 <putar>
					  HAL_Delay(150);
 8004f04:	2096      	movs	r0, #150	@ 0x96
 8004f06:	f004 fec3 	bl	8009c90 <HAL_Delay>
			  break;
 8004f0a:	e15d      	b.n	80051c8 <main+0x1aa0>
			  else if(position.y < 4200)
 8004f0c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004f10:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004f14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004f18:	a361      	add	r3, pc, #388	@ (adr r3, 80050a0 <main+0x1978>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fddd 	bl	8000adc <__aeabi_dcmplt>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d014      	beq.n	8004f52 <main+0x182a>
				  start(0, 1600 + gain, 0, battery);
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	4b67      	ldr	r3, [pc, #412]	@ (80050cc <main+0x19a4>)
 8004f2e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004f32:	f7fb f9ab 	bl	800028c <__adddf3>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7fb fe0b 	bl	8000b58 <__aeabi_d2iz>
 8004f42:	4601      	mov	r1, r0
 8004f44:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f7fd faa4 	bl	8002498 <start>
			  break;
 8004f50:	e13a      	b.n	80051c8 <main+0x1aa0>
				  start(0, Vy, 0, battery);
 8004f52:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8004f56:	f7fb fdff 	bl	8000b58 <__aeabi_d2iz>
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8004f60:	2200      	movs	r2, #0
 8004f62:	2000      	movs	r0, #0
 8004f64:	f7fd fa98 	bl	8002498 <start>
			  break;
 8004f68:	e12e      	b.n	80051c8 <main+0x1aa0>
		  case RUNNINGTEST_2:
			  Vx = (4150 - position.x);
 8004f6a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004f6e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	a14c      	add	r1, pc, #304	@ (adr r1, 80050a8 <main+0x1980>)
 8004f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f7c:	f7fb f984 	bl	8000288 <__aeabi_dsub>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
			  W = (0.0 - position.h);
 8004f88:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004f8c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004f90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	f7fb f974 	bl	8000288 <__aeabi_dsub>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240

			  if(position.x >= 4000)
 8004fa8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004fac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004fb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	4b45      	ldr	r3, [pc, #276]	@ (80050d0 <main+0x19a8>)
 8004fba:	f7fb fda3 	bl	8000b04 <__aeabi_dcmpge>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d03d      	beq.n	8005040 <main+0x1918>
			  {
				  if(fabs(0.0 - position.h) < 0.7)
 8004fc4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8004fc8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004fcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004fd0:	f04f 0000 	mov.w	r0, #0
 8004fd4:	f04f 0100 	mov.w	r1, #0
 8004fd8:	f7fb f956 	bl	8000288 <__aeabi_dsub>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	603a      	str	r2, [r7, #0]
 8004fe2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	a329      	add	r3, pc, #164	@ (adr r3, 8005090 <main+0x1968>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ff2:	f7fb fd73 	bl	8000adc <__aeabi_dcmplt>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <main+0x18ec>
				  {
					  Inverse_Kinematics(0, 0, 0);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2100      	movs	r1, #0
 8005000:	2000      	movs	r0, #0
 8005002:	f7fc f8a1 	bl	8001148 <Inverse_Kinematics>
					  HAL_Delay(200);
 8005006:	20c8      	movs	r0, #200	@ 0xc8
 8005008:	f004 fe42 	bl	8009c90 <HAL_Delay>
					  mode = RUNNINGTEST_3;
 800500c:	4a2c      	ldr	r2, [pc, #176]	@ (80050c0 <main+0x1998>)
 800500e:	231b      	movs	r3, #27
 8005010:	7013      	strb	r3, [r2, #0]
			  }
			  else
			  {
				  kanan(Vx, 0, 0);
			  }
			  break;
 8005012:	e0d9      	b.n	80051c8 <main+0x1aa0>
					  putar(0, 0, W);
 8005014:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8005018:	f7fb fd9e 	bl	8000b58 <__aeabi_d2iz>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	2100      	movs	r1, #0
 8005022:	2000      	movs	r0, #0
 8005024:	f7fc fd9c 	bl	8001b60 <putar>
					  HAL_Delay(150);
 8005028:	2096      	movs	r0, #150	@ 0x96
 800502a:	f004 fe31 	bl	8009c90 <HAL_Delay>
					  putar(0, 0, 0);
 800502e:	2200      	movs	r2, #0
 8005030:	2100      	movs	r1, #0
 8005032:	2000      	movs	r0, #0
 8005034:	f7fc fd94 	bl	8001b60 <putar>
					  HAL_Delay(150);
 8005038:	2096      	movs	r0, #150	@ 0x96
 800503a:	f004 fe29 	bl	8009c90 <HAL_Delay>
			  break;
 800503e:	e0c3      	b.n	80051c8 <main+0x1aa0>
			  else if(position.x < 2200)
 8005040:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8005044:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800504c:	a318      	add	r3, pc, #96	@ (adr r3, 80050b0 <main+0x1988>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f7fb fd43 	bl	8000adc <__aeabi_dcmplt>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d006      	beq.n	800506a <main+0x1942>
				  kanan(2000, 0, 0);
 800505c:	2200      	movs	r2, #0
 800505e:	2100      	movs	r1, #0
 8005060:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005064:	f7fc ffc4 	bl	8001ff0 <kanan>
			  break;
 8005068:	e0ae      	b.n	80051c8 <main+0x1aa0>
				  kanan(Vx, 0, 0);
 800506a:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 800506e:	f7fb fd73 	bl	8000b58 <__aeabi_d2iz>
 8005072:	4603      	mov	r3, r0
 8005074:	2200      	movs	r2, #0
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f7fc ffb9 	bl	8001ff0 <kanan>
			  break;
 800507e:	e0a3      	b.n	80051c8 <main+0x1aa0>
 8005080:	00000000 	.word	0x00000000
 8005084:	c0568000 	.word	0xc0568000
 8005088:	00000000 	.word	0x00000000
 800508c:	40b9fa00 	.word	0x40b9fa00
 8005090:	66666666 	.word	0x66666666
 8005094:	3fe66666 	.word	0x3fe66666
 8005098:	00000000 	.word	0x00000000
 800509c:	40b96400 	.word	0x40b96400
 80050a0:	00000000 	.word	0x00000000
 80050a4:	40b06800 	.word	0x40b06800
 80050a8:	00000000 	.word	0x00000000
 80050ac:	40b03600 	.word	0x40b03600
 80050b0:	00000000 	.word	0x00000000
 80050b4:	40a13000 	.word	0x40a13000
 80050b8:	c0568000 	.word	0xc0568000
 80050bc:	3ff00000 	.word	0x3ff00000
 80050c0:	20000610 	.word	0x20000610
 80050c4:	20000540 	.word	0x20000540
 80050c8:	40690000 	.word	0x40690000
 80050cc:	40990000 	.word	0x40990000
 80050d0:	40af4000 	.word	0x40af4000
		  case RUNNINGTEST_3:
			  Vy = (11000 - position.y);
 80050d4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80050d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80050dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80050e0:	a143      	add	r1, pc, #268	@ (adr r1, 80051f0 <main+0x1ac8>)
 80050e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e6:	f7fb f8cf 	bl	8000288 <__aeabi_dsub>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
			  gain = sensorData[1] * 200;
 80050f2:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <main+0x1ab0>)
 80050f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	4b37      	ldr	r3, [pc, #220]	@ (80051dc <main+0x1ab4>)
 80050fe:	f7fb fa7b 	bl	80005f8 <__aeabi_dmul>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
			  if(position.y < 9000)
 800510a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800510e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005112:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005116:	a32e      	add	r3, pc, #184	@ (adr r3, 80051d0 <main+0x1aa8>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fcde 	bl	8000adc <__aeabi_dcmplt>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <main+0x1a16>
			  {
				  Vy = 1600 + gain;
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	4b2d      	ldr	r3, [pc, #180]	@ (80051e0 <main+0x1ab8>)
 800512c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8005130:	f7fb f8ac 	bl	800028c <__adddf3>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
 800513c:	e015      	b.n	800516a <main+0x1a42>
			  }
			  else if(position.y > 9600)
 800513e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8005142:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005146:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	4b25      	ldr	r3, [pc, #148]	@ (80051e4 <main+0x1abc>)
 8005150:	f7fb fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <main+0x1a42>
			  {
				  Inverse_Kinematics(0, 0, 0);
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	2000      	movs	r0, #0
 8005160:	f7fb fff2 	bl	8001148 <Inverse_Kinematics>
				  mode = TRIAL;
 8005164:	4a20      	ldr	r2, [pc, #128]	@ (80051e8 <main+0x1ac0>)
 8005166:	2310      	movs	r3, #16
 8005168:	7013      	strb	r3, [r2, #0]
			  }
			  start(0, Vy, 0, battery);
 800516a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 800516e:	f7fb fcf3 	bl	8000b58 <__aeabi_d2iz>
 8005172:	4601      	mov	r1, r0
 8005174:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8005178:	2200      	movs	r2, #0
 800517a:	2000      	movs	r0, #0
 800517c:	f7fd f98c 	bl	8002498 <start>
			  break;
 8005180:	e022      	b.n	80051c8 <main+0x1aa0>
		  default:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8005182:	2200      	movs	r2, #0
 8005184:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005188:	4818      	ldr	r0, [pc, #96]	@ (80051ec <main+0x1ac4>)
 800518a:	f005 f8fd 	bl	800a388 <HAL_GPIO_WritePin>
			  Inverse_Kinematics(0, 0, 0);
 800518e:	2200      	movs	r2, #0
 8005190:	2100      	movs	r1, #0
 8005192:	2000      	movs	r0, #0
 8005194:	f7fb ffd8 	bl	8001148 <Inverse_Kinematics>
			  break;
 8005198:	e016      	b.n	80051c8 <main+0x1aa0>
			  break;
 800519a:	bf00      	nop
 800519c:	e014      	b.n	80051c8 <main+0x1aa0>
			  break;
 800519e:	bf00      	nop
 80051a0:	e012      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051a2:	bf00      	nop
 80051a4:	e010      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051a6:	bf00      	nop
 80051a8:	e00e      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051aa:	bf00      	nop
 80051ac:	e00c      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051ae:	bf00      	nop
 80051b0:	e00a      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051b2:	bf00      	nop
 80051b4:	e008      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051b6:	bf00      	nop
 80051b8:	e006      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051ba:	bf00      	nop
 80051bc:	e004      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051be:	bf00      	nop
 80051c0:	e002      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <main+0x1aa0>
			  break;
 80051c6:	bf00      	nop
	  }
	  lcd_clear();
 80051c8:	f7fe f914 	bl	80033f4 <lcd_clear>
  {
 80051cc:	f7fe bb7f 	b.w	80038ce <main+0x1a6>
 80051d0:	00000000 	.word	0x00000000
 80051d4:	40c19400 	.word	0x40c19400
 80051d8:	20000540 	.word	0x20000540
 80051dc:	40690000 	.word	0x40690000
 80051e0:	40990000 	.word	0x40990000
 80051e4:	40c2c000 	.word	0x40c2c000
 80051e8:	20000610 	.word	0x20000610
 80051ec:	40020c00 	.word	0x40020c00
 80051f0:	00000000 	.word	0x00000000
 80051f4:	40c57c00 	.word	0x40c57c00

080051f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b094      	sub	sp, #80	@ 0x50
 80051fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051fe:	f107 0320 	add.w	r3, r7, #32
 8005202:	2230      	movs	r2, #48	@ 0x30
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f00a f837 	bl	800f27a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800520c:	f107 030c 	add.w	r3, r7, #12
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	4b28      	ldr	r3, [pc, #160]	@ (80052c4 <SystemClock_Config+0xcc>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	4a27      	ldr	r2, [pc, #156]	@ (80052c4 <SystemClock_Config+0xcc>)
 8005226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800522a:	6413      	str	r3, [r2, #64]	@ 0x40
 800522c:	4b25      	ldr	r3, [pc, #148]	@ (80052c4 <SystemClock_Config+0xcc>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005238:	2300      	movs	r3, #0
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	4b22      	ldr	r3, [pc, #136]	@ (80052c8 <SystemClock_Config+0xd0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a21      	ldr	r2, [pc, #132]	@ (80052c8 <SystemClock_Config+0xd0>)
 8005242:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	4b1f      	ldr	r3, [pc, #124]	@ (80052c8 <SystemClock_Config+0xd0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005250:	607b      	str	r3, [r7, #4]
 8005252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005254:	2301      	movs	r3, #1
 8005256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005258:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800525e:	2302      	movs	r3, #2
 8005260:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005262:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005268:	2308      	movs	r3, #8
 800526a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800526c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005270:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005272:	2302      	movs	r3, #2
 8005274:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005276:	2307      	movs	r3, #7
 8005278:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800527a:	f107 0320 	add.w	r3, r7, #32
 800527e:	4618      	mov	r0, r3
 8005280:	f005 fd52 	bl	800ad28 <HAL_RCC_OscConfig>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800528a:	f000 fd99 	bl	8005dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800528e:	230f      	movs	r3, #15
 8005290:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005292:	2302      	movs	r3, #2
 8005294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800529a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800529e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80052a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80052a6:	f107 030c 	add.w	r3, r7, #12
 80052aa:	2105      	movs	r1, #5
 80052ac:	4618      	mov	r0, r3
 80052ae:	f005 ffb3 	bl	800b218 <HAL_RCC_ClockConfig>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80052b8:	f000 fd82 	bl	8005dc0 <Error_Handler>
  }
}
 80052bc:	bf00      	nop
 80052be:	3750      	adds	r7, #80	@ 0x50
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40007000 	.word	0x40007000

080052cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80052d0:	4b12      	ldr	r3, [pc, #72]	@ (800531c <MX_I2C2_Init+0x50>)
 80052d2:	4a13      	ldr	r2, [pc, #76]	@ (8005320 <MX_I2C2_Init+0x54>)
 80052d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80052d6:	4b11      	ldr	r3, [pc, #68]	@ (800531c <MX_I2C2_Init+0x50>)
 80052d8:	4a12      	ldr	r2, [pc, #72]	@ (8005324 <MX_I2C2_Init+0x58>)
 80052da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052dc:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <MX_I2C2_Init+0x50>)
 80052de:	2200      	movs	r2, #0
 80052e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80052e2:	4b0e      	ldr	r3, [pc, #56]	@ (800531c <MX_I2C2_Init+0x50>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052e8:	4b0c      	ldr	r3, [pc, #48]	@ (800531c <MX_I2C2_Init+0x50>)
 80052ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052f0:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <MX_I2C2_Init+0x50>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80052f6:	4b09      	ldr	r3, [pc, #36]	@ (800531c <MX_I2C2_Init+0x50>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052fc:	4b07      	ldr	r3, [pc, #28]	@ (800531c <MX_I2C2_Init+0x50>)
 80052fe:	2200      	movs	r2, #0
 8005300:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <MX_I2C2_Init+0x50>)
 8005304:	2200      	movs	r2, #0
 8005306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005308:	4804      	ldr	r0, [pc, #16]	@ (800531c <MX_I2C2_Init+0x50>)
 800530a:	f005 f86f 	bl	800a3ec <HAL_I2C_Init>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005314:	f000 fd54 	bl	8005dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005318:	bf00      	nop
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200002e4 	.word	0x200002e4
 8005320:	40005800 	.word	0x40005800
 8005324:	000186a0 	.word	0x000186a0

08005328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b096      	sub	sp, #88	@ 0x58
 800532c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800532e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800533c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	605a      	str	r2, [r3, #4]
 8005350:	609a      	str	r2, [r3, #8]
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	611a      	str	r2, [r3, #16]
 8005356:	615a      	str	r2, [r3, #20]
 8005358:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	2220      	movs	r2, #32
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f009 ff8a 	bl	800f27a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005366:	4b50      	ldr	r3, [pc, #320]	@ (80054a8 <MX_TIM1_Init+0x180>)
 8005368:	4a50      	ldr	r2, [pc, #320]	@ (80054ac <MX_TIM1_Init+0x184>)
 800536a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 33;
 800536c:	4b4e      	ldr	r3, [pc, #312]	@ (80054a8 <MX_TIM1_Init+0x180>)
 800536e:	2221      	movs	r2, #33	@ 0x21
 8005370:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005372:	4b4d      	ldr	r3, [pc, #308]	@ (80054a8 <MX_TIM1_Init+0x180>)
 8005374:	2200      	movs	r2, #0
 8005376:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8005378:	4b4b      	ldr	r3, [pc, #300]	@ (80054a8 <MX_TIM1_Init+0x180>)
 800537a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800537e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005380:	4b49      	ldr	r3, [pc, #292]	@ (80054a8 <MX_TIM1_Init+0x180>)
 8005382:	2200      	movs	r2, #0
 8005384:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005386:	4b48      	ldr	r3, [pc, #288]	@ (80054a8 <MX_TIM1_Init+0x180>)
 8005388:	2200      	movs	r2, #0
 800538a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800538c:	4b46      	ldr	r3, [pc, #280]	@ (80054a8 <MX_TIM1_Init+0x180>)
 800538e:	2200      	movs	r2, #0
 8005390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005392:	4845      	ldr	r0, [pc, #276]	@ (80054a8 <MX_TIM1_Init+0x180>)
 8005394:	f006 f960 	bl	800b658 <HAL_TIM_Base_Init>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800539e:	f000 fd0f 	bl	8005dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80053a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80053ac:	4619      	mov	r1, r3
 80053ae:	483e      	ldr	r0, [pc, #248]	@ (80054a8 <MX_TIM1_Init+0x180>)
 80053b0:	f006 fcc2 	bl	800bd38 <HAL_TIM_ConfigClockSource>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80053ba:	f000 fd01 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80053be:	483a      	ldr	r0, [pc, #232]	@ (80054a8 <MX_TIM1_Init+0x180>)
 80053c0:	f006 f999 	bl	800b6f6 <HAL_TIM_PWM_Init>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80053ca:	f000 fcf9 	bl	8005dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ce:	2300      	movs	r3, #0
 80053d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053da:	4619      	mov	r1, r3
 80053dc:	4832      	ldr	r0, [pc, #200]	@ (80054a8 <MX_TIM1_Init+0x180>)
 80053de:	f007 f8c1 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80053e8:	f000 fcea 	bl	8005dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053ec:	2360      	movs	r3, #96	@ 0x60
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80053f8:	2300      	movs	r3, #0
 80053fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005400:	2300      	movs	r3, #0
 8005402:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005404:	2300      	movs	r3, #0
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800540c:	2200      	movs	r2, #0
 800540e:	4619      	mov	r1, r3
 8005410:	4825      	ldr	r0, [pc, #148]	@ (80054a8 <MX_TIM1_Init+0x180>)
 8005412:	f006 fbcf 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800541c:	f000 fcd0 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005424:	2204      	movs	r2, #4
 8005426:	4619      	mov	r1, r3
 8005428:	481f      	ldr	r0, [pc, #124]	@ (80054a8 <MX_TIM1_Init+0x180>)
 800542a:	f006 fbc3 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005434:	f000 fcc4 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800543c:	2208      	movs	r2, #8
 800543e:	4619      	mov	r1, r3
 8005440:	4819      	ldr	r0, [pc, #100]	@ (80054a8 <MX_TIM1_Init+0x180>)
 8005442:	f006 fbb7 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800544c:	f000 fcb8 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005454:	220c      	movs	r2, #12
 8005456:	4619      	mov	r1, r3
 8005458:	4813      	ldr	r0, [pc, #76]	@ (80054a8 <MX_TIM1_Init+0x180>)
 800545a:	f006 fbab 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8005464:	f000 fcac 	bl	8005dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005468:	2300      	movs	r3, #0
 800546a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800546c:	2300      	movs	r3, #0
 800546e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800547c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005480:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005482:	2300      	movs	r3, #0
 8005484:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4807      	ldr	r0, [pc, #28]	@ (80054a8 <MX_TIM1_Init+0x180>)
 800548c:	f007 f8e6 	bl	800c65c <HAL_TIMEx_ConfigBreakDeadTime>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8005496:	f000 fc93 	bl	8005dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800549a:	4803      	ldr	r0, [pc, #12]	@ (80054a8 <MX_TIM1_Init+0x180>)
 800549c:	f004 f884 	bl	80095a8 <HAL_TIM_MspPostInit>

}
 80054a0:	bf00      	nop
 80054a2:	3758      	adds	r7, #88	@ 0x58
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000338 	.word	0x20000338
 80054ac:	40010000 	.word	0x40010000

080054b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08e      	sub	sp, #56	@ 0x38
 80054b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	605a      	str	r2, [r3, #4]
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054c4:	f107 0320 	add.w	r3, r7, #32
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	611a      	str	r2, [r3, #16]
 80054dc:	615a      	str	r2, [r3, #20]
 80054de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80054e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005598 <MX_TIM2_Init+0xe8>)
 80054e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 80054e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005598 <MX_TIM2_Init+0xe8>)
 80054ea:	f240 628f 	movw	r2, #1679	@ 0x68f
 80054ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f0:	4b29      	ldr	r3, [pc, #164]	@ (8005598 <MX_TIM2_Init+0xe8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80054f6:	4b28      	ldr	r3, [pc, #160]	@ (8005598 <MX_TIM2_Init+0xe8>)
 80054f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80054fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054fe:	4b26      	ldr	r3, [pc, #152]	@ (8005598 <MX_TIM2_Init+0xe8>)
 8005500:	2200      	movs	r2, #0
 8005502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005504:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <MX_TIM2_Init+0xe8>)
 8005506:	2200      	movs	r2, #0
 8005508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800550a:	4823      	ldr	r0, [pc, #140]	@ (8005598 <MX_TIM2_Init+0xe8>)
 800550c:	f006 f8a4 	bl	800b658 <HAL_TIM_Base_Init>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005516:	f000 fc53 	bl	8005dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800551a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800551e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005520:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005524:	4619      	mov	r1, r3
 8005526:	481c      	ldr	r0, [pc, #112]	@ (8005598 <MX_TIM2_Init+0xe8>)
 8005528:	f006 fc06 	bl	800bd38 <HAL_TIM_ConfigClockSource>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005532:	f000 fc45 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005536:	4818      	ldr	r0, [pc, #96]	@ (8005598 <MX_TIM2_Init+0xe8>)
 8005538:	f006 f8dd 	bl	800b6f6 <HAL_TIM_PWM_Init>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005542:	f000 fc3d 	bl	8005dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005546:	2300      	movs	r3, #0
 8005548:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800554a:	2300      	movs	r3, #0
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800554e:	f107 0320 	add.w	r3, r7, #32
 8005552:	4619      	mov	r1, r3
 8005554:	4810      	ldr	r0, [pc, #64]	@ (8005598 <MX_TIM2_Init+0xe8>)
 8005556:	f007 f805 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005560:	f000 fc2e 	bl	8005dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005564:	2360      	movs	r3, #96	@ 0x60
 8005566:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	220c      	movs	r2, #12
 8005578:	4619      	mov	r1, r3
 800557a:	4807      	ldr	r0, [pc, #28]	@ (8005598 <MX_TIM2_Init+0xe8>)
 800557c:	f006 fb1a 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005586:	f000 fc1b 	bl	8005dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800558a:	4803      	ldr	r0, [pc, #12]	@ (8005598 <MX_TIM2_Init+0xe8>)
 800558c:	f004 f80c 	bl	80095a8 <HAL_TIM_MspPostInit>

}
 8005590:	bf00      	nop
 8005592:	3738      	adds	r7, #56	@ 0x38
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20000380 	.word	0x20000380

0800559c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b096      	sub	sp, #88	@ 0x58
 80055a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	605a      	str	r2, [r3, #4]
 80055ac:	609a      	str	r2, [r3, #8]
 80055ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	615a      	str	r2, [r3, #20]
 80055cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	2220      	movs	r2, #32
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f009 fe50 	bl	800f27a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80055da:	4b50      	ldr	r3, [pc, #320]	@ (800571c <MX_TIM8_Init+0x180>)
 80055dc:	4a50      	ldr	r2, [pc, #320]	@ (8005720 <MX_TIM8_Init+0x184>)
 80055de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 33;
 80055e0:	4b4e      	ldr	r3, [pc, #312]	@ (800571c <MX_TIM8_Init+0x180>)
 80055e2:	2221      	movs	r2, #33	@ 0x21
 80055e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e6:	4b4d      	ldr	r3, [pc, #308]	@ (800571c <MX_TIM8_Init+0x180>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 80055ec:	4b4b      	ldr	r3, [pc, #300]	@ (800571c <MX_TIM8_Init+0x180>)
 80055ee:	f241 3287 	movw	r2, #4999	@ 0x1387
 80055f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055f4:	4b49      	ldr	r3, [pc, #292]	@ (800571c <MX_TIM8_Init+0x180>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80055fa:	4b48      	ldr	r3, [pc, #288]	@ (800571c <MX_TIM8_Init+0x180>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005600:	4b46      	ldr	r3, [pc, #280]	@ (800571c <MX_TIM8_Init+0x180>)
 8005602:	2200      	movs	r2, #0
 8005604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005606:	4845      	ldr	r0, [pc, #276]	@ (800571c <MX_TIM8_Init+0x180>)
 8005608:	f006 f826 	bl	800b658 <HAL_TIM_Base_Init>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8005612:	f000 fbd5 	bl	8005dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800561a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800561c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005620:	4619      	mov	r1, r3
 8005622:	483e      	ldr	r0, [pc, #248]	@ (800571c <MX_TIM8_Init+0x180>)
 8005624:	f006 fb88 	bl	800bd38 <HAL_TIM_ConfigClockSource>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800562e:	f000 fbc7 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005632:	483a      	ldr	r0, [pc, #232]	@ (800571c <MX_TIM8_Init+0x180>)
 8005634:	f006 f85f 	bl	800b6f6 <HAL_TIM_PWM_Init>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800563e:	f000 fbbf 	bl	8005dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005646:	2300      	movs	r3, #0
 8005648:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800564a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800564e:	4619      	mov	r1, r3
 8005650:	4832      	ldr	r0, [pc, #200]	@ (800571c <MX_TIM8_Init+0x180>)
 8005652:	f006 ff87 	bl	800c564 <HAL_TIMEx_MasterConfigSynchronization>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800565c:	f000 fbb0 	bl	8005dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005660:	2360      	movs	r3, #96	@ 0x60
 8005662:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005668:	2300      	movs	r3, #0
 800566a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800566c:	2300      	movs	r3, #0
 800566e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005670:	2300      	movs	r3, #0
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005674:	2300      	movs	r3, #0
 8005676:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005678:	2300      	movs	r3, #0
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800567c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005680:	2200      	movs	r2, #0
 8005682:	4619      	mov	r1, r3
 8005684:	4825      	ldr	r0, [pc, #148]	@ (800571c <MX_TIM8_Init+0x180>)
 8005686:	f006 fa95 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8005690:	f000 fb96 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005698:	2204      	movs	r2, #4
 800569a:	4619      	mov	r1, r3
 800569c:	481f      	ldr	r0, [pc, #124]	@ (800571c <MX_TIM8_Init+0x180>)
 800569e:	f006 fa89 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80056a8:	f000 fb8a 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056b0:	2208      	movs	r2, #8
 80056b2:	4619      	mov	r1, r3
 80056b4:	4819      	ldr	r0, [pc, #100]	@ (800571c <MX_TIM8_Init+0x180>)
 80056b6:	f006 fa7d 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80056c0:	f000 fb7e 	bl	8005dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80056c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056c8:	220c      	movs	r2, #12
 80056ca:	4619      	mov	r1, r3
 80056cc:	4813      	ldr	r0, [pc, #76]	@ (800571c <MX_TIM8_Init+0x180>)
 80056ce:	f006 fa71 	bl	800bbb4 <HAL_TIM_PWM_ConfigChannel>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80056d8:	f000 fb72 	bl	8005dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80056dc:	2300      	movs	r3, #0
 80056de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80056f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4807      	ldr	r0, [pc, #28]	@ (800571c <MX_TIM8_Init+0x180>)
 8005700:	f006 ffac 	bl	800c65c <HAL_TIMEx_ConfigBreakDeadTime>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800570a:	f000 fb59 	bl	8005dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800570e:	4803      	ldr	r0, [pc, #12]	@ (800571c <MX_TIM8_Init+0x180>)
 8005710:	f003 ff4a 	bl	80095a8 <HAL_TIM_MspPostInit>

}
 8005714:	bf00      	nop
 8005716:	3758      	adds	r7, #88	@ 0x58
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	200003c8 	.word	0x200003c8
 8005720:	40010400 	.word	0x40010400

08005724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005728:	4b11      	ldr	r3, [pc, #68]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 800572a:	4a12      	ldr	r2, [pc, #72]	@ (8005774 <MX_USART1_UART_Init+0x50>)
 800572c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800572e:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 8005730:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005736:	4b0e      	ldr	r3, [pc, #56]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 8005738:	2200      	movs	r2, #0
 800573a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800573c:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005742:	4b0b      	ldr	r3, [pc, #44]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 8005744:	2200      	movs	r2, #0
 8005746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005748:	4b09      	ldr	r3, [pc, #36]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 800574a:	220c      	movs	r2, #12
 800574c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800574e:	4b08      	ldr	r3, [pc, #32]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 8005750:	2200      	movs	r2, #0
 8005752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005754:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 8005756:	2200      	movs	r2, #0
 8005758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800575a:	4805      	ldr	r0, [pc, #20]	@ (8005770 <MX_USART1_UART_Init+0x4c>)
 800575c:	f006 ffe4 	bl	800c728 <HAL_UART_Init>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005766:	f000 fb2b 	bl	8005dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000410 	.word	0x20000410
 8005774:	40011000 	.word	0x40011000

08005778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800577c:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 800577e:	4a12      	ldr	r2, [pc, #72]	@ (80057c8 <MX_USART2_UART_Init+0x50>)
 8005780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005782:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 8005784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800578a:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 800578c:	2200      	movs	r2, #0
 800578e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 8005792:	2200      	movs	r2, #0
 8005794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005796:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 8005798:	2200      	movs	r2, #0
 800579a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800579c:	4b09      	ldr	r3, [pc, #36]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 800579e:	220c      	movs	r2, #12
 80057a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057a2:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80057ae:	4805      	ldr	r0, [pc, #20]	@ (80057c4 <MX_USART2_UART_Init+0x4c>)
 80057b0:	f006 ffba 	bl	800c728 <HAL_UART_Init>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80057ba:	f000 fb01 	bl	8005dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000458 	.word	0x20000458
 80057c8:	40004400 	.word	0x40004400

080057cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80057d0:	4b11      	ldr	r3, [pc, #68]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057d2:	4a12      	ldr	r2, [pc, #72]	@ (800581c <MX_USART3_UART_Init+0x50>)
 80057d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80057d6:	4b10      	ldr	r3, [pc, #64]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057d8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80057dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80057ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057f2:	220c      	movs	r2, #12
 80057f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057f6:	4b08      	ldr	r3, [pc, #32]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80057fc:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005802:	4805      	ldr	r0, [pc, #20]	@ (8005818 <MX_USART3_UART_Init+0x4c>)
 8005804:	f006 ff90 	bl	800c728 <HAL_UART_Init>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800580e:	f000 fad7 	bl	8005dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200004a0 	.word	0x200004a0
 800581c:	40004800 	.word	0x40004800

08005820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005826:	f107 031c 	add.w	r3, r7, #28
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	609a      	str	r2, [r3, #8]
 8005832:	60da      	str	r2, [r3, #12]
 8005834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	4bb9      	ldr	r3, [pc, #740]	@ (8005b20 <MX_GPIO_Init+0x300>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	4ab8      	ldr	r2, [pc, #736]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005840:	f043 0310 	orr.w	r3, r3, #16
 8005844:	6313      	str	r3, [r2, #48]	@ 0x30
 8005846:	4bb6      	ldr	r3, [pc, #728]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	4bb2      	ldr	r3, [pc, #712]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	4ab1      	ldr	r2, [pc, #708]	@ (8005b20 <MX_GPIO_Init+0x300>)
 800585c:	f043 0304 	orr.w	r3, r3, #4
 8005860:	6313      	str	r3, [r2, #48]	@ 0x30
 8005862:	4baf      	ldr	r3, [pc, #700]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	4bab      	ldr	r3, [pc, #684]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005876:	4aaa      	ldr	r2, [pc, #680]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587c:	6313      	str	r3, [r2, #48]	@ 0x30
 800587e:	4ba8      	ldr	r3, [pc, #672]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4ba4      	ldr	r3, [pc, #656]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	4aa3      	ldr	r2, [pc, #652]	@ (8005b20 <MX_GPIO_Init+0x300>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	6313      	str	r3, [r2, #48]	@ 0x30
 800589a:	4ba1      	ldr	r3, [pc, #644]	@ (8005b20 <MX_GPIO_Init+0x300>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	4b9d      	ldr	r3, [pc, #628]	@ (8005b20 <MX_GPIO_Init+0x300>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	4a9c      	ldr	r2, [pc, #624]	@ (8005b20 <MX_GPIO_Init+0x300>)
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b6:	4b9a      	ldr	r3, [pc, #616]	@ (8005b20 <MX_GPIO_Init+0x300>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	4b96      	ldr	r3, [pc, #600]	@ (8005b20 <MX_GPIO_Init+0x300>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	4a95      	ldr	r2, [pc, #596]	@ (8005b20 <MX_GPIO_Init+0x300>)
 80058cc:	f043 0308 	orr.w	r3, r3, #8
 80058d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058d2:	4b93      	ldr	r3, [pc, #588]	@ (8005b20 <MX_GPIO_Init+0x300>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80058de:	2200      	movs	r2, #0
 80058e0:	217f      	movs	r1, #127	@ 0x7f
 80058e2:	4890      	ldr	r0, [pc, #576]	@ (8005b24 <MX_GPIO_Init+0x304>)
 80058e4:	f004 fd50 	bl	800a388 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80058e8:	2200      	movs	r2, #0
 80058ea:	f24f 0130 	movw	r1, #61488	@ 0xf030
 80058ee:	488e      	ldr	r0, [pc, #568]	@ (8005b28 <MX_GPIO_Init+0x308>)
 80058f0:	f004 fd4a 	bl	800a388 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80058f4:	2200      	movs	r2, #0
 80058f6:	2103      	movs	r1, #3
 80058f8:	488c      	ldr	r0, [pc, #560]	@ (8005b2c <MX_GPIO_Init+0x30c>)
 80058fa:	f004 fd45 	bl	800a388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80058fe:	2200      	movs	r2, #0
 8005900:	f244 011f 	movw	r1, #16415	@ 0x401f
 8005904:	488a      	ldr	r0, [pc, #552]	@ (8005b30 <MX_GPIO_Init+0x310>)
 8005906:	f004 fd3f 	bl	800a388 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800590a:	230c      	movs	r3, #12
 800590c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800590e:	2311      	movs	r3, #17
 8005910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005916:	2303      	movs	r3, #3
 8005918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800591a:	f107 031c 	add.w	r3, r7, #28
 800591e:	4619      	mov	r1, r3
 8005920:	4880      	ldr	r0, [pc, #512]	@ (8005b24 <MX_GPIO_Init+0x304>)
 8005922:	f004 fb7d 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8005926:	2373      	movs	r3, #115	@ 0x73
 8005928:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800592a:	2311      	movs	r3, #17
 800592c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005932:	2300      	movs	r3, #0
 8005934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005936:	f107 031c 	add.w	r3, r7, #28
 800593a:	4619      	mov	r1, r3
 800593c:	4879      	ldr	r0, [pc, #484]	@ (8005b24 <MX_GPIO_Init+0x304>)
 800593e:	f004 fb6f 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005942:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005948:	2311      	movs	r3, #17
 800594a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005950:	2300      	movs	r3, #0
 8005952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005954:	f107 031c 	add.w	r3, r7, #28
 8005958:	4619      	mov	r1, r3
 800595a:	4873      	ldr	r0, [pc, #460]	@ (8005b28 <MX_GPIO_Init+0x308>)
 800595c:	f004 fb60 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 8005960:	2309      	movs	r3, #9
 8005962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005964:	2300      	movs	r3, #0
 8005966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005968:	2301      	movs	r3, #1
 800596a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800596c:	f107 031c 	add.w	r3, r7, #28
 8005970:	4619      	mov	r1, r3
 8005972:	486d      	ldr	r0, [pc, #436]	@ (8005b28 <MX_GPIO_Init+0x308>)
 8005974:	f004 fb54 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 8005978:	2306      	movs	r3, #6
 800597a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800597c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005982:	2301      	movs	r3, #1
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005986:	f107 031c 	add.w	r3, r7, #28
 800598a:	4619      	mov	r1, r3
 800598c:	4866      	ldr	r0, [pc, #408]	@ (8005b28 <MX_GPIO_Init+0x308>)
 800598e:	f004 fb47 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8005992:	f244 0301 	movw	r3, #16385	@ 0x4001
 8005996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005998:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800599c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800599e:	2301      	movs	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a2:	f107 031c 	add.w	r3, r7, #28
 80059a6:	4619      	mov	r1, r3
 80059a8:	4862      	ldr	r0, [pc, #392]	@ (8005b34 <MX_GPIO_Init+0x314>)
 80059aa:	f004 fb39 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 80059ae:	f248 4302 	movw	r3, #33794	@ 0x8402
 80059b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059b4:	2300      	movs	r3, #0
 80059b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059b8:	2301      	movs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059bc:	f107 031c 	add.w	r3, r7, #28
 80059c0:	4619      	mov	r1, r3
 80059c2:	485c      	ldr	r0, [pc, #368]	@ (8005b34 <MX_GPIO_Init+0x314>)
 80059c4:	f004 fb2c 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 80059c8:	f241 0330 	movw	r3, #4144	@ 0x1030
 80059cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80059ce:	2311      	movs	r3, #17
 80059d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d6:	2303      	movs	r3, #3
 80059d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059da:	f107 031c 	add.w	r3, r7, #28
 80059de:	4619      	mov	r1, r3
 80059e0:	4851      	ldr	r0, [pc, #324]	@ (8005b28 <MX_GPIO_Init+0x308>)
 80059e2:	f004 fb1d 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80059e6:	2303      	movs	r3, #3
 80059e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80059ea:	2311      	movs	r3, #17
 80059ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f2:	2303      	movs	r3, #3
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f6:	f107 031c 	add.w	r3, r7, #28
 80059fa:	4619      	mov	r1, r3
 80059fc:	484b      	ldr	r0, [pc, #300]	@ (8005b2c <MX_GPIO_Init+0x30c>)
 80059fe:	f004 fb0f 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8005a02:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8005a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a08:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a12:	f107 031c 	add.w	r3, r7, #28
 8005a16:	4619      	mov	r1, r3
 8005a18:	4842      	ldr	r0, [pc, #264]	@ (8005b24 <MX_GPIO_Init+0x304>)
 8005a1a:	f004 fb01 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 8005a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a24:	2300      	movs	r3, #0
 8005a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 8005a2c:	f107 031c 	add.w	r3, r7, #28
 8005a30:	4619      	mov	r1, r3
 8005a32:	483f      	ldr	r0, [pc, #252]	@ (8005b30 <MX_GPIO_Init+0x310>)
 8005a34:	f004 faf4 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 8005a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a44:	2301      	movs	r3, #1
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 8005a48:	f107 031c 	add.w	r3, r7, #28
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4838      	ldr	r0, [pc, #224]	@ (8005b30 <MX_GPIO_Init+0x310>)
 8005a50:	f004 fae6 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a62:	2300      	movs	r3, #0
 8005a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a66:	f107 031c 	add.w	r3, r7, #28
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4830      	ldr	r0, [pc, #192]	@ (8005b30 <MX_GPIO_Init+0x310>)
 8005a6e:	f004 fad7 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 8005a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 8005a82:	f107 031c 	add.w	r3, r7, #28
 8005a86:	4619      	mov	r1, r3
 8005a88:	4829      	ldr	r0, [pc, #164]	@ (8005b30 <MX_GPIO_Init+0x310>)
 8005a8a:	f004 fac9 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005a8e:	2307      	movs	r3, #7
 8005a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005a92:	2311      	movs	r3, #17
 8005a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a9e:	f107 031c 	add.w	r3, r7, #28
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4822      	ldr	r0, [pc, #136]	@ (8005b30 <MX_GPIO_Init+0x310>)
 8005aa6:	f004 fabb 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005aaa:	2318      	movs	r3, #24
 8005aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005aae:	2311      	movs	r3, #17
 8005ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005aba:	f107 031c 	add.w	r3, r7, #28
 8005abe:	4619      	mov	r1, r3
 8005ac0:	481b      	ldr	r0, [pc, #108]	@ (8005b30 <MX_GPIO_Init+0x310>)
 8005ac2:	f004 faad 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 8005ac6:	2328      	movs	r3, #40	@ 0x28
 8005ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005aca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad4:	f107 031c 	add.w	r3, r7, #28
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4814      	ldr	r0, [pc, #80]	@ (8005b2c <MX_GPIO_Init+0x30c>)
 8005adc:	f004 faa0 	bl	800a020 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8005aec:	f107 031c 	add.w	r3, r7, #28
 8005af0:	4619      	mov	r1, r3
 8005af2:	480e      	ldr	r0, [pc, #56]	@ (8005b2c <MX_GPIO_Init+0x30c>)
 8005af4:	f004 fa94 	bl	800a020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005af8:	2200      	movs	r2, #0
 8005afa:	2100      	movs	r1, #0
 8005afc:	2006      	movs	r0, #6
 8005afe:	f004 f9c6 	bl	8009e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005b02:	2006      	movs	r0, #6
 8005b04:	f004 f9df 	bl	8009ec6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	2007      	movs	r0, #7
 8005b0e:	f004 f9be 	bl	8009e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005b12:	2007      	movs	r0, #7
 8005b14:	f004 f9d7 	bl	8009ec6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	2008      	movs	r0, #8
 8005b1e:	e00b      	b.n	8005b38 <MX_GPIO_Init+0x318>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40021000 	.word	0x40021000
 8005b28:	40020800 	.word	0x40020800
 8005b2c:	40020400 	.word	0x40020400
 8005b30:	40020c00 	.word	0x40020c00
 8005b34:	40020000 	.word	0x40020000
 8005b38:	f004 f9a9 	bl	8009e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005b3c:	2008      	movs	r0, #8
 8005b3e:	f004 f9c2 	bl	8009ec6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005b42:	2200      	movs	r2, #0
 8005b44:	2100      	movs	r1, #0
 8005b46:	2009      	movs	r0, #9
 8005b48:	f004 f9a1 	bl	8009e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005b4c:	2009      	movs	r0, #9
 8005b4e:	f004 f9ba 	bl	8009ec6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	2017      	movs	r0, #23
 8005b58:	f004 f999 	bl	8009e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005b5c:	2017      	movs	r0, #23
 8005b5e:	f004 f9b2 	bl	8009ec6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005b62:	2200      	movs	r2, #0
 8005b64:	2100      	movs	r1, #0
 8005b66:	2028      	movs	r0, #40	@ 0x28
 8005b68:	f004 f991 	bl	8009e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005b6c:	2028      	movs	r0, #40	@ 0x28
 8005b6e:	f004 f9aa 	bl	8009ec6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005b72:	bf00      	nop
 8005b74:	3730      	adds	r7, #48	@ 0x30
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop

08005b7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a7a      	ldr	r2, [pc, #488]	@ (8005d74 <HAL_UART_RxCpltCallback+0x1f8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d14e      	bne.n	8005c2c <HAL_UART_RxCpltCallback+0xb0>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8005b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d78 <HAL_UART_RxCpltCallback+0x1fc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a7a      	ldr	r2, [pc, #488]	@ (8005d7c <HAL_UART_RxCpltCallback+0x200>)
 8005b94:	5cd3      	ldrb	r3, [r2, r3]
 8005b96:	2b0d      	cmp	r3, #13
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_RxCpltCallback+0x2a>
 8005b9a:	4b77      	ldr	r3, [pc, #476]	@ (8005d78 <HAL_UART_RxCpltCallback+0x1fc>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a77      	ldr	r2, [pc, #476]	@ (8005d7c <HAL_UART_RxCpltCallback+0x200>)
 8005ba0:	5cd3      	ldrb	r3, [r2, r3]
 8005ba2:	2b0a      	cmp	r3, #10
 8005ba4:	d134      	bne.n	8005c10 <HAL_UART_RxCpltCallback+0x94>
		{
			receive[rxIndex] = '\0';
 8005ba6:	4b74      	ldr	r3, [pc, #464]	@ (8005d78 <HAL_UART_RxCpltCallback+0x1fc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a74      	ldr	r2, [pc, #464]	@ (8005d7c <HAL_UART_RxCpltCallback+0x200>)
 8005bac:	2100      	movs	r1, #0
 8005bae:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8005bb0:	4973      	ldr	r1, [pc, #460]	@ (8005d80 <HAL_UART_RxCpltCallback+0x204>)
 8005bb2:	4872      	ldr	r0, [pc, #456]	@ (8005d7c <HAL_UART_RxCpltCallback+0x200>)
 8005bb4:	f009 fb7c 	bl	800f2b0 <strtok>
 8005bb8:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 8005bba:	4b72      	ldr	r3, [pc, #456]	@ (8005d84 <HAL_UART_RxCpltCallback+0x208>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8005bc0:	e015      	b.n	8005bee <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8005bc2:	4b70      	ldr	r3, [pc, #448]	@ (8005d84 <HAL_UART_RxCpltCallback+0x208>)
 8005bc4:	681c      	ldr	r4, [r3, #0]
 8005bc6:	1c63      	adds	r3, r4, #1
 8005bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8005d84 <HAL_UART_RxCpltCallback+0x208>)
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	6978      	ldr	r0, [r7, #20]
 8005bce:	f007 fd1f 	bl	800d610 <atof>
 8005bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8005bd6:	eef0 7a60 	vmov.f32	s15, s1
 8005bda:	4a6b      	ldr	r2, [pc, #428]	@ (8005d88 <HAL_UART_RxCpltCallback+0x20c>)
 8005bdc:	00e3      	lsls	r3, r4, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8005be4:	4966      	ldr	r1, [pc, #408]	@ (8005d80 <HAL_UART_RxCpltCallback+0x204>)
 8005be6:	2000      	movs	r0, #0
 8005be8:	f009 fb62 	bl	800f2b0 <strtok>
 8005bec:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8005bf4:	2232      	movs	r2, #50	@ 0x32
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4860      	ldr	r0, [pc, #384]	@ (8005d7c <HAL_UART_RxCpltCallback+0x200>)
 8005bfa:	f009 fb3e 	bl	800f27a <memset>
			rxIndex = 0;
 8005bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8005d78 <HAL_UART_RxCpltCallback+0x1fc>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, receive, 1);
 8005c04:	2201      	movs	r2, #1
 8005c06:	495d      	ldr	r1, [pc, #372]	@ (8005d7c <HAL_UART_RxCpltCallback+0x200>)
 8005c08:	4860      	ldr	r0, [pc, #384]	@ (8005d8c <HAL_UART_RxCpltCallback+0x210>)
 8005c0a:	f006 fddd 	bl	800c7c8 <HAL_UART_Receive_IT>
		{
 8005c0e:	e00d      	b.n	8005c2c <HAL_UART_RxCpltCallback+0xb0>
		}
		else
		{
			rxIndex++;
 8005c10:	4b59      	ldr	r3, [pc, #356]	@ (8005d78 <HAL_UART_RxCpltCallback+0x1fc>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a58      	ldr	r2, [pc, #352]	@ (8005d78 <HAL_UART_RxCpltCallback+0x1fc>)
 8005c18:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1);
 8005c1a:	4b57      	ldr	r3, [pc, #348]	@ (8005d78 <HAL_UART_RxCpltCallback+0x1fc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a57      	ldr	r2, [pc, #348]	@ (8005d7c <HAL_UART_RxCpltCallback+0x200>)
 8005c20:	4413      	add	r3, r2
 8005c22:	2201      	movs	r2, #1
 8005c24:	4619      	mov	r1, r3
 8005c26:	4859      	ldr	r0, [pc, #356]	@ (8005d8c <HAL_UART_RxCpltCallback+0x210>)
 8005c28:	f006 fdce 	bl	800c7c8 <HAL_UART_Receive_IT>
		}
	}
	if(huart->Instance == USART2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a57      	ldr	r2, [pc, #348]	@ (8005d90 <HAL_UART_RxCpltCallback+0x214>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d149      	bne.n	8005cca <HAL_UART_RxCpltCallback+0x14e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 8005c36:	4b57      	ldr	r3, [pc, #348]	@ (8005d94 <HAL_UART_RxCpltCallback+0x218>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a57      	ldr	r2, [pc, #348]	@ (8005d98 <HAL_UART_RxCpltCallback+0x21c>)
 8005c3c:	5cd3      	ldrb	r3, [r2, r3]
 8005c3e:	2b0d      	cmp	r3, #13
 8005c40:	d005      	beq.n	8005c4e <HAL_UART_RxCpltCallback+0xd2>
 8005c42:	4b54      	ldr	r3, [pc, #336]	@ (8005d94 <HAL_UART_RxCpltCallback+0x218>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a54      	ldr	r2, [pc, #336]	@ (8005d98 <HAL_UART_RxCpltCallback+0x21c>)
 8005c48:	5cd3      	ldrb	r3, [r2, r3]
 8005c4a:	2b0a      	cmp	r3, #10
 8005c4c:	d12f      	bne.n	8005cae <HAL_UART_RxCpltCallback+0x132>
		{
			receiveCAM[indexCAM] = '\0';
 8005c4e:	4b51      	ldr	r3, [pc, #324]	@ (8005d94 <HAL_UART_RxCpltCallback+0x218>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a51      	ldr	r2, [pc, #324]	@ (8005d98 <HAL_UART_RxCpltCallback+0x21c>)
 8005c54:	2100      	movs	r1, #0
 8005c56:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8005c58:	4949      	ldr	r1, [pc, #292]	@ (8005d80 <HAL_UART_RxCpltCallback+0x204>)
 8005c5a:	484f      	ldr	r0, [pc, #316]	@ (8005d98 <HAL_UART_RxCpltCallback+0x21c>)
 8005c5c:	f009 fb28 	bl	800f2b0 <strtok>
 8005c60:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 8005c62:	4b4e      	ldr	r3, [pc, #312]	@ (8005d9c <HAL_UART_RxCpltCallback+0x220>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8005c68:	e010      	b.n	8005c8c <HAL_UART_RxCpltCallback+0x110>
			{
				camera[dataindexCAM++] = atoi(token);
 8005c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8005d9c <HAL_UART_RxCpltCallback+0x220>)
 8005c6c:	681c      	ldr	r4, [r3, #0]
 8005c6e:	1c63      	adds	r3, r4, #1
 8005c70:	4a4a      	ldr	r2, [pc, #296]	@ (8005d9c <HAL_UART_RxCpltCallback+0x220>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	6938      	ldr	r0, [r7, #16]
 8005c76:	f007 fcce 	bl	800d616 <atoi>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4a48      	ldr	r2, [pc, #288]	@ (8005da0 <HAL_UART_RxCpltCallback+0x224>)
 8005c7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8005c82:	493f      	ldr	r1, [pc, #252]	@ (8005d80 <HAL_UART_RxCpltCallback+0x204>)
 8005c84:	2000      	movs	r0, #0
 8005c86:	f009 fb13 	bl	800f2b0 <strtok>
 8005c8a:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1eb      	bne.n	8005c6a <HAL_UART_RxCpltCallback+0xee>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 8005c92:	2232      	movs	r2, #50	@ 0x32
 8005c94:	2100      	movs	r1, #0
 8005c96:	4840      	ldr	r0, [pc, #256]	@ (8005d98 <HAL_UART_RxCpltCallback+0x21c>)
 8005c98:	f009 faef 	bl	800f27a <memset>
			indexCAM = 0;
 8005c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d94 <HAL_UART_RxCpltCallback+0x218>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	493c      	ldr	r1, [pc, #240]	@ (8005d98 <HAL_UART_RxCpltCallback+0x21c>)
 8005ca6:	483f      	ldr	r0, [pc, #252]	@ (8005da4 <HAL_UART_RxCpltCallback+0x228>)
 8005ca8:	f006 fd8e 	bl	800c7c8 <HAL_UART_Receive_IT>
		{
 8005cac:	e00d      	b.n	8005cca <HAL_UART_RxCpltCallback+0x14e>
		}
		else
		{
			indexCAM++;
 8005cae:	4b39      	ldr	r3, [pc, #228]	@ (8005d94 <HAL_UART_RxCpltCallback+0x218>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a37      	ldr	r2, [pc, #220]	@ (8005d94 <HAL_UART_RxCpltCallback+0x218>)
 8005cb6:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1);
 8005cb8:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <HAL_UART_RxCpltCallback+0x218>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a36      	ldr	r2, [pc, #216]	@ (8005d98 <HAL_UART_RxCpltCallback+0x21c>)
 8005cbe:	4413      	add	r3, r2
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4837      	ldr	r0, [pc, #220]	@ (8005da4 <HAL_UART_RxCpltCallback+0x228>)
 8005cc6:	f006 fd7f 	bl	800c7c8 <HAL_UART_Receive_IT>
		}
	}
	if(huart->Instance == USART3)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a36      	ldr	r2, [pc, #216]	@ (8005da8 <HAL_UART_RxCpltCallback+0x22c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d14a      	bne.n	8005d6a <HAL_UART_RxCpltCallback+0x1ee>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8005cd4:	4b35      	ldr	r3, [pc, #212]	@ (8005dac <HAL_UART_RxCpltCallback+0x230>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a35      	ldr	r2, [pc, #212]	@ (8005db0 <HAL_UART_RxCpltCallback+0x234>)
 8005cda:	5cd3      	ldrb	r3, [r2, r3]
 8005cdc:	2b0d      	cmp	r3, #13
 8005cde:	d005      	beq.n	8005cec <HAL_UART_RxCpltCallback+0x170>
 8005ce0:	4b32      	ldr	r3, [pc, #200]	@ (8005dac <HAL_UART_RxCpltCallback+0x230>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a32      	ldr	r2, [pc, #200]	@ (8005db0 <HAL_UART_RxCpltCallback+0x234>)
 8005ce6:	5cd3      	ldrb	r3, [r2, r3]
 8005ce8:	2b0a      	cmp	r3, #10
 8005cea:	d130      	bne.n	8005d4e <HAL_UART_RxCpltCallback+0x1d2>
		{
			receiveMEGA[indexMEGA] = '\0';
 8005cec:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <HAL_UART_RxCpltCallback+0x230>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8005db0 <HAL_UART_RxCpltCallback+0x234>)
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 8005cf6:	4922      	ldr	r1, [pc, #136]	@ (8005d80 <HAL_UART_RxCpltCallback+0x204>)
 8005cf8:	482d      	ldr	r0, [pc, #180]	@ (8005db0 <HAL_UART_RxCpltCallback+0x234>)
 8005cfa:	f009 fad9 	bl	800f2b0 <strtok>
 8005cfe:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 8005d00:	4b2c      	ldr	r3, [pc, #176]	@ (8005db4 <HAL_UART_RxCpltCallback+0x238>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8005d06:	e010      	b.n	8005d2a <HAL_UART_RxCpltCallback+0x1ae>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 8005d08:	4b2a      	ldr	r3, [pc, #168]	@ (8005db4 <HAL_UART_RxCpltCallback+0x238>)
 8005d0a:	681c      	ldr	r4, [r3, #0]
 8005d0c:	1c63      	adds	r3, r4, #1
 8005d0e:	4a29      	ldr	r2, [pc, #164]	@ (8005db4 <HAL_UART_RxCpltCallback+0x238>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f007 fc7f 	bl	800d616 <atoi>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4a27      	ldr	r2, [pc, #156]	@ (8005db8 <HAL_UART_RxCpltCallback+0x23c>)
 8005d1c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8005d20:	4917      	ldr	r1, [pc, #92]	@ (8005d80 <HAL_UART_RxCpltCallback+0x204>)
 8005d22:	2000      	movs	r0, #0
 8005d24:	f009 fac4 	bl	800f2b0 <strtok>
 8005d28:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1eb      	bne.n	8005d08 <HAL_UART_RxCpltCallback+0x18c>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 8005d30:	2232      	movs	r2, #50	@ 0x32
 8005d32:	2100      	movs	r1, #0
 8005d34:	481e      	ldr	r0, [pc, #120]	@ (8005db0 <HAL_UART_RxCpltCallback+0x234>)
 8005d36:	f009 faa0 	bl	800f27a <memset>
			indexMEGA = 0;
 8005d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dac <HAL_UART_RxCpltCallback+0x230>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, receiveMEGA, 1);
 8005d40:	2201      	movs	r2, #1
 8005d42:	491b      	ldr	r1, [pc, #108]	@ (8005db0 <HAL_UART_RxCpltCallback+0x234>)
 8005d44:	481d      	ldr	r0, [pc, #116]	@ (8005dbc <HAL_UART_RxCpltCallback+0x240>)
 8005d46:	f006 fd3f 	bl	800c7c8 <HAL_UART_Receive_IT>
		{
 8005d4a:	bf00      	nop
		{
			indexMEGA++;
			HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1);
		}
	}
}
 8005d4c:	e00d      	b.n	8005d6a <HAL_UART_RxCpltCallback+0x1ee>
			indexMEGA++;
 8005d4e:	4b17      	ldr	r3, [pc, #92]	@ (8005dac <HAL_UART_RxCpltCallback+0x230>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3301      	adds	r3, #1
 8005d54:	4a15      	ldr	r2, [pc, #84]	@ (8005dac <HAL_UART_RxCpltCallback+0x230>)
 8005d56:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1);
 8005d58:	4b14      	ldr	r3, [pc, #80]	@ (8005dac <HAL_UART_RxCpltCallback+0x230>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a14      	ldr	r2, [pc, #80]	@ (8005db0 <HAL_UART_RxCpltCallback+0x234>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	2201      	movs	r2, #1
 8005d62:	4619      	mov	r1, r3
 8005d64:	4815      	ldr	r0, [pc, #84]	@ (8005dbc <HAL_UART_RxCpltCallback+0x240>)
 8005d66:	f006 fd2f 	bl	800c7c8 <HAL_UART_Receive_IT>
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40011000 	.word	0x40011000
 8005d78:	20000538 	.word	0x20000538
 8005d7c:	20000504 	.word	0x20000504
 8005d80:	08013e48 	.word	0x08013e48
 8005d84:	2000053c 	.word	0x2000053c
 8005d88:	20000540 	.word	0x20000540
 8005d8c:	20000410 	.word	0x20000410
 8005d90:	40004400 	.word	0x40004400
 8005d94:	20000584 	.word	0x20000584
 8005d98:	20000550 	.word	0x20000550
 8005d9c:	20000588 	.word	0x20000588
 8005da0:	2000058c 	.word	0x2000058c
 8005da4:	20000458 	.word	0x20000458
 8005da8:	40004800 	.word	0x40004800
 8005dac:	200005f4 	.word	0x200005f4
 8005db0:	200005c0 	.word	0x200005c0
 8005db4:	200005f8 	.word	0x200005f8
 8005db8:	200005fc 	.word	0x200005fc
 8005dbc:	200004a0 	.word	0x200004a0

08005dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005dc4:	b672      	cpsid	i
}
 8005dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <Error_Handler+0x8>
 8005dcc:	0000      	movs	r0, r0
	...

08005dd0 <odometry>:

extern int camera[13];
extern int sensorMEGA[4];

robotPosition odometry()
{
 8005dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005dd4:	b0bc      	sub	sp, #240	@ 0xf0
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
    robotPosition currentPosition;

    /* ENCODER INTERNAL */
    int dn1_in = counterIN1 - oldEncIN1;
 8005dda:	4bc5      	ldr	r3, [pc, #788]	@ (80060f0 <odometry+0x320>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4bc5      	ldr	r3, [pc, #788]	@ (80060f4 <odometry+0x324>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int dn2_in = counterIN2 - oldEncIN2;
 8005de8:	4bc3      	ldr	r3, [pc, #780]	@ (80060f8 <odometry+0x328>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4bc3      	ldr	r3, [pc, #780]	@ (80060fc <odometry+0x32c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int dn3_in = counterIN3 - oldEncIN3;
 8005df6:	4bc2      	ldr	r3, [pc, #776]	@ (8006100 <odometry+0x330>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4bc2      	ldr	r3, [pc, #776]	@ (8006104 <odometry+0x334>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int dn4_in = counterIN4 - oldEncIN4;
 8005e04:	4bc0      	ldr	r3, [pc, #768]	@ (8006108 <odometry+0x338>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4bc0      	ldr	r3, [pc, #768]	@ (800610c <odometry+0x33c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    oldEncIN1 = counterIN1;
 8005e12:	4bb7      	ldr	r3, [pc, #732]	@ (80060f0 <odometry+0x320>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4ab7      	ldr	r2, [pc, #732]	@ (80060f4 <odometry+0x324>)
 8005e18:	6013      	str	r3, [r2, #0]
    oldEncIN2 = counterIN2;
 8005e1a:	4bb7      	ldr	r3, [pc, #732]	@ (80060f8 <odometry+0x328>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4ab7      	ldr	r2, [pc, #732]	@ (80060fc <odometry+0x32c>)
 8005e20:	6013      	str	r3, [r2, #0]
    oldEncIN3 = counterIN3;
 8005e22:	4bb7      	ldr	r3, [pc, #732]	@ (8006100 <odometry+0x330>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4ab7      	ldr	r2, [pc, #732]	@ (8006104 <odometry+0x334>)
 8005e28:	6013      	str	r3, [r2, #0]
    oldEncIN4 = counterIN4;
 8005e2a:	4bb7      	ldr	r3, [pc, #732]	@ (8006108 <odometry+0x338>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4ab7      	ldr	r2, [pc, #732]	@ (800610c <odometry+0x33c>)
 8005e30:	6013      	str	r3, [r2, #0]

    double dthetaIN = mm_per_tick_IN * ((-dn1_in + dn3_in) + (dn2_in - dn4_in))/(m1_m3 * 4);
 8005e32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e3a:	1ad2      	subs	r2, r2, r3
 8005e3c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e44:	1acb      	subs	r3, r1, r3
 8005e46:	4413      	add	r3, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fa fb6b 	bl	8000524 <__aeabi_i2d>
 8005e4e:	a3a0      	add	r3, pc, #640	@ (adr r3, 80060d0 <odometry+0x300>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f7fa fbd0 	bl	80005f8 <__aeabi_dmul>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	a39d      	add	r3, pc, #628	@ (adr r3, 80060d8 <odometry+0x308>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa fcf1 	bl	800084c <__aeabi_ddiv>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double dxIN = mm_per_tick_IN * (-dn1_in + dn2_in - dn3_in + dn4_in)/4 * cos(M_PI_4);
 8005e72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8005e76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e86:	4413      	add	r3, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fa fb4b 	bl	8000524 <__aeabi_i2d>
 8005e8e:	a390      	add	r3, pc, #576	@ (adr r3, 80060d0 <odometry+0x300>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa fbb0 	bl	80005f8 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8006110 <odometry+0x340>)
 8005ea6:	f7fa fcd1 	bl	800084c <__aeabi_ddiv>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	a38b      	add	r3, pc, #556	@ (adr r3, 80060e0 <odometry+0x310>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa fb9e 	bl	80005f8 <__aeabi_dmul>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double dyIN = mm_per_tick_IN * (dn1_in + dn2_in + dn3_in + dn4_in)/4 * sin(M_PI_4);
 8005ec4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005ec8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ecc:	441a      	add	r2, r3
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed8:	4413      	add	r3, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fa fb22 	bl	8000524 <__aeabi_i2d>
 8005ee0:	a37b      	add	r3, pc, #492	@ (adr r3, 80060d0 <odometry+0x300>)
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f7fa fb87 	bl	80005f8 <__aeabi_dmul>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	4b86      	ldr	r3, [pc, #536]	@ (8006110 <odometry+0x340>)
 8005ef8:	f7fa fca8 	bl	800084c <__aeabi_ddiv>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4610      	mov	r0, r2
 8005f02:	4619      	mov	r1, r3
 8005f04:	a378      	add	r3, pc, #480	@ (adr r3, 80060e8 <odometry+0x318>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f7fa fb75 	bl	80005f8 <__aeabi_dmul>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

    double distanceIN = hypot(dxIN, dyIN);
 8005f16:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8005f1a:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8005f1e:	f00b ff5f 	bl	8011de0 <hypot>
 8005f22:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double directionIN = atan2(dyIN, dxIN);
 8005f26:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8005f2a:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8005f2e:	f00b ff53 	bl	8011dd8 <atan2>
 8005f32:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	double theta_localIN = directionIN - dthetaIN;
 8005f36:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8005f3a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005f3e:	f7fa f9a3 	bl	8000288 <__aeabi_dsub>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

	xLocalIN += distanceIN * cos(theta_localIN);
 8005f4a:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8005f4e:	f00b ff7b 	bl	8011e48 <cos>
 8005f52:	ec51 0b10 	vmov	r0, r1, d0
 8005f56:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005f5a:	f7fa fb4d 	bl	80005f8 <__aeabi_dmul>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	4b6b      	ldr	r3, [pc, #428]	@ (8006114 <odometry+0x344>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa f98e 	bl	800028c <__adddf3>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4967      	ldr	r1, [pc, #412]	@ (8006114 <odometry+0x344>)
 8005f76:	e9c1 2300 	strd	r2, r3, [r1]
	yLocalIN += distanceIN * sin(theta_localIN);
 8005f7a:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8005f7e:	f00b ffb7 	bl	8011ef0 <sin>
 8005f82:	ec51 0b10 	vmov	r0, r1, d0
 8005f86:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005f8a:	f7fa fb35 	bl	80005f8 <__aeabi_dmul>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	4b60      	ldr	r3, [pc, #384]	@ (8006118 <odometry+0x348>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa f976 	bl	800028c <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	495c      	ldr	r1, [pc, #368]	@ (8006118 <odometry+0x348>)
 8005fa6:	e9c1 2300 	strd	r2, r3, [r1]

    double thetaIN = headingIN + (dthetaIN / 2.0);
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005fb2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8005fb6:	f7fa fc49 	bl	800084c <__aeabi_ddiv>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4b56      	ldr	r3, [pc, #344]	@ (800611c <odometry+0x34c>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa f960 	bl	800028c <__adddf3>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    xGlobalIN += dxIN * cos(thetaIN) + dyIN * sin(thetaIN);
 8005fd4:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8005fd8:	f00b ff36 	bl	8011e48 <cos>
 8005fdc:	ec51 0b10 	vmov	r0, r1, d0
 8005fe0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005fe4:	f7fa fb08 	bl	80005f8 <__aeabi_dmul>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4690      	mov	r8, r2
 8005fee:	4699      	mov	r9, r3
 8005ff0:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8005ff4:	f00b ff7c 	bl	8011ef0 <sin>
 8005ff8:	ec51 0b10 	vmov	r0, r1, d0
 8005ffc:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8006000:	f7fa fafa 	bl	80005f8 <__aeabi_dmul>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4640      	mov	r0, r8
 800600a:	4649      	mov	r1, r9
 800600c:	f7fa f93e 	bl	800028c <__adddf3>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	4b41      	ldr	r3, [pc, #260]	@ (8006120 <odometry+0x350>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa f935 	bl	800028c <__adddf3>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	493e      	ldr	r1, [pc, #248]	@ (8006120 <odometry+0x350>)
 8006028:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobalIN += -dxIN * sin(thetaIN) + dyIN * cos(thetaIN);
 800602c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006036:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8006040:	f00b ff56 	bl	8011ef0 <sin>
 8006044:	ec53 2b10 	vmov	r2, r3, d0
 8006048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800604c:	f7fa fad4 	bl	80005f8 <__aeabi_dmul>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4690      	mov	r8, r2
 8006056:	4699      	mov	r9, r3
 8006058:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800605c:	f00b fef4 	bl	8011e48 <cos>
 8006060:	ec51 0b10 	vmov	r0, r1, d0
 8006064:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8006068:	f7fa fac6 	bl	80005f8 <__aeabi_dmul>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa f90a 	bl	800028c <__adddf3>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4610      	mov	r0, r2
 800607e:	4619      	mov	r1, r3
 8006080:	4b28      	ldr	r3, [pc, #160]	@ (8006124 <odometry+0x354>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f7fa f901 	bl	800028c <__adddf3>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4925      	ldr	r1, [pc, #148]	@ (8006124 <odometry+0x354>)
 8006090:	e9c1 2300 	strd	r2, r3, [r1]
    headingIN += dthetaIN;
 8006094:	4b21      	ldr	r3, [pc, #132]	@ (800611c <odometry+0x34c>)
 8006096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800609a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800609e:	f7fa f8f5 	bl	800028c <__adddf3>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	491d      	ldr	r1, [pc, #116]	@ (800611c <odometry+0x34c>)
 80060a8:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 80060ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006128 <odometry+0x358>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4b1e      	ldr	r3, [pc, #120]	@ (800612c <odometry+0x35c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int dn2 = counter2 - oldEnc2;
 80060ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006130 <odometry+0x360>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b1d      	ldr	r3, [pc, #116]	@ (8006134 <odometry+0x364>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060c8:	e036      	b.n	8006138 <odometry+0x368>
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w
 80060d0:	458bd930 	.word	0x458bd930
 80060d4:	401b4977 	.word	0x401b4977
 80060d8:	00000000 	.word	0x00000000
 80060dc:	40a45000 	.word	0x40a45000
 80060e0:	667f3bcd 	.word	0x667f3bcd
 80060e4:	3fe6a09e 	.word	0x3fe6a09e
 80060e8:	667f3bcc 	.word	0x667f3bcc
 80060ec:	3fe6a09e 	.word	0x3fe6a09e
 80060f0:	200004f4 	.word	0x200004f4
 80060f4:	20000658 	.word	0x20000658
 80060f8:	200004f8 	.word	0x200004f8
 80060fc:	2000065c 	.word	0x2000065c
 8006100:	200004fc 	.word	0x200004fc
 8006104:	20000660 	.word	0x20000660
 8006108:	20000500 	.word	0x20000500
 800610c:	20000664 	.word	0x20000664
 8006110:	40100000 	.word	0x40100000
 8006114:	20000678 	.word	0x20000678
 8006118:	20000680 	.word	0x20000680
 800611c:	20000688 	.word	0x20000688
 8006120:	20000668 	.word	0x20000668
 8006124:	20000670 	.word	0x20000670
 8006128:	200004e8 	.word	0x200004e8
 800612c:	20000640 	.word	0x20000640
 8006130:	200004ec 	.word	0x200004ec
 8006134:	20000644 	.word	0x20000644
    int dn3 = counter3 - oldEnc3;
 8006138:	4bbb      	ldr	r3, [pc, #748]	@ (8006428 <odometry+0x658>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4bbb      	ldr	r3, [pc, #748]	@ (800642c <odometry+0x65c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    oldEnc1 = counter1;
 8006146:	4bba      	ldr	r3, [pc, #744]	@ (8006430 <odometry+0x660>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4aba      	ldr	r2, [pc, #744]	@ (8006434 <odometry+0x664>)
 800614c:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 800614e:	4bba      	ldr	r3, [pc, #744]	@ (8006438 <odometry+0x668>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4aba      	ldr	r2, [pc, #744]	@ (800643c <odometry+0x66c>)
 8006154:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8006156:	4bb4      	ldr	r3, [pc, #720]	@ (8006428 <odometry+0x658>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4ab4      	ldr	r2, [pc, #720]	@ (800642c <odometry+0x65c>)
 800615c:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 800615e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	4618      	mov	r0, r3
 800616a:	f7fa f9db 	bl	8000524 <__aeabi_i2d>
 800616e:	a3aa      	add	r3, pc, #680	@ (adr r3, 8006418 <odometry+0x648>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	a3a7      	add	r3, pc, #668	@ (adr r3, 8006420 <odometry+0x650>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa fb61 	bl	800084c <__aeabi_ddiv>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 8006192:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	22e6      	movs	r2, #230	@ 0xe6
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	4aa7      	ldr	r2, [pc, #668]	@ (8006440 <odometry+0x670>)
 80061a4:	fb82 1203 	smull	r1, r2, r2, r3
 80061a8:	441a      	add	r2, r3
 80061aa:	1212      	asrs	r2, r2, #8
 80061ac:	17db      	asrs	r3, r3, #31
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061b4:	4413      	add	r3, r2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9b4 	bl	8000524 <__aeabi_i2d>
 80061bc:	a396      	add	r3, pc, #600	@ (adr r3, 8006418 <odometry+0x648>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f7fa fa19 	bl	80005f8 <__aeabi_dmul>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 80061ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80061d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061d6:	4413      	add	r3, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fa f9a3 	bl	8000524 <__aeabi_i2d>
 80061de:	a38e      	add	r3, pc, #568	@ (adr r3, 8006418 <odometry+0x648>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa fa08 	bl	80005f8 <__aeabi_dmul>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4610      	mov	r0, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80061f8:	f7fa fb28 	bl	800084c <__aeabi_ddiv>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double distance = hypot(dx, dy);
 8006204:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8006208:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800620c:	f00b fde8 	bl	8011de0 <hypot>
 8006210:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	double direction = atan2(dy, dx);
 8006214:	ed97 1b22 	vldr	d1, [r7, #136]	@ 0x88
 8006218:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 800621c:	f00b fddc 	bl	8011dd8 <atan2>
 8006220:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	double theta_local = direction - dtheta;
 8006224:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006228:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800622c:	f7fa f82c 	bl	8000288 <__aeabi_dsub>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	xLocal += distance * cos(theta_local);
 8006238:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800623c:	f00b fe04 	bl	8011e48 <cos>
 8006240:	ec51 0b10 	vmov	r0, r1, d0
 8006244:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006248:	f7fa f9d6 	bl	80005f8 <__aeabi_dmul>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	4b7b      	ldr	r3, [pc, #492]	@ (8006444 <odometry+0x674>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa f817 	bl	800028c <__adddf3>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4978      	ldr	r1, [pc, #480]	@ (8006444 <odometry+0x674>)
 8006264:	e9c1 2300 	strd	r2, r3, [r1]
	yLocal += distance * sin(theta_local);
 8006268:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800626c:	f00b fe40 	bl	8011ef0 <sin>
 8006270:	ec51 0b10 	vmov	r0, r1, d0
 8006274:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006278:	f7fa f9be 	bl	80005f8 <__aeabi_dmul>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	4b70      	ldr	r3, [pc, #448]	@ (8006448 <odometry+0x678>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7f9 ffff 	bl	800028c <__adddf3>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	496d      	ldr	r1, [pc, #436]	@ (8006448 <odometry+0x678>)
 8006294:	e9c1 2300 	strd	r2, r3, [r1]

    double theta = heading + (dtheta / 2.0);
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80062a0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80062a4:	f7fa fad2 	bl	800084c <__aeabi_ddiv>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	4b66      	ldr	r3, [pc, #408]	@ (800644c <odometry+0x67c>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f7f9 ffe9 	bl	800028c <__adddf3>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    xGlobal += dx * cos(theta) + dy * sin(theta);
 80062c2:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80062c6:	f00b fdbf 	bl	8011e48 <cos>
 80062ca:	ec51 0b10 	vmov	r0, r1, d0
 80062ce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80062d2:	f7fa f991 	bl	80005f8 <__aeabi_dmul>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4690      	mov	r8, r2
 80062dc:	4699      	mov	r9, r3
 80062de:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80062e2:	f00b fe05 	bl	8011ef0 <sin>
 80062e6:	ec51 0b10 	vmov	r0, r1, d0
 80062ea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80062ee:	f7fa f983 	bl	80005f8 <__aeabi_dmul>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4640      	mov	r0, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	f7f9 ffc7 	bl	800028c <__adddf3>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4610      	mov	r0, r2
 8006304:	4619      	mov	r1, r3
 8006306:	4b52      	ldr	r3, [pc, #328]	@ (8006450 <odometry+0x680>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f7f9 ffbe 	bl	800028c <__adddf3>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	494e      	ldr	r1, [pc, #312]	@ (8006450 <odometry+0x680>)
 8006316:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobal += -dx * sin(theta) + dy * cos(theta);
 800631a:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800631e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006322:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006326:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800632a:	f00b fde1 	bl	8011ef0 <sin>
 800632e:	ec53 2b10 	vmov	r2, r3, d0
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f7fa f95f 	bl	80005f8 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4614      	mov	r4, r2
 8006340:	461d      	mov	r5, r3
 8006342:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8006346:	f00b fd7f 	bl	8011e48 <cos>
 800634a:	ec51 0b10 	vmov	r0, r1, d0
 800634e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7f9 ff95 	bl	800028c <__adddf3>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4610      	mov	r0, r2
 8006368:	4619      	mov	r1, r3
 800636a:	4b3a      	ldr	r3, [pc, #232]	@ (8006454 <odometry+0x684>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f7f9 ff8c 	bl	800028c <__adddf3>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4936      	ldr	r1, [pc, #216]	@ (8006454 <odometry+0x684>)
 800637a:	e9c1 2300 	strd	r2, r3, [r1]
    heading += dtheta;
 800637e:	4b33      	ldr	r3, [pc, #204]	@ (800644c <odometry+0x67c>)
 8006380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006384:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006388:	f7f9 ff80 	bl	800028c <__adddf3>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	492e      	ldr	r1, [pc, #184]	@ (800644c <odometry+0x67c>)
 8006392:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    currentPosition.x_global = xGlobal;
 8006396:	4b2e      	ldr	r3, [pc, #184]	@ (8006450 <odometry+0x680>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    currentPosition.y_global = yGlobal;
 80063a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006454 <odometry+0x684>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    currentPosition.x_local = xLocal;
 80063aa:	4b26      	ldr	r3, [pc, #152]	@ (8006444 <odometry+0x674>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    currentPosition.y_local = yLocal;
 80063b4:	4b24      	ldr	r3, [pc, #144]	@ (8006448 <odometry+0x678>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    currentPosition.x_in_global = xGlobalIN;
 80063be:	4b26      	ldr	r3, [pc, #152]	@ (8006458 <odometry+0x688>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    currentPosition.y_in_global = yGlobalIN;
 80063c8:	4b24      	ldr	r3, [pc, #144]	@ (800645c <odometry+0x68c>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    currentPosition.x_in_local = xLocalIN;
 80063d2:	4b23      	ldr	r3, [pc, #140]	@ (8006460 <odometry+0x690>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    currentPosition.y_in_local = yLocalIN;
 80063dc:	4b21      	ldr	r3, [pc, #132]	@ (8006464 <odometry+0x694>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    currentPosition.h_en = (heading + headingIN) * 90/M_PI;
 80063e6:	4b19      	ldr	r3, [pc, #100]	@ (800644c <odometry+0x67c>)
 80063e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <odometry+0x698>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7f9 ff4b 	bl	800028c <__adddf3>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	4b1a      	ldr	r3, [pc, #104]	@ (800646c <odometry+0x69c>)
 8006404:	f7fa f8f8 	bl	80005f8 <__aeabi_dmul>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4610      	mov	r0, r2
 800640e:	4619      	mov	r1, r3
 8006410:	e02e      	b.n	8006470 <odometry+0x6a0>
 8006412:	bf00      	nop
 8006414:	f3af 8000 	nop.w
 8006418:	2d6e5f19 	.word	0x2d6e5f19
 800641c:	3fb752bc 	.word	0x3fb752bc
 8006420:	00000000 	.word	0x00000000
 8006424:	4077c000 	.word	0x4077c000
 8006428:	200004f0 	.word	0x200004f0
 800642c:	20000648 	.word	0x20000648
 8006430:	200004e8 	.word	0x200004e8
 8006434:	20000640 	.word	0x20000640
 8006438:	200004ec 	.word	0x200004ec
 800643c:	20000644 	.word	0x20000644
 8006440:	ac769185 	.word	0xac769185
 8006444:	20000628 	.word	0x20000628
 8006448:	20000630 	.word	0x20000630
 800644c:	20000638 	.word	0x20000638
 8006450:	20000618 	.word	0x20000618
 8006454:	20000620 	.word	0x20000620
 8006458:	20000668 	.word	0x20000668
 800645c:	20000670 	.word	0x20000670
 8006460:	20000678 	.word	0x20000678
 8006464:	20000680 	.word	0x20000680
 8006468:	20000688 	.word	0x20000688
 800646c:	40568000 	.word	0x40568000
 8006470:	a30e      	add	r3, pc, #56	@ (adr r3, 80064ac <odometry+0x6dc>)
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f7fa f9e9 	bl	800084c <__aeabi_ddiv>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    currentPosition.h = sensorData[0];
 8006482:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <odometry+0x6d8>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    return currentPosition;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4618      	mov	r0, r3
 8006490:	f107 0310 	add.w	r3, r7, #16
 8006494:	2250      	movs	r2, #80	@ 0x50
 8006496:	4619      	mov	r1, r3
 8006498:	f008 ffdd 	bl	800f456 <memcpy>
}
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	37f0      	adds	r7, #240	@ 0xf0
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80064a6:	bf00      	nop
 80064a8:	20000540 	.word	0x20000540
 80064ac:	54442d18 	.word	0x54442d18
 80064b0:	400921fb 	.word	0x400921fb

080064b4 <stateTransition>:
    {0.0, 0.0, 0.1}
};

// State transition function f
StateVector stateTransition(StateVector X)
{
 80064b4:	b5b0      	push	{r4, r5, r7, lr}
 80064b6:	b0ac      	sub	sp, #176	@ 0xb0
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	eeb0 5a40 	vmov.f32	s10, s0
 80064be:	eef0 5a60 	vmov.f32	s11, s1
 80064c2:	eeb0 6a41 	vmov.f32	s12, s2
 80064c6:	eef0 6a61 	vmov.f32	s13, s3
 80064ca:	eeb0 7a42 	vmov.f32	s14, s4
 80064ce:	eef0 7a62 	vmov.f32	s15, s5
 80064d2:	ed87 5b06 	vstr	d5, [r7, #24]
 80064d6:	ed87 6b08 	vstr	d6, [r7, #32]
 80064da:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    StateVector X_next;
    robotPosition position = odometry();
 80064de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff fc74 	bl	8005dd0 <odometry>
//    X_next.x = X.x + v * cos(X.theta) * dt + 0.5 * ax * pow(dt, 2) * cos(X.theta);
//    X_next.y = X.y + v * sin(X.theta) * dt + 0.5 * ay * pow(dt, 2) * sin(X.theta);
//    X_next.theta = X.theta + heading;
    X_next.x = X.x + position.x_local;
 80064e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064f0:	f7f9 fecc 	bl	800028c <__adddf3>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    X_next.y = X.y + position.y_local;
 80064fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006504:	f7f9 fec2 	bl	800028c <__adddf3>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    X_next.theta = X.theta + position.h;
 8006510:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006514:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006518:	f7f9 feb8 	bl	800028c <__adddf3>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    return X_next;
 8006524:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8006528:	f107 0580 	add.w	r5, r7, #128	@ 0x80
 800652c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800652e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006530:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006534:	e884 0003 	stmia.w	r4, {r0, r1}
 8006538:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800653c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006540:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8006544:	ec45 4b15 	vmov	d5, r4, r5
 8006548:	ec41 0b16 	vmov	d6, r0, r1
 800654c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006550:	eeb0 0a45 	vmov.f32	s0, s10
 8006554:	eef0 0a65 	vmov.f32	s1, s11
 8006558:	eeb0 1a46 	vmov.f32	s2, s12
 800655c:	eef0 1a66 	vmov.f32	s3, s13
 8006560:	eeb0 2a47 	vmov.f32	s4, s14
 8006564:	eef0 2a67 	vmov.f32	s5, s15
 8006568:	37b0      	adds	r7, #176	@ 0xb0
 800656a:	46bd      	mov	sp, r7
 800656c:	bdb0      	pop	{r4, r5, r7, pc}

0800656e <measurementFunction>:

// Measurement function h
MeasurementVector measurementFunction(StateVector X)
{
 800656e:	b4b0      	push	{r4, r5, r7}
 8006570:	b099      	sub	sp, #100	@ 0x64
 8006572:	af00      	add	r7, sp, #0
 8006574:	eeb0 5a40 	vmov.f32	s10, s0
 8006578:	eef0 5a60 	vmov.f32	s11, s1
 800657c:	eeb0 6a41 	vmov.f32	s12, s2
 8006580:	eef0 6a61 	vmov.f32	s13, s3
 8006584:	eeb0 7a42 	vmov.f32	s14, s4
 8006588:	eef0 7a62 	vmov.f32	s15, s5
 800658c:	ed87 5b06 	vstr	d5, [r7, #24]
 8006590:	ed87 6b08 	vstr	d6, [r7, #32]
 8006594:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    MeasurementVector Z;
    Z.x = X.x;
 8006598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800659c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Z.y = X.y;
 80065a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    Z.theta = X.theta;
 80065a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    return Z;
 80065b0:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80065b4:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 80065b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80065c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80065c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80065c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80065cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065d0:	ec45 4b15 	vmov	d5, r4, r5
 80065d4:	ec41 0b16 	vmov	d6, r0, r1
 80065d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80065dc:	eeb0 0a45 	vmov.f32	s0, s10
 80065e0:	eef0 0a65 	vmov.f32	s1, s11
 80065e4:	eeb0 1a46 	vmov.f32	s2, s12
 80065e8:	eef0 1a66 	vmov.f32	s3, s13
 80065ec:	eeb0 2a47 	vmov.f32	s4, s14
 80065f0:	eef0 2a67 	vmov.f32	s5, s15
 80065f4:	3764      	adds	r7, #100	@ 0x64
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bcb0      	pop	{r4, r5, r7}
 80065fa:	4770      	bx	lr
 80065fc:	0000      	movs	r0, r0
	...

08006600 <extendedKalmanFilter>:

// Extended Kalman Filter
EKF extendedKalmanFilter()
{
 8006600:	b5b0      	push	{r4, r5, r7, lr}
 8006602:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8006606:	af00      	add	r7, sp, #0
	EKF currentPosition;
	robotPosition position = odometry();
 8006608:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fbdf 	bl	8005dd0 <odometry>
	double P[STATE_DIM][STATE_DIM] = {
 8006612:	4ac7      	ldr	r2, [pc, #796]	@ (8006930 <extendedKalmanFilter+0x330>)
 8006614:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8006618:	4611      	mov	r1, r2
 800661a:	2248      	movs	r2, #72	@ 0x48
 800661c:	4618      	mov	r0, r3
 800661e:	f008 ff1a 	bl	800f456 <memcpy>
		{1.0, 0.0, 0.0},
		{0.0, 1.0, 0.0},
		{0.0, 0.0, 1.0}};

    // Prediction step
	StateVector X = {position.x_local, position.y_local, 0.0};
 8006622:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8006626:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 800662a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800662e:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
    StateVector X_pred = stateTransition(X);
 800663e:	ed97 5b54 	vldr	d5, [r7, #336]	@ 0x150
 8006642:	ed97 6b56 	vldr	d6, [r7, #344]	@ 0x158
 8006646:	ed97 7b58 	vldr	d7, [r7, #352]	@ 0x160
 800664a:	eeb0 0a45 	vmov.f32	s0, s10
 800664e:	eef0 0a65 	vmov.f32	s1, s11
 8006652:	eeb0 1a46 	vmov.f32	s2, s12
 8006656:	eef0 1a66 	vmov.f32	s3, s13
 800665a:	eeb0 2a47 	vmov.f32	s4, s14
 800665e:	eef0 2a67 	vmov.f32	s5, s15
 8006662:	f7ff ff27 	bl	80064b4 <stateTransition>
 8006666:	eeb0 5a40 	vmov.f32	s10, s0
 800666a:	eef0 5a60 	vmov.f32	s11, s1
 800666e:	eeb0 6a41 	vmov.f32	s12, s2
 8006672:	eef0 6a61 	vmov.f32	s13, s3
 8006676:	eeb0 7a42 	vmov.f32	s14, s4
 800667a:	eef0 7a62 	vmov.f32	s15, s5
 800667e:	ed87 5b4e 	vstr	d5, [r7, #312]	@ 0x138
 8006682:	ed87 6b50 	vstr	d6, [r7, #320]	@ 0x140
 8006686:	ed87 7b52 	vstr	d7, [r7, #328]	@ 0x148
    double P_pred[STATE_DIM][STATE_DIM] = {
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 800668a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800668e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8006928 <extendedKalmanFilter+0x328>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f7f9 fdfa 	bl	800028c <__adddf3>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 800669c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80066a0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80066a4:	e9c1 2300 	strd	r2, r3, [r1]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 80066a8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
    double P_pred[STATE_DIM][STATE_DIM] = {
 80066ac:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80066b0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80066b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 80066b8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
    double P_pred[STATE_DIM][STATE_DIM] = {
 80066bc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80066c0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80066c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 80066c8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
    double P_pred[STATE_DIM][STATE_DIM] = {
 80066cc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80066d0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80066d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 80066d8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80066dc:	a392      	add	r3, pc, #584	@ (adr r3, 8006928 <extendedKalmanFilter+0x328>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fdd3 	bl	800028c <__adddf3>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 80066ea:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80066ee:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80066f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 80066f6:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
    double P_pred[STATE_DIM][STATE_DIM] = {
 80066fa:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80066fe:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8006702:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8006706:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
    double P_pred[STATE_DIM][STATE_DIM] = {
 800670a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800670e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8006712:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8006716:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
    double P_pred[STATE_DIM][STATE_DIM] = {
 800671a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800671e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8006722:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8006726:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800672a:	a37f      	add	r3, pc, #508	@ (adr r3, 8006928 <extendedKalmanFilter+0x328>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 fdac 	bl	800028c <__adddf3>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8006738:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800673c:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8006740:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update step
	MeasurementVector Z = {position.x_in_local, position.y_in_local, 0.0};
 8006744:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8006748:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800674c:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8006750:	e9c1 2300 	strd	r2, r3, [r1]
 8006754:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8006758:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800675c:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8006760:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006764:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006768:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9c1 2304 	strd	r2, r3, [r1, #16]
    MeasurementVector Z_pred = measurementFunction(X_pred);
 8006778:	ed97 5b4e 	vldr	d5, [r7, #312]	@ 0x138
 800677c:	ed97 6b50 	vldr	d6, [r7, #320]	@ 0x140
 8006780:	ed97 7b52 	vldr	d7, [r7, #328]	@ 0x148
 8006784:	eeb0 0a45 	vmov.f32	s0, s10
 8006788:	eef0 0a65 	vmov.f32	s1, s11
 800678c:	eeb0 1a46 	vmov.f32	s2, s12
 8006790:	eef0 1a66 	vmov.f32	s3, s13
 8006794:	eeb0 2a47 	vmov.f32	s4, s14
 8006798:	eef0 2a67 	vmov.f32	s5, s15
 800679c:	f7ff fee7 	bl	800656e <measurementFunction>
 80067a0:	eeb0 5a40 	vmov.f32	s10, s0
 80067a4:	eef0 5a60 	vmov.f32	s11, s1
 80067a8:	eeb0 6a41 	vmov.f32	s12, s2
 80067ac:	eef0 6a61 	vmov.f32	s13, s3
 80067b0:	eeb0 7a42 	vmov.f32	s14, s4
 80067b4:	eef0 7a62 	vmov.f32	s15, s5
 80067b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80067bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80067c0:	ed83 5b00 	vstr	d5, [r3]
 80067c4:	ed83 6b02 	vstr	d6, [r3, #8]
 80067c8:	ed83 7b04 	vstr	d7, [r3, #16]
    double Y[MEASUREMENT_DIM] = {Z.x - Z_pred.x, Z.y - Z_pred.y, Z.theta - Z_pred.theta};
 80067cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80067d0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80067d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067d8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80067dc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fd50 	bl	8000288 <__aeabi_dsub>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80067f0:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80067f4:	e9c1 2300 	strd	r2, r3, [r1]
 80067f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80067fc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8006800:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006804:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006808:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800680c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006810:	f7f9 fd3a 	bl	8000288 <__aeabi_dsub>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800681c:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8006820:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006824:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006828:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800682c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006830:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006834:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006838:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800683c:	f7f9 fd24 	bl	8000288 <__aeabi_dsub>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006848:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 800684c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8006850:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006854:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800685c:	a332      	add	r3, pc, #200	@ (adr r3, 8006928 <extendedKalmanFilter+0x328>)
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f7f9 fd13 	bl	800028c <__adddf3>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 800686a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800686e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8006872:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8006876:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800687a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800687e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8006882:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006886:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800688a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 800688e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006892:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006896:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 800689a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800689e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80068a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 80068a6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80068aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80068ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80068b2:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80068b6:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80068ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 80068be:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80068c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80068c6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80068ca:	a317      	add	r3, pc, #92	@ (adr r3, 8006928 <extendedKalmanFilter+0x328>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fcdc 	bl	800028c <__adddf3>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80068d8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80068dc:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80068e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 80068e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80068e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80068ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80068f0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80068f4:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80068f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 80068fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006900:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006904:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8006908:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800690c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8006910:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8006914:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006918:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800691c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006920:	e008      	b.n	8006934 <extendedKalmanFilter+0x334>
 8006922:	bf00      	nop
 8006924:	f3af 8000 	nop.w
 8006928:	9999999a 	.word	0x9999999a
 800692c:	3fb99999 	.word	0x3fb99999
 8006930:	08013e50 	.word	0x08013e50
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8006934:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006938:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800693c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8006940:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006944:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006948:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800694c:	f60f 33c8 	addw	r3, pc, #3016	@ 0xbc8
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7f9 fc9a 	bl	800028c <__adddf3>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 800695c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006960:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8006964:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };
    double K[STATE_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8006968:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800696c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006974:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006978:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f7f9 ff64 	bl	800084c <__aeabi_ddiv>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8006988:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800698c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8006990:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8006994:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006998:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800699c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80069a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80069a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80069a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069ac:	f7f9 ff4e 	bl	800084c <__aeabi_ddiv>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 80069b4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80069b8:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 80069bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 80069c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80069c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80069c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80069cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80069d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80069d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80069d8:	f7f9 ff38 	bl	800084c <__aeabi_ddiv>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 80069e0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80069e4:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 80069e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 80069ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80069f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80069f4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80069f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80069fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f7f9 ff22 	bl	800084c <__aeabi_ddiv>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8006a0c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006a10:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8006a14:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8006a18:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006a20:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006a24:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a28:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a30:	f7f9 ff0c 	bl	800084c <__aeabi_ddiv>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8006a38:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006a3c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8006a40:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8006a44:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006a4c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006a50:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006a58:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006a5c:	f7f9 fef6 	bl	800084c <__aeabi_ddiv>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8006a64:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006a68:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8006a6c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8006a70:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a74:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006a78:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006a7c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 fee0 	bl	800084c <__aeabi_ddiv>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8006a90:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006a94:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8006a98:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8006a9c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006aa0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006aa4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8006aa8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006aac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ab4:	f7f9 feca 	bl	800084c <__aeabi_ddiv>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8006abc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006ac0:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8006ac4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8006ac8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006acc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006ad0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006ad4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006ad8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006adc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006ae0:	f7f9 feb4 	bl	800084c <__aeabi_ddiv>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8006ae8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006aec:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8006af0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update state estimate
    X.x = X_pred.x + K[0][0] * Y[0] + K[0][1] * Y[1] + K[0][2] * Y[2];
 8006af4:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8006af8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006afc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b04:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b08:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7f9 fbb6 	bl	800028c <__adddf3>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	461d      	mov	r5, r3
 8006b28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b2c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006b30:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006b34:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b38:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006b40:	f7f9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	f7f9 fb9e 	bl	800028c <__adddf3>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4614      	mov	r4, r2
 8006b56:	461d      	mov	r5, r3
 8006b58:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b5c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006b60:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006b64:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006b70:	f7f9 fd42 	bl	80005f8 <__aeabi_dmul>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 fb86 	bl	800028c <__adddf3>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
    X.y = X_pred.y + K[1][0] * Y[0] + K[1][1] * Y[1] + K[1][2] * Y[2];
 8006b88:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8006b8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b90:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006b94:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006b98:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006b9c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f7f9 fd28 	bl	80005f8 <__aeabi_dmul>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 fb6c 	bl	800028c <__adddf3>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006bc0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006bc4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006bc8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006bcc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006bd0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006bd4:	f7f9 fd10 	bl	80005f8 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	4629      	mov	r1, r5
 8006be0:	f7f9 fb54 	bl	800028c <__adddf3>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	461d      	mov	r5, r3
 8006bec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006bf0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006bf4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006bf8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006bfc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006c00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c04:	f7f9 fcf8 	bl	80005f8 <__aeabi_dmul>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	4629      	mov	r1, r5
 8006c10:	f7f9 fb3c 	bl	800028c <__adddf3>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
    X.theta = X_pred.theta + K[2][0] * Y[0] + K[2][1] * Y[1] + K[2][2] * Y[2];
 8006c1c:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8006c20:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006c24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006c28:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006c2c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006c30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fcde 	bl	80005f8 <__aeabi_dmul>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4620      	mov	r0, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	f7f9 fb22 	bl	800028c <__adddf3>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	461d      	mov	r5, r3
 8006c50:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006c54:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006c58:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8006c5c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006c60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006c64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006c68:	f7f9 fcc6 	bl	80005f8 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4620      	mov	r0, r4
 8006c72:	4629      	mov	r1, r5
 8006c74:	f7f9 fb0a 	bl	800028c <__adddf3>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006c84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006c88:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006c8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006c90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006c94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c98:	f7f9 fcae 	bl	80005f8 <__aeabi_dmul>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	f7f9 faf2 	bl	800028c <__adddf3>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

    // Update covariance matrix
    P[0][0] = P_pred[0][0] - K[0][0] * S[0][0] * K[0][0] - K[0][1] * S[1][1] * K[0][1] - K[0][2] * S[2][2] * K[0][2];
 8006cb0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006cb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006cb8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006cbc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006cc0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cc8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006ccc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f7f9 fc90 	bl	80005f8 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006ce4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fc84 	bl	80005f8 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 fac6 	bl	8000288 <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4614      	mov	r4, r2
 8006d02:	461d      	mov	r5, r3
 8006d04:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006d08:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006d0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006d10:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006d14:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006d18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d1c:	f7f9 fc6c 	bl	80005f8 <__aeabi_dmul>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4610      	mov	r0, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006d2c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006d30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d34:	f7f9 fc60 	bl	80005f8 <__aeabi_dmul>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4629      	mov	r1, r5
 8006d40:	f7f9 faa2 	bl	8000288 <__aeabi_dsub>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4614      	mov	r4, r2
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006d50:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006d54:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006d58:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006d5c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006d60:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006d64:	f7f9 fc48 	bl	80005f8 <__aeabi_dmul>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006d74:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006d78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006d7c:	f7f9 fc3c 	bl	80005f8 <__aeabi_dmul>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4620      	mov	r0, r4
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7f9 fa7e 	bl	8000288 <__aeabi_dsub>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
    P[0][1] = P_pred[0][1] - K[0][0] * S[0][0] * K[1][0] - K[0][1] * S[1][1] * K[1][1] - K[0][2] * S[2][2] * K[1][2];
 8006d94:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006d98:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006d9c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006da0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006da4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006db0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f7f9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006dc8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006dcc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f7f9 fa54 	bl	8000288 <__aeabi_dsub>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	461d      	mov	r5, r3
 8006de8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006dec:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006df0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006df4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006df8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e00:	f7f9 fbfa 	bl	80005f8 <__aeabi_dmul>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006e10:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e18:	f7f9 fbee 	bl	80005f8 <__aeabi_dmul>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4620      	mov	r0, r4
 8006e22:	4629      	mov	r1, r5
 8006e24:	f7f9 fa30 	bl	8000288 <__aeabi_dsub>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	461d      	mov	r5, r3
 8006e30:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006e34:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006e38:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006e3c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006e40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006e44:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006e48:	f7f9 fbd6 	bl	80005f8 <__aeabi_dmul>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4610      	mov	r0, r2
 8006e52:	4619      	mov	r1, r3
 8006e54:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006e58:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006e5c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006e60:	f7f9 fbca 	bl	80005f8 <__aeabi_dmul>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 fa0c 	bl	8000288 <__aeabi_dsub>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    P[0][2] = P_pred[0][2] - K[0][0] * S[0][0] * K[2][0] - K[0][1] * S[1][1] * K[2][1] - K[0][2] * S[2][2] * K[2][2];
 8006e78:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006e7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006e80:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006e84:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006e88:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e90:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006e94:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006eac:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006eb0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006eb4:	f7f9 fba0 	bl	80005f8 <__aeabi_dmul>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	f7f9 f9e2 	bl	8000288 <__aeabi_dsub>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4614      	mov	r4, r2
 8006eca:	461d      	mov	r5, r3
 8006ecc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006ed0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006ed4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006ed8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006edc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006ee0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ee4:	f7f9 fb88 	bl	80005f8 <__aeabi_dmul>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4610      	mov	r0, r2
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006ef4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006ef8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006efc:	f7f9 fb7c 	bl	80005f8 <__aeabi_dmul>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 f9be 	bl	8000288 <__aeabi_dsub>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006f18:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006f1c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006f20:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006f24:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006f28:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006f2c:	f7f9 fb64 	bl	80005f8 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4610      	mov	r0, r2
 8006f36:	4619      	mov	r1, r3
 8006f38:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006f3c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006f40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006f44:	f7f9 fb58 	bl	80005f8 <__aeabi_dmul>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 f99a 	bl	8000288 <__aeabi_dsub>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
    P[1][0] = P_pred[1][0] - K[1][0] * S[0][0] * K[0][0] - K[1][1] * S[1][1] * K[0][1] - K[1][2] * S[2][2] * K[0][2];
 8006f5c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006f60:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006f64:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006f68:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006f6c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006f70:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006f74:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006f78:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006f90:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 fb2e 	bl	80005f8 <__aeabi_dmul>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 f970 	bl	8000288 <__aeabi_dsub>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4614      	mov	r4, r2
 8006fae:	461d      	mov	r5, r3
 8006fb0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006fb4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006fb8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006fbc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006fc0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006fc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006fd8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006fdc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006fe0:	f7f9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7f9 f94c 	bl	8000288 <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	461d      	mov	r5, r3
 8006ff8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006ffc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007000:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007004:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007008:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800700c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007010:	f7f9 faf2 	bl	80005f8 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4610      	mov	r0, r2
 800701a:	4619      	mov	r1, r3
 800701c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007020:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007024:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007028:	f7f9 fae6 	bl	80005f8 <__aeabi_dmul>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4620      	mov	r0, r4
 8007032:	4629      	mov	r1, r5
 8007034:	f7f9 f928 	bl	8000288 <__aeabi_dsub>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
    P[1][1] = P_pred[1][1] - K[1][0] * S[0][0] * K[1][0] - K[1][1] * S[1][1] * K[1][1] - K[1][2] * S[2][2] * K[1][2];
 8007040:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007044:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007048:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800704c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007050:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007054:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007058:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800705c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 fac8 	bl	80005f8 <__aeabi_dmul>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4610      	mov	r0, r2
 800706e:	4619      	mov	r1, r3
 8007070:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007074:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007078:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800707c:	f7f9 fabc 	bl	80005f8 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4620      	mov	r0, r4
 8007086:	4629      	mov	r1, r5
 8007088:	f7f9 f8fe 	bl	8000288 <__aeabi_dsub>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4614      	mov	r4, r2
 8007092:	461d      	mov	r5, r3
 8007094:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007098:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800709c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80070a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80070a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80070a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070ac:	f7f9 faa4 	bl	80005f8 <__aeabi_dmul>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4610      	mov	r0, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80070bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80070c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070c4:	f7f9 fa98 	bl	80005f8 <__aeabi_dmul>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 f8da 	bl	8000288 <__aeabi_dsub>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	461d      	mov	r5, r3
 80070dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80070e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80070e4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80070e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80070ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80070f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80070f4:	f7f9 fa80 	bl	80005f8 <__aeabi_dmul>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007104:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007108:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800710c:	f7f9 fa74 	bl	80005f8 <__aeabi_dmul>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f7f9 f8b6 	bl	8000288 <__aeabi_dsub>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    P[1][2] = P_pred[1][2] - K[1][0] * S[0][0] * K[2][0] - K[1][1] * S[1][1] * K[2][1] - K[1][2] * S[2][2] * K[2][2];
 8007124:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007128:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800712c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007130:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007134:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007138:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800713c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007140:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 fa56 	bl	80005f8 <__aeabi_dmul>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4610      	mov	r0, r2
 8007152:	4619      	mov	r1, r3
 8007154:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007158:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800715c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007160:	f7f9 fa4a 	bl	80005f8 <__aeabi_dmul>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f7f9 f88c 	bl	8000288 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4614      	mov	r4, r2
 8007176:	461d      	mov	r5, r3
 8007178:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800717c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007180:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007184:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007188:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800718c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007190:	f7f9 fa32 	bl	80005f8 <__aeabi_dmul>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4610      	mov	r0, r2
 800719a:	4619      	mov	r1, r3
 800719c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80071a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80071a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80071a8:	f7f9 fa26 	bl	80005f8 <__aeabi_dmul>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7f9 f868 	bl	8000288 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4614      	mov	r4, r2
 80071be:	461d      	mov	r5, r3
 80071c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80071c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80071c8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80071cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80071d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80071d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80071d8:	f7f9 fa0e 	bl	80005f8 <__aeabi_dmul>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4610      	mov	r0, r2
 80071e2:	4619      	mov	r1, r3
 80071e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80071e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80071ec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80071f0:	f7f9 fa02 	bl	80005f8 <__aeabi_dmul>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 f844 	bl	8000288 <__aeabi_dsub>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    P[2][0] = P_pred[2][0] - K[2][0] * S[0][0] * K[0][0] - K[2][1] * S[1][1] * K[0][1] - K[2][2] * S[2][2] * K[0][2];
 8007208:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800720c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007210:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007214:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007218:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800721c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007220:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007224:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4610      	mov	r0, r2
 8007236:	4619      	mov	r1, r3
 8007238:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800723c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f9 f9d8 	bl	80005f8 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4620      	mov	r0, r4
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 f81a 	bl	8000288 <__aeabi_dsub>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4614      	mov	r4, r2
 800725a:	461d      	mov	r5, r3
 800725c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007260:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007264:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007268:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800726c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007274:	f7f9 f9c0 	bl	80005f8 <__aeabi_dmul>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007284:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007288:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800728c:	f7f9 f9b4 	bl	80005f8 <__aeabi_dmul>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f7f8 fff6 	bl	8000288 <__aeabi_dsub>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80072a8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80072ac:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80072b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80072b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80072b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80072bc:	f7f9 f99c 	bl	80005f8 <__aeabi_dmul>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80072cc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80072d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80072d4:	f7f9 f990 	bl	80005f8 <__aeabi_dmul>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f8 ffd2 	bl	8000288 <__aeabi_dsub>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    P[2][1] = P_pred[2][1] - K[2][0] * S[0][0] * K[1][0] - K[2][1] * S[1][1] * K[1][1] - K[2][2] * S[2][2] * K[1][2];
 80072ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80072f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80072f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80072f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80072fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007300:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007304:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007308:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4610      	mov	r0, r2
 800731a:	4619      	mov	r1, r3
 800731c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007320:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007324:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007328:	f7f9 f966 	bl	80005f8 <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f8 ffa8 	bl	8000288 <__aeabi_dsub>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4614      	mov	r4, r2
 800733e:	461d      	mov	r5, r3
 8007340:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007344:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007348:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800734c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007350:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007358:	f7f9 f94e 	bl	80005f8 <__aeabi_dmul>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4610      	mov	r0, r2
 8007362:	4619      	mov	r1, r3
 8007364:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007368:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800736c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007370:	f7f9 f942 	bl	80005f8 <__aeabi_dmul>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4620      	mov	r0, r4
 800737a:	4629      	mov	r1, r5
 800737c:	f7f8 ff84 	bl	8000288 <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4614      	mov	r4, r2
 8007386:	461d      	mov	r5, r3
 8007388:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800738c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007390:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007394:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007398:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800739c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80073a0:	f7f9 f92a 	bl	80005f8 <__aeabi_dmul>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4610      	mov	r0, r2
 80073aa:	4619      	mov	r1, r3
 80073ac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80073b0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80073b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80073b8:	f7f9 f91e 	bl	80005f8 <__aeabi_dmul>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4620      	mov	r0, r4
 80073c2:	4629      	mov	r1, r5
 80073c4:	f7f8 ff60 	bl	8000288 <__aeabi_dsub>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    P[2][2] = P_pred[2][2] - K[2][0] * S[0][0] * K[2][0] - K[2][1] * S[1][1] * K[2][1] - K[2][2] * S[2][2] * K[2][2];
 80073d0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80073d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80073d8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80073dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80073e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80073e4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80073e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80073ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f7f9 f900 	bl	80005f8 <__aeabi_dmul>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4610      	mov	r0, r2
 80073fe:	4619      	mov	r1, r3
 8007400:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007404:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007408:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800740c:	f7f9 f8f4 	bl	80005f8 <__aeabi_dmul>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f8 ff36 	bl	8000288 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4614      	mov	r4, r2
 8007422:	461d      	mov	r5, r3
 8007424:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007428:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800742c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007430:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007434:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007438:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800743c:	f7f9 f8dc 	bl	80005f8 <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800744c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007450:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007454:	f7f9 f8d0 	bl	80005f8 <__aeabi_dmul>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4620      	mov	r0, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7f8 ff12 	bl	8000288 <__aeabi_dsub>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4614      	mov	r4, r2
 800746a:	461d      	mov	r5, r3
 800746c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007470:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007474:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007478:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800747c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007480:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007484:	f7f9 f8b8 	bl	80005f8 <__aeabi_dmul>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4610      	mov	r0, r2
 800748e:	4619      	mov	r1, r3
 8007490:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007494:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007498:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800749c:	f7f9 f8ac 	bl	80005f8 <__aeabi_dmul>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4620      	mov	r0, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	f7f8 feee 	bl	8000288 <__aeabi_dsub>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

    currentPosition.x = X.x;
 80074b4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80074b8:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
    currentPosition.y = X.y;
 80074bc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80074c0:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
    currentPosition.h = position.h;
 80074c4:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80074c8:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

    return currentPosition;
 80074cc:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 80074d0:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 80074d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80074dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80074e0:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 80074e4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80074e8:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 80074ec:	ec45 4b15 	vmov	d5, r4, r5
 80074f0:	ec41 0b16 	vmov	d6, r0, r1
 80074f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80074f8:	eeb0 0a45 	vmov.f32	s0, s10
 80074fc:	eef0 0a65 	vmov.f32	s1, s11
 8007500:	eeb0 1a46 	vmov.f32	s2, s12
 8007504:	eef0 1a66 	vmov.f32	s3, s13
 8007508:	eeb0 2a47 	vmov.f32	s4, s14
 800750c:	eef0 2a67 	vmov.f32	s5, s15
 8007510:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8007514:	46bd      	mov	sp, r7
 8007516:	bdb0      	pop	{r4, r5, r7, pc}
 8007518:	9999999a 	.word	0x9999999a
 800751c:	3fb99999 	.word	0x3fb99999

08007520 <displayKalman>:

void displayKalman(EKF position)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	eeb0 5a40 	vmov.f32	s10, s0
 800752a:	eef0 5a60 	vmov.f32	s11, s1
 800752e:	eeb0 6a41 	vmov.f32	s12, s2
 8007532:	eef0 6a61 	vmov.f32	s13, s3
 8007536:	eeb0 7a42 	vmov.f32	s14, s4
 800753a:	eef0 7a62 	vmov.f32	s15, s5
 800753e:	ed87 5b00 	vstr	d5, [r7]
 8007542:	ed87 6b02 	vstr	d6, [r7, #8]
 8007546:	ed87 7b04 	vstr	d7, [r7, #16]
	lcd_set_cursor(0, 0);
 800754a:	2100      	movs	r1, #0
 800754c:	2000      	movs	r0, #0
 800754e:	f7fb ff1d 	bl	800338c <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 8007552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007556:	4927      	ldr	r1, [pc, #156]	@ (80075f4 <displayKalman+0xd4>)
 8007558:	4827      	ldr	r0, [pc, #156]	@ (80075f8 <displayKalman+0xd8>)
 800755a:	f007 fe2b 	bl	800f1b4 <siprintf>
	lcd_write_string(buffer);
 800755e:	4826      	ldr	r0, [pc, #152]	@ (80075f8 <displayKalman+0xd8>)
 8007560:	f7fb fefe 	bl	8003360 <lcd_write_string>

	lcd_set_cursor(1, 0);
 8007564:	2100      	movs	r1, #0
 8007566:	2001      	movs	r0, #1
 8007568:	f7fb ff10 	bl	800338c <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 800756c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007570:	4922      	ldr	r1, [pc, #136]	@ (80075fc <displayKalman+0xdc>)
 8007572:	4821      	ldr	r0, [pc, #132]	@ (80075f8 <displayKalman+0xd8>)
 8007574:	f007 fe1e 	bl	800f1b4 <siprintf>
	lcd_write_string(buffer);
 8007578:	481f      	ldr	r0, [pc, #124]	@ (80075f8 <displayKalman+0xd8>)
 800757a:	f7fb fef1 	bl	8003360 <lcd_write_string>

	lcd_set_cursor(2, 0);
 800757e:	2100      	movs	r1, #0
 8007580:	2002      	movs	r0, #2
 8007582:	f7fb ff03 	bl	800338c <lcd_set_cursor>
	sprintf(buffer, "Yaw:%.2f", position.h);
 8007586:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800758a:	491d      	ldr	r1, [pc, #116]	@ (8007600 <displayKalman+0xe0>)
 800758c:	481a      	ldr	r0, [pc, #104]	@ (80075f8 <displayKalman+0xd8>)
 800758e:	f007 fe11 	bl	800f1b4 <siprintf>
	lcd_write_string(buffer);
 8007592:	4819      	ldr	r0, [pc, #100]	@ (80075f8 <displayKalman+0xd8>)
 8007594:	f7fb fee4 	bl	8003360 <lcd_write_string>

	lcd_set_cursor(3, 0);
 8007598:	2100      	movs	r1, #0
 800759a:	2003      	movs	r0, #3
 800759c:	f7fb fef6 	bl	800338c <lcd_set_cursor>
	sprintf(buffer, "FL:%i", sensorMEGA[0]);
 80075a0:	4b18      	ldr	r3, [pc, #96]	@ (8007604 <displayKalman+0xe4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	4918      	ldr	r1, [pc, #96]	@ (8007608 <displayKalman+0xe8>)
 80075a8:	4813      	ldr	r0, [pc, #76]	@ (80075f8 <displayKalman+0xd8>)
 80075aa:	f007 fe03 	bl	800f1b4 <siprintf>
	lcd_write_string(buffer);
 80075ae:	4812      	ldr	r0, [pc, #72]	@ (80075f8 <displayKalman+0xd8>)
 80075b0:	f7fb fed6 	bl	8003360 <lcd_write_string>

	lcd_set_cursor(2, 10);
 80075b4:	210a      	movs	r1, #10
 80075b6:	2002      	movs	r0, #2
 80075b8:	f7fb fee8 	bl	800338c <lcd_set_cursor>
	sprintf(buffer, "FR:%i", sensorMEGA[1]);
 80075bc:	4b11      	ldr	r3, [pc, #68]	@ (8007604 <displayKalman+0xe4>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	461a      	mov	r2, r3
 80075c2:	4912      	ldr	r1, [pc, #72]	@ (800760c <displayKalman+0xec>)
 80075c4:	480c      	ldr	r0, [pc, #48]	@ (80075f8 <displayKalman+0xd8>)
 80075c6:	f007 fdf5 	bl	800f1b4 <siprintf>
	lcd_write_string(buffer);
 80075ca:	480b      	ldr	r0, [pc, #44]	@ (80075f8 <displayKalman+0xd8>)
 80075cc:	f7fb fec8 	bl	8003360 <lcd_write_string>

	lcd_set_cursor(3, 10);
 80075d0:	210a      	movs	r1, #10
 80075d2:	2003      	movs	r0, #3
 80075d4:	f7fb feda 	bl	800338c <lcd_set_cursor>
	sprintf(buffer, "L:%i", sensorMEGA[2]);
 80075d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <displayKalman+0xe4>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	461a      	mov	r2, r3
 80075de:	490c      	ldr	r1, [pc, #48]	@ (8007610 <displayKalman+0xf0>)
 80075e0:	4805      	ldr	r0, [pc, #20]	@ (80075f8 <displayKalman+0xd8>)
 80075e2:	f007 fde7 	bl	800f1b4 <siprintf>
	lcd_write_string(buffer);
 80075e6:	4804      	ldr	r0, [pc, #16]	@ (80075f8 <displayKalman+0xd8>)
 80075e8:	f7fb feba 	bl	8003360 <lcd_write_string>
}
 80075ec:	bf00      	nop
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	08013e98 	.word	0x08013e98
 80075f8:	2000064c 	.word	0x2000064c
 80075fc:	08013ea0 	.word	0x08013ea0
 8007600:	08013ea8 	.word	0x08013ea8
 8007604:	200005fc 	.word	0x200005fc
 8007608:	08013eb4 	.word	0x08013eb4
 800760c:	08013ebc 	.word	0x08013ebc
 8007610:	08013ec4 	.word	0x08013ec4
 8007614:	00000000 	.word	0x00000000

08007618 <PID_controller>:

    return output;
}

double PID_controller(double setpoint, double actual_position, uint8_t pidMode)
{
 8007618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800761c:	b08e      	sub	sp, #56	@ 0x38
 800761e:	af00      	add	r7, sp, #0
 8007620:	ed87 0b06 	vstr	d0, [r7, #24]
 8007624:	ed87 1b04 	vstr	d1, [r7, #16]
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
	switch(pidMode)
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	3b01      	subs	r3, #1
 8007630:	2b05      	cmp	r3, #5
 8007632:	f200 831b 	bhi.w	8007c6c <PID_controller+0x654>
 8007636:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <PID_controller+0x24>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007655 	.word	0x08007655
 8007640:	080076d5 	.word	0x080076d5
 8007644:	080078d5 	.word	0x080078d5
 8007648:	08007a87 	.word	0x08007a87
 800764c:	08007c01 	.word	0x08007c01
 8007650:	08007c37 	.word	0x08007c37
	{
	case 1:
		if(setpoint < 1000)
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	4b93      	ldr	r3, [pc, #588]	@ (80078a8 <PID_controller+0x290>)
 800765a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800765e:	f7f9 fa3d 	bl	8000adc <__aeabi_dcmplt>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01a      	beq.n	800769e <PID_controller+0x86>
		{
			Kp = 1.5, Ki = 0.0, Kd = 0.0;
 8007668:	4990      	ldr	r1, [pc, #576]	@ (80078ac <PID_controller+0x294>)
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	4b90      	ldr	r3, [pc, #576]	@ (80078b0 <PID_controller+0x298>)
 8007670:	e9c1 2300 	strd	r2, r3, [r1]
 8007674:	498f      	ldr	r1, [pc, #572]	@ (80078b4 <PID_controller+0x29c>)
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	e9c1 2300 	strd	r2, r3, [r1]
 8007682:	498d      	ldr	r1, [pc, #564]	@ (80078b8 <PID_controller+0x2a0>)
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007690:	498a      	ldr	r1, [pc, #552]	@ (80078bc <PID_controller+0x2a4>)
 8007692:	a37d      	add	r3, pc, #500	@ (adr r3, 8007888 <PID_controller+0x270>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	e9c1 2300 	strd	r2, r3, [r1]
//		else
//		{
//			Kp = 15, Ki = 0.0, Kd = 0.0;
//			tau = 0.1;
//		}
		break;
 800769c:	e2e6      	b.n	8007c6c <PID_controller+0x654>
			Kp = 0.2, Ki = 0.0, Kd = 0.0;
 800769e:	4983      	ldr	r1, [pc, #524]	@ (80078ac <PID_controller+0x294>)
 80076a0:	a37b      	add	r3, pc, #492	@ (adr r3, 8007890 <PID_controller+0x278>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	e9c1 2300 	strd	r2, r3, [r1]
 80076aa:	4982      	ldr	r1, [pc, #520]	@ (80078b4 <PID_controller+0x29c>)
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9c1 2300 	strd	r2, r3, [r1]
 80076b8:	497f      	ldr	r1, [pc, #508]	@ (80078b8 <PID_controller+0x2a0>)
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 80076c6:	497d      	ldr	r1, [pc, #500]	@ (80078bc <PID_controller+0x2a4>)
 80076c8:	a36f      	add	r3, pc, #444	@ (adr r3, 8007888 <PID_controller+0x270>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80076d2:	e2cb      	b.n	8007c6c <PID_controller+0x654>
	case 2:
		if(setpoint > 0 && setpoint < 120)
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	f04f 0300 	mov.w	r3, #0
 80076dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80076e0:	f7f9 fa1a 	bl	8000b18 <__aeabi_dcmpgt>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d024      	beq.n	8007734 <PID_controller+0x11c>
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	4b74      	ldr	r3, [pc, #464]	@ (80078c0 <PID_controller+0x2a8>)
 80076f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80076f4:	f7f9 f9f2 	bl	8000adc <__aeabi_dcmplt>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01a      	beq.n	8007734 <PID_controller+0x11c>
		{
			Kp = 30, Ki = 0.0, Kd = 0.0;
 80076fe:	496b      	ldr	r1, [pc, #428]	@ (80078ac <PID_controller+0x294>)
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	4b6f      	ldr	r3, [pc, #444]	@ (80078c4 <PID_controller+0x2ac>)
 8007706:	e9c1 2300 	strd	r2, r3, [r1]
 800770a:	496a      	ldr	r1, [pc, #424]	@ (80078b4 <PID_controller+0x29c>)
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	e9c1 2300 	strd	r2, r3, [r1]
 8007718:	4967      	ldr	r1, [pc, #412]	@ (80078b8 <PID_controller+0x2a0>)
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007726:	4965      	ldr	r1, [pc, #404]	@ (80078bc <PID_controller+0x2a4>)
 8007728:	a357      	add	r3, pc, #348	@ (adr r3, 8007888 <PID_controller+0x270>)
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	e9c1 2300 	strd	r2, r3, [r1]
 8007732:	e0a7      	b.n	8007884 <PID_controller+0x26c>
		}
		else if(setpoint >= 120 && setpoint < 500)
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	4b61      	ldr	r3, [pc, #388]	@ (80078c0 <PID_controller+0x2a8>)
 800773a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800773e:	f7f9 f9e1 	bl	8000b04 <__aeabi_dcmpge>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d024      	beq.n	8007792 <PID_controller+0x17a>
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	4b5e      	ldr	r3, [pc, #376]	@ (80078c8 <PID_controller+0x2b0>)
 800774e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01a      	beq.n	8007792 <PID_controller+0x17a>
		{
			Kp = 22, Ki = 0.0, Kd = 0.0;
 800775c:	4953      	ldr	r1, [pc, #332]	@ (80078ac <PID_controller+0x294>)
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	4b5a      	ldr	r3, [pc, #360]	@ (80078cc <PID_controller+0x2b4>)
 8007764:	e9c1 2300 	strd	r2, r3, [r1]
 8007768:	4952      	ldr	r1, [pc, #328]	@ (80078b4 <PID_controller+0x29c>)
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	e9c1 2300 	strd	r2, r3, [r1]
 8007776:	4950      	ldr	r1, [pc, #320]	@ (80078b8 <PID_controller+0x2a0>)
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007784:	494d      	ldr	r1, [pc, #308]	@ (80078bc <PID_controller+0x2a4>)
 8007786:	a340      	add	r3, pc, #256	@ (adr r3, 8007888 <PID_controller+0x270>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	e9c1 2300 	strd	r2, r3, [r1]
 8007790:	e078      	b.n	8007884 <PID_controller+0x26c>
		}
		else if(setpoint >= 500 && setpoint < 1000)
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	4b4c      	ldr	r3, [pc, #304]	@ (80078c8 <PID_controller+0x2b0>)
 8007798:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800779c:	f7f9 f9b2 	bl	8000b04 <__aeabi_dcmpge>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d024      	beq.n	80077f0 <PID_controller+0x1d8>
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	4b3f      	ldr	r3, [pc, #252]	@ (80078a8 <PID_controller+0x290>)
 80077ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80077b0:	f7f9 f994 	bl	8000adc <__aeabi_dcmplt>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d01a      	beq.n	80077f0 <PID_controller+0x1d8>
		{
			Kp = 15, Ki = 0.0, Kd = 0.0;
 80077ba:	493c      	ldr	r1, [pc, #240]	@ (80078ac <PID_controller+0x294>)
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	4b43      	ldr	r3, [pc, #268]	@ (80078d0 <PID_controller+0x2b8>)
 80077c2:	e9c1 2300 	strd	r2, r3, [r1]
 80077c6:	493b      	ldr	r1, [pc, #236]	@ (80078b4 <PID_controller+0x29c>)
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	e9c1 2300 	strd	r2, r3, [r1]
 80077d4:	4938      	ldr	r1, [pc, #224]	@ (80078b8 <PID_controller+0x2a0>)
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 80077e2:	4936      	ldr	r1, [pc, #216]	@ (80078bc <PID_controller+0x2a4>)
 80077e4:	a328      	add	r3, pc, #160	@ (adr r3, 8007888 <PID_controller+0x270>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	e9c1 2300 	strd	r2, r3, [r1]
 80077ee:	e049      	b.n	8007884 <PID_controller+0x26c>
		}
		else if(setpoint >= 1000 && setpoint < 2500)
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	4b2c      	ldr	r3, [pc, #176]	@ (80078a8 <PID_controller+0x290>)
 80077f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80077fa:	f7f9 f983 	bl	8000b04 <__aeabi_dcmpge>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d024      	beq.n	800784e <PID_controller+0x236>
 8007804:	a324      	add	r3, pc, #144	@ (adr r3, 8007898 <PID_controller+0x280>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800780e:	f7f9 f965 	bl	8000adc <__aeabi_dcmplt>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01a      	beq.n	800784e <PID_controller+0x236>
		{
			Kp = 1.5, Ki = 0.0, Kd = 0.0;
 8007818:	4924      	ldr	r1, [pc, #144]	@ (80078ac <PID_controller+0x294>)
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	4b24      	ldr	r3, [pc, #144]	@ (80078b0 <PID_controller+0x298>)
 8007820:	e9c1 2300 	strd	r2, r3, [r1]
 8007824:	4923      	ldr	r1, [pc, #140]	@ (80078b4 <PID_controller+0x29c>)
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	e9c1 2300 	strd	r2, r3, [r1]
 8007832:	4921      	ldr	r1, [pc, #132]	@ (80078b8 <PID_controller+0x2a0>)
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007840:	491e      	ldr	r1, [pc, #120]	@ (80078bc <PID_controller+0x2a4>)
 8007842:	a311      	add	r3, pc, #68	@ (adr r3, 8007888 <PID_controller+0x270>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	e9c1 2300 	strd	r2, r3, [r1]
 800784c:	e01a      	b.n	8007884 <PID_controller+0x26c>
		}
		else
		{
			Kp = 0.6, Ki = 0.0, Kd = 0.0;
 800784e:	4917      	ldr	r1, [pc, #92]	@ (80078ac <PID_controller+0x294>)
 8007850:	a313      	add	r3, pc, #76	@ (adr r3, 80078a0 <PID_controller+0x288>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	e9c1 2300 	strd	r2, r3, [r1]
 800785a:	4916      	ldr	r1, [pc, #88]	@ (80078b4 <PID_controller+0x29c>)
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	e9c1 2300 	strd	r2, r3, [r1]
 8007868:	4913      	ldr	r1, [pc, #76]	@ (80078b8 <PID_controller+0x2a0>)
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007876:	4911      	ldr	r1, [pc, #68]	@ (80078bc <PID_controller+0x2a4>)
 8007878:	a303      	add	r3, pc, #12	@ (adr r3, 8007888 <PID_controller+0x270>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 8007882:	e1f3      	b.n	8007c6c <PID_controller+0x654>
 8007884:	e1f2      	b.n	8007c6c <PID_controller+0x654>
 8007886:	bf00      	nop
 8007888:	9999999a 	.word	0x9999999a
 800788c:	3fb99999 	.word	0x3fb99999
 8007890:	9999999a 	.word	0x9999999a
 8007894:	3fc99999 	.word	0x3fc99999
 8007898:	00000000 	.word	0x00000000
 800789c:	40a38800 	.word	0x40a38800
 80078a0:	33333333 	.word	0x33333333
 80078a4:	3fe33333 	.word	0x3fe33333
 80078a8:	408f4000 	.word	0x408f4000
 80078ac:	200006b0 	.word	0x200006b0
 80078b0:	3ff80000 	.word	0x3ff80000
 80078b4:	200006b8 	.word	0x200006b8
 80078b8:	200006c0 	.word	0x200006c0
 80078bc:	200000d0 	.word	0x200000d0
 80078c0:	405e0000 	.word	0x405e0000
 80078c4:	403e0000 	.word	0x403e0000
 80078c8:	407f4000 	.word	0x407f4000
 80078cc:	40360000 	.word	0x40360000
 80078d0:	402e0000 	.word	0x402e0000
	case 3:
		if(setpoint >= 0 && setpoint < 100)
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80078e0:	f7f9 f910 	bl	8000b04 <__aeabi_dcmpge>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d024      	beq.n	8007934 <PID_controller+0x31c>
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	4ba0      	ldr	r3, [pc, #640]	@ (8007b70 <PID_controller+0x558>)
 80078f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80078f4:	f7f9 f8f2 	bl	8000adc <__aeabi_dcmplt>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01a      	beq.n	8007934 <PID_controller+0x31c>
		{
			Kp = 40.0, Ki = 0.0, Kd = 0.0;
 80078fe:	499d      	ldr	r1, [pc, #628]	@ (8007b74 <PID_controller+0x55c>)
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	4b9c      	ldr	r3, [pc, #624]	@ (8007b78 <PID_controller+0x560>)
 8007906:	e9c1 2300 	strd	r2, r3, [r1]
 800790a:	499c      	ldr	r1, [pc, #624]	@ (8007b7c <PID_controller+0x564>)
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	e9c1 2300 	strd	r2, r3, [r1]
 8007918:	4999      	ldr	r1, [pc, #612]	@ (8007b80 <PID_controller+0x568>)
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007926:	4997      	ldr	r1, [pc, #604]	@ (8007b84 <PID_controller+0x56c>)
 8007928:	a38d      	add	r3, pc, #564	@ (adr r3, 8007b60 <PID_controller+0x548>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	e9c1 2300 	strd	r2, r3, [r1]
 8007932:	e0a7      	b.n	8007a84 <PID_controller+0x46c>
		}
		else if(setpoint >= 100 && setpoint < 250)
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	4b8d      	ldr	r3, [pc, #564]	@ (8007b70 <PID_controller+0x558>)
 800793a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800793e:	f7f9 f8e1 	bl	8000b04 <__aeabi_dcmpge>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d024      	beq.n	8007992 <PID_controller+0x37a>
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	4b8e      	ldr	r3, [pc, #568]	@ (8007b88 <PID_controller+0x570>)
 800794e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007952:	f7f9 f8c3 	bl	8000adc <__aeabi_dcmplt>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01a      	beq.n	8007992 <PID_controller+0x37a>
		{
			Kp = 15.0, Ki = 0.0, Kd = 0.0;
 800795c:	4985      	ldr	r1, [pc, #532]	@ (8007b74 <PID_controller+0x55c>)
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	4b8a      	ldr	r3, [pc, #552]	@ (8007b8c <PID_controller+0x574>)
 8007964:	e9c1 2300 	strd	r2, r3, [r1]
 8007968:	4984      	ldr	r1, [pc, #528]	@ (8007b7c <PID_controller+0x564>)
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	f04f 0300 	mov.w	r3, #0
 8007972:	e9c1 2300 	strd	r2, r3, [r1]
 8007976:	4982      	ldr	r1, [pc, #520]	@ (8007b80 <PID_controller+0x568>)
 8007978:	f04f 0200 	mov.w	r2, #0
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007984:	497f      	ldr	r1, [pc, #508]	@ (8007b84 <PID_controller+0x56c>)
 8007986:	a376      	add	r3, pc, #472	@ (adr r3, 8007b60 <PID_controller+0x548>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	e9c1 2300 	strd	r2, r3, [r1]
 8007990:	e078      	b.n	8007a84 <PID_controller+0x46c>
		}
		else if(setpoint >= 250 && setpoint < 750)
 8007992:	f04f 0200 	mov.w	r2, #0
 8007996:	4b7c      	ldr	r3, [pc, #496]	@ (8007b88 <PID_controller+0x570>)
 8007998:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800799c:	f7f9 f8b2 	bl	8000b04 <__aeabi_dcmpge>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d024      	beq.n	80079f0 <PID_controller+0x3d8>
 80079a6:	f04f 0200 	mov.w	r2, #0
 80079aa:	4b79      	ldr	r3, [pc, #484]	@ (8007b90 <PID_controller+0x578>)
 80079ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80079b0:	f7f9 f894 	bl	8000adc <__aeabi_dcmplt>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01a      	beq.n	80079f0 <PID_controller+0x3d8>
		{
			Kp = 5.0, Ki = 0.0, Kd = 0.0;
 80079ba:	496e      	ldr	r1, [pc, #440]	@ (8007b74 <PID_controller+0x55c>)
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	4b74      	ldr	r3, [pc, #464]	@ (8007b94 <PID_controller+0x57c>)
 80079c2:	e9c1 2300 	strd	r2, r3, [r1]
 80079c6:	496d      	ldr	r1, [pc, #436]	@ (8007b7c <PID_controller+0x564>)
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	e9c1 2300 	strd	r2, r3, [r1]
 80079d4:	496a      	ldr	r1, [pc, #424]	@ (8007b80 <PID_controller+0x568>)
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 80079e2:	4968      	ldr	r1, [pc, #416]	@ (8007b84 <PID_controller+0x56c>)
 80079e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8007b60 <PID_controller+0x548>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	e9c1 2300 	strd	r2, r3, [r1]
 80079ee:	e049      	b.n	8007a84 <PID_controller+0x46c>
		}
		else if(setpoint >= 750 && setpoint < 1250)
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	4b66      	ldr	r3, [pc, #408]	@ (8007b90 <PID_controller+0x578>)
 80079f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80079fa:	f7f9 f883 	bl	8000b04 <__aeabi_dcmpge>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d024      	beq.n	8007a4e <PID_controller+0x436>
 8007a04:	a358      	add	r3, pc, #352	@ (adr r3, 8007b68 <PID_controller+0x550>)
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a0e:	f7f9 f865 	bl	8000adc <__aeabi_dcmplt>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01a      	beq.n	8007a4e <PID_controller+0x436>
		{
			Kp = 3.0, Ki = 0.0, Kd = 0.0;
 8007a18:	4956      	ldr	r1, [pc, #344]	@ (8007b74 <PID_controller+0x55c>)
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8007b98 <PID_controller+0x580>)
 8007a20:	e9c1 2300 	strd	r2, r3, [r1]
 8007a24:	4955      	ldr	r1, [pc, #340]	@ (8007b7c <PID_controller+0x564>)
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	e9c1 2300 	strd	r2, r3, [r1]
 8007a32:	4953      	ldr	r1, [pc, #332]	@ (8007b80 <PID_controller+0x568>)
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007a40:	4950      	ldr	r1, [pc, #320]	@ (8007b84 <PID_controller+0x56c>)
 8007a42:	a347      	add	r3, pc, #284	@ (adr r3, 8007b60 <PID_controller+0x548>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	e9c1 2300 	strd	r2, r3, [r1]
 8007a4c:	e01a      	b.n	8007a84 <PID_controller+0x46c>
		}
		else
		{
			Kp = 1.2, Ki = 0.0, Kd = 0.0;
 8007a4e:	4949      	ldr	r1, [pc, #292]	@ (8007b74 <PID_controller+0x55c>)
 8007a50:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8007a54:	4b51      	ldr	r3, [pc, #324]	@ (8007b9c <PID_controller+0x584>)
 8007a56:	e9c1 2300 	strd	r2, r3, [r1]
 8007a5a:	4948      	ldr	r1, [pc, #288]	@ (8007b7c <PID_controller+0x564>)
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	f04f 0300 	mov.w	r3, #0
 8007a64:	e9c1 2300 	strd	r2, r3, [r1]
 8007a68:	4945      	ldr	r1, [pc, #276]	@ (8007b80 <PID_controller+0x568>)
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007a76:	4943      	ldr	r1, [pc, #268]	@ (8007b84 <PID_controller+0x56c>)
 8007a78:	a339      	add	r3, pc, #228	@ (adr r3, 8007b60 <PID_controller+0x548>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 8007a82:	e0f3      	b.n	8007c6c <PID_controller+0x654>
 8007a84:	e0f2      	b.n	8007c6c <PID_controller+0x654>
	case 4:
		if(setpoint < 100)
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	4b39      	ldr	r3, [pc, #228]	@ (8007b70 <PID_controller+0x558>)
 8007a8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a90:	f7f9 f824 	bl	8000adc <__aeabi_dcmplt>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d02c      	beq.n	8007af4 <PID_controller+0x4dc>
		{
			Kp = 500/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8007a9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007aa2:	f7f8 fbf1 	bl	8000288 <__aeabi_dsub>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	603a      	str	r2, [r7, #0]
 8007aac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ab0:	607b      	str	r3, [r7, #4]
 8007ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab6:	f04f 0000 	mov.w	r0, #0
 8007aba:	4939      	ldr	r1, [pc, #228]	@ (8007ba0 <PID_controller+0x588>)
 8007abc:	f7f8 fec6 	bl	800084c <__aeabi_ddiv>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	492b      	ldr	r1, [pc, #172]	@ (8007b74 <PID_controller+0x55c>)
 8007ac6:	e9c1 2300 	strd	r2, r3, [r1]
 8007aca:	492c      	ldr	r1, [pc, #176]	@ (8007b7c <PID_controller+0x564>)
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	e9c1 2300 	strd	r2, r3, [r1]
 8007ad8:	4929      	ldr	r1, [pc, #164]	@ (8007b80 <PID_controller+0x568>)
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007ae6:	4927      	ldr	r1, [pc, #156]	@ (8007b84 <PID_controller+0x56c>)
 8007ae8:	a31d      	add	r3, pc, #116	@ (adr r3, 8007b60 <PID_controller+0x548>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	e9c1 2300 	strd	r2, r3, [r1]
		else
		{
			Kp = 2400/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
			tau = 0.1;
		}
		break;
 8007af2:	e0bb      	b.n	8007c6c <PID_controller+0x654>
		else if(setpoint < 500)
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	4b29      	ldr	r3, [pc, #164]	@ (8007ba0 <PID_controller+0x588>)
 8007afa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007afe:	f7f8 ffed 	bl	8000adc <__aeabi_dcmplt>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d04f      	beq.n	8007ba8 <PID_controller+0x590>
			Kp = 1200/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8007b08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b10:	f7f8 fbba 	bl	8000288 <__aeabi_dsub>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4692      	mov	sl, r2
 8007b1a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8007b1e:	4652      	mov	r2, sl
 8007b20:	465b      	mov	r3, fp
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	491f      	ldr	r1, [pc, #124]	@ (8007ba4 <PID_controller+0x58c>)
 8007b28:	f7f8 fe90 	bl	800084c <__aeabi_ddiv>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4910      	ldr	r1, [pc, #64]	@ (8007b74 <PID_controller+0x55c>)
 8007b32:	e9c1 2300 	strd	r2, r3, [r1]
 8007b36:	4911      	ldr	r1, [pc, #68]	@ (8007b7c <PID_controller+0x564>)
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	e9c1 2300 	strd	r2, r3, [r1]
 8007b44:	490e      	ldr	r1, [pc, #56]	@ (8007b80 <PID_controller+0x568>)
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007b52:	490c      	ldr	r1, [pc, #48]	@ (8007b84 <PID_controller+0x56c>)
 8007b54:	a302      	add	r3, pc, #8	@ (adr r3, 8007b60 <PID_controller+0x548>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8007b5e:	e085      	b.n	8007c6c <PID_controller+0x654>
 8007b60:	9999999a 	.word	0x9999999a
 8007b64:	3fb99999 	.word	0x3fb99999
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	40938800 	.word	0x40938800
 8007b70:	40590000 	.word	0x40590000
 8007b74:	200006b0 	.word	0x200006b0
 8007b78:	40440000 	.word	0x40440000
 8007b7c:	200006b8 	.word	0x200006b8
 8007b80:	200006c0 	.word	0x200006c0
 8007b84:	200000d0 	.word	0x200000d0
 8007b88:	406f4000 	.word	0x406f4000
 8007b8c:	402e0000 	.word	0x402e0000
 8007b90:	40877000 	.word	0x40877000
 8007b94:	40140000 	.word	0x40140000
 8007b98:	40080000 	.word	0x40080000
 8007b9c:	3ff33333 	.word	0x3ff33333
 8007ba0:	407f4000 	.word	0x407f4000
 8007ba4:	4092c000 	.word	0x4092c000
			Kp = 2400/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8007ba8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bb0:	f7f8 fb6a 	bl	8000288 <__aeabi_dsub>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4690      	mov	r8, r2
 8007bba:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007bbe:	4642      	mov	r2, r8
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	f04f 0000 	mov.w	r0, #0
 8007bc6:	4992      	ldr	r1, [pc, #584]	@ (8007e10 <PID_controller+0x7f8>)
 8007bc8:	f7f8 fe40 	bl	800084c <__aeabi_ddiv>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4990      	ldr	r1, [pc, #576]	@ (8007e14 <PID_controller+0x7fc>)
 8007bd2:	e9c1 2300 	strd	r2, r3, [r1]
 8007bd6:	4990      	ldr	r1, [pc, #576]	@ (8007e18 <PID_controller+0x800>)
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	e9c1 2300 	strd	r2, r3, [r1]
 8007be4:	498d      	ldr	r1, [pc, #564]	@ (8007e1c <PID_controller+0x804>)
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8007bf2:	498b      	ldr	r1, [pc, #556]	@ (8007e20 <PID_controller+0x808>)
 8007bf4:	a382      	add	r3, pc, #520	@ (adr r3, 8007e00 <PID_controller+0x7e8>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8007bfe:	e035      	b.n	8007c6c <PID_controller+0x654>
	case 5:
		Kp = 2.0, Ki = 0.1, Kd = 0.0;
 8007c00:	4984      	ldr	r1, [pc, #528]	@ (8007e14 <PID_controller+0x7fc>)
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c0a:	e9c1 2300 	strd	r2, r3, [r1]
 8007c0e:	4982      	ldr	r1, [pc, #520]	@ (8007e18 <PID_controller+0x800>)
 8007c10:	a37b      	add	r3, pc, #492	@ (adr r3, 8007e00 <PID_controller+0x7e8>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	e9c1 2300 	strd	r2, r3, [r1]
 8007c1a:	4980      	ldr	r1, [pc, #512]	@ (8007e1c <PID_controller+0x804>)
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 8007c28:	497d      	ldr	r1, [pc, #500]	@ (8007e20 <PID_controller+0x808>)
 8007c2a:	a375      	add	r3, pc, #468	@ (adr r3, 8007e00 <PID_controller+0x7e8>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8007c34:	e01a      	b.n	8007c6c <PID_controller+0x654>
	case 6:
		Kp = 0.4, Ki = 0.0, Kd = 0.0;
 8007c36:	4977      	ldr	r1, [pc, #476]	@ (8007e14 <PID_controller+0x7fc>)
 8007c38:	a373      	add	r3, pc, #460	@ (adr r3, 8007e08 <PID_controller+0x7f0>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	e9c1 2300 	strd	r2, r3, [r1]
 8007c42:	4975      	ldr	r1, [pc, #468]	@ (8007e18 <PID_controller+0x800>)
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	e9c1 2300 	strd	r2, r3, [r1]
 8007c50:	4972      	ldr	r1, [pc, #456]	@ (8007e1c <PID_controller+0x804>)
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 8007c5e:	4970      	ldr	r1, [pc, #448]	@ (8007e20 <PID_controller+0x808>)
 8007c60:	a367      	add	r3, pc, #412	@ (adr r3, 8007e00 <PID_controller+0x7e8>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8007c6a:	bf00      	nop
	}
    double error = setpoint - actual_position;
 8007c6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c74:	f7f8 fb08 	bl	8000288 <__aeabi_dsub>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Proportional
    double proportional = Kp * error;
 8007c80:	4b64      	ldr	r3, [pc, #400]	@ (8007e14 <PID_controller+0x7fc>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007c8a:	f7f8 fcb5 	bl	80005f8 <__aeabi_dmul>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Integral
    integral = integral + 0.5 * Ki * T * (error + prev_error);
 8007c96:	4b60      	ldr	r3, [pc, #384]	@ (8007e18 <PID_controller+0x800>)
 8007c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	4b60      	ldr	r3, [pc, #384]	@ (8007e24 <PID_controller+0x80c>)
 8007ca2:	f7f8 fca9 	bl	80005f8 <__aeabi_dmul>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	4b5e      	ldr	r3, [pc, #376]	@ (8007e28 <PID_controller+0x810>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fca0 	bl	80005f8 <__aeabi_dmul>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4690      	mov	r8, r2
 8007cbe:	4699      	mov	r9, r3
 8007cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8007e2c <PID_controller+0x814>)
 8007cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007cca:	f7f8 fadf 	bl	800028c <__adddf3>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	f7f8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4b53      	ldr	r3, [pc, #332]	@ (8007e30 <PID_controller+0x818>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f7f8 fad0 	bl	800028c <__adddf3>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	494f      	ldr	r1, [pc, #316]	@ (8007e30 <PID_controller+0x818>)
 8007cf2:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = -(2.0 * Kd * (actual_position - prevMeasurement) + (2.0 * tau - T) * derivative) / (2.0 * tau + T);
 8007cf6:	4b49      	ldr	r3, [pc, #292]	@ (8007e1c <PID_controller+0x804>)
 8007cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	f7f8 fac4 	bl	800028c <__adddf3>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4690      	mov	r8, r2
 8007d0a:	4699      	mov	r9, r3
 8007d0c:	4b49      	ldr	r3, [pc, #292]	@ (8007e34 <PID_controller+0x81c>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d16:	f7f8 fab7 	bl	8000288 <__aeabi_dsub>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4649      	mov	r1, r9
 8007d22:	f7f8 fc69 	bl	80005f8 <__aeabi_dmul>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4690      	mov	r8, r2
 8007d2c:	4699      	mov	r9, r3
 8007d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8007e20 <PID_controller+0x808>)
 8007d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	f7f8 faa8 	bl	800028c <__adddf3>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	4b38      	ldr	r3, [pc, #224]	@ (8007e28 <PID_controller+0x810>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fa9d 	bl	8000288 <__aeabi_dsub>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	4b38      	ldr	r3, [pc, #224]	@ (8007e38 <PID_controller+0x820>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f7f8 fc4c 	bl	80005f8 <__aeabi_dmul>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 fa90 	bl	800028c <__adddf3>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4614      	mov	r4, r2
 8007d72:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007d76:	4b2a      	ldr	r3, [pc, #168]	@ (8007e20 <PID_controller+0x808>)
 8007d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	f7f8 fa84 	bl	800028c <__adddf3>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4b26      	ldr	r3, [pc, #152]	@ (8007e28 <PID_controller+0x810>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f7f8 fa7b 	bl	800028c <__adddf3>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	f7f8 fd55 	bl	800084c <__aeabi_ddiv>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4924      	ldr	r1, [pc, #144]	@ (8007e38 <PID_controller+0x820>)
 8007da8:	e9c1 2300 	strd	r2, r3, [r1]

    double output = proportional + integral + derivative;
 8007dac:	4b20      	ldr	r3, [pc, #128]	@ (8007e30 <PID_controller+0x818>)
 8007dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007db6:	f7f8 fa69 	bl	800028c <__adddf3>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e38 <PID_controller+0x820>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fa60 	bl	800028c <__adddf3>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	e9c7 2308 	strd	r2, r3, [r7, #32]

    prev_error = error;
 8007dd4:	4915      	ldr	r1, [pc, #84]	@ (8007e2c <PID_controller+0x814>)
 8007dd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007dda:	e9c1 2300 	strd	r2, r3, [r1]
	prevMeasurement = actual_position;
 8007dde:	4915      	ldr	r1, [pc, #84]	@ (8007e34 <PID_controller+0x81c>)
 8007de0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007de4:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 8007de8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dec:	ec43 2b17 	vmov	d7, r2, r3
}
 8007df0:	eeb0 0a47 	vmov.f32	s0, s14
 8007df4:	eef0 0a67 	vmov.f32	s1, s15
 8007df8:	3738      	adds	r7, #56	@ 0x38
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e00:	9999999a 	.word	0x9999999a
 8007e04:	3fb99999 	.word	0x3fb99999
 8007e08:	9999999a 	.word	0x9999999a
 8007e0c:	3fd99999 	.word	0x3fd99999
 8007e10:	40a2c000 	.word	0x40a2c000
 8007e14:	200006b0 	.word	0x200006b0
 8007e18:	200006b8 	.word	0x200006b8
 8007e1c:	200006c0 	.word	0x200006c0
 8007e20:	200000d0 	.word	0x200000d0
 8007e24:	3fe00000 	.word	0x3fe00000
 8007e28:	200000d8 	.word	0x200000d8
 8007e2c:	200006a0 	.word	0x200006a0
 8007e30:	20000690 	.word	0x20000690
 8007e34:	200006a8 	.word	0x200006a8
 8007e38:	20000698 	.word	0x20000698
 8007e3c:	00000000 	.word	0x00000000

08007e40 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, uint8_t pidMode)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08a      	sub	sp, #40	@ 0x28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	ed87 0b04 	vstr	d0, [r7, #16]
 8007e4a:	ed87 1b02 	vstr	d1, [r7, #8]
 8007e4e:	4603      	mov	r3, r0
 8007e50:	71fb      	strb	r3, [r7, #7]
	double error, P;
	switch(pidMode)
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	f200 84ca 	bhi.w	80087f0 <PID_controllerH+0x9b0>
 8007e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <PID_controllerH+0x24>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	0800806b 	.word	0x0800806b
 8007e6c:	080082f1 	.word	0x080082f1
 8007e70:	08008573 	.word	0x08008573
	{
	case 1:
		if(setpoint >= 30 && setpoint < 45){Kp = 0.43;}
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	4ba5      	ldr	r3, [pc, #660]	@ (8008110 <PID_controllerH+0x2d0>)
 8007e7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e7e:	f7f8 fe41 	bl	8000b04 <__aeabi_dcmpge>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d010      	beq.n	8007eaa <PID_controllerH+0x6a>
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8008114 <PID_controllerH+0x2d4>)
 8007e8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e92:	f7f8 fe23 	bl	8000adc <__aeabi_dcmplt>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d006      	beq.n	8007eaa <PID_controllerH+0x6a>
 8007e9c:	499e      	ldr	r1, [pc, #632]	@ (8008118 <PID_controllerH+0x2d8>)
 8007e9e:	a380      	add	r3, pc, #512	@ (adr r3, 80080a0 <PID_controllerH+0x260>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	e9c1 2300 	strd	r2, r3, [r1]
 8007ea8:	e0de      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 45 && setpoint < 60){Kp = 0.33;}
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	4b99      	ldr	r3, [pc, #612]	@ (8008114 <PID_controllerH+0x2d4>)
 8007eb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eb4:	f7f8 fe26 	bl	8000b04 <__aeabi_dcmpge>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d010      	beq.n	8007ee0 <PID_controllerH+0xa0>
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	4b96      	ldr	r3, [pc, #600]	@ (800811c <PID_controllerH+0x2dc>)
 8007ec4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ec8:	f7f8 fe08 	bl	8000adc <__aeabi_dcmplt>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d006      	beq.n	8007ee0 <PID_controllerH+0xa0>
 8007ed2:	4991      	ldr	r1, [pc, #580]	@ (8008118 <PID_controllerH+0x2d8>)
 8007ed4:	a374      	add	r3, pc, #464	@ (adr r3, 80080a8 <PID_controllerH+0x268>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	e9c1 2300 	strd	r2, r3, [r1]
 8007ede:	e0c3      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 60 && setpoint < 75){Kp = 0.28;}
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800811c <PID_controllerH+0x2dc>)
 8007ee6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eea:	f7f8 fe0b 	bl	8000b04 <__aeabi_dcmpge>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d010      	beq.n	8007f16 <PID_controllerH+0xd6>
 8007ef4:	a36e      	add	r3, pc, #440	@ (adr r3, 80080b0 <PID_controllerH+0x270>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007efe:	f7f8 fded 	bl	8000adc <__aeabi_dcmplt>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <PID_controllerH+0xd6>
 8007f08:	4983      	ldr	r1, [pc, #524]	@ (8008118 <PID_controllerH+0x2d8>)
 8007f0a:	a36b      	add	r3, pc, #428	@ (adr r3, 80080b8 <PID_controllerH+0x278>)
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	e9c1 2300 	strd	r2, r3, [r1]
 8007f14:	e0a8      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 75 && setpoint < 90){Kp = 0.24;}
 8007f16:	a366      	add	r3, pc, #408	@ (adr r3, 80080b0 <PID_controllerH+0x270>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f20:	f7f8 fdf0 	bl	8000b04 <__aeabi_dcmpge>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d010      	beq.n	8007f4c <PID_controllerH+0x10c>
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8008120 <PID_controllerH+0x2e0>)
 8007f30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f34:	f7f8 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d006      	beq.n	8007f4c <PID_controllerH+0x10c>
 8007f3e:	4976      	ldr	r1, [pc, #472]	@ (8008118 <PID_controllerH+0x2d8>)
 8007f40:	a35f      	add	r3, pc, #380	@ (adr r3, 80080c0 <PID_controllerH+0x280>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	e9c1 2300 	strd	r2, r3, [r1]
 8007f4a:	e08d      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 90 && setpoint < 105){Kp = 0.2;}
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	4b73      	ldr	r3, [pc, #460]	@ (8008120 <PID_controllerH+0x2e0>)
 8007f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f56:	f7f8 fdd5 	bl	8000b04 <__aeabi_dcmpge>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d010      	beq.n	8007f82 <PID_controllerH+0x142>
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	4b6f      	ldr	r3, [pc, #444]	@ (8008124 <PID_controllerH+0x2e4>)
 8007f66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f6a:	f7f8 fdb7 	bl	8000adc <__aeabi_dcmplt>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <PID_controllerH+0x142>
 8007f74:	4968      	ldr	r1, [pc, #416]	@ (8008118 <PID_controllerH+0x2d8>)
 8007f76:	a354      	add	r3, pc, #336	@ (adr r3, 80080c8 <PID_controllerH+0x288>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	e9c1 2300 	strd	r2, r3, [r1]
 8007f80:	e072      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 105 && setpoint < 120){Kp = 0.18;}
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	4b67      	ldr	r3, [pc, #412]	@ (8008124 <PID_controllerH+0x2e4>)
 8007f88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f8c:	f7f8 fdba 	bl	8000b04 <__aeabi_dcmpge>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d010      	beq.n	8007fb8 <PID_controllerH+0x178>
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	4b63      	ldr	r3, [pc, #396]	@ (8008128 <PID_controllerH+0x2e8>)
 8007f9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fa0:	f7f8 fd9c 	bl	8000adc <__aeabi_dcmplt>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d006      	beq.n	8007fb8 <PID_controllerH+0x178>
 8007faa:	495b      	ldr	r1, [pc, #364]	@ (8008118 <PID_controllerH+0x2d8>)
 8007fac:	a348      	add	r3, pc, #288	@ (adr r3, 80080d0 <PID_controllerH+0x290>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	e9c1 2300 	strd	r2, r3, [r1]
 8007fb6:	e057      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 120 && setpoint < 135){Kp = 0.14;}
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8008128 <PID_controllerH+0x2e8>)
 8007fbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fc2:	f7f8 fd9f 	bl	8000b04 <__aeabi_dcmpge>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d010      	beq.n	8007fee <PID_controllerH+0x1ae>
 8007fcc:	a342      	add	r3, pc, #264	@ (adr r3, 80080d8 <PID_controllerH+0x298>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fd6:	f7f8 fd81 	bl	8000adc <__aeabi_dcmplt>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d006      	beq.n	8007fee <PID_controllerH+0x1ae>
 8007fe0:	494d      	ldr	r1, [pc, #308]	@ (8008118 <PID_controllerH+0x2d8>)
 8007fe2:	a33f      	add	r3, pc, #252	@ (adr r3, 80080e0 <PID_controllerH+0x2a0>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	e9c1 2300 	strd	r2, r3, [r1]
 8007fec:	e03c      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 135 && setpoint < 150){Kp = 0.12;}
 8007fee:	a33a      	add	r3, pc, #232	@ (adr r3, 80080d8 <PID_controllerH+0x298>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ff8:	f7f8 fd84 	bl	8000b04 <__aeabi_dcmpge>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d010      	beq.n	8008024 <PID_controllerH+0x1e4>
 8008002:	a339      	add	r3, pc, #228	@ (adr r3, 80080e8 <PID_controllerH+0x2a8>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800800c:	f7f8 fd66 	bl	8000adc <__aeabi_dcmplt>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d006      	beq.n	8008024 <PID_controllerH+0x1e4>
 8008016:	4940      	ldr	r1, [pc, #256]	@ (8008118 <PID_controllerH+0x2d8>)
 8008018:	a335      	add	r3, pc, #212	@ (adr r3, 80080f0 <PID_controllerH+0x2b0>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	e9c1 2300 	strd	r2, r3, [r1]
 8008022:	e021      	b.n	8008068 <PID_controllerH+0x228>
		else if(setpoint >= 150 && setpoint < 180){Kp = 0.1;}
 8008024:	a330      	add	r3, pc, #192	@ (adr r3, 80080e8 <PID_controllerH+0x2a8>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800802e:	f7f8 fd69 	bl	8000b04 <__aeabi_dcmpge>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d010      	beq.n	800805a <PID_controllerH+0x21a>
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	4b3b      	ldr	r3, [pc, #236]	@ (800812c <PID_controllerH+0x2ec>)
 800803e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008042:	f7f8 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d006      	beq.n	800805a <PID_controllerH+0x21a>
 800804c:	4932      	ldr	r1, [pc, #200]	@ (8008118 <PID_controllerH+0x2d8>)
 800804e:	a32a      	add	r3, pc, #168	@ (adr r3, 80080f8 <PID_controllerH+0x2b8>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	e9c1 2300 	strd	r2, r3, [r1]
 8008058:	e006      	b.n	8008068 <PID_controllerH+0x228>
		else{Kp = 0.56;}
 800805a:	492f      	ldr	r1, [pc, #188]	@ (8008118 <PID_controllerH+0x2d8>)
 800805c:	a328      	add	r3, pc, #160	@ (adr r3, 8008100 <PID_controllerH+0x2c0>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8008066:	e3c3      	b.n	80087f0 <PID_controllerH+0x9b0>
 8008068:	e3c2      	b.n	80087f0 <PID_controllerH+0x9b0>
	case 2:
		if(setpoint >= 30 && setpoint < 45){Kp = 0.83;}
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	4b28      	ldr	r3, [pc, #160]	@ (8008110 <PID_controllerH+0x2d0>)
 8008070:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008074:	f7f8 fd46 	bl	8000b04 <__aeabi_dcmpge>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d058      	beq.n	8008130 <PID_controllerH+0x2f0>
 800807e:	f04f 0200 	mov.w	r2, #0
 8008082:	4b24      	ldr	r3, [pc, #144]	@ (8008114 <PID_controllerH+0x2d4>)
 8008084:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008088:	f7f8 fd28 	bl	8000adc <__aeabi_dcmplt>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d04e      	beq.n	8008130 <PID_controllerH+0x2f0>
 8008092:	4921      	ldr	r1, [pc, #132]	@ (8008118 <PID_controllerH+0x2d8>)
 8008094:	a31c      	add	r3, pc, #112	@ (adr r3, 8008108 <PID_controllerH+0x2c8>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	e9c1 2300 	strd	r2, r3, [r1]
 800809e:	e126      	b.n	80082ee <PID_controllerH+0x4ae>
 80080a0:	b851eb85 	.word	0xb851eb85
 80080a4:	3fdb851e 	.word	0x3fdb851e
 80080a8:	51eb851f 	.word	0x51eb851f
 80080ac:	3fd51eb8 	.word	0x3fd51eb8
 80080b0:	00000000 	.word	0x00000000
 80080b4:	4052c000 	.word	0x4052c000
 80080b8:	1eb851ec 	.word	0x1eb851ec
 80080bc:	3fd1eb85 	.word	0x3fd1eb85
 80080c0:	eb851eb8 	.word	0xeb851eb8
 80080c4:	3fceb851 	.word	0x3fceb851
 80080c8:	9999999a 	.word	0x9999999a
 80080cc:	3fc99999 	.word	0x3fc99999
 80080d0:	70a3d70a 	.word	0x70a3d70a
 80080d4:	3fc70a3d 	.word	0x3fc70a3d
 80080d8:	00000000 	.word	0x00000000
 80080dc:	4060e000 	.word	0x4060e000
 80080e0:	1eb851ec 	.word	0x1eb851ec
 80080e4:	3fc1eb85 	.word	0x3fc1eb85
 80080e8:	00000000 	.word	0x00000000
 80080ec:	4062c000 	.word	0x4062c000
 80080f0:	eb851eb8 	.word	0xeb851eb8
 80080f4:	3fbeb851 	.word	0x3fbeb851
 80080f8:	9999999a 	.word	0x9999999a
 80080fc:	3fb99999 	.word	0x3fb99999
 8008100:	1eb851ec 	.word	0x1eb851ec
 8008104:	3fe1eb85 	.word	0x3fe1eb85
 8008108:	28f5c28f 	.word	0x28f5c28f
 800810c:	3fea8f5c 	.word	0x3fea8f5c
 8008110:	403e0000 	.word	0x403e0000
 8008114:	40468000 	.word	0x40468000
 8008118:	200006b0 	.word	0x200006b0
 800811c:	404e0000 	.word	0x404e0000
 8008120:	40568000 	.word	0x40568000
 8008124:	405a4000 	.word	0x405a4000
 8008128:	405e0000 	.word	0x405e0000
 800812c:	40668000 	.word	0x40668000
		else if(setpoint >= 45 && setpoint < 60){Kp = 0.75;}
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	4ba2      	ldr	r3, [pc, #648]	@ (80083c0 <PID_controllerH+0x580>)
 8008136:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800813a:	f7f8 fce3 	bl	8000b04 <__aeabi_dcmpge>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d010      	beq.n	8008166 <PID_controllerH+0x326>
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	4b9e      	ldr	r3, [pc, #632]	@ (80083c4 <PID_controllerH+0x584>)
 800814a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800814e:	f7f8 fcc5 	bl	8000adc <__aeabi_dcmplt>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d006      	beq.n	8008166 <PID_controllerH+0x326>
 8008158:	499b      	ldr	r1, [pc, #620]	@ (80083c8 <PID_controllerH+0x588>)
 800815a:	f04f 0200 	mov.w	r2, #0
 800815e:	4b9b      	ldr	r3, [pc, #620]	@ (80083cc <PID_controllerH+0x58c>)
 8008160:	e9c1 2300 	strd	r2, r3, [r1]
 8008164:	e0c3      	b.n	80082ee <PID_controllerH+0x4ae>
		else if(setpoint >= 60 && setpoint < 75){Kp = 0.68;}
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	4b96      	ldr	r3, [pc, #600]	@ (80083c4 <PID_controllerH+0x584>)
 800816c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008170:	f7f8 fcc8 	bl	8000b04 <__aeabi_dcmpge>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <PID_controllerH+0x35c>
 800817a:	a379      	add	r3, pc, #484	@ (adr r3, 8008360 <PID_controllerH+0x520>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008184:	f7f8 fcaa 	bl	8000adc <__aeabi_dcmplt>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d006      	beq.n	800819c <PID_controllerH+0x35c>
 800818e:	498e      	ldr	r1, [pc, #568]	@ (80083c8 <PID_controllerH+0x588>)
 8008190:	a375      	add	r3, pc, #468	@ (adr r3, 8008368 <PID_controllerH+0x528>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	e9c1 2300 	strd	r2, r3, [r1]
 800819a:	e0a8      	b.n	80082ee <PID_controllerH+0x4ae>
		else if(setpoint >= 75 && setpoint < 90){Kp = 0.6;}
 800819c:	a370      	add	r3, pc, #448	@ (adr r3, 8008360 <PID_controllerH+0x520>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081a6:	f7f8 fcad 	bl	8000b04 <__aeabi_dcmpge>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d010      	beq.n	80081d2 <PID_controllerH+0x392>
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	4b86      	ldr	r3, [pc, #536]	@ (80083d0 <PID_controllerH+0x590>)
 80081b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081ba:	f7f8 fc8f 	bl	8000adc <__aeabi_dcmplt>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <PID_controllerH+0x392>
 80081c4:	4980      	ldr	r1, [pc, #512]	@ (80083c8 <PID_controllerH+0x588>)
 80081c6:	a36a      	add	r3, pc, #424	@ (adr r3, 8008370 <PID_controllerH+0x530>)
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	e9c1 2300 	strd	r2, r3, [r1]
 80081d0:	e08d      	b.n	80082ee <PID_controllerH+0x4ae>
		else if(setpoint >= 90 && setpoint < 105){Kp = 0.52;}
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	4b7e      	ldr	r3, [pc, #504]	@ (80083d0 <PID_controllerH+0x590>)
 80081d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081dc:	f7f8 fc92 	bl	8000b04 <__aeabi_dcmpge>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d010      	beq.n	8008208 <PID_controllerH+0x3c8>
 80081e6:	f04f 0200 	mov.w	r2, #0
 80081ea:	4b7a      	ldr	r3, [pc, #488]	@ (80083d4 <PID_controllerH+0x594>)
 80081ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081f0:	f7f8 fc74 	bl	8000adc <__aeabi_dcmplt>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d006      	beq.n	8008208 <PID_controllerH+0x3c8>
 80081fa:	4973      	ldr	r1, [pc, #460]	@ (80083c8 <PID_controllerH+0x588>)
 80081fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008378 <PID_controllerH+0x538>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	e9c1 2300 	strd	r2, r3, [r1]
 8008206:	e072      	b.n	80082ee <PID_controllerH+0x4ae>
		else if(setpoint >= 105 && setpoint < 120){Kp = 0.45;}
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	4b71      	ldr	r3, [pc, #452]	@ (80083d4 <PID_controllerH+0x594>)
 800820e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008212:	f7f8 fc77 	bl	8000b04 <__aeabi_dcmpge>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d010      	beq.n	800823e <PID_controllerH+0x3fe>
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	4b6d      	ldr	r3, [pc, #436]	@ (80083d8 <PID_controllerH+0x598>)
 8008222:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008226:	f7f8 fc59 	bl	8000adc <__aeabi_dcmplt>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d006      	beq.n	800823e <PID_controllerH+0x3fe>
 8008230:	4965      	ldr	r1, [pc, #404]	@ (80083c8 <PID_controllerH+0x588>)
 8008232:	a353      	add	r3, pc, #332	@ (adr r3, 8008380 <PID_controllerH+0x540>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	e9c1 2300 	strd	r2, r3, [r1]
 800823c:	e057      	b.n	80082ee <PID_controllerH+0x4ae>
		else if(setpoint >= 120 && setpoint < 135){Kp = 0.4;}
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	4b65      	ldr	r3, [pc, #404]	@ (80083d8 <PID_controllerH+0x598>)
 8008244:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008248:	f7f8 fc5c 	bl	8000b04 <__aeabi_dcmpge>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d010      	beq.n	8008274 <PID_controllerH+0x434>
 8008252:	a34d      	add	r3, pc, #308	@ (adr r3, 8008388 <PID_controllerH+0x548>)
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800825c:	f7f8 fc3e 	bl	8000adc <__aeabi_dcmplt>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <PID_controllerH+0x434>
 8008266:	4958      	ldr	r1, [pc, #352]	@ (80083c8 <PID_controllerH+0x588>)
 8008268:	a349      	add	r3, pc, #292	@ (adr r3, 8008390 <PID_controllerH+0x550>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	e9c1 2300 	strd	r2, r3, [r1]
 8008272:	e03c      	b.n	80082ee <PID_controllerH+0x4ae>
		else if(setpoint >= 135 && setpoint < 150){Kp = 0.34;}
 8008274:	a344      	add	r3, pc, #272	@ (adr r3, 8008388 <PID_controllerH+0x548>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800827e:	f7f8 fc41 	bl	8000b04 <__aeabi_dcmpge>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d010      	beq.n	80082aa <PID_controllerH+0x46a>
 8008288:	a343      	add	r3, pc, #268	@ (adr r3, 8008398 <PID_controllerH+0x558>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008292:	f7f8 fc23 	bl	8000adc <__aeabi_dcmplt>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <PID_controllerH+0x46a>
 800829c:	494a      	ldr	r1, [pc, #296]	@ (80083c8 <PID_controllerH+0x588>)
 800829e:	a340      	add	r3, pc, #256	@ (adr r3, 80083a0 <PID_controllerH+0x560>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	e9c1 2300 	strd	r2, r3, [r1]
 80082a8:	e021      	b.n	80082ee <PID_controllerH+0x4ae>
		else if(setpoint >= 150 && setpoint < 180){Kp = 0.3;}
 80082aa:	a33b      	add	r3, pc, #236	@ (adr r3, 8008398 <PID_controllerH+0x558>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082b4:	f7f8 fc26 	bl	8000b04 <__aeabi_dcmpge>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d010      	beq.n	80082e0 <PID_controllerH+0x4a0>
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	4b46      	ldr	r3, [pc, #280]	@ (80083dc <PID_controllerH+0x59c>)
 80082c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082c8:	f7f8 fc08 	bl	8000adc <__aeabi_dcmplt>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d006      	beq.n	80082e0 <PID_controllerH+0x4a0>
 80082d2:	493d      	ldr	r1, [pc, #244]	@ (80083c8 <PID_controllerH+0x588>)
 80082d4:	a334      	add	r3, pc, #208	@ (adr r3, 80083a8 <PID_controllerH+0x568>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	e9c1 2300 	strd	r2, r3, [r1]
 80082de:	e006      	b.n	80082ee <PID_controllerH+0x4ae>
		else{Kp = 1.0;}
 80082e0:	4939      	ldr	r1, [pc, #228]	@ (80083c8 <PID_controllerH+0x588>)
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	4b3e      	ldr	r3, [pc, #248]	@ (80083e0 <PID_controllerH+0x5a0>)
 80082e8:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80082ec:	e280      	b.n	80087f0 <PID_controllerH+0x9b0>
 80082ee:	e27f      	b.n	80087f0 <PID_controllerH+0x9b0>
	case 3:
		if(setpoint >= 30 && setpoint < 45){Kp = 0.43;}
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	4b3b      	ldr	r3, [pc, #236]	@ (80083e4 <PID_controllerH+0x5a4>)
 80082f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082fa:	f7f8 fc03 	bl	8000b04 <__aeabi_dcmpge>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d010      	beq.n	8008326 <PID_controllerH+0x4e6>
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	4b2d      	ldr	r3, [pc, #180]	@ (80083c0 <PID_controllerH+0x580>)
 800830a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800830e:	f7f8 fbe5 	bl	8000adc <__aeabi_dcmplt>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d006      	beq.n	8008326 <PID_controllerH+0x4e6>
 8008318:	492b      	ldr	r1, [pc, #172]	@ (80083c8 <PID_controllerH+0x588>)
 800831a:	a325      	add	r3, pc, #148	@ (adr r3, 80083b0 <PID_controllerH+0x570>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	e9c1 2300 	strd	r2, r3, [r1]
 8008324:	e124      	b.n	8008570 <PID_controllerH+0x730>
		else if(setpoint >= 45 && setpoint < 60){Kp = 0.35;}
 8008326:	f04f 0200 	mov.w	r2, #0
 800832a:	4b25      	ldr	r3, [pc, #148]	@ (80083c0 <PID_controllerH+0x580>)
 800832c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008330:	f7f8 fbe8 	bl	8000b04 <__aeabi_dcmpge>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d056      	beq.n	80083e8 <PID_controllerH+0x5a8>
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	4b21      	ldr	r3, [pc, #132]	@ (80083c4 <PID_controllerH+0x584>)
 8008340:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008344:	f7f8 fbca 	bl	8000adc <__aeabi_dcmplt>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d04c      	beq.n	80083e8 <PID_controllerH+0x5a8>
 800834e:	491e      	ldr	r1, [pc, #120]	@ (80083c8 <PID_controllerH+0x588>)
 8008350:	a319      	add	r3, pc, #100	@ (adr r3, 80083b8 <PID_controllerH+0x578>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	e9c1 2300 	strd	r2, r3, [r1]
 800835a:	e109      	b.n	8008570 <PID_controllerH+0x730>
 800835c:	f3af 8000 	nop.w
 8008360:	00000000 	.word	0x00000000
 8008364:	4052c000 	.word	0x4052c000
 8008368:	5c28f5c3 	.word	0x5c28f5c3
 800836c:	3fe5c28f 	.word	0x3fe5c28f
 8008370:	33333333 	.word	0x33333333
 8008374:	3fe33333 	.word	0x3fe33333
 8008378:	0a3d70a4 	.word	0x0a3d70a4
 800837c:	3fe0a3d7 	.word	0x3fe0a3d7
 8008380:	cccccccd 	.word	0xcccccccd
 8008384:	3fdccccc 	.word	0x3fdccccc
 8008388:	00000000 	.word	0x00000000
 800838c:	4060e000 	.word	0x4060e000
 8008390:	9999999a 	.word	0x9999999a
 8008394:	3fd99999 	.word	0x3fd99999
 8008398:	00000000 	.word	0x00000000
 800839c:	4062c000 	.word	0x4062c000
 80083a0:	5c28f5c3 	.word	0x5c28f5c3
 80083a4:	3fd5c28f 	.word	0x3fd5c28f
 80083a8:	33333333 	.word	0x33333333
 80083ac:	3fd33333 	.word	0x3fd33333
 80083b0:	b851eb85 	.word	0xb851eb85
 80083b4:	3fdb851e 	.word	0x3fdb851e
 80083b8:	66666666 	.word	0x66666666
 80083bc:	3fd66666 	.word	0x3fd66666
 80083c0:	40468000 	.word	0x40468000
 80083c4:	404e0000 	.word	0x404e0000
 80083c8:	200006b0 	.word	0x200006b0
 80083cc:	3fe80000 	.word	0x3fe80000
 80083d0:	40568000 	.word	0x40568000
 80083d4:	405a4000 	.word	0x405a4000
 80083d8:	405e0000 	.word	0x405e0000
 80083dc:	40668000 	.word	0x40668000
 80083e0:	3ff00000 	.word	0x3ff00000
 80083e4:	403e0000 	.word	0x403e0000
		else if(setpoint >= 60 && setpoint < 75){Kp = 0.3;}
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	4ba2      	ldr	r3, [pc, #648]	@ (8008678 <PID_controllerH+0x838>)
 80083ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80083f2:	f7f8 fb87 	bl	8000b04 <__aeabi_dcmpge>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d010      	beq.n	800841e <PID_controllerH+0x5de>
 80083fc:	a386      	add	r3, pc, #536	@ (adr r3, 8008618 <PID_controllerH+0x7d8>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008406:	f7f8 fb69 	bl	8000adc <__aeabi_dcmplt>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d006      	beq.n	800841e <PID_controllerH+0x5de>
 8008410:	499a      	ldr	r1, [pc, #616]	@ (800867c <PID_controllerH+0x83c>)
 8008412:	a383      	add	r3, pc, #524	@ (adr r3, 8008620 <PID_controllerH+0x7e0>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	e9c1 2300 	strd	r2, r3, [r1]
 800841c:	e0a8      	b.n	8008570 <PID_controllerH+0x730>
		else if(setpoint >= 75 && setpoint < 90){Kp = 0.25;}
 800841e:	a37e      	add	r3, pc, #504	@ (adr r3, 8008618 <PID_controllerH+0x7d8>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008428:	f7f8 fb6c 	bl	8000b04 <__aeabi_dcmpge>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d010      	beq.n	8008454 <PID_controllerH+0x614>
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	4b92      	ldr	r3, [pc, #584]	@ (8008680 <PID_controllerH+0x840>)
 8008438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800843c:	f7f8 fb4e 	bl	8000adc <__aeabi_dcmplt>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <PID_controllerH+0x614>
 8008446:	498d      	ldr	r1, [pc, #564]	@ (800867c <PID_controllerH+0x83c>)
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	4b8d      	ldr	r3, [pc, #564]	@ (8008684 <PID_controllerH+0x844>)
 800844e:	e9c1 2300 	strd	r2, r3, [r1]
 8008452:	e08d      	b.n	8008570 <PID_controllerH+0x730>
		else if(setpoint >= 90 && setpoint < 105){Kp = 0.19;}
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	4b89      	ldr	r3, [pc, #548]	@ (8008680 <PID_controllerH+0x840>)
 800845a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800845e:	f7f8 fb51 	bl	8000b04 <__aeabi_dcmpge>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d010      	beq.n	800848a <PID_controllerH+0x64a>
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	4b86      	ldr	r3, [pc, #536]	@ (8008688 <PID_controllerH+0x848>)
 800846e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008472:	f7f8 fb33 	bl	8000adc <__aeabi_dcmplt>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <PID_controllerH+0x64a>
 800847c:	497f      	ldr	r1, [pc, #508]	@ (800867c <PID_controllerH+0x83c>)
 800847e:	a36a      	add	r3, pc, #424	@ (adr r3, 8008628 <PID_controllerH+0x7e8>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	e9c1 2300 	strd	r2, r3, [r1]
 8008488:	e072      	b.n	8008570 <PID_controllerH+0x730>
		else if(setpoint >= 105 && setpoint < 120){Kp = 0.15;}
 800848a:	f04f 0200 	mov.w	r2, #0
 800848e:	4b7e      	ldr	r3, [pc, #504]	@ (8008688 <PID_controllerH+0x848>)
 8008490:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008494:	f7f8 fb36 	bl	8000b04 <__aeabi_dcmpge>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d010      	beq.n	80084c0 <PID_controllerH+0x680>
 800849e:	f04f 0200 	mov.w	r2, #0
 80084a2:	4b7a      	ldr	r3, [pc, #488]	@ (800868c <PID_controllerH+0x84c>)
 80084a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084a8:	f7f8 fb18 	bl	8000adc <__aeabi_dcmplt>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d006      	beq.n	80084c0 <PID_controllerH+0x680>
 80084b2:	4972      	ldr	r1, [pc, #456]	@ (800867c <PID_controllerH+0x83c>)
 80084b4:	a35e      	add	r3, pc, #376	@ (adr r3, 8008630 <PID_controllerH+0x7f0>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	e9c1 2300 	strd	r2, r3, [r1]
 80084be:	e057      	b.n	8008570 <PID_controllerH+0x730>
		else if(setpoint >= 120 && setpoint < 135){Kp = 0.11;}
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	4b71      	ldr	r3, [pc, #452]	@ (800868c <PID_controllerH+0x84c>)
 80084c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084ca:	f7f8 fb1b 	bl	8000b04 <__aeabi_dcmpge>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d010      	beq.n	80084f6 <PID_controllerH+0x6b6>
 80084d4:	a358      	add	r3, pc, #352	@ (adr r3, 8008638 <PID_controllerH+0x7f8>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084de:	f7f8 fafd 	bl	8000adc <__aeabi_dcmplt>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d006      	beq.n	80084f6 <PID_controllerH+0x6b6>
 80084e8:	4964      	ldr	r1, [pc, #400]	@ (800867c <PID_controllerH+0x83c>)
 80084ea:	a355      	add	r3, pc, #340	@ (adr r3, 8008640 <PID_controllerH+0x800>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	e9c1 2300 	strd	r2, r3, [r1]
 80084f4:	e03c      	b.n	8008570 <PID_controllerH+0x730>
		else if(setpoint >= 135 && setpoint < 150){Kp = 0.1;}
 80084f6:	a350      	add	r3, pc, #320	@ (adr r3, 8008638 <PID_controllerH+0x7f8>)
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008500:	f7f8 fb00 	bl	8000b04 <__aeabi_dcmpge>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d010      	beq.n	800852c <PID_controllerH+0x6ec>
 800850a:	a34f      	add	r3, pc, #316	@ (adr r3, 8008648 <PID_controllerH+0x808>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008514:	f7f8 fae2 	bl	8000adc <__aeabi_dcmplt>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d006      	beq.n	800852c <PID_controllerH+0x6ec>
 800851e:	4957      	ldr	r1, [pc, #348]	@ (800867c <PID_controllerH+0x83c>)
 8008520:	a34b      	add	r3, pc, #300	@ (adr r3, 8008650 <PID_controllerH+0x810>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	e9c1 2300 	strd	r2, r3, [r1]
 800852a:	e021      	b.n	8008570 <PID_controllerH+0x730>
		else if(setpoint >= 150 && setpoint < 180){Kp = 0.08;}
 800852c:	a346      	add	r3, pc, #280	@ (adr r3, 8008648 <PID_controllerH+0x808>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008536:	f7f8 fae5 	bl	8000b04 <__aeabi_dcmpge>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d010      	beq.n	8008562 <PID_controllerH+0x722>
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	4b52      	ldr	r3, [pc, #328]	@ (8008690 <PID_controllerH+0x850>)
 8008546:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800854a:	f7f8 fac7 	bl	8000adc <__aeabi_dcmplt>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d006      	beq.n	8008562 <PID_controllerH+0x722>
 8008554:	4949      	ldr	r1, [pc, #292]	@ (800867c <PID_controllerH+0x83c>)
 8008556:	a340      	add	r3, pc, #256	@ (adr r3, 8008658 <PID_controllerH+0x818>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	e9c1 2300 	strd	r2, r3, [r1]
 8008560:	e006      	b.n	8008570 <PID_controllerH+0x730>
		else{Kp = 0.6;}
 8008562:	4946      	ldr	r1, [pc, #280]	@ (800867c <PID_controllerH+0x83c>)
 8008564:	a33e      	add	r3, pc, #248	@ (adr r3, 8008660 <PID_controllerH+0x820>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800856e:	e13f      	b.n	80087f0 <PID_controllerH+0x9b0>
 8008570:	e13e      	b.n	80087f0 <PID_controllerH+0x9b0>
	case 4:
		if(setpoint >= 30 && setpoint < 45){Kp = 0.43;}
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	4b47      	ldr	r3, [pc, #284]	@ (8008694 <PID_controllerH+0x854>)
 8008578:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800857c:	f7f8 fac2 	bl	8000b04 <__aeabi_dcmpge>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d010      	beq.n	80085a8 <PID_controllerH+0x768>
 8008586:	f04f 0200 	mov.w	r2, #0
 800858a:	4b43      	ldr	r3, [pc, #268]	@ (8008698 <PID_controllerH+0x858>)
 800858c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008590:	f7f8 faa4 	bl	8000adc <__aeabi_dcmplt>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d006      	beq.n	80085a8 <PID_controllerH+0x768>
 800859a:	4938      	ldr	r1, [pc, #224]	@ (800867c <PID_controllerH+0x83c>)
 800859c:	a332      	add	r3, pc, #200	@ (adr r3, 8008668 <PID_controllerH+0x828>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	e9c1 2300 	strd	r2, r3, [r1]
 80085a6:	e122      	b.n	80087ee <PID_controllerH+0x9ae>
		else if(setpoint >= 45 && setpoint < 60){Kp = 0.35;}
 80085a8:	f04f 0200 	mov.w	r2, #0
 80085ac:	4b3a      	ldr	r3, [pc, #232]	@ (8008698 <PID_controllerH+0x858>)
 80085ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085b2:	f7f8 faa7 	bl	8000b04 <__aeabi_dcmpge>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <PID_controllerH+0x79e>
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008678 <PID_controllerH+0x838>)
 80085c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085c6:	f7f8 fa89 	bl	8000adc <__aeabi_dcmplt>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <PID_controllerH+0x79e>
 80085d0:	492a      	ldr	r1, [pc, #168]	@ (800867c <PID_controllerH+0x83c>)
 80085d2:	a327      	add	r3, pc, #156	@ (adr r3, 8008670 <PID_controllerH+0x830>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	e9c1 2300 	strd	r2, r3, [r1]
 80085dc:	e107      	b.n	80087ee <PID_controllerH+0x9ae>
		else if(setpoint >= 60 && setpoint < 75){Kp = 0.3;}
 80085de:	f04f 0200 	mov.w	r2, #0
 80085e2:	4b25      	ldr	r3, [pc, #148]	@ (8008678 <PID_controllerH+0x838>)
 80085e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085e8:	f7f8 fa8c 	bl	8000b04 <__aeabi_dcmpge>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d054      	beq.n	800869c <PID_controllerH+0x85c>
 80085f2:	a309      	add	r3, pc, #36	@ (adr r3, 8008618 <PID_controllerH+0x7d8>)
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80085fc:	f7f8 fa6e 	bl	8000adc <__aeabi_dcmplt>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d04a      	beq.n	800869c <PID_controllerH+0x85c>
 8008606:	491d      	ldr	r1, [pc, #116]	@ (800867c <PID_controllerH+0x83c>)
 8008608:	a305      	add	r3, pc, #20	@ (adr r3, 8008620 <PID_controllerH+0x7e0>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	e9c1 2300 	strd	r2, r3, [r1]
 8008612:	e0ec      	b.n	80087ee <PID_controllerH+0x9ae>
 8008614:	f3af 8000 	nop.w
 8008618:	00000000 	.word	0x00000000
 800861c:	4052c000 	.word	0x4052c000
 8008620:	33333333 	.word	0x33333333
 8008624:	3fd33333 	.word	0x3fd33333
 8008628:	851eb852 	.word	0x851eb852
 800862c:	3fc851eb 	.word	0x3fc851eb
 8008630:	33333333 	.word	0x33333333
 8008634:	3fc33333 	.word	0x3fc33333
 8008638:	00000000 	.word	0x00000000
 800863c:	4060e000 	.word	0x4060e000
 8008640:	c28f5c29 	.word	0xc28f5c29
 8008644:	3fbc28f5 	.word	0x3fbc28f5
 8008648:	00000000 	.word	0x00000000
 800864c:	4062c000 	.word	0x4062c000
 8008650:	9999999a 	.word	0x9999999a
 8008654:	3fb99999 	.word	0x3fb99999
 8008658:	47ae147b 	.word	0x47ae147b
 800865c:	3fb47ae1 	.word	0x3fb47ae1
 8008660:	33333333 	.word	0x33333333
 8008664:	3fe33333 	.word	0x3fe33333
 8008668:	b851eb85 	.word	0xb851eb85
 800866c:	3fdb851e 	.word	0x3fdb851e
 8008670:	66666666 	.word	0x66666666
 8008674:	3fd66666 	.word	0x3fd66666
 8008678:	404e0000 	.word	0x404e0000
 800867c:	200006b0 	.word	0x200006b0
 8008680:	40568000 	.word	0x40568000
 8008684:	3fd00000 	.word	0x3fd00000
 8008688:	405a4000 	.word	0x405a4000
 800868c:	405e0000 	.word	0x405e0000
 8008690:	40668000 	.word	0x40668000
 8008694:	403e0000 	.word	0x403e0000
 8008698:	40468000 	.word	0x40468000
		else if(setpoint >= 75 && setpoint < 90){Kp = 0.25;}
 800869c:	a39b      	add	r3, pc, #620	@ (adr r3, 800890c <PID_controllerH+0xacc>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086a6:	f7f8 fa2d 	bl	8000b04 <__aeabi_dcmpge>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d010      	beq.n	80086d2 <PID_controllerH+0x892>
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	4b8e      	ldr	r3, [pc, #568]	@ (80088f0 <PID_controllerH+0xab0>)
 80086b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086ba:	f7f8 fa0f 	bl	8000adc <__aeabi_dcmplt>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d006      	beq.n	80086d2 <PID_controllerH+0x892>
 80086c4:	498b      	ldr	r1, [pc, #556]	@ (80088f4 <PID_controllerH+0xab4>)
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	4b8b      	ldr	r3, [pc, #556]	@ (80088f8 <PID_controllerH+0xab8>)
 80086cc:	e9c1 2300 	strd	r2, r3, [r1]
 80086d0:	e08d      	b.n	80087ee <PID_controllerH+0x9ae>
		else if(setpoint >= 90 && setpoint < 105){Kp = 0.19;}
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	4b86      	ldr	r3, [pc, #536]	@ (80088f0 <PID_controllerH+0xab0>)
 80086d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086dc:	f7f8 fa12 	bl	8000b04 <__aeabi_dcmpge>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d010      	beq.n	8008708 <PID_controllerH+0x8c8>
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	4b84      	ldr	r3, [pc, #528]	@ (80088fc <PID_controllerH+0xabc>)
 80086ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086f0:	f7f8 f9f4 	bl	8000adc <__aeabi_dcmplt>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d006      	beq.n	8008708 <PID_controllerH+0x8c8>
 80086fa:	497e      	ldr	r1, [pc, #504]	@ (80088f4 <PID_controllerH+0xab4>)
 80086fc:	a36c      	add	r3, pc, #432	@ (adr r3, 80088b0 <PID_controllerH+0xa70>)
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	e9c1 2300 	strd	r2, r3, [r1]
 8008706:	e072      	b.n	80087ee <PID_controllerH+0x9ae>
		else if(setpoint >= 105 && setpoint < 120){Kp = 0.15;}
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	4b7b      	ldr	r3, [pc, #492]	@ (80088fc <PID_controllerH+0xabc>)
 800870e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008712:	f7f8 f9f7 	bl	8000b04 <__aeabi_dcmpge>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d010      	beq.n	800873e <PID_controllerH+0x8fe>
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	4b77      	ldr	r3, [pc, #476]	@ (8008900 <PID_controllerH+0xac0>)
 8008722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008726:	f7f8 f9d9 	bl	8000adc <__aeabi_dcmplt>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <PID_controllerH+0x8fe>
 8008730:	4970      	ldr	r1, [pc, #448]	@ (80088f4 <PID_controllerH+0xab4>)
 8008732:	a361      	add	r3, pc, #388	@ (adr r3, 80088b8 <PID_controllerH+0xa78>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	e9c1 2300 	strd	r2, r3, [r1]
 800873c:	e057      	b.n	80087ee <PID_controllerH+0x9ae>
		else if(setpoint >= 120 && setpoint < 135){Kp = 0.11;}
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	4b6f      	ldr	r3, [pc, #444]	@ (8008900 <PID_controllerH+0xac0>)
 8008744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008748:	f7f8 f9dc 	bl	8000b04 <__aeabi_dcmpge>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d010      	beq.n	8008774 <PID_controllerH+0x934>
 8008752:	a35b      	add	r3, pc, #364	@ (adr r3, 80088c0 <PID_controllerH+0xa80>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800875c:	f7f8 f9be 	bl	8000adc <__aeabi_dcmplt>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d006      	beq.n	8008774 <PID_controllerH+0x934>
 8008766:	4963      	ldr	r1, [pc, #396]	@ (80088f4 <PID_controllerH+0xab4>)
 8008768:	a357      	add	r3, pc, #348	@ (adr r3, 80088c8 <PID_controllerH+0xa88>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	e9c1 2300 	strd	r2, r3, [r1]
 8008772:	e03c      	b.n	80087ee <PID_controllerH+0x9ae>
		else if(setpoint >= 135 && setpoint < 150){Kp = 0.1;}
 8008774:	a352      	add	r3, pc, #328	@ (adr r3, 80088c0 <PID_controllerH+0xa80>)
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800877e:	f7f8 f9c1 	bl	8000b04 <__aeabi_dcmpge>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d010      	beq.n	80087aa <PID_controllerH+0x96a>
 8008788:	a351      	add	r3, pc, #324	@ (adr r3, 80088d0 <PID_controllerH+0xa90>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008792:	f7f8 f9a3 	bl	8000adc <__aeabi_dcmplt>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d006      	beq.n	80087aa <PID_controllerH+0x96a>
 800879c:	4955      	ldr	r1, [pc, #340]	@ (80088f4 <PID_controllerH+0xab4>)
 800879e:	a34e      	add	r3, pc, #312	@ (adr r3, 80088d8 <PID_controllerH+0xa98>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	e9c1 2300 	strd	r2, r3, [r1]
 80087a8:	e021      	b.n	80087ee <PID_controllerH+0x9ae>
		else if(setpoint >= 150 && setpoint < 180){Kp = 0.08;}
 80087aa:	a349      	add	r3, pc, #292	@ (adr r3, 80088d0 <PID_controllerH+0xa90>)
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087b4:	f7f8 f9a6 	bl	8000b04 <__aeabi_dcmpge>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d010      	beq.n	80087e0 <PID_controllerH+0x9a0>
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	4b50      	ldr	r3, [pc, #320]	@ (8008904 <PID_controllerH+0xac4>)
 80087c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087c8:	f7f8 f988 	bl	8000adc <__aeabi_dcmplt>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d006      	beq.n	80087e0 <PID_controllerH+0x9a0>
 80087d2:	4948      	ldr	r1, [pc, #288]	@ (80088f4 <PID_controllerH+0xab4>)
 80087d4:	a342      	add	r3, pc, #264	@ (adr r3, 80088e0 <PID_controllerH+0xaa0>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	e9c1 2300 	strd	r2, r3, [r1]
 80087de:	e006      	b.n	80087ee <PID_controllerH+0x9ae>
		else{Kp = 0.6;}
 80087e0:	4944      	ldr	r1, [pc, #272]	@ (80088f4 <PID_controllerH+0xab4>)
 80087e2:	a341      	add	r3, pc, #260	@ (adr r3, 80088e8 <PID_controllerH+0xaa8>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80087ec:	e7ff      	b.n	80087ee <PID_controllerH+0x9ae>
 80087ee:	bf00      	nop
	}

	if((setpoint - actual_position) > 180)
 80087f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087f8:	f7f7 fd46 	bl	8000288 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4610      	mov	r0, r2
 8008802:	4619      	mov	r1, r3
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	4b3e      	ldr	r3, [pc, #248]	@ (8008904 <PID_controllerH+0xac4>)
 800880a:	f7f8 f985 	bl	8000b18 <__aeabi_dcmpgt>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00d      	beq.n	8008830 <PID_controllerH+0x9f0>
	{
	    error = -(setpoint + actual_position);
 8008814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008818:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800881c:	f7f7 fd36 	bl	800028c <__adddf3>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4611      	mov	r1, r2
 8008826:	6239      	str	r1, [r7, #32]
 8008828:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800882c:	627b      	str	r3, [r7, #36]	@ 0x24
 800882e:	e026      	b.n	800887e <PID_controllerH+0xa3e>
	}
	else if((setpoint - actual_position) < -180)
 8008830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008834:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008838:	f7f7 fd26 	bl	8000288 <__aeabi_dsub>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4610      	mov	r0, r2
 8008842:	4619      	mov	r1, r3
 8008844:	f04f 0200 	mov.w	r2, #0
 8008848:	4b2f      	ldr	r3, [pc, #188]	@ (8008908 <PID_controllerH+0xac8>)
 800884a:	f7f8 f947 	bl	8000adc <__aeabi_dcmplt>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <PID_controllerH+0xa2a>
	{
		error = setpoint + actual_position;
 8008854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008858:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800885c:	f7f7 fd16 	bl	800028c <__adddf3>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008868:	e009      	b.n	800887e <PID_controllerH+0xa3e>
	}
	else
	{
	    error = setpoint - actual_position;
 800886a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800886e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008872:	f7f7 fd09 	bl	8000288 <__aeabi_dsub>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

    // Proportional
	P = Kp * error;
 800887e:	4b1d      	ldr	r3, [pc, #116]	@ (80088f4 <PID_controllerH+0xab4>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008888:	f7f7 feb6 	bl	80005f8 <__aeabi_dmul>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 8008894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008898:	ec43 2b17 	vmov	d7, r2, r3
}
 800889c:	eeb0 0a47 	vmov.f32	s0, s14
 80088a0:	eef0 0a67 	vmov.f32	s1, s15
 80088a4:	3728      	adds	r7, #40	@ 0x28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	f3af 8000 	nop.w
 80088b0:	851eb852 	.word	0x851eb852
 80088b4:	3fc851eb 	.word	0x3fc851eb
 80088b8:	33333333 	.word	0x33333333
 80088bc:	3fc33333 	.word	0x3fc33333
 80088c0:	00000000 	.word	0x00000000
 80088c4:	4060e000 	.word	0x4060e000
 80088c8:	c28f5c29 	.word	0xc28f5c29
 80088cc:	3fbc28f5 	.word	0x3fbc28f5
 80088d0:	00000000 	.word	0x00000000
 80088d4:	4062c000 	.word	0x4062c000
 80088d8:	9999999a 	.word	0x9999999a
 80088dc:	3fb99999 	.word	0x3fb99999
 80088e0:	47ae147b 	.word	0x47ae147b
 80088e4:	3fb47ae1 	.word	0x3fb47ae1
 80088e8:	33333333 	.word	0x33333333
 80088ec:	3fe33333 	.word	0x3fe33333
 80088f0:	40568000 	.word	0x40568000
 80088f4:	200006b0 	.word	0x200006b0
 80088f8:	3fd00000 	.word	0x3fd00000
 80088fc:	405a4000 	.word	0x405a4000
 8008900:	405e0000 	.word	0x405e0000
 8008904:	40668000 	.word	0x40668000
 8008908:	c0668000 	.word	0xc0668000
 800890c:	00000000 	.word	0x00000000
 8008910:	4052c000 	.word	0x4052c000

08008914 <map>:
extern int sensorMEGA[4];
char buffCAM[10];
static uint8_t findBallMode = 1;

int map(int st1, int fn1, int st2, int fn2, int value)
{
 8008914:	b5b0      	push	{r4, r5, r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
    return (1.0*(value-st1))/((fn1-st1)*1.0) * (fn2-st2)+st2;
 8008922:	6a3a      	ldr	r2, [r7, #32]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	4618      	mov	r0, r3
 800892a:	f7f7 fdfb 	bl	8000524 <__aeabi_i2d>
 800892e:	4604      	mov	r4, r0
 8008930:	460d      	mov	r5, r1
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	4618      	mov	r0, r3
 800893a:	f7f7 fdf3 	bl	8000524 <__aeabi_i2d>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 ff81 	bl	800084c <__aeabi_ddiv>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4614      	mov	r4, r2
 8008950:	461d      	mov	r5, r3
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	4618      	mov	r0, r3
 800895a:	f7f7 fde3 	bl	8000524 <__aeabi_i2d>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4620      	mov	r0, r4
 8008964:	4629      	mov	r1, r5
 8008966:	f7f7 fe47 	bl	80005f8 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4614      	mov	r4, r2
 8008970:	461d      	mov	r5, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7f7 fdd6 	bl	8000524 <__aeabi_i2d>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4620      	mov	r0, r4
 800897e:	4629      	mov	r1, r5
 8008980:	f7f7 fc84 	bl	800028c <__adddf3>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4610      	mov	r0, r2
 800898a:	4619      	mov	r1, r3
 800898c:	f7f8 f8e4 	bl	8000b58 <__aeabi_d2iz>
 8008990:	4603      	mov	r3, r0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800899c <servo_write>:
    prevVy = *Vy;
    prevW = *W;
}

void servo_write(int angle)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 25, 125, angle);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	237d      	movs	r3, #125	@ 0x7d
 80089aa:	2219      	movs	r2, #25
 80089ac:	21b4      	movs	r1, #180	@ 0xb4
 80089ae:	2000      	movs	r0, #0
 80089b0:	f7ff ffb0 	bl	8008914 <map>
 80089b4:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 80089b6:	4b04      	ldr	r3, [pc, #16]	@ (80089c8 <servo_write+0x2c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000380 	.word	0x20000380

080089cc <PID_Kalman>:
    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
    Inverse_Kinematics(Vx, Vy, W);
}

void PID_Kalman(EKF setpoint, uint8_t pidMode)
{
 80089cc:	b5b0      	push	{r4, r5, r7, lr}
 80089ce:	b094      	sub	sp, #80	@ 0x50
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	eeb0 5a40 	vmov.f32	s10, s0
 80089d6:	eef0 5a60 	vmov.f32	s11, s1
 80089da:	eeb0 6a41 	vmov.f32	s12, s2
 80089de:	eef0 6a61 	vmov.f32	s13, s3
 80089e2:	eeb0 7a42 	vmov.f32	s14, s4
 80089e6:	eef0 7a62 	vmov.f32	s15, s5
 80089ea:	4603      	mov	r3, r0
 80089ec:	ed87 5b02 	vstr	d5, [r7, #8]
 80089f0:	ed87 6b04 	vstr	d6, [r7, #16]
 80089f4:	ed87 7b06 	vstr	d7, [r7, #24]
 80089f8:	71fb      	strb	r3, [r7, #7]
    EKF position = extendedKalmanFilter();
 80089fa:	f7fd fe01 	bl	8006600 <extendedKalmanFilter>
 80089fe:	eeb0 5a40 	vmov.f32	s10, s0
 8008a02:	eef0 5a60 	vmov.f32	s11, s1
 8008a06:	eeb0 6a41 	vmov.f32	s12, s2
 8008a0a:	eef0 6a61 	vmov.f32	s13, s3
 8008a0e:	eeb0 7a42 	vmov.f32	s14, s4
 8008a12:	eef0 7a62 	vmov.f32	s15, s5
 8008a16:	ed87 5b08 	vstr	d5, [r7, #32]
 8008a1a:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 8008a1e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
//    const int FRONT_THRESHOLD = 25;
//    const int LEFT_THRESHOLD = 25;
//    int frontDistance = sensorMEGA[0];
//    int leftDistance = sensorMEGA[1];

    double Vx = 0.0;
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double Vy = 0.0;
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double W = 0.0;
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    Vx = PID_controller(setpoint.x, position.x, pidMode);
 8008a46:	ed97 7b02 	vldr	d7, [r7, #8]
 8008a4a:	ed97 6b08 	vldr	d6, [r7, #32]
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	4618      	mov	r0, r3
 8008a52:	eeb0 1a46 	vmov.f32	s2, s12
 8008a56:	eef0 1a66 	vmov.f32	s3, s13
 8008a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8008a5e:	eef0 0a67 	vmov.f32	s1, s15
 8008a62:	f7fe fdd9 	bl	8007618 <PID_controller>
 8008a66:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
    Vy = PID_controller(setpoint.y, position.y, pidMode);
 8008a6a:	ed97 7b04 	vldr	d7, [r7, #16]
 8008a6e:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	4618      	mov	r0, r3
 8008a76:	eeb0 1a46 	vmov.f32	s2, s12
 8008a7a:	eef0 1a66 	vmov.f32	s3, s13
 8008a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8008a82:	eef0 0a67 	vmov.f32	s1, s15
 8008a86:	f7fe fdc7 	bl	8007618 <PID_controller>
 8008a8a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    W = PID_controllerH(setpoint.h, position.h, 3);
 8008a8e:	ed97 7b06 	vldr	d7, [r7, #24]
 8008a92:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8008a96:	2003      	movs	r0, #3
 8008a98:	eeb0 1a46 	vmov.f32	s2, s12
 8008a9c:	eef0 1a66 	vmov.f32	s3, s13
 8008aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8008aa4:	eef0 0a67 	vmov.f32	s1, s15
 8008aa8:	f7ff f9ca 	bl	8007e40 <PID_controllerH>
 8008aac:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

//    if (frontDistance < FRONT_THRESHOLD && frontDistance > 0) {Vy = 0.0;}
//    else if (leftDistance < LEFT_THRESHOLD && leftDistance > 0) {Vx = 0.0;}
    Inverse_Kinematics(Vx, Vy, W);
 8008ab0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008ab4:	f7f8 f850 	bl	8000b58 <__aeabi_d2iz>
 8008ab8:	4604      	mov	r4, r0
 8008aba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008abe:	f7f8 f84b 	bl	8000b58 <__aeabi_d2iz>
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8008ac8:	f7f8 f846 	bl	8000b58 <__aeabi_d2iz>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f7f8 fb38 	bl	8001148 <Inverse_Kinematics>
}
 8008ad8:	bf00      	nop
 8008ada:	3750      	adds	r7, #80	@ 0x50
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bdb0      	pop	{r4, r5, r7, pc}

08008ae0 <PID_setDegree>:
    double Vy = PID_controller(setpoint_y, currentPosition.y, pidMode);
    Inverse_Kinematics(0, Vy, 0);
}

void PID_setDegree(double setpoint_h)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08a      	sub	sp, #40	@ 0x28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	ed87 0b00 	vstr	d0, [r7]
	EKF currentPosition = extendedKalmanFilter();
 8008aea:	f7fd fd89 	bl	8006600 <extendedKalmanFilter>
 8008aee:	eeb0 5a40 	vmov.f32	s10, s0
 8008af2:	eef0 5a60 	vmov.f32	s11, s1
 8008af6:	eeb0 6a41 	vmov.f32	s12, s2
 8008afa:	eef0 6a61 	vmov.f32	s13, s3
 8008afe:	eeb0 7a42 	vmov.f32	s14, s4
 8008b02:	eef0 7a62 	vmov.f32	s15, s5
 8008b06:	ed87 5b02 	vstr	d5, [r7, #8]
 8008b0a:	ed87 6b04 	vstr	d6, [r7, #16]
 8008b0e:	ed87 7b06 	vstr	d7, [r7, #24]

    double W = PID_controllerH(setpoint_h, currentPosition.h, 3);
 8008b12:	ed97 7b06 	vldr	d7, [r7, #24]
 8008b16:	2003      	movs	r0, #3
 8008b18:	eeb0 1a47 	vmov.f32	s2, s14
 8008b1c:	eef0 1a67 	vmov.f32	s3, s15
 8008b20:	ed97 0b00 	vldr	d0, [r7]
 8008b24:	f7ff f98c 	bl	8007e40 <PID_controllerH>
 8008b28:	ed87 0b08 	vstr	d0, [r7, #32]
    putar(0, 0, W);
 8008b2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b30:	f7f8 f812 	bl	8000b58 <__aeabi_d2iz>
 8008b34:	4603      	mov	r3, r0
 8008b36:	461a      	mov	r2, r3
 8008b38:	2100      	movs	r1, #0
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f7f9 f810 	bl	8001b60 <putar>
//    Inverse_Kinematics(0, 0, W);
}
 8008b40:	bf00      	nop
 8008b42:	3728      	adds	r7, #40	@ 0x28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <focusToTheBall>:

    Inverse_Kinematics(Vx, Vy, W);
}

void focusToTheBall()
{
 8008b48:	b5b0      	push	{r4, r5, r7, lr}
 8008b4a:	b08e      	sub	sp, #56	@ 0x38
 8008b4c:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 8008b4e:	4b5e      	ldr	r3, [pc, #376]	@ (8008cc8 <focusToTheBall+0x180>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int ballAngle = camera[1];
 8008b5c:	4b5a      	ldr	r3, [pc, #360]	@ (8008cc8 <focusToTheBall+0x180>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    int ballExistence = camera[2];
 8008b62:	4b59      	ldr	r3, [pc, #356]	@ (8008cc8 <focusToTheBall+0x180>)
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	627b      	str	r3, [r7, #36]	@ 0x24

    double kp = 0.05;
 8008b68:	a353      	add	r3, pc, #332	@ (adr r3, 8008cb8 <focusToTheBall+0x170>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int gndtoCam = 362; // in mm
 8008b72:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8008b76:	617b      	str	r3, [r7, #20]

    if(ballExistence != 0)
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 8093 	beq.w	8008ca6 <focusToTheBall+0x15e>
    {
        int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 8008b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b82:	f7f7 fccf 	bl	8000524 <__aeabi_i2d>
 8008b86:	a34e      	add	r3, pc, #312	@ (adr r3, 8008cc0 <focusToTheBall+0x178>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 fd34 	bl	80005f8 <__aeabi_dmul>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4610      	mov	r0, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	f04f 0200 	mov.w	r2, #0
 8008b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8008ccc <focusToTheBall+0x184>)
 8008b9e:	f7f7 fe55 	bl	800084c <__aeabi_ddiv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	ec43 2b17 	vmov	d7, r2, r3
 8008baa:	eeb0 0a47 	vmov.f32	s0, s14
 8008bae:	eef0 0a67 	vmov.f32	s1, s15
 8008bb2:	f009 f949 	bl	8011e48 <cos>
 8008bb6:	ec55 4b10 	vmov	r4, r5, d0
 8008bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bbc:	f7f7 fcb2 	bl	8000524 <__aeabi_i2d>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 fd16 	bl	80005f8 <__aeabi_dmul>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	f7f7 ffc0 	bl	8000b58 <__aeabi_d2iz>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	613b      	str	r3, [r7, #16]
        double focus = atan2(gndtoCam, yBALL) * 180.0 / M_PI;
 8008bdc:	6978      	ldr	r0, [r7, #20]
 8008bde:	f7f7 fca1 	bl	8000524 <__aeabi_i2d>
 8008be2:	4604      	mov	r4, r0
 8008be4:	460d      	mov	r5, r1
 8008be6:	6938      	ldr	r0, [r7, #16]
 8008be8:	f7f7 fc9c 	bl	8000524 <__aeabi_i2d>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	ec43 2b11 	vmov	d1, r2, r3
 8008bf4:	ec45 4b10 	vmov	d0, r4, r5
 8008bf8:	f009 f8ee 	bl	8011dd8 <atan2>
 8008bfc:	ec51 0b10 	vmov	r0, r1, d0
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	4b31      	ldr	r3, [pc, #196]	@ (8008ccc <focusToTheBall+0x184>)
 8008c06:	f7f7 fcf7 	bl	80005f8 <__aeabi_dmul>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	a32b      	add	r3, pc, #172	@ (adr r3, 8008cc0 <focusToTheBall+0x178>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fe18 	bl	800084c <__aeabi_ddiv>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	e9c7 2302 	strd	r2, r3, [r7, #8]
        prevAngleBall = focus;
 8008c24:	492a      	ldr	r1, [pc, #168]	@ (8008cd0 <focusToTheBall+0x188>)
 8008c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c2a:	e9c1 2300 	strd	r2, r3, [r1]
        int focusMapping = map(0, 90, 70, 0, prevAngleBall);
 8008c2e:	4b28      	ldr	r3, [pc, #160]	@ (8008cd0 <focusToTheBall+0x188>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	4610      	mov	r0, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	f7f7 ff8e 	bl	8000b58 <__aeabi_d2iz>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2300      	movs	r3, #0
 8008c42:	2246      	movs	r2, #70	@ 0x46
 8008c44:	215a      	movs	r1, #90	@ 0x5a
 8008c46:	2000      	movs	r0, #0
 8008c48:	f7ff fe64 	bl	8008914 <map>
 8008c4c:	6078      	str	r0, [r7, #4]
        kpAngle = focusMapping + kp * (focusMapping - kpAngle);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7f7 fc68 	bl	8000524 <__aeabi_i2d>
 8008c54:	4604      	mov	r4, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7f7 fc63 	bl	8000524 <__aeabi_i2d>
 8008c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008cd4 <focusToTheBall+0x18c>)
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f7f7 fb10 	bl	8000288 <__aeabi_dsub>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c74:	f7f7 fcc0 	bl	80005f8 <__aeabi_dmul>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 fb04 	bl	800028c <__adddf3>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4912      	ldr	r1, [pc, #72]	@ (8008cd4 <focusToTheBall+0x18c>)
 8008c8a:	e9c1 2300 	strd	r2, r3, [r1]
        servo_write(kpAngle);
 8008c8e:	4b11      	ldr	r3, [pc, #68]	@ (8008cd4 <focusToTheBall+0x18c>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	4610      	mov	r0, r2
 8008c96:	4619      	mov	r1, r3
 8008c98:	f7f7 ff5e 	bl	8000b58 <__aeabi_d2iz>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff fe7c 	bl	800899c <servo_write>
    }
    else
    {
    	servo_write(55);
    }
}
 8008ca4:	e002      	b.n	8008cac <focusToTheBall+0x164>
    	servo_write(55);
 8008ca6:	2037      	movs	r0, #55	@ 0x37
 8008ca8:	f7ff fe78 	bl	800899c <servo_write>
}
 8008cac:	bf00      	nop
 8008cae:	3730      	adds	r7, #48	@ 0x30
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8008cb4:	f3af 8000 	nop.w
 8008cb8:	9999999a 	.word	0x9999999a
 8008cbc:	3fa99999 	.word	0x3fa99999
 8008cc0:	54442d18 	.word	0x54442d18
 8008cc4:	400921fb 	.word	0x400921fb
 8008cc8:	2000058c 	.word	0x2000058c
 8008ccc:	40668000 	.word	0x40668000
 8008cd0:	200006c8 	.word	0x200006c8
 8008cd4:	200006d0 	.word	0x200006d0

08008cd8 <findtheBall>:

void findtheBall()
{
 8008cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008cdc:	b090      	sub	sp, #64	@ 0x40
 8008cde:	af00      	add	r7, sp, #0
     * camera[2]: ball existence (number of balls)
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

	EKF position = extendedKalmanFilter();
 8008ce0:	f7fd fc8e 	bl	8006600 <extendedKalmanFilter>
 8008ce4:	eeb0 5a40 	vmov.f32	s10, s0
 8008ce8:	eef0 5a60 	vmov.f32	s11, s1
 8008cec:	eeb0 6a41 	vmov.f32	s12, s2
 8008cf0:	eef0 6a61 	vmov.f32	s13, s3
 8008cf4:	eeb0 7a42 	vmov.f32	s14, s4
 8008cf8:	eef0 7a62 	vmov.f32	s15, s5
 8008cfc:	ed87 5b00 	vstr	d5, [r7]
 8008d00:	ed87 6b02 	vstr	d6, [r7, #8]
 8008d04:	ed87 7b04 	vstr	d7, [r7, #16]

    static uint32_t lastTimeBallSeen = 0;
    static uint32_t lastTime = 0;

    uint32_t timer = HAL_GetTick();
 8008d08:	f000 ffb6 	bl	8009c78 <HAL_GetTick>
 8008d0c:	63f8      	str	r0, [r7, #60]	@ 0x3c

    int ballDistance = camera[0] * 10; // convert to mm
 8008d0e:	4b9a      	ldr	r3, [pc, #616]	@ (8008f78 <findtheBall+0x2a0>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4613      	mov	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int ballAngle = camera[1];
 8008d1c:	4b96      	ldr	r3, [pc, #600]	@ (8008f78 <findtheBall+0x2a0>)
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34
    int ballExistence = camera[2];
 8008d22:	4b95      	ldr	r3, [pc, #596]	@ (8008f78 <findtheBall+0x2a0>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	633b      	str	r3, [r7, #48]	@ 0x30

    double Vx = 0.0;
 8008d28:	f04f 0200 	mov.w	r2, #0
 8008d2c:	f04f 0300 	mov.w	r3, #0
 8008d30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double Vy = 0.0;
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double W = 0.0;
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
	focusToTheBall();
 8008d4c:	f7ff fefc 	bl	8008b48 <focusToTheBall>

	if(ballExistence != 0)
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8098 	beq.w	8008e88 <findtheBall+0x1b0>
	{
		lastTimeBallSeen = timer;
 8008d58:	4a88      	ldr	r2, [pc, #544]	@ (8008f7c <findtheBall+0x2a4>)
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d5c:	6013      	str	r3, [r2, #0]
		lastTime = timer;
 8008d5e:	4a88      	ldr	r2, [pc, #544]	@ (8008f80 <findtheBall+0x2a8>)
 8008d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d62:	6013      	str	r3, [r2, #0]

		Vy = 1200;
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	4b86      	ldr	r3, [pc, #536]	@ (8008f84 <findtheBall+0x2ac>)
 8008d6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		Vx = Vy * tan(ballAngle * M_PI / 180);
 8008d6e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008d70:	f7f7 fbd8 	bl	8000524 <__aeabi_i2d>
 8008d74:	a376      	add	r3, pc, #472	@ (adr r3, 8008f50 <findtheBall+0x278>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8008f88 <findtheBall+0x2b0>)
 8008d8c:	f7f7 fd5e 	bl	800084c <__aeabi_ddiv>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	ec43 2b17 	vmov	d7, r2, r3
 8008d98:	eeb0 0a47 	vmov.f32	s0, s14
 8008d9c:	eef0 0a67 	vmov.f32	s1, s15
 8008da0:	f009 f8fa 	bl	8011f98 <tan>
 8008da4:	ec53 2b10 	vmov	r2, r3, d0
 8008da8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		W = PID_controllerH(ballAngle, 0.0, 1);
 8008db8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008dba:	f7f7 fbb3 	bl	8000524 <__aeabi_i2d>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 8008f58 <findtheBall+0x280>
 8008dc8:	ec43 2b10 	vmov	d0, r2, r3
 8008dcc:	f7ff f838 	bl	8007e40 <PID_controllerH>
 8008dd0:	ed87 0b06 	vstr	d0, [r7, #24]

		// PALING AMAN
		if (ballDistance < 1500 && fabs(ballAngle) > 4)
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	dc28      	bgt.n	8008e30 <findtheBall+0x158>
 8008dde:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008de0:	f7f7 fba0 	bl	8000524 <__aeabi_i2d>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4690      	mov	r8, r2
 8008dea:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	4b66      	ldr	r3, [pc, #408]	@ (8008f8c <findtheBall+0x2b4>)
 8008df4:	4640      	mov	r0, r8
 8008df6:	4649      	mov	r1, r9
 8008df8:	f7f7 fe8e 	bl	8000b18 <__aeabi_dcmpgt>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d016      	beq.n	8008e30 <findtheBall+0x158>
		{
			baru(0, 0, W);
 8008e02:	ed97 2b06 	vldr	d2, [r7, #24]
 8008e06:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8008f58 <findtheBall+0x280>
 8008e0a:	ed9f 0b53 	vldr	d0, [pc, #332]	@ 8008f58 <findtheBall+0x280>
 8008e0e:	f7f8 fbe3 	bl	80015d8 <baru>
			HAL_Delay(150);
 8008e12:	2096      	movs	r0, #150	@ 0x96
 8008e14:	f000 ff3c 	bl	8009c90 <HAL_Delay>
			baru(0, 0, 0);
 8008e18:	ed9f 2b4f 	vldr	d2, [pc, #316]	@ 8008f58 <findtheBall+0x280>
 8008e1c:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 8008f58 <findtheBall+0x280>
 8008e20:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8008f58 <findtheBall+0x280>
 8008e24:	f7f8 fbd8 	bl	80015d8 <baru>
			HAL_Delay(100);
 8008e28:	2064      	movs	r0, #100	@ 0x64
 8008e2a:	f000 ff31 	bl	8009c90 <HAL_Delay>
 8008e2e:	e025      	b.n	8008e7c <findtheBall+0x1a4>
		}
		else if (fabs(ballAngle) <= 4)
 8008e30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008e32:	f7f7 fb77 	bl	8000524 <__aeabi_i2d>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4614      	mov	r4, r2
 8008e3c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	4b51      	ldr	r3, [pc, #324]	@ (8008f8c <findtheBall+0x2b4>)
 8008e46:	4620      	mov	r0, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7f7 fe51 	bl	8000af0 <__aeabi_dcmple>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d008      	beq.n	8008e66 <findtheBall+0x18e>
		{
			baru(0, Vy, 0);
 8008e54:	ed9f 2b40 	vldr	d2, [pc, #256]	@ 8008f58 <findtheBall+0x280>
 8008e58:	ed97 1b08 	vldr	d1, [r7, #32]
 8008e5c:	ed9f 0b3e 	vldr	d0, [pc, #248]	@ 8008f58 <findtheBall+0x280>
 8008e60:	f7f8 fbba 	bl	80015d8 <baru>
 8008e64:	e00a      	b.n	8008e7c <findtheBall+0x1a4>
		}
		else
		{
			baru(Vx, Vy, W);
 8008e66:	ed97 2b06 	vldr	d2, [r7, #24]
 8008e6a:	ed97 1b08 	vldr	d1, [r7, #32]
 8008e6e:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8008e72:	f7f8 fbb1 	bl	80015d8 <baru>
			HAL_Delay(25);
 8008e76:	2019      	movs	r0, #25
 8008e78:	f000 ff0a 	bl	8009c90 <HAL_Delay>
		}
//		if(ballDistance < 500)
//		{
//			servo_write(35);
//		}
		setMotorSpeed(1, -1000);
 8008e7c:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8008f60 <findtheBall+0x288>
 8008e80:	2001      	movs	r0, #1
 8008e82:	f7f8 f8eb 	bl	800105c <setMotorSpeed>
//			lastTime = timer;
//			motorState = !motorState;
//			putar(0, 0, motorState ? 65 : 0);
//		}
	}
}
 8008e86:	e05e      	b.n	8008f46 <findtheBall+0x26e>
	else if (timer - lastTimeBallSeen <= 700)
 8008e88:	4b3c      	ldr	r3, [pc, #240]	@ (8008f7c <findtheBall+0x2a4>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8008e94:	d80f      	bhi.n	8008eb6 <findtheBall+0x1de>
		lastTime = timer;
 8008e96:	4a3a      	ldr	r2, [pc, #232]	@ (8008f80 <findtheBall+0x2a8>)
 8008e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9a:	6013      	str	r3, [r2, #0]
		start(0, 1200, 0, 1);
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f7f9 faf7 	bl	8002498 <start>
		setMotorSpeed(1, -1000);
 8008eaa:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 8008f60 <findtheBall+0x288>
 8008eae:	2001      	movs	r0, #1
 8008eb0:	f7f8 f8d4 	bl	800105c <setMotorSpeed>
}
 8008eb4:	e047      	b.n	8008f46 <findtheBall+0x26e>
		setMotorSpeed(1, 0);
 8008eb6:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8008f58 <findtheBall+0x280>
 8008eba:	2001      	movs	r0, #1
 8008ebc:	f7f8 f8ce 	bl	800105c <setMotorSpeed>
		switch(findBallMode)
 8008ec0:	4b33      	ldr	r3, [pc, #204]	@ (8008f90 <findtheBall+0x2b8>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d002      	beq.n	8008ece <findtheBall+0x1f6>
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d01e      	beq.n	8008f0a <findtheBall+0x232>
}
 8008ecc:	e03b      	b.n	8008f46 <findtheBall+0x26e>
			PID_setDegree(-10.0);
 8008ece:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8008f68 <findtheBall+0x290>
 8008ed2:	f7ff fe05 	bl	8008ae0 <PID_setDegree>
			HAL_Delay(200);
 8008ed6:	20c8      	movs	r0, #200	@ 0xc8
 8008ed8:	f000 feda 	bl	8009c90 <HAL_Delay>
			Inverse_Kinematics(0, 0, 0);
 8008edc:	2200      	movs	r2, #0
 8008ede:	2100      	movs	r1, #0
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	f7f8 f931 	bl	8001148 <Inverse_Kinematics>
			HAL_Delay(100);
 8008ee6:	2064      	movs	r0, #100	@ 0x64
 8008ee8:	f000 fed2 	bl	8009c90 <HAL_Delay>
			if(position.h > -20.0)
 8008eec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	4b27      	ldr	r3, [pc, #156]	@ (8008f94 <findtheBall+0x2bc>)
 8008ef6:	f7f7 fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d100      	bne.n	8008f02 <findtheBall+0x22a>
			break;
 8008f00:	e021      	b.n	8008f46 <findtheBall+0x26e>
				findBallMode = 2;
 8008f02:	4b23      	ldr	r3, [pc, #140]	@ (8008f90 <findtheBall+0x2b8>)
 8008f04:	2202      	movs	r2, #2
 8008f06:	701a      	strb	r2, [r3, #0]
			break;
 8008f08:	e01d      	b.n	8008f46 <findtheBall+0x26e>
			PID_setDegree(-170.0);
 8008f0a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8008f70 <findtheBall+0x298>
 8008f0e:	f7ff fde7 	bl	8008ae0 <PID_setDegree>
			HAL_Delay(200);
 8008f12:	20c8      	movs	r0, #200	@ 0xc8
 8008f14:	f000 febc 	bl	8009c90 <HAL_Delay>
			Inverse_Kinematics(0, 0, 0);
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f7f8 f913 	bl	8001148 <Inverse_Kinematics>
			HAL_Delay(100);
 8008f22:	2064      	movs	r0, #100	@ 0x64
 8008f24:	f000 feb4 	bl	8009c90 <HAL_Delay>
			if(position.h < -160.0)
 8008f28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	4b19      	ldr	r3, [pc, #100]	@ (8008f98 <findtheBall+0x2c0>)
 8008f32:	f7f7 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d100      	bne.n	8008f3e <findtheBall+0x266>
			break;
 8008f3c:	e002      	b.n	8008f44 <findtheBall+0x26c>
				findBallMode = 1;
 8008f3e:	4b14      	ldr	r3, [pc, #80]	@ (8008f90 <findtheBall+0x2b8>)
 8008f40:	2201      	movs	r2, #1
 8008f42:	701a      	strb	r2, [r3, #0]
			break;
 8008f44:	bf00      	nop
}
 8008f46:	bf00      	nop
 8008f48:	3740      	adds	r7, #64	@ 0x40
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008f50:	54442d18 	.word	0x54442d18
 8008f54:	400921fb 	.word	0x400921fb
	...
 8008f64:	c08f4000 	.word	0xc08f4000
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	c0240000 	.word	0xc0240000
 8008f70:	00000000 	.word	0x00000000
 8008f74:	c0654000 	.word	0xc0654000
 8008f78:	2000058c 	.word	0x2000058c
 8008f7c:	200006d8 	.word	0x200006d8
 8008f80:	200006dc 	.word	0x200006dc
 8008f84:	4092c000 	.word	0x4092c000
 8008f88:	40668000 	.word	0x40668000
 8008f8c:	40100000 	.word	0x40100000
 8008f90:	200000e0 	.word	0x200000e0
 8008f94:	c0340000 	.word	0xc0340000
 8008f98:	c0640000 	.word	0xc0640000
 8008f9c:	00000000 	.word	0x00000000

08008fa0 <findSilo>:

void findSilo()
{
 8008fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa4:	b0a2      	sub	sp, #136	@ 0x88
 8008fa6:	af00      	add	r7, sp, #0
     */

    static uint32_t lastTimeSiloSeen = 0;
    static uint32_t lastTime = 0;

    EKF position = extendedKalmanFilter();
 8008fa8:	f7fd fb2a 	bl	8006600 <extendedKalmanFilter>
 8008fac:	eeb0 5a40 	vmov.f32	s10, s0
 8008fb0:	eef0 5a60 	vmov.f32	s11, s1
 8008fb4:	eeb0 6a41 	vmov.f32	s12, s2
 8008fb8:	eef0 6a61 	vmov.f32	s13, s3
 8008fbc:	eeb0 7a42 	vmov.f32	s14, s4
 8008fc0:	eef0 7a62 	vmov.f32	s15, s5
 8008fc4:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8008fc8:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8008fcc:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    uint32_t timer = HAL_GetTick();
 8008fd0:	f000 fe52 	bl	8009c78 <HAL_GetTick>
 8008fd4:	64f8      	str	r0, [r7, #76]	@ 0x4c

    // Read distances and angles for the five silos
    int siloDistances[5] = {camera[3] * 10, camera[5] * 10, camera[7] * 10, camera[9] * 10, camera[11] * 10}; // convert to mm
 8008fd6:	4b22      	ldr	r3, [pc, #136]	@ (8009060 <findSilo+0xc0>)
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8009060 <findSilo+0xc0>)
 8008fe6:	695a      	ldr	r2, [r3, #20]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8009060 <findSilo+0xc0>)
 8008ff4:	69da      	ldr	r2, [r3, #28]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	4b17      	ldr	r3, [pc, #92]	@ (8009060 <findSilo+0xc0>)
 8009002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	623b      	str	r3, [r7, #32]
 800900e:	4b14      	ldr	r3, [pc, #80]	@ (8009060 <findSilo+0xc0>)
 8009010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24
    int siloAngles[5] = {camera[4], camera[6], camera[8], camera[10], camera[12]};
 800901c:	4b10      	ldr	r3, [pc, #64]	@ (8009060 <findSilo+0xc0>)
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	4b0f      	ldr	r3, [pc, #60]	@ (8009060 <findSilo+0xc0>)
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	4b0d      	ldr	r3, [pc, #52]	@ (8009060 <findSilo+0xc0>)
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	60bb      	str	r3, [r7, #8]
 800902e:	4b0c      	ldr	r3, [pc, #48]	@ (8009060 <findSilo+0xc0>)
 8009030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	4b0a      	ldr	r3, [pc, #40]	@ (8009060 <findSilo+0xc0>)
 8009036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009038:	613b      	str	r3, [r7, #16]

    int xSILO = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	64bb      	str	r3, [r7, #72]	@ 0x48
    int ySILO = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	647b      	str	r3, [r7, #68]	@ 0x44
    double siloAngle = 0.0;
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    int siloDistance = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int closestSiloIndex = -1;
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Find the closest detected silo by angle
    for (int i = 0; i < 5; i++)
 8009058:	2300      	movs	r3, #0
 800905a:	677b      	str	r3, [r7, #116]	@ 0x74
 800905c:	e029      	b.n	80090b2 <findSilo+0x112>
 800905e:	bf00      	nop
 8009060:	2000058c 	.word	0x2000058c
    {
        if (siloDistances[i] != 99990 && (closestSiloIndex == -1 || abs(siloAngles[i]) < abs(siloAngles[closestSiloIndex])))
 8009064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	3388      	adds	r3, #136	@ 0x88
 800906a:	443b      	add	r3, r7
 800906c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8009070:	4abb      	ldr	r2, [pc, #748]	@ (8009360 <findSilo+0x3c0>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d01a      	beq.n	80090ac <findSilo+0x10c>
 8009076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d014      	beq.n	80090a8 <findSilo+0x108>
 800907e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	3388      	adds	r3, #136	@ 0x88
 8009084:	443b      	add	r3, r7
 8009086:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800908a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800908e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	3388      	adds	r3, #136	@ 0x88
 8009098:	443b      	add	r3, r7
 800909a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bfb8      	it	lt
 80090a2:	425b      	neglt	r3, r3
 80090a4:	429a      	cmp	r2, r3
 80090a6:	da01      	bge.n	80090ac <findSilo+0x10c>
        {
            closestSiloIndex = i;
 80090a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 5; i++)
 80090ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090ae:	3301      	adds	r3, #1
 80090b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80090b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	ddd5      	ble.n	8009064 <findSilo+0xc4>
        }
    }

    if (closestSiloIndex != -1)
 80090b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090be:	d06d      	beq.n	800919c <findSilo+0x1fc>
    {
        siloAngle = siloAngles[closestSiloIndex];
 80090c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	3388      	adds	r3, #136	@ 0x88
 80090c6:	443b      	add	r3, r7
 80090c8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7f7 fa29 	bl	8000524 <__aeabi_i2d>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        siloDistance = siloDistances[closestSiloIndex];
 80090da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	3388      	adds	r3, #136	@ 0x88
 80090e0:	443b      	add	r3, r7
 80090e2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80090e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        xSILO = sin(siloAngle * M_PI / 180) * siloDistance;
 80090e8:	a399      	add	r3, pc, #612	@ (adr r3, 8009350 <findSilo+0x3b0>)
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80090f2:	f7f7 fa81 	bl	80005f8 <__aeabi_dmul>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4610      	mov	r0, r2
 80090fc:	4619      	mov	r1, r3
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	4b98      	ldr	r3, [pc, #608]	@ (8009364 <findSilo+0x3c4>)
 8009104:	f7f7 fba2 	bl	800084c <__aeabi_ddiv>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	ec43 2b17 	vmov	d7, r2, r3
 8009110:	eeb0 0a47 	vmov.f32	s0, s14
 8009114:	eef0 0a67 	vmov.f32	s1, s15
 8009118:	f008 feea 	bl	8011ef0 <sin>
 800911c:	ec5b ab10 	vmov	sl, fp, d0
 8009120:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009122:	f7f7 f9ff 	bl	8000524 <__aeabi_i2d>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4650      	mov	r0, sl
 800912c:	4659      	mov	r1, fp
 800912e:	f7f7 fa63 	bl	80005f8 <__aeabi_dmul>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4610      	mov	r0, r2
 8009138:	4619      	mov	r1, r3
 800913a:	f7f7 fd0d 	bl	8000b58 <__aeabi_d2iz>
 800913e:	4603      	mov	r3, r0
 8009140:	64bb      	str	r3, [r7, #72]	@ 0x48
        ySILO = cos(siloAngle * M_PI / 180) * siloDistance;
 8009142:	a383      	add	r3, pc, #524	@ (adr r3, 8009350 <findSilo+0x3b0>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800914c:	f7f7 fa54 	bl	80005f8 <__aeabi_dmul>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4610      	mov	r0, r2
 8009156:	4619      	mov	r1, r3
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	4b81      	ldr	r3, [pc, #516]	@ (8009364 <findSilo+0x3c4>)
 800915e:	f7f7 fb75 	bl	800084c <__aeabi_ddiv>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	ec43 2b17 	vmov	d7, r2, r3
 800916a:	eeb0 0a47 	vmov.f32	s0, s14
 800916e:	eef0 0a67 	vmov.f32	s1, s15
 8009172:	f008 fe69 	bl	8011e48 <cos>
 8009176:	ec5b ab10 	vmov	sl, fp, d0
 800917a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800917c:	f7f7 f9d2 	bl	8000524 <__aeabi_i2d>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4650      	mov	r0, sl
 8009186:	4659      	mov	r1, fp
 8009188:	f7f7 fa36 	bl	80005f8 <__aeabi_dmul>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4610      	mov	r0, r2
 8009192:	4619      	mov	r1, r3
 8009194:	f7f7 fce0 	bl	8000b58 <__aeabi_d2iz>
 8009198:	4603      	mov	r3, r0
 800919a:	647b      	str	r3, [r7, #68]	@ 0x44
    }

//    int frontDistance = sensorMEGA[0];
//    int leftDistance = sensorMEGA[1];

    double Vx = 0.0;
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    double Vy = 0.0;
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	f04f 0300 	mov.w	r3, #0
 80091b0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    double W = 0.0;
 80091b4:	f04f 0200 	mov.w	r2, #0
 80091b8:	f04f 0300 	mov.w	r3, #0
 80091bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    servo_write(80);
 80091c0:	2050      	movs	r0, #80	@ 0x50
 80091c2:	f7ff fbeb 	bl	800899c <servo_write>

    if (closestSiloIndex != -1 && siloDistance != 99990)
 80091c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	f000 80ad 	beq.w	800932a <findSilo+0x38a>
 80091d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80091d2:	4a63      	ldr	r2, [pc, #396]	@ (8009360 <findSilo+0x3c0>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	f000 80a8 	beq.w	800932a <findSilo+0x38a>
    {
        lastTimeSiloSeen = timer;
 80091da:	4a63      	ldr	r2, [pc, #396]	@ (8009368 <findSilo+0x3c8>)
 80091dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091de:	6013      	str	r3, [r2, #0]
        lastTime = timer;
 80091e0:	4a62      	ldr	r2, [pc, #392]	@ (800936c <findSilo+0x3cc>)
 80091e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e4:	6013      	str	r3, [r2, #0]

        double tuning = 1.0;
 80091e6:	f04f 0200 	mov.w	r2, #0
 80091ea:	4b61      	ldr	r3, [pc, #388]	@ (8009370 <findSilo+0x3d0>)
 80091ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
        if(siloAngle <= 20) {tuning = 2.0;}
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009374 <findSilo+0x3d4>)
 80091f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091fa:	f7f7 fc79 	bl	8000af0 <__aeabi_dcmple>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <findSilo+0x270>
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800920c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
        Vy = 900;
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	4b58      	ldr	r3, [pc, #352]	@ (8009378 <findSilo+0x3d8>)
 8009216:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        Vx = Vy * tan(siloAngle * M_PI / 180) * tuning;
 800921a:	a34d      	add	r3, pc, #308	@ (adr r3, 8009350 <findSilo+0x3b0>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009224:	f7f7 f9e8 	bl	80005f8 <__aeabi_dmul>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4610      	mov	r0, r2
 800922e:	4619      	mov	r1, r3
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	4b4b      	ldr	r3, [pc, #300]	@ (8009364 <findSilo+0x3c4>)
 8009236:	f7f7 fb09 	bl	800084c <__aeabi_ddiv>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	ec43 2b17 	vmov	d7, r2, r3
 8009242:	eeb0 0a47 	vmov.f32	s0, s14
 8009246:	eef0 0a67 	vmov.f32	s1, s15
 800924a:	f008 fea5 	bl	8011f98 <tan>
 800924e:	ec51 0b10 	vmov	r0, r1, d0
 8009252:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009256:	f7f7 f9cf 	bl	80005f8 <__aeabi_dmul>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009262:	f7f7 f9c9 	bl	80005f8 <__aeabi_dmul>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    	W = PID_controllerH(90.0, position.h, 2);
 800926e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8009272:	2002      	movs	r0, #2
 8009274:	eeb0 1a47 	vmov.f32	s2, s14
 8009278:	eef0 1a67 	vmov.f32	s3, s15
 800927c:	ed9f 0b36 	vldr	d0, [pc, #216]	@ 8009358 <findSilo+0x3b8>
 8009280:	f7fe fdde 	bl	8007e40 <PID_controllerH>
 8009284:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58

    	if(fabs(90.0 - position.h) >= 10)		{Vx = 0; Vy = 0;}
 8009288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800928c:	f04f 0000 	mov.w	r0, #0
 8009290:	493a      	ldr	r1, [pc, #232]	@ (800937c <findSilo+0x3dc>)
 8009292:	f7f6 fff9 	bl	8000288 <__aeabi_dsub>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4690      	mov	r8, r2
 800929c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	4b36      	ldr	r3, [pc, #216]	@ (8009380 <findSilo+0x3e0>)
 80092a6:	4640      	mov	r0, r8
 80092a8:	4649      	mov	r1, r9
 80092aa:	f7f7 fc2b 	bl	8000b04 <__aeabi_dcmpge>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00c      	beq.n	80092ce <findSilo+0x32e>
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	f04f 0300 	mov.w	r3, #0
 80092bc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	f04f 0300 	mov.w	r3, #0
 80092c8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80092cc:	e023      	b.n	8009316 <findSilo+0x376>
    	else if(fabs(siloAngle) >= 2)			{Vy = 0; W = 0;}
 80092ce:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
 80092d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092d6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 fc0d 	bl	8000b04 <__aeabi_dcmpge>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00c      	beq.n	800930a <findSilo+0x36a>
 80092f0:	f04f 0200 	mov.w	r2, #0
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8009308:	e005      	b.n	8009316 <findSilo+0x376>
    	else									{W = 0;}
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    	baru(Vx, Vy, W);
 8009316:	ed97 2b16 	vldr	d2, [r7, #88]	@ 0x58
 800931a:	ed97 1b18 	vldr	d1, [r7, #96]	@ 0x60
 800931e:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8009322:	f7f8 f959 	bl	80015d8 <baru>
    {
 8009326:	bf00      	nop
        	lastTime = timer;
            motorState = !motorState;
            Inverse_Kinematics(motorState ? 800 : -800, 0, 0);
        }
	}
}
 8009328:	e05c      	b.n	80093e4 <findSilo+0x444>
	else if (timer - lastTimeSiloSeen <= 3000)
 800932a:	4b0f      	ldr	r3, [pc, #60]	@ (8009368 <findSilo+0x3c8>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8009336:	4293      	cmp	r3, r2
 8009338:	d824      	bhi.n	8009384 <findSilo+0x3e4>
		lastTimeSiloSeen = timer;
 800933a:	4a0b      	ldr	r2, [pc, #44]	@ (8009368 <findSilo+0x3c8>)
 800933c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800933e:	6013      	str	r3, [r2, #0]
		start(0, 800, 0, 1);
 8009340:	2301      	movs	r3, #1
 8009342:	2200      	movs	r2, #0
 8009344:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8009348:	2000      	movs	r0, #0
 800934a:	f7f9 f8a5 	bl	8002498 <start>
}
 800934e:	e049      	b.n	80093e4 <findSilo+0x444>
 8009350:	54442d18 	.word	0x54442d18
 8009354:	400921fb 	.word	0x400921fb
 8009358:	00000000 	.word	0x00000000
 800935c:	40568000 	.word	0x40568000
 8009360:	00018696 	.word	0x00018696
 8009364:	40668000 	.word	0x40668000
 8009368:	200006e0 	.word	0x200006e0
 800936c:	200006e4 	.word	0x200006e4
 8009370:	3ff00000 	.word	0x3ff00000
 8009374:	40340000 	.word	0x40340000
 8009378:	408c2000 	.word	0x408c2000
 800937c:	40568000 	.word	0x40568000
 8009380:	40240000 	.word	0x40240000
        setMotorSpeed(1, 0);
 8009384:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 80093f0 <findSilo+0x450>
 8009388:	2001      	movs	r0, #1
 800938a:	f7f7 fe67 	bl	800105c <setMotorSpeed>
        setMotorSpeed(2, 0);
 800938e:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 80093f0 <findSilo+0x450>
 8009392:	2002      	movs	r0, #2
 8009394:	f7f7 fe62 	bl	800105c <setMotorSpeed>
        if (timer - lastTime >= 500)
 8009398:	4b17      	ldr	r3, [pc, #92]	@ (80093f8 <findSilo+0x458>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80093a4:	d31e      	bcc.n	80093e4 <findSilo+0x444>
        	lastTime = timer;
 80093a6:	4a14      	ldr	r2, [pc, #80]	@ (80093f8 <findSilo+0x458>)
 80093a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093aa:	6013      	str	r3, [r2, #0]
            motorState = !motorState;
 80093ac:	4b13      	ldr	r3, [pc, #76]	@ (80093fc <findSilo+0x45c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f083 0301 	eor.w	r3, r3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	4b0d      	ldr	r3, [pc, #52]	@ (80093fc <findSilo+0x45c>)
 80093c8:	701a      	strb	r2, [r3, #0]
            Inverse_Kinematics(motorState ? 800 : -800, 0, 0);
 80093ca:	4b0c      	ldr	r3, [pc, #48]	@ (80093fc <findSilo+0x45c>)
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <findSilo+0x438>
 80093d2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80093d6:	e000      	b.n	80093da <findSilo+0x43a>
 80093d8:	4b09      	ldr	r3, [pc, #36]	@ (8009400 <findSilo+0x460>)
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f7 feb2 	bl	8001148 <Inverse_Kinematics>
}
 80093e4:	bf00      	nop
 80093e6:	3788      	adds	r7, #136	@ 0x88
 80093e8:	46bd      	mov	sp, r7
 80093ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093ee:	bf00      	nop
	...
 80093f8:	200006e4 	.word	0x200006e4
 80093fc:	200006e8 	.word	0x200006e8
 8009400:	fffffce0 	.word	0xfffffce0

08009404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800940a:	2300      	movs	r3, #0
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	4b10      	ldr	r3, [pc, #64]	@ (8009450 <HAL_MspInit+0x4c>)
 8009410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009412:	4a0f      	ldr	r2, [pc, #60]	@ (8009450 <HAL_MspInit+0x4c>)
 8009414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009418:	6453      	str	r3, [r2, #68]	@ 0x44
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <HAL_MspInit+0x4c>)
 800941c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800941e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009422:	607b      	str	r3, [r7, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009426:	2300      	movs	r3, #0
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	4b09      	ldr	r3, [pc, #36]	@ (8009450 <HAL_MspInit+0x4c>)
 800942c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942e:	4a08      	ldr	r2, [pc, #32]	@ (8009450 <HAL_MspInit+0x4c>)
 8009430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009434:	6413      	str	r3, [r2, #64]	@ 0x40
 8009436:	4b06      	ldr	r3, [pc, #24]	@ (8009450 <HAL_MspInit+0x4c>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8009442:	2007      	movs	r0, #7
 8009444:	f000 fd18 	bl	8009e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	40023800 	.word	0x40023800

08009454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08a      	sub	sp, #40	@ 0x28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800945c:	f107 0314 	add.w	r3, r7, #20
 8009460:	2200      	movs	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	605a      	str	r2, [r3, #4]
 8009466:	609a      	str	r2, [r3, #8]
 8009468:	60da      	str	r2, [r3, #12]
 800946a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a19      	ldr	r2, [pc, #100]	@ (80094d8 <HAL_I2C_MspInit+0x84>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d12c      	bne.n	80094d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009476:	2300      	movs	r3, #0
 8009478:	613b      	str	r3, [r7, #16]
 800947a:	4b18      	ldr	r3, [pc, #96]	@ (80094dc <HAL_I2C_MspInit+0x88>)
 800947c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947e:	4a17      	ldr	r2, [pc, #92]	@ (80094dc <HAL_I2C_MspInit+0x88>)
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	6313      	str	r3, [r2, #48]	@ 0x30
 8009486:	4b15      	ldr	r3, [pc, #84]	@ (80094dc <HAL_I2C_MspInit+0x88>)
 8009488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009492:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009498:	2312      	movs	r3, #18
 800949a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800949c:	2300      	movs	r3, #0
 800949e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094a0:	2303      	movs	r3, #3
 80094a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80094a4:	2304      	movs	r3, #4
 80094a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094a8:	f107 0314 	add.w	r3, r7, #20
 80094ac:	4619      	mov	r1, r3
 80094ae:	480c      	ldr	r0, [pc, #48]	@ (80094e0 <HAL_I2C_MspInit+0x8c>)
 80094b0:	f000 fdb6 	bl	800a020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	4b08      	ldr	r3, [pc, #32]	@ (80094dc <HAL_I2C_MspInit+0x88>)
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	4a07      	ldr	r2, [pc, #28]	@ (80094dc <HAL_I2C_MspInit+0x88>)
 80094be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80094c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80094c4:	4b05      	ldr	r3, [pc, #20]	@ (80094dc <HAL_I2C_MspInit+0x88>)
 80094c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094cc:	60fb      	str	r3, [r7, #12]
 80094ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80094d0:	bf00      	nop
 80094d2:	3728      	adds	r7, #40	@ 0x28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40005800 	.word	0x40005800
 80094dc:	40023800 	.word	0x40023800
 80094e0:	40020400 	.word	0x40020400

080094e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a2a      	ldr	r2, [pc, #168]	@ (800959c <HAL_TIM_Base_MspInit+0xb8>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d116      	bne.n	8009524 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	4b29      	ldr	r3, [pc, #164]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 80094fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094fe:	4a28      	ldr	r2, [pc, #160]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 8009500:	f043 0301 	orr.w	r3, r3, #1
 8009504:	6453      	str	r3, [r2, #68]	@ 0x44
 8009506:	4b26      	ldr	r3, [pc, #152]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 8009508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8009512:	2200      	movs	r2, #0
 8009514:	2100      	movs	r1, #0
 8009516:	201b      	movs	r0, #27
 8009518:	f000 fcb9 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800951c:	201b      	movs	r0, #27
 800951e:	f000 fcd2 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8009522:	e036      	b.n	8009592 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800952c:	d116      	bne.n	800955c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800952e:	2300      	movs	r3, #0
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	4b1b      	ldr	r3, [pc, #108]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 8009534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009536:	4a1a      	ldr	r2, [pc, #104]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6413      	str	r3, [r2, #64]	@ 0x40
 800953e:	4b18      	ldr	r3, [pc, #96]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	201c      	movs	r0, #28
 8009550:	f000 fc9d 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009554:	201c      	movs	r0, #28
 8009556:	f000 fcb6 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
}
 800955a:	e01a      	b.n	8009592 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a10      	ldr	r2, [pc, #64]	@ (80095a4 <HAL_TIM_Base_MspInit+0xc0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d115      	bne.n	8009592 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	4b0d      	ldr	r3, [pc, #52]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 800956c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800956e:	4a0c      	ldr	r2, [pc, #48]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 8009570:	f043 0302 	orr.w	r3, r3, #2
 8009574:	6453      	str	r3, [r2, #68]	@ 0x44
 8009576:	4b0a      	ldr	r3, [pc, #40]	@ (80095a0 <HAL_TIM_Base_MspInit+0xbc>)
 8009578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8009582:	2200      	movs	r2, #0
 8009584:	2100      	movs	r1, #0
 8009586:	202e      	movs	r0, #46	@ 0x2e
 8009588:	f000 fc81 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800958c:	202e      	movs	r0, #46	@ 0x2e
 800958e:	f000 fc9a 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
}
 8009592:	bf00      	nop
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	40010000 	.word	0x40010000
 80095a0:	40023800 	.word	0x40023800
 80095a4:	40010400 	.word	0x40010400

080095a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	@ 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b0:	f107 0314 	add.w	r3, r7, #20
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	605a      	str	r2, [r3, #4]
 80095ba:	609a      	str	r2, [r3, #8]
 80095bc:	60da      	str	r2, [r3, #12]
 80095be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a37      	ldr	r2, [pc, #220]	@ (80096a4 <HAL_TIM_MspPostInit+0xfc>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d11f      	bne.n	800960a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80095ca:	2300      	movs	r3, #0
 80095cc:	613b      	str	r3, [r7, #16]
 80095ce:	4b36      	ldr	r3, [pc, #216]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d2:	4a35      	ldr	r2, [pc, #212]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 80095d4:	f043 0310 	orr.w	r3, r3, #16
 80095d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80095da:	4b33      	ldr	r3, [pc, #204]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 80095dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80095e6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80095ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80095ec:	2312      	movs	r3, #18
 80095ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80095f0:	2302      	movs	r3, #2
 80095f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095f4:	2303      	movs	r3, #3
 80095f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80095f8:	2301      	movs	r3, #1
 80095fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80095fc:	f107 0314 	add.w	r3, r7, #20
 8009600:	4619      	mov	r1, r3
 8009602:	482a      	ldr	r0, [pc, #168]	@ (80096ac <HAL_TIM_MspPostInit+0x104>)
 8009604:	f000 fd0c 	bl	800a020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009608:	e047      	b.n	800969a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009612:	d11e      	bne.n	8009652 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	4b23      	ldr	r3, [pc, #140]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 800961a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961c:	4a22      	ldr	r2, [pc, #136]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 800961e:	f043 0301 	orr.w	r3, r3, #1
 8009622:	6313      	str	r3, [r2, #48]	@ 0x30
 8009624:	4b20      	ldr	r3, [pc, #128]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 8009626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009630:	2308      	movs	r3, #8
 8009632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009634:	2312      	movs	r3, #18
 8009636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009638:	2302      	movs	r3, #2
 800963a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800963c:	2303      	movs	r3, #3
 800963e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009640:	2301      	movs	r3, #1
 8009642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009644:	f107 0314 	add.w	r3, r7, #20
 8009648:	4619      	mov	r1, r3
 800964a:	4819      	ldr	r0, [pc, #100]	@ (80096b0 <HAL_TIM_MspPostInit+0x108>)
 800964c:	f000 fce8 	bl	800a020 <HAL_GPIO_Init>
}
 8009650:	e023      	b.n	800969a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a17      	ldr	r2, [pc, #92]	@ (80096b4 <HAL_TIM_MspPostInit+0x10c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d11e      	bne.n	800969a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800965c:	2300      	movs	r3, #0
 800965e:	60bb      	str	r3, [r7, #8]
 8009660:	4b11      	ldr	r3, [pc, #68]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 8009662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009664:	4a10      	ldr	r2, [pc, #64]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 8009666:	f043 0304 	orr.w	r3, r3, #4
 800966a:	6313      	str	r3, [r2, #48]	@ 0x30
 800966c:	4b0e      	ldr	r3, [pc, #56]	@ (80096a8 <HAL_TIM_MspPostInit+0x100>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	60bb      	str	r3, [r7, #8]
 8009676:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009678:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800967c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800967e:	2312      	movs	r3, #18
 8009680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009682:	2302      	movs	r3, #2
 8009684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009686:	2303      	movs	r3, #3
 8009688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800968a:	2303      	movs	r3, #3
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800968e:	f107 0314 	add.w	r3, r7, #20
 8009692:	4619      	mov	r1, r3
 8009694:	4808      	ldr	r0, [pc, #32]	@ (80096b8 <HAL_TIM_MspPostInit+0x110>)
 8009696:	f000 fcc3 	bl	800a020 <HAL_GPIO_Init>
}
 800969a:	bf00      	nop
 800969c:	3728      	adds	r7, #40	@ 0x28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40023800 	.word	0x40023800
 80096ac:	40021000 	.word	0x40021000
 80096b0:	40020000 	.word	0x40020000
 80096b4:	40010400 	.word	0x40010400
 80096b8:	40020800 	.word	0x40020800

080096bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08e      	sub	sp, #56	@ 0x38
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	605a      	str	r2, [r3, #4]
 80096ce:	609a      	str	r2, [r3, #8]
 80096d0:	60da      	str	r2, [r3, #12]
 80096d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a57      	ldr	r2, [pc, #348]	@ (8009838 <HAL_UART_MspInit+0x17c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d134      	bne.n	8009748 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80096de:	2300      	movs	r3, #0
 80096e0:	623b      	str	r3, [r7, #32]
 80096e2:	4b56      	ldr	r3, [pc, #344]	@ (800983c <HAL_UART_MspInit+0x180>)
 80096e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e6:	4a55      	ldr	r2, [pc, #340]	@ (800983c <HAL_UART_MspInit+0x180>)
 80096e8:	f043 0310 	orr.w	r3, r3, #16
 80096ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80096ee:	4b53      	ldr	r3, [pc, #332]	@ (800983c <HAL_UART_MspInit+0x180>)
 80096f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	623b      	str	r3, [r7, #32]
 80096f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
 80096fe:	4b4f      	ldr	r3, [pc, #316]	@ (800983c <HAL_UART_MspInit+0x180>)
 8009700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009702:	4a4e      	ldr	r2, [pc, #312]	@ (800983c <HAL_UART_MspInit+0x180>)
 8009704:	f043 0302 	orr.w	r3, r3, #2
 8009708:	6313      	str	r3, [r2, #48]	@ 0x30
 800970a:	4b4c      	ldr	r3, [pc, #304]	@ (800983c <HAL_UART_MspInit+0x180>)
 800970c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009716:	23c0      	movs	r3, #192	@ 0xc0
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800971a:	2302      	movs	r3, #2
 800971c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800971e:	2300      	movs	r3, #0
 8009720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009722:	2303      	movs	r3, #3
 8009724:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009726:	2307      	movs	r3, #7
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800972a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800972e:	4619      	mov	r1, r3
 8009730:	4843      	ldr	r0, [pc, #268]	@ (8009840 <HAL_UART_MspInit+0x184>)
 8009732:	f000 fc75 	bl	800a020 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	2025      	movs	r0, #37	@ 0x25
 800973c:	f000 fba7 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009740:	2025      	movs	r0, #37	@ 0x25
 8009742:	f000 fbc0 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009746:	e073      	b.n	8009830 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a3d      	ldr	r2, [pc, #244]	@ (8009844 <HAL_UART_MspInit+0x188>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d134      	bne.n	80097bc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009752:	2300      	movs	r3, #0
 8009754:	61bb      	str	r3, [r7, #24]
 8009756:	4b39      	ldr	r3, [pc, #228]	@ (800983c <HAL_UART_MspInit+0x180>)
 8009758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975a:	4a38      	ldr	r2, [pc, #224]	@ (800983c <HAL_UART_MspInit+0x180>)
 800975c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009760:	6413      	str	r3, [r2, #64]	@ 0x40
 8009762:	4b36      	ldr	r3, [pc, #216]	@ (800983c <HAL_UART_MspInit+0x180>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800976a:	61bb      	str	r3, [r7, #24]
 800976c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	4b32      	ldr	r3, [pc, #200]	@ (800983c <HAL_UART_MspInit+0x180>)
 8009774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009776:	4a31      	ldr	r2, [pc, #196]	@ (800983c <HAL_UART_MspInit+0x180>)
 8009778:	f043 0308 	orr.w	r3, r3, #8
 800977c:	6313      	str	r3, [r2, #48]	@ 0x30
 800977e:	4b2f      	ldr	r3, [pc, #188]	@ (800983c <HAL_UART_MspInit+0x180>)
 8009780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009782:	f003 0308 	and.w	r3, r3, #8
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800978a:	2360      	movs	r3, #96	@ 0x60
 800978c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978e:	2302      	movs	r3, #2
 8009790:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	2300      	movs	r3, #0
 8009794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009796:	2303      	movs	r3, #3
 8009798:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800979a:	2307      	movs	r3, #7
 800979c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800979e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097a2:	4619      	mov	r1, r3
 80097a4:	4828      	ldr	r0, [pc, #160]	@ (8009848 <HAL_UART_MspInit+0x18c>)
 80097a6:	f000 fc3b 	bl	800a020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80097aa:	2200      	movs	r2, #0
 80097ac:	2100      	movs	r1, #0
 80097ae:	2026      	movs	r0, #38	@ 0x26
 80097b0:	f000 fb6d 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80097b4:	2026      	movs	r0, #38	@ 0x26
 80097b6:	f000 fb86 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
}
 80097ba:	e039      	b.n	8009830 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a22      	ldr	r2, [pc, #136]	@ (800984c <HAL_UART_MspInit+0x190>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d134      	bne.n	8009830 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 80097c6:	2300      	movs	r3, #0
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	4b1c      	ldr	r3, [pc, #112]	@ (800983c <HAL_UART_MspInit+0x180>)
 80097cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ce:	4a1b      	ldr	r2, [pc, #108]	@ (800983c <HAL_UART_MspInit+0x180>)
 80097d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80097d6:	4b19      	ldr	r3, [pc, #100]	@ (800983c <HAL_UART_MspInit+0x180>)
 80097d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097de:	613b      	str	r3, [r7, #16]
 80097e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097e2:	2300      	movs	r3, #0
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	4b15      	ldr	r3, [pc, #84]	@ (800983c <HAL_UART_MspInit+0x180>)
 80097e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ea:	4a14      	ldr	r2, [pc, #80]	@ (800983c <HAL_UART_MspInit+0x180>)
 80097ec:	f043 0304 	orr.w	r3, r3, #4
 80097f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80097f2:	4b12      	ldr	r3, [pc, #72]	@ (800983c <HAL_UART_MspInit+0x180>)
 80097f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80097fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009804:	2302      	movs	r3, #2
 8009806:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009808:	2300      	movs	r3, #0
 800980a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800980c:	2303      	movs	r3, #3
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009810:	2307      	movs	r3, #7
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009818:	4619      	mov	r1, r3
 800981a:	480d      	ldr	r0, [pc, #52]	@ (8009850 <HAL_UART_MspInit+0x194>)
 800981c:	f000 fc00 	bl	800a020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	2027      	movs	r0, #39	@ 0x27
 8009826:	f000 fb32 	bl	8009e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800982a:	2027      	movs	r0, #39	@ 0x27
 800982c:	f000 fb4b 	bl	8009ec6 <HAL_NVIC_EnableIRQ>
}
 8009830:	bf00      	nop
 8009832:	3738      	adds	r7, #56	@ 0x38
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	40011000 	.word	0x40011000
 800983c:	40023800 	.word	0x40023800
 8009840:	40020400 	.word	0x40020400
 8009844:	40004400 	.word	0x40004400
 8009848:	40020c00 	.word	0x40020c00
 800984c:	40004800 	.word	0x40004800
 8009850:	40020800 	.word	0x40020800

08009854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <NMI_Handler+0x4>

0800985c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009860:	bf00      	nop
 8009862:	e7fd      	b.n	8009860 <HardFault_Handler+0x4>

08009864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009868:	bf00      	nop
 800986a:	e7fd      	b.n	8009868 <MemManage_Handler+0x4>

0800986c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009870:	bf00      	nop
 8009872:	e7fd      	b.n	8009870 <BusFault_Handler+0x4>

08009874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009878:	bf00      	nop
 800987a:	e7fd      	b.n	8009878 <UsageFault_Handler+0x4>

0800987c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009880:	bf00      	nop
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800988a:	b480      	push	{r7}
 800988c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800988e:	bf00      	nop
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800989c:	bf00      	nop
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80098aa:	f000 f9d1 	bl	8009c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80098ae:	bf00      	nop
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 80098b6:	2001      	movs	r0, #1
 80098b8:	f000 fd80 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80098bc:	bf00      	nop
 80098be:	bd80      	pop	{r7, pc}

080098c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 80098c4:	2002      	movs	r0, #2
 80098c6:	f000 fd79 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80098ca:	bf00      	nop
 80098cc:	bd80      	pop	{r7, pc}

080098ce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 80098d2:	2004      	movs	r0, #4
 80098d4:	f000 fd72 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}

080098dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 80098e0:	2008      	movs	r0, #8
 80098e2:	f000 fd6b 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80098e6:	bf00      	nop
 80098e8:	bd80      	pop	{r7, pc}

080098ea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 80098ee:	2020      	movs	r0, #32
 80098f0:	f000 fd64 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80098f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80098f8:	f000 fd60 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80098fc:	bf00      	nop
 80098fe:	bd80      	pop	{r7, pc}

08009900 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009904:	4802      	ldr	r0, [pc, #8]	@ (8009910 <TIM1_CC_IRQHandler+0x10>)
 8009906:	f002 f865 	bl	800b9d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800990a:	bf00      	nop
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000338 	.word	0x20000338

08009914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009918:	4802      	ldr	r0, [pc, #8]	@ (8009924 <TIM2_IRQHandler+0x10>)
 800991a:	f002 f85b 	bl	800b9d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800991e:	bf00      	nop
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000380 	.word	0x20000380

08009928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800992c:	4802      	ldr	r0, [pc, #8]	@ (8009938 <USART1_IRQHandler+0x10>)
 800992e:	f002 ff71 	bl	800c814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009932:	bf00      	nop
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20000410 	.word	0x20000410

0800993c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009940:	4802      	ldr	r0, [pc, #8]	@ (800994c <USART2_IRQHandler+0x10>)
 8009942:	f002 ff67 	bl	800c814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009946:	bf00      	nop
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20000458 	.word	0x20000458

08009950 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009954:	4802      	ldr	r0, [pc, #8]	@ (8009960 <USART3_IRQHandler+0x10>)
 8009956:	f002 ff5d 	bl	800c814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800995a:	bf00      	nop
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	200004a0 	.word	0x200004a0

08009964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8009968:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800996c:	f000 fd26 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8009970:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009974:	f000 fd22 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 8009978:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800997c:	f000 fd1e 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8009980:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009984:	f000 fd1a 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8009988:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800998c:	f000 fd16 	bl	800a3bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009990:	bf00      	nop
 8009992:	bd80      	pop	{r7, pc}

08009994 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009998:	4802      	ldr	r0, [pc, #8]	@ (80099a4 <TIM8_CC_IRQHandler+0x10>)
 800999a:	f002 f81b 	bl	800b9d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800999e:	bf00      	nop
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	200003c8 	.word	0x200003c8

080099a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  return 1;
 80099ac:	2301      	movs	r3, #1
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <_kill>:

int _kill(int pid, int sig)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80099c2:	f005 fd1b 	bl	800f3fc <__errno>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2216      	movs	r2, #22
 80099ca:	601a      	str	r2, [r3, #0]
  return -1;
 80099cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_exit>:

void _exit (int status)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80099e0:	f04f 31ff 	mov.w	r1, #4294967295
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff ffe7 	bl	80099b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <_exit+0x12>

080099ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b086      	sub	sp, #24
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e00a      	b.n	8009a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009a00:	f3af 8000 	nop.w
 8009a04:	4601      	mov	r1, r0
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	60ba      	str	r2, [r7, #8]
 8009a0c:	b2ca      	uxtb	r2, r1
 8009a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	3301      	adds	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	dbf0      	blt.n	8009a00 <_read+0x12>
  }

  return len;
 8009a1e:	687b      	ldr	r3, [r7, #4]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a34:	2300      	movs	r3, #0
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	e009      	b.n	8009a4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	60ba      	str	r2, [r7, #8]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	617b      	str	r3, [r7, #20]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	dbf1      	blt.n	8009a3a <_write+0x12>
  }
  return len;
 8009a56:	687b      	ldr	r3, [r7, #4]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <_close>:

int _close(int file)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009a88:	605a      	str	r2, [r3, #4]
  return 0;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <_isatty>:

int _isatty(int file)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009aa0:	2301      	movs	r3, #1
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009ad0:	4a14      	ldr	r2, [pc, #80]	@ (8009b24 <_sbrk+0x5c>)
 8009ad2:	4b15      	ldr	r3, [pc, #84]	@ (8009b28 <_sbrk+0x60>)
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009adc:	4b13      	ldr	r3, [pc, #76]	@ (8009b2c <_sbrk+0x64>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009ae4:	4b11      	ldr	r3, [pc, #68]	@ (8009b2c <_sbrk+0x64>)
 8009ae6:	4a12      	ldr	r2, [pc, #72]	@ (8009b30 <_sbrk+0x68>)
 8009ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009aea:	4b10      	ldr	r3, [pc, #64]	@ (8009b2c <_sbrk+0x64>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d207      	bcs.n	8009b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009af8:	f005 fc80 	bl	800f3fc <__errno>
 8009afc:	4603      	mov	r3, r0
 8009afe:	220c      	movs	r2, #12
 8009b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295
 8009b06:	e009      	b.n	8009b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009b08:	4b08      	ldr	r3, [pc, #32]	@ (8009b2c <_sbrk+0x64>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009b0e:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <_sbrk+0x64>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	4a05      	ldr	r2, [pc, #20]	@ (8009b2c <_sbrk+0x64>)
 8009b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	20020000 	.word	0x20020000
 8009b28:	00000400 	.word	0x00000400
 8009b2c:	200006ec 	.word	0x200006ec
 8009b30:	20000840 	.word	0x20000840

08009b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009b34:	b480      	push	{r7}
 8009b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009b38:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <SystemInit+0x20>)
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3e:	4a05      	ldr	r2, [pc, #20]	@ (8009b54 <SystemInit+0x20>)
 8009b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009b48:	bf00      	nop
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	e000ed00 	.word	0xe000ed00

08009b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009b90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009b5c:	f7ff ffea 	bl	8009b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009b60:	480c      	ldr	r0, [pc, #48]	@ (8009b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009b62:	490d      	ldr	r1, [pc, #52]	@ (8009b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009b64:	4a0d      	ldr	r2, [pc, #52]	@ (8009b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009b68:	e002      	b.n	8009b70 <LoopCopyDataInit>

08009b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009b6e:	3304      	adds	r3, #4

08009b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009b74:	d3f9      	bcc.n	8009b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009b76:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009b78:	4c0a      	ldr	r4, [pc, #40]	@ (8009ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009b7c:	e001      	b.n	8009b82 <LoopFillZerobss>

08009b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b80:	3204      	adds	r2, #4

08009b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009b84:	d3fb      	bcc.n	8009b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009b86:	f005 fc3f 	bl	800f408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b8a:	f7f9 fdcd 	bl	8003728 <main>
  bx  lr    
 8009b8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009b98:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8009b9c:	08014630 	.word	0x08014630
  ldr r2, =_sbss
 8009ba0:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8009ba4:	20000840 	.word	0x20000840

08009ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ba8:	e7fe      	b.n	8009ba8 <ADC_IRQHandler>
	...

08009bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bec <HAL_Init+0x40>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8009bec <HAL_Init+0x40>)
 8009bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8009bec <HAL_Init+0x40>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8009bec <HAL_Init+0x40>)
 8009bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bc8:	4b08      	ldr	r3, [pc, #32]	@ (8009bec <HAL_Init+0x40>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a07      	ldr	r2, [pc, #28]	@ (8009bec <HAL_Init+0x40>)
 8009bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009bd4:	2003      	movs	r0, #3
 8009bd6:	f000 f94f 	bl	8009e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009bda:	2000      	movs	r0, #0
 8009bdc:	f000 f808 	bl	8009bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009be0:	f7ff fc10 	bl	8009404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	40023c00 	.word	0x40023c00

08009bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009bf8:	4b12      	ldr	r3, [pc, #72]	@ (8009c44 <HAL_InitTick+0x54>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	4b12      	ldr	r3, [pc, #72]	@ (8009c48 <HAL_InitTick+0x58>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	4619      	mov	r1, r3
 8009c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 f967 	bl	8009ee2 <HAL_SYSTICK_Config>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e00e      	b.n	8009c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b0f      	cmp	r3, #15
 8009c22:	d80a      	bhi.n	8009c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c24:	2200      	movs	r2, #0
 8009c26:	6879      	ldr	r1, [r7, #4]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	f000 f92f 	bl	8009e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c30:	4a06      	ldr	r2, [pc, #24]	@ (8009c4c <HAL_InitTick+0x5c>)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	e000      	b.n	8009c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	200000e4 	.word	0x200000e4
 8009c48:	200000ec 	.word	0x200000ec
 8009c4c:	200000e8 	.word	0x200000e8

08009c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009c54:	4b06      	ldr	r3, [pc, #24]	@ (8009c70 <HAL_IncTick+0x20>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4b06      	ldr	r3, [pc, #24]	@ (8009c74 <HAL_IncTick+0x24>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4413      	add	r3, r2
 8009c60:	4a04      	ldr	r2, [pc, #16]	@ (8009c74 <HAL_IncTick+0x24>)
 8009c62:	6013      	str	r3, [r2, #0]
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	200000ec 	.word	0x200000ec
 8009c74:	200006f0 	.word	0x200006f0

08009c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8009c7c:	4b03      	ldr	r3, [pc, #12]	@ (8009c8c <HAL_GetTick+0x14>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	200006f0 	.word	0x200006f0

08009c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c98:	f7ff ffee 	bl	8009c78 <HAL_GetTick>
 8009c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca8:	d005      	beq.n	8009cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009caa:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd4 <HAL_Delay+0x44>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009cb6:	bf00      	nop
 8009cb8:	f7ff ffde 	bl	8009c78 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d8f7      	bhi.n	8009cb8 <HAL_Delay+0x28>
  {
  }
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	200000ec 	.word	0x200000ec

08009cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8009d1c <__NVIC_SetPriorityGrouping+0x44>)
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d0a:	4a04      	ldr	r2, [pc, #16]	@ (8009d1c <__NVIC_SetPriorityGrouping+0x44>)
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	60d3      	str	r3, [r2, #12]
}
 8009d10:	bf00      	nop
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	e000ed00 	.word	0xe000ed00

08009d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d24:	4b04      	ldr	r3, [pc, #16]	@ (8009d38 <__NVIC_GetPriorityGrouping+0x18>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	0a1b      	lsrs	r3, r3, #8
 8009d2a:	f003 0307 	and.w	r3, r3, #7
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	e000ed00 	.word	0xe000ed00

08009d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	db0b      	blt.n	8009d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	f003 021f 	and.w	r2, r3, #31
 8009d54:	4907      	ldr	r1, [pc, #28]	@ (8009d74 <__NVIC_EnableIRQ+0x38>)
 8009d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8009d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	e000e100 	.word	0xe000e100

08009d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6039      	str	r1, [r7, #0]
 8009d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	db0a      	blt.n	8009da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	490c      	ldr	r1, [pc, #48]	@ (8009dc4 <__NVIC_SetPriority+0x4c>)
 8009d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d96:	0112      	lsls	r2, r2, #4
 8009d98:	b2d2      	uxtb	r2, r2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009da0:	e00a      	b.n	8009db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	4908      	ldr	r1, [pc, #32]	@ (8009dc8 <__NVIC_SetPriority+0x50>)
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	f003 030f 	and.w	r3, r3, #15
 8009dae:	3b04      	subs	r3, #4
 8009db0:	0112      	lsls	r2, r2, #4
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	440b      	add	r3, r1
 8009db6:	761a      	strb	r2, [r3, #24]
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	e000e100 	.word	0xe000e100
 8009dc8:	e000ed00 	.word	0xe000ed00

08009dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b089      	sub	sp, #36	@ 0x24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	f1c3 0307 	rsb	r3, r3, #7
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	bf28      	it	cs
 8009dea:	2304      	movcs	r3, #4
 8009dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	3304      	adds	r3, #4
 8009df2:	2b06      	cmp	r3, #6
 8009df4:	d902      	bls.n	8009dfc <NVIC_EncodePriority+0x30>
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	3b03      	subs	r3, #3
 8009dfa:	e000      	b.n	8009dfe <NVIC_EncodePriority+0x32>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0a:	43da      	mvns	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	401a      	ands	r2, r3
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e14:	f04f 31ff 	mov.w	r1, #4294967295
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1e:	43d9      	mvns	r1, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e24:	4313      	orrs	r3, r2
         );
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3724      	adds	r7, #36	@ 0x24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
	...

08009e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e44:	d301      	bcc.n	8009e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e46:	2301      	movs	r3, #1
 8009e48:	e00f      	b.n	8009e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009e74 <SysTick_Config+0x40>)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e52:	210f      	movs	r1, #15
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	f7ff ff8e 	bl	8009d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e5c:	4b05      	ldr	r3, [pc, #20]	@ (8009e74 <SysTick_Config+0x40>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009e62:	4b04      	ldr	r3, [pc, #16]	@ (8009e74 <SysTick_Config+0x40>)
 8009e64:	2207      	movs	r2, #7
 8009e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	e000e010 	.word	0xe000e010

08009e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff ff29 	bl	8009cd8 <__NVIC_SetPriorityGrouping>
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b086      	sub	sp, #24
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	4603      	mov	r3, r0
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ea0:	f7ff ff3e 	bl	8009d20 <__NVIC_GetPriorityGrouping>
 8009ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	6978      	ldr	r0, [r7, #20]
 8009eac:	f7ff ff8e 	bl	8009dcc <NVIC_EncodePriority>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff ff5d 	bl	8009d78 <__NVIC_SetPriority>
}
 8009ebe:	bf00      	nop
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	4603      	mov	r3, r0
 8009ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff ff31 	bl	8009d3c <__NVIC_EnableIRQ>
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff ffa2 	bl	8009e34 <SysTick_Config>
 8009ef0:	4603      	mov	r3, r0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f06:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009f08:	f7ff feb6 	bl	8009c78 <HAL_GetTick>
 8009f0c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d008      	beq.n	8009f2c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2280      	movs	r2, #128	@ 0x80
 8009f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e052      	b.n	8009fd2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 0216 	bic.w	r2, r2, #22
 8009f3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	695a      	ldr	r2, [r3, #20]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f4a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d103      	bne.n	8009f5c <HAL_DMA_Abort+0x62>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0208 	bic.w	r2, r2, #8
 8009f6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f022 0201 	bic.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f7c:	e013      	b.n	8009fa6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f7e:	f7ff fe7b 	bl	8009c78 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	2b05      	cmp	r3, #5
 8009f8a:	d90c      	bls.n	8009fa6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2203      	movs	r2, #3
 8009f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e015      	b.n	8009fd2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fb8:	223f      	movs	r2, #63	@ 0x3f
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b083      	sub	sp, #12
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d004      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2280      	movs	r2, #128	@ 0x80
 8009ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e00c      	b.n	800a012 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2205      	movs	r2, #5
 8009ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 0201 	bic.w	r2, r2, #1
 800a00e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
	...

0800a020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a020:	b480      	push	{r7}
 800a022:	b089      	sub	sp, #36	@ 0x24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a02e:	2300      	movs	r3, #0
 800a030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a032:	2300      	movs	r3, #0
 800a034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a036:	2300      	movs	r3, #0
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	e16b      	b.n	800a314 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a03c:	2201      	movs	r2, #1
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	fa02 f303 	lsl.w	r3, r2, r3
 800a044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	4013      	ands	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	429a      	cmp	r2, r3
 800a056:	f040 815a 	bne.w	800a30e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	2b01      	cmp	r3, #1
 800a064:	d005      	beq.n	800a072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d130      	bne.n	800a0d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	2203      	movs	r2, #3
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	43db      	mvns	r3, r3
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	4013      	ands	r3, r2
 800a088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	fa02 f303 	lsl.w	r3, r2, r3
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	4313      	orrs	r3, r2
 800a09a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69ba      	ldr	r2, [r7, #24]
 800a0a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b0:	43db      	mvns	r3, r3
 800a0b2:	69ba      	ldr	r2, [r7, #24]
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	091b      	lsrs	r3, r3, #4
 800a0be:	f003 0201 	and.w	r2, r3, #1
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d017      	beq.n	800a110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f0:	43db      	mvns	r3, r3
 800a0f2:	69ba      	ldr	r2, [r7, #24]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	fa02 f303 	lsl.w	r3, r2, r3
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	4313      	orrs	r3, r2
 800a108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f003 0303 	and.w	r3, r3, #3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d123      	bne.n	800a164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	08da      	lsrs	r2, r3, #3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3208      	adds	r2, #8
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	220f      	movs	r2, #15
 800a134:	fa02 f303 	lsl.w	r3, r2, r3
 800a138:	43db      	mvns	r3, r3
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	4013      	ands	r3, r2
 800a13e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	fa02 f303 	lsl.w	r3, r2, r3
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	4313      	orrs	r3, r2
 800a154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	08da      	lsrs	r2, r3, #3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3208      	adds	r2, #8
 800a15e:	69b9      	ldr	r1, [r7, #24]
 800a160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	005b      	lsls	r3, r3, #1
 800a16e:	2203      	movs	r2, #3
 800a170:	fa02 f303 	lsl.w	r3, r2, r3
 800a174:	43db      	mvns	r3, r3
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	4013      	ands	r3, r2
 800a17a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f003 0203 	and.w	r2, r3, #3
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	005b      	lsls	r3, r3, #1
 800a188:	fa02 f303 	lsl.w	r3, r2, r3
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	4313      	orrs	r3, r2
 800a190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80b4 	beq.w	800a30e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
 800a1aa:	4b60      	ldr	r3, [pc, #384]	@ (800a32c <HAL_GPIO_Init+0x30c>)
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ae:	4a5f      	ldr	r2, [pc, #380]	@ (800a32c <HAL_GPIO_Init+0x30c>)
 800a1b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1b4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1b6:	4b5d      	ldr	r3, [pc, #372]	@ (800a32c <HAL_GPIO_Init+0x30c>)
 800a1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a1c2:	4a5b      	ldr	r2, [pc, #364]	@ (800a330 <HAL_GPIO_Init+0x310>)
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	089b      	lsrs	r3, r3, #2
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f003 0303 	and.w	r3, r3, #3
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	220f      	movs	r2, #15
 800a1da:	fa02 f303 	lsl.w	r3, r2, r3
 800a1de:	43db      	mvns	r3, r3
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a52      	ldr	r2, [pc, #328]	@ (800a334 <HAL_GPIO_Init+0x314>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d02b      	beq.n	800a246 <HAL_GPIO_Init+0x226>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a51      	ldr	r2, [pc, #324]	@ (800a338 <HAL_GPIO_Init+0x318>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d025      	beq.n	800a242 <HAL_GPIO_Init+0x222>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a50      	ldr	r2, [pc, #320]	@ (800a33c <HAL_GPIO_Init+0x31c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01f      	beq.n	800a23e <HAL_GPIO_Init+0x21e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a4f      	ldr	r2, [pc, #316]	@ (800a340 <HAL_GPIO_Init+0x320>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d019      	beq.n	800a23a <HAL_GPIO_Init+0x21a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a4e      	ldr	r2, [pc, #312]	@ (800a344 <HAL_GPIO_Init+0x324>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d013      	beq.n	800a236 <HAL_GPIO_Init+0x216>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a4d      	ldr	r2, [pc, #308]	@ (800a348 <HAL_GPIO_Init+0x328>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00d      	beq.n	800a232 <HAL_GPIO_Init+0x212>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a4c      	ldr	r2, [pc, #304]	@ (800a34c <HAL_GPIO_Init+0x32c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d007      	beq.n	800a22e <HAL_GPIO_Init+0x20e>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a4b      	ldr	r2, [pc, #300]	@ (800a350 <HAL_GPIO_Init+0x330>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d101      	bne.n	800a22a <HAL_GPIO_Init+0x20a>
 800a226:	2307      	movs	r3, #7
 800a228:	e00e      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a22a:	2308      	movs	r3, #8
 800a22c:	e00c      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a22e:	2306      	movs	r3, #6
 800a230:	e00a      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a232:	2305      	movs	r3, #5
 800a234:	e008      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a236:	2304      	movs	r3, #4
 800a238:	e006      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a23a:	2303      	movs	r3, #3
 800a23c:	e004      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a23e:	2302      	movs	r3, #2
 800a240:	e002      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <HAL_GPIO_Init+0x228>
 800a246:	2300      	movs	r3, #0
 800a248:	69fa      	ldr	r2, [r7, #28]
 800a24a:	f002 0203 	and.w	r2, r2, #3
 800a24e:	0092      	lsls	r2, r2, #2
 800a250:	4093      	lsls	r3, r2
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	4313      	orrs	r3, r2
 800a256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a258:	4935      	ldr	r1, [pc, #212]	@ (800a330 <HAL_GPIO_Init+0x310>)
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	089b      	lsrs	r3, r3, #2
 800a25e:	3302      	adds	r3, #2
 800a260:	69ba      	ldr	r2, [r7, #24]
 800a262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a266:	4b3b      	ldr	r3, [pc, #236]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	43db      	mvns	r3, r3
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	4013      	ands	r3, r2
 800a274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	4313      	orrs	r3, r2
 800a288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a28a:	4a32      	ldr	r2, [pc, #200]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a290:	4b30      	ldr	r3, [pc, #192]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	43db      	mvns	r3, r3
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	4013      	ands	r3, r2
 800a29e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a2b4:	4a27      	ldr	r2, [pc, #156]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a2ba:	4b26      	ldr	r3, [pc, #152]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	43db      	mvns	r3, r3
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a2de:	4a1d      	ldr	r2, [pc, #116]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	43db      	mvns	r3, r3
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	4313      	orrs	r3, r2
 800a306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a308:	4a12      	ldr	r2, [pc, #72]	@ (800a354 <HAL_GPIO_Init+0x334>)
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	3301      	adds	r3, #1
 800a312:	61fb      	str	r3, [r7, #28]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2b0f      	cmp	r3, #15
 800a318:	f67f ae90 	bls.w	800a03c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a31c:	bf00      	nop
 800a31e:	bf00      	nop
 800a320:	3724      	adds	r7, #36	@ 0x24
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40023800 	.word	0x40023800
 800a330:	40013800 	.word	0x40013800
 800a334:	40020000 	.word	0x40020000
 800a338:	40020400 	.word	0x40020400
 800a33c:	40020800 	.word	0x40020800
 800a340:	40020c00 	.word	0x40020c00
 800a344:	40021000 	.word	0x40021000
 800a348:	40021400 	.word	0x40021400
 800a34c:	40021800 	.word	0x40021800
 800a350:	40021c00 	.word	0x40021c00
 800a354:	40013c00 	.word	0x40013c00

0800a358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	887b      	ldrh	r3, [r7, #2]
 800a36a:	4013      	ands	r3, r2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a370:	2301      	movs	r3, #1
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e001      	b.n	800a37a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	807b      	strh	r3, [r7, #2]
 800a394:	4613      	mov	r3, r2
 800a396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a398:	787b      	ldrb	r3, [r7, #1]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a39e:	887a      	ldrh	r2, [r7, #2]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a3a4:	e003      	b.n	800a3ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a3a6:	887b      	ldrh	r3, [r7, #2]
 800a3a8:	041a      	lsls	r2, r3, #16
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	619a      	str	r2, [r3, #24]
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
	...

0800a3bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a3c6:	4b08      	ldr	r3, [pc, #32]	@ (800a3e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a3c8:	695a      	ldr	r2, [r3, #20]
 800a3ca:	88fb      	ldrh	r3, [r7, #6]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a3d2:	4a05      	ldr	r2, [pc, #20]	@ (800a3e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a3d8:	88fb      	ldrh	r3, [r7, #6]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7f9 f814 	bl	8003408 <HAL_GPIO_EXTI_Callback>
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	40013c00 	.word	0x40013c00

0800a3ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e12b      	b.n	800a656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff f81e 	bl	8009454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2224      	movs	r2, #36	@ 0x24
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a43e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a44e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a450:	f001 f8da 	bl	800b608 <HAL_RCC_GetPCLK1Freq>
 800a454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	4a81      	ldr	r2, [pc, #516]	@ (800a660 <HAL_I2C_Init+0x274>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d807      	bhi.n	800a470 <HAL_I2C_Init+0x84>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4a80      	ldr	r2, [pc, #512]	@ (800a664 <HAL_I2C_Init+0x278>)
 800a464:	4293      	cmp	r3, r2
 800a466:	bf94      	ite	ls
 800a468:	2301      	movls	r3, #1
 800a46a:	2300      	movhi	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	e006      	b.n	800a47e <HAL_I2C_Init+0x92>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4a7d      	ldr	r2, [pc, #500]	@ (800a668 <HAL_I2C_Init+0x27c>)
 800a474:	4293      	cmp	r3, r2
 800a476:	bf94      	ite	ls
 800a478:	2301      	movls	r3, #1
 800a47a:	2300      	movhi	r3, #0
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e0e7      	b.n	800a656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4a78      	ldr	r2, [pc, #480]	@ (800a66c <HAL_I2C_Init+0x280>)
 800a48a:	fba2 2303 	umull	r2, r3, r2, r3
 800a48e:	0c9b      	lsrs	r3, r3, #18
 800a490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6a1b      	ldr	r3, [r3, #32]
 800a4ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	4a6a      	ldr	r2, [pc, #424]	@ (800a660 <HAL_I2C_Init+0x274>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d802      	bhi.n	800a4c0 <HAL_I2C_Init+0xd4>
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	e009      	b.n	800a4d4 <HAL_I2C_Init+0xe8>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a4c6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ca:	4a69      	ldr	r2, [pc, #420]	@ (800a670 <HAL_I2C_Init+0x284>)
 800a4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d0:	099b      	lsrs	r3, r3, #6
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a4e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	495c      	ldr	r1, [pc, #368]	@ (800a660 <HAL_I2C_Init+0x274>)
 800a4f0:	428b      	cmp	r3, r1
 800a4f2:	d819      	bhi.n	800a528 <HAL_I2C_Init+0x13c>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	1e59      	subs	r1, r3, #1
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800a502:	1c59      	adds	r1, r3, #1
 800a504:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a508:	400b      	ands	r3, r1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00a      	beq.n	800a524 <HAL_I2C_Init+0x138>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	1e59      	subs	r1, r3, #1
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	005b      	lsls	r3, r3, #1
 800a518:	fbb1 f3f3 	udiv	r3, r1, r3
 800a51c:	3301      	adds	r3, #1
 800a51e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a522:	e051      	b.n	800a5c8 <HAL_I2C_Init+0x1dc>
 800a524:	2304      	movs	r3, #4
 800a526:	e04f      	b.n	800a5c8 <HAL_I2C_Init+0x1dc>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d111      	bne.n	800a554 <HAL_I2C_Init+0x168>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	1e58      	subs	r0, r3, #1
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6859      	ldr	r1, [r3, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	005b      	lsls	r3, r3, #1
 800a53c:	440b      	add	r3, r1
 800a53e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a542:	3301      	adds	r3, #1
 800a544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bf0c      	ite	eq
 800a54c:	2301      	moveq	r3, #1
 800a54e:	2300      	movne	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	e012      	b.n	800a57a <HAL_I2C_Init+0x18e>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	1e58      	subs	r0, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6859      	ldr	r1, [r3, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	0099      	lsls	r1, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	fbb0 f3f3 	udiv	r3, r0, r3
 800a56a:	3301      	adds	r3, #1
 800a56c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a570:	2b00      	cmp	r3, #0
 800a572:	bf0c      	ite	eq
 800a574:	2301      	moveq	r3, #1
 800a576:	2300      	movne	r3, #0
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <HAL_I2C_Init+0x196>
 800a57e:	2301      	movs	r3, #1
 800a580:	e022      	b.n	800a5c8 <HAL_I2C_Init+0x1dc>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10e      	bne.n	800a5a8 <HAL_I2C_Init+0x1bc>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	1e58      	subs	r0, r3, #1
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6859      	ldr	r1, [r3, #4]
 800a592:	460b      	mov	r3, r1
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	440b      	add	r3, r1
 800a598:	fbb0 f3f3 	udiv	r3, r0, r3
 800a59c:	3301      	adds	r3, #1
 800a59e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5a6:	e00f      	b.n	800a5c8 <HAL_I2C_Init+0x1dc>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	1e58      	subs	r0, r3, #1
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6859      	ldr	r1, [r3, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	440b      	add	r3, r1
 800a5b6:	0099      	lsls	r1, r3, #2
 800a5b8:	440b      	add	r3, r1
 800a5ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800a5be:	3301      	adds	r3, #1
 800a5c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	6809      	ldr	r1, [r1, #0]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69da      	ldr	r2, [r3, #28]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a5f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	6911      	ldr	r1, [r2, #16]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	68d2      	ldr	r2, [r2, #12]
 800a602:	4311      	orrs	r1, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6812      	ldr	r2, [r2, #0]
 800a608:	430b      	orrs	r3, r1
 800a60a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	695a      	ldr	r2, [r3, #20]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f042 0201 	orr.w	r2, r2, #1
 800a636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2220      	movs	r2, #32
 800a642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	000186a0 	.word	0x000186a0
 800a664:	001e847f 	.word	0x001e847f
 800a668:	003d08ff 	.word	0x003d08ff
 800a66c:	431bde83 	.word	0x431bde83
 800a670:	10624dd3 	.word	0x10624dd3

0800a674 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af02      	add	r7, sp, #8
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	461a      	mov	r2, r3
 800a680:	460b      	mov	r3, r1
 800a682:	817b      	strh	r3, [r7, #10]
 800a684:	4613      	mov	r3, r2
 800a686:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a688:	f7ff faf6 	bl	8009c78 <HAL_GetTick>
 800a68c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b20      	cmp	r3, #32
 800a698:	f040 80e0 	bne.w	800a85c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2319      	movs	r3, #25
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	4970      	ldr	r1, [pc, #448]	@ (800a868 <HAL_I2C_Master_Transmit+0x1f4>)
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 f964 	bl	800a974 <I2C_WaitOnFlagUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e0d3      	b.n	800a85e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d101      	bne.n	800a6c4 <HAL_I2C_Master_Transmit+0x50>
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e0cc      	b.n	800a85e <HAL_I2C_Master_Transmit+0x1ea>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d007      	beq.n	800a6ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0201 	orr.w	r2, r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2221      	movs	r2, #33	@ 0x21
 800a6fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2210      	movs	r2, #16
 800a706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	893a      	ldrh	r2, [r7, #8]
 800a71a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a720:	b29a      	uxth	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4a50      	ldr	r2, [pc, #320]	@ (800a86c <HAL_I2C_Master_Transmit+0x1f8>)
 800a72a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a72c:	8979      	ldrh	r1, [r7, #10]
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	6a3a      	ldr	r2, [r7, #32]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f89c 	bl	800a870 <I2C_MasterRequestWrite>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e08d      	b.n	800a85e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a742:	2300      	movs	r3, #0
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a758:	e066      	b.n	800a828 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	6a39      	ldr	r1, [r7, #32]
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 fa22 	bl	800aba8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00d      	beq.n	800a786 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d107      	bne.n	800a782 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a780:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e06b      	b.n	800a85e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d11b      	bne.n	800a7fc <HAL_I2C_Master_Transmit+0x188>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d017      	beq.n	800a7fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d0:	781a      	ldrb	r2, [r3, #0]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	6a39      	ldr	r1, [r7, #32]
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 fa19 	bl	800ac38 <I2C_WaitOnBTFFlagUntilTimeout>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00d      	beq.n	800a828 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a810:	2b04      	cmp	r3, #4
 800a812:	d107      	bne.n	800a824 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a822:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e01a      	b.n	800a85e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d194      	bne.n	800a75a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a83e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2220      	movs	r2, #32
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	e000      	b.n	800a85e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a85c:	2302      	movs	r3, #2
  }
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	00100002 	.word	0x00100002
 800a86c:	ffff0000 	.word	0xffff0000

0800a870 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af02      	add	r7, sp, #8
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	607a      	str	r2, [r7, #4]
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	460b      	mov	r3, r1
 800a87e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a884:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b08      	cmp	r3, #8
 800a88a:	d006      	beq.n	800a89a <I2C_MasterRequestWrite+0x2a>
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d003      	beq.n	800a89a <I2C_MasterRequestWrite+0x2a>
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a898:	d108      	bne.n	800a8ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e00b      	b.n	800a8c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b0:	2b12      	cmp	r3, #18
 800a8b2:	d107      	bne.n	800a8c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f84f 	bl	800a974 <I2C_WaitOnFlagUntilTimeout>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00d      	beq.n	800a8f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8ea:	d103      	bne.n	800a8f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e035      	b.n	800a964 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a900:	d108      	bne.n	800a914 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a902:	897b      	ldrh	r3, [r7, #10]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	461a      	mov	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a910:	611a      	str	r2, [r3, #16]
 800a912:	e01b      	b.n	800a94c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a914:	897b      	ldrh	r3, [r7, #10]
 800a916:	11db      	asrs	r3, r3, #7
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	f003 0306 	and.w	r3, r3, #6
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f063 030f 	orn	r3, r3, #15
 800a924:	b2da      	uxtb	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	490e      	ldr	r1, [pc, #56]	@ (800a96c <I2C_MasterRequestWrite+0xfc>)
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 f898 	bl	800aa68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e010      	b.n	800a964 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a942:	897b      	ldrh	r3, [r7, #10]
 800a944:	b2da      	uxtb	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	4907      	ldr	r1, [pc, #28]	@ (800a970 <I2C_MasterRequestWrite+0x100>)
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 f888 	bl	800aa68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e000      	b.n	800a964 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	00010008 	.word	0x00010008
 800a970:	00010002 	.word	0x00010002

0800a974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	4613      	mov	r3, r2
 800a982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a984:	e048      	b.n	800aa18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d044      	beq.n	800aa18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a98e:	f7ff f973 	bl	8009c78 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d302      	bcc.n	800a9a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d139      	bne.n	800aa18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	0c1b      	lsrs	r3, r3, #16
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d10d      	bne.n	800a9ca <I2C_WaitOnFlagUntilTimeout+0x56>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	43da      	mvns	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bf0c      	ite	eq
 800a9c0:	2301      	moveq	r3, #1
 800a9c2:	2300      	movne	r3, #0
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	e00c      	b.n	800a9e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	43da      	mvns	r2, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bf0c      	ite	eq
 800a9dc:	2301      	moveq	r3, #1
 800a9de:	2300      	movne	r3, #0
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d116      	bne.n	800aa18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa04:	f043 0220 	orr.w	r2, r3, #32
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e023      	b.n	800aa60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	0c1b      	lsrs	r3, r3, #16
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d10d      	bne.n	800aa3e <I2C_WaitOnFlagUntilTimeout+0xca>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	43da      	mvns	r2, r3
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	bf0c      	ite	eq
 800aa34:	2301      	moveq	r3, #1
 800aa36:	2300      	movne	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	e00c      	b.n	800aa58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	43da      	mvns	r2, r3
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	4013      	ands	r3, r2
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bf0c      	ite	eq
 800aa50:	2301      	moveq	r3, #1
 800aa52:	2300      	movne	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	461a      	mov	r2, r3
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d093      	beq.n	800a986 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa76:	e071      	b.n	800ab5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa86:	d123      	bne.n	800aad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aaa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aabc:	f043 0204 	orr.w	r2, r3, #4
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e067      	b.n	800aba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad6:	d041      	beq.n	800ab5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad8:	f7ff f8ce 	bl	8009c78 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d302      	bcc.n	800aaee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d136      	bne.n	800ab5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	0c1b      	lsrs	r3, r3, #16
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d10c      	bne.n	800ab12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	43da      	mvns	r2, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4013      	ands	r3, r2
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bf14      	ite	ne
 800ab0a:	2301      	movne	r3, #1
 800ab0c:	2300      	moveq	r3, #0
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	e00b      	b.n	800ab2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	43da      	mvns	r2, r3
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	bf14      	ite	ne
 800ab24:	2301      	movne	r3, #1
 800ab26:	2300      	moveq	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d016      	beq.n	800ab5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab48:	f043 0220 	orr.w	r2, r3, #32
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e021      	b.n	800aba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	0c1b      	lsrs	r3, r3, #16
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d10c      	bne.n	800ab80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	43da      	mvns	r2, r3
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	4013      	ands	r3, r2
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bf14      	ite	ne
 800ab78:	2301      	movne	r3, #1
 800ab7a:	2300      	moveq	r3, #0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	e00b      	b.n	800ab98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	43da      	mvns	r2, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	bf14      	ite	ne
 800ab92:	2301      	movne	r3, #1
 800ab94:	2300      	moveq	r3, #0
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f47f af6d 	bne.w	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abb4:	e034      	b.n	800ac20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 f886 	bl	800acc8 <I2C_IsAcknowledgeFailed>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e034      	b.n	800ac30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abcc:	d028      	beq.n	800ac20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abce:	f7ff f853 	bl	8009c78 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d302      	bcc.n	800abe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d11d      	bne.n	800ac20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abee:	2b80      	cmp	r3, #128	@ 0x80
 800abf0:	d016      	beq.n	800ac20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2220      	movs	r2, #32
 800abfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0c:	f043 0220 	orr.w	r2, r3, #32
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e007      	b.n	800ac30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac2a:	2b80      	cmp	r3, #128	@ 0x80
 800ac2c:	d1c3      	bne.n	800abb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac44:	e034      	b.n	800acb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 f83e 	bl	800acc8 <I2C_IsAcknowledgeFailed>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e034      	b.n	800acc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5c:	d028      	beq.n	800acb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac5e:	f7ff f80b 	bl	8009c78 <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d302      	bcc.n	800ac74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d11d      	bne.n	800acb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d016      	beq.n	800acb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9c:	f043 0220 	orr.w	r2, r3, #32
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e007      	b.n	800acc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	f003 0304 	and.w	r3, r3, #4
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d1c3      	bne.n	800ac46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acde:	d11b      	bne.n	800ad18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ace8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2220      	movs	r2, #32
 800acf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad04:	f043 0204 	orr.w	r2, r3, #4
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e000      	b.n	800ad1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e267      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d075      	beq.n	800ae32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ad46:	4b88      	ldr	r3, [pc, #544]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f003 030c 	and.w	r3, r3, #12
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	d00c      	beq.n	800ad6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad52:	4b85      	ldr	r3, [pc, #532]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ad5a:	2b08      	cmp	r3, #8
 800ad5c:	d112      	bne.n	800ad84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad5e:	4b82      	ldr	r3, [pc, #520]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad6a:	d10b      	bne.n	800ad84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad6c:	4b7e      	ldr	r3, [pc, #504]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d05b      	beq.n	800ae30 <HAL_RCC_OscConfig+0x108>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d157      	bne.n	800ae30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e242      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad8c:	d106      	bne.n	800ad9c <HAL_RCC_OscConfig+0x74>
 800ad8e:	4b76      	ldr	r3, [pc, #472]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a75      	ldr	r2, [pc, #468]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ad94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	e01d      	b.n	800add8 <HAL_RCC_OscConfig+0xb0>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ada4:	d10c      	bne.n	800adc0 <HAL_RCC_OscConfig+0x98>
 800ada6:	4b70      	ldr	r3, [pc, #448]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a6f      	ldr	r2, [pc, #444]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800adac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	4b6d      	ldr	r3, [pc, #436]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a6c      	ldr	r2, [pc, #432]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800adb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	e00b      	b.n	800add8 <HAL_RCC_OscConfig+0xb0>
 800adc0:	4b69      	ldr	r3, [pc, #420]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a68      	ldr	r2, [pc, #416]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800adc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	4b66      	ldr	r3, [pc, #408]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a65      	ldr	r2, [pc, #404]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800add2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800add6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d013      	beq.n	800ae08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ade0:	f7fe ff4a 	bl	8009c78 <HAL_GetTick>
 800ade4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ade6:	e008      	b.n	800adfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ade8:	f7fe ff46 	bl	8009c78 <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	2b64      	cmp	r3, #100	@ 0x64
 800adf4:	d901      	bls.n	800adfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e207      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adfa:	4b5b      	ldr	r3, [pc, #364]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0f0      	beq.n	800ade8 <HAL_RCC_OscConfig+0xc0>
 800ae06:	e014      	b.n	800ae32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae08:	f7fe ff36 	bl	8009c78 <HAL_GetTick>
 800ae0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae0e:	e008      	b.n	800ae22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae10:	f7fe ff32 	bl	8009c78 <HAL_GetTick>
 800ae14:	4602      	mov	r2, r0
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	2b64      	cmp	r3, #100	@ 0x64
 800ae1c:	d901      	bls.n	800ae22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e1f3      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae22:	4b51      	ldr	r3, [pc, #324]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1f0      	bne.n	800ae10 <HAL_RCC_OscConfig+0xe8>
 800ae2e:	e000      	b.n	800ae32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d063      	beq.n	800af06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ae3e:	4b4a      	ldr	r3, [pc, #296]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f003 030c 	and.w	r3, r3, #12
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00b      	beq.n	800ae62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae4a:	4b47      	ldr	r3, [pc, #284]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ae52:	2b08      	cmp	r3, #8
 800ae54:	d11c      	bne.n	800ae90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae56:	4b44      	ldr	r3, [pc, #272]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d116      	bne.n	800ae90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae62:	4b41      	ldr	r3, [pc, #260]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0302 	and.w	r3, r3, #2
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d005      	beq.n	800ae7a <HAL_RCC_OscConfig+0x152>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d001      	beq.n	800ae7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e1c7      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae7a:	4b3b      	ldr	r3, [pc, #236]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	4937      	ldr	r1, [pc, #220]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae8e:	e03a      	b.n	800af06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d020      	beq.n	800aeda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae98:	4b34      	ldr	r3, [pc, #208]	@ (800af6c <HAL_RCC_OscConfig+0x244>)
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae9e:	f7fe feeb 	bl	8009c78 <HAL_GetTick>
 800aea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aea4:	e008      	b.n	800aeb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aea6:	f7fe fee7 	bl	8009c78 <HAL_GetTick>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d901      	bls.n	800aeb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e1a8      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeb8:	4b2b      	ldr	r3, [pc, #172]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0302 	and.w	r3, r3, #2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0f0      	beq.n	800aea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aec4:	4b28      	ldr	r3, [pc, #160]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	4925      	ldr	r1, [pc, #148]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800aed4:	4313      	orrs	r3, r2
 800aed6:	600b      	str	r3, [r1, #0]
 800aed8:	e015      	b.n	800af06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aeda:	4b24      	ldr	r3, [pc, #144]	@ (800af6c <HAL_RCC_OscConfig+0x244>)
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee0:	f7fe feca 	bl	8009c78 <HAL_GetTick>
 800aee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aee6:	e008      	b.n	800aefa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aee8:	f7fe fec6 	bl	8009c78 <HAL_GetTick>
 800aeec:	4602      	mov	r2, r0
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d901      	bls.n	800aefa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e187      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aefa:	4b1b      	ldr	r3, [pc, #108]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1f0      	bne.n	800aee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0308 	and.w	r3, r3, #8
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d036      	beq.n	800af80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d016      	beq.n	800af48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af1a:	4b15      	ldr	r3, [pc, #84]	@ (800af70 <HAL_RCC_OscConfig+0x248>)
 800af1c:	2201      	movs	r2, #1
 800af1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af20:	f7fe feaa 	bl	8009c78 <HAL_GetTick>
 800af24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af26:	e008      	b.n	800af3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af28:	f7fe fea6 	bl	8009c78 <HAL_GetTick>
 800af2c:	4602      	mov	r2, r0
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	2b02      	cmp	r3, #2
 800af34:	d901      	bls.n	800af3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e167      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af3a:	4b0b      	ldr	r3, [pc, #44]	@ (800af68 <HAL_RCC_OscConfig+0x240>)
 800af3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	2b00      	cmp	r3, #0
 800af44:	d0f0      	beq.n	800af28 <HAL_RCC_OscConfig+0x200>
 800af46:	e01b      	b.n	800af80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af48:	4b09      	ldr	r3, [pc, #36]	@ (800af70 <HAL_RCC_OscConfig+0x248>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af4e:	f7fe fe93 	bl	8009c78 <HAL_GetTick>
 800af52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af54:	e00e      	b.n	800af74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af56:	f7fe fe8f 	bl	8009c78 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	2b02      	cmp	r3, #2
 800af62:	d907      	bls.n	800af74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	e150      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
 800af68:	40023800 	.word	0x40023800
 800af6c:	42470000 	.word	0x42470000
 800af70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af74:	4b88      	ldr	r3, [pc, #544]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800af76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1ea      	bne.n	800af56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 8097 	beq.w	800b0bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af8e:	2300      	movs	r3, #0
 800af90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af92:	4b81      	ldr	r3, [pc, #516]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800af94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10f      	bne.n	800afbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af9e:	2300      	movs	r3, #0
 800afa0:	60bb      	str	r3, [r7, #8]
 800afa2:	4b7d      	ldr	r3, [pc, #500]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800afa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa6:	4a7c      	ldr	r2, [pc, #496]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800afa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afac:	6413      	str	r3, [r2, #64]	@ 0x40
 800afae:	4b7a      	ldr	r3, [pc, #488]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afb6:	60bb      	str	r3, [r7, #8]
 800afb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afba:	2301      	movs	r3, #1
 800afbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afbe:	4b77      	ldr	r3, [pc, #476]	@ (800b19c <HAL_RCC_OscConfig+0x474>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d118      	bne.n	800affc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800afca:	4b74      	ldr	r3, [pc, #464]	@ (800b19c <HAL_RCC_OscConfig+0x474>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a73      	ldr	r2, [pc, #460]	@ (800b19c <HAL_RCC_OscConfig+0x474>)
 800afd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800afd6:	f7fe fe4f 	bl	8009c78 <HAL_GetTick>
 800afda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afdc:	e008      	b.n	800aff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afde:	f7fe fe4b 	bl	8009c78 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d901      	bls.n	800aff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e10c      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aff0:	4b6a      	ldr	r3, [pc, #424]	@ (800b19c <HAL_RCC_OscConfig+0x474>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0f0      	beq.n	800afde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d106      	bne.n	800b012 <HAL_RCC_OscConfig+0x2ea>
 800b004:	4b64      	ldr	r3, [pc, #400]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b008:	4a63      	ldr	r2, [pc, #396]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b00a:	f043 0301 	orr.w	r3, r3, #1
 800b00e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b010:	e01c      	b.n	800b04c <HAL_RCC_OscConfig+0x324>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	2b05      	cmp	r3, #5
 800b018:	d10c      	bne.n	800b034 <HAL_RCC_OscConfig+0x30c>
 800b01a:	4b5f      	ldr	r3, [pc, #380]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b01e:	4a5e      	ldr	r2, [pc, #376]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b020:	f043 0304 	orr.w	r3, r3, #4
 800b024:	6713      	str	r3, [r2, #112]	@ 0x70
 800b026:	4b5c      	ldr	r3, [pc, #368]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02a:	4a5b      	ldr	r2, [pc, #364]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b02c:	f043 0301 	orr.w	r3, r3, #1
 800b030:	6713      	str	r3, [r2, #112]	@ 0x70
 800b032:	e00b      	b.n	800b04c <HAL_RCC_OscConfig+0x324>
 800b034:	4b58      	ldr	r3, [pc, #352]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b038:	4a57      	ldr	r2, [pc, #348]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b03a:	f023 0301 	bic.w	r3, r3, #1
 800b03e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b040:	4b55      	ldr	r3, [pc, #340]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b044:	4a54      	ldr	r2, [pc, #336]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b046:	f023 0304 	bic.w	r3, r3, #4
 800b04a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d015      	beq.n	800b080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b054:	f7fe fe10 	bl	8009c78 <HAL_GetTick>
 800b058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b05a:	e00a      	b.n	800b072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b05c:	f7fe fe0c 	bl	8009c78 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d901      	bls.n	800b072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e0cb      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b072:	4b49      	ldr	r3, [pc, #292]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0ee      	beq.n	800b05c <HAL_RCC_OscConfig+0x334>
 800b07e:	e014      	b.n	800b0aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b080:	f7fe fdfa 	bl	8009c78 <HAL_GetTick>
 800b084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b086:	e00a      	b.n	800b09e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b088:	f7fe fdf6 	bl	8009c78 <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b096:	4293      	cmp	r3, r2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e0b5      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b09e:	4b3e      	ldr	r3, [pc, #248]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b0a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1ee      	bne.n	800b088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d105      	bne.n	800b0bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0b0:	4b39      	ldr	r3, [pc, #228]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b4:	4a38      	ldr	r2, [pc, #224]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b0b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 80a1 	beq.w	800b208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b0c6:	4b34      	ldr	r3, [pc, #208]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f003 030c 	and.w	r3, r3, #12
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d05c      	beq.n	800b18c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d141      	bne.n	800b15e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0da:	4b31      	ldr	r3, [pc, #196]	@ (800b1a0 <HAL_RCC_OscConfig+0x478>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0e0:	f7fe fdca 	bl	8009c78 <HAL_GetTick>
 800b0e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0e6:	e008      	b.n	800b0fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0e8:	f7fe fdc6 	bl	8009c78 <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d901      	bls.n	800b0fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e087      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0fa:	4b27      	ldr	r3, [pc, #156]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1f0      	bne.n	800b0e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69da      	ldr	r2, [r3, #28]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	431a      	orrs	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b114:	019b      	lsls	r3, r3, #6
 800b116:	431a      	orrs	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11c:	085b      	lsrs	r3, r3, #1
 800b11e:	3b01      	subs	r3, #1
 800b120:	041b      	lsls	r3, r3, #16
 800b122:	431a      	orrs	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b128:	061b      	lsls	r3, r3, #24
 800b12a:	491b      	ldr	r1, [pc, #108]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b12c:	4313      	orrs	r3, r2
 800b12e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b130:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a0 <HAL_RCC_OscConfig+0x478>)
 800b132:	2201      	movs	r2, #1
 800b134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b136:	f7fe fd9f 	bl	8009c78 <HAL_GetTick>
 800b13a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b13c:	e008      	b.n	800b150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b13e:	f7fe fd9b 	bl	8009c78 <HAL_GetTick>
 800b142:	4602      	mov	r2, r0
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d901      	bls.n	800b150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e05c      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b150:	4b11      	ldr	r3, [pc, #68]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0f0      	beq.n	800b13e <HAL_RCC_OscConfig+0x416>
 800b15c:	e054      	b.n	800b208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b15e:	4b10      	ldr	r3, [pc, #64]	@ (800b1a0 <HAL_RCC_OscConfig+0x478>)
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b164:	f7fe fd88 	bl	8009c78 <HAL_GetTick>
 800b168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b16a:	e008      	b.n	800b17e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b16c:	f7fe fd84 	bl	8009c78 <HAL_GetTick>
 800b170:	4602      	mov	r2, r0
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	2b02      	cmp	r3, #2
 800b178:	d901      	bls.n	800b17e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e045      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b17e:	4b06      	ldr	r3, [pc, #24]	@ (800b198 <HAL_RCC_OscConfig+0x470>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1f0      	bne.n	800b16c <HAL_RCC_OscConfig+0x444>
 800b18a:	e03d      	b.n	800b208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d107      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e038      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
 800b198:	40023800 	.word	0x40023800
 800b19c:	40007000 	.word	0x40007000
 800b1a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b1a4:	4b1b      	ldr	r3, [pc, #108]	@ (800b214 <HAL_RCC_OscConfig+0x4ec>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d028      	beq.n	800b204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d121      	bne.n	800b204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d11a      	bne.n	800b204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b1da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d111      	bne.n	800b204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ea:	085b      	lsrs	r3, r3, #1
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d107      	bne.n	800b204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b200:	429a      	cmp	r2, r3
 800b202:	d001      	beq.n	800b208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	40023800 	.word	0x40023800

0800b218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e0cc      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b22c:	4b68      	ldr	r3, [pc, #416]	@ (800b3d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0307 	and.w	r3, r3, #7
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	d90c      	bls.n	800b254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b23a:	4b65      	ldr	r3, [pc, #404]	@ (800b3d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	b2d2      	uxtb	r2, r2
 800b240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b242:	4b63      	ldr	r3, [pc, #396]	@ (800b3d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d001      	beq.n	800b254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e0b8      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 0302 	and.w	r3, r3, #2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d020      	beq.n	800b2a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0304 	and.w	r3, r3, #4
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d005      	beq.n	800b278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b26c:	4b59      	ldr	r3, [pc, #356]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	4a58      	ldr	r2, [pc, #352]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b272:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0308 	and.w	r3, r3, #8
 800b280:	2b00      	cmp	r3, #0
 800b282:	d005      	beq.n	800b290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b284:	4b53      	ldr	r3, [pc, #332]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	4a52      	ldr	r2, [pc, #328]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b28a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b28e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b290:	4b50      	ldr	r3, [pc, #320]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	494d      	ldr	r1, [pc, #308]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d044      	beq.n	800b338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d107      	bne.n	800b2c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2b6:	4b47      	ldr	r3, [pc, #284]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d119      	bne.n	800b2f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e07f      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d003      	beq.n	800b2d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d107      	bne.n	800b2e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2d6:	4b3f      	ldr	r3, [pc, #252]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d109      	bne.n	800b2f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e06f      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2e6:	4b3b      	ldr	r3, [pc, #236]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0302 	and.w	r3, r3, #2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e067      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2f6:	4b37      	ldr	r3, [pc, #220]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f023 0203 	bic.w	r2, r3, #3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	4934      	ldr	r1, [pc, #208]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b304:	4313      	orrs	r3, r2
 800b306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b308:	f7fe fcb6 	bl	8009c78 <HAL_GetTick>
 800b30c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b30e:	e00a      	b.n	800b326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b310:	f7fe fcb2 	bl	8009c78 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b31e:	4293      	cmp	r3, r2
 800b320:	d901      	bls.n	800b326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e04f      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b326:	4b2b      	ldr	r3, [pc, #172]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	f003 020c 	and.w	r2, r3, #12
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	429a      	cmp	r2, r3
 800b336:	d1eb      	bne.n	800b310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b338:	4b25      	ldr	r3, [pc, #148]	@ (800b3d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d20c      	bcs.n	800b360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b346:	4b22      	ldr	r3, [pc, #136]	@ (800b3d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b34e:	4b20      	ldr	r3, [pc, #128]	@ (800b3d0 <HAL_RCC_ClockConfig+0x1b8>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d001      	beq.n	800b360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e032      	b.n	800b3c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0304 	and.w	r3, r3, #4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d008      	beq.n	800b37e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b36c:	4b19      	ldr	r3, [pc, #100]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	4916      	ldr	r1, [pc, #88]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b37a:	4313      	orrs	r3, r2
 800b37c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0308 	and.w	r3, r3, #8
 800b386:	2b00      	cmp	r3, #0
 800b388:	d009      	beq.n	800b39e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b38a:	4b12      	ldr	r3, [pc, #72]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	00db      	lsls	r3, r3, #3
 800b398:	490e      	ldr	r1, [pc, #56]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b39e:	f000 f821 	bl	800b3e4 <HAL_RCC_GetSysClockFreq>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d4 <HAL_RCC_ClockConfig+0x1bc>)
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	091b      	lsrs	r3, r3, #4
 800b3aa:	f003 030f 	and.w	r3, r3, #15
 800b3ae:	490a      	ldr	r1, [pc, #40]	@ (800b3d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b3b0:	5ccb      	ldrb	r3, [r1, r3]
 800b3b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b6:	4a09      	ldr	r2, [pc, #36]	@ (800b3dc <HAL_RCC_ClockConfig+0x1c4>)
 800b3b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b3ba:	4b09      	ldr	r3, [pc, #36]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1c8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe fc16 	bl	8009bf0 <HAL_InitTick>

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	40023c00 	.word	0x40023c00
 800b3d4:	40023800 	.word	0x40023800
 800b3d8:	08013f30 	.word	0x08013f30
 800b3dc:	200000e4 	.word	0x200000e4
 800b3e0:	200000e8 	.word	0x200000e8

0800b3e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3e8:	b094      	sub	sp, #80	@ 0x50
 800b3ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3fc:	4b79      	ldr	r3, [pc, #484]	@ (800b5e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f003 030c 	and.w	r3, r3, #12
 800b404:	2b08      	cmp	r3, #8
 800b406:	d00d      	beq.n	800b424 <HAL_RCC_GetSysClockFreq+0x40>
 800b408:	2b08      	cmp	r3, #8
 800b40a:	f200 80e1 	bhi.w	800b5d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d002      	beq.n	800b418 <HAL_RCC_GetSysClockFreq+0x34>
 800b412:	2b04      	cmp	r3, #4
 800b414:	d003      	beq.n	800b41e <HAL_RCC_GetSysClockFreq+0x3a>
 800b416:	e0db      	b.n	800b5d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b418:	4b73      	ldr	r3, [pc, #460]	@ (800b5e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b41a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800b41c:	e0db      	b.n	800b5d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b41e:	4b73      	ldr	r3, [pc, #460]	@ (800b5ec <HAL_RCC_GetSysClockFreq+0x208>)
 800b420:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b422:	e0d8      	b.n	800b5d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b424:	4b6f      	ldr	r3, [pc, #444]	@ (800b5e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b42c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b42e:	4b6d      	ldr	r3, [pc, #436]	@ (800b5e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d063      	beq.n	800b502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b43a:	4b6a      	ldr	r3, [pc, #424]	@ (800b5e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	099b      	lsrs	r3, r3, #6
 800b440:	2200      	movs	r2, #0
 800b442:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b444:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b44c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b44e:	2300      	movs	r3, #0
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
 800b452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b456:	4622      	mov	r2, r4
 800b458:	462b      	mov	r3, r5
 800b45a:	f04f 0000 	mov.w	r0, #0
 800b45e:	f04f 0100 	mov.w	r1, #0
 800b462:	0159      	lsls	r1, r3, #5
 800b464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b468:	0150      	lsls	r0, r2, #5
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4621      	mov	r1, r4
 800b470:	1a51      	subs	r1, r2, r1
 800b472:	6139      	str	r1, [r7, #16]
 800b474:	4629      	mov	r1, r5
 800b476:	eb63 0301 	sbc.w	r3, r3, r1
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	f04f 0300 	mov.w	r3, #0
 800b484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b488:	4659      	mov	r1, fp
 800b48a:	018b      	lsls	r3, r1, #6
 800b48c:	4651      	mov	r1, sl
 800b48e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b492:	4651      	mov	r1, sl
 800b494:	018a      	lsls	r2, r1, #6
 800b496:	4651      	mov	r1, sl
 800b498:	ebb2 0801 	subs.w	r8, r2, r1
 800b49c:	4659      	mov	r1, fp
 800b49e:	eb63 0901 	sbc.w	r9, r3, r1
 800b4a2:	f04f 0200 	mov.w	r2, #0
 800b4a6:	f04f 0300 	mov.w	r3, #0
 800b4aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4b6:	4690      	mov	r8, r2
 800b4b8:	4699      	mov	r9, r3
 800b4ba:	4623      	mov	r3, r4
 800b4bc:	eb18 0303 	adds.w	r3, r8, r3
 800b4c0:	60bb      	str	r3, [r7, #8]
 800b4c2:	462b      	mov	r3, r5
 800b4c4:	eb49 0303 	adc.w	r3, r9, r3
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	f04f 0200 	mov.w	r2, #0
 800b4ce:	f04f 0300 	mov.w	r3, #0
 800b4d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	024b      	lsls	r3, r1, #9
 800b4da:	4621      	mov	r1, r4
 800b4dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	024a      	lsls	r2, r1, #9
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b4f4:	f7f5 fbc8 	bl	8000c88 <__aeabi_uldivmod>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b500:	e058      	b.n	800b5b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b502:	4b38      	ldr	r3, [pc, #224]	@ (800b5e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	099b      	lsrs	r3, r3, #6
 800b508:	2200      	movs	r2, #0
 800b50a:	4618      	mov	r0, r3
 800b50c:	4611      	mov	r1, r2
 800b50e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b512:	623b      	str	r3, [r7, #32]
 800b514:	2300      	movs	r3, #0
 800b516:	627b      	str	r3, [r7, #36]	@ 0x24
 800b518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b51c:	4642      	mov	r2, r8
 800b51e:	464b      	mov	r3, r9
 800b520:	f04f 0000 	mov.w	r0, #0
 800b524:	f04f 0100 	mov.w	r1, #0
 800b528:	0159      	lsls	r1, r3, #5
 800b52a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b52e:	0150      	lsls	r0, r2, #5
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4641      	mov	r1, r8
 800b536:	ebb2 0a01 	subs.w	sl, r2, r1
 800b53a:	4649      	mov	r1, r9
 800b53c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b540:	f04f 0200 	mov.w	r2, #0
 800b544:	f04f 0300 	mov.w	r3, #0
 800b548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b54c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b554:	ebb2 040a 	subs.w	r4, r2, sl
 800b558:	eb63 050b 	sbc.w	r5, r3, fp
 800b55c:	f04f 0200 	mov.w	r2, #0
 800b560:	f04f 0300 	mov.w	r3, #0
 800b564:	00eb      	lsls	r3, r5, #3
 800b566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b56a:	00e2      	lsls	r2, r4, #3
 800b56c:	4614      	mov	r4, r2
 800b56e:	461d      	mov	r5, r3
 800b570:	4643      	mov	r3, r8
 800b572:	18e3      	adds	r3, r4, r3
 800b574:	603b      	str	r3, [r7, #0]
 800b576:	464b      	mov	r3, r9
 800b578:	eb45 0303 	adc.w	r3, r5, r3
 800b57c:	607b      	str	r3, [r7, #4]
 800b57e:	f04f 0200 	mov.w	r2, #0
 800b582:	f04f 0300 	mov.w	r3, #0
 800b586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b58a:	4629      	mov	r1, r5
 800b58c:	028b      	lsls	r3, r1, #10
 800b58e:	4621      	mov	r1, r4
 800b590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b594:	4621      	mov	r1, r4
 800b596:	028a      	lsls	r2, r1, #10
 800b598:	4610      	mov	r0, r2
 800b59a:	4619      	mov	r1, r3
 800b59c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b59e:	2200      	movs	r2, #0
 800b5a0:	61bb      	str	r3, [r7, #24]
 800b5a2:	61fa      	str	r2, [r7, #28]
 800b5a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5a8:	f7f5 fb6e 	bl	8000c88 <__aeabi_uldivmod>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	0c1b      	lsrs	r3, r3, #16
 800b5ba:	f003 0303 	and.w	r3, r3, #3
 800b5be:	3301      	adds	r3, #1
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800b5c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b5ce:	e002      	b.n	800b5d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5d0:	4b05      	ldr	r3, [pc, #20]	@ (800b5e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b5d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b5d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3750      	adds	r7, #80	@ 0x50
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5e2:	bf00      	nop
 800b5e4:	40023800 	.word	0x40023800
 800b5e8:	00f42400 	.word	0x00f42400
 800b5ec:	007a1200 	.word	0x007a1200

0800b5f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5f4:	4b03      	ldr	r3, [pc, #12]	@ (800b604 <HAL_RCC_GetHCLKFreq+0x14>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	200000e4 	.word	0x200000e4

0800b608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b60c:	f7ff fff0 	bl	800b5f0 <HAL_RCC_GetHCLKFreq>
 800b610:	4602      	mov	r2, r0
 800b612:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	0a9b      	lsrs	r3, r3, #10
 800b618:	f003 0307 	and.w	r3, r3, #7
 800b61c:	4903      	ldr	r1, [pc, #12]	@ (800b62c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b61e:	5ccb      	ldrb	r3, [r1, r3]
 800b620:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b624:	4618      	mov	r0, r3
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40023800 	.word	0x40023800
 800b62c:	08013f40 	.word	0x08013f40

0800b630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b634:	f7ff ffdc 	bl	800b5f0 <HAL_RCC_GetHCLKFreq>
 800b638:	4602      	mov	r2, r0
 800b63a:	4b05      	ldr	r3, [pc, #20]	@ (800b650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	0b5b      	lsrs	r3, r3, #13
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	4903      	ldr	r1, [pc, #12]	@ (800b654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b646:	5ccb      	ldrb	r3, [r1, r3]
 800b648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	40023800 	.word	0x40023800
 800b654:	08013f40 	.word	0x08013f40

0800b658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e041      	b.n	800b6ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d106      	bne.n	800b684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fd ff30 	bl	80094e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3304      	adds	r3, #4
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	f000 fc48 	bl	800bf2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e041      	b.n	800b78c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b00      	cmp	r3, #0
 800b712:	d106      	bne.n	800b722 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f839 	bl	800b794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2202      	movs	r2, #2
 800b726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3304      	adds	r3, #4
 800b732:	4619      	mov	r1, r3
 800b734:	4610      	mov	r0, r2
 800b736:	f000 fbf9 	bl	800bf2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d109      	bne.n	800b7d0 <HAL_TIM_PWM_Start_IT+0x28>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	bf14      	ite	ne
 800b7c8:	2301      	movne	r3, #1
 800b7ca:	2300      	moveq	r3, #0
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	e022      	b.n	800b816 <HAL_TIM_PWM_Start_IT+0x6e>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d109      	bne.n	800b7ea <HAL_TIM_PWM_Start_IT+0x42>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	bf14      	ite	ne
 800b7e2:	2301      	movne	r3, #1
 800b7e4:	2300      	moveq	r3, #0
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	e015      	b.n	800b816 <HAL_TIM_PWM_Start_IT+0x6e>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b08      	cmp	r3, #8
 800b7ee:	d109      	bne.n	800b804 <HAL_TIM_PWM_Start_IT+0x5c>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	bf14      	ite	ne
 800b7fc:	2301      	movne	r3, #1
 800b7fe:	2300      	moveq	r3, #0
 800b800:	b2db      	uxtb	r3, r3
 800b802:	e008      	b.n	800b816 <HAL_TIM_PWM_Start_IT+0x6e>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	bf14      	ite	ne
 800b810:	2301      	movne	r3, #1
 800b812:	2300      	moveq	r3, #0
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e0c7      	b.n	800b9ae <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d104      	bne.n	800b82e <HAL_TIM_PWM_Start_IT+0x86>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b82c:	e013      	b.n	800b856 <HAL_TIM_PWM_Start_IT+0xae>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b04      	cmp	r3, #4
 800b832:	d104      	bne.n	800b83e <HAL_TIM_PWM_Start_IT+0x96>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2202      	movs	r2, #2
 800b838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b83c:	e00b      	b.n	800b856 <HAL_TIM_PWM_Start_IT+0xae>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b08      	cmp	r3, #8
 800b842:	d104      	bne.n	800b84e <HAL_TIM_PWM_Start_IT+0xa6>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2202      	movs	r2, #2
 800b848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b84c:	e003      	b.n	800b856 <HAL_TIM_PWM_Start_IT+0xae>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2202      	movs	r2, #2
 800b852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b0c      	cmp	r3, #12
 800b85a:	d841      	bhi.n	800b8e0 <HAL_TIM_PWM_Start_IT+0x138>
 800b85c:	a201      	add	r2, pc, #4	@ (adr r2, 800b864 <HAL_TIM_PWM_Start_IT+0xbc>)
 800b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b862:	bf00      	nop
 800b864:	0800b899 	.word	0x0800b899
 800b868:	0800b8e1 	.word	0x0800b8e1
 800b86c:	0800b8e1 	.word	0x0800b8e1
 800b870:	0800b8e1 	.word	0x0800b8e1
 800b874:	0800b8ab 	.word	0x0800b8ab
 800b878:	0800b8e1 	.word	0x0800b8e1
 800b87c:	0800b8e1 	.word	0x0800b8e1
 800b880:	0800b8e1 	.word	0x0800b8e1
 800b884:	0800b8bd 	.word	0x0800b8bd
 800b888:	0800b8e1 	.word	0x0800b8e1
 800b88c:	0800b8e1 	.word	0x0800b8e1
 800b890:	0800b8e1 	.word	0x0800b8e1
 800b894:	0800b8cf 	.word	0x0800b8cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68da      	ldr	r2, [r3, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f042 0202 	orr.w	r2, r2, #2
 800b8a6:	60da      	str	r2, [r3, #12]
      break;
 800b8a8:	e01d      	b.n	800b8e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f042 0204 	orr.w	r2, r2, #4
 800b8b8:	60da      	str	r2, [r3, #12]
      break;
 800b8ba:	e014      	b.n	800b8e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68da      	ldr	r2, [r3, #12]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f042 0208 	orr.w	r2, r2, #8
 800b8ca:	60da      	str	r2, [r3, #12]
      break;
 800b8cc:	e00b      	b.n	800b8e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f042 0210 	orr.w	r2, r2, #16
 800b8dc:	60da      	str	r2, [r3, #12]
      break;
 800b8de:	e002      	b.n	800b8e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e4:	bf00      	nop
  }

  if (status == HAL_OK)
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d15f      	bne.n	800b9ac <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fe0f 	bl	800c518 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a2e      	ldr	r2, [pc, #184]	@ (800b9b8 <HAL_TIM_PWM_Start_IT+0x210>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d004      	beq.n	800b90e <HAL_TIM_PWM_Start_IT+0x166>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a2c      	ldr	r2, [pc, #176]	@ (800b9bc <HAL_TIM_PWM_Start_IT+0x214>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d101      	bne.n	800b912 <HAL_TIM_PWM_Start_IT+0x16a>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <HAL_TIM_PWM_Start_IT+0x16c>
 800b912:	2300      	movs	r3, #0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b926:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a22      	ldr	r2, [pc, #136]	@ (800b9b8 <HAL_TIM_PWM_Start_IT+0x210>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d022      	beq.n	800b978 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b93a:	d01d      	beq.n	800b978 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a1f      	ldr	r2, [pc, #124]	@ (800b9c0 <HAL_TIM_PWM_Start_IT+0x218>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d018      	beq.n	800b978 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1e      	ldr	r2, [pc, #120]	@ (800b9c4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d013      	beq.n	800b978 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a1c      	ldr	r2, [pc, #112]	@ (800b9c8 <HAL_TIM_PWM_Start_IT+0x220>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d00e      	beq.n	800b978 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a17      	ldr	r2, [pc, #92]	@ (800b9bc <HAL_TIM_PWM_Start_IT+0x214>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d009      	beq.n	800b978 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a18      	ldr	r2, [pc, #96]	@ (800b9cc <HAL_TIM_PWM_Start_IT+0x224>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d004      	beq.n	800b978 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a17      	ldr	r2, [pc, #92]	@ (800b9d0 <HAL_TIM_PWM_Start_IT+0x228>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d111      	bne.n	800b99c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f003 0307 	and.w	r3, r3, #7
 800b982:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b06      	cmp	r3, #6
 800b988:	d010      	beq.n	800b9ac <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f042 0201 	orr.w	r2, r2, #1
 800b998:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b99a:	e007      	b.n	800b9ac <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f042 0201 	orr.w	r2, r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	40010000 	.word	0x40010000
 800b9bc:	40010400 	.word	0x40010400
 800b9c0:	40000400 	.word	0x40000400
 800b9c4:	40000800 	.word	0x40000800
 800b9c8:	40000c00 	.word	0x40000c00
 800b9cc:	40014000 	.word	0x40014000
 800b9d0:	40001800 	.word	0x40001800

0800b9d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d020      	beq.n	800ba38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f003 0302 	and.w	r3, r3, #2
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01b      	beq.n	800ba38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f06f 0202 	mvn.w	r2, #2
 800ba08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	f003 0303 	and.w	r3, r3, #3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fa65 	bl	800beee <HAL_TIM_IC_CaptureCallback>
 800ba24:	e005      	b.n	800ba32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fa57 	bl	800beda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa68 	bl	800bf02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f003 0304 	and.w	r3, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d020      	beq.n	800ba84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d01b      	beq.n	800ba84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f06f 0204 	mvn.w	r2, #4
 800ba54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fa3f 	bl	800beee <HAL_TIM_IC_CaptureCallback>
 800ba70:	e005      	b.n	800ba7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fa31 	bl	800beda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fa42 	bl	800bf02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d020      	beq.n	800bad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f003 0308 	and.w	r3, r3, #8
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01b      	beq.n	800bad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f06f 0208 	mvn.w	r2, #8
 800baa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2204      	movs	r2, #4
 800baa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	f003 0303 	and.w	r3, r3, #3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa19 	bl	800beee <HAL_TIM_IC_CaptureCallback>
 800babc:	e005      	b.n	800baca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa0b 	bl	800beda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fa1c 	bl	800bf02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f003 0310 	and.w	r3, r3, #16
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d020      	beq.n	800bb1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f003 0310 	and.w	r3, r3, #16
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d01b      	beq.n	800bb1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f06f 0210 	mvn.w	r2, #16
 800baec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2208      	movs	r2, #8
 800baf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f9f3 	bl	800beee <HAL_TIM_IC_CaptureCallback>
 800bb08:	e005      	b.n	800bb16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f9e5 	bl	800beda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f9f6 	bl	800bf02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00c      	beq.n	800bb40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f003 0301 	and.w	r3, r3, #1
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d007      	beq.n	800bb40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f06f 0201 	mvn.w	r2, #1
 800bb38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f9c3 	bl	800bec6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00c      	beq.n	800bb64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d007      	beq.n	800bb64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bb5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fdd8 	bl	800c714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d007      	beq.n	800bb88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f9c7 	bl	800bf16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f003 0320 	and.w	r3, r3, #32
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00c      	beq.n	800bbac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f003 0320 	and.w	r3, r3, #32
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d007      	beq.n	800bbac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f06f 0220 	mvn.w	r2, #32
 800bba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fdaa 	bl	800c700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbac:	bf00      	nop
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d101      	bne.n	800bbd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbce:	2302      	movs	r3, #2
 800bbd0:	e0ae      	b.n	800bd30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b0c      	cmp	r3, #12
 800bbde:	f200 809f 	bhi.w	800bd20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bbe2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe8:	0800bc1d 	.word	0x0800bc1d
 800bbec:	0800bd21 	.word	0x0800bd21
 800bbf0:	0800bd21 	.word	0x0800bd21
 800bbf4:	0800bd21 	.word	0x0800bd21
 800bbf8:	0800bc5d 	.word	0x0800bc5d
 800bbfc:	0800bd21 	.word	0x0800bd21
 800bc00:	0800bd21 	.word	0x0800bd21
 800bc04:	0800bd21 	.word	0x0800bd21
 800bc08:	0800bc9f 	.word	0x0800bc9f
 800bc0c:	0800bd21 	.word	0x0800bd21
 800bc10:	0800bd21 	.word	0x0800bd21
 800bc14:	0800bd21 	.word	0x0800bd21
 800bc18:	0800bcdf 	.word	0x0800bcdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fa2e 	bl	800c084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	699a      	ldr	r2, [r3, #24]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f042 0208 	orr.w	r2, r2, #8
 800bc36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	699a      	ldr	r2, [r3, #24]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f022 0204 	bic.w	r2, r2, #4
 800bc46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6999      	ldr	r1, [r3, #24]
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	691a      	ldr	r2, [r3, #16]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	619a      	str	r2, [r3, #24]
      break;
 800bc5a:	e064      	b.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fa7e 	bl	800c164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699a      	ldr	r2, [r3, #24]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6999      	ldr	r1, [r3, #24]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	021a      	lsls	r2, r3, #8
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	619a      	str	r2, [r3, #24]
      break;
 800bc9c:	e043      	b.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 fad3 	bl	800c250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69da      	ldr	r2, [r3, #28]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f042 0208 	orr.w	r2, r2, #8
 800bcb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	69da      	ldr	r2, [r3, #28]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0204 	bic.w	r2, r2, #4
 800bcc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	69d9      	ldr	r1, [r3, #28]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	691a      	ldr	r2, [r3, #16]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	61da      	str	r2, [r3, #28]
      break;
 800bcdc:	e023      	b.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fb27 	bl	800c338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69da      	ldr	r2, [r3, #28]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69da      	ldr	r2, [r3, #28]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69d9      	ldr	r1, [r3, #28]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	021a      	lsls	r2, r3, #8
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	61da      	str	r2, [r3, #28]
      break;
 800bd1e:	e002      	b.n	800bd26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	75fb      	strb	r3, [r7, #23]
      break;
 800bd24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d101      	bne.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c>
 800bd50:	2302      	movs	r3, #2
 800bd52:	e0b4      	b.n	800bebe <HAL_TIM_ConfigClockSource+0x186>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bd72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd8c:	d03e      	beq.n	800be0c <HAL_TIM_ConfigClockSource+0xd4>
 800bd8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd92:	f200 8087 	bhi.w	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bd96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd9a:	f000 8086 	beq.w	800beaa <HAL_TIM_ConfigClockSource+0x172>
 800bd9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bda2:	d87f      	bhi.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bda4:	2b70      	cmp	r3, #112	@ 0x70
 800bda6:	d01a      	beq.n	800bdde <HAL_TIM_ConfigClockSource+0xa6>
 800bda8:	2b70      	cmp	r3, #112	@ 0x70
 800bdaa:	d87b      	bhi.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdac:	2b60      	cmp	r3, #96	@ 0x60
 800bdae:	d050      	beq.n	800be52 <HAL_TIM_ConfigClockSource+0x11a>
 800bdb0:	2b60      	cmp	r3, #96	@ 0x60
 800bdb2:	d877      	bhi.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdb4:	2b50      	cmp	r3, #80	@ 0x50
 800bdb6:	d03c      	beq.n	800be32 <HAL_TIM_ConfigClockSource+0xfa>
 800bdb8:	2b50      	cmp	r3, #80	@ 0x50
 800bdba:	d873      	bhi.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdbc:	2b40      	cmp	r3, #64	@ 0x40
 800bdbe:	d058      	beq.n	800be72 <HAL_TIM_ConfigClockSource+0x13a>
 800bdc0:	2b40      	cmp	r3, #64	@ 0x40
 800bdc2:	d86f      	bhi.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdc4:	2b30      	cmp	r3, #48	@ 0x30
 800bdc6:	d064      	beq.n	800be92 <HAL_TIM_ConfigClockSource+0x15a>
 800bdc8:	2b30      	cmp	r3, #48	@ 0x30
 800bdca:	d86b      	bhi.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdcc:	2b20      	cmp	r3, #32
 800bdce:	d060      	beq.n	800be92 <HAL_TIM_ConfigClockSource+0x15a>
 800bdd0:	2b20      	cmp	r3, #32
 800bdd2:	d867      	bhi.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d05c      	beq.n	800be92 <HAL_TIM_ConfigClockSource+0x15a>
 800bdd8:	2b10      	cmp	r3, #16
 800bdda:	d05a      	beq.n	800be92 <HAL_TIM_ConfigClockSource+0x15a>
 800bddc:	e062      	b.n	800bea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bdee:	f000 fb73 	bl	800c4d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800be00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	609a      	str	r2, [r3, #8]
      break;
 800be0a:	e04f      	b.n	800beac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be1c:	f000 fb5c 	bl	800c4d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	689a      	ldr	r2, [r3, #8]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800be2e:	609a      	str	r2, [r3, #8]
      break;
 800be30:	e03c      	b.n	800beac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be3e:	461a      	mov	r2, r3
 800be40:	f000 fad0 	bl	800c3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2150      	movs	r1, #80	@ 0x50
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 fb29 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800be50:	e02c      	b.n	800beac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be5e:	461a      	mov	r2, r3
 800be60:	f000 faef 	bl	800c442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2160      	movs	r1, #96	@ 0x60
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fb19 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800be70:	e01c      	b.n	800beac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be7e:	461a      	mov	r2, r3
 800be80:	f000 fab0 	bl	800c3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2140      	movs	r1, #64	@ 0x40
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fb09 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800be90:	e00c      	b.n	800beac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4619      	mov	r1, r3
 800be9c:	4610      	mov	r0, r2
 800be9e:	f000 fb00 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800bea2:	e003      	b.n	800beac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	73fb      	strb	r3, [r7, #15]
      break;
 800bea8:	e000      	b.n	800beac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800beaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800beda:	b480      	push	{r7}
 800bedc:	b083      	sub	sp, #12
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bee2:	bf00      	nop
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800beee:	b480      	push	{r7}
 800bef0:	b083      	sub	sp, #12
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bef6:	bf00      	nop
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf0a:	bf00      	nop
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf16:	b480      	push	{r7}
 800bf18:	b083      	sub	sp, #12
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf1e:	bf00      	nop
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
	...

0800bf2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a46      	ldr	r2, [pc, #280]	@ (800c058 <TIM_Base_SetConfig+0x12c>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d013      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf4a:	d00f      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a43      	ldr	r2, [pc, #268]	@ (800c05c <TIM_Base_SetConfig+0x130>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d00b      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a42      	ldr	r2, [pc, #264]	@ (800c060 <TIM_Base_SetConfig+0x134>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d007      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a41      	ldr	r2, [pc, #260]	@ (800c064 <TIM_Base_SetConfig+0x138>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d003      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a40      	ldr	r2, [pc, #256]	@ (800c068 <TIM_Base_SetConfig+0x13c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d108      	bne.n	800bf7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a35      	ldr	r2, [pc, #212]	@ (800c058 <TIM_Base_SetConfig+0x12c>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d02b      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8c:	d027      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a32      	ldr	r2, [pc, #200]	@ (800c05c <TIM_Base_SetConfig+0x130>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d023      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a31      	ldr	r2, [pc, #196]	@ (800c060 <TIM_Base_SetConfig+0x134>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d01f      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a30      	ldr	r2, [pc, #192]	@ (800c064 <TIM_Base_SetConfig+0x138>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d01b      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a2f      	ldr	r2, [pc, #188]	@ (800c068 <TIM_Base_SetConfig+0x13c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d017      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a2e      	ldr	r2, [pc, #184]	@ (800c06c <TIM_Base_SetConfig+0x140>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d013      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a2d      	ldr	r2, [pc, #180]	@ (800c070 <TIM_Base_SetConfig+0x144>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00f      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a2c      	ldr	r2, [pc, #176]	@ (800c074 <TIM_Base_SetConfig+0x148>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00b      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a2b      	ldr	r2, [pc, #172]	@ (800c078 <TIM_Base_SetConfig+0x14c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d007      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a2a      	ldr	r2, [pc, #168]	@ (800c07c <TIM_Base_SetConfig+0x150>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d003      	beq.n	800bfde <TIM_Base_SetConfig+0xb2>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a29      	ldr	r2, [pc, #164]	@ (800c080 <TIM_Base_SetConfig+0x154>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d108      	bne.n	800bff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a10      	ldr	r2, [pc, #64]	@ (800c058 <TIM_Base_SetConfig+0x12c>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d003      	beq.n	800c024 <TIM_Base_SetConfig+0xf8>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a12      	ldr	r2, [pc, #72]	@ (800c068 <TIM_Base_SetConfig+0x13c>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d103      	bne.n	800c02c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	691a      	ldr	r2, [r3, #16]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d105      	bne.n	800c04a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	f023 0201 	bic.w	r2, r3, #1
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	611a      	str	r2, [r3, #16]
  }
}
 800c04a:	bf00      	nop
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	40010000 	.word	0x40010000
 800c05c:	40000400 	.word	0x40000400
 800c060:	40000800 	.word	0x40000800
 800c064:	40000c00 	.word	0x40000c00
 800c068:	40010400 	.word	0x40010400
 800c06c:	40014000 	.word	0x40014000
 800c070:	40014400 	.word	0x40014400
 800c074:	40014800 	.word	0x40014800
 800c078:	40001800 	.word	0x40001800
 800c07c:	40001c00 	.word	0x40001c00
 800c080:	40002000 	.word	0x40002000

0800c084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c084:	b480      	push	{r7}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	f023 0201 	bic.w	r2, r3, #1
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f023 0302 	bic.w	r3, r3, #2
 800c0cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a20      	ldr	r2, [pc, #128]	@ (800c15c <TIM_OC1_SetConfig+0xd8>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d003      	beq.n	800c0e8 <TIM_OC1_SetConfig+0x64>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a1f      	ldr	r2, [pc, #124]	@ (800c160 <TIM_OC1_SetConfig+0xdc>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d10c      	bne.n	800c102 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f023 0308 	bic.w	r3, r3, #8
 800c0ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f023 0304 	bic.w	r3, r3, #4
 800c100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a15      	ldr	r2, [pc, #84]	@ (800c15c <TIM_OC1_SetConfig+0xd8>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d003      	beq.n	800c112 <TIM_OC1_SetConfig+0x8e>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a14      	ldr	r2, [pc, #80]	@ (800c160 <TIM_OC1_SetConfig+0xdc>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d111      	bne.n	800c136 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	4313      	orrs	r3, r2
 800c12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	4313      	orrs	r3, r2
 800c134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	621a      	str	r2, [r3, #32]
}
 800c150:	bf00      	nop
 800c152:	371c      	adds	r7, #28
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	40010000 	.word	0x40010000
 800c160:	40010400 	.word	0x40010400

0800c164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c164:	b480      	push	{r7}
 800c166:	b087      	sub	sp, #28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	f023 0210 	bic.w	r2, r3, #16
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	699b      	ldr	r3, [r3, #24]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c19a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	021b      	lsls	r3, r3, #8
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f023 0320 	bic.w	r3, r3, #32
 800c1ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	011b      	lsls	r3, r3, #4
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a22      	ldr	r2, [pc, #136]	@ (800c248 <TIM_OC2_SetConfig+0xe4>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d003      	beq.n	800c1cc <TIM_OC2_SetConfig+0x68>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a21      	ldr	r2, [pc, #132]	@ (800c24c <TIM_OC2_SetConfig+0xe8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d10d      	bne.n	800c1e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	011b      	lsls	r3, r3, #4
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a17      	ldr	r2, [pc, #92]	@ (800c248 <TIM_OC2_SetConfig+0xe4>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d003      	beq.n	800c1f8 <TIM_OC2_SetConfig+0x94>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a16      	ldr	r2, [pc, #88]	@ (800c24c <TIM_OC2_SetConfig+0xe8>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d113      	bne.n	800c220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	4313      	orrs	r3, r2
 800c212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	697a      	ldr	r2, [r7, #20]
 800c238:	621a      	str	r2, [r3, #32]
}
 800c23a:	bf00      	nop
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	40010000 	.word	0x40010000
 800c24c:	40010400 	.word	0x40010400

0800c250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c250:	b480      	push	{r7}
 800c252:	b087      	sub	sp, #28
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a1b      	ldr	r3, [r3, #32]
 800c264:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	69db      	ldr	r3, [r3, #28]
 800c276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f023 0303 	bic.w	r3, r3, #3
 800c286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	021b      	lsls	r3, r3, #8
 800c2a0:	697a      	ldr	r2, [r7, #20]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a21      	ldr	r2, [pc, #132]	@ (800c330 <TIM_OC3_SetConfig+0xe0>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d003      	beq.n	800c2b6 <TIM_OC3_SetConfig+0x66>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a20      	ldr	r2, [pc, #128]	@ (800c334 <TIM_OC3_SetConfig+0xe4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d10d      	bne.n	800c2d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c2bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	021b      	lsls	r3, r3, #8
 800c2c4:	697a      	ldr	r2, [r7, #20]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c2d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a16      	ldr	r2, [pc, #88]	@ (800c330 <TIM_OC3_SetConfig+0xe0>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d003      	beq.n	800c2e2 <TIM_OC3_SetConfig+0x92>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a15      	ldr	r2, [pc, #84]	@ (800c334 <TIM_OC3_SetConfig+0xe4>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d113      	bne.n	800c30a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	4313      	orrs	r3, r2
 800c308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	621a      	str	r2, [r3, #32]
}
 800c324:	bf00      	nop
 800c326:	371c      	adds	r7, #28
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	40010000 	.word	0x40010000
 800c334:	40010400 	.word	0x40010400

0800c338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c338:	b480      	push	{r7}
 800c33a:	b087      	sub	sp, #28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6a1b      	ldr	r3, [r3, #32]
 800c34c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	021b      	lsls	r3, r3, #8
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	4313      	orrs	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	031b      	lsls	r3, r3, #12
 800c38a:	693a      	ldr	r2, [r7, #16]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a12      	ldr	r2, [pc, #72]	@ (800c3dc <TIM_OC4_SetConfig+0xa4>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d003      	beq.n	800c3a0 <TIM_OC4_SetConfig+0x68>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a11      	ldr	r2, [pc, #68]	@ (800c3e0 <TIM_OC4_SetConfig+0xa8>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d109      	bne.n	800c3b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	019b      	lsls	r3, r3, #6
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	621a      	str	r2, [r3, #32]
}
 800c3ce:	bf00      	nop
 800c3d0:	371c      	adds	r7, #28
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	40010000 	.word	0x40010000
 800c3e0:	40010400 	.word	0x40010400

0800c3e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6a1b      	ldr	r3, [r3, #32]
 800c3f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	f023 0201 	bic.w	r2, r3, #1
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c40e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	011b      	lsls	r3, r3, #4
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	4313      	orrs	r3, r2
 800c418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f023 030a 	bic.w	r3, r3, #10
 800c420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	4313      	orrs	r3, r2
 800c428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	693a      	ldr	r2, [r7, #16]
 800c42e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	621a      	str	r2, [r3, #32]
}
 800c436:	bf00      	nop
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c442:	b480      	push	{r7}
 800c444:	b087      	sub	sp, #28
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6a1b      	ldr	r3, [r3, #32]
 800c458:	f023 0210 	bic.w	r2, r3, #16
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c46c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	031b      	lsls	r3, r3, #12
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	4313      	orrs	r3, r2
 800c476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c47e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	011b      	lsls	r3, r3, #4
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	4313      	orrs	r3, r2
 800c488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	621a      	str	r2, [r3, #32]
}
 800c496:	bf00      	nop
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	f043 0307 	orr.w	r3, r3, #7
 800c4c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	609a      	str	r2, [r3, #8]
}
 800c4cc:	bf00      	nop
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c4f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	021a      	lsls	r2, r3, #8
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	431a      	orrs	r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	4313      	orrs	r3, r2
 800c504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	609a      	str	r2, [r3, #8]
}
 800c50c:	bf00      	nop
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f003 031f 	and.w	r3, r3, #31
 800c52a:	2201      	movs	r2, #1
 800c52c:	fa02 f303 	lsl.w	r3, r2, r3
 800c530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6a1a      	ldr	r2, [r3, #32]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	43db      	mvns	r3, r3
 800c53a:	401a      	ands	r2, r3
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6a1a      	ldr	r2, [r3, #32]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	f003 031f 	and.w	r3, r3, #31
 800c54a:	6879      	ldr	r1, [r7, #4]
 800c54c:	fa01 f303 	lsl.w	r3, r1, r3
 800c550:	431a      	orrs	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	621a      	str	r2, [r3, #32]
}
 800c556:	bf00      	nop
 800c558:	371c      	adds	r7, #28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
	...

0800c564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c574:	2b01      	cmp	r3, #1
 800c576:	d101      	bne.n	800c57c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c578:	2302      	movs	r3, #2
 800c57a:	e05a      	b.n	800c632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a21      	ldr	r2, [pc, #132]	@ (800c640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d022      	beq.n	800c606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5c8:	d01d      	beq.n	800c606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a1d      	ldr	r2, [pc, #116]	@ (800c644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d018      	beq.n	800c606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a1b      	ldr	r2, [pc, #108]	@ (800c648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d013      	beq.n	800c606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a1a      	ldr	r2, [pc, #104]	@ (800c64c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d00e      	beq.n	800c606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a18      	ldr	r2, [pc, #96]	@ (800c650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d009      	beq.n	800c606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a17      	ldr	r2, [pc, #92]	@ (800c654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d004      	beq.n	800c606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a15      	ldr	r2, [pc, #84]	@ (800c658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d10c      	bne.n	800c620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c60c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	4313      	orrs	r3, r2
 800c616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	40010000 	.word	0x40010000
 800c644:	40000400 	.word	0x40000400
 800c648:	40000800 	.word	0x40000800
 800c64c:	40000c00 	.word	0x40000c00
 800c650:	40010400 	.word	0x40010400
 800c654:	40014000 	.word	0x40014000
 800c658:	40001800 	.word	0x40001800

0800c65c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c670:	2b01      	cmp	r3, #1
 800c672:	d101      	bne.n	800c678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c674:	2302      	movs	r3, #2
 800c676:	e03d      	b.n	800c6f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	4313      	orrs	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	69db      	ldr	r3, [r3, #28]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	e042      	b.n	800c7c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d106      	bne.n	800c754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7fc ffb4 	bl	80096bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2224      	movs	r2, #36	@ 0x24
 800c758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68da      	ldr	r2, [r3, #12]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c76a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fcdb 	bl	800d128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	691a      	ldr	r2, [r3, #16]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	695a      	ldr	r2, [r3, #20]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68da      	ldr	r2, [r3, #12]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c7a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2220      	movs	r2, #32
 800c7b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	2b20      	cmp	r3, #32
 800c7e0:	d112      	bne.n	800c808 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <HAL_UART_Receive_IT+0x26>
 800c7e8:	88fb      	ldrh	r3, [r7, #6]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e00b      	b.n	800c80a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c7f8:	88fb      	ldrh	r3, [r7, #6]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	68b9      	ldr	r1, [r7, #8]
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f000 faba 	bl	800cd78 <UART_Start_Receive_IT>
 800c804:	4603      	mov	r3, r0
 800c806:	e000      	b.n	800c80a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c808:	2302      	movs	r3, #2
  }
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
	...

0800c814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b0ba      	sub	sp, #232	@ 0xe8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c840:	2300      	movs	r3, #0
 800c842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c84a:	f003 030f 	and.w	r3, r3, #15
 800c84e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10f      	bne.n	800c87a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c85e:	f003 0320 	and.w	r3, r3, #32
 800c862:	2b00      	cmp	r3, #0
 800c864:	d009      	beq.n	800c87a <HAL_UART_IRQHandler+0x66>
 800c866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c86a:	f003 0320 	and.w	r3, r3, #32
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fb99 	bl	800cfaa <UART_Receive_IT>
      return;
 800c878:	e25b      	b.n	800cd32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c87a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f000 80de 	beq.w	800ca40 <HAL_UART_IRQHandler+0x22c>
 800c884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80d1 	beq.w	800ca40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00b      	beq.n	800c8c2 <HAL_UART_IRQHandler+0xae>
 800c8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d005      	beq.n	800c8c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ba:	f043 0201 	orr.w	r2, r3, #1
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8c6:	f003 0304 	and.w	r3, r3, #4
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00b      	beq.n	800c8e6 <HAL_UART_IRQHandler+0xd2>
 800c8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d005      	beq.n	800c8e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8de:	f043 0202 	orr.w	r2, r3, #2
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ea:	f003 0302 	and.w	r3, r3, #2
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00b      	beq.n	800c90a <HAL_UART_IRQHandler+0xf6>
 800c8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c902:	f043 0204 	orr.w	r2, r3, #4
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c90e:	f003 0308 	and.w	r3, r3, #8
 800c912:	2b00      	cmp	r3, #0
 800c914:	d011      	beq.n	800c93a <HAL_UART_IRQHandler+0x126>
 800c916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c91a:	f003 0320 	and.w	r3, r3, #32
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d105      	bne.n	800c92e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d005      	beq.n	800c93a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c932:	f043 0208 	orr.w	r2, r3, #8
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 81f2 	beq.w	800cd28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c948:	f003 0320 	and.w	r3, r3, #32
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d008      	beq.n	800c962 <HAL_UART_IRQHandler+0x14e>
 800c950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c954:	f003 0320 	and.w	r3, r3, #32
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fb24 	bl	800cfaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c96c:	2b40      	cmp	r3, #64	@ 0x40
 800c96e:	bf0c      	ite	eq
 800c970:	2301      	moveq	r3, #1
 800c972:	2300      	movne	r3, #0
 800c974:	b2db      	uxtb	r3, r3
 800c976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c97e:	f003 0308 	and.w	r3, r3, #8
 800c982:	2b00      	cmp	r3, #0
 800c984:	d103      	bne.n	800c98e <HAL_UART_IRQHandler+0x17a>
 800c986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d04f      	beq.n	800ca2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fa2c 	bl	800cdec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c99e:	2b40      	cmp	r3, #64	@ 0x40
 800c9a0:	d141      	bne.n	800ca26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3314      	adds	r3, #20
 800c9a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9b0:	e853 3f00 	ldrex	r3, [r3]
 800c9b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c9b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3314      	adds	r3, #20
 800c9ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c9ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c9d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c9da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c9de:	e841 2300 	strex	r3, r2, [r1]
 800c9e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c9e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1d9      	bne.n	800c9a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d013      	beq.n	800ca1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9fa:	4a7e      	ldr	r2, [pc, #504]	@ (800cbf4 <HAL_UART_IRQHandler+0x3e0>)
 800c9fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fd fae9 	bl	8009fda <HAL_DMA_Abort_IT>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d016      	beq.n	800ca3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ca18:	4610      	mov	r0, r2
 800ca1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca1c:	e00e      	b.n	800ca3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f994 	bl	800cd4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca24:	e00a      	b.n	800ca3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f990 	bl	800cd4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca2c:	e006      	b.n	800ca3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f98c 	bl	800cd4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ca3a:	e175      	b.n	800cd28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca3c:	bf00      	nop
    return;
 800ca3e:	e173      	b.n	800cd28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	f040 814f 	bne.w	800cce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ca4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca4e:	f003 0310 	and.w	r3, r3, #16
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 8148 	beq.w	800cce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ca58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca5c:	f003 0310 	and.w	r3, r3, #16
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 8141 	beq.w	800cce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca66:	2300      	movs	r3, #0
 800ca68:	60bb      	str	r3, [r7, #8]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	60bb      	str	r3, [r7, #8]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca86:	2b40      	cmp	r3, #64	@ 0x40
 800ca88:	f040 80b6 	bne.w	800cbf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ca98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f000 8145 	beq.w	800cd2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800caa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800caaa:	429a      	cmp	r2, r3
 800caac:	f080 813e 	bcs.w	800cd2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cabc:	69db      	ldr	r3, [r3, #28]
 800cabe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cac2:	f000 8088 	beq.w	800cbd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	330c      	adds	r3, #12
 800cacc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cad4:	e853 3f00 	ldrex	r3, [r3]
 800cad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cadc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	330c      	adds	r3, #12
 800caee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800caf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800caf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cafe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cb02:	e841 2300 	strex	r3, r2, [r1]
 800cb06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cb0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1d9      	bne.n	800cac6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3314      	adds	r3, #20
 800cb18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb1c:	e853 3f00 	ldrex	r3, [r3]
 800cb20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cb22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb24:	f023 0301 	bic.w	r3, r3, #1
 800cb28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3314      	adds	r3, #20
 800cb32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cb3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cb3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cb42:	e841 2300 	strex	r3, r2, [r1]
 800cb46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cb48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1e1      	bne.n	800cb12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3314      	adds	r3, #20
 800cb54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb58:	e853 3f00 	ldrex	r3, [r3]
 800cb5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cb5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3314      	adds	r3, #20
 800cb6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cb72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cb74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cb78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cb80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e3      	bne.n	800cb4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	330c      	adds	r3, #12
 800cb9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba6:	f023 0310 	bic.w	r3, r3, #16
 800cbaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	330c      	adds	r3, #12
 800cbb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cbb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cbba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cbbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbc0:	e841 2300 	strex	r3, r2, [r1]
 800cbc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cbc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e3      	bne.n	800cb94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fd f992 	bl	8009efa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2202      	movs	r2, #2
 800cbda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	1ad3      	subs	r3, r2, r3
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f8b7 	bl	800cd60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbf2:	e09b      	b.n	800cd2c <HAL_UART_IRQHandler+0x518>
 800cbf4:	0800ceb3 	.word	0x0800ceb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 808e 	beq.w	800cd30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cc14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f000 8089 	beq.w	800cd30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	330c      	adds	r3, #12
 800cc24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc28:	e853 3f00 	ldrex	r3, [r3]
 800cc2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	330c      	adds	r3, #12
 800cc3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cc42:	647a      	str	r2, [r7, #68]	@ 0x44
 800cc44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc4a:	e841 2300 	strex	r3, r2, [r1]
 800cc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1e3      	bne.n	800cc1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3314      	adds	r3, #20
 800cc5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc60:	e853 3f00 	ldrex	r3, [r3]
 800cc64:	623b      	str	r3, [r7, #32]
   return(result);
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	f023 0301 	bic.w	r3, r3, #1
 800cc6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3314      	adds	r3, #20
 800cc76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cc7a:	633a      	str	r2, [r7, #48]	@ 0x30
 800cc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc82:	e841 2300 	strex	r3, r2, [r1]
 800cc86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1e3      	bne.n	800cc56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2220      	movs	r2, #32
 800cc92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	330c      	adds	r3, #12
 800cca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	e853 3f00 	ldrex	r3, [r3]
 800ccaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f023 0310 	bic.w	r3, r3, #16
 800ccb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	330c      	adds	r3, #12
 800ccbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ccc0:	61fa      	str	r2, [r7, #28]
 800ccc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc4:	69b9      	ldr	r1, [r7, #24]
 800ccc6:	69fa      	ldr	r2, [r7, #28]
 800ccc8:	e841 2300 	strex	r3, r2, [r1]
 800cccc:	617b      	str	r3, [r7, #20]
   return(result);
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e3      	bne.n	800cc9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ccda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f83d 	bl	800cd60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cce6:	e023      	b.n	800cd30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <HAL_UART_IRQHandler+0x4f4>
 800ccf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d003      	beq.n	800cd08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f8ea 	bl	800ceda <UART_Transmit_IT>
    return;
 800cd06:	e014      	b.n	800cd32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cd08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00e      	beq.n	800cd32 <HAL_UART_IRQHandler+0x51e>
 800cd14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d008      	beq.n	800cd32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f92a 	bl	800cf7a <UART_EndTransmit_IT>
    return;
 800cd26:	e004      	b.n	800cd32 <HAL_UART_IRQHandler+0x51e>
    return;
 800cd28:	bf00      	nop
 800cd2a:	e002      	b.n	800cd32 <HAL_UART_IRQHandler+0x51e>
      return;
 800cd2c:	bf00      	nop
 800cd2e:	e000      	b.n	800cd32 <HAL_UART_IRQHandler+0x51e>
      return;
 800cd30:	bf00      	nop
  }
}
 800cd32:	37e8      	adds	r7, #232	@ 0xe8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd6c:	bf00      	nop
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	4613      	mov	r3, r2
 800cd84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	88fa      	ldrh	r2, [r7, #6]
 800cd90:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	88fa      	ldrh	r2, [r7, #6]
 800cd96:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2222      	movs	r2, #34	@ 0x22
 800cda2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d007      	beq.n	800cdbe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68da      	ldr	r2, [r3, #12]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cdbc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	695a      	ldr	r2, [r3, #20]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f042 0201 	orr.w	r2, r2, #1
 800cdcc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68da      	ldr	r2, [r3, #12]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f042 0220 	orr.w	r2, r2, #32
 800cddc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b095      	sub	sp, #84	@ 0x54
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	330c      	adds	r3, #12
 800cdfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfe:	e853 3f00 	ldrex	r3, [r3]
 800ce02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	330c      	adds	r3, #12
 800ce12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce14:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce1c:	e841 2300 	strex	r3, r2, [r1]
 800ce20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1e5      	bne.n	800cdf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3314      	adds	r3, #20
 800ce2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	e853 3f00 	ldrex	r3, [r3]
 800ce36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	f023 0301 	bic.w	r3, r3, #1
 800ce3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3314      	adds	r3, #20
 800ce46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce50:	e841 2300 	strex	r3, r2, [r1]
 800ce54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1e5      	bne.n	800ce28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d119      	bne.n	800ce98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	330c      	adds	r3, #12
 800ce6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	f023 0310 	bic.w	r3, r3, #16
 800ce7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	330c      	adds	r3, #12
 800ce82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce84:	61ba      	str	r2, [r7, #24]
 800ce86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	6979      	ldr	r1, [r7, #20]
 800ce8a:	69ba      	ldr	r2, [r7, #24]
 800ce8c:	e841 2300 	strex	r3, r2, [r1]
 800ce90:	613b      	str	r3, [r7, #16]
   return(result);
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e5      	bne.n	800ce64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2220      	movs	r2, #32
 800ce9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cea6:	bf00      	nop
 800cea8:	3754      	adds	r7, #84	@ 0x54
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f7ff ff3d 	bl	800cd4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ced2:	bf00      	nop
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ceda:	b480      	push	{r7}
 800cedc:	b085      	sub	sp, #20
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b21      	cmp	r3, #33	@ 0x21
 800ceec:	d13e      	bne.n	800cf6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cef6:	d114      	bne.n	800cf22 <UART_Transmit_IT+0x48>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d110      	bne.n	800cf22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a1b      	ldr	r3, [r3, #32]
 800cf04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	1c9a      	adds	r2, r3, #2
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	621a      	str	r2, [r3, #32]
 800cf20:	e008      	b.n	800cf34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a1b      	ldr	r3, [r3, #32]
 800cf26:	1c59      	adds	r1, r3, #1
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	6211      	str	r1, [r2, #32]
 800cf2c:	781a      	ldrb	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	4619      	mov	r1, r3
 800cf42:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10f      	bne.n	800cf68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68da      	ldr	r2, [r3, #12]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	e000      	b.n	800cf6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cf6c:	2302      	movs	r3, #2
  }
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b082      	sub	sp, #8
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68da      	ldr	r2, [r3, #12]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cf90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2220      	movs	r2, #32
 800cf96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff fecc 	bl	800cd38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b08c      	sub	sp, #48	@ 0x30
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	2b22      	cmp	r3, #34	@ 0x22
 800cfbc:	f040 80ae 	bne.w	800d11c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfc8:	d117      	bne.n	800cffa <UART_Receive_IT+0x50>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d113      	bne.n	800cffa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfda:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cff2:	1c9a      	adds	r2, r3, #2
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	629a      	str	r2, [r3, #40]	@ 0x28
 800cff8:	e026      	b.n	800d048 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d000:	2300      	movs	r3, #0
 800d002:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d00c:	d007      	beq.n	800d01e <UART_Receive_IT+0x74>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10a      	bne.n	800d02c <UART_Receive_IT+0x82>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d106      	bne.n	800d02c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	b2da      	uxtb	r2, r3
 800d026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d028:	701a      	strb	r2, [r3, #0]
 800d02a:	e008      	b.n	800d03e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	3b01      	subs	r3, #1
 800d050:	b29b      	uxth	r3, r3
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	4619      	mov	r1, r3
 800d056:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d15d      	bne.n	800d118 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68da      	ldr	r2, [r3, #12]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f022 0220 	bic.w	r2, r2, #32
 800d06a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68da      	ldr	r2, [r3, #12]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d07a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	695a      	ldr	r2, [r3, #20]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f022 0201 	bic.w	r2, r2, #1
 800d08a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2220      	movs	r2, #32
 800d090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d135      	bne.n	800d10e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	330c      	adds	r3, #12
 800d0ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	e853 3f00 	ldrex	r3, [r3]
 800d0b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f023 0310 	bic.w	r3, r3, #16
 800d0be:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	330c      	adds	r3, #12
 800d0c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0c8:	623a      	str	r2, [r7, #32]
 800d0ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0cc:	69f9      	ldr	r1, [r7, #28]
 800d0ce:	6a3a      	ldr	r2, [r7, #32]
 800d0d0:	e841 2300 	strex	r3, r2, [r1]
 800d0d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1e5      	bne.n	800d0a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 0310 	and.w	r3, r3, #16
 800d0e6:	2b10      	cmp	r3, #16
 800d0e8:	d10a      	bne.n	800d100 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	60fb      	str	r3, [r7, #12]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	60fb      	str	r3, [r7, #12]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d104:	4619      	mov	r1, r3
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7ff fe2a 	bl	800cd60 <HAL_UARTEx_RxEventCallback>
 800d10c:	e002      	b.n	800d114 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7f8 fd34 	bl	8005b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	e002      	b.n	800d11e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	e000      	b.n	800d11e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d11c:	2302      	movs	r3, #2
  }
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3730      	adds	r7, #48	@ 0x30
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d12c:	b0c0      	sub	sp, #256	@ 0x100
 800d12e:	af00      	add	r7, sp, #0
 800d130:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d144:	68d9      	ldr	r1, [r3, #12]
 800d146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	ea40 0301 	orr.w	r3, r0, r1
 800d150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d156:	689a      	ldr	r2, [r3, #8]
 800d158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	431a      	orrs	r2, r3
 800d160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	431a      	orrs	r2, r3
 800d168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	4313      	orrs	r3, r2
 800d170:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d180:	f021 010c 	bic.w	r1, r1, #12
 800d184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d18e:	430b      	orrs	r3, r1
 800d190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	695b      	ldr	r3, [r3, #20]
 800d19a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1a2:	6999      	ldr	r1, [r3, #24]
 800d1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	ea40 0301 	orr.w	r3, r0, r1
 800d1ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	4b8f      	ldr	r3, [pc, #572]	@ (800d3f4 <UART_SetConfig+0x2cc>)
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d005      	beq.n	800d1c8 <UART_SetConfig+0xa0>
 800d1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	4b8d      	ldr	r3, [pc, #564]	@ (800d3f8 <UART_SetConfig+0x2d0>)
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d104      	bne.n	800d1d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d1c8:	f7fe fa32 	bl	800b630 <HAL_RCC_GetPCLK2Freq>
 800d1cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d1d0:	e003      	b.n	800d1da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d1d2:	f7fe fa19 	bl	800b608 <HAL_RCC_GetPCLK1Freq>
 800d1d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1de:	69db      	ldr	r3, [r3, #28]
 800d1e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1e4:	f040 810c 	bne.w	800d400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d1e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d1f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d1f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	462b      	mov	r3, r5
 800d1fe:	1891      	adds	r1, r2, r2
 800d200:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d202:	415b      	adcs	r3, r3
 800d204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d20a:	4621      	mov	r1, r4
 800d20c:	eb12 0801 	adds.w	r8, r2, r1
 800d210:	4629      	mov	r1, r5
 800d212:	eb43 0901 	adc.w	r9, r3, r1
 800d216:	f04f 0200 	mov.w	r2, #0
 800d21a:	f04f 0300 	mov.w	r3, #0
 800d21e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d22a:	4690      	mov	r8, r2
 800d22c:	4699      	mov	r9, r3
 800d22e:	4623      	mov	r3, r4
 800d230:	eb18 0303 	adds.w	r3, r8, r3
 800d234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d238:	462b      	mov	r3, r5
 800d23a:	eb49 0303 	adc.w	r3, r9, r3
 800d23e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d24e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d256:	460b      	mov	r3, r1
 800d258:	18db      	adds	r3, r3, r3
 800d25a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d25c:	4613      	mov	r3, r2
 800d25e:	eb42 0303 	adc.w	r3, r2, r3
 800d262:	657b      	str	r3, [r7, #84]	@ 0x54
 800d264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d26c:	f7f3 fd0c 	bl	8000c88 <__aeabi_uldivmod>
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	4b61      	ldr	r3, [pc, #388]	@ (800d3fc <UART_SetConfig+0x2d4>)
 800d276:	fba3 2302 	umull	r2, r3, r3, r2
 800d27a:	095b      	lsrs	r3, r3, #5
 800d27c:	011c      	lsls	r4, r3, #4
 800d27e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d282:	2200      	movs	r2, #0
 800d284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d288:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d28c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d290:	4642      	mov	r2, r8
 800d292:	464b      	mov	r3, r9
 800d294:	1891      	adds	r1, r2, r2
 800d296:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d298:	415b      	adcs	r3, r3
 800d29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d29c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d2a0:	4641      	mov	r1, r8
 800d2a2:	eb12 0a01 	adds.w	sl, r2, r1
 800d2a6:	4649      	mov	r1, r9
 800d2a8:	eb43 0b01 	adc.w	fp, r3, r1
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	f04f 0300 	mov.w	r3, #0
 800d2b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d2b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d2bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2c0:	4692      	mov	sl, r2
 800d2c2:	469b      	mov	fp, r3
 800d2c4:	4643      	mov	r3, r8
 800d2c6:	eb1a 0303 	adds.w	r3, sl, r3
 800d2ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d2ce:	464b      	mov	r3, r9
 800d2d0:	eb4b 0303 	adc.w	r3, fp, r3
 800d2d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d2e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d2e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	18db      	adds	r3, r3, r3
 800d2f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	eb42 0303 	adc.w	r3, r2, r3
 800d2f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d2fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d302:	f7f3 fcc1 	bl	8000c88 <__aeabi_uldivmod>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4611      	mov	r1, r2
 800d30c:	4b3b      	ldr	r3, [pc, #236]	@ (800d3fc <UART_SetConfig+0x2d4>)
 800d30e:	fba3 2301 	umull	r2, r3, r3, r1
 800d312:	095b      	lsrs	r3, r3, #5
 800d314:	2264      	movs	r2, #100	@ 0x64
 800d316:	fb02 f303 	mul.w	r3, r2, r3
 800d31a:	1acb      	subs	r3, r1, r3
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d322:	4b36      	ldr	r3, [pc, #216]	@ (800d3fc <UART_SetConfig+0x2d4>)
 800d324:	fba3 2302 	umull	r2, r3, r3, r2
 800d328:	095b      	lsrs	r3, r3, #5
 800d32a:	005b      	lsls	r3, r3, #1
 800d32c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d330:	441c      	add	r4, r3
 800d332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d336:	2200      	movs	r2, #0
 800d338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d33c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d344:	4642      	mov	r2, r8
 800d346:	464b      	mov	r3, r9
 800d348:	1891      	adds	r1, r2, r2
 800d34a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d34c:	415b      	adcs	r3, r3
 800d34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d354:	4641      	mov	r1, r8
 800d356:	1851      	adds	r1, r2, r1
 800d358:	6339      	str	r1, [r7, #48]	@ 0x30
 800d35a:	4649      	mov	r1, r9
 800d35c:	414b      	adcs	r3, r1
 800d35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d360:	f04f 0200 	mov.w	r2, #0
 800d364:	f04f 0300 	mov.w	r3, #0
 800d368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d36c:	4659      	mov	r1, fp
 800d36e:	00cb      	lsls	r3, r1, #3
 800d370:	4651      	mov	r1, sl
 800d372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d376:	4651      	mov	r1, sl
 800d378:	00ca      	lsls	r2, r1, #3
 800d37a:	4610      	mov	r0, r2
 800d37c:	4619      	mov	r1, r3
 800d37e:	4603      	mov	r3, r0
 800d380:	4642      	mov	r2, r8
 800d382:	189b      	adds	r3, r3, r2
 800d384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d388:	464b      	mov	r3, r9
 800d38a:	460a      	mov	r2, r1
 800d38c:	eb42 0303 	adc.w	r3, r2, r3
 800d390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d3a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d3a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	18db      	adds	r3, r3, r3
 800d3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	eb42 0303 	adc.w	r3, r2, r3
 800d3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d3ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d3be:	f7f3 fc63 	bl	8000c88 <__aeabi_uldivmod>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d3fc <UART_SetConfig+0x2d4>)
 800d3c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d3cc:	095b      	lsrs	r3, r3, #5
 800d3ce:	2164      	movs	r1, #100	@ 0x64
 800d3d0:	fb01 f303 	mul.w	r3, r1, r3
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	3332      	adds	r3, #50	@ 0x32
 800d3da:	4a08      	ldr	r2, [pc, #32]	@ (800d3fc <UART_SetConfig+0x2d4>)
 800d3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e0:	095b      	lsrs	r3, r3, #5
 800d3e2:	f003 0207 	and.w	r2, r3, #7
 800d3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4422      	add	r2, r4
 800d3ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d3f0:	e106      	b.n	800d600 <UART_SetConfig+0x4d8>
 800d3f2:	bf00      	nop
 800d3f4:	40011000 	.word	0x40011000
 800d3f8:	40011400 	.word	0x40011400
 800d3fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d404:	2200      	movs	r2, #0
 800d406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d40a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d40e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d412:	4642      	mov	r2, r8
 800d414:	464b      	mov	r3, r9
 800d416:	1891      	adds	r1, r2, r2
 800d418:	6239      	str	r1, [r7, #32]
 800d41a:	415b      	adcs	r3, r3
 800d41c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d41e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d422:	4641      	mov	r1, r8
 800d424:	1854      	adds	r4, r2, r1
 800d426:	4649      	mov	r1, r9
 800d428:	eb43 0501 	adc.w	r5, r3, r1
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	f04f 0300 	mov.w	r3, #0
 800d434:	00eb      	lsls	r3, r5, #3
 800d436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d43a:	00e2      	lsls	r2, r4, #3
 800d43c:	4614      	mov	r4, r2
 800d43e:	461d      	mov	r5, r3
 800d440:	4643      	mov	r3, r8
 800d442:	18e3      	adds	r3, r4, r3
 800d444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d448:	464b      	mov	r3, r9
 800d44a:	eb45 0303 	adc.w	r3, r5, r3
 800d44e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d45e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d462:	f04f 0200 	mov.w	r2, #0
 800d466:	f04f 0300 	mov.w	r3, #0
 800d46a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d46e:	4629      	mov	r1, r5
 800d470:	008b      	lsls	r3, r1, #2
 800d472:	4621      	mov	r1, r4
 800d474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d478:	4621      	mov	r1, r4
 800d47a:	008a      	lsls	r2, r1, #2
 800d47c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d480:	f7f3 fc02 	bl	8000c88 <__aeabi_uldivmod>
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	4b60      	ldr	r3, [pc, #384]	@ (800d60c <UART_SetConfig+0x4e4>)
 800d48a:	fba3 2302 	umull	r2, r3, r3, r2
 800d48e:	095b      	lsrs	r3, r3, #5
 800d490:	011c      	lsls	r4, r3, #4
 800d492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d496:	2200      	movs	r2, #0
 800d498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d49c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d4a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d4a4:	4642      	mov	r2, r8
 800d4a6:	464b      	mov	r3, r9
 800d4a8:	1891      	adds	r1, r2, r2
 800d4aa:	61b9      	str	r1, [r7, #24]
 800d4ac:	415b      	adcs	r3, r3
 800d4ae:	61fb      	str	r3, [r7, #28]
 800d4b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d4b4:	4641      	mov	r1, r8
 800d4b6:	1851      	adds	r1, r2, r1
 800d4b8:	6139      	str	r1, [r7, #16]
 800d4ba:	4649      	mov	r1, r9
 800d4bc:	414b      	adcs	r3, r1
 800d4be:	617b      	str	r3, [r7, #20]
 800d4c0:	f04f 0200 	mov.w	r2, #0
 800d4c4:	f04f 0300 	mov.w	r3, #0
 800d4c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	00cb      	lsls	r3, r1, #3
 800d4d0:	4651      	mov	r1, sl
 800d4d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d4d6:	4651      	mov	r1, sl
 800d4d8:	00ca      	lsls	r2, r1, #3
 800d4da:	4610      	mov	r0, r2
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4603      	mov	r3, r0
 800d4e0:	4642      	mov	r2, r8
 800d4e2:	189b      	adds	r3, r3, r2
 800d4e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d4e8:	464b      	mov	r3, r9
 800d4ea:	460a      	mov	r2, r1
 800d4ec:	eb42 0303 	adc.w	r3, r2, r3
 800d4f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d4fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d500:	f04f 0200 	mov.w	r2, #0
 800d504:	f04f 0300 	mov.w	r3, #0
 800d508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d50c:	4649      	mov	r1, r9
 800d50e:	008b      	lsls	r3, r1, #2
 800d510:	4641      	mov	r1, r8
 800d512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d516:	4641      	mov	r1, r8
 800d518:	008a      	lsls	r2, r1, #2
 800d51a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d51e:	f7f3 fbb3 	bl	8000c88 <__aeabi_uldivmod>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	4611      	mov	r1, r2
 800d528:	4b38      	ldr	r3, [pc, #224]	@ (800d60c <UART_SetConfig+0x4e4>)
 800d52a:	fba3 2301 	umull	r2, r3, r3, r1
 800d52e:	095b      	lsrs	r3, r3, #5
 800d530:	2264      	movs	r2, #100	@ 0x64
 800d532:	fb02 f303 	mul.w	r3, r2, r3
 800d536:	1acb      	subs	r3, r1, r3
 800d538:	011b      	lsls	r3, r3, #4
 800d53a:	3332      	adds	r3, #50	@ 0x32
 800d53c:	4a33      	ldr	r2, [pc, #204]	@ (800d60c <UART_SetConfig+0x4e4>)
 800d53e:	fba2 2303 	umull	r2, r3, r2, r3
 800d542:	095b      	lsrs	r3, r3, #5
 800d544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d548:	441c      	add	r4, r3
 800d54a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d54e:	2200      	movs	r2, #0
 800d550:	673b      	str	r3, [r7, #112]	@ 0x70
 800d552:	677a      	str	r2, [r7, #116]	@ 0x74
 800d554:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d558:	4642      	mov	r2, r8
 800d55a:	464b      	mov	r3, r9
 800d55c:	1891      	adds	r1, r2, r2
 800d55e:	60b9      	str	r1, [r7, #8]
 800d560:	415b      	adcs	r3, r3
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d568:	4641      	mov	r1, r8
 800d56a:	1851      	adds	r1, r2, r1
 800d56c:	6039      	str	r1, [r7, #0]
 800d56e:	4649      	mov	r1, r9
 800d570:	414b      	adcs	r3, r1
 800d572:	607b      	str	r3, [r7, #4]
 800d574:	f04f 0200 	mov.w	r2, #0
 800d578:	f04f 0300 	mov.w	r3, #0
 800d57c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d580:	4659      	mov	r1, fp
 800d582:	00cb      	lsls	r3, r1, #3
 800d584:	4651      	mov	r1, sl
 800d586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d58a:	4651      	mov	r1, sl
 800d58c:	00ca      	lsls	r2, r1, #3
 800d58e:	4610      	mov	r0, r2
 800d590:	4619      	mov	r1, r3
 800d592:	4603      	mov	r3, r0
 800d594:	4642      	mov	r2, r8
 800d596:	189b      	adds	r3, r3, r2
 800d598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d59a:	464b      	mov	r3, r9
 800d59c:	460a      	mov	r2, r1
 800d59e:	eb42 0303 	adc.w	r3, r2, r3
 800d5a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800d5ae:	667a      	str	r2, [r7, #100]	@ 0x64
 800d5b0:	f04f 0200 	mov.w	r2, #0
 800d5b4:	f04f 0300 	mov.w	r3, #0
 800d5b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d5bc:	4649      	mov	r1, r9
 800d5be:	008b      	lsls	r3, r1, #2
 800d5c0:	4641      	mov	r1, r8
 800d5c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d5c6:	4641      	mov	r1, r8
 800d5c8:	008a      	lsls	r2, r1, #2
 800d5ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d5ce:	f7f3 fb5b 	bl	8000c88 <__aeabi_uldivmod>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d60c <UART_SetConfig+0x4e4>)
 800d5d8:	fba3 1302 	umull	r1, r3, r3, r2
 800d5dc:	095b      	lsrs	r3, r3, #5
 800d5de:	2164      	movs	r1, #100	@ 0x64
 800d5e0:	fb01 f303 	mul.w	r3, r1, r3
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	011b      	lsls	r3, r3, #4
 800d5e8:	3332      	adds	r3, #50	@ 0x32
 800d5ea:	4a08      	ldr	r2, [pc, #32]	@ (800d60c <UART_SetConfig+0x4e4>)
 800d5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d5f0:	095b      	lsrs	r3, r3, #5
 800d5f2:	f003 020f 	and.w	r2, r3, #15
 800d5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4422      	add	r2, r4
 800d5fe:	609a      	str	r2, [r3, #8]
}
 800d600:	bf00      	nop
 800d602:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d606:	46bd      	mov	sp, r7
 800d608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d60c:	51eb851f 	.word	0x51eb851f

0800d610 <atof>:
 800d610:	2100      	movs	r1, #0
 800d612:	f000 be0f 	b.w	800e234 <strtod>

0800d616 <atoi>:
 800d616:	220a      	movs	r2, #10
 800d618:	2100      	movs	r1, #0
 800d61a:	f000 be93 	b.w	800e344 <strtol>

0800d61e <sulp>:
 800d61e:	b570      	push	{r4, r5, r6, lr}
 800d620:	4604      	mov	r4, r0
 800d622:	460d      	mov	r5, r1
 800d624:	ec45 4b10 	vmov	d0, r4, r5
 800d628:	4616      	mov	r6, r2
 800d62a:	f003 fd5d 	bl	80110e8 <__ulp>
 800d62e:	ec51 0b10 	vmov	r0, r1, d0
 800d632:	b17e      	cbz	r6, 800d654 <sulp+0x36>
 800d634:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d638:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	dd09      	ble.n	800d654 <sulp+0x36>
 800d640:	051b      	lsls	r3, r3, #20
 800d642:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d646:	2400      	movs	r4, #0
 800d648:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d64c:	4622      	mov	r2, r4
 800d64e:	462b      	mov	r3, r5
 800d650:	f7f2 ffd2 	bl	80005f8 <__aeabi_dmul>
 800d654:	ec41 0b10 	vmov	d0, r0, r1
 800d658:	bd70      	pop	{r4, r5, r6, pc}
 800d65a:	0000      	movs	r0, r0
 800d65c:	0000      	movs	r0, r0
	...

0800d660 <_strtod_l>:
 800d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d664:	b09f      	sub	sp, #124	@ 0x7c
 800d666:	460c      	mov	r4, r1
 800d668:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d66a:	2200      	movs	r2, #0
 800d66c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d66e:	9005      	str	r0, [sp, #20]
 800d670:	f04f 0a00 	mov.w	sl, #0
 800d674:	f04f 0b00 	mov.w	fp, #0
 800d678:	460a      	mov	r2, r1
 800d67a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d67c:	7811      	ldrb	r1, [r2, #0]
 800d67e:	292b      	cmp	r1, #43	@ 0x2b
 800d680:	d04a      	beq.n	800d718 <_strtod_l+0xb8>
 800d682:	d838      	bhi.n	800d6f6 <_strtod_l+0x96>
 800d684:	290d      	cmp	r1, #13
 800d686:	d832      	bhi.n	800d6ee <_strtod_l+0x8e>
 800d688:	2908      	cmp	r1, #8
 800d68a:	d832      	bhi.n	800d6f2 <_strtod_l+0x92>
 800d68c:	2900      	cmp	r1, #0
 800d68e:	d03b      	beq.n	800d708 <_strtod_l+0xa8>
 800d690:	2200      	movs	r2, #0
 800d692:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d696:	782a      	ldrb	r2, [r5, #0]
 800d698:	2a30      	cmp	r2, #48	@ 0x30
 800d69a:	f040 80b3 	bne.w	800d804 <_strtod_l+0x1a4>
 800d69e:	786a      	ldrb	r2, [r5, #1]
 800d6a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d6a4:	2a58      	cmp	r2, #88	@ 0x58
 800d6a6:	d16e      	bne.n	800d786 <_strtod_l+0x126>
 800d6a8:	9302      	str	r3, [sp, #8]
 800d6aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800d6b0:	9300      	str	r3, [sp, #0]
 800d6b2:	4a8e      	ldr	r2, [pc, #568]	@ (800d8ec <_strtod_l+0x28c>)
 800d6b4:	9805      	ldr	r0, [sp, #20]
 800d6b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d6b8:	a919      	add	r1, sp, #100	@ 0x64
 800d6ba:	f002 fe07 	bl	80102cc <__gethex>
 800d6be:	f010 060f 	ands.w	r6, r0, #15
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	d005      	beq.n	800d6d2 <_strtod_l+0x72>
 800d6c6:	2e06      	cmp	r6, #6
 800d6c8:	d128      	bne.n	800d71c <_strtod_l+0xbc>
 800d6ca:	3501      	adds	r5, #1
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800d6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f040 858e 	bne.w	800e1f6 <_strtod_l+0xb96>
 800d6da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6dc:	b1cb      	cbz	r3, 800d712 <_strtod_l+0xb2>
 800d6de:	4652      	mov	r2, sl
 800d6e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d6e4:	ec43 2b10 	vmov	d0, r2, r3
 800d6e8:	b01f      	add	sp, #124	@ 0x7c
 800d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ee:	2920      	cmp	r1, #32
 800d6f0:	d1ce      	bne.n	800d690 <_strtod_l+0x30>
 800d6f2:	3201      	adds	r2, #1
 800d6f4:	e7c1      	b.n	800d67a <_strtod_l+0x1a>
 800d6f6:	292d      	cmp	r1, #45	@ 0x2d
 800d6f8:	d1ca      	bne.n	800d690 <_strtod_l+0x30>
 800d6fa:	2101      	movs	r1, #1
 800d6fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d6fe:	1c51      	adds	r1, r2, #1
 800d700:	9119      	str	r1, [sp, #100]	@ 0x64
 800d702:	7852      	ldrb	r2, [r2, #1]
 800d704:	2a00      	cmp	r2, #0
 800d706:	d1c5      	bne.n	800d694 <_strtod_l+0x34>
 800d708:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d70a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f040 8570 	bne.w	800e1f2 <_strtod_l+0xb92>
 800d712:	4652      	mov	r2, sl
 800d714:	465b      	mov	r3, fp
 800d716:	e7e5      	b.n	800d6e4 <_strtod_l+0x84>
 800d718:	2100      	movs	r1, #0
 800d71a:	e7ef      	b.n	800d6fc <_strtod_l+0x9c>
 800d71c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d71e:	b13a      	cbz	r2, 800d730 <_strtod_l+0xd0>
 800d720:	2135      	movs	r1, #53	@ 0x35
 800d722:	a81c      	add	r0, sp, #112	@ 0x70
 800d724:	f003 fdda 	bl	80112dc <__copybits>
 800d728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d72a:	9805      	ldr	r0, [sp, #20]
 800d72c:	f003 f9a8 	bl	8010a80 <_Bfree>
 800d730:	3e01      	subs	r6, #1
 800d732:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d734:	2e04      	cmp	r6, #4
 800d736:	d806      	bhi.n	800d746 <_strtod_l+0xe6>
 800d738:	e8df f006 	tbb	[pc, r6]
 800d73c:	201d0314 	.word	0x201d0314
 800d740:	14          	.byte	0x14
 800d741:	00          	.byte	0x00
 800d742:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d746:	05e1      	lsls	r1, r4, #23
 800d748:	bf48      	it	mi
 800d74a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d74e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d752:	0d1b      	lsrs	r3, r3, #20
 800d754:	051b      	lsls	r3, r3, #20
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1bb      	bne.n	800d6d2 <_strtod_l+0x72>
 800d75a:	f001 fe4f 	bl	800f3fc <__errno>
 800d75e:	2322      	movs	r3, #34	@ 0x22
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	e7b6      	b.n	800d6d2 <_strtod_l+0x72>
 800d764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d768:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d76c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d770:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d774:	e7e7      	b.n	800d746 <_strtod_l+0xe6>
 800d776:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d8f4 <_strtod_l+0x294>
 800d77a:	e7e4      	b.n	800d746 <_strtod_l+0xe6>
 800d77c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d780:	f04f 3aff 	mov.w	sl, #4294967295
 800d784:	e7df      	b.n	800d746 <_strtod_l+0xe6>
 800d786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d788:	1c5a      	adds	r2, r3, #1
 800d78a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d78c:	785b      	ldrb	r3, [r3, #1]
 800d78e:	2b30      	cmp	r3, #48	@ 0x30
 800d790:	d0f9      	beq.n	800d786 <_strtod_l+0x126>
 800d792:	2b00      	cmp	r3, #0
 800d794:	d09d      	beq.n	800d6d2 <_strtod_l+0x72>
 800d796:	2301      	movs	r3, #1
 800d798:	9309      	str	r3, [sp, #36]	@ 0x24
 800d79a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d79c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d79e:	2300      	movs	r3, #0
 800d7a0:	9308      	str	r3, [sp, #32]
 800d7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7a4:	461f      	mov	r7, r3
 800d7a6:	220a      	movs	r2, #10
 800d7a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d7aa:	7805      	ldrb	r5, [r0, #0]
 800d7ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d7b0:	b2d9      	uxtb	r1, r3
 800d7b2:	2909      	cmp	r1, #9
 800d7b4:	d928      	bls.n	800d808 <_strtod_l+0x1a8>
 800d7b6:	494e      	ldr	r1, [pc, #312]	@ (800d8f0 <_strtod_l+0x290>)
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f001 fd66 	bl	800f28a <strncmp>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d032      	beq.n	800d828 <_strtod_l+0x1c8>
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4681      	mov	r9, r0
 800d7c8:	463d      	mov	r5, r7
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2a65      	cmp	r2, #101	@ 0x65
 800d7ce:	d001      	beq.n	800d7d4 <_strtod_l+0x174>
 800d7d0:	2a45      	cmp	r2, #69	@ 0x45
 800d7d2:	d114      	bne.n	800d7fe <_strtod_l+0x19e>
 800d7d4:	b91d      	cbnz	r5, 800d7de <_strtod_l+0x17e>
 800d7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7d8:	4302      	orrs	r2, r0
 800d7da:	d095      	beq.n	800d708 <_strtod_l+0xa8>
 800d7dc:	2500      	movs	r5, #0
 800d7de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d7e0:	1c62      	adds	r2, r4, #1
 800d7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7e4:	7862      	ldrb	r2, [r4, #1]
 800d7e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d7e8:	d077      	beq.n	800d8da <_strtod_l+0x27a>
 800d7ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800d7ec:	d07b      	beq.n	800d8e6 <_strtod_l+0x286>
 800d7ee:	f04f 0c00 	mov.w	ip, #0
 800d7f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d7f6:	2909      	cmp	r1, #9
 800d7f8:	f240 8082 	bls.w	800d900 <_strtod_l+0x2a0>
 800d7fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d7fe:	f04f 0800 	mov.w	r8, #0
 800d802:	e0a2      	b.n	800d94a <_strtod_l+0x2ea>
 800d804:	2300      	movs	r3, #0
 800d806:	e7c7      	b.n	800d798 <_strtod_l+0x138>
 800d808:	2f08      	cmp	r7, #8
 800d80a:	bfd5      	itete	le
 800d80c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d80e:	9908      	ldrgt	r1, [sp, #32]
 800d810:	fb02 3301 	mlale	r3, r2, r1, r3
 800d814:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d818:	f100 0001 	add.w	r0, r0, #1
 800d81c:	bfd4      	ite	le
 800d81e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d820:	9308      	strgt	r3, [sp, #32]
 800d822:	3701      	adds	r7, #1
 800d824:	9019      	str	r0, [sp, #100]	@ 0x64
 800d826:	e7bf      	b.n	800d7a8 <_strtod_l+0x148>
 800d828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d82a:	1c5a      	adds	r2, r3, #1
 800d82c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d82e:	785a      	ldrb	r2, [r3, #1]
 800d830:	b37f      	cbz	r7, 800d892 <_strtod_l+0x232>
 800d832:	4681      	mov	r9, r0
 800d834:	463d      	mov	r5, r7
 800d836:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	d912      	bls.n	800d864 <_strtod_l+0x204>
 800d83e:	2301      	movs	r3, #1
 800d840:	e7c4      	b.n	800d7cc <_strtod_l+0x16c>
 800d842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	9219      	str	r2, [sp, #100]	@ 0x64
 800d848:	785a      	ldrb	r2, [r3, #1]
 800d84a:	3001      	adds	r0, #1
 800d84c:	2a30      	cmp	r2, #48	@ 0x30
 800d84e:	d0f8      	beq.n	800d842 <_strtod_l+0x1e2>
 800d850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d854:	2b08      	cmp	r3, #8
 800d856:	f200 84d3 	bhi.w	800e200 <_strtod_l+0xba0>
 800d85a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d85c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d85e:	4681      	mov	r9, r0
 800d860:	2000      	movs	r0, #0
 800d862:	4605      	mov	r5, r0
 800d864:	3a30      	subs	r2, #48	@ 0x30
 800d866:	f100 0301 	add.w	r3, r0, #1
 800d86a:	d02a      	beq.n	800d8c2 <_strtod_l+0x262>
 800d86c:	4499      	add	r9, r3
 800d86e:	eb00 0c05 	add.w	ip, r0, r5
 800d872:	462b      	mov	r3, r5
 800d874:	210a      	movs	r1, #10
 800d876:	4563      	cmp	r3, ip
 800d878:	d10d      	bne.n	800d896 <_strtod_l+0x236>
 800d87a:	1c69      	adds	r1, r5, #1
 800d87c:	4401      	add	r1, r0
 800d87e:	4428      	add	r0, r5
 800d880:	2808      	cmp	r0, #8
 800d882:	dc16      	bgt.n	800d8b2 <_strtod_l+0x252>
 800d884:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d886:	230a      	movs	r3, #10
 800d888:	fb03 2300 	mla	r3, r3, r0, r2
 800d88c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d88e:	2300      	movs	r3, #0
 800d890:	e018      	b.n	800d8c4 <_strtod_l+0x264>
 800d892:	4638      	mov	r0, r7
 800d894:	e7da      	b.n	800d84c <_strtod_l+0x1ec>
 800d896:	2b08      	cmp	r3, #8
 800d898:	f103 0301 	add.w	r3, r3, #1
 800d89c:	dc03      	bgt.n	800d8a6 <_strtod_l+0x246>
 800d89e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d8a0:	434e      	muls	r6, r1
 800d8a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d8a4:	e7e7      	b.n	800d876 <_strtod_l+0x216>
 800d8a6:	2b10      	cmp	r3, #16
 800d8a8:	bfde      	ittt	le
 800d8aa:	9e08      	ldrle	r6, [sp, #32]
 800d8ac:	434e      	mulle	r6, r1
 800d8ae:	9608      	strle	r6, [sp, #32]
 800d8b0:	e7e1      	b.n	800d876 <_strtod_l+0x216>
 800d8b2:	280f      	cmp	r0, #15
 800d8b4:	dceb      	bgt.n	800d88e <_strtod_l+0x22e>
 800d8b6:	9808      	ldr	r0, [sp, #32]
 800d8b8:	230a      	movs	r3, #10
 800d8ba:	fb03 2300 	mla	r3, r3, r0, r2
 800d8be:	9308      	str	r3, [sp, #32]
 800d8c0:	e7e5      	b.n	800d88e <_strtod_l+0x22e>
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d8c6:	1c50      	adds	r0, r2, #1
 800d8c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d8ca:	7852      	ldrb	r2, [r2, #1]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	460d      	mov	r5, r1
 800d8d0:	e7b1      	b.n	800d836 <_strtod_l+0x1d6>
 800d8d2:	f04f 0900 	mov.w	r9, #0
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e77d      	b.n	800d7d6 <_strtod_l+0x176>
 800d8da:	f04f 0c00 	mov.w	ip, #0
 800d8de:	1ca2      	adds	r2, r4, #2
 800d8e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8e2:	78a2      	ldrb	r2, [r4, #2]
 800d8e4:	e785      	b.n	800d7f2 <_strtod_l+0x192>
 800d8e6:	f04f 0c01 	mov.w	ip, #1
 800d8ea:	e7f8      	b.n	800d8de <_strtod_l+0x27e>
 800d8ec:	08013f60 	.word	0x08013f60
 800d8f0:	08013f48 	.word	0x08013f48
 800d8f4:	7ff00000 	.word	0x7ff00000
 800d8f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d8fa:	1c51      	adds	r1, r2, #1
 800d8fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8fe:	7852      	ldrb	r2, [r2, #1]
 800d900:	2a30      	cmp	r2, #48	@ 0x30
 800d902:	d0f9      	beq.n	800d8f8 <_strtod_l+0x298>
 800d904:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d908:	2908      	cmp	r1, #8
 800d90a:	f63f af78 	bhi.w	800d7fe <_strtod_l+0x19e>
 800d90e:	3a30      	subs	r2, #48	@ 0x30
 800d910:	920e      	str	r2, [sp, #56]	@ 0x38
 800d912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d914:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d916:	f04f 080a 	mov.w	r8, #10
 800d91a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d91c:	1c56      	adds	r6, r2, #1
 800d91e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d920:	7852      	ldrb	r2, [r2, #1]
 800d922:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d926:	f1be 0f09 	cmp.w	lr, #9
 800d92a:	d939      	bls.n	800d9a0 <_strtod_l+0x340>
 800d92c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d92e:	1a76      	subs	r6, r6, r1
 800d930:	2e08      	cmp	r6, #8
 800d932:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d936:	dc03      	bgt.n	800d940 <_strtod_l+0x2e0>
 800d938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d93a:	4588      	cmp	r8, r1
 800d93c:	bfa8      	it	ge
 800d93e:	4688      	movge	r8, r1
 800d940:	f1bc 0f00 	cmp.w	ip, #0
 800d944:	d001      	beq.n	800d94a <_strtod_l+0x2ea>
 800d946:	f1c8 0800 	rsb	r8, r8, #0
 800d94a:	2d00      	cmp	r5, #0
 800d94c:	d14e      	bne.n	800d9ec <_strtod_l+0x38c>
 800d94e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d950:	4308      	orrs	r0, r1
 800d952:	f47f aebe 	bne.w	800d6d2 <_strtod_l+0x72>
 800d956:	2b00      	cmp	r3, #0
 800d958:	f47f aed6 	bne.w	800d708 <_strtod_l+0xa8>
 800d95c:	2a69      	cmp	r2, #105	@ 0x69
 800d95e:	d028      	beq.n	800d9b2 <_strtod_l+0x352>
 800d960:	dc25      	bgt.n	800d9ae <_strtod_l+0x34e>
 800d962:	2a49      	cmp	r2, #73	@ 0x49
 800d964:	d025      	beq.n	800d9b2 <_strtod_l+0x352>
 800d966:	2a4e      	cmp	r2, #78	@ 0x4e
 800d968:	f47f aece 	bne.w	800d708 <_strtod_l+0xa8>
 800d96c:	499b      	ldr	r1, [pc, #620]	@ (800dbdc <_strtod_l+0x57c>)
 800d96e:	a819      	add	r0, sp, #100	@ 0x64
 800d970:	f002 fece 	bl	8010710 <__match>
 800d974:	2800      	cmp	r0, #0
 800d976:	f43f aec7 	beq.w	800d708 <_strtod_l+0xa8>
 800d97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b28      	cmp	r3, #40	@ 0x28
 800d980:	d12e      	bne.n	800d9e0 <_strtod_l+0x380>
 800d982:	4997      	ldr	r1, [pc, #604]	@ (800dbe0 <_strtod_l+0x580>)
 800d984:	aa1c      	add	r2, sp, #112	@ 0x70
 800d986:	a819      	add	r0, sp, #100	@ 0x64
 800d988:	f002 fed6 	bl	8010738 <__hexnan>
 800d98c:	2805      	cmp	r0, #5
 800d98e:	d127      	bne.n	800d9e0 <_strtod_l+0x380>
 800d990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d992:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d996:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d99a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d99e:	e698      	b.n	800d6d2 <_strtod_l+0x72>
 800d9a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d9a2:	fb08 2101 	mla	r1, r8, r1, r2
 800d9a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d9aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800d9ac:	e7b5      	b.n	800d91a <_strtod_l+0x2ba>
 800d9ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800d9b0:	e7da      	b.n	800d968 <_strtod_l+0x308>
 800d9b2:	498c      	ldr	r1, [pc, #560]	@ (800dbe4 <_strtod_l+0x584>)
 800d9b4:	a819      	add	r0, sp, #100	@ 0x64
 800d9b6:	f002 feab 	bl	8010710 <__match>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	f43f aea4 	beq.w	800d708 <_strtod_l+0xa8>
 800d9c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9c2:	4989      	ldr	r1, [pc, #548]	@ (800dbe8 <_strtod_l+0x588>)
 800d9c4:	3b01      	subs	r3, #1
 800d9c6:	a819      	add	r0, sp, #100	@ 0x64
 800d9c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d9ca:	f002 fea1 	bl	8010710 <__match>
 800d9ce:	b910      	cbnz	r0, 800d9d6 <_strtod_l+0x376>
 800d9d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d9d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dbf8 <_strtod_l+0x598>
 800d9da:	f04f 0a00 	mov.w	sl, #0
 800d9de:	e678      	b.n	800d6d2 <_strtod_l+0x72>
 800d9e0:	4882      	ldr	r0, [pc, #520]	@ (800dbec <_strtod_l+0x58c>)
 800d9e2:	f001 fd49 	bl	800f478 <nan>
 800d9e6:	ec5b ab10 	vmov	sl, fp, d0
 800d9ea:	e672      	b.n	800d6d2 <_strtod_l+0x72>
 800d9ec:	eba8 0309 	sub.w	r3, r8, r9
 800d9f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9f4:	2f00      	cmp	r7, #0
 800d9f6:	bf08      	it	eq
 800d9f8:	462f      	moveq	r7, r5
 800d9fa:	2d10      	cmp	r5, #16
 800d9fc:	462c      	mov	r4, r5
 800d9fe:	bfa8      	it	ge
 800da00:	2410      	movge	r4, #16
 800da02:	f7f2 fd7f 	bl	8000504 <__aeabi_ui2d>
 800da06:	2d09      	cmp	r5, #9
 800da08:	4682      	mov	sl, r0
 800da0a:	468b      	mov	fp, r1
 800da0c:	dc13      	bgt.n	800da36 <_strtod_l+0x3d6>
 800da0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da10:	2b00      	cmp	r3, #0
 800da12:	f43f ae5e 	beq.w	800d6d2 <_strtod_l+0x72>
 800da16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da18:	dd78      	ble.n	800db0c <_strtod_l+0x4ac>
 800da1a:	2b16      	cmp	r3, #22
 800da1c:	dc5f      	bgt.n	800dade <_strtod_l+0x47e>
 800da1e:	4974      	ldr	r1, [pc, #464]	@ (800dbf0 <_strtod_l+0x590>)
 800da20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da28:	4652      	mov	r2, sl
 800da2a:	465b      	mov	r3, fp
 800da2c:	f7f2 fde4 	bl	80005f8 <__aeabi_dmul>
 800da30:	4682      	mov	sl, r0
 800da32:	468b      	mov	fp, r1
 800da34:	e64d      	b.n	800d6d2 <_strtod_l+0x72>
 800da36:	4b6e      	ldr	r3, [pc, #440]	@ (800dbf0 <_strtod_l+0x590>)
 800da38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800da40:	f7f2 fdda 	bl	80005f8 <__aeabi_dmul>
 800da44:	4682      	mov	sl, r0
 800da46:	9808      	ldr	r0, [sp, #32]
 800da48:	468b      	mov	fp, r1
 800da4a:	f7f2 fd5b 	bl	8000504 <__aeabi_ui2d>
 800da4e:	4602      	mov	r2, r0
 800da50:	460b      	mov	r3, r1
 800da52:	4650      	mov	r0, sl
 800da54:	4659      	mov	r1, fp
 800da56:	f7f2 fc19 	bl	800028c <__adddf3>
 800da5a:	2d0f      	cmp	r5, #15
 800da5c:	4682      	mov	sl, r0
 800da5e:	468b      	mov	fp, r1
 800da60:	ddd5      	ble.n	800da0e <_strtod_l+0x3ae>
 800da62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da64:	1b2c      	subs	r4, r5, r4
 800da66:	441c      	add	r4, r3
 800da68:	2c00      	cmp	r4, #0
 800da6a:	f340 8096 	ble.w	800db9a <_strtod_l+0x53a>
 800da6e:	f014 030f 	ands.w	r3, r4, #15
 800da72:	d00a      	beq.n	800da8a <_strtod_l+0x42a>
 800da74:	495e      	ldr	r1, [pc, #376]	@ (800dbf0 <_strtod_l+0x590>)
 800da76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da7a:	4652      	mov	r2, sl
 800da7c:	465b      	mov	r3, fp
 800da7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da82:	f7f2 fdb9 	bl	80005f8 <__aeabi_dmul>
 800da86:	4682      	mov	sl, r0
 800da88:	468b      	mov	fp, r1
 800da8a:	f034 040f 	bics.w	r4, r4, #15
 800da8e:	d073      	beq.n	800db78 <_strtod_l+0x518>
 800da90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800da94:	dd48      	ble.n	800db28 <_strtod_l+0x4c8>
 800da96:	2400      	movs	r4, #0
 800da98:	46a0      	mov	r8, r4
 800da9a:	940a      	str	r4, [sp, #40]	@ 0x28
 800da9c:	46a1      	mov	r9, r4
 800da9e:	9a05      	ldr	r2, [sp, #20]
 800daa0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dbf8 <_strtod_l+0x598>
 800daa4:	2322      	movs	r3, #34	@ 0x22
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	f04f 0a00 	mov.w	sl, #0
 800daac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f43f ae0f 	beq.w	800d6d2 <_strtod_l+0x72>
 800dab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dab6:	9805      	ldr	r0, [sp, #20]
 800dab8:	f002 ffe2 	bl	8010a80 <_Bfree>
 800dabc:	9805      	ldr	r0, [sp, #20]
 800dabe:	4649      	mov	r1, r9
 800dac0:	f002 ffde 	bl	8010a80 <_Bfree>
 800dac4:	9805      	ldr	r0, [sp, #20]
 800dac6:	4641      	mov	r1, r8
 800dac8:	f002 ffda 	bl	8010a80 <_Bfree>
 800dacc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dace:	9805      	ldr	r0, [sp, #20]
 800dad0:	f002 ffd6 	bl	8010a80 <_Bfree>
 800dad4:	9805      	ldr	r0, [sp, #20]
 800dad6:	4621      	mov	r1, r4
 800dad8:	f002 ffd2 	bl	8010a80 <_Bfree>
 800dadc:	e5f9      	b.n	800d6d2 <_strtod_l+0x72>
 800dade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dae4:	4293      	cmp	r3, r2
 800dae6:	dbbc      	blt.n	800da62 <_strtod_l+0x402>
 800dae8:	4c41      	ldr	r4, [pc, #260]	@ (800dbf0 <_strtod_l+0x590>)
 800daea:	f1c5 050f 	rsb	r5, r5, #15
 800daee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800daf2:	4652      	mov	r2, sl
 800daf4:	465b      	mov	r3, fp
 800daf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dafa:	f7f2 fd7d 	bl	80005f8 <__aeabi_dmul>
 800dafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db00:	1b5d      	subs	r5, r3, r5
 800db02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800db06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800db0a:	e78f      	b.n	800da2c <_strtod_l+0x3cc>
 800db0c:	3316      	adds	r3, #22
 800db0e:	dba8      	blt.n	800da62 <_strtod_l+0x402>
 800db10:	4b37      	ldr	r3, [pc, #220]	@ (800dbf0 <_strtod_l+0x590>)
 800db12:	eba9 0808 	sub.w	r8, r9, r8
 800db16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800db1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800db1e:	4650      	mov	r0, sl
 800db20:	4659      	mov	r1, fp
 800db22:	f7f2 fe93 	bl	800084c <__aeabi_ddiv>
 800db26:	e783      	b.n	800da30 <_strtod_l+0x3d0>
 800db28:	4b32      	ldr	r3, [pc, #200]	@ (800dbf4 <_strtod_l+0x594>)
 800db2a:	9308      	str	r3, [sp, #32]
 800db2c:	2300      	movs	r3, #0
 800db2e:	1124      	asrs	r4, r4, #4
 800db30:	4650      	mov	r0, sl
 800db32:	4659      	mov	r1, fp
 800db34:	461e      	mov	r6, r3
 800db36:	2c01      	cmp	r4, #1
 800db38:	dc21      	bgt.n	800db7e <_strtod_l+0x51e>
 800db3a:	b10b      	cbz	r3, 800db40 <_strtod_l+0x4e0>
 800db3c:	4682      	mov	sl, r0
 800db3e:	468b      	mov	fp, r1
 800db40:	492c      	ldr	r1, [pc, #176]	@ (800dbf4 <_strtod_l+0x594>)
 800db42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800db46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800db4a:	4652      	mov	r2, sl
 800db4c:	465b      	mov	r3, fp
 800db4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db52:	f7f2 fd51 	bl	80005f8 <__aeabi_dmul>
 800db56:	4b28      	ldr	r3, [pc, #160]	@ (800dbf8 <_strtod_l+0x598>)
 800db58:	460a      	mov	r2, r1
 800db5a:	400b      	ands	r3, r1
 800db5c:	4927      	ldr	r1, [pc, #156]	@ (800dbfc <_strtod_l+0x59c>)
 800db5e:	428b      	cmp	r3, r1
 800db60:	4682      	mov	sl, r0
 800db62:	d898      	bhi.n	800da96 <_strtod_l+0x436>
 800db64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800db68:	428b      	cmp	r3, r1
 800db6a:	bf86      	itte	hi
 800db6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dc00 <_strtod_l+0x5a0>
 800db70:	f04f 3aff 	movhi.w	sl, #4294967295
 800db74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800db78:	2300      	movs	r3, #0
 800db7a:	9308      	str	r3, [sp, #32]
 800db7c:	e07a      	b.n	800dc74 <_strtod_l+0x614>
 800db7e:	07e2      	lsls	r2, r4, #31
 800db80:	d505      	bpl.n	800db8e <_strtod_l+0x52e>
 800db82:	9b08      	ldr	r3, [sp, #32]
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	2301      	movs	r3, #1
 800db8e:	9a08      	ldr	r2, [sp, #32]
 800db90:	3208      	adds	r2, #8
 800db92:	3601      	adds	r6, #1
 800db94:	1064      	asrs	r4, r4, #1
 800db96:	9208      	str	r2, [sp, #32]
 800db98:	e7cd      	b.n	800db36 <_strtod_l+0x4d6>
 800db9a:	d0ed      	beq.n	800db78 <_strtod_l+0x518>
 800db9c:	4264      	negs	r4, r4
 800db9e:	f014 020f 	ands.w	r2, r4, #15
 800dba2:	d00a      	beq.n	800dbba <_strtod_l+0x55a>
 800dba4:	4b12      	ldr	r3, [pc, #72]	@ (800dbf0 <_strtod_l+0x590>)
 800dba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbaa:	4650      	mov	r0, sl
 800dbac:	4659      	mov	r1, fp
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fe4b 	bl	800084c <__aeabi_ddiv>
 800dbb6:	4682      	mov	sl, r0
 800dbb8:	468b      	mov	fp, r1
 800dbba:	1124      	asrs	r4, r4, #4
 800dbbc:	d0dc      	beq.n	800db78 <_strtod_l+0x518>
 800dbbe:	2c1f      	cmp	r4, #31
 800dbc0:	dd20      	ble.n	800dc04 <_strtod_l+0x5a4>
 800dbc2:	2400      	movs	r4, #0
 800dbc4:	46a0      	mov	r8, r4
 800dbc6:	940a      	str	r4, [sp, #40]	@ 0x28
 800dbc8:	46a1      	mov	r9, r4
 800dbca:	9a05      	ldr	r2, [sp, #20]
 800dbcc:	2322      	movs	r3, #34	@ 0x22
 800dbce:	f04f 0a00 	mov.w	sl, #0
 800dbd2:	f04f 0b00 	mov.w	fp, #0
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	e768      	b.n	800daac <_strtod_l+0x44c>
 800dbda:	bf00      	nop
 800dbdc:	080140ae 	.word	0x080140ae
 800dbe0:	08013f4c 	.word	0x08013f4c
 800dbe4:	080140a6 	.word	0x080140a6
 800dbe8:	08014192 	.word	0x08014192
 800dbec:	0801418e 	.word	0x0801418e
 800dbf0:	080142f8 	.word	0x080142f8
 800dbf4:	080142d0 	.word	0x080142d0
 800dbf8:	7ff00000 	.word	0x7ff00000
 800dbfc:	7ca00000 	.word	0x7ca00000
 800dc00:	7fefffff 	.word	0x7fefffff
 800dc04:	f014 0310 	ands.w	r3, r4, #16
 800dc08:	bf18      	it	ne
 800dc0a:	236a      	movne	r3, #106	@ 0x6a
 800dc0c:	4ea9      	ldr	r6, [pc, #676]	@ (800deb4 <_strtod_l+0x854>)
 800dc0e:	9308      	str	r3, [sp, #32]
 800dc10:	4650      	mov	r0, sl
 800dc12:	4659      	mov	r1, fp
 800dc14:	2300      	movs	r3, #0
 800dc16:	07e2      	lsls	r2, r4, #31
 800dc18:	d504      	bpl.n	800dc24 <_strtod_l+0x5c4>
 800dc1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc1e:	f7f2 fceb 	bl	80005f8 <__aeabi_dmul>
 800dc22:	2301      	movs	r3, #1
 800dc24:	1064      	asrs	r4, r4, #1
 800dc26:	f106 0608 	add.w	r6, r6, #8
 800dc2a:	d1f4      	bne.n	800dc16 <_strtod_l+0x5b6>
 800dc2c:	b10b      	cbz	r3, 800dc32 <_strtod_l+0x5d2>
 800dc2e:	4682      	mov	sl, r0
 800dc30:	468b      	mov	fp, r1
 800dc32:	9b08      	ldr	r3, [sp, #32]
 800dc34:	b1b3      	cbz	r3, 800dc64 <_strtod_l+0x604>
 800dc36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dc3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	4659      	mov	r1, fp
 800dc42:	dd0f      	ble.n	800dc64 <_strtod_l+0x604>
 800dc44:	2b1f      	cmp	r3, #31
 800dc46:	dd55      	ble.n	800dcf4 <_strtod_l+0x694>
 800dc48:	2b34      	cmp	r3, #52	@ 0x34
 800dc4a:	bfde      	ittt	le
 800dc4c:	f04f 33ff 	movle.w	r3, #4294967295
 800dc50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dc54:	4093      	lslle	r3, r2
 800dc56:	f04f 0a00 	mov.w	sl, #0
 800dc5a:	bfcc      	ite	gt
 800dc5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dc60:	ea03 0b01 	andle.w	fp, r3, r1
 800dc64:	2200      	movs	r2, #0
 800dc66:	2300      	movs	r3, #0
 800dc68:	4650      	mov	r0, sl
 800dc6a:	4659      	mov	r1, fp
 800dc6c:	f7f2 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d1a6      	bne.n	800dbc2 <_strtod_l+0x562>
 800dc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dc7a:	9805      	ldr	r0, [sp, #20]
 800dc7c:	462b      	mov	r3, r5
 800dc7e:	463a      	mov	r2, r7
 800dc80:	f002 ff66 	bl	8010b50 <__s2b>
 800dc84:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc86:	2800      	cmp	r0, #0
 800dc88:	f43f af05 	beq.w	800da96 <_strtod_l+0x436>
 800dc8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc8e:	2a00      	cmp	r2, #0
 800dc90:	eba9 0308 	sub.w	r3, r9, r8
 800dc94:	bfa8      	it	ge
 800dc96:	2300      	movge	r3, #0
 800dc98:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc9a:	2400      	movs	r4, #0
 800dc9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dca0:	9316      	str	r3, [sp, #88]	@ 0x58
 800dca2:	46a0      	mov	r8, r4
 800dca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dca6:	9805      	ldr	r0, [sp, #20]
 800dca8:	6859      	ldr	r1, [r3, #4]
 800dcaa:	f002 fea9 	bl	8010a00 <_Balloc>
 800dcae:	4681      	mov	r9, r0
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	f43f aef4 	beq.w	800da9e <_strtod_l+0x43e>
 800dcb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcb8:	691a      	ldr	r2, [r3, #16]
 800dcba:	3202      	adds	r2, #2
 800dcbc:	f103 010c 	add.w	r1, r3, #12
 800dcc0:	0092      	lsls	r2, r2, #2
 800dcc2:	300c      	adds	r0, #12
 800dcc4:	f001 fbc7 	bl	800f456 <memcpy>
 800dcc8:	ec4b ab10 	vmov	d0, sl, fp
 800dccc:	9805      	ldr	r0, [sp, #20]
 800dcce:	aa1c      	add	r2, sp, #112	@ 0x70
 800dcd0:	a91b      	add	r1, sp, #108	@ 0x6c
 800dcd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dcd6:	f003 fa77 	bl	80111c8 <__d2b>
 800dcda:	901a      	str	r0, [sp, #104]	@ 0x68
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	f43f aede 	beq.w	800da9e <_strtod_l+0x43e>
 800dce2:	9805      	ldr	r0, [sp, #20]
 800dce4:	2101      	movs	r1, #1
 800dce6:	f002 ffc9 	bl	8010c7c <__i2b>
 800dcea:	4680      	mov	r8, r0
 800dcec:	b948      	cbnz	r0, 800dd02 <_strtod_l+0x6a2>
 800dcee:	f04f 0800 	mov.w	r8, #0
 800dcf2:	e6d4      	b.n	800da9e <_strtod_l+0x43e>
 800dcf4:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcfc:	ea03 0a0a 	and.w	sl, r3, sl
 800dd00:	e7b0      	b.n	800dc64 <_strtod_l+0x604>
 800dd02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dd04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dd06:	2d00      	cmp	r5, #0
 800dd08:	bfab      	itete	ge
 800dd0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dd0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dd0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dd10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dd12:	bfac      	ite	ge
 800dd14:	18ef      	addge	r7, r5, r3
 800dd16:	1b5e      	sublt	r6, r3, r5
 800dd18:	9b08      	ldr	r3, [sp, #32]
 800dd1a:	1aed      	subs	r5, r5, r3
 800dd1c:	4415      	add	r5, r2
 800dd1e:	4b66      	ldr	r3, [pc, #408]	@ (800deb8 <_strtod_l+0x858>)
 800dd20:	3d01      	subs	r5, #1
 800dd22:	429d      	cmp	r5, r3
 800dd24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dd28:	da50      	bge.n	800ddcc <_strtod_l+0x76c>
 800dd2a:	1b5b      	subs	r3, r3, r5
 800dd2c:	2b1f      	cmp	r3, #31
 800dd2e:	eba2 0203 	sub.w	r2, r2, r3
 800dd32:	f04f 0101 	mov.w	r1, #1
 800dd36:	dc3d      	bgt.n	800ddb4 <_strtod_l+0x754>
 800dd38:	fa01 f303 	lsl.w	r3, r1, r3
 800dd3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd3e:	2300      	movs	r3, #0
 800dd40:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd42:	18bd      	adds	r5, r7, r2
 800dd44:	9b08      	ldr	r3, [sp, #32]
 800dd46:	42af      	cmp	r7, r5
 800dd48:	4416      	add	r6, r2
 800dd4a:	441e      	add	r6, r3
 800dd4c:	463b      	mov	r3, r7
 800dd4e:	bfa8      	it	ge
 800dd50:	462b      	movge	r3, r5
 800dd52:	42b3      	cmp	r3, r6
 800dd54:	bfa8      	it	ge
 800dd56:	4633      	movge	r3, r6
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	bfc2      	ittt	gt
 800dd5c:	1aed      	subgt	r5, r5, r3
 800dd5e:	1af6      	subgt	r6, r6, r3
 800dd60:	1aff      	subgt	r7, r7, r3
 800dd62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	dd16      	ble.n	800dd96 <_strtod_l+0x736>
 800dd68:	4641      	mov	r1, r8
 800dd6a:	9805      	ldr	r0, [sp, #20]
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	f003 f845 	bl	8010dfc <__pow5mult>
 800dd72:	4680      	mov	r8, r0
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d0ba      	beq.n	800dcee <_strtod_l+0x68e>
 800dd78:	4601      	mov	r1, r0
 800dd7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dd7c:	9805      	ldr	r0, [sp, #20]
 800dd7e:	f002 ff93 	bl	8010ca8 <__multiply>
 800dd82:	900e      	str	r0, [sp, #56]	@ 0x38
 800dd84:	2800      	cmp	r0, #0
 800dd86:	f43f ae8a 	beq.w	800da9e <_strtod_l+0x43e>
 800dd8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd8c:	9805      	ldr	r0, [sp, #20]
 800dd8e:	f002 fe77 	bl	8010a80 <_Bfree>
 800dd92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd94:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd96:	2d00      	cmp	r5, #0
 800dd98:	dc1d      	bgt.n	800ddd6 <_strtod_l+0x776>
 800dd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	dd23      	ble.n	800dde8 <_strtod_l+0x788>
 800dda0:	4649      	mov	r1, r9
 800dda2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dda4:	9805      	ldr	r0, [sp, #20]
 800dda6:	f003 f829 	bl	8010dfc <__pow5mult>
 800ddaa:	4681      	mov	r9, r0
 800ddac:	b9e0      	cbnz	r0, 800dde8 <_strtod_l+0x788>
 800ddae:	f04f 0900 	mov.w	r9, #0
 800ddb2:	e674      	b.n	800da9e <_strtod_l+0x43e>
 800ddb4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ddb8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ddbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ddc0:	35e2      	adds	r5, #226	@ 0xe2
 800ddc2:	fa01 f305 	lsl.w	r3, r1, r5
 800ddc6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ddca:	e7ba      	b.n	800dd42 <_strtod_l+0x6e2>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ddd4:	e7b5      	b.n	800dd42 <_strtod_l+0x6e2>
 800ddd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddd8:	9805      	ldr	r0, [sp, #20]
 800ddda:	462a      	mov	r2, r5
 800dddc:	f003 f868 	bl	8010eb0 <__lshift>
 800dde0:	901a      	str	r0, [sp, #104]	@ 0x68
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d1d9      	bne.n	800dd9a <_strtod_l+0x73a>
 800dde6:	e65a      	b.n	800da9e <_strtod_l+0x43e>
 800dde8:	2e00      	cmp	r6, #0
 800ddea:	dd07      	ble.n	800ddfc <_strtod_l+0x79c>
 800ddec:	4649      	mov	r1, r9
 800ddee:	9805      	ldr	r0, [sp, #20]
 800ddf0:	4632      	mov	r2, r6
 800ddf2:	f003 f85d 	bl	8010eb0 <__lshift>
 800ddf6:	4681      	mov	r9, r0
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d0d8      	beq.n	800ddae <_strtod_l+0x74e>
 800ddfc:	2f00      	cmp	r7, #0
 800ddfe:	dd08      	ble.n	800de12 <_strtod_l+0x7b2>
 800de00:	4641      	mov	r1, r8
 800de02:	9805      	ldr	r0, [sp, #20]
 800de04:	463a      	mov	r2, r7
 800de06:	f003 f853 	bl	8010eb0 <__lshift>
 800de0a:	4680      	mov	r8, r0
 800de0c:	2800      	cmp	r0, #0
 800de0e:	f43f ae46 	beq.w	800da9e <_strtod_l+0x43e>
 800de12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de14:	9805      	ldr	r0, [sp, #20]
 800de16:	464a      	mov	r2, r9
 800de18:	f003 f8d2 	bl	8010fc0 <__mdiff>
 800de1c:	4604      	mov	r4, r0
 800de1e:	2800      	cmp	r0, #0
 800de20:	f43f ae3d 	beq.w	800da9e <_strtod_l+0x43e>
 800de24:	68c3      	ldr	r3, [r0, #12]
 800de26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de28:	2300      	movs	r3, #0
 800de2a:	60c3      	str	r3, [r0, #12]
 800de2c:	4641      	mov	r1, r8
 800de2e:	f003 f8ab 	bl	8010f88 <__mcmp>
 800de32:	2800      	cmp	r0, #0
 800de34:	da46      	bge.n	800dec4 <_strtod_l+0x864>
 800de36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de38:	ea53 030a 	orrs.w	r3, r3, sl
 800de3c:	d16c      	bne.n	800df18 <_strtod_l+0x8b8>
 800de3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de42:	2b00      	cmp	r3, #0
 800de44:	d168      	bne.n	800df18 <_strtod_l+0x8b8>
 800de46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de4a:	0d1b      	lsrs	r3, r3, #20
 800de4c:	051b      	lsls	r3, r3, #20
 800de4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800de52:	d961      	bls.n	800df18 <_strtod_l+0x8b8>
 800de54:	6963      	ldr	r3, [r4, #20]
 800de56:	b913      	cbnz	r3, 800de5e <_strtod_l+0x7fe>
 800de58:	6923      	ldr	r3, [r4, #16]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	dd5c      	ble.n	800df18 <_strtod_l+0x8b8>
 800de5e:	4621      	mov	r1, r4
 800de60:	2201      	movs	r2, #1
 800de62:	9805      	ldr	r0, [sp, #20]
 800de64:	f003 f824 	bl	8010eb0 <__lshift>
 800de68:	4641      	mov	r1, r8
 800de6a:	4604      	mov	r4, r0
 800de6c:	f003 f88c 	bl	8010f88 <__mcmp>
 800de70:	2800      	cmp	r0, #0
 800de72:	dd51      	ble.n	800df18 <_strtod_l+0x8b8>
 800de74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de78:	9a08      	ldr	r2, [sp, #32]
 800de7a:	0d1b      	lsrs	r3, r3, #20
 800de7c:	051b      	lsls	r3, r3, #20
 800de7e:	2a00      	cmp	r2, #0
 800de80:	d06b      	beq.n	800df5a <_strtod_l+0x8fa>
 800de82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800de86:	d868      	bhi.n	800df5a <_strtod_l+0x8fa>
 800de88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800de8c:	f67f ae9d 	bls.w	800dbca <_strtod_l+0x56a>
 800de90:	4b0a      	ldr	r3, [pc, #40]	@ (800debc <_strtod_l+0x85c>)
 800de92:	4650      	mov	r0, sl
 800de94:	4659      	mov	r1, fp
 800de96:	2200      	movs	r2, #0
 800de98:	f7f2 fbae 	bl	80005f8 <__aeabi_dmul>
 800de9c:	4b08      	ldr	r3, [pc, #32]	@ (800dec0 <_strtod_l+0x860>)
 800de9e:	400b      	ands	r3, r1
 800dea0:	4682      	mov	sl, r0
 800dea2:	468b      	mov	fp, r1
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f47f ae05 	bne.w	800dab4 <_strtod_l+0x454>
 800deaa:	9a05      	ldr	r2, [sp, #20]
 800deac:	2322      	movs	r3, #34	@ 0x22
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	e600      	b.n	800dab4 <_strtod_l+0x454>
 800deb2:	bf00      	nop
 800deb4:	08013f78 	.word	0x08013f78
 800deb8:	fffffc02 	.word	0xfffffc02
 800debc:	39500000 	.word	0x39500000
 800dec0:	7ff00000 	.word	0x7ff00000
 800dec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dec8:	d165      	bne.n	800df96 <_strtod_l+0x936>
 800deca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800decc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ded0:	b35a      	cbz	r2, 800df2a <_strtod_l+0x8ca>
 800ded2:	4a9f      	ldr	r2, [pc, #636]	@ (800e150 <_strtod_l+0xaf0>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d12b      	bne.n	800df30 <_strtod_l+0x8d0>
 800ded8:	9b08      	ldr	r3, [sp, #32]
 800deda:	4651      	mov	r1, sl
 800dedc:	b303      	cbz	r3, 800df20 <_strtod_l+0x8c0>
 800dede:	4b9d      	ldr	r3, [pc, #628]	@ (800e154 <_strtod_l+0xaf4>)
 800dee0:	465a      	mov	r2, fp
 800dee2:	4013      	ands	r3, r2
 800dee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dee8:	f04f 32ff 	mov.w	r2, #4294967295
 800deec:	d81b      	bhi.n	800df26 <_strtod_l+0x8c6>
 800deee:	0d1b      	lsrs	r3, r3, #20
 800def0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800def4:	fa02 f303 	lsl.w	r3, r2, r3
 800def8:	4299      	cmp	r1, r3
 800defa:	d119      	bne.n	800df30 <_strtod_l+0x8d0>
 800defc:	4b96      	ldr	r3, [pc, #600]	@ (800e158 <_strtod_l+0xaf8>)
 800defe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df00:	429a      	cmp	r2, r3
 800df02:	d102      	bne.n	800df0a <_strtod_l+0x8aa>
 800df04:	3101      	adds	r1, #1
 800df06:	f43f adca 	beq.w	800da9e <_strtod_l+0x43e>
 800df0a:	4b92      	ldr	r3, [pc, #584]	@ (800e154 <_strtod_l+0xaf4>)
 800df0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df0e:	401a      	ands	r2, r3
 800df10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800df14:	f04f 0a00 	mov.w	sl, #0
 800df18:	9b08      	ldr	r3, [sp, #32]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1b8      	bne.n	800de90 <_strtod_l+0x830>
 800df1e:	e5c9      	b.n	800dab4 <_strtod_l+0x454>
 800df20:	f04f 33ff 	mov.w	r3, #4294967295
 800df24:	e7e8      	b.n	800def8 <_strtod_l+0x898>
 800df26:	4613      	mov	r3, r2
 800df28:	e7e6      	b.n	800def8 <_strtod_l+0x898>
 800df2a:	ea53 030a 	orrs.w	r3, r3, sl
 800df2e:	d0a1      	beq.n	800de74 <_strtod_l+0x814>
 800df30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df32:	b1db      	cbz	r3, 800df6c <_strtod_l+0x90c>
 800df34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df36:	4213      	tst	r3, r2
 800df38:	d0ee      	beq.n	800df18 <_strtod_l+0x8b8>
 800df3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df3c:	9a08      	ldr	r2, [sp, #32]
 800df3e:	4650      	mov	r0, sl
 800df40:	4659      	mov	r1, fp
 800df42:	b1bb      	cbz	r3, 800df74 <_strtod_l+0x914>
 800df44:	f7ff fb6b 	bl	800d61e <sulp>
 800df48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df4c:	ec53 2b10 	vmov	r2, r3, d0
 800df50:	f7f2 f99c 	bl	800028c <__adddf3>
 800df54:	4682      	mov	sl, r0
 800df56:	468b      	mov	fp, r1
 800df58:	e7de      	b.n	800df18 <_strtod_l+0x8b8>
 800df5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800df5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800df62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800df66:	f04f 3aff 	mov.w	sl, #4294967295
 800df6a:	e7d5      	b.n	800df18 <_strtod_l+0x8b8>
 800df6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df6e:	ea13 0f0a 	tst.w	r3, sl
 800df72:	e7e1      	b.n	800df38 <_strtod_l+0x8d8>
 800df74:	f7ff fb53 	bl	800d61e <sulp>
 800df78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df7c:	ec53 2b10 	vmov	r2, r3, d0
 800df80:	f7f2 f982 	bl	8000288 <__aeabi_dsub>
 800df84:	2200      	movs	r2, #0
 800df86:	2300      	movs	r3, #0
 800df88:	4682      	mov	sl, r0
 800df8a:	468b      	mov	fp, r1
 800df8c:	f7f2 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800df90:	2800      	cmp	r0, #0
 800df92:	d0c1      	beq.n	800df18 <_strtod_l+0x8b8>
 800df94:	e619      	b.n	800dbca <_strtod_l+0x56a>
 800df96:	4641      	mov	r1, r8
 800df98:	4620      	mov	r0, r4
 800df9a:	f003 f96d 	bl	8011278 <__ratio>
 800df9e:	ec57 6b10 	vmov	r6, r7, d0
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	4639      	mov	r1, r7
 800dfac:	f7f2 fda0 	bl	8000af0 <__aeabi_dcmple>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d06f      	beq.n	800e094 <_strtod_l+0xa34>
 800dfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d17a      	bne.n	800e0b0 <_strtod_l+0xa50>
 800dfba:	f1ba 0f00 	cmp.w	sl, #0
 800dfbe:	d158      	bne.n	800e072 <_strtod_l+0xa12>
 800dfc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d15a      	bne.n	800e080 <_strtod_l+0xa20>
 800dfca:	4b64      	ldr	r3, [pc, #400]	@ (800e15c <_strtod_l+0xafc>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4630      	mov	r0, r6
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	f7f2 fd83 	bl	8000adc <__aeabi_dcmplt>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d159      	bne.n	800e08e <_strtod_l+0xa2e>
 800dfda:	4630      	mov	r0, r6
 800dfdc:	4639      	mov	r1, r7
 800dfde:	4b60      	ldr	r3, [pc, #384]	@ (800e160 <_strtod_l+0xb00>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f7f2 fb09 	bl	80005f8 <__aeabi_dmul>
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	460f      	mov	r7, r1
 800dfea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dfee:	9606      	str	r6, [sp, #24]
 800dff0:	9307      	str	r3, [sp, #28]
 800dff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dff6:	4d57      	ldr	r5, [pc, #348]	@ (800e154 <_strtod_l+0xaf4>)
 800dff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dffe:	401d      	ands	r5, r3
 800e000:	4b58      	ldr	r3, [pc, #352]	@ (800e164 <_strtod_l+0xb04>)
 800e002:	429d      	cmp	r5, r3
 800e004:	f040 80b2 	bne.w	800e16c <_strtod_l+0xb0c>
 800e008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e00a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e00e:	ec4b ab10 	vmov	d0, sl, fp
 800e012:	f003 f869 	bl	80110e8 <__ulp>
 800e016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e01a:	ec51 0b10 	vmov	r0, r1, d0
 800e01e:	f7f2 faeb 	bl	80005f8 <__aeabi_dmul>
 800e022:	4652      	mov	r2, sl
 800e024:	465b      	mov	r3, fp
 800e026:	f7f2 f931 	bl	800028c <__adddf3>
 800e02a:	460b      	mov	r3, r1
 800e02c:	4949      	ldr	r1, [pc, #292]	@ (800e154 <_strtod_l+0xaf4>)
 800e02e:	4a4e      	ldr	r2, [pc, #312]	@ (800e168 <_strtod_l+0xb08>)
 800e030:	4019      	ands	r1, r3
 800e032:	4291      	cmp	r1, r2
 800e034:	4682      	mov	sl, r0
 800e036:	d942      	bls.n	800e0be <_strtod_l+0xa5e>
 800e038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e03a:	4b47      	ldr	r3, [pc, #284]	@ (800e158 <_strtod_l+0xaf8>)
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d103      	bne.n	800e048 <_strtod_l+0x9e8>
 800e040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e042:	3301      	adds	r3, #1
 800e044:	f43f ad2b 	beq.w	800da9e <_strtod_l+0x43e>
 800e048:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e158 <_strtod_l+0xaf8>
 800e04c:	f04f 3aff 	mov.w	sl, #4294967295
 800e050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e052:	9805      	ldr	r0, [sp, #20]
 800e054:	f002 fd14 	bl	8010a80 <_Bfree>
 800e058:	9805      	ldr	r0, [sp, #20]
 800e05a:	4649      	mov	r1, r9
 800e05c:	f002 fd10 	bl	8010a80 <_Bfree>
 800e060:	9805      	ldr	r0, [sp, #20]
 800e062:	4641      	mov	r1, r8
 800e064:	f002 fd0c 	bl	8010a80 <_Bfree>
 800e068:	9805      	ldr	r0, [sp, #20]
 800e06a:	4621      	mov	r1, r4
 800e06c:	f002 fd08 	bl	8010a80 <_Bfree>
 800e070:	e618      	b.n	800dca4 <_strtod_l+0x644>
 800e072:	f1ba 0f01 	cmp.w	sl, #1
 800e076:	d103      	bne.n	800e080 <_strtod_l+0xa20>
 800e078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f43f ada5 	beq.w	800dbca <_strtod_l+0x56a>
 800e080:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e130 <_strtod_l+0xad0>
 800e084:	4f35      	ldr	r7, [pc, #212]	@ (800e15c <_strtod_l+0xafc>)
 800e086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e08a:	2600      	movs	r6, #0
 800e08c:	e7b1      	b.n	800dff2 <_strtod_l+0x992>
 800e08e:	4f34      	ldr	r7, [pc, #208]	@ (800e160 <_strtod_l+0xb00>)
 800e090:	2600      	movs	r6, #0
 800e092:	e7aa      	b.n	800dfea <_strtod_l+0x98a>
 800e094:	4b32      	ldr	r3, [pc, #200]	@ (800e160 <_strtod_l+0xb00>)
 800e096:	4630      	mov	r0, r6
 800e098:	4639      	mov	r1, r7
 800e09a:	2200      	movs	r2, #0
 800e09c:	f7f2 faac 	bl	80005f8 <__aeabi_dmul>
 800e0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	460f      	mov	r7, r1
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d09f      	beq.n	800dfea <_strtod_l+0x98a>
 800e0aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e0ae:	e7a0      	b.n	800dff2 <_strtod_l+0x992>
 800e0b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e138 <_strtod_l+0xad8>
 800e0b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0b8:	ec57 6b17 	vmov	r6, r7, d7
 800e0bc:	e799      	b.n	800dff2 <_strtod_l+0x992>
 800e0be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e0c2:	9b08      	ldr	r3, [sp, #32]
 800e0c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1c1      	bne.n	800e050 <_strtod_l+0x9f0>
 800e0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0d0:	0d1b      	lsrs	r3, r3, #20
 800e0d2:	051b      	lsls	r3, r3, #20
 800e0d4:	429d      	cmp	r5, r3
 800e0d6:	d1bb      	bne.n	800e050 <_strtod_l+0x9f0>
 800e0d8:	4630      	mov	r0, r6
 800e0da:	4639      	mov	r1, r7
 800e0dc:	f7f2 fdec 	bl	8000cb8 <__aeabi_d2lz>
 800e0e0:	f7f2 fa5c 	bl	800059c <__aeabi_l2d>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	4639      	mov	r1, r7
 800e0ec:	f7f2 f8cc 	bl	8000288 <__aeabi_dsub>
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e0f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fe:	ea46 060a 	orr.w	r6, r6, sl
 800e102:	431e      	orrs	r6, r3
 800e104:	d06f      	beq.n	800e1e6 <_strtod_l+0xb86>
 800e106:	a30e      	add	r3, pc, #56	@ (adr r3, 800e140 <_strtod_l+0xae0>)
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	f7f2 fce6 	bl	8000adc <__aeabi_dcmplt>
 800e110:	2800      	cmp	r0, #0
 800e112:	f47f accf 	bne.w	800dab4 <_strtod_l+0x454>
 800e116:	a30c      	add	r3, pc, #48	@ (adr r3, 800e148 <_strtod_l+0xae8>)
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e120:	f7f2 fcfa 	bl	8000b18 <__aeabi_dcmpgt>
 800e124:	2800      	cmp	r0, #0
 800e126:	d093      	beq.n	800e050 <_strtod_l+0x9f0>
 800e128:	e4c4      	b.n	800dab4 <_strtod_l+0x454>
 800e12a:	bf00      	nop
 800e12c:	f3af 8000 	nop.w
 800e130:	00000000 	.word	0x00000000
 800e134:	bff00000 	.word	0xbff00000
 800e138:	00000000 	.word	0x00000000
 800e13c:	3ff00000 	.word	0x3ff00000
 800e140:	94a03595 	.word	0x94a03595
 800e144:	3fdfffff 	.word	0x3fdfffff
 800e148:	35afe535 	.word	0x35afe535
 800e14c:	3fe00000 	.word	0x3fe00000
 800e150:	000fffff 	.word	0x000fffff
 800e154:	7ff00000 	.word	0x7ff00000
 800e158:	7fefffff 	.word	0x7fefffff
 800e15c:	3ff00000 	.word	0x3ff00000
 800e160:	3fe00000 	.word	0x3fe00000
 800e164:	7fe00000 	.word	0x7fe00000
 800e168:	7c9fffff 	.word	0x7c9fffff
 800e16c:	9b08      	ldr	r3, [sp, #32]
 800e16e:	b323      	cbz	r3, 800e1ba <_strtod_l+0xb5a>
 800e170:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e174:	d821      	bhi.n	800e1ba <_strtod_l+0xb5a>
 800e176:	a328      	add	r3, pc, #160	@ (adr r3, 800e218 <_strtod_l+0xbb8>)
 800e178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17c:	4630      	mov	r0, r6
 800e17e:	4639      	mov	r1, r7
 800e180:	f7f2 fcb6 	bl	8000af0 <__aeabi_dcmple>
 800e184:	b1a0      	cbz	r0, 800e1b0 <_strtod_l+0xb50>
 800e186:	4639      	mov	r1, r7
 800e188:	4630      	mov	r0, r6
 800e18a:	f7f2 fd0d 	bl	8000ba8 <__aeabi_d2uiz>
 800e18e:	2801      	cmp	r0, #1
 800e190:	bf38      	it	cc
 800e192:	2001      	movcc	r0, #1
 800e194:	f7f2 f9b6 	bl	8000504 <__aeabi_ui2d>
 800e198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e19a:	4606      	mov	r6, r0
 800e19c:	460f      	mov	r7, r1
 800e19e:	b9fb      	cbnz	r3, 800e1e0 <_strtod_l+0xb80>
 800e1a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e1a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e1a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e1ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e1b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e1b6:	1b5b      	subs	r3, r3, r5
 800e1b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e1ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e1be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e1c2:	f002 ff91 	bl	80110e8 <__ulp>
 800e1c6:	4650      	mov	r0, sl
 800e1c8:	ec53 2b10 	vmov	r2, r3, d0
 800e1cc:	4659      	mov	r1, fp
 800e1ce:	f7f2 fa13 	bl	80005f8 <__aeabi_dmul>
 800e1d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e1d6:	f7f2 f859 	bl	800028c <__adddf3>
 800e1da:	4682      	mov	sl, r0
 800e1dc:	468b      	mov	fp, r1
 800e1de:	e770      	b.n	800e0c2 <_strtod_l+0xa62>
 800e1e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e1e4:	e7e0      	b.n	800e1a8 <_strtod_l+0xb48>
 800e1e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e220 <_strtod_l+0xbc0>)
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	f7f2 fc76 	bl	8000adc <__aeabi_dcmplt>
 800e1f0:	e798      	b.n	800e124 <_strtod_l+0xac4>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e1f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1fa:	6013      	str	r3, [r2, #0]
 800e1fc:	f7ff ba6d 	b.w	800d6da <_strtod_l+0x7a>
 800e200:	2a65      	cmp	r2, #101	@ 0x65
 800e202:	f43f ab66 	beq.w	800d8d2 <_strtod_l+0x272>
 800e206:	2a45      	cmp	r2, #69	@ 0x45
 800e208:	f43f ab63 	beq.w	800d8d2 <_strtod_l+0x272>
 800e20c:	2301      	movs	r3, #1
 800e20e:	f7ff bb9e 	b.w	800d94e <_strtod_l+0x2ee>
 800e212:	bf00      	nop
 800e214:	f3af 8000 	nop.w
 800e218:	ffc00000 	.word	0xffc00000
 800e21c:	41dfffff 	.word	0x41dfffff
 800e220:	94a03595 	.word	0x94a03595
 800e224:	3fcfffff 	.word	0x3fcfffff

0800e228 <_strtod_r>:
 800e228:	4b01      	ldr	r3, [pc, #4]	@ (800e230 <_strtod_r+0x8>)
 800e22a:	f7ff ba19 	b.w	800d660 <_strtod_l>
 800e22e:	bf00      	nop
 800e230:	200000fc 	.word	0x200000fc

0800e234 <strtod>:
 800e234:	460a      	mov	r2, r1
 800e236:	4601      	mov	r1, r0
 800e238:	4802      	ldr	r0, [pc, #8]	@ (800e244 <strtod+0x10>)
 800e23a:	4b03      	ldr	r3, [pc, #12]	@ (800e248 <strtod+0x14>)
 800e23c:	6800      	ldr	r0, [r0, #0]
 800e23e:	f7ff ba0f 	b.w	800d660 <_strtod_l>
 800e242:	bf00      	nop
 800e244:	20000268 	.word	0x20000268
 800e248:	200000fc 	.word	0x200000fc

0800e24c <_strtol_l.constprop.0>:
 800e24c:	2b24      	cmp	r3, #36	@ 0x24
 800e24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e252:	4686      	mov	lr, r0
 800e254:	4690      	mov	r8, r2
 800e256:	d801      	bhi.n	800e25c <_strtol_l.constprop.0+0x10>
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d106      	bne.n	800e26a <_strtol_l.constprop.0+0x1e>
 800e25c:	f001 f8ce 	bl	800f3fc <__errno>
 800e260:	2316      	movs	r3, #22
 800e262:	6003      	str	r3, [r0, #0]
 800e264:	2000      	movs	r0, #0
 800e266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e26a:	4834      	ldr	r0, [pc, #208]	@ (800e33c <_strtol_l.constprop.0+0xf0>)
 800e26c:	460d      	mov	r5, r1
 800e26e:	462a      	mov	r2, r5
 800e270:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e274:	5d06      	ldrb	r6, [r0, r4]
 800e276:	f016 0608 	ands.w	r6, r6, #8
 800e27a:	d1f8      	bne.n	800e26e <_strtol_l.constprop.0+0x22>
 800e27c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e27e:	d12d      	bne.n	800e2dc <_strtol_l.constprop.0+0x90>
 800e280:	782c      	ldrb	r4, [r5, #0]
 800e282:	2601      	movs	r6, #1
 800e284:	1c95      	adds	r5, r2, #2
 800e286:	f033 0210 	bics.w	r2, r3, #16
 800e28a:	d109      	bne.n	800e2a0 <_strtol_l.constprop.0+0x54>
 800e28c:	2c30      	cmp	r4, #48	@ 0x30
 800e28e:	d12a      	bne.n	800e2e6 <_strtol_l.constprop.0+0x9a>
 800e290:	782a      	ldrb	r2, [r5, #0]
 800e292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e296:	2a58      	cmp	r2, #88	@ 0x58
 800e298:	d125      	bne.n	800e2e6 <_strtol_l.constprop.0+0x9a>
 800e29a:	786c      	ldrb	r4, [r5, #1]
 800e29c:	2310      	movs	r3, #16
 800e29e:	3502      	adds	r5, #2
 800e2a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e2a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	fbbc f9f3 	udiv	r9, ip, r3
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e2b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e2b8:	2f09      	cmp	r7, #9
 800e2ba:	d81b      	bhi.n	800e2f4 <_strtol_l.constprop.0+0xa8>
 800e2bc:	463c      	mov	r4, r7
 800e2be:	42a3      	cmp	r3, r4
 800e2c0:	dd27      	ble.n	800e312 <_strtol_l.constprop.0+0xc6>
 800e2c2:	1c57      	adds	r7, r2, #1
 800e2c4:	d007      	beq.n	800e2d6 <_strtol_l.constprop.0+0x8a>
 800e2c6:	4581      	cmp	r9, r0
 800e2c8:	d320      	bcc.n	800e30c <_strtol_l.constprop.0+0xc0>
 800e2ca:	d101      	bne.n	800e2d0 <_strtol_l.constprop.0+0x84>
 800e2cc:	45a2      	cmp	sl, r4
 800e2ce:	db1d      	blt.n	800e30c <_strtol_l.constprop.0+0xc0>
 800e2d0:	fb00 4003 	mla	r0, r0, r3, r4
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2da:	e7eb      	b.n	800e2b4 <_strtol_l.constprop.0+0x68>
 800e2dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800e2de:	bf04      	itt	eq
 800e2e0:	782c      	ldrbeq	r4, [r5, #0]
 800e2e2:	1c95      	addeq	r5, r2, #2
 800e2e4:	e7cf      	b.n	800e286 <_strtol_l.constprop.0+0x3a>
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1da      	bne.n	800e2a0 <_strtol_l.constprop.0+0x54>
 800e2ea:	2c30      	cmp	r4, #48	@ 0x30
 800e2ec:	bf0c      	ite	eq
 800e2ee:	2308      	moveq	r3, #8
 800e2f0:	230a      	movne	r3, #10
 800e2f2:	e7d5      	b.n	800e2a0 <_strtol_l.constprop.0+0x54>
 800e2f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e2f8:	2f19      	cmp	r7, #25
 800e2fa:	d801      	bhi.n	800e300 <_strtol_l.constprop.0+0xb4>
 800e2fc:	3c37      	subs	r4, #55	@ 0x37
 800e2fe:	e7de      	b.n	800e2be <_strtol_l.constprop.0+0x72>
 800e300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e304:	2f19      	cmp	r7, #25
 800e306:	d804      	bhi.n	800e312 <_strtol_l.constprop.0+0xc6>
 800e308:	3c57      	subs	r4, #87	@ 0x57
 800e30a:	e7d8      	b.n	800e2be <_strtol_l.constprop.0+0x72>
 800e30c:	f04f 32ff 	mov.w	r2, #4294967295
 800e310:	e7e1      	b.n	800e2d6 <_strtol_l.constprop.0+0x8a>
 800e312:	1c53      	adds	r3, r2, #1
 800e314:	d108      	bne.n	800e328 <_strtol_l.constprop.0+0xdc>
 800e316:	2322      	movs	r3, #34	@ 0x22
 800e318:	f8ce 3000 	str.w	r3, [lr]
 800e31c:	4660      	mov	r0, ip
 800e31e:	f1b8 0f00 	cmp.w	r8, #0
 800e322:	d0a0      	beq.n	800e266 <_strtol_l.constprop.0+0x1a>
 800e324:	1e69      	subs	r1, r5, #1
 800e326:	e006      	b.n	800e336 <_strtol_l.constprop.0+0xea>
 800e328:	b106      	cbz	r6, 800e32c <_strtol_l.constprop.0+0xe0>
 800e32a:	4240      	negs	r0, r0
 800e32c:	f1b8 0f00 	cmp.w	r8, #0
 800e330:	d099      	beq.n	800e266 <_strtol_l.constprop.0+0x1a>
 800e332:	2a00      	cmp	r2, #0
 800e334:	d1f6      	bne.n	800e324 <_strtol_l.constprop.0+0xd8>
 800e336:	f8c8 1000 	str.w	r1, [r8]
 800e33a:	e794      	b.n	800e266 <_strtol_l.constprop.0+0x1a>
 800e33c:	08013fa1 	.word	0x08013fa1

0800e340 <_strtol_r>:
 800e340:	f7ff bf84 	b.w	800e24c <_strtol_l.constprop.0>

0800e344 <strtol>:
 800e344:	4613      	mov	r3, r2
 800e346:	460a      	mov	r2, r1
 800e348:	4601      	mov	r1, r0
 800e34a:	4802      	ldr	r0, [pc, #8]	@ (800e354 <strtol+0x10>)
 800e34c:	6800      	ldr	r0, [r0, #0]
 800e34e:	f7ff bf7d 	b.w	800e24c <_strtol_l.constprop.0>
 800e352:	bf00      	nop
 800e354:	20000268 	.word	0x20000268

0800e358 <__cvt>:
 800e358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e35c:	ec57 6b10 	vmov	r6, r7, d0
 800e360:	2f00      	cmp	r7, #0
 800e362:	460c      	mov	r4, r1
 800e364:	4619      	mov	r1, r3
 800e366:	463b      	mov	r3, r7
 800e368:	bfbb      	ittet	lt
 800e36a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e36e:	461f      	movlt	r7, r3
 800e370:	2300      	movge	r3, #0
 800e372:	232d      	movlt	r3, #45	@ 0x2d
 800e374:	700b      	strb	r3, [r1, #0]
 800e376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e378:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e37c:	4691      	mov	r9, r2
 800e37e:	f023 0820 	bic.w	r8, r3, #32
 800e382:	bfbc      	itt	lt
 800e384:	4632      	movlt	r2, r6
 800e386:	4616      	movlt	r6, r2
 800e388:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e38c:	d005      	beq.n	800e39a <__cvt+0x42>
 800e38e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e392:	d100      	bne.n	800e396 <__cvt+0x3e>
 800e394:	3401      	adds	r4, #1
 800e396:	2102      	movs	r1, #2
 800e398:	e000      	b.n	800e39c <__cvt+0x44>
 800e39a:	2103      	movs	r1, #3
 800e39c:	ab03      	add	r3, sp, #12
 800e39e:	9301      	str	r3, [sp, #4]
 800e3a0:	ab02      	add	r3, sp, #8
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	ec47 6b10 	vmov	d0, r6, r7
 800e3a8:	4653      	mov	r3, sl
 800e3aa:	4622      	mov	r2, r4
 800e3ac:	f001 f918 	bl	800f5e0 <_dtoa_r>
 800e3b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	d119      	bne.n	800e3ec <__cvt+0x94>
 800e3b8:	f019 0f01 	tst.w	r9, #1
 800e3bc:	d00e      	beq.n	800e3dc <__cvt+0x84>
 800e3be:	eb00 0904 	add.w	r9, r0, r4
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7f2 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3ce:	b108      	cbz	r0, 800e3d4 <__cvt+0x7c>
 800e3d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3d4:	2230      	movs	r2, #48	@ 0x30
 800e3d6:	9b03      	ldr	r3, [sp, #12]
 800e3d8:	454b      	cmp	r3, r9
 800e3da:	d31e      	bcc.n	800e41a <__cvt+0xc2>
 800e3dc:	9b03      	ldr	r3, [sp, #12]
 800e3de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3e0:	1b5b      	subs	r3, r3, r5
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	b004      	add	sp, #16
 800e3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e3f0:	eb00 0904 	add.w	r9, r0, r4
 800e3f4:	d1e5      	bne.n	800e3c2 <__cvt+0x6a>
 800e3f6:	7803      	ldrb	r3, [r0, #0]
 800e3f8:	2b30      	cmp	r3, #48	@ 0x30
 800e3fa:	d10a      	bne.n	800e412 <__cvt+0xba>
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2300      	movs	r3, #0
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	f7f2 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800e408:	b918      	cbnz	r0, 800e412 <__cvt+0xba>
 800e40a:	f1c4 0401 	rsb	r4, r4, #1
 800e40e:	f8ca 4000 	str.w	r4, [sl]
 800e412:	f8da 3000 	ldr.w	r3, [sl]
 800e416:	4499      	add	r9, r3
 800e418:	e7d3      	b.n	800e3c2 <__cvt+0x6a>
 800e41a:	1c59      	adds	r1, r3, #1
 800e41c:	9103      	str	r1, [sp, #12]
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e7d9      	b.n	800e3d6 <__cvt+0x7e>

0800e422 <__exponent>:
 800e422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e424:	2900      	cmp	r1, #0
 800e426:	bfba      	itte	lt
 800e428:	4249      	neglt	r1, r1
 800e42a:	232d      	movlt	r3, #45	@ 0x2d
 800e42c:	232b      	movge	r3, #43	@ 0x2b
 800e42e:	2909      	cmp	r1, #9
 800e430:	7002      	strb	r2, [r0, #0]
 800e432:	7043      	strb	r3, [r0, #1]
 800e434:	dd29      	ble.n	800e48a <__exponent+0x68>
 800e436:	f10d 0307 	add.w	r3, sp, #7
 800e43a:	461d      	mov	r5, r3
 800e43c:	270a      	movs	r7, #10
 800e43e:	461a      	mov	r2, r3
 800e440:	fbb1 f6f7 	udiv	r6, r1, r7
 800e444:	fb07 1416 	mls	r4, r7, r6, r1
 800e448:	3430      	adds	r4, #48	@ 0x30
 800e44a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e44e:	460c      	mov	r4, r1
 800e450:	2c63      	cmp	r4, #99	@ 0x63
 800e452:	f103 33ff 	add.w	r3, r3, #4294967295
 800e456:	4631      	mov	r1, r6
 800e458:	dcf1      	bgt.n	800e43e <__exponent+0x1c>
 800e45a:	3130      	adds	r1, #48	@ 0x30
 800e45c:	1e94      	subs	r4, r2, #2
 800e45e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e462:	1c41      	adds	r1, r0, #1
 800e464:	4623      	mov	r3, r4
 800e466:	42ab      	cmp	r3, r5
 800e468:	d30a      	bcc.n	800e480 <__exponent+0x5e>
 800e46a:	f10d 0309 	add.w	r3, sp, #9
 800e46e:	1a9b      	subs	r3, r3, r2
 800e470:	42ac      	cmp	r4, r5
 800e472:	bf88      	it	hi
 800e474:	2300      	movhi	r3, #0
 800e476:	3302      	adds	r3, #2
 800e478:	4403      	add	r3, r0
 800e47a:	1a18      	subs	r0, r3, r0
 800e47c:	b003      	add	sp, #12
 800e47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e480:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e484:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e488:	e7ed      	b.n	800e466 <__exponent+0x44>
 800e48a:	2330      	movs	r3, #48	@ 0x30
 800e48c:	3130      	adds	r1, #48	@ 0x30
 800e48e:	7083      	strb	r3, [r0, #2]
 800e490:	70c1      	strb	r1, [r0, #3]
 800e492:	1d03      	adds	r3, r0, #4
 800e494:	e7f1      	b.n	800e47a <__exponent+0x58>
	...

0800e498 <_printf_float>:
 800e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49c:	b08d      	sub	sp, #52	@ 0x34
 800e49e:	460c      	mov	r4, r1
 800e4a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	461f      	mov	r7, r3
 800e4a8:	4605      	mov	r5, r0
 800e4aa:	f000 ff5d 	bl	800f368 <_localeconv_r>
 800e4ae:	6803      	ldr	r3, [r0, #0]
 800e4b0:	9304      	str	r3, [sp, #16]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f1 fedc 	bl	8000270 <strlen>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e4c0:	9005      	str	r0, [sp, #20]
 800e4c2:	3307      	adds	r3, #7
 800e4c4:	f023 0307 	bic.w	r3, r3, #7
 800e4c8:	f103 0208 	add.w	r2, r3, #8
 800e4cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e4d0:	f8d4 b000 	ldr.w	fp, [r4]
 800e4d4:	f8c8 2000 	str.w	r2, [r8]
 800e4d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e4e0:	9307      	str	r3, [sp, #28]
 800e4e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e4ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4ee:	4b9c      	ldr	r3, [pc, #624]	@ (800e760 <_printf_float+0x2c8>)
 800e4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f4:	f7f2 fb1a 	bl	8000b2c <__aeabi_dcmpun>
 800e4f8:	bb70      	cbnz	r0, 800e558 <_printf_float+0xc0>
 800e4fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4fe:	4b98      	ldr	r3, [pc, #608]	@ (800e760 <_printf_float+0x2c8>)
 800e500:	f04f 32ff 	mov.w	r2, #4294967295
 800e504:	f7f2 faf4 	bl	8000af0 <__aeabi_dcmple>
 800e508:	bb30      	cbnz	r0, 800e558 <_printf_float+0xc0>
 800e50a:	2200      	movs	r2, #0
 800e50c:	2300      	movs	r3, #0
 800e50e:	4640      	mov	r0, r8
 800e510:	4649      	mov	r1, r9
 800e512:	f7f2 fae3 	bl	8000adc <__aeabi_dcmplt>
 800e516:	b110      	cbz	r0, 800e51e <_printf_float+0x86>
 800e518:	232d      	movs	r3, #45	@ 0x2d
 800e51a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e51e:	4a91      	ldr	r2, [pc, #580]	@ (800e764 <_printf_float+0x2cc>)
 800e520:	4b91      	ldr	r3, [pc, #580]	@ (800e768 <_printf_float+0x2d0>)
 800e522:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e526:	bf94      	ite	ls
 800e528:	4690      	movls	r8, r2
 800e52a:	4698      	movhi	r8, r3
 800e52c:	2303      	movs	r3, #3
 800e52e:	6123      	str	r3, [r4, #16]
 800e530:	f02b 0304 	bic.w	r3, fp, #4
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	f04f 0900 	mov.w	r9, #0
 800e53a:	9700      	str	r7, [sp, #0]
 800e53c:	4633      	mov	r3, r6
 800e53e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e540:	4621      	mov	r1, r4
 800e542:	4628      	mov	r0, r5
 800e544:	f000 f9d2 	bl	800e8ec <_printf_common>
 800e548:	3001      	adds	r0, #1
 800e54a:	f040 808d 	bne.w	800e668 <_printf_float+0x1d0>
 800e54e:	f04f 30ff 	mov.w	r0, #4294967295
 800e552:	b00d      	add	sp, #52	@ 0x34
 800e554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e558:	4642      	mov	r2, r8
 800e55a:	464b      	mov	r3, r9
 800e55c:	4640      	mov	r0, r8
 800e55e:	4649      	mov	r1, r9
 800e560:	f7f2 fae4 	bl	8000b2c <__aeabi_dcmpun>
 800e564:	b140      	cbz	r0, 800e578 <_printf_float+0xe0>
 800e566:	464b      	mov	r3, r9
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bfbc      	itt	lt
 800e56c:	232d      	movlt	r3, #45	@ 0x2d
 800e56e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e572:	4a7e      	ldr	r2, [pc, #504]	@ (800e76c <_printf_float+0x2d4>)
 800e574:	4b7e      	ldr	r3, [pc, #504]	@ (800e770 <_printf_float+0x2d8>)
 800e576:	e7d4      	b.n	800e522 <_printf_float+0x8a>
 800e578:	6863      	ldr	r3, [r4, #4]
 800e57a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e57e:	9206      	str	r2, [sp, #24]
 800e580:	1c5a      	adds	r2, r3, #1
 800e582:	d13b      	bne.n	800e5fc <_printf_float+0x164>
 800e584:	2306      	movs	r3, #6
 800e586:	6063      	str	r3, [r4, #4]
 800e588:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e58c:	2300      	movs	r3, #0
 800e58e:	6022      	str	r2, [r4, #0]
 800e590:	9303      	str	r3, [sp, #12]
 800e592:	ab0a      	add	r3, sp, #40	@ 0x28
 800e594:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e598:	ab09      	add	r3, sp, #36	@ 0x24
 800e59a:	9300      	str	r3, [sp, #0]
 800e59c:	6861      	ldr	r1, [r4, #4]
 800e59e:	ec49 8b10 	vmov	d0, r8, r9
 800e5a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	f7ff fed6 	bl	800e358 <__cvt>
 800e5ac:	9b06      	ldr	r3, [sp, #24]
 800e5ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5b0:	2b47      	cmp	r3, #71	@ 0x47
 800e5b2:	4680      	mov	r8, r0
 800e5b4:	d129      	bne.n	800e60a <_printf_float+0x172>
 800e5b6:	1cc8      	adds	r0, r1, #3
 800e5b8:	db02      	blt.n	800e5c0 <_printf_float+0x128>
 800e5ba:	6863      	ldr	r3, [r4, #4]
 800e5bc:	4299      	cmp	r1, r3
 800e5be:	dd41      	ble.n	800e644 <_printf_float+0x1ac>
 800e5c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e5c4:	fa5f fa8a 	uxtb.w	sl, sl
 800e5c8:	3901      	subs	r1, #1
 800e5ca:	4652      	mov	r2, sl
 800e5cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e5d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5d2:	f7ff ff26 	bl	800e422 <__exponent>
 800e5d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5d8:	1813      	adds	r3, r2, r0
 800e5da:	2a01      	cmp	r2, #1
 800e5dc:	4681      	mov	r9, r0
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	dc02      	bgt.n	800e5e8 <_printf_float+0x150>
 800e5e2:	6822      	ldr	r2, [r4, #0]
 800e5e4:	07d2      	lsls	r2, r2, #31
 800e5e6:	d501      	bpl.n	800e5ec <_printf_float+0x154>
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	6123      	str	r3, [r4, #16]
 800e5ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d0a2      	beq.n	800e53a <_printf_float+0xa2>
 800e5f4:	232d      	movs	r3, #45	@ 0x2d
 800e5f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5fa:	e79e      	b.n	800e53a <_printf_float+0xa2>
 800e5fc:	9a06      	ldr	r2, [sp, #24]
 800e5fe:	2a47      	cmp	r2, #71	@ 0x47
 800e600:	d1c2      	bne.n	800e588 <_printf_float+0xf0>
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1c0      	bne.n	800e588 <_printf_float+0xf0>
 800e606:	2301      	movs	r3, #1
 800e608:	e7bd      	b.n	800e586 <_printf_float+0xee>
 800e60a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e60e:	d9db      	bls.n	800e5c8 <_printf_float+0x130>
 800e610:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e614:	d118      	bne.n	800e648 <_printf_float+0x1b0>
 800e616:	2900      	cmp	r1, #0
 800e618:	6863      	ldr	r3, [r4, #4]
 800e61a:	dd0b      	ble.n	800e634 <_printf_float+0x19c>
 800e61c:	6121      	str	r1, [r4, #16]
 800e61e:	b913      	cbnz	r3, 800e626 <_printf_float+0x18e>
 800e620:	6822      	ldr	r2, [r4, #0]
 800e622:	07d0      	lsls	r0, r2, #31
 800e624:	d502      	bpl.n	800e62c <_printf_float+0x194>
 800e626:	3301      	adds	r3, #1
 800e628:	440b      	add	r3, r1
 800e62a:	6123      	str	r3, [r4, #16]
 800e62c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e62e:	f04f 0900 	mov.w	r9, #0
 800e632:	e7db      	b.n	800e5ec <_printf_float+0x154>
 800e634:	b913      	cbnz	r3, 800e63c <_printf_float+0x1a4>
 800e636:	6822      	ldr	r2, [r4, #0]
 800e638:	07d2      	lsls	r2, r2, #31
 800e63a:	d501      	bpl.n	800e640 <_printf_float+0x1a8>
 800e63c:	3302      	adds	r3, #2
 800e63e:	e7f4      	b.n	800e62a <_printf_float+0x192>
 800e640:	2301      	movs	r3, #1
 800e642:	e7f2      	b.n	800e62a <_printf_float+0x192>
 800e644:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e64a:	4299      	cmp	r1, r3
 800e64c:	db05      	blt.n	800e65a <_printf_float+0x1c2>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	6121      	str	r1, [r4, #16]
 800e652:	07d8      	lsls	r0, r3, #31
 800e654:	d5ea      	bpl.n	800e62c <_printf_float+0x194>
 800e656:	1c4b      	adds	r3, r1, #1
 800e658:	e7e7      	b.n	800e62a <_printf_float+0x192>
 800e65a:	2900      	cmp	r1, #0
 800e65c:	bfd4      	ite	le
 800e65e:	f1c1 0202 	rsble	r2, r1, #2
 800e662:	2201      	movgt	r2, #1
 800e664:	4413      	add	r3, r2
 800e666:	e7e0      	b.n	800e62a <_printf_float+0x192>
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	055a      	lsls	r2, r3, #21
 800e66c:	d407      	bmi.n	800e67e <_printf_float+0x1e6>
 800e66e:	6923      	ldr	r3, [r4, #16]
 800e670:	4642      	mov	r2, r8
 800e672:	4631      	mov	r1, r6
 800e674:	4628      	mov	r0, r5
 800e676:	47b8      	blx	r7
 800e678:	3001      	adds	r0, #1
 800e67a:	d12b      	bne.n	800e6d4 <_printf_float+0x23c>
 800e67c:	e767      	b.n	800e54e <_printf_float+0xb6>
 800e67e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e682:	f240 80dd 	bls.w	800e840 <_printf_float+0x3a8>
 800e686:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e68a:	2200      	movs	r2, #0
 800e68c:	2300      	movs	r3, #0
 800e68e:	f7f2 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e692:	2800      	cmp	r0, #0
 800e694:	d033      	beq.n	800e6fe <_printf_float+0x266>
 800e696:	4a37      	ldr	r2, [pc, #220]	@ (800e774 <_printf_float+0x2dc>)
 800e698:	2301      	movs	r3, #1
 800e69a:	4631      	mov	r1, r6
 800e69c:	4628      	mov	r0, r5
 800e69e:	47b8      	blx	r7
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	f43f af54 	beq.w	800e54e <_printf_float+0xb6>
 800e6a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e6aa:	4543      	cmp	r3, r8
 800e6ac:	db02      	blt.n	800e6b4 <_printf_float+0x21c>
 800e6ae:	6823      	ldr	r3, [r4, #0]
 800e6b0:	07d8      	lsls	r0, r3, #31
 800e6b2:	d50f      	bpl.n	800e6d4 <_printf_float+0x23c>
 800e6b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	47b8      	blx	r7
 800e6be:	3001      	adds	r0, #1
 800e6c0:	f43f af45 	beq.w	800e54e <_printf_float+0xb6>
 800e6c4:	f04f 0900 	mov.w	r9, #0
 800e6c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6cc:	f104 0a1a 	add.w	sl, r4, #26
 800e6d0:	45c8      	cmp	r8, r9
 800e6d2:	dc09      	bgt.n	800e6e8 <_printf_float+0x250>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	079b      	lsls	r3, r3, #30
 800e6d8:	f100 8103 	bmi.w	800e8e2 <_printf_float+0x44a>
 800e6dc:	68e0      	ldr	r0, [r4, #12]
 800e6de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6e0:	4298      	cmp	r0, r3
 800e6e2:	bfb8      	it	lt
 800e6e4:	4618      	movlt	r0, r3
 800e6e6:	e734      	b.n	800e552 <_printf_float+0xba>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	4652      	mov	r2, sl
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	47b8      	blx	r7
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	f43f af2b 	beq.w	800e54e <_printf_float+0xb6>
 800e6f8:	f109 0901 	add.w	r9, r9, #1
 800e6fc:	e7e8      	b.n	800e6d0 <_printf_float+0x238>
 800e6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e700:	2b00      	cmp	r3, #0
 800e702:	dc39      	bgt.n	800e778 <_printf_float+0x2e0>
 800e704:	4a1b      	ldr	r2, [pc, #108]	@ (800e774 <_printf_float+0x2dc>)
 800e706:	2301      	movs	r3, #1
 800e708:	4631      	mov	r1, r6
 800e70a:	4628      	mov	r0, r5
 800e70c:	47b8      	blx	r7
 800e70e:	3001      	adds	r0, #1
 800e710:	f43f af1d 	beq.w	800e54e <_printf_float+0xb6>
 800e714:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e718:	ea59 0303 	orrs.w	r3, r9, r3
 800e71c:	d102      	bne.n	800e724 <_printf_float+0x28c>
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	07d9      	lsls	r1, r3, #31
 800e722:	d5d7      	bpl.n	800e6d4 <_printf_float+0x23c>
 800e724:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e728:	4631      	mov	r1, r6
 800e72a:	4628      	mov	r0, r5
 800e72c:	47b8      	blx	r7
 800e72e:	3001      	adds	r0, #1
 800e730:	f43f af0d 	beq.w	800e54e <_printf_float+0xb6>
 800e734:	f04f 0a00 	mov.w	sl, #0
 800e738:	f104 0b1a 	add.w	fp, r4, #26
 800e73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73e:	425b      	negs	r3, r3
 800e740:	4553      	cmp	r3, sl
 800e742:	dc01      	bgt.n	800e748 <_printf_float+0x2b0>
 800e744:	464b      	mov	r3, r9
 800e746:	e793      	b.n	800e670 <_printf_float+0x1d8>
 800e748:	2301      	movs	r3, #1
 800e74a:	465a      	mov	r2, fp
 800e74c:	4631      	mov	r1, r6
 800e74e:	4628      	mov	r0, r5
 800e750:	47b8      	blx	r7
 800e752:	3001      	adds	r0, #1
 800e754:	f43f aefb 	beq.w	800e54e <_printf_float+0xb6>
 800e758:	f10a 0a01 	add.w	sl, sl, #1
 800e75c:	e7ee      	b.n	800e73c <_printf_float+0x2a4>
 800e75e:	bf00      	nop
 800e760:	7fefffff 	.word	0x7fefffff
 800e764:	080140a1 	.word	0x080140a1
 800e768:	080140a5 	.word	0x080140a5
 800e76c:	080140a9 	.word	0x080140a9
 800e770:	080140ad 	.word	0x080140ad
 800e774:	080140b1 	.word	0x080140b1
 800e778:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e77a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e77e:	4553      	cmp	r3, sl
 800e780:	bfa8      	it	ge
 800e782:	4653      	movge	r3, sl
 800e784:	2b00      	cmp	r3, #0
 800e786:	4699      	mov	r9, r3
 800e788:	dc36      	bgt.n	800e7f8 <_printf_float+0x360>
 800e78a:	f04f 0b00 	mov.w	fp, #0
 800e78e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e792:	f104 021a 	add.w	r2, r4, #26
 800e796:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e798:	9306      	str	r3, [sp, #24]
 800e79a:	eba3 0309 	sub.w	r3, r3, r9
 800e79e:	455b      	cmp	r3, fp
 800e7a0:	dc31      	bgt.n	800e806 <_printf_float+0x36e>
 800e7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a4:	459a      	cmp	sl, r3
 800e7a6:	dc3a      	bgt.n	800e81e <_printf_float+0x386>
 800e7a8:	6823      	ldr	r3, [r4, #0]
 800e7aa:	07da      	lsls	r2, r3, #31
 800e7ac:	d437      	bmi.n	800e81e <_printf_float+0x386>
 800e7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7b0:	ebaa 0903 	sub.w	r9, sl, r3
 800e7b4:	9b06      	ldr	r3, [sp, #24]
 800e7b6:	ebaa 0303 	sub.w	r3, sl, r3
 800e7ba:	4599      	cmp	r9, r3
 800e7bc:	bfa8      	it	ge
 800e7be:	4699      	movge	r9, r3
 800e7c0:	f1b9 0f00 	cmp.w	r9, #0
 800e7c4:	dc33      	bgt.n	800e82e <_printf_float+0x396>
 800e7c6:	f04f 0800 	mov.w	r8, #0
 800e7ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7ce:	f104 0b1a 	add.w	fp, r4, #26
 800e7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7d4:	ebaa 0303 	sub.w	r3, sl, r3
 800e7d8:	eba3 0309 	sub.w	r3, r3, r9
 800e7dc:	4543      	cmp	r3, r8
 800e7de:	f77f af79 	ble.w	800e6d4 <_printf_float+0x23c>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	465a      	mov	r2, fp
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	47b8      	blx	r7
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	f43f aeae 	beq.w	800e54e <_printf_float+0xb6>
 800e7f2:	f108 0801 	add.w	r8, r8, #1
 800e7f6:	e7ec      	b.n	800e7d2 <_printf_float+0x33a>
 800e7f8:	4642      	mov	r2, r8
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	47b8      	blx	r7
 800e800:	3001      	adds	r0, #1
 800e802:	d1c2      	bne.n	800e78a <_printf_float+0x2f2>
 800e804:	e6a3      	b.n	800e54e <_printf_float+0xb6>
 800e806:	2301      	movs	r3, #1
 800e808:	4631      	mov	r1, r6
 800e80a:	4628      	mov	r0, r5
 800e80c:	9206      	str	r2, [sp, #24]
 800e80e:	47b8      	blx	r7
 800e810:	3001      	adds	r0, #1
 800e812:	f43f ae9c 	beq.w	800e54e <_printf_float+0xb6>
 800e816:	9a06      	ldr	r2, [sp, #24]
 800e818:	f10b 0b01 	add.w	fp, fp, #1
 800e81c:	e7bb      	b.n	800e796 <_printf_float+0x2fe>
 800e81e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e822:	4631      	mov	r1, r6
 800e824:	4628      	mov	r0, r5
 800e826:	47b8      	blx	r7
 800e828:	3001      	adds	r0, #1
 800e82a:	d1c0      	bne.n	800e7ae <_printf_float+0x316>
 800e82c:	e68f      	b.n	800e54e <_printf_float+0xb6>
 800e82e:	9a06      	ldr	r2, [sp, #24]
 800e830:	464b      	mov	r3, r9
 800e832:	4442      	add	r2, r8
 800e834:	4631      	mov	r1, r6
 800e836:	4628      	mov	r0, r5
 800e838:	47b8      	blx	r7
 800e83a:	3001      	adds	r0, #1
 800e83c:	d1c3      	bne.n	800e7c6 <_printf_float+0x32e>
 800e83e:	e686      	b.n	800e54e <_printf_float+0xb6>
 800e840:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e844:	f1ba 0f01 	cmp.w	sl, #1
 800e848:	dc01      	bgt.n	800e84e <_printf_float+0x3b6>
 800e84a:	07db      	lsls	r3, r3, #31
 800e84c:	d536      	bpl.n	800e8bc <_printf_float+0x424>
 800e84e:	2301      	movs	r3, #1
 800e850:	4642      	mov	r2, r8
 800e852:	4631      	mov	r1, r6
 800e854:	4628      	mov	r0, r5
 800e856:	47b8      	blx	r7
 800e858:	3001      	adds	r0, #1
 800e85a:	f43f ae78 	beq.w	800e54e <_printf_float+0xb6>
 800e85e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e862:	4631      	mov	r1, r6
 800e864:	4628      	mov	r0, r5
 800e866:	47b8      	blx	r7
 800e868:	3001      	adds	r0, #1
 800e86a:	f43f ae70 	beq.w	800e54e <_printf_float+0xb6>
 800e86e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e872:	2200      	movs	r2, #0
 800e874:	2300      	movs	r3, #0
 800e876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e87a:	f7f2 f925 	bl	8000ac8 <__aeabi_dcmpeq>
 800e87e:	b9c0      	cbnz	r0, 800e8b2 <_printf_float+0x41a>
 800e880:	4653      	mov	r3, sl
 800e882:	f108 0201 	add.w	r2, r8, #1
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	d10c      	bne.n	800e8aa <_printf_float+0x412>
 800e890:	e65d      	b.n	800e54e <_printf_float+0xb6>
 800e892:	2301      	movs	r3, #1
 800e894:	465a      	mov	r2, fp
 800e896:	4631      	mov	r1, r6
 800e898:	4628      	mov	r0, r5
 800e89a:	47b8      	blx	r7
 800e89c:	3001      	adds	r0, #1
 800e89e:	f43f ae56 	beq.w	800e54e <_printf_float+0xb6>
 800e8a2:	f108 0801 	add.w	r8, r8, #1
 800e8a6:	45d0      	cmp	r8, sl
 800e8a8:	dbf3      	blt.n	800e892 <_printf_float+0x3fa>
 800e8aa:	464b      	mov	r3, r9
 800e8ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e8b0:	e6df      	b.n	800e672 <_printf_float+0x1da>
 800e8b2:	f04f 0800 	mov.w	r8, #0
 800e8b6:	f104 0b1a 	add.w	fp, r4, #26
 800e8ba:	e7f4      	b.n	800e8a6 <_printf_float+0x40e>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	4642      	mov	r2, r8
 800e8c0:	e7e1      	b.n	800e886 <_printf_float+0x3ee>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	464a      	mov	r2, r9
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b8      	blx	r7
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	f43f ae3e 	beq.w	800e54e <_printf_float+0xb6>
 800e8d2:	f108 0801 	add.w	r8, r8, #1
 800e8d6:	68e3      	ldr	r3, [r4, #12]
 800e8d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8da:	1a5b      	subs	r3, r3, r1
 800e8dc:	4543      	cmp	r3, r8
 800e8de:	dcf0      	bgt.n	800e8c2 <_printf_float+0x42a>
 800e8e0:	e6fc      	b.n	800e6dc <_printf_float+0x244>
 800e8e2:	f04f 0800 	mov.w	r8, #0
 800e8e6:	f104 0919 	add.w	r9, r4, #25
 800e8ea:	e7f4      	b.n	800e8d6 <_printf_float+0x43e>

0800e8ec <_printf_common>:
 800e8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f0:	4616      	mov	r6, r2
 800e8f2:	4698      	mov	r8, r3
 800e8f4:	688a      	ldr	r2, [r1, #8]
 800e8f6:	690b      	ldr	r3, [r1, #16]
 800e8f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	bfb8      	it	lt
 800e900:	4613      	movlt	r3, r2
 800e902:	6033      	str	r3, [r6, #0]
 800e904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e908:	4607      	mov	r7, r0
 800e90a:	460c      	mov	r4, r1
 800e90c:	b10a      	cbz	r2, 800e912 <_printf_common+0x26>
 800e90e:	3301      	adds	r3, #1
 800e910:	6033      	str	r3, [r6, #0]
 800e912:	6823      	ldr	r3, [r4, #0]
 800e914:	0699      	lsls	r1, r3, #26
 800e916:	bf42      	ittt	mi
 800e918:	6833      	ldrmi	r3, [r6, #0]
 800e91a:	3302      	addmi	r3, #2
 800e91c:	6033      	strmi	r3, [r6, #0]
 800e91e:	6825      	ldr	r5, [r4, #0]
 800e920:	f015 0506 	ands.w	r5, r5, #6
 800e924:	d106      	bne.n	800e934 <_printf_common+0x48>
 800e926:	f104 0a19 	add.w	sl, r4, #25
 800e92a:	68e3      	ldr	r3, [r4, #12]
 800e92c:	6832      	ldr	r2, [r6, #0]
 800e92e:	1a9b      	subs	r3, r3, r2
 800e930:	42ab      	cmp	r3, r5
 800e932:	dc26      	bgt.n	800e982 <_printf_common+0x96>
 800e934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e938:	6822      	ldr	r2, [r4, #0]
 800e93a:	3b00      	subs	r3, #0
 800e93c:	bf18      	it	ne
 800e93e:	2301      	movne	r3, #1
 800e940:	0692      	lsls	r2, r2, #26
 800e942:	d42b      	bmi.n	800e99c <_printf_common+0xb0>
 800e944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e948:	4641      	mov	r1, r8
 800e94a:	4638      	mov	r0, r7
 800e94c:	47c8      	blx	r9
 800e94e:	3001      	adds	r0, #1
 800e950:	d01e      	beq.n	800e990 <_printf_common+0xa4>
 800e952:	6823      	ldr	r3, [r4, #0]
 800e954:	6922      	ldr	r2, [r4, #16]
 800e956:	f003 0306 	and.w	r3, r3, #6
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	bf02      	ittt	eq
 800e95e:	68e5      	ldreq	r5, [r4, #12]
 800e960:	6833      	ldreq	r3, [r6, #0]
 800e962:	1aed      	subeq	r5, r5, r3
 800e964:	68a3      	ldr	r3, [r4, #8]
 800e966:	bf0c      	ite	eq
 800e968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e96c:	2500      	movne	r5, #0
 800e96e:	4293      	cmp	r3, r2
 800e970:	bfc4      	itt	gt
 800e972:	1a9b      	subgt	r3, r3, r2
 800e974:	18ed      	addgt	r5, r5, r3
 800e976:	2600      	movs	r6, #0
 800e978:	341a      	adds	r4, #26
 800e97a:	42b5      	cmp	r5, r6
 800e97c:	d11a      	bne.n	800e9b4 <_printf_common+0xc8>
 800e97e:	2000      	movs	r0, #0
 800e980:	e008      	b.n	800e994 <_printf_common+0xa8>
 800e982:	2301      	movs	r3, #1
 800e984:	4652      	mov	r2, sl
 800e986:	4641      	mov	r1, r8
 800e988:	4638      	mov	r0, r7
 800e98a:	47c8      	blx	r9
 800e98c:	3001      	adds	r0, #1
 800e98e:	d103      	bne.n	800e998 <_printf_common+0xac>
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e998:	3501      	adds	r5, #1
 800e99a:	e7c6      	b.n	800e92a <_printf_common+0x3e>
 800e99c:	18e1      	adds	r1, r4, r3
 800e99e:	1c5a      	adds	r2, r3, #1
 800e9a0:	2030      	movs	r0, #48	@ 0x30
 800e9a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e9a6:	4422      	add	r2, r4
 800e9a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e9ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9b0:	3302      	adds	r3, #2
 800e9b2:	e7c7      	b.n	800e944 <_printf_common+0x58>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	4622      	mov	r2, r4
 800e9b8:	4641      	mov	r1, r8
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	47c8      	blx	r9
 800e9be:	3001      	adds	r0, #1
 800e9c0:	d0e6      	beq.n	800e990 <_printf_common+0xa4>
 800e9c2:	3601      	adds	r6, #1
 800e9c4:	e7d9      	b.n	800e97a <_printf_common+0x8e>
	...

0800e9c8 <_printf_i>:
 800e9c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9cc:	7e0f      	ldrb	r7, [r1, #24]
 800e9ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9d0:	2f78      	cmp	r7, #120	@ 0x78
 800e9d2:	4691      	mov	r9, r2
 800e9d4:	4680      	mov	r8, r0
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	469a      	mov	sl, r3
 800e9da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9de:	d807      	bhi.n	800e9f0 <_printf_i+0x28>
 800e9e0:	2f62      	cmp	r7, #98	@ 0x62
 800e9e2:	d80a      	bhi.n	800e9fa <_printf_i+0x32>
 800e9e4:	2f00      	cmp	r7, #0
 800e9e6:	f000 80d2 	beq.w	800eb8e <_printf_i+0x1c6>
 800e9ea:	2f58      	cmp	r7, #88	@ 0x58
 800e9ec:	f000 80b9 	beq.w	800eb62 <_printf_i+0x19a>
 800e9f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9f8:	e03a      	b.n	800ea70 <_printf_i+0xa8>
 800e9fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9fe:	2b15      	cmp	r3, #21
 800ea00:	d8f6      	bhi.n	800e9f0 <_printf_i+0x28>
 800ea02:	a101      	add	r1, pc, #4	@ (adr r1, 800ea08 <_printf_i+0x40>)
 800ea04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea08:	0800ea61 	.word	0x0800ea61
 800ea0c:	0800ea75 	.word	0x0800ea75
 800ea10:	0800e9f1 	.word	0x0800e9f1
 800ea14:	0800e9f1 	.word	0x0800e9f1
 800ea18:	0800e9f1 	.word	0x0800e9f1
 800ea1c:	0800e9f1 	.word	0x0800e9f1
 800ea20:	0800ea75 	.word	0x0800ea75
 800ea24:	0800e9f1 	.word	0x0800e9f1
 800ea28:	0800e9f1 	.word	0x0800e9f1
 800ea2c:	0800e9f1 	.word	0x0800e9f1
 800ea30:	0800e9f1 	.word	0x0800e9f1
 800ea34:	0800eb75 	.word	0x0800eb75
 800ea38:	0800ea9f 	.word	0x0800ea9f
 800ea3c:	0800eb2f 	.word	0x0800eb2f
 800ea40:	0800e9f1 	.word	0x0800e9f1
 800ea44:	0800e9f1 	.word	0x0800e9f1
 800ea48:	0800eb97 	.word	0x0800eb97
 800ea4c:	0800e9f1 	.word	0x0800e9f1
 800ea50:	0800ea9f 	.word	0x0800ea9f
 800ea54:	0800e9f1 	.word	0x0800e9f1
 800ea58:	0800e9f1 	.word	0x0800e9f1
 800ea5c:	0800eb37 	.word	0x0800eb37
 800ea60:	6833      	ldr	r3, [r6, #0]
 800ea62:	1d1a      	adds	r2, r3, #4
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6032      	str	r2, [r6, #0]
 800ea68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea70:	2301      	movs	r3, #1
 800ea72:	e09d      	b.n	800ebb0 <_printf_i+0x1e8>
 800ea74:	6833      	ldr	r3, [r6, #0]
 800ea76:	6820      	ldr	r0, [r4, #0]
 800ea78:	1d19      	adds	r1, r3, #4
 800ea7a:	6031      	str	r1, [r6, #0]
 800ea7c:	0606      	lsls	r6, r0, #24
 800ea7e:	d501      	bpl.n	800ea84 <_printf_i+0xbc>
 800ea80:	681d      	ldr	r5, [r3, #0]
 800ea82:	e003      	b.n	800ea8c <_printf_i+0xc4>
 800ea84:	0645      	lsls	r5, r0, #25
 800ea86:	d5fb      	bpl.n	800ea80 <_printf_i+0xb8>
 800ea88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea8c:	2d00      	cmp	r5, #0
 800ea8e:	da03      	bge.n	800ea98 <_printf_i+0xd0>
 800ea90:	232d      	movs	r3, #45	@ 0x2d
 800ea92:	426d      	negs	r5, r5
 800ea94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea98:	4859      	ldr	r0, [pc, #356]	@ (800ec00 <_printf_i+0x238>)
 800ea9a:	230a      	movs	r3, #10
 800ea9c:	e011      	b.n	800eac2 <_printf_i+0xfa>
 800ea9e:	6821      	ldr	r1, [r4, #0]
 800eaa0:	6833      	ldr	r3, [r6, #0]
 800eaa2:	0608      	lsls	r0, r1, #24
 800eaa4:	f853 5b04 	ldr.w	r5, [r3], #4
 800eaa8:	d402      	bmi.n	800eab0 <_printf_i+0xe8>
 800eaaa:	0649      	lsls	r1, r1, #25
 800eaac:	bf48      	it	mi
 800eaae:	b2ad      	uxthmi	r5, r5
 800eab0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eab2:	4853      	ldr	r0, [pc, #332]	@ (800ec00 <_printf_i+0x238>)
 800eab4:	6033      	str	r3, [r6, #0]
 800eab6:	bf14      	ite	ne
 800eab8:	230a      	movne	r3, #10
 800eaba:	2308      	moveq	r3, #8
 800eabc:	2100      	movs	r1, #0
 800eabe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eac2:	6866      	ldr	r6, [r4, #4]
 800eac4:	60a6      	str	r6, [r4, #8]
 800eac6:	2e00      	cmp	r6, #0
 800eac8:	bfa2      	ittt	ge
 800eaca:	6821      	ldrge	r1, [r4, #0]
 800eacc:	f021 0104 	bicge.w	r1, r1, #4
 800ead0:	6021      	strge	r1, [r4, #0]
 800ead2:	b90d      	cbnz	r5, 800ead8 <_printf_i+0x110>
 800ead4:	2e00      	cmp	r6, #0
 800ead6:	d04b      	beq.n	800eb70 <_printf_i+0x1a8>
 800ead8:	4616      	mov	r6, r2
 800eada:	fbb5 f1f3 	udiv	r1, r5, r3
 800eade:	fb03 5711 	mls	r7, r3, r1, r5
 800eae2:	5dc7      	ldrb	r7, [r0, r7]
 800eae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eae8:	462f      	mov	r7, r5
 800eaea:	42bb      	cmp	r3, r7
 800eaec:	460d      	mov	r5, r1
 800eaee:	d9f4      	bls.n	800eada <_printf_i+0x112>
 800eaf0:	2b08      	cmp	r3, #8
 800eaf2:	d10b      	bne.n	800eb0c <_printf_i+0x144>
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	07df      	lsls	r7, r3, #31
 800eaf8:	d508      	bpl.n	800eb0c <_printf_i+0x144>
 800eafa:	6923      	ldr	r3, [r4, #16]
 800eafc:	6861      	ldr	r1, [r4, #4]
 800eafe:	4299      	cmp	r1, r3
 800eb00:	bfde      	ittt	le
 800eb02:	2330      	movle	r3, #48	@ 0x30
 800eb04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb0c:	1b92      	subs	r2, r2, r6
 800eb0e:	6122      	str	r2, [r4, #16]
 800eb10:	f8cd a000 	str.w	sl, [sp]
 800eb14:	464b      	mov	r3, r9
 800eb16:	aa03      	add	r2, sp, #12
 800eb18:	4621      	mov	r1, r4
 800eb1a:	4640      	mov	r0, r8
 800eb1c:	f7ff fee6 	bl	800e8ec <_printf_common>
 800eb20:	3001      	adds	r0, #1
 800eb22:	d14a      	bne.n	800ebba <_printf_i+0x1f2>
 800eb24:	f04f 30ff 	mov.w	r0, #4294967295
 800eb28:	b004      	add	sp, #16
 800eb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	f043 0320 	orr.w	r3, r3, #32
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	4833      	ldr	r0, [pc, #204]	@ (800ec04 <_printf_i+0x23c>)
 800eb38:	2778      	movs	r7, #120	@ 0x78
 800eb3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	6831      	ldr	r1, [r6, #0]
 800eb42:	061f      	lsls	r7, r3, #24
 800eb44:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb48:	d402      	bmi.n	800eb50 <_printf_i+0x188>
 800eb4a:	065f      	lsls	r7, r3, #25
 800eb4c:	bf48      	it	mi
 800eb4e:	b2ad      	uxthmi	r5, r5
 800eb50:	6031      	str	r1, [r6, #0]
 800eb52:	07d9      	lsls	r1, r3, #31
 800eb54:	bf44      	itt	mi
 800eb56:	f043 0320 	orrmi.w	r3, r3, #32
 800eb5a:	6023      	strmi	r3, [r4, #0]
 800eb5c:	b11d      	cbz	r5, 800eb66 <_printf_i+0x19e>
 800eb5e:	2310      	movs	r3, #16
 800eb60:	e7ac      	b.n	800eabc <_printf_i+0xf4>
 800eb62:	4827      	ldr	r0, [pc, #156]	@ (800ec00 <_printf_i+0x238>)
 800eb64:	e7e9      	b.n	800eb3a <_printf_i+0x172>
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	f023 0320 	bic.w	r3, r3, #32
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	e7f6      	b.n	800eb5e <_printf_i+0x196>
 800eb70:	4616      	mov	r6, r2
 800eb72:	e7bd      	b.n	800eaf0 <_printf_i+0x128>
 800eb74:	6833      	ldr	r3, [r6, #0]
 800eb76:	6825      	ldr	r5, [r4, #0]
 800eb78:	6961      	ldr	r1, [r4, #20]
 800eb7a:	1d18      	adds	r0, r3, #4
 800eb7c:	6030      	str	r0, [r6, #0]
 800eb7e:	062e      	lsls	r6, r5, #24
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	d501      	bpl.n	800eb88 <_printf_i+0x1c0>
 800eb84:	6019      	str	r1, [r3, #0]
 800eb86:	e002      	b.n	800eb8e <_printf_i+0x1c6>
 800eb88:	0668      	lsls	r0, r5, #25
 800eb8a:	d5fb      	bpl.n	800eb84 <_printf_i+0x1bc>
 800eb8c:	8019      	strh	r1, [r3, #0]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	6123      	str	r3, [r4, #16]
 800eb92:	4616      	mov	r6, r2
 800eb94:	e7bc      	b.n	800eb10 <_printf_i+0x148>
 800eb96:	6833      	ldr	r3, [r6, #0]
 800eb98:	1d1a      	adds	r2, r3, #4
 800eb9a:	6032      	str	r2, [r6, #0]
 800eb9c:	681e      	ldr	r6, [r3, #0]
 800eb9e:	6862      	ldr	r2, [r4, #4]
 800eba0:	2100      	movs	r1, #0
 800eba2:	4630      	mov	r0, r6
 800eba4:	f7f1 fb14 	bl	80001d0 <memchr>
 800eba8:	b108      	cbz	r0, 800ebae <_printf_i+0x1e6>
 800ebaa:	1b80      	subs	r0, r0, r6
 800ebac:	6060      	str	r0, [r4, #4]
 800ebae:	6863      	ldr	r3, [r4, #4]
 800ebb0:	6123      	str	r3, [r4, #16]
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebb8:	e7aa      	b.n	800eb10 <_printf_i+0x148>
 800ebba:	6923      	ldr	r3, [r4, #16]
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	4649      	mov	r1, r9
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	47d0      	blx	sl
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d0ad      	beq.n	800eb24 <_printf_i+0x15c>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	079b      	lsls	r3, r3, #30
 800ebcc:	d413      	bmi.n	800ebf6 <_printf_i+0x22e>
 800ebce:	68e0      	ldr	r0, [r4, #12]
 800ebd0:	9b03      	ldr	r3, [sp, #12]
 800ebd2:	4298      	cmp	r0, r3
 800ebd4:	bfb8      	it	lt
 800ebd6:	4618      	movlt	r0, r3
 800ebd8:	e7a6      	b.n	800eb28 <_printf_i+0x160>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	4632      	mov	r2, r6
 800ebde:	4649      	mov	r1, r9
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	47d0      	blx	sl
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	d09d      	beq.n	800eb24 <_printf_i+0x15c>
 800ebe8:	3501      	adds	r5, #1
 800ebea:	68e3      	ldr	r3, [r4, #12]
 800ebec:	9903      	ldr	r1, [sp, #12]
 800ebee:	1a5b      	subs	r3, r3, r1
 800ebf0:	42ab      	cmp	r3, r5
 800ebf2:	dcf2      	bgt.n	800ebda <_printf_i+0x212>
 800ebf4:	e7eb      	b.n	800ebce <_printf_i+0x206>
 800ebf6:	2500      	movs	r5, #0
 800ebf8:	f104 0619 	add.w	r6, r4, #25
 800ebfc:	e7f5      	b.n	800ebea <_printf_i+0x222>
 800ebfe:	bf00      	nop
 800ec00:	080140b3 	.word	0x080140b3
 800ec04:	080140c4 	.word	0x080140c4

0800ec08 <_scanf_float>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	b087      	sub	sp, #28
 800ec0e:	4617      	mov	r7, r2
 800ec10:	9303      	str	r3, [sp, #12]
 800ec12:	688b      	ldr	r3, [r1, #8]
 800ec14:	1e5a      	subs	r2, r3, #1
 800ec16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ec1a:	bf81      	itttt	hi
 800ec1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ec20:	eb03 0b05 	addhi.w	fp, r3, r5
 800ec24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ec28:	608b      	strhi	r3, [r1, #8]
 800ec2a:	680b      	ldr	r3, [r1, #0]
 800ec2c:	460a      	mov	r2, r1
 800ec2e:	f04f 0500 	mov.w	r5, #0
 800ec32:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ec36:	f842 3b1c 	str.w	r3, [r2], #28
 800ec3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ec3e:	4680      	mov	r8, r0
 800ec40:	460c      	mov	r4, r1
 800ec42:	bf98      	it	ls
 800ec44:	f04f 0b00 	movls.w	fp, #0
 800ec48:	9201      	str	r2, [sp, #4]
 800ec4a:	4616      	mov	r6, r2
 800ec4c:	46aa      	mov	sl, r5
 800ec4e:	46a9      	mov	r9, r5
 800ec50:	9502      	str	r5, [sp, #8]
 800ec52:	68a2      	ldr	r2, [r4, #8]
 800ec54:	b152      	cbz	r2, 800ec6c <_scanf_float+0x64>
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ec5c:	d864      	bhi.n	800ed28 <_scanf_float+0x120>
 800ec5e:	2b40      	cmp	r3, #64	@ 0x40
 800ec60:	d83c      	bhi.n	800ecdc <_scanf_float+0xd4>
 800ec62:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ec66:	b2c8      	uxtb	r0, r1
 800ec68:	280e      	cmp	r0, #14
 800ec6a:	d93a      	bls.n	800ece2 <_scanf_float+0xda>
 800ec6c:	f1b9 0f00 	cmp.w	r9, #0
 800ec70:	d003      	beq.n	800ec7a <_scanf_float+0x72>
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec7e:	f1ba 0f01 	cmp.w	sl, #1
 800ec82:	f200 8117 	bhi.w	800eeb4 <_scanf_float+0x2ac>
 800ec86:	9b01      	ldr	r3, [sp, #4]
 800ec88:	429e      	cmp	r6, r3
 800ec8a:	f200 8108 	bhi.w	800ee9e <_scanf_float+0x296>
 800ec8e:	2001      	movs	r0, #1
 800ec90:	b007      	add	sp, #28
 800ec92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec96:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ec9a:	2a0d      	cmp	r2, #13
 800ec9c:	d8e6      	bhi.n	800ec6c <_scanf_float+0x64>
 800ec9e:	a101      	add	r1, pc, #4	@ (adr r1, 800eca4 <_scanf_float+0x9c>)
 800eca0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eca4:	0800edeb 	.word	0x0800edeb
 800eca8:	0800ec6d 	.word	0x0800ec6d
 800ecac:	0800ec6d 	.word	0x0800ec6d
 800ecb0:	0800ec6d 	.word	0x0800ec6d
 800ecb4:	0800ee4b 	.word	0x0800ee4b
 800ecb8:	0800ee23 	.word	0x0800ee23
 800ecbc:	0800ec6d 	.word	0x0800ec6d
 800ecc0:	0800ec6d 	.word	0x0800ec6d
 800ecc4:	0800edf9 	.word	0x0800edf9
 800ecc8:	0800ec6d 	.word	0x0800ec6d
 800eccc:	0800ec6d 	.word	0x0800ec6d
 800ecd0:	0800ec6d 	.word	0x0800ec6d
 800ecd4:	0800ec6d 	.word	0x0800ec6d
 800ecd8:	0800edb1 	.word	0x0800edb1
 800ecdc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ece0:	e7db      	b.n	800ec9a <_scanf_float+0x92>
 800ece2:	290e      	cmp	r1, #14
 800ece4:	d8c2      	bhi.n	800ec6c <_scanf_float+0x64>
 800ece6:	a001      	add	r0, pc, #4	@ (adr r0, 800ecec <_scanf_float+0xe4>)
 800ece8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ecec:	0800eda1 	.word	0x0800eda1
 800ecf0:	0800ec6d 	.word	0x0800ec6d
 800ecf4:	0800eda1 	.word	0x0800eda1
 800ecf8:	0800ee37 	.word	0x0800ee37
 800ecfc:	0800ec6d 	.word	0x0800ec6d
 800ed00:	0800ed49 	.word	0x0800ed49
 800ed04:	0800ed87 	.word	0x0800ed87
 800ed08:	0800ed87 	.word	0x0800ed87
 800ed0c:	0800ed87 	.word	0x0800ed87
 800ed10:	0800ed87 	.word	0x0800ed87
 800ed14:	0800ed87 	.word	0x0800ed87
 800ed18:	0800ed87 	.word	0x0800ed87
 800ed1c:	0800ed87 	.word	0x0800ed87
 800ed20:	0800ed87 	.word	0x0800ed87
 800ed24:	0800ed87 	.word	0x0800ed87
 800ed28:	2b6e      	cmp	r3, #110	@ 0x6e
 800ed2a:	d809      	bhi.n	800ed40 <_scanf_float+0x138>
 800ed2c:	2b60      	cmp	r3, #96	@ 0x60
 800ed2e:	d8b2      	bhi.n	800ec96 <_scanf_float+0x8e>
 800ed30:	2b54      	cmp	r3, #84	@ 0x54
 800ed32:	d07b      	beq.n	800ee2c <_scanf_float+0x224>
 800ed34:	2b59      	cmp	r3, #89	@ 0x59
 800ed36:	d199      	bne.n	800ec6c <_scanf_float+0x64>
 800ed38:	2d07      	cmp	r5, #7
 800ed3a:	d197      	bne.n	800ec6c <_scanf_float+0x64>
 800ed3c:	2508      	movs	r5, #8
 800ed3e:	e02c      	b.n	800ed9a <_scanf_float+0x192>
 800ed40:	2b74      	cmp	r3, #116	@ 0x74
 800ed42:	d073      	beq.n	800ee2c <_scanf_float+0x224>
 800ed44:	2b79      	cmp	r3, #121	@ 0x79
 800ed46:	e7f6      	b.n	800ed36 <_scanf_float+0x12e>
 800ed48:	6821      	ldr	r1, [r4, #0]
 800ed4a:	05c8      	lsls	r0, r1, #23
 800ed4c:	d51b      	bpl.n	800ed86 <_scanf_float+0x17e>
 800ed4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ed52:	6021      	str	r1, [r4, #0]
 800ed54:	f109 0901 	add.w	r9, r9, #1
 800ed58:	f1bb 0f00 	cmp.w	fp, #0
 800ed5c:	d003      	beq.n	800ed66 <_scanf_float+0x15e>
 800ed5e:	3201      	adds	r2, #1
 800ed60:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed64:	60a2      	str	r2, [r4, #8]
 800ed66:	68a3      	ldr	r3, [r4, #8]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	60a3      	str	r3, [r4, #8]
 800ed6c:	6923      	ldr	r3, [r4, #16]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	6123      	str	r3, [r4, #16]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	3b01      	subs	r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	607b      	str	r3, [r7, #4]
 800ed7a:	f340 8087 	ble.w	800ee8c <_scanf_float+0x284>
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	3301      	adds	r3, #1
 800ed82:	603b      	str	r3, [r7, #0]
 800ed84:	e765      	b.n	800ec52 <_scanf_float+0x4a>
 800ed86:	eb1a 0105 	adds.w	r1, sl, r5
 800ed8a:	f47f af6f 	bne.w	800ec6c <_scanf_float+0x64>
 800ed8e:	6822      	ldr	r2, [r4, #0]
 800ed90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ed94:	6022      	str	r2, [r4, #0]
 800ed96:	460d      	mov	r5, r1
 800ed98:	468a      	mov	sl, r1
 800ed9a:	f806 3b01 	strb.w	r3, [r6], #1
 800ed9e:	e7e2      	b.n	800ed66 <_scanf_float+0x15e>
 800eda0:	6822      	ldr	r2, [r4, #0]
 800eda2:	0610      	lsls	r0, r2, #24
 800eda4:	f57f af62 	bpl.w	800ec6c <_scanf_float+0x64>
 800eda8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800edac:	6022      	str	r2, [r4, #0]
 800edae:	e7f4      	b.n	800ed9a <_scanf_float+0x192>
 800edb0:	f1ba 0f00 	cmp.w	sl, #0
 800edb4:	d10e      	bne.n	800edd4 <_scanf_float+0x1cc>
 800edb6:	f1b9 0f00 	cmp.w	r9, #0
 800edba:	d10e      	bne.n	800edda <_scanf_float+0x1d2>
 800edbc:	6822      	ldr	r2, [r4, #0]
 800edbe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800edc2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800edc6:	d108      	bne.n	800edda <_scanf_float+0x1d2>
 800edc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800edcc:	6022      	str	r2, [r4, #0]
 800edce:	f04f 0a01 	mov.w	sl, #1
 800edd2:	e7e2      	b.n	800ed9a <_scanf_float+0x192>
 800edd4:	f1ba 0f02 	cmp.w	sl, #2
 800edd8:	d055      	beq.n	800ee86 <_scanf_float+0x27e>
 800edda:	2d01      	cmp	r5, #1
 800eddc:	d002      	beq.n	800ede4 <_scanf_float+0x1dc>
 800edde:	2d04      	cmp	r5, #4
 800ede0:	f47f af44 	bne.w	800ec6c <_scanf_float+0x64>
 800ede4:	3501      	adds	r5, #1
 800ede6:	b2ed      	uxtb	r5, r5
 800ede8:	e7d7      	b.n	800ed9a <_scanf_float+0x192>
 800edea:	f1ba 0f01 	cmp.w	sl, #1
 800edee:	f47f af3d 	bne.w	800ec6c <_scanf_float+0x64>
 800edf2:	f04f 0a02 	mov.w	sl, #2
 800edf6:	e7d0      	b.n	800ed9a <_scanf_float+0x192>
 800edf8:	b97d      	cbnz	r5, 800ee1a <_scanf_float+0x212>
 800edfa:	f1b9 0f00 	cmp.w	r9, #0
 800edfe:	f47f af38 	bne.w	800ec72 <_scanf_float+0x6a>
 800ee02:	6822      	ldr	r2, [r4, #0]
 800ee04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ee08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ee0c:	f040 8108 	bne.w	800f020 <_scanf_float+0x418>
 800ee10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ee14:	6022      	str	r2, [r4, #0]
 800ee16:	2501      	movs	r5, #1
 800ee18:	e7bf      	b.n	800ed9a <_scanf_float+0x192>
 800ee1a:	2d03      	cmp	r5, #3
 800ee1c:	d0e2      	beq.n	800ede4 <_scanf_float+0x1dc>
 800ee1e:	2d05      	cmp	r5, #5
 800ee20:	e7de      	b.n	800ede0 <_scanf_float+0x1d8>
 800ee22:	2d02      	cmp	r5, #2
 800ee24:	f47f af22 	bne.w	800ec6c <_scanf_float+0x64>
 800ee28:	2503      	movs	r5, #3
 800ee2a:	e7b6      	b.n	800ed9a <_scanf_float+0x192>
 800ee2c:	2d06      	cmp	r5, #6
 800ee2e:	f47f af1d 	bne.w	800ec6c <_scanf_float+0x64>
 800ee32:	2507      	movs	r5, #7
 800ee34:	e7b1      	b.n	800ed9a <_scanf_float+0x192>
 800ee36:	6822      	ldr	r2, [r4, #0]
 800ee38:	0591      	lsls	r1, r2, #22
 800ee3a:	f57f af17 	bpl.w	800ec6c <_scanf_float+0x64>
 800ee3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ee42:	6022      	str	r2, [r4, #0]
 800ee44:	f8cd 9008 	str.w	r9, [sp, #8]
 800ee48:	e7a7      	b.n	800ed9a <_scanf_float+0x192>
 800ee4a:	6822      	ldr	r2, [r4, #0]
 800ee4c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ee50:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ee54:	d006      	beq.n	800ee64 <_scanf_float+0x25c>
 800ee56:	0550      	lsls	r0, r2, #21
 800ee58:	f57f af08 	bpl.w	800ec6c <_scanf_float+0x64>
 800ee5c:	f1b9 0f00 	cmp.w	r9, #0
 800ee60:	f000 80de 	beq.w	800f020 <_scanf_float+0x418>
 800ee64:	0591      	lsls	r1, r2, #22
 800ee66:	bf58      	it	pl
 800ee68:	9902      	ldrpl	r1, [sp, #8]
 800ee6a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ee6e:	bf58      	it	pl
 800ee70:	eba9 0101 	subpl.w	r1, r9, r1
 800ee74:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ee78:	bf58      	it	pl
 800ee7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ee7e:	6022      	str	r2, [r4, #0]
 800ee80:	f04f 0900 	mov.w	r9, #0
 800ee84:	e789      	b.n	800ed9a <_scanf_float+0x192>
 800ee86:	f04f 0a03 	mov.w	sl, #3
 800ee8a:	e786      	b.n	800ed9a <_scanf_float+0x192>
 800ee8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ee90:	4639      	mov	r1, r7
 800ee92:	4640      	mov	r0, r8
 800ee94:	4798      	blx	r3
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f43f aedb 	beq.w	800ec52 <_scanf_float+0x4a>
 800ee9c:	e6e6      	b.n	800ec6c <_scanf_float+0x64>
 800ee9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eea6:	463a      	mov	r2, r7
 800eea8:	4640      	mov	r0, r8
 800eeaa:	4798      	blx	r3
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	6123      	str	r3, [r4, #16]
 800eeb2:	e6e8      	b.n	800ec86 <_scanf_float+0x7e>
 800eeb4:	1e6b      	subs	r3, r5, #1
 800eeb6:	2b06      	cmp	r3, #6
 800eeb8:	d824      	bhi.n	800ef04 <_scanf_float+0x2fc>
 800eeba:	2d02      	cmp	r5, #2
 800eebc:	d836      	bhi.n	800ef2c <_scanf_float+0x324>
 800eebe:	9b01      	ldr	r3, [sp, #4]
 800eec0:	429e      	cmp	r6, r3
 800eec2:	f67f aee4 	bls.w	800ec8e <_scanf_float+0x86>
 800eec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eeca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eece:	463a      	mov	r2, r7
 800eed0:	4640      	mov	r0, r8
 800eed2:	4798      	blx	r3
 800eed4:	6923      	ldr	r3, [r4, #16]
 800eed6:	3b01      	subs	r3, #1
 800eed8:	6123      	str	r3, [r4, #16]
 800eeda:	e7f0      	b.n	800eebe <_scanf_float+0x2b6>
 800eedc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eee0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eee4:	463a      	mov	r2, r7
 800eee6:	4640      	mov	r0, r8
 800eee8:	4798      	blx	r3
 800eeea:	6923      	ldr	r3, [r4, #16]
 800eeec:	3b01      	subs	r3, #1
 800eeee:	6123      	str	r3, [r4, #16]
 800eef0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eef4:	fa5f fa8a 	uxtb.w	sl, sl
 800eef8:	f1ba 0f02 	cmp.w	sl, #2
 800eefc:	d1ee      	bne.n	800eedc <_scanf_float+0x2d4>
 800eefe:	3d03      	subs	r5, #3
 800ef00:	b2ed      	uxtb	r5, r5
 800ef02:	1b76      	subs	r6, r6, r5
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	05da      	lsls	r2, r3, #23
 800ef08:	d530      	bpl.n	800ef6c <_scanf_float+0x364>
 800ef0a:	055b      	lsls	r3, r3, #21
 800ef0c:	d511      	bpl.n	800ef32 <_scanf_float+0x32a>
 800ef0e:	9b01      	ldr	r3, [sp, #4]
 800ef10:	429e      	cmp	r6, r3
 800ef12:	f67f aebc 	bls.w	800ec8e <_scanf_float+0x86>
 800ef16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ef1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef1e:	463a      	mov	r2, r7
 800ef20:	4640      	mov	r0, r8
 800ef22:	4798      	blx	r3
 800ef24:	6923      	ldr	r3, [r4, #16]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	6123      	str	r3, [r4, #16]
 800ef2a:	e7f0      	b.n	800ef0e <_scanf_float+0x306>
 800ef2c:	46aa      	mov	sl, r5
 800ef2e:	46b3      	mov	fp, r6
 800ef30:	e7de      	b.n	800eef0 <_scanf_float+0x2e8>
 800ef32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	2965      	cmp	r1, #101	@ 0x65
 800ef3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ef42:	6123      	str	r3, [r4, #16]
 800ef44:	d00c      	beq.n	800ef60 <_scanf_float+0x358>
 800ef46:	2945      	cmp	r1, #69	@ 0x45
 800ef48:	d00a      	beq.n	800ef60 <_scanf_float+0x358>
 800ef4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ef4e:	463a      	mov	r2, r7
 800ef50:	4640      	mov	r0, r8
 800ef52:	4798      	blx	r3
 800ef54:	6923      	ldr	r3, [r4, #16]
 800ef56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	1eb5      	subs	r5, r6, #2
 800ef5e:	6123      	str	r3, [r4, #16]
 800ef60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ef64:	463a      	mov	r2, r7
 800ef66:	4640      	mov	r0, r8
 800ef68:	4798      	blx	r3
 800ef6a:	462e      	mov	r6, r5
 800ef6c:	6822      	ldr	r2, [r4, #0]
 800ef6e:	f012 0210 	ands.w	r2, r2, #16
 800ef72:	d001      	beq.n	800ef78 <_scanf_float+0x370>
 800ef74:	2000      	movs	r0, #0
 800ef76:	e68b      	b.n	800ec90 <_scanf_float+0x88>
 800ef78:	7032      	strb	r2, [r6, #0]
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ef80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef84:	d11c      	bne.n	800efc0 <_scanf_float+0x3b8>
 800ef86:	9b02      	ldr	r3, [sp, #8]
 800ef88:	454b      	cmp	r3, r9
 800ef8a:	eba3 0209 	sub.w	r2, r3, r9
 800ef8e:	d123      	bne.n	800efd8 <_scanf_float+0x3d0>
 800ef90:	9901      	ldr	r1, [sp, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	4640      	mov	r0, r8
 800ef96:	f7ff f947 	bl	800e228 <_strtod_r>
 800ef9a:	9b03      	ldr	r3, [sp, #12]
 800ef9c:	6821      	ldr	r1, [r4, #0]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f011 0f02 	tst.w	r1, #2
 800efa4:	ec57 6b10 	vmov	r6, r7, d0
 800efa8:	f103 0204 	add.w	r2, r3, #4
 800efac:	d01f      	beq.n	800efee <_scanf_float+0x3e6>
 800efae:	9903      	ldr	r1, [sp, #12]
 800efb0:	600a      	str	r2, [r1, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	e9c3 6700 	strd	r6, r7, [r3]
 800efb8:	68e3      	ldr	r3, [r4, #12]
 800efba:	3301      	adds	r3, #1
 800efbc:	60e3      	str	r3, [r4, #12]
 800efbe:	e7d9      	b.n	800ef74 <_scanf_float+0x36c>
 800efc0:	9b04      	ldr	r3, [sp, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d0e4      	beq.n	800ef90 <_scanf_float+0x388>
 800efc6:	9905      	ldr	r1, [sp, #20]
 800efc8:	230a      	movs	r3, #10
 800efca:	3101      	adds	r1, #1
 800efcc:	4640      	mov	r0, r8
 800efce:	f7ff f9b7 	bl	800e340 <_strtol_r>
 800efd2:	9b04      	ldr	r3, [sp, #16]
 800efd4:	9e05      	ldr	r6, [sp, #20]
 800efd6:	1ac2      	subs	r2, r0, r3
 800efd8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800efdc:	429e      	cmp	r6, r3
 800efde:	bf28      	it	cs
 800efe0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800efe4:	4910      	ldr	r1, [pc, #64]	@ (800f028 <_scanf_float+0x420>)
 800efe6:	4630      	mov	r0, r6
 800efe8:	f000 f8e4 	bl	800f1b4 <siprintf>
 800efec:	e7d0      	b.n	800ef90 <_scanf_float+0x388>
 800efee:	f011 0f04 	tst.w	r1, #4
 800eff2:	9903      	ldr	r1, [sp, #12]
 800eff4:	600a      	str	r2, [r1, #0]
 800eff6:	d1dc      	bne.n	800efb2 <_scanf_float+0x3aa>
 800eff8:	681d      	ldr	r5, [r3, #0]
 800effa:	4632      	mov	r2, r6
 800effc:	463b      	mov	r3, r7
 800effe:	4630      	mov	r0, r6
 800f000:	4639      	mov	r1, r7
 800f002:	f7f1 fd93 	bl	8000b2c <__aeabi_dcmpun>
 800f006:	b128      	cbz	r0, 800f014 <_scanf_float+0x40c>
 800f008:	4808      	ldr	r0, [pc, #32]	@ (800f02c <_scanf_float+0x424>)
 800f00a:	f000 fa3d 	bl	800f488 <nanf>
 800f00e:	ed85 0a00 	vstr	s0, [r5]
 800f012:	e7d1      	b.n	800efb8 <_scanf_float+0x3b0>
 800f014:	4630      	mov	r0, r6
 800f016:	4639      	mov	r1, r7
 800f018:	f7f1 fde6 	bl	8000be8 <__aeabi_d2f>
 800f01c:	6028      	str	r0, [r5, #0]
 800f01e:	e7cb      	b.n	800efb8 <_scanf_float+0x3b0>
 800f020:	f04f 0900 	mov.w	r9, #0
 800f024:	e629      	b.n	800ec7a <_scanf_float+0x72>
 800f026:	bf00      	nop
 800f028:	080140d5 	.word	0x080140d5
 800f02c:	0801418e 	.word	0x0801418e

0800f030 <std>:
 800f030:	2300      	movs	r3, #0
 800f032:	b510      	push	{r4, lr}
 800f034:	4604      	mov	r4, r0
 800f036:	e9c0 3300 	strd	r3, r3, [r0]
 800f03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f03e:	6083      	str	r3, [r0, #8]
 800f040:	8181      	strh	r1, [r0, #12]
 800f042:	6643      	str	r3, [r0, #100]	@ 0x64
 800f044:	81c2      	strh	r2, [r0, #14]
 800f046:	6183      	str	r3, [r0, #24]
 800f048:	4619      	mov	r1, r3
 800f04a:	2208      	movs	r2, #8
 800f04c:	305c      	adds	r0, #92	@ 0x5c
 800f04e:	f000 f914 	bl	800f27a <memset>
 800f052:	4b0d      	ldr	r3, [pc, #52]	@ (800f088 <std+0x58>)
 800f054:	6263      	str	r3, [r4, #36]	@ 0x24
 800f056:	4b0d      	ldr	r3, [pc, #52]	@ (800f08c <std+0x5c>)
 800f058:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f05a:	4b0d      	ldr	r3, [pc, #52]	@ (800f090 <std+0x60>)
 800f05c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f05e:	4b0d      	ldr	r3, [pc, #52]	@ (800f094 <std+0x64>)
 800f060:	6323      	str	r3, [r4, #48]	@ 0x30
 800f062:	4b0d      	ldr	r3, [pc, #52]	@ (800f098 <std+0x68>)
 800f064:	6224      	str	r4, [r4, #32]
 800f066:	429c      	cmp	r4, r3
 800f068:	d006      	beq.n	800f078 <std+0x48>
 800f06a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f06e:	4294      	cmp	r4, r2
 800f070:	d002      	beq.n	800f078 <std+0x48>
 800f072:	33d0      	adds	r3, #208	@ 0xd0
 800f074:	429c      	cmp	r4, r3
 800f076:	d105      	bne.n	800f084 <std+0x54>
 800f078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f080:	f000 b9e6 	b.w	800f450 <__retarget_lock_init_recursive>
 800f084:	bd10      	pop	{r4, pc}
 800f086:	bf00      	nop
 800f088:	0800f1f5 	.word	0x0800f1f5
 800f08c:	0800f217 	.word	0x0800f217
 800f090:	0800f24f 	.word	0x0800f24f
 800f094:	0800f273 	.word	0x0800f273
 800f098:	200006f4 	.word	0x200006f4

0800f09c <stdio_exit_handler>:
 800f09c:	4a02      	ldr	r2, [pc, #8]	@ (800f0a8 <stdio_exit_handler+0xc>)
 800f09e:	4903      	ldr	r1, [pc, #12]	@ (800f0ac <stdio_exit_handler+0x10>)
 800f0a0:	4803      	ldr	r0, [pc, #12]	@ (800f0b0 <stdio_exit_handler+0x14>)
 800f0a2:	f000 b869 	b.w	800f178 <_fwalk_sglue>
 800f0a6:	bf00      	nop
 800f0a8:	200000f0 	.word	0x200000f0
 800f0ac:	08011735 	.word	0x08011735
 800f0b0:	2000026c 	.word	0x2000026c

0800f0b4 <cleanup_stdio>:
 800f0b4:	6841      	ldr	r1, [r0, #4]
 800f0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800f0e8 <cleanup_stdio+0x34>)
 800f0b8:	4299      	cmp	r1, r3
 800f0ba:	b510      	push	{r4, lr}
 800f0bc:	4604      	mov	r4, r0
 800f0be:	d001      	beq.n	800f0c4 <cleanup_stdio+0x10>
 800f0c0:	f002 fb38 	bl	8011734 <_fflush_r>
 800f0c4:	68a1      	ldr	r1, [r4, #8]
 800f0c6:	4b09      	ldr	r3, [pc, #36]	@ (800f0ec <cleanup_stdio+0x38>)
 800f0c8:	4299      	cmp	r1, r3
 800f0ca:	d002      	beq.n	800f0d2 <cleanup_stdio+0x1e>
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f002 fb31 	bl	8011734 <_fflush_r>
 800f0d2:	68e1      	ldr	r1, [r4, #12]
 800f0d4:	4b06      	ldr	r3, [pc, #24]	@ (800f0f0 <cleanup_stdio+0x3c>)
 800f0d6:	4299      	cmp	r1, r3
 800f0d8:	d004      	beq.n	800f0e4 <cleanup_stdio+0x30>
 800f0da:	4620      	mov	r0, r4
 800f0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0e0:	f002 bb28 	b.w	8011734 <_fflush_r>
 800f0e4:	bd10      	pop	{r4, pc}
 800f0e6:	bf00      	nop
 800f0e8:	200006f4 	.word	0x200006f4
 800f0ec:	2000075c 	.word	0x2000075c
 800f0f0:	200007c4 	.word	0x200007c4

0800f0f4 <global_stdio_init.part.0>:
 800f0f4:	b510      	push	{r4, lr}
 800f0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f124 <global_stdio_init.part.0+0x30>)
 800f0f8:	4c0b      	ldr	r4, [pc, #44]	@ (800f128 <global_stdio_init.part.0+0x34>)
 800f0fa:	4a0c      	ldr	r2, [pc, #48]	@ (800f12c <global_stdio_init.part.0+0x38>)
 800f0fc:	601a      	str	r2, [r3, #0]
 800f0fe:	4620      	mov	r0, r4
 800f100:	2200      	movs	r2, #0
 800f102:	2104      	movs	r1, #4
 800f104:	f7ff ff94 	bl	800f030 <std>
 800f108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f10c:	2201      	movs	r2, #1
 800f10e:	2109      	movs	r1, #9
 800f110:	f7ff ff8e 	bl	800f030 <std>
 800f114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f118:	2202      	movs	r2, #2
 800f11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f11e:	2112      	movs	r1, #18
 800f120:	f7ff bf86 	b.w	800f030 <std>
 800f124:	2000082c 	.word	0x2000082c
 800f128:	200006f4 	.word	0x200006f4
 800f12c:	0800f09d 	.word	0x0800f09d

0800f130 <__sfp_lock_acquire>:
 800f130:	4801      	ldr	r0, [pc, #4]	@ (800f138 <__sfp_lock_acquire+0x8>)
 800f132:	f000 b98e 	b.w	800f452 <__retarget_lock_acquire_recursive>
 800f136:	bf00      	nop
 800f138:	20000835 	.word	0x20000835

0800f13c <__sfp_lock_release>:
 800f13c:	4801      	ldr	r0, [pc, #4]	@ (800f144 <__sfp_lock_release+0x8>)
 800f13e:	f000 b989 	b.w	800f454 <__retarget_lock_release_recursive>
 800f142:	bf00      	nop
 800f144:	20000835 	.word	0x20000835

0800f148 <__sinit>:
 800f148:	b510      	push	{r4, lr}
 800f14a:	4604      	mov	r4, r0
 800f14c:	f7ff fff0 	bl	800f130 <__sfp_lock_acquire>
 800f150:	6a23      	ldr	r3, [r4, #32]
 800f152:	b11b      	cbz	r3, 800f15c <__sinit+0x14>
 800f154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f158:	f7ff bff0 	b.w	800f13c <__sfp_lock_release>
 800f15c:	4b04      	ldr	r3, [pc, #16]	@ (800f170 <__sinit+0x28>)
 800f15e:	6223      	str	r3, [r4, #32]
 800f160:	4b04      	ldr	r3, [pc, #16]	@ (800f174 <__sinit+0x2c>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1f5      	bne.n	800f154 <__sinit+0xc>
 800f168:	f7ff ffc4 	bl	800f0f4 <global_stdio_init.part.0>
 800f16c:	e7f2      	b.n	800f154 <__sinit+0xc>
 800f16e:	bf00      	nop
 800f170:	0800f0b5 	.word	0x0800f0b5
 800f174:	2000082c 	.word	0x2000082c

0800f178 <_fwalk_sglue>:
 800f178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f17c:	4607      	mov	r7, r0
 800f17e:	4688      	mov	r8, r1
 800f180:	4614      	mov	r4, r2
 800f182:	2600      	movs	r6, #0
 800f184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f188:	f1b9 0901 	subs.w	r9, r9, #1
 800f18c:	d505      	bpl.n	800f19a <_fwalk_sglue+0x22>
 800f18e:	6824      	ldr	r4, [r4, #0]
 800f190:	2c00      	cmp	r4, #0
 800f192:	d1f7      	bne.n	800f184 <_fwalk_sglue+0xc>
 800f194:	4630      	mov	r0, r6
 800f196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19a:	89ab      	ldrh	r3, [r5, #12]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d907      	bls.n	800f1b0 <_fwalk_sglue+0x38>
 800f1a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	d003      	beq.n	800f1b0 <_fwalk_sglue+0x38>
 800f1a8:	4629      	mov	r1, r5
 800f1aa:	4638      	mov	r0, r7
 800f1ac:	47c0      	blx	r8
 800f1ae:	4306      	orrs	r6, r0
 800f1b0:	3568      	adds	r5, #104	@ 0x68
 800f1b2:	e7e9      	b.n	800f188 <_fwalk_sglue+0x10>

0800f1b4 <siprintf>:
 800f1b4:	b40e      	push	{r1, r2, r3}
 800f1b6:	b500      	push	{lr}
 800f1b8:	b09c      	sub	sp, #112	@ 0x70
 800f1ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800f1bc:	9002      	str	r0, [sp, #8]
 800f1be:	9006      	str	r0, [sp, #24]
 800f1c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f1c4:	4809      	ldr	r0, [pc, #36]	@ (800f1ec <siprintf+0x38>)
 800f1c6:	9107      	str	r1, [sp, #28]
 800f1c8:	9104      	str	r1, [sp, #16]
 800f1ca:	4909      	ldr	r1, [pc, #36]	@ (800f1f0 <siprintf+0x3c>)
 800f1cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1d0:	9105      	str	r1, [sp, #20]
 800f1d2:	6800      	ldr	r0, [r0, #0]
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	a902      	add	r1, sp, #8
 800f1d8:	f002 f92c 	bl	8011434 <_svfiprintf_r>
 800f1dc:	9b02      	ldr	r3, [sp, #8]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	701a      	strb	r2, [r3, #0]
 800f1e2:	b01c      	add	sp, #112	@ 0x70
 800f1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1e8:	b003      	add	sp, #12
 800f1ea:	4770      	bx	lr
 800f1ec:	20000268 	.word	0x20000268
 800f1f0:	ffff0208 	.word	0xffff0208

0800f1f4 <__sread>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1fc:	f000 f8da 	bl	800f3b4 <_read_r>
 800f200:	2800      	cmp	r0, #0
 800f202:	bfab      	itete	ge
 800f204:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f206:	89a3      	ldrhlt	r3, [r4, #12]
 800f208:	181b      	addge	r3, r3, r0
 800f20a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f20e:	bfac      	ite	ge
 800f210:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f212:	81a3      	strhlt	r3, [r4, #12]
 800f214:	bd10      	pop	{r4, pc}

0800f216 <__swrite>:
 800f216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f21a:	461f      	mov	r7, r3
 800f21c:	898b      	ldrh	r3, [r1, #12]
 800f21e:	05db      	lsls	r3, r3, #23
 800f220:	4605      	mov	r5, r0
 800f222:	460c      	mov	r4, r1
 800f224:	4616      	mov	r6, r2
 800f226:	d505      	bpl.n	800f234 <__swrite+0x1e>
 800f228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22c:	2302      	movs	r3, #2
 800f22e:	2200      	movs	r2, #0
 800f230:	f000 f8ae 	bl	800f390 <_lseek_r>
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f23a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f23e:	81a3      	strh	r3, [r4, #12]
 800f240:	4632      	mov	r2, r6
 800f242:	463b      	mov	r3, r7
 800f244:	4628      	mov	r0, r5
 800f246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f24a:	f000 b8c5 	b.w	800f3d8 <_write_r>

0800f24e <__sseek>:
 800f24e:	b510      	push	{r4, lr}
 800f250:	460c      	mov	r4, r1
 800f252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f256:	f000 f89b 	bl	800f390 <_lseek_r>
 800f25a:	1c43      	adds	r3, r0, #1
 800f25c:	89a3      	ldrh	r3, [r4, #12]
 800f25e:	bf15      	itete	ne
 800f260:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f262:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f266:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f26a:	81a3      	strheq	r3, [r4, #12]
 800f26c:	bf18      	it	ne
 800f26e:	81a3      	strhne	r3, [r4, #12]
 800f270:	bd10      	pop	{r4, pc}

0800f272 <__sclose>:
 800f272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f276:	f000 b87b 	b.w	800f370 <_close_r>

0800f27a <memset>:
 800f27a:	4402      	add	r2, r0
 800f27c:	4603      	mov	r3, r0
 800f27e:	4293      	cmp	r3, r2
 800f280:	d100      	bne.n	800f284 <memset+0xa>
 800f282:	4770      	bx	lr
 800f284:	f803 1b01 	strb.w	r1, [r3], #1
 800f288:	e7f9      	b.n	800f27e <memset+0x4>

0800f28a <strncmp>:
 800f28a:	b510      	push	{r4, lr}
 800f28c:	b16a      	cbz	r2, 800f2aa <strncmp+0x20>
 800f28e:	3901      	subs	r1, #1
 800f290:	1884      	adds	r4, r0, r2
 800f292:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f296:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d103      	bne.n	800f2a6 <strncmp+0x1c>
 800f29e:	42a0      	cmp	r0, r4
 800f2a0:	d001      	beq.n	800f2a6 <strncmp+0x1c>
 800f2a2:	2a00      	cmp	r2, #0
 800f2a4:	d1f5      	bne.n	800f292 <strncmp+0x8>
 800f2a6:	1ad0      	subs	r0, r2, r3
 800f2a8:	bd10      	pop	{r4, pc}
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	e7fc      	b.n	800f2a8 <strncmp+0x1e>
	...

0800f2b0 <strtok>:
 800f2b0:	4b16      	ldr	r3, [pc, #88]	@ (800f30c <strtok+0x5c>)
 800f2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b6:	681f      	ldr	r7, [r3, #0]
 800f2b8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	460e      	mov	r6, r1
 800f2be:	b9ec      	cbnz	r4, 800f2fc <strtok+0x4c>
 800f2c0:	2050      	movs	r0, #80	@ 0x50
 800f2c2:	f001 fad5 	bl	8010870 <malloc>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	6478      	str	r0, [r7, #68]	@ 0x44
 800f2ca:	b920      	cbnz	r0, 800f2d6 <strtok+0x26>
 800f2cc:	4b10      	ldr	r3, [pc, #64]	@ (800f310 <strtok+0x60>)
 800f2ce:	4811      	ldr	r0, [pc, #68]	@ (800f314 <strtok+0x64>)
 800f2d0:	215b      	movs	r1, #91	@ 0x5b
 800f2d2:	f000 f8df 	bl	800f494 <__assert_func>
 800f2d6:	e9c0 4400 	strd	r4, r4, [r0]
 800f2da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f2de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f2e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f2e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f2ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f2ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f2f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f2f6:	6184      	str	r4, [r0, #24]
 800f2f8:	7704      	strb	r4, [r0, #28]
 800f2fa:	6244      	str	r4, [r0, #36]	@ 0x24
 800f2fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2fe:	4631      	mov	r1, r6
 800f300:	4628      	mov	r0, r5
 800f302:	2301      	movs	r3, #1
 800f304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f308:	f000 b806 	b.w	800f318 <__strtok_r>
 800f30c:	20000268 	.word	0x20000268
 800f310:	080140da 	.word	0x080140da
 800f314:	080140f1 	.word	0x080140f1

0800f318 <__strtok_r>:
 800f318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f31a:	4604      	mov	r4, r0
 800f31c:	b908      	cbnz	r0, 800f322 <__strtok_r+0xa>
 800f31e:	6814      	ldr	r4, [r2, #0]
 800f320:	b144      	cbz	r4, 800f334 <__strtok_r+0x1c>
 800f322:	4620      	mov	r0, r4
 800f324:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f328:	460f      	mov	r7, r1
 800f32a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f32e:	b91e      	cbnz	r6, 800f338 <__strtok_r+0x20>
 800f330:	b965      	cbnz	r5, 800f34c <__strtok_r+0x34>
 800f332:	6015      	str	r5, [r2, #0]
 800f334:	2000      	movs	r0, #0
 800f336:	e005      	b.n	800f344 <__strtok_r+0x2c>
 800f338:	42b5      	cmp	r5, r6
 800f33a:	d1f6      	bne.n	800f32a <__strtok_r+0x12>
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1f0      	bne.n	800f322 <__strtok_r+0xa>
 800f340:	6014      	str	r4, [r2, #0]
 800f342:	7003      	strb	r3, [r0, #0]
 800f344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f346:	461c      	mov	r4, r3
 800f348:	e00c      	b.n	800f364 <__strtok_r+0x4c>
 800f34a:	b915      	cbnz	r5, 800f352 <__strtok_r+0x3a>
 800f34c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f350:	460e      	mov	r6, r1
 800f352:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f356:	42ab      	cmp	r3, r5
 800f358:	d1f7      	bne.n	800f34a <__strtok_r+0x32>
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d0f3      	beq.n	800f346 <__strtok_r+0x2e>
 800f35e:	2300      	movs	r3, #0
 800f360:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f364:	6014      	str	r4, [r2, #0]
 800f366:	e7ed      	b.n	800f344 <__strtok_r+0x2c>

0800f368 <_localeconv_r>:
 800f368:	4800      	ldr	r0, [pc, #0]	@ (800f36c <_localeconv_r+0x4>)
 800f36a:	4770      	bx	lr
 800f36c:	200001ec 	.word	0x200001ec

0800f370 <_close_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4d06      	ldr	r5, [pc, #24]	@ (800f38c <_close_r+0x1c>)
 800f374:	2300      	movs	r3, #0
 800f376:	4604      	mov	r4, r0
 800f378:	4608      	mov	r0, r1
 800f37a:	602b      	str	r3, [r5, #0]
 800f37c:	f7fa fb70 	bl	8009a60 <_close>
 800f380:	1c43      	adds	r3, r0, #1
 800f382:	d102      	bne.n	800f38a <_close_r+0x1a>
 800f384:	682b      	ldr	r3, [r5, #0]
 800f386:	b103      	cbz	r3, 800f38a <_close_r+0x1a>
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	20000830 	.word	0x20000830

0800f390 <_lseek_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4d07      	ldr	r5, [pc, #28]	@ (800f3b0 <_lseek_r+0x20>)
 800f394:	4604      	mov	r4, r0
 800f396:	4608      	mov	r0, r1
 800f398:	4611      	mov	r1, r2
 800f39a:	2200      	movs	r2, #0
 800f39c:	602a      	str	r2, [r5, #0]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f7fa fb85 	bl	8009aae <_lseek>
 800f3a4:	1c43      	adds	r3, r0, #1
 800f3a6:	d102      	bne.n	800f3ae <_lseek_r+0x1e>
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	b103      	cbz	r3, 800f3ae <_lseek_r+0x1e>
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	bd38      	pop	{r3, r4, r5, pc}
 800f3b0:	20000830 	.word	0x20000830

0800f3b4 <_read_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4d07      	ldr	r5, [pc, #28]	@ (800f3d4 <_read_r+0x20>)
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	4608      	mov	r0, r1
 800f3bc:	4611      	mov	r1, r2
 800f3be:	2200      	movs	r2, #0
 800f3c0:	602a      	str	r2, [r5, #0]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	f7fa fb13 	bl	80099ee <_read>
 800f3c8:	1c43      	adds	r3, r0, #1
 800f3ca:	d102      	bne.n	800f3d2 <_read_r+0x1e>
 800f3cc:	682b      	ldr	r3, [r5, #0]
 800f3ce:	b103      	cbz	r3, 800f3d2 <_read_r+0x1e>
 800f3d0:	6023      	str	r3, [r4, #0]
 800f3d2:	bd38      	pop	{r3, r4, r5, pc}
 800f3d4:	20000830 	.word	0x20000830

0800f3d8 <_write_r>:
 800f3d8:	b538      	push	{r3, r4, r5, lr}
 800f3da:	4d07      	ldr	r5, [pc, #28]	@ (800f3f8 <_write_r+0x20>)
 800f3dc:	4604      	mov	r4, r0
 800f3de:	4608      	mov	r0, r1
 800f3e0:	4611      	mov	r1, r2
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	602a      	str	r2, [r5, #0]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	f7fa fb1e 	bl	8009a28 <_write>
 800f3ec:	1c43      	adds	r3, r0, #1
 800f3ee:	d102      	bne.n	800f3f6 <_write_r+0x1e>
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	b103      	cbz	r3, 800f3f6 <_write_r+0x1e>
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	bd38      	pop	{r3, r4, r5, pc}
 800f3f8:	20000830 	.word	0x20000830

0800f3fc <__errno>:
 800f3fc:	4b01      	ldr	r3, [pc, #4]	@ (800f404 <__errno+0x8>)
 800f3fe:	6818      	ldr	r0, [r3, #0]
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	20000268 	.word	0x20000268

0800f408 <__libc_init_array>:
 800f408:	b570      	push	{r4, r5, r6, lr}
 800f40a:	4d0d      	ldr	r5, [pc, #52]	@ (800f440 <__libc_init_array+0x38>)
 800f40c:	4c0d      	ldr	r4, [pc, #52]	@ (800f444 <__libc_init_array+0x3c>)
 800f40e:	1b64      	subs	r4, r4, r5
 800f410:	10a4      	asrs	r4, r4, #2
 800f412:	2600      	movs	r6, #0
 800f414:	42a6      	cmp	r6, r4
 800f416:	d109      	bne.n	800f42c <__libc_init_array+0x24>
 800f418:	4d0b      	ldr	r5, [pc, #44]	@ (800f448 <__libc_init_array+0x40>)
 800f41a:	4c0c      	ldr	r4, [pc, #48]	@ (800f44c <__libc_init_array+0x44>)
 800f41c:	f004 fca8 	bl	8013d70 <_init>
 800f420:	1b64      	subs	r4, r4, r5
 800f422:	10a4      	asrs	r4, r4, #2
 800f424:	2600      	movs	r6, #0
 800f426:	42a6      	cmp	r6, r4
 800f428:	d105      	bne.n	800f436 <__libc_init_array+0x2e>
 800f42a:	bd70      	pop	{r4, r5, r6, pc}
 800f42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f430:	4798      	blx	r3
 800f432:	3601      	adds	r6, #1
 800f434:	e7ee      	b.n	800f414 <__libc_init_array+0xc>
 800f436:	f855 3b04 	ldr.w	r3, [r5], #4
 800f43a:	4798      	blx	r3
 800f43c:	3601      	adds	r6, #1
 800f43e:	e7f2      	b.n	800f426 <__libc_init_array+0x1e>
 800f440:	08014628 	.word	0x08014628
 800f444:	08014628 	.word	0x08014628
 800f448:	08014628 	.word	0x08014628
 800f44c:	0801462c 	.word	0x0801462c

0800f450 <__retarget_lock_init_recursive>:
 800f450:	4770      	bx	lr

0800f452 <__retarget_lock_acquire_recursive>:
 800f452:	4770      	bx	lr

0800f454 <__retarget_lock_release_recursive>:
 800f454:	4770      	bx	lr

0800f456 <memcpy>:
 800f456:	440a      	add	r2, r1
 800f458:	4291      	cmp	r1, r2
 800f45a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f45e:	d100      	bne.n	800f462 <memcpy+0xc>
 800f460:	4770      	bx	lr
 800f462:	b510      	push	{r4, lr}
 800f464:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f46c:	4291      	cmp	r1, r2
 800f46e:	d1f9      	bne.n	800f464 <memcpy+0xe>
 800f470:	bd10      	pop	{r4, pc}
 800f472:	0000      	movs	r0, r0
 800f474:	0000      	movs	r0, r0
	...

0800f478 <nan>:
 800f478:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f480 <nan+0x8>
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	00000000 	.word	0x00000000
 800f484:	7ff80000 	.word	0x7ff80000

0800f488 <nanf>:
 800f488:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f490 <nanf+0x8>
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop
 800f490:	7fc00000 	.word	0x7fc00000

0800f494 <__assert_func>:
 800f494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f496:	4614      	mov	r4, r2
 800f498:	461a      	mov	r2, r3
 800f49a:	4b09      	ldr	r3, [pc, #36]	@ (800f4c0 <__assert_func+0x2c>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4605      	mov	r5, r0
 800f4a0:	68d8      	ldr	r0, [r3, #12]
 800f4a2:	b954      	cbnz	r4, 800f4ba <__assert_func+0x26>
 800f4a4:	4b07      	ldr	r3, [pc, #28]	@ (800f4c4 <__assert_func+0x30>)
 800f4a6:	461c      	mov	r4, r3
 800f4a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4ac:	9100      	str	r1, [sp, #0]
 800f4ae:	462b      	mov	r3, r5
 800f4b0:	4905      	ldr	r1, [pc, #20]	@ (800f4c8 <__assert_func+0x34>)
 800f4b2:	f002 f967 	bl	8011784 <fiprintf>
 800f4b6:	f002 f9a1 	bl	80117fc <abort>
 800f4ba:	4b04      	ldr	r3, [pc, #16]	@ (800f4cc <__assert_func+0x38>)
 800f4bc:	e7f4      	b.n	800f4a8 <__assert_func+0x14>
 800f4be:	bf00      	nop
 800f4c0:	20000268 	.word	0x20000268
 800f4c4:	0801418e 	.word	0x0801418e
 800f4c8:	08014160 	.word	0x08014160
 800f4cc:	08014153 	.word	0x08014153

0800f4d0 <quorem>:
 800f4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d4:	6903      	ldr	r3, [r0, #16]
 800f4d6:	690c      	ldr	r4, [r1, #16]
 800f4d8:	42a3      	cmp	r3, r4
 800f4da:	4607      	mov	r7, r0
 800f4dc:	db7e      	blt.n	800f5dc <quorem+0x10c>
 800f4de:	3c01      	subs	r4, #1
 800f4e0:	f101 0814 	add.w	r8, r1, #20
 800f4e4:	00a3      	lsls	r3, r4, #2
 800f4e6:	f100 0514 	add.w	r5, r0, #20
 800f4ea:	9300      	str	r3, [sp, #0]
 800f4ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4f0:	9301      	str	r3, [sp, #4]
 800f4f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f502:	fbb2 f6f3 	udiv	r6, r2, r3
 800f506:	d32e      	bcc.n	800f566 <quorem+0x96>
 800f508:	f04f 0a00 	mov.w	sl, #0
 800f50c:	46c4      	mov	ip, r8
 800f50e:	46ae      	mov	lr, r5
 800f510:	46d3      	mov	fp, sl
 800f512:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f516:	b298      	uxth	r0, r3
 800f518:	fb06 a000 	mla	r0, r6, r0, sl
 800f51c:	0c02      	lsrs	r2, r0, #16
 800f51e:	0c1b      	lsrs	r3, r3, #16
 800f520:	fb06 2303 	mla	r3, r6, r3, r2
 800f524:	f8de 2000 	ldr.w	r2, [lr]
 800f528:	b280      	uxth	r0, r0
 800f52a:	b292      	uxth	r2, r2
 800f52c:	1a12      	subs	r2, r2, r0
 800f52e:	445a      	add	r2, fp
 800f530:	f8de 0000 	ldr.w	r0, [lr]
 800f534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f538:	b29b      	uxth	r3, r3
 800f53a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f53e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f542:	b292      	uxth	r2, r2
 800f544:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f548:	45e1      	cmp	r9, ip
 800f54a:	f84e 2b04 	str.w	r2, [lr], #4
 800f54e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f552:	d2de      	bcs.n	800f512 <quorem+0x42>
 800f554:	9b00      	ldr	r3, [sp, #0]
 800f556:	58eb      	ldr	r3, [r5, r3]
 800f558:	b92b      	cbnz	r3, 800f566 <quorem+0x96>
 800f55a:	9b01      	ldr	r3, [sp, #4]
 800f55c:	3b04      	subs	r3, #4
 800f55e:	429d      	cmp	r5, r3
 800f560:	461a      	mov	r2, r3
 800f562:	d32f      	bcc.n	800f5c4 <quorem+0xf4>
 800f564:	613c      	str	r4, [r7, #16]
 800f566:	4638      	mov	r0, r7
 800f568:	f001 fd0e 	bl	8010f88 <__mcmp>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	db25      	blt.n	800f5bc <quorem+0xec>
 800f570:	4629      	mov	r1, r5
 800f572:	2000      	movs	r0, #0
 800f574:	f858 2b04 	ldr.w	r2, [r8], #4
 800f578:	f8d1 c000 	ldr.w	ip, [r1]
 800f57c:	fa1f fe82 	uxth.w	lr, r2
 800f580:	fa1f f38c 	uxth.w	r3, ip
 800f584:	eba3 030e 	sub.w	r3, r3, lr
 800f588:	4403      	add	r3, r0
 800f58a:	0c12      	lsrs	r2, r2, #16
 800f58c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f590:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f594:	b29b      	uxth	r3, r3
 800f596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f59a:	45c1      	cmp	r9, r8
 800f59c:	f841 3b04 	str.w	r3, [r1], #4
 800f5a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f5a4:	d2e6      	bcs.n	800f574 <quorem+0xa4>
 800f5a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5ae:	b922      	cbnz	r2, 800f5ba <quorem+0xea>
 800f5b0:	3b04      	subs	r3, #4
 800f5b2:	429d      	cmp	r5, r3
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	d30b      	bcc.n	800f5d0 <quorem+0x100>
 800f5b8:	613c      	str	r4, [r7, #16]
 800f5ba:	3601      	adds	r6, #1
 800f5bc:	4630      	mov	r0, r6
 800f5be:	b003      	add	sp, #12
 800f5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c4:	6812      	ldr	r2, [r2, #0]
 800f5c6:	3b04      	subs	r3, #4
 800f5c8:	2a00      	cmp	r2, #0
 800f5ca:	d1cb      	bne.n	800f564 <quorem+0x94>
 800f5cc:	3c01      	subs	r4, #1
 800f5ce:	e7c6      	b.n	800f55e <quorem+0x8e>
 800f5d0:	6812      	ldr	r2, [r2, #0]
 800f5d2:	3b04      	subs	r3, #4
 800f5d4:	2a00      	cmp	r2, #0
 800f5d6:	d1ef      	bne.n	800f5b8 <quorem+0xe8>
 800f5d8:	3c01      	subs	r4, #1
 800f5da:	e7ea      	b.n	800f5b2 <quorem+0xe2>
 800f5dc:	2000      	movs	r0, #0
 800f5de:	e7ee      	b.n	800f5be <quorem+0xee>

0800f5e0 <_dtoa_r>:
 800f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e4:	69c7      	ldr	r7, [r0, #28]
 800f5e6:	b099      	sub	sp, #100	@ 0x64
 800f5e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f5ec:	ec55 4b10 	vmov	r4, r5, d0
 800f5f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f5f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5f4:	4683      	mov	fp, r0
 800f5f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5fa:	b97f      	cbnz	r7, 800f61c <_dtoa_r+0x3c>
 800f5fc:	2010      	movs	r0, #16
 800f5fe:	f001 f937 	bl	8010870 <malloc>
 800f602:	4602      	mov	r2, r0
 800f604:	f8cb 001c 	str.w	r0, [fp, #28]
 800f608:	b920      	cbnz	r0, 800f614 <_dtoa_r+0x34>
 800f60a:	4ba7      	ldr	r3, [pc, #668]	@ (800f8a8 <_dtoa_r+0x2c8>)
 800f60c:	21ef      	movs	r1, #239	@ 0xef
 800f60e:	48a7      	ldr	r0, [pc, #668]	@ (800f8ac <_dtoa_r+0x2cc>)
 800f610:	f7ff ff40 	bl	800f494 <__assert_func>
 800f614:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f618:	6007      	str	r7, [r0, #0]
 800f61a:	60c7      	str	r7, [r0, #12]
 800f61c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f620:	6819      	ldr	r1, [r3, #0]
 800f622:	b159      	cbz	r1, 800f63c <_dtoa_r+0x5c>
 800f624:	685a      	ldr	r2, [r3, #4]
 800f626:	604a      	str	r2, [r1, #4]
 800f628:	2301      	movs	r3, #1
 800f62a:	4093      	lsls	r3, r2
 800f62c:	608b      	str	r3, [r1, #8]
 800f62e:	4658      	mov	r0, fp
 800f630:	f001 fa26 	bl	8010a80 <_Bfree>
 800f634:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f638:	2200      	movs	r2, #0
 800f63a:	601a      	str	r2, [r3, #0]
 800f63c:	1e2b      	subs	r3, r5, #0
 800f63e:	bfb9      	ittee	lt
 800f640:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f644:	9303      	strlt	r3, [sp, #12]
 800f646:	2300      	movge	r3, #0
 800f648:	6033      	strge	r3, [r6, #0]
 800f64a:	9f03      	ldr	r7, [sp, #12]
 800f64c:	4b98      	ldr	r3, [pc, #608]	@ (800f8b0 <_dtoa_r+0x2d0>)
 800f64e:	bfbc      	itt	lt
 800f650:	2201      	movlt	r2, #1
 800f652:	6032      	strlt	r2, [r6, #0]
 800f654:	43bb      	bics	r3, r7
 800f656:	d112      	bne.n	800f67e <_dtoa_r+0x9e>
 800f658:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f65a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f65e:	6013      	str	r3, [r2, #0]
 800f660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f664:	4323      	orrs	r3, r4
 800f666:	f000 854d 	beq.w	8010104 <_dtoa_r+0xb24>
 800f66a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f66c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f8c4 <_dtoa_r+0x2e4>
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 854f 	beq.w	8010114 <_dtoa_r+0xb34>
 800f676:	f10a 0303 	add.w	r3, sl, #3
 800f67a:	f000 bd49 	b.w	8010110 <_dtoa_r+0xb30>
 800f67e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f682:	2200      	movs	r2, #0
 800f684:	ec51 0b17 	vmov	r0, r1, d7
 800f688:	2300      	movs	r3, #0
 800f68a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f68e:	f7f1 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f692:	4680      	mov	r8, r0
 800f694:	b158      	cbz	r0, 800f6ae <_dtoa_r+0xce>
 800f696:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f698:	2301      	movs	r3, #1
 800f69a:	6013      	str	r3, [r2, #0]
 800f69c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f69e:	b113      	cbz	r3, 800f6a6 <_dtoa_r+0xc6>
 800f6a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f6a2:	4b84      	ldr	r3, [pc, #528]	@ (800f8b4 <_dtoa_r+0x2d4>)
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f8c8 <_dtoa_r+0x2e8>
 800f6aa:	f000 bd33 	b.w	8010114 <_dtoa_r+0xb34>
 800f6ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f6b2:	aa16      	add	r2, sp, #88	@ 0x58
 800f6b4:	a917      	add	r1, sp, #92	@ 0x5c
 800f6b6:	4658      	mov	r0, fp
 800f6b8:	f001 fd86 	bl	80111c8 <__d2b>
 800f6bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f6c0:	4681      	mov	r9, r0
 800f6c2:	2e00      	cmp	r6, #0
 800f6c4:	d077      	beq.n	800f7b6 <_dtoa_r+0x1d6>
 800f6c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f6cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f6d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f6dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	4b74      	ldr	r3, [pc, #464]	@ (800f8b8 <_dtoa_r+0x2d8>)
 800f6e6:	f7f0 fdcf 	bl	8000288 <__aeabi_dsub>
 800f6ea:	a369      	add	r3, pc, #420	@ (adr r3, 800f890 <_dtoa_r+0x2b0>)
 800f6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f0:	f7f0 ff82 	bl	80005f8 <__aeabi_dmul>
 800f6f4:	a368      	add	r3, pc, #416	@ (adr r3, 800f898 <_dtoa_r+0x2b8>)
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	f7f0 fdc7 	bl	800028c <__adddf3>
 800f6fe:	4604      	mov	r4, r0
 800f700:	4630      	mov	r0, r6
 800f702:	460d      	mov	r5, r1
 800f704:	f7f0 ff0e 	bl	8000524 <__aeabi_i2d>
 800f708:	a365      	add	r3, pc, #404	@ (adr r3, 800f8a0 <_dtoa_r+0x2c0>)
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	f7f0 ff73 	bl	80005f8 <__aeabi_dmul>
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	4620      	mov	r0, r4
 800f718:	4629      	mov	r1, r5
 800f71a:	f7f0 fdb7 	bl	800028c <__adddf3>
 800f71e:	4604      	mov	r4, r0
 800f720:	460d      	mov	r5, r1
 800f722:	f7f1 fa19 	bl	8000b58 <__aeabi_d2iz>
 800f726:	2200      	movs	r2, #0
 800f728:	4607      	mov	r7, r0
 800f72a:	2300      	movs	r3, #0
 800f72c:	4620      	mov	r0, r4
 800f72e:	4629      	mov	r1, r5
 800f730:	f7f1 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800f734:	b140      	cbz	r0, 800f748 <_dtoa_r+0x168>
 800f736:	4638      	mov	r0, r7
 800f738:	f7f0 fef4 	bl	8000524 <__aeabi_i2d>
 800f73c:	4622      	mov	r2, r4
 800f73e:	462b      	mov	r3, r5
 800f740:	f7f1 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800f744:	b900      	cbnz	r0, 800f748 <_dtoa_r+0x168>
 800f746:	3f01      	subs	r7, #1
 800f748:	2f16      	cmp	r7, #22
 800f74a:	d851      	bhi.n	800f7f0 <_dtoa_r+0x210>
 800f74c:	4b5b      	ldr	r3, [pc, #364]	@ (800f8bc <_dtoa_r+0x2dc>)
 800f74e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f75a:	f7f1 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d048      	beq.n	800f7f4 <_dtoa_r+0x214>
 800f762:	3f01      	subs	r7, #1
 800f764:	2300      	movs	r3, #0
 800f766:	9312      	str	r3, [sp, #72]	@ 0x48
 800f768:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f76a:	1b9b      	subs	r3, r3, r6
 800f76c:	1e5a      	subs	r2, r3, #1
 800f76e:	bf44      	itt	mi
 800f770:	f1c3 0801 	rsbmi	r8, r3, #1
 800f774:	2300      	movmi	r3, #0
 800f776:	9208      	str	r2, [sp, #32]
 800f778:	bf54      	ite	pl
 800f77a:	f04f 0800 	movpl.w	r8, #0
 800f77e:	9308      	strmi	r3, [sp, #32]
 800f780:	2f00      	cmp	r7, #0
 800f782:	db39      	blt.n	800f7f8 <_dtoa_r+0x218>
 800f784:	9b08      	ldr	r3, [sp, #32]
 800f786:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f788:	443b      	add	r3, r7
 800f78a:	9308      	str	r3, [sp, #32]
 800f78c:	2300      	movs	r3, #0
 800f78e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f792:	2b09      	cmp	r3, #9
 800f794:	d864      	bhi.n	800f860 <_dtoa_r+0x280>
 800f796:	2b05      	cmp	r3, #5
 800f798:	bfc4      	itt	gt
 800f79a:	3b04      	subgt	r3, #4
 800f79c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7a0:	f1a3 0302 	sub.w	r3, r3, #2
 800f7a4:	bfcc      	ite	gt
 800f7a6:	2400      	movgt	r4, #0
 800f7a8:	2401      	movle	r4, #1
 800f7aa:	2b03      	cmp	r3, #3
 800f7ac:	d863      	bhi.n	800f876 <_dtoa_r+0x296>
 800f7ae:	e8df f003 	tbb	[pc, r3]
 800f7b2:	372a      	.short	0x372a
 800f7b4:	5535      	.short	0x5535
 800f7b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f7ba:	441e      	add	r6, r3
 800f7bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f7c0:	2b20      	cmp	r3, #32
 800f7c2:	bfc1      	itttt	gt
 800f7c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f7c8:	409f      	lslgt	r7, r3
 800f7ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f7ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f7d2:	bfd6      	itet	le
 800f7d4:	f1c3 0320 	rsble	r3, r3, #32
 800f7d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800f7dc:	fa04 f003 	lslle.w	r0, r4, r3
 800f7e0:	f7f0 fe90 	bl	8000504 <__aeabi_ui2d>
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f7ea:	3e01      	subs	r6, #1
 800f7ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800f7ee:	e777      	b.n	800f6e0 <_dtoa_r+0x100>
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	e7b8      	b.n	800f766 <_dtoa_r+0x186>
 800f7f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f7f6:	e7b7      	b.n	800f768 <_dtoa_r+0x188>
 800f7f8:	427b      	negs	r3, r7
 800f7fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	eba8 0807 	sub.w	r8, r8, r7
 800f802:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f804:	e7c4      	b.n	800f790 <_dtoa_r+0x1b0>
 800f806:	2300      	movs	r3, #0
 800f808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f80a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	dc35      	bgt.n	800f87c <_dtoa_r+0x29c>
 800f810:	2301      	movs	r3, #1
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	9307      	str	r3, [sp, #28]
 800f816:	461a      	mov	r2, r3
 800f818:	920e      	str	r2, [sp, #56]	@ 0x38
 800f81a:	e00b      	b.n	800f834 <_dtoa_r+0x254>
 800f81c:	2301      	movs	r3, #1
 800f81e:	e7f3      	b.n	800f808 <_dtoa_r+0x228>
 800f820:	2300      	movs	r3, #0
 800f822:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f826:	18fb      	adds	r3, r7, r3
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	3301      	adds	r3, #1
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	9307      	str	r3, [sp, #28]
 800f830:	bfb8      	it	lt
 800f832:	2301      	movlt	r3, #1
 800f834:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f838:	2100      	movs	r1, #0
 800f83a:	2204      	movs	r2, #4
 800f83c:	f102 0514 	add.w	r5, r2, #20
 800f840:	429d      	cmp	r5, r3
 800f842:	d91f      	bls.n	800f884 <_dtoa_r+0x2a4>
 800f844:	6041      	str	r1, [r0, #4]
 800f846:	4658      	mov	r0, fp
 800f848:	f001 f8da 	bl	8010a00 <_Balloc>
 800f84c:	4682      	mov	sl, r0
 800f84e:	2800      	cmp	r0, #0
 800f850:	d13c      	bne.n	800f8cc <_dtoa_r+0x2ec>
 800f852:	4b1b      	ldr	r3, [pc, #108]	@ (800f8c0 <_dtoa_r+0x2e0>)
 800f854:	4602      	mov	r2, r0
 800f856:	f240 11af 	movw	r1, #431	@ 0x1af
 800f85a:	e6d8      	b.n	800f60e <_dtoa_r+0x2e>
 800f85c:	2301      	movs	r3, #1
 800f85e:	e7e0      	b.n	800f822 <_dtoa_r+0x242>
 800f860:	2401      	movs	r4, #1
 800f862:	2300      	movs	r3, #0
 800f864:	9309      	str	r3, [sp, #36]	@ 0x24
 800f866:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f868:	f04f 33ff 	mov.w	r3, #4294967295
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	9307      	str	r3, [sp, #28]
 800f870:	2200      	movs	r2, #0
 800f872:	2312      	movs	r3, #18
 800f874:	e7d0      	b.n	800f818 <_dtoa_r+0x238>
 800f876:	2301      	movs	r3, #1
 800f878:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f87a:	e7f5      	b.n	800f868 <_dtoa_r+0x288>
 800f87c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	9307      	str	r3, [sp, #28]
 800f882:	e7d7      	b.n	800f834 <_dtoa_r+0x254>
 800f884:	3101      	adds	r1, #1
 800f886:	0052      	lsls	r2, r2, #1
 800f888:	e7d8      	b.n	800f83c <_dtoa_r+0x25c>
 800f88a:	bf00      	nop
 800f88c:	f3af 8000 	nop.w
 800f890:	636f4361 	.word	0x636f4361
 800f894:	3fd287a7 	.word	0x3fd287a7
 800f898:	8b60c8b3 	.word	0x8b60c8b3
 800f89c:	3fc68a28 	.word	0x3fc68a28
 800f8a0:	509f79fb 	.word	0x509f79fb
 800f8a4:	3fd34413 	.word	0x3fd34413
 800f8a8:	080140da 	.word	0x080140da
 800f8ac:	0801419c 	.word	0x0801419c
 800f8b0:	7ff00000 	.word	0x7ff00000
 800f8b4:	080140b2 	.word	0x080140b2
 800f8b8:	3ff80000 	.word	0x3ff80000
 800f8bc:	080142f8 	.word	0x080142f8
 800f8c0:	080141f4 	.word	0x080141f4
 800f8c4:	08014198 	.word	0x08014198
 800f8c8:	080140b1 	.word	0x080140b1
 800f8cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f8d0:	6018      	str	r0, [r3, #0]
 800f8d2:	9b07      	ldr	r3, [sp, #28]
 800f8d4:	2b0e      	cmp	r3, #14
 800f8d6:	f200 80a4 	bhi.w	800fa22 <_dtoa_r+0x442>
 800f8da:	2c00      	cmp	r4, #0
 800f8dc:	f000 80a1 	beq.w	800fa22 <_dtoa_r+0x442>
 800f8e0:	2f00      	cmp	r7, #0
 800f8e2:	dd33      	ble.n	800f94c <_dtoa_r+0x36c>
 800f8e4:	4bad      	ldr	r3, [pc, #692]	@ (800fb9c <_dtoa_r+0x5bc>)
 800f8e6:	f007 020f 	and.w	r2, r7, #15
 800f8ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8ee:	ed93 7b00 	vldr	d7, [r3]
 800f8f2:	05f8      	lsls	r0, r7, #23
 800f8f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f8f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f8fc:	d516      	bpl.n	800f92c <_dtoa_r+0x34c>
 800f8fe:	4ba8      	ldr	r3, [pc, #672]	@ (800fba0 <_dtoa_r+0x5c0>)
 800f900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f904:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f908:	f7f0 ffa0 	bl	800084c <__aeabi_ddiv>
 800f90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f910:	f004 040f 	and.w	r4, r4, #15
 800f914:	2603      	movs	r6, #3
 800f916:	4da2      	ldr	r5, [pc, #648]	@ (800fba0 <_dtoa_r+0x5c0>)
 800f918:	b954      	cbnz	r4, 800f930 <_dtoa_r+0x350>
 800f91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f922:	f7f0 ff93 	bl	800084c <__aeabi_ddiv>
 800f926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f92a:	e028      	b.n	800f97e <_dtoa_r+0x39e>
 800f92c:	2602      	movs	r6, #2
 800f92e:	e7f2      	b.n	800f916 <_dtoa_r+0x336>
 800f930:	07e1      	lsls	r1, r4, #31
 800f932:	d508      	bpl.n	800f946 <_dtoa_r+0x366>
 800f934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f938:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f93c:	f7f0 fe5c 	bl	80005f8 <__aeabi_dmul>
 800f940:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f944:	3601      	adds	r6, #1
 800f946:	1064      	asrs	r4, r4, #1
 800f948:	3508      	adds	r5, #8
 800f94a:	e7e5      	b.n	800f918 <_dtoa_r+0x338>
 800f94c:	f000 80d2 	beq.w	800faf4 <_dtoa_r+0x514>
 800f950:	427c      	negs	r4, r7
 800f952:	4b92      	ldr	r3, [pc, #584]	@ (800fb9c <_dtoa_r+0x5bc>)
 800f954:	4d92      	ldr	r5, [pc, #584]	@ (800fba0 <_dtoa_r+0x5c0>)
 800f956:	f004 020f 	and.w	r2, r4, #15
 800f95a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f962:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f966:	f7f0 fe47 	bl	80005f8 <__aeabi_dmul>
 800f96a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f96e:	1124      	asrs	r4, r4, #4
 800f970:	2300      	movs	r3, #0
 800f972:	2602      	movs	r6, #2
 800f974:	2c00      	cmp	r4, #0
 800f976:	f040 80b2 	bne.w	800fade <_dtoa_r+0x4fe>
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d1d3      	bne.n	800f926 <_dtoa_r+0x346>
 800f97e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f980:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	f000 80b7 	beq.w	800faf8 <_dtoa_r+0x518>
 800f98a:	4b86      	ldr	r3, [pc, #536]	@ (800fba4 <_dtoa_r+0x5c4>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	4620      	mov	r0, r4
 800f990:	4629      	mov	r1, r5
 800f992:	f7f1 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800f996:	2800      	cmp	r0, #0
 800f998:	f000 80ae 	beq.w	800faf8 <_dtoa_r+0x518>
 800f99c:	9b07      	ldr	r3, [sp, #28]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 80aa 	beq.w	800faf8 <_dtoa_r+0x518>
 800f9a4:	9b00      	ldr	r3, [sp, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	dd37      	ble.n	800fa1a <_dtoa_r+0x43a>
 800f9aa:	1e7b      	subs	r3, r7, #1
 800f9ac:	9304      	str	r3, [sp, #16]
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	4b7d      	ldr	r3, [pc, #500]	@ (800fba8 <_dtoa_r+0x5c8>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	f7f0 fe1f 	bl	80005f8 <__aeabi_dmul>
 800f9ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9be:	9c00      	ldr	r4, [sp, #0]
 800f9c0:	3601      	adds	r6, #1
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f7f0 fdae 	bl	8000524 <__aeabi_i2d>
 800f9c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9cc:	f7f0 fe14 	bl	80005f8 <__aeabi_dmul>
 800f9d0:	4b76      	ldr	r3, [pc, #472]	@ (800fbac <_dtoa_r+0x5cc>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f7f0 fc5a 	bl	800028c <__adddf3>
 800f9d8:	4605      	mov	r5, r0
 800f9da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f9de:	2c00      	cmp	r4, #0
 800f9e0:	f040 808d 	bne.w	800fafe <_dtoa_r+0x51e>
 800f9e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9e8:	4b71      	ldr	r3, [pc, #452]	@ (800fbb0 <_dtoa_r+0x5d0>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f7f0 fc4c 	bl	8000288 <__aeabi_dsub>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9f8:	462a      	mov	r2, r5
 800f9fa:	4633      	mov	r3, r6
 800f9fc:	f7f1 f88c 	bl	8000b18 <__aeabi_dcmpgt>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	f040 828b 	bne.w	800ff1c <_dtoa_r+0x93c>
 800fa06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa0a:	462a      	mov	r2, r5
 800fa0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fa10:	f7f1 f864 	bl	8000adc <__aeabi_dcmplt>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	f040 8128 	bne.w	800fc6a <_dtoa_r+0x68a>
 800fa1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fa1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fa22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f2c0 815a 	blt.w	800fcde <_dtoa_r+0x6fe>
 800fa2a:	2f0e      	cmp	r7, #14
 800fa2c:	f300 8157 	bgt.w	800fcde <_dtoa_r+0x6fe>
 800fa30:	4b5a      	ldr	r3, [pc, #360]	@ (800fb9c <_dtoa_r+0x5bc>)
 800fa32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa36:	ed93 7b00 	vldr	d7, [r3]
 800fa3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	ed8d 7b00 	vstr	d7, [sp]
 800fa42:	da03      	bge.n	800fa4c <_dtoa_r+0x46c>
 800fa44:	9b07      	ldr	r3, [sp, #28]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f340 8101 	ble.w	800fc4e <_dtoa_r+0x66e>
 800fa4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fa50:	4656      	mov	r6, sl
 800fa52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa56:	4620      	mov	r0, r4
 800fa58:	4629      	mov	r1, r5
 800fa5a:	f7f0 fef7 	bl	800084c <__aeabi_ddiv>
 800fa5e:	f7f1 f87b 	bl	8000b58 <__aeabi_d2iz>
 800fa62:	4680      	mov	r8, r0
 800fa64:	f7f0 fd5e 	bl	8000524 <__aeabi_i2d>
 800fa68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa6c:	f7f0 fdc4 	bl	80005f8 <__aeabi_dmul>
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	4620      	mov	r0, r4
 800fa76:	4629      	mov	r1, r5
 800fa78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fa7c:	f7f0 fc04 	bl	8000288 <__aeabi_dsub>
 800fa80:	f806 4b01 	strb.w	r4, [r6], #1
 800fa84:	9d07      	ldr	r5, [sp, #28]
 800fa86:	eba6 040a 	sub.w	r4, r6, sl
 800fa8a:	42a5      	cmp	r5, r4
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	460b      	mov	r3, r1
 800fa90:	f040 8117 	bne.w	800fcc2 <_dtoa_r+0x6e2>
 800fa94:	f7f0 fbfa 	bl	800028c <__adddf3>
 800fa98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	460d      	mov	r5, r1
 800faa0:	f7f1 f83a 	bl	8000b18 <__aeabi_dcmpgt>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	f040 80f9 	bne.w	800fc9c <_dtoa_r+0x6bc>
 800faaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faae:	4620      	mov	r0, r4
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7f1 f809 	bl	8000ac8 <__aeabi_dcmpeq>
 800fab6:	b118      	cbz	r0, 800fac0 <_dtoa_r+0x4e0>
 800fab8:	f018 0f01 	tst.w	r8, #1
 800fabc:	f040 80ee 	bne.w	800fc9c <_dtoa_r+0x6bc>
 800fac0:	4649      	mov	r1, r9
 800fac2:	4658      	mov	r0, fp
 800fac4:	f000 ffdc 	bl	8010a80 <_Bfree>
 800fac8:	2300      	movs	r3, #0
 800faca:	7033      	strb	r3, [r6, #0]
 800facc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800face:	3701      	adds	r7, #1
 800fad0:	601f      	str	r7, [r3, #0]
 800fad2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 831d 	beq.w	8010114 <_dtoa_r+0xb34>
 800fada:	601e      	str	r6, [r3, #0]
 800fadc:	e31a      	b.n	8010114 <_dtoa_r+0xb34>
 800fade:	07e2      	lsls	r2, r4, #31
 800fae0:	d505      	bpl.n	800faee <_dtoa_r+0x50e>
 800fae2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fae6:	f7f0 fd87 	bl	80005f8 <__aeabi_dmul>
 800faea:	3601      	adds	r6, #1
 800faec:	2301      	movs	r3, #1
 800faee:	1064      	asrs	r4, r4, #1
 800faf0:	3508      	adds	r5, #8
 800faf2:	e73f      	b.n	800f974 <_dtoa_r+0x394>
 800faf4:	2602      	movs	r6, #2
 800faf6:	e742      	b.n	800f97e <_dtoa_r+0x39e>
 800faf8:	9c07      	ldr	r4, [sp, #28]
 800fafa:	9704      	str	r7, [sp, #16]
 800fafc:	e761      	b.n	800f9c2 <_dtoa_r+0x3e2>
 800fafe:	4b27      	ldr	r3, [pc, #156]	@ (800fb9c <_dtoa_r+0x5bc>)
 800fb00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fb02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb0a:	4454      	add	r4, sl
 800fb0c:	2900      	cmp	r1, #0
 800fb0e:	d053      	beq.n	800fbb8 <_dtoa_r+0x5d8>
 800fb10:	4928      	ldr	r1, [pc, #160]	@ (800fbb4 <_dtoa_r+0x5d4>)
 800fb12:	2000      	movs	r0, #0
 800fb14:	f7f0 fe9a 	bl	800084c <__aeabi_ddiv>
 800fb18:	4633      	mov	r3, r6
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	f7f0 fbb4 	bl	8000288 <__aeabi_dsub>
 800fb20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb24:	4656      	mov	r6, sl
 800fb26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb2a:	f7f1 f815 	bl	8000b58 <__aeabi_d2iz>
 800fb2e:	4605      	mov	r5, r0
 800fb30:	f7f0 fcf8 	bl	8000524 <__aeabi_i2d>
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb3c:	f7f0 fba4 	bl	8000288 <__aeabi_dsub>
 800fb40:	3530      	adds	r5, #48	@ 0x30
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb4a:	f806 5b01 	strb.w	r5, [r6], #1
 800fb4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb52:	f7f0 ffc3 	bl	8000adc <__aeabi_dcmplt>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d171      	bne.n	800fc3e <_dtoa_r+0x65e>
 800fb5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb5e:	4911      	ldr	r1, [pc, #68]	@ (800fba4 <_dtoa_r+0x5c4>)
 800fb60:	2000      	movs	r0, #0
 800fb62:	f7f0 fb91 	bl	8000288 <__aeabi_dsub>
 800fb66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb6a:	f7f0 ffb7 	bl	8000adc <__aeabi_dcmplt>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	f040 8095 	bne.w	800fc9e <_dtoa_r+0x6be>
 800fb74:	42a6      	cmp	r6, r4
 800fb76:	f43f af50 	beq.w	800fa1a <_dtoa_r+0x43a>
 800fb7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fb7e:	4b0a      	ldr	r3, [pc, #40]	@ (800fba8 <_dtoa_r+0x5c8>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	f7f0 fd39 	bl	80005f8 <__aeabi_dmul>
 800fb86:	4b08      	ldr	r3, [pc, #32]	@ (800fba8 <_dtoa_r+0x5c8>)
 800fb88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb92:	f7f0 fd31 	bl	80005f8 <__aeabi_dmul>
 800fb96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb9a:	e7c4      	b.n	800fb26 <_dtoa_r+0x546>
 800fb9c:	080142f8 	.word	0x080142f8
 800fba0:	080142d0 	.word	0x080142d0
 800fba4:	3ff00000 	.word	0x3ff00000
 800fba8:	40240000 	.word	0x40240000
 800fbac:	401c0000 	.word	0x401c0000
 800fbb0:	40140000 	.word	0x40140000
 800fbb4:	3fe00000 	.word	0x3fe00000
 800fbb8:	4631      	mov	r1, r6
 800fbba:	4628      	mov	r0, r5
 800fbbc:	f7f0 fd1c 	bl	80005f8 <__aeabi_dmul>
 800fbc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fbc4:	9415      	str	r4, [sp, #84]	@ 0x54
 800fbc6:	4656      	mov	r6, sl
 800fbc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbcc:	f7f0 ffc4 	bl	8000b58 <__aeabi_d2iz>
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	f7f0 fca7 	bl	8000524 <__aeabi_i2d>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	460b      	mov	r3, r1
 800fbda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbde:	f7f0 fb53 	bl	8000288 <__aeabi_dsub>
 800fbe2:	3530      	adds	r5, #48	@ 0x30
 800fbe4:	f806 5b01 	strb.w	r5, [r6], #1
 800fbe8:	4602      	mov	r2, r0
 800fbea:	460b      	mov	r3, r1
 800fbec:	42a6      	cmp	r6, r4
 800fbee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbf2:	f04f 0200 	mov.w	r2, #0
 800fbf6:	d124      	bne.n	800fc42 <_dtoa_r+0x662>
 800fbf8:	4bac      	ldr	r3, [pc, #688]	@ (800feac <_dtoa_r+0x8cc>)
 800fbfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fbfe:	f7f0 fb45 	bl	800028c <__adddf3>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc0a:	f7f0 ff85 	bl	8000b18 <__aeabi_dcmpgt>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d145      	bne.n	800fc9e <_dtoa_r+0x6be>
 800fc12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fc16:	49a5      	ldr	r1, [pc, #660]	@ (800feac <_dtoa_r+0x8cc>)
 800fc18:	2000      	movs	r0, #0
 800fc1a:	f7f0 fb35 	bl	8000288 <__aeabi_dsub>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	460b      	mov	r3, r1
 800fc22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc26:	f7f0 ff59 	bl	8000adc <__aeabi_dcmplt>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	f43f aef5 	beq.w	800fa1a <_dtoa_r+0x43a>
 800fc30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fc32:	1e73      	subs	r3, r6, #1
 800fc34:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fc3a:	2b30      	cmp	r3, #48	@ 0x30
 800fc3c:	d0f8      	beq.n	800fc30 <_dtoa_r+0x650>
 800fc3e:	9f04      	ldr	r7, [sp, #16]
 800fc40:	e73e      	b.n	800fac0 <_dtoa_r+0x4e0>
 800fc42:	4b9b      	ldr	r3, [pc, #620]	@ (800feb0 <_dtoa_r+0x8d0>)
 800fc44:	f7f0 fcd8 	bl	80005f8 <__aeabi_dmul>
 800fc48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc4c:	e7bc      	b.n	800fbc8 <_dtoa_r+0x5e8>
 800fc4e:	d10c      	bne.n	800fc6a <_dtoa_r+0x68a>
 800fc50:	4b98      	ldr	r3, [pc, #608]	@ (800feb4 <_dtoa_r+0x8d4>)
 800fc52:	2200      	movs	r2, #0
 800fc54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc58:	f7f0 fcce 	bl	80005f8 <__aeabi_dmul>
 800fc5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc60:	f7f0 ff50 	bl	8000b04 <__aeabi_dcmpge>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	f000 8157 	beq.w	800ff18 <_dtoa_r+0x938>
 800fc6a:	2400      	movs	r4, #0
 800fc6c:	4625      	mov	r5, r4
 800fc6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc70:	43db      	mvns	r3, r3
 800fc72:	9304      	str	r3, [sp, #16]
 800fc74:	4656      	mov	r6, sl
 800fc76:	2700      	movs	r7, #0
 800fc78:	4621      	mov	r1, r4
 800fc7a:	4658      	mov	r0, fp
 800fc7c:	f000 ff00 	bl	8010a80 <_Bfree>
 800fc80:	2d00      	cmp	r5, #0
 800fc82:	d0dc      	beq.n	800fc3e <_dtoa_r+0x65e>
 800fc84:	b12f      	cbz	r7, 800fc92 <_dtoa_r+0x6b2>
 800fc86:	42af      	cmp	r7, r5
 800fc88:	d003      	beq.n	800fc92 <_dtoa_r+0x6b2>
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	f000 fef7 	bl	8010a80 <_Bfree>
 800fc92:	4629      	mov	r1, r5
 800fc94:	4658      	mov	r0, fp
 800fc96:	f000 fef3 	bl	8010a80 <_Bfree>
 800fc9a:	e7d0      	b.n	800fc3e <_dtoa_r+0x65e>
 800fc9c:	9704      	str	r7, [sp, #16]
 800fc9e:	4633      	mov	r3, r6
 800fca0:	461e      	mov	r6, r3
 800fca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fca6:	2a39      	cmp	r2, #57	@ 0x39
 800fca8:	d107      	bne.n	800fcba <_dtoa_r+0x6da>
 800fcaa:	459a      	cmp	sl, r3
 800fcac:	d1f8      	bne.n	800fca0 <_dtoa_r+0x6c0>
 800fcae:	9a04      	ldr	r2, [sp, #16]
 800fcb0:	3201      	adds	r2, #1
 800fcb2:	9204      	str	r2, [sp, #16]
 800fcb4:	2230      	movs	r2, #48	@ 0x30
 800fcb6:	f88a 2000 	strb.w	r2, [sl]
 800fcba:	781a      	ldrb	r2, [r3, #0]
 800fcbc:	3201      	adds	r2, #1
 800fcbe:	701a      	strb	r2, [r3, #0]
 800fcc0:	e7bd      	b.n	800fc3e <_dtoa_r+0x65e>
 800fcc2:	4b7b      	ldr	r3, [pc, #492]	@ (800feb0 <_dtoa_r+0x8d0>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f7f0 fc97 	bl	80005f8 <__aeabi_dmul>
 800fcca:	2200      	movs	r2, #0
 800fccc:	2300      	movs	r3, #0
 800fcce:	4604      	mov	r4, r0
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	f7f0 fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f43f aebb 	beq.w	800fa52 <_dtoa_r+0x472>
 800fcdc:	e6f0      	b.n	800fac0 <_dtoa_r+0x4e0>
 800fcde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fce0:	2a00      	cmp	r2, #0
 800fce2:	f000 80db 	beq.w	800fe9c <_dtoa_r+0x8bc>
 800fce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fce8:	2a01      	cmp	r2, #1
 800fcea:	f300 80bf 	bgt.w	800fe6c <_dtoa_r+0x88c>
 800fcee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fcf0:	2a00      	cmp	r2, #0
 800fcf2:	f000 80b7 	beq.w	800fe64 <_dtoa_r+0x884>
 800fcf6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fcfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fcfc:	4646      	mov	r6, r8
 800fcfe:	9a08      	ldr	r2, [sp, #32]
 800fd00:	2101      	movs	r1, #1
 800fd02:	441a      	add	r2, r3
 800fd04:	4658      	mov	r0, fp
 800fd06:	4498      	add	r8, r3
 800fd08:	9208      	str	r2, [sp, #32]
 800fd0a:	f000 ffb7 	bl	8010c7c <__i2b>
 800fd0e:	4605      	mov	r5, r0
 800fd10:	b15e      	cbz	r6, 800fd2a <_dtoa_r+0x74a>
 800fd12:	9b08      	ldr	r3, [sp, #32]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	dd08      	ble.n	800fd2a <_dtoa_r+0x74a>
 800fd18:	42b3      	cmp	r3, r6
 800fd1a:	9a08      	ldr	r2, [sp, #32]
 800fd1c:	bfa8      	it	ge
 800fd1e:	4633      	movge	r3, r6
 800fd20:	eba8 0803 	sub.w	r8, r8, r3
 800fd24:	1af6      	subs	r6, r6, r3
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	9308      	str	r3, [sp, #32]
 800fd2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd2c:	b1f3      	cbz	r3, 800fd6c <_dtoa_r+0x78c>
 800fd2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 80b7 	beq.w	800fea4 <_dtoa_r+0x8c4>
 800fd36:	b18c      	cbz	r4, 800fd5c <_dtoa_r+0x77c>
 800fd38:	4629      	mov	r1, r5
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	4658      	mov	r0, fp
 800fd3e:	f001 f85d 	bl	8010dfc <__pow5mult>
 800fd42:	464a      	mov	r2, r9
 800fd44:	4601      	mov	r1, r0
 800fd46:	4605      	mov	r5, r0
 800fd48:	4658      	mov	r0, fp
 800fd4a:	f000 ffad 	bl	8010ca8 <__multiply>
 800fd4e:	4649      	mov	r1, r9
 800fd50:	9004      	str	r0, [sp, #16]
 800fd52:	4658      	mov	r0, fp
 800fd54:	f000 fe94 	bl	8010a80 <_Bfree>
 800fd58:	9b04      	ldr	r3, [sp, #16]
 800fd5a:	4699      	mov	r9, r3
 800fd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd5e:	1b1a      	subs	r2, r3, r4
 800fd60:	d004      	beq.n	800fd6c <_dtoa_r+0x78c>
 800fd62:	4649      	mov	r1, r9
 800fd64:	4658      	mov	r0, fp
 800fd66:	f001 f849 	bl	8010dfc <__pow5mult>
 800fd6a:	4681      	mov	r9, r0
 800fd6c:	2101      	movs	r1, #1
 800fd6e:	4658      	mov	r0, fp
 800fd70:	f000 ff84 	bl	8010c7c <__i2b>
 800fd74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd76:	4604      	mov	r4, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f000 81cf 	beq.w	801011c <_dtoa_r+0xb3c>
 800fd7e:	461a      	mov	r2, r3
 800fd80:	4601      	mov	r1, r0
 800fd82:	4658      	mov	r0, fp
 800fd84:	f001 f83a 	bl	8010dfc <__pow5mult>
 800fd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	4604      	mov	r4, r0
 800fd8e:	f300 8095 	bgt.w	800febc <_dtoa_r+0x8dc>
 800fd92:	9b02      	ldr	r3, [sp, #8]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f040 8087 	bne.w	800fea8 <_dtoa_r+0x8c8>
 800fd9a:	9b03      	ldr	r3, [sp, #12]
 800fd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f040 8089 	bne.w	800feb8 <_dtoa_r+0x8d8>
 800fda6:	9b03      	ldr	r3, [sp, #12]
 800fda8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fdac:	0d1b      	lsrs	r3, r3, #20
 800fdae:	051b      	lsls	r3, r3, #20
 800fdb0:	b12b      	cbz	r3, 800fdbe <_dtoa_r+0x7de>
 800fdb2:	9b08      	ldr	r3, [sp, #32]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	9308      	str	r3, [sp, #32]
 800fdb8:	f108 0801 	add.w	r8, r8, #1
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fdc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f000 81b0 	beq.w	8010128 <_dtoa_r+0xb48>
 800fdc8:	6923      	ldr	r3, [r4, #16]
 800fdca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fdce:	6918      	ldr	r0, [r3, #16]
 800fdd0:	f000 ff08 	bl	8010be4 <__hi0bits>
 800fdd4:	f1c0 0020 	rsb	r0, r0, #32
 800fdd8:	9b08      	ldr	r3, [sp, #32]
 800fdda:	4418      	add	r0, r3
 800fddc:	f010 001f 	ands.w	r0, r0, #31
 800fde0:	d077      	beq.n	800fed2 <_dtoa_r+0x8f2>
 800fde2:	f1c0 0320 	rsb	r3, r0, #32
 800fde6:	2b04      	cmp	r3, #4
 800fde8:	dd6b      	ble.n	800fec2 <_dtoa_r+0x8e2>
 800fdea:	9b08      	ldr	r3, [sp, #32]
 800fdec:	f1c0 001c 	rsb	r0, r0, #28
 800fdf0:	4403      	add	r3, r0
 800fdf2:	4480      	add	r8, r0
 800fdf4:	4406      	add	r6, r0
 800fdf6:	9308      	str	r3, [sp, #32]
 800fdf8:	f1b8 0f00 	cmp.w	r8, #0
 800fdfc:	dd05      	ble.n	800fe0a <_dtoa_r+0x82a>
 800fdfe:	4649      	mov	r1, r9
 800fe00:	4642      	mov	r2, r8
 800fe02:	4658      	mov	r0, fp
 800fe04:	f001 f854 	bl	8010eb0 <__lshift>
 800fe08:	4681      	mov	r9, r0
 800fe0a:	9b08      	ldr	r3, [sp, #32]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	dd05      	ble.n	800fe1c <_dtoa_r+0x83c>
 800fe10:	4621      	mov	r1, r4
 800fe12:	461a      	mov	r2, r3
 800fe14:	4658      	mov	r0, fp
 800fe16:	f001 f84b 	bl	8010eb0 <__lshift>
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d059      	beq.n	800fed6 <_dtoa_r+0x8f6>
 800fe22:	4621      	mov	r1, r4
 800fe24:	4648      	mov	r0, r9
 800fe26:	f001 f8af 	bl	8010f88 <__mcmp>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	da53      	bge.n	800fed6 <_dtoa_r+0x8f6>
 800fe2e:	1e7b      	subs	r3, r7, #1
 800fe30:	9304      	str	r3, [sp, #16]
 800fe32:	4649      	mov	r1, r9
 800fe34:	2300      	movs	r3, #0
 800fe36:	220a      	movs	r2, #10
 800fe38:	4658      	mov	r0, fp
 800fe3a:	f000 fe43 	bl	8010ac4 <__multadd>
 800fe3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe40:	4681      	mov	r9, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f000 8172 	beq.w	801012c <_dtoa_r+0xb4c>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	220a      	movs	r2, #10
 800fe4e:	4658      	mov	r0, fp
 800fe50:	f000 fe38 	bl	8010ac4 <__multadd>
 800fe54:	9b00      	ldr	r3, [sp, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	4605      	mov	r5, r0
 800fe5a:	dc67      	bgt.n	800ff2c <_dtoa_r+0x94c>
 800fe5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe5e:	2b02      	cmp	r3, #2
 800fe60:	dc41      	bgt.n	800fee6 <_dtoa_r+0x906>
 800fe62:	e063      	b.n	800ff2c <_dtoa_r+0x94c>
 800fe64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fe6a:	e746      	b.n	800fcfa <_dtoa_r+0x71a>
 800fe6c:	9b07      	ldr	r3, [sp, #28]
 800fe6e:	1e5c      	subs	r4, r3, #1
 800fe70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe72:	42a3      	cmp	r3, r4
 800fe74:	bfbf      	itttt	lt
 800fe76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fe78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fe7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fe7c:	1ae3      	sublt	r3, r4, r3
 800fe7e:	bfb4      	ite	lt
 800fe80:	18d2      	addlt	r2, r2, r3
 800fe82:	1b1c      	subge	r4, r3, r4
 800fe84:	9b07      	ldr	r3, [sp, #28]
 800fe86:	bfbc      	itt	lt
 800fe88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fe8a:	2400      	movlt	r4, #0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	bfb5      	itete	lt
 800fe90:	eba8 0603 	sublt.w	r6, r8, r3
 800fe94:	9b07      	ldrge	r3, [sp, #28]
 800fe96:	2300      	movlt	r3, #0
 800fe98:	4646      	movge	r6, r8
 800fe9a:	e730      	b.n	800fcfe <_dtoa_r+0x71e>
 800fe9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fea0:	4646      	mov	r6, r8
 800fea2:	e735      	b.n	800fd10 <_dtoa_r+0x730>
 800fea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fea6:	e75c      	b.n	800fd62 <_dtoa_r+0x782>
 800fea8:	2300      	movs	r3, #0
 800feaa:	e788      	b.n	800fdbe <_dtoa_r+0x7de>
 800feac:	3fe00000 	.word	0x3fe00000
 800feb0:	40240000 	.word	0x40240000
 800feb4:	40140000 	.word	0x40140000
 800feb8:	9b02      	ldr	r3, [sp, #8]
 800feba:	e780      	b.n	800fdbe <_dtoa_r+0x7de>
 800febc:	2300      	movs	r3, #0
 800febe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fec0:	e782      	b.n	800fdc8 <_dtoa_r+0x7e8>
 800fec2:	d099      	beq.n	800fdf8 <_dtoa_r+0x818>
 800fec4:	9a08      	ldr	r2, [sp, #32]
 800fec6:	331c      	adds	r3, #28
 800fec8:	441a      	add	r2, r3
 800feca:	4498      	add	r8, r3
 800fecc:	441e      	add	r6, r3
 800fece:	9208      	str	r2, [sp, #32]
 800fed0:	e792      	b.n	800fdf8 <_dtoa_r+0x818>
 800fed2:	4603      	mov	r3, r0
 800fed4:	e7f6      	b.n	800fec4 <_dtoa_r+0x8e4>
 800fed6:	9b07      	ldr	r3, [sp, #28]
 800fed8:	9704      	str	r7, [sp, #16]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	dc20      	bgt.n	800ff20 <_dtoa_r+0x940>
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	dd1e      	ble.n	800ff24 <_dtoa_r+0x944>
 800fee6:	9b00      	ldr	r3, [sp, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f47f aec0 	bne.w	800fc6e <_dtoa_r+0x68e>
 800feee:	4621      	mov	r1, r4
 800fef0:	2205      	movs	r2, #5
 800fef2:	4658      	mov	r0, fp
 800fef4:	f000 fde6 	bl	8010ac4 <__multadd>
 800fef8:	4601      	mov	r1, r0
 800fefa:	4604      	mov	r4, r0
 800fefc:	4648      	mov	r0, r9
 800fefe:	f001 f843 	bl	8010f88 <__mcmp>
 800ff02:	2800      	cmp	r0, #0
 800ff04:	f77f aeb3 	ble.w	800fc6e <_dtoa_r+0x68e>
 800ff08:	4656      	mov	r6, sl
 800ff0a:	2331      	movs	r3, #49	@ 0x31
 800ff0c:	f806 3b01 	strb.w	r3, [r6], #1
 800ff10:	9b04      	ldr	r3, [sp, #16]
 800ff12:	3301      	adds	r3, #1
 800ff14:	9304      	str	r3, [sp, #16]
 800ff16:	e6ae      	b.n	800fc76 <_dtoa_r+0x696>
 800ff18:	9c07      	ldr	r4, [sp, #28]
 800ff1a:	9704      	str	r7, [sp, #16]
 800ff1c:	4625      	mov	r5, r4
 800ff1e:	e7f3      	b.n	800ff08 <_dtoa_r+0x928>
 800ff20:	9b07      	ldr	r3, [sp, #28]
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f000 8104 	beq.w	8010134 <_dtoa_r+0xb54>
 800ff2c:	2e00      	cmp	r6, #0
 800ff2e:	dd05      	ble.n	800ff3c <_dtoa_r+0x95c>
 800ff30:	4629      	mov	r1, r5
 800ff32:	4632      	mov	r2, r6
 800ff34:	4658      	mov	r0, fp
 800ff36:	f000 ffbb 	bl	8010eb0 <__lshift>
 800ff3a:	4605      	mov	r5, r0
 800ff3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d05a      	beq.n	800fff8 <_dtoa_r+0xa18>
 800ff42:	6869      	ldr	r1, [r5, #4]
 800ff44:	4658      	mov	r0, fp
 800ff46:	f000 fd5b 	bl	8010a00 <_Balloc>
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	b928      	cbnz	r0, 800ff5a <_dtoa_r+0x97a>
 800ff4e:	4b84      	ldr	r3, [pc, #528]	@ (8010160 <_dtoa_r+0xb80>)
 800ff50:	4602      	mov	r2, r0
 800ff52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ff56:	f7ff bb5a 	b.w	800f60e <_dtoa_r+0x2e>
 800ff5a:	692a      	ldr	r2, [r5, #16]
 800ff5c:	3202      	adds	r2, #2
 800ff5e:	0092      	lsls	r2, r2, #2
 800ff60:	f105 010c 	add.w	r1, r5, #12
 800ff64:	300c      	adds	r0, #12
 800ff66:	f7ff fa76 	bl	800f456 <memcpy>
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	4631      	mov	r1, r6
 800ff6e:	4658      	mov	r0, fp
 800ff70:	f000 ff9e 	bl	8010eb0 <__lshift>
 800ff74:	f10a 0301 	add.w	r3, sl, #1
 800ff78:	9307      	str	r3, [sp, #28]
 800ff7a:	9b00      	ldr	r3, [sp, #0]
 800ff7c:	4453      	add	r3, sl
 800ff7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff80:	9b02      	ldr	r3, [sp, #8]
 800ff82:	f003 0301 	and.w	r3, r3, #1
 800ff86:	462f      	mov	r7, r5
 800ff88:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	9b07      	ldr	r3, [sp, #28]
 800ff8e:	4621      	mov	r1, r4
 800ff90:	3b01      	subs	r3, #1
 800ff92:	4648      	mov	r0, r9
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	f7ff fa9b 	bl	800f4d0 <quorem>
 800ff9a:	4639      	mov	r1, r7
 800ff9c:	9002      	str	r0, [sp, #8]
 800ff9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ffa2:	4648      	mov	r0, r9
 800ffa4:	f000 fff0 	bl	8010f88 <__mcmp>
 800ffa8:	462a      	mov	r2, r5
 800ffaa:	9008      	str	r0, [sp, #32]
 800ffac:	4621      	mov	r1, r4
 800ffae:	4658      	mov	r0, fp
 800ffb0:	f001 f806 	bl	8010fc0 <__mdiff>
 800ffb4:	68c2      	ldr	r2, [r0, #12]
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	bb02      	cbnz	r2, 800fffc <_dtoa_r+0xa1c>
 800ffba:	4601      	mov	r1, r0
 800ffbc:	4648      	mov	r0, r9
 800ffbe:	f000 ffe3 	bl	8010f88 <__mcmp>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	4631      	mov	r1, r6
 800ffc6:	4658      	mov	r0, fp
 800ffc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ffca:	f000 fd59 	bl	8010a80 <_Bfree>
 800ffce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffd2:	9e07      	ldr	r6, [sp, #28]
 800ffd4:	ea43 0102 	orr.w	r1, r3, r2
 800ffd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffda:	4319      	orrs	r1, r3
 800ffdc:	d110      	bne.n	8010000 <_dtoa_r+0xa20>
 800ffde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ffe2:	d029      	beq.n	8010038 <_dtoa_r+0xa58>
 800ffe4:	9b08      	ldr	r3, [sp, #32]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	dd02      	ble.n	800fff0 <_dtoa_r+0xa10>
 800ffea:	9b02      	ldr	r3, [sp, #8]
 800ffec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fff0:	9b00      	ldr	r3, [sp, #0]
 800fff2:	f883 8000 	strb.w	r8, [r3]
 800fff6:	e63f      	b.n	800fc78 <_dtoa_r+0x698>
 800fff8:	4628      	mov	r0, r5
 800fffa:	e7bb      	b.n	800ff74 <_dtoa_r+0x994>
 800fffc:	2201      	movs	r2, #1
 800fffe:	e7e1      	b.n	800ffc4 <_dtoa_r+0x9e4>
 8010000:	9b08      	ldr	r3, [sp, #32]
 8010002:	2b00      	cmp	r3, #0
 8010004:	db04      	blt.n	8010010 <_dtoa_r+0xa30>
 8010006:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010008:	430b      	orrs	r3, r1
 801000a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801000c:	430b      	orrs	r3, r1
 801000e:	d120      	bne.n	8010052 <_dtoa_r+0xa72>
 8010010:	2a00      	cmp	r2, #0
 8010012:	dded      	ble.n	800fff0 <_dtoa_r+0xa10>
 8010014:	4649      	mov	r1, r9
 8010016:	2201      	movs	r2, #1
 8010018:	4658      	mov	r0, fp
 801001a:	f000 ff49 	bl	8010eb0 <__lshift>
 801001e:	4621      	mov	r1, r4
 8010020:	4681      	mov	r9, r0
 8010022:	f000 ffb1 	bl	8010f88 <__mcmp>
 8010026:	2800      	cmp	r0, #0
 8010028:	dc03      	bgt.n	8010032 <_dtoa_r+0xa52>
 801002a:	d1e1      	bne.n	800fff0 <_dtoa_r+0xa10>
 801002c:	f018 0f01 	tst.w	r8, #1
 8010030:	d0de      	beq.n	800fff0 <_dtoa_r+0xa10>
 8010032:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010036:	d1d8      	bne.n	800ffea <_dtoa_r+0xa0a>
 8010038:	9a00      	ldr	r2, [sp, #0]
 801003a:	2339      	movs	r3, #57	@ 0x39
 801003c:	7013      	strb	r3, [r2, #0]
 801003e:	4633      	mov	r3, r6
 8010040:	461e      	mov	r6, r3
 8010042:	3b01      	subs	r3, #1
 8010044:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010048:	2a39      	cmp	r2, #57	@ 0x39
 801004a:	d052      	beq.n	80100f2 <_dtoa_r+0xb12>
 801004c:	3201      	adds	r2, #1
 801004e:	701a      	strb	r2, [r3, #0]
 8010050:	e612      	b.n	800fc78 <_dtoa_r+0x698>
 8010052:	2a00      	cmp	r2, #0
 8010054:	dd07      	ble.n	8010066 <_dtoa_r+0xa86>
 8010056:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801005a:	d0ed      	beq.n	8010038 <_dtoa_r+0xa58>
 801005c:	9a00      	ldr	r2, [sp, #0]
 801005e:	f108 0301 	add.w	r3, r8, #1
 8010062:	7013      	strb	r3, [r2, #0]
 8010064:	e608      	b.n	800fc78 <_dtoa_r+0x698>
 8010066:	9b07      	ldr	r3, [sp, #28]
 8010068:	9a07      	ldr	r2, [sp, #28]
 801006a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801006e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010070:	4293      	cmp	r3, r2
 8010072:	d028      	beq.n	80100c6 <_dtoa_r+0xae6>
 8010074:	4649      	mov	r1, r9
 8010076:	2300      	movs	r3, #0
 8010078:	220a      	movs	r2, #10
 801007a:	4658      	mov	r0, fp
 801007c:	f000 fd22 	bl	8010ac4 <__multadd>
 8010080:	42af      	cmp	r7, r5
 8010082:	4681      	mov	r9, r0
 8010084:	f04f 0300 	mov.w	r3, #0
 8010088:	f04f 020a 	mov.w	r2, #10
 801008c:	4639      	mov	r1, r7
 801008e:	4658      	mov	r0, fp
 8010090:	d107      	bne.n	80100a2 <_dtoa_r+0xac2>
 8010092:	f000 fd17 	bl	8010ac4 <__multadd>
 8010096:	4607      	mov	r7, r0
 8010098:	4605      	mov	r5, r0
 801009a:	9b07      	ldr	r3, [sp, #28]
 801009c:	3301      	adds	r3, #1
 801009e:	9307      	str	r3, [sp, #28]
 80100a0:	e774      	b.n	800ff8c <_dtoa_r+0x9ac>
 80100a2:	f000 fd0f 	bl	8010ac4 <__multadd>
 80100a6:	4629      	mov	r1, r5
 80100a8:	4607      	mov	r7, r0
 80100aa:	2300      	movs	r3, #0
 80100ac:	220a      	movs	r2, #10
 80100ae:	4658      	mov	r0, fp
 80100b0:	f000 fd08 	bl	8010ac4 <__multadd>
 80100b4:	4605      	mov	r5, r0
 80100b6:	e7f0      	b.n	801009a <_dtoa_r+0xaba>
 80100b8:	9b00      	ldr	r3, [sp, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	bfcc      	ite	gt
 80100be:	461e      	movgt	r6, r3
 80100c0:	2601      	movle	r6, #1
 80100c2:	4456      	add	r6, sl
 80100c4:	2700      	movs	r7, #0
 80100c6:	4649      	mov	r1, r9
 80100c8:	2201      	movs	r2, #1
 80100ca:	4658      	mov	r0, fp
 80100cc:	f000 fef0 	bl	8010eb0 <__lshift>
 80100d0:	4621      	mov	r1, r4
 80100d2:	4681      	mov	r9, r0
 80100d4:	f000 ff58 	bl	8010f88 <__mcmp>
 80100d8:	2800      	cmp	r0, #0
 80100da:	dcb0      	bgt.n	801003e <_dtoa_r+0xa5e>
 80100dc:	d102      	bne.n	80100e4 <_dtoa_r+0xb04>
 80100de:	f018 0f01 	tst.w	r8, #1
 80100e2:	d1ac      	bne.n	801003e <_dtoa_r+0xa5e>
 80100e4:	4633      	mov	r3, r6
 80100e6:	461e      	mov	r6, r3
 80100e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100ec:	2a30      	cmp	r2, #48	@ 0x30
 80100ee:	d0fa      	beq.n	80100e6 <_dtoa_r+0xb06>
 80100f0:	e5c2      	b.n	800fc78 <_dtoa_r+0x698>
 80100f2:	459a      	cmp	sl, r3
 80100f4:	d1a4      	bne.n	8010040 <_dtoa_r+0xa60>
 80100f6:	9b04      	ldr	r3, [sp, #16]
 80100f8:	3301      	adds	r3, #1
 80100fa:	9304      	str	r3, [sp, #16]
 80100fc:	2331      	movs	r3, #49	@ 0x31
 80100fe:	f88a 3000 	strb.w	r3, [sl]
 8010102:	e5b9      	b.n	800fc78 <_dtoa_r+0x698>
 8010104:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010106:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010164 <_dtoa_r+0xb84>
 801010a:	b11b      	cbz	r3, 8010114 <_dtoa_r+0xb34>
 801010c:	f10a 0308 	add.w	r3, sl, #8
 8010110:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010112:	6013      	str	r3, [r2, #0]
 8010114:	4650      	mov	r0, sl
 8010116:	b019      	add	sp, #100	@ 0x64
 8010118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801011e:	2b01      	cmp	r3, #1
 8010120:	f77f ae37 	ble.w	800fd92 <_dtoa_r+0x7b2>
 8010124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010126:	930a      	str	r3, [sp, #40]	@ 0x28
 8010128:	2001      	movs	r0, #1
 801012a:	e655      	b.n	800fdd8 <_dtoa_r+0x7f8>
 801012c:	9b00      	ldr	r3, [sp, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	f77f aed6 	ble.w	800fee0 <_dtoa_r+0x900>
 8010134:	4656      	mov	r6, sl
 8010136:	4621      	mov	r1, r4
 8010138:	4648      	mov	r0, r9
 801013a:	f7ff f9c9 	bl	800f4d0 <quorem>
 801013e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010142:	f806 8b01 	strb.w	r8, [r6], #1
 8010146:	9b00      	ldr	r3, [sp, #0]
 8010148:	eba6 020a 	sub.w	r2, r6, sl
 801014c:	4293      	cmp	r3, r2
 801014e:	ddb3      	ble.n	80100b8 <_dtoa_r+0xad8>
 8010150:	4649      	mov	r1, r9
 8010152:	2300      	movs	r3, #0
 8010154:	220a      	movs	r2, #10
 8010156:	4658      	mov	r0, fp
 8010158:	f000 fcb4 	bl	8010ac4 <__multadd>
 801015c:	4681      	mov	r9, r0
 801015e:	e7ea      	b.n	8010136 <_dtoa_r+0xb56>
 8010160:	080141f4 	.word	0x080141f4
 8010164:	0801418f 	.word	0x0801418f

08010168 <_free_r>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	4605      	mov	r5, r0
 801016c:	2900      	cmp	r1, #0
 801016e:	d041      	beq.n	80101f4 <_free_r+0x8c>
 8010170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010174:	1f0c      	subs	r4, r1, #4
 8010176:	2b00      	cmp	r3, #0
 8010178:	bfb8      	it	lt
 801017a:	18e4      	addlt	r4, r4, r3
 801017c:	f000 fc34 	bl	80109e8 <__malloc_lock>
 8010180:	4a1d      	ldr	r2, [pc, #116]	@ (80101f8 <_free_r+0x90>)
 8010182:	6813      	ldr	r3, [r2, #0]
 8010184:	b933      	cbnz	r3, 8010194 <_free_r+0x2c>
 8010186:	6063      	str	r3, [r4, #4]
 8010188:	6014      	str	r4, [r2, #0]
 801018a:	4628      	mov	r0, r5
 801018c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010190:	f000 bc30 	b.w	80109f4 <__malloc_unlock>
 8010194:	42a3      	cmp	r3, r4
 8010196:	d908      	bls.n	80101aa <_free_r+0x42>
 8010198:	6820      	ldr	r0, [r4, #0]
 801019a:	1821      	adds	r1, r4, r0
 801019c:	428b      	cmp	r3, r1
 801019e:	bf01      	itttt	eq
 80101a0:	6819      	ldreq	r1, [r3, #0]
 80101a2:	685b      	ldreq	r3, [r3, #4]
 80101a4:	1809      	addeq	r1, r1, r0
 80101a6:	6021      	streq	r1, [r4, #0]
 80101a8:	e7ed      	b.n	8010186 <_free_r+0x1e>
 80101aa:	461a      	mov	r2, r3
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	b10b      	cbz	r3, 80101b4 <_free_r+0x4c>
 80101b0:	42a3      	cmp	r3, r4
 80101b2:	d9fa      	bls.n	80101aa <_free_r+0x42>
 80101b4:	6811      	ldr	r1, [r2, #0]
 80101b6:	1850      	adds	r0, r2, r1
 80101b8:	42a0      	cmp	r0, r4
 80101ba:	d10b      	bne.n	80101d4 <_free_r+0x6c>
 80101bc:	6820      	ldr	r0, [r4, #0]
 80101be:	4401      	add	r1, r0
 80101c0:	1850      	adds	r0, r2, r1
 80101c2:	4283      	cmp	r3, r0
 80101c4:	6011      	str	r1, [r2, #0]
 80101c6:	d1e0      	bne.n	801018a <_free_r+0x22>
 80101c8:	6818      	ldr	r0, [r3, #0]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	6053      	str	r3, [r2, #4]
 80101ce:	4408      	add	r0, r1
 80101d0:	6010      	str	r0, [r2, #0]
 80101d2:	e7da      	b.n	801018a <_free_r+0x22>
 80101d4:	d902      	bls.n	80101dc <_free_r+0x74>
 80101d6:	230c      	movs	r3, #12
 80101d8:	602b      	str	r3, [r5, #0]
 80101da:	e7d6      	b.n	801018a <_free_r+0x22>
 80101dc:	6820      	ldr	r0, [r4, #0]
 80101de:	1821      	adds	r1, r4, r0
 80101e0:	428b      	cmp	r3, r1
 80101e2:	bf04      	itt	eq
 80101e4:	6819      	ldreq	r1, [r3, #0]
 80101e6:	685b      	ldreq	r3, [r3, #4]
 80101e8:	6063      	str	r3, [r4, #4]
 80101ea:	bf04      	itt	eq
 80101ec:	1809      	addeq	r1, r1, r0
 80101ee:	6021      	streq	r1, [r4, #0]
 80101f0:	6054      	str	r4, [r2, #4]
 80101f2:	e7ca      	b.n	801018a <_free_r+0x22>
 80101f4:	bd38      	pop	{r3, r4, r5, pc}
 80101f6:	bf00      	nop
 80101f8:	2000083c 	.word	0x2000083c

080101fc <rshift>:
 80101fc:	6903      	ldr	r3, [r0, #16]
 80101fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010206:	ea4f 1261 	mov.w	r2, r1, asr #5
 801020a:	f100 0414 	add.w	r4, r0, #20
 801020e:	dd45      	ble.n	801029c <rshift+0xa0>
 8010210:	f011 011f 	ands.w	r1, r1, #31
 8010214:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010218:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801021c:	d10c      	bne.n	8010238 <rshift+0x3c>
 801021e:	f100 0710 	add.w	r7, r0, #16
 8010222:	4629      	mov	r1, r5
 8010224:	42b1      	cmp	r1, r6
 8010226:	d334      	bcc.n	8010292 <rshift+0x96>
 8010228:	1a9b      	subs	r3, r3, r2
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	1eea      	subs	r2, r5, #3
 801022e:	4296      	cmp	r6, r2
 8010230:	bf38      	it	cc
 8010232:	2300      	movcc	r3, #0
 8010234:	4423      	add	r3, r4
 8010236:	e015      	b.n	8010264 <rshift+0x68>
 8010238:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801023c:	f1c1 0820 	rsb	r8, r1, #32
 8010240:	40cf      	lsrs	r7, r1
 8010242:	f105 0e04 	add.w	lr, r5, #4
 8010246:	46a1      	mov	r9, r4
 8010248:	4576      	cmp	r6, lr
 801024a:	46f4      	mov	ip, lr
 801024c:	d815      	bhi.n	801027a <rshift+0x7e>
 801024e:	1a9a      	subs	r2, r3, r2
 8010250:	0092      	lsls	r2, r2, #2
 8010252:	3a04      	subs	r2, #4
 8010254:	3501      	adds	r5, #1
 8010256:	42ae      	cmp	r6, r5
 8010258:	bf38      	it	cc
 801025a:	2200      	movcc	r2, #0
 801025c:	18a3      	adds	r3, r4, r2
 801025e:	50a7      	str	r7, [r4, r2]
 8010260:	b107      	cbz	r7, 8010264 <rshift+0x68>
 8010262:	3304      	adds	r3, #4
 8010264:	1b1a      	subs	r2, r3, r4
 8010266:	42a3      	cmp	r3, r4
 8010268:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801026c:	bf08      	it	eq
 801026e:	2300      	moveq	r3, #0
 8010270:	6102      	str	r2, [r0, #16]
 8010272:	bf08      	it	eq
 8010274:	6143      	streq	r3, [r0, #20]
 8010276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801027a:	f8dc c000 	ldr.w	ip, [ip]
 801027e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010282:	ea4c 0707 	orr.w	r7, ip, r7
 8010286:	f849 7b04 	str.w	r7, [r9], #4
 801028a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801028e:	40cf      	lsrs	r7, r1
 8010290:	e7da      	b.n	8010248 <rshift+0x4c>
 8010292:	f851 cb04 	ldr.w	ip, [r1], #4
 8010296:	f847 cf04 	str.w	ip, [r7, #4]!
 801029a:	e7c3      	b.n	8010224 <rshift+0x28>
 801029c:	4623      	mov	r3, r4
 801029e:	e7e1      	b.n	8010264 <rshift+0x68>

080102a0 <__hexdig_fun>:
 80102a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80102a4:	2b09      	cmp	r3, #9
 80102a6:	d802      	bhi.n	80102ae <__hexdig_fun+0xe>
 80102a8:	3820      	subs	r0, #32
 80102aa:	b2c0      	uxtb	r0, r0
 80102ac:	4770      	bx	lr
 80102ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80102b2:	2b05      	cmp	r3, #5
 80102b4:	d801      	bhi.n	80102ba <__hexdig_fun+0x1a>
 80102b6:	3847      	subs	r0, #71	@ 0x47
 80102b8:	e7f7      	b.n	80102aa <__hexdig_fun+0xa>
 80102ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80102be:	2b05      	cmp	r3, #5
 80102c0:	d801      	bhi.n	80102c6 <__hexdig_fun+0x26>
 80102c2:	3827      	subs	r0, #39	@ 0x27
 80102c4:	e7f1      	b.n	80102aa <__hexdig_fun+0xa>
 80102c6:	2000      	movs	r0, #0
 80102c8:	4770      	bx	lr
	...

080102cc <__gethex>:
 80102cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d0:	b085      	sub	sp, #20
 80102d2:	468a      	mov	sl, r1
 80102d4:	9302      	str	r3, [sp, #8]
 80102d6:	680b      	ldr	r3, [r1, #0]
 80102d8:	9001      	str	r0, [sp, #4]
 80102da:	4690      	mov	r8, r2
 80102dc:	1c9c      	adds	r4, r3, #2
 80102de:	46a1      	mov	r9, r4
 80102e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80102e4:	2830      	cmp	r0, #48	@ 0x30
 80102e6:	d0fa      	beq.n	80102de <__gethex+0x12>
 80102e8:	eba9 0303 	sub.w	r3, r9, r3
 80102ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80102f0:	f7ff ffd6 	bl	80102a0 <__hexdig_fun>
 80102f4:	4605      	mov	r5, r0
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d168      	bne.n	80103cc <__gethex+0x100>
 80102fa:	49a0      	ldr	r1, [pc, #640]	@ (801057c <__gethex+0x2b0>)
 80102fc:	2201      	movs	r2, #1
 80102fe:	4648      	mov	r0, r9
 8010300:	f7fe ffc3 	bl	800f28a <strncmp>
 8010304:	4607      	mov	r7, r0
 8010306:	2800      	cmp	r0, #0
 8010308:	d167      	bne.n	80103da <__gethex+0x10e>
 801030a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801030e:	4626      	mov	r6, r4
 8010310:	f7ff ffc6 	bl	80102a0 <__hexdig_fun>
 8010314:	2800      	cmp	r0, #0
 8010316:	d062      	beq.n	80103de <__gethex+0x112>
 8010318:	4623      	mov	r3, r4
 801031a:	7818      	ldrb	r0, [r3, #0]
 801031c:	2830      	cmp	r0, #48	@ 0x30
 801031e:	4699      	mov	r9, r3
 8010320:	f103 0301 	add.w	r3, r3, #1
 8010324:	d0f9      	beq.n	801031a <__gethex+0x4e>
 8010326:	f7ff ffbb 	bl	80102a0 <__hexdig_fun>
 801032a:	fab0 f580 	clz	r5, r0
 801032e:	096d      	lsrs	r5, r5, #5
 8010330:	f04f 0b01 	mov.w	fp, #1
 8010334:	464a      	mov	r2, r9
 8010336:	4616      	mov	r6, r2
 8010338:	3201      	adds	r2, #1
 801033a:	7830      	ldrb	r0, [r6, #0]
 801033c:	f7ff ffb0 	bl	80102a0 <__hexdig_fun>
 8010340:	2800      	cmp	r0, #0
 8010342:	d1f8      	bne.n	8010336 <__gethex+0x6a>
 8010344:	498d      	ldr	r1, [pc, #564]	@ (801057c <__gethex+0x2b0>)
 8010346:	2201      	movs	r2, #1
 8010348:	4630      	mov	r0, r6
 801034a:	f7fe ff9e 	bl	800f28a <strncmp>
 801034e:	2800      	cmp	r0, #0
 8010350:	d13f      	bne.n	80103d2 <__gethex+0x106>
 8010352:	b944      	cbnz	r4, 8010366 <__gethex+0x9a>
 8010354:	1c74      	adds	r4, r6, #1
 8010356:	4622      	mov	r2, r4
 8010358:	4616      	mov	r6, r2
 801035a:	3201      	adds	r2, #1
 801035c:	7830      	ldrb	r0, [r6, #0]
 801035e:	f7ff ff9f 	bl	80102a0 <__hexdig_fun>
 8010362:	2800      	cmp	r0, #0
 8010364:	d1f8      	bne.n	8010358 <__gethex+0x8c>
 8010366:	1ba4      	subs	r4, r4, r6
 8010368:	00a7      	lsls	r7, r4, #2
 801036a:	7833      	ldrb	r3, [r6, #0]
 801036c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010370:	2b50      	cmp	r3, #80	@ 0x50
 8010372:	d13e      	bne.n	80103f2 <__gethex+0x126>
 8010374:	7873      	ldrb	r3, [r6, #1]
 8010376:	2b2b      	cmp	r3, #43	@ 0x2b
 8010378:	d033      	beq.n	80103e2 <__gethex+0x116>
 801037a:	2b2d      	cmp	r3, #45	@ 0x2d
 801037c:	d034      	beq.n	80103e8 <__gethex+0x11c>
 801037e:	1c71      	adds	r1, r6, #1
 8010380:	2400      	movs	r4, #0
 8010382:	7808      	ldrb	r0, [r1, #0]
 8010384:	f7ff ff8c 	bl	80102a0 <__hexdig_fun>
 8010388:	1e43      	subs	r3, r0, #1
 801038a:	b2db      	uxtb	r3, r3
 801038c:	2b18      	cmp	r3, #24
 801038e:	d830      	bhi.n	80103f2 <__gethex+0x126>
 8010390:	f1a0 0210 	sub.w	r2, r0, #16
 8010394:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010398:	f7ff ff82 	bl	80102a0 <__hexdig_fun>
 801039c:	f100 3cff 	add.w	ip, r0, #4294967295
 80103a0:	fa5f fc8c 	uxtb.w	ip, ip
 80103a4:	f1bc 0f18 	cmp.w	ip, #24
 80103a8:	f04f 030a 	mov.w	r3, #10
 80103ac:	d91e      	bls.n	80103ec <__gethex+0x120>
 80103ae:	b104      	cbz	r4, 80103b2 <__gethex+0xe6>
 80103b0:	4252      	negs	r2, r2
 80103b2:	4417      	add	r7, r2
 80103b4:	f8ca 1000 	str.w	r1, [sl]
 80103b8:	b1ed      	cbz	r5, 80103f6 <__gethex+0x12a>
 80103ba:	f1bb 0f00 	cmp.w	fp, #0
 80103be:	bf0c      	ite	eq
 80103c0:	2506      	moveq	r5, #6
 80103c2:	2500      	movne	r5, #0
 80103c4:	4628      	mov	r0, r5
 80103c6:	b005      	add	sp, #20
 80103c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103cc:	2500      	movs	r5, #0
 80103ce:	462c      	mov	r4, r5
 80103d0:	e7b0      	b.n	8010334 <__gethex+0x68>
 80103d2:	2c00      	cmp	r4, #0
 80103d4:	d1c7      	bne.n	8010366 <__gethex+0x9a>
 80103d6:	4627      	mov	r7, r4
 80103d8:	e7c7      	b.n	801036a <__gethex+0x9e>
 80103da:	464e      	mov	r6, r9
 80103dc:	462f      	mov	r7, r5
 80103de:	2501      	movs	r5, #1
 80103e0:	e7c3      	b.n	801036a <__gethex+0x9e>
 80103e2:	2400      	movs	r4, #0
 80103e4:	1cb1      	adds	r1, r6, #2
 80103e6:	e7cc      	b.n	8010382 <__gethex+0xb6>
 80103e8:	2401      	movs	r4, #1
 80103ea:	e7fb      	b.n	80103e4 <__gethex+0x118>
 80103ec:	fb03 0002 	mla	r0, r3, r2, r0
 80103f0:	e7ce      	b.n	8010390 <__gethex+0xc4>
 80103f2:	4631      	mov	r1, r6
 80103f4:	e7de      	b.n	80103b4 <__gethex+0xe8>
 80103f6:	eba6 0309 	sub.w	r3, r6, r9
 80103fa:	3b01      	subs	r3, #1
 80103fc:	4629      	mov	r1, r5
 80103fe:	2b07      	cmp	r3, #7
 8010400:	dc0a      	bgt.n	8010418 <__gethex+0x14c>
 8010402:	9801      	ldr	r0, [sp, #4]
 8010404:	f000 fafc 	bl	8010a00 <_Balloc>
 8010408:	4604      	mov	r4, r0
 801040a:	b940      	cbnz	r0, 801041e <__gethex+0x152>
 801040c:	4b5c      	ldr	r3, [pc, #368]	@ (8010580 <__gethex+0x2b4>)
 801040e:	4602      	mov	r2, r0
 8010410:	21e4      	movs	r1, #228	@ 0xe4
 8010412:	485c      	ldr	r0, [pc, #368]	@ (8010584 <__gethex+0x2b8>)
 8010414:	f7ff f83e 	bl	800f494 <__assert_func>
 8010418:	3101      	adds	r1, #1
 801041a:	105b      	asrs	r3, r3, #1
 801041c:	e7ef      	b.n	80103fe <__gethex+0x132>
 801041e:	f100 0a14 	add.w	sl, r0, #20
 8010422:	2300      	movs	r3, #0
 8010424:	4655      	mov	r5, sl
 8010426:	469b      	mov	fp, r3
 8010428:	45b1      	cmp	r9, r6
 801042a:	d337      	bcc.n	801049c <__gethex+0x1d0>
 801042c:	f845 bb04 	str.w	fp, [r5], #4
 8010430:	eba5 050a 	sub.w	r5, r5, sl
 8010434:	10ad      	asrs	r5, r5, #2
 8010436:	6125      	str	r5, [r4, #16]
 8010438:	4658      	mov	r0, fp
 801043a:	f000 fbd3 	bl	8010be4 <__hi0bits>
 801043e:	016d      	lsls	r5, r5, #5
 8010440:	f8d8 6000 	ldr.w	r6, [r8]
 8010444:	1a2d      	subs	r5, r5, r0
 8010446:	42b5      	cmp	r5, r6
 8010448:	dd54      	ble.n	80104f4 <__gethex+0x228>
 801044a:	1bad      	subs	r5, r5, r6
 801044c:	4629      	mov	r1, r5
 801044e:	4620      	mov	r0, r4
 8010450:	f000 ff67 	bl	8011322 <__any_on>
 8010454:	4681      	mov	r9, r0
 8010456:	b178      	cbz	r0, 8010478 <__gethex+0x1ac>
 8010458:	1e6b      	subs	r3, r5, #1
 801045a:	1159      	asrs	r1, r3, #5
 801045c:	f003 021f 	and.w	r2, r3, #31
 8010460:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010464:	f04f 0901 	mov.w	r9, #1
 8010468:	fa09 f202 	lsl.w	r2, r9, r2
 801046c:	420a      	tst	r2, r1
 801046e:	d003      	beq.n	8010478 <__gethex+0x1ac>
 8010470:	454b      	cmp	r3, r9
 8010472:	dc36      	bgt.n	80104e2 <__gethex+0x216>
 8010474:	f04f 0902 	mov.w	r9, #2
 8010478:	4629      	mov	r1, r5
 801047a:	4620      	mov	r0, r4
 801047c:	f7ff febe 	bl	80101fc <rshift>
 8010480:	442f      	add	r7, r5
 8010482:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010486:	42bb      	cmp	r3, r7
 8010488:	da42      	bge.n	8010510 <__gethex+0x244>
 801048a:	9801      	ldr	r0, [sp, #4]
 801048c:	4621      	mov	r1, r4
 801048e:	f000 faf7 	bl	8010a80 <_Bfree>
 8010492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010494:	2300      	movs	r3, #0
 8010496:	6013      	str	r3, [r2, #0]
 8010498:	25a3      	movs	r5, #163	@ 0xa3
 801049a:	e793      	b.n	80103c4 <__gethex+0xf8>
 801049c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80104a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80104a2:	d012      	beq.n	80104ca <__gethex+0x1fe>
 80104a4:	2b20      	cmp	r3, #32
 80104a6:	d104      	bne.n	80104b2 <__gethex+0x1e6>
 80104a8:	f845 bb04 	str.w	fp, [r5], #4
 80104ac:	f04f 0b00 	mov.w	fp, #0
 80104b0:	465b      	mov	r3, fp
 80104b2:	7830      	ldrb	r0, [r6, #0]
 80104b4:	9303      	str	r3, [sp, #12]
 80104b6:	f7ff fef3 	bl	80102a0 <__hexdig_fun>
 80104ba:	9b03      	ldr	r3, [sp, #12]
 80104bc:	f000 000f 	and.w	r0, r0, #15
 80104c0:	4098      	lsls	r0, r3
 80104c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80104c6:	3304      	adds	r3, #4
 80104c8:	e7ae      	b.n	8010428 <__gethex+0x15c>
 80104ca:	45b1      	cmp	r9, r6
 80104cc:	d8ea      	bhi.n	80104a4 <__gethex+0x1d8>
 80104ce:	492b      	ldr	r1, [pc, #172]	@ (801057c <__gethex+0x2b0>)
 80104d0:	9303      	str	r3, [sp, #12]
 80104d2:	2201      	movs	r2, #1
 80104d4:	4630      	mov	r0, r6
 80104d6:	f7fe fed8 	bl	800f28a <strncmp>
 80104da:	9b03      	ldr	r3, [sp, #12]
 80104dc:	2800      	cmp	r0, #0
 80104de:	d1e1      	bne.n	80104a4 <__gethex+0x1d8>
 80104e0:	e7a2      	b.n	8010428 <__gethex+0x15c>
 80104e2:	1ea9      	subs	r1, r5, #2
 80104e4:	4620      	mov	r0, r4
 80104e6:	f000 ff1c 	bl	8011322 <__any_on>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d0c2      	beq.n	8010474 <__gethex+0x1a8>
 80104ee:	f04f 0903 	mov.w	r9, #3
 80104f2:	e7c1      	b.n	8010478 <__gethex+0x1ac>
 80104f4:	da09      	bge.n	801050a <__gethex+0x23e>
 80104f6:	1b75      	subs	r5, r6, r5
 80104f8:	4621      	mov	r1, r4
 80104fa:	9801      	ldr	r0, [sp, #4]
 80104fc:	462a      	mov	r2, r5
 80104fe:	f000 fcd7 	bl	8010eb0 <__lshift>
 8010502:	1b7f      	subs	r7, r7, r5
 8010504:	4604      	mov	r4, r0
 8010506:	f100 0a14 	add.w	sl, r0, #20
 801050a:	f04f 0900 	mov.w	r9, #0
 801050e:	e7b8      	b.n	8010482 <__gethex+0x1b6>
 8010510:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010514:	42bd      	cmp	r5, r7
 8010516:	dd6f      	ble.n	80105f8 <__gethex+0x32c>
 8010518:	1bed      	subs	r5, r5, r7
 801051a:	42ae      	cmp	r6, r5
 801051c:	dc34      	bgt.n	8010588 <__gethex+0x2bc>
 801051e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010522:	2b02      	cmp	r3, #2
 8010524:	d022      	beq.n	801056c <__gethex+0x2a0>
 8010526:	2b03      	cmp	r3, #3
 8010528:	d024      	beq.n	8010574 <__gethex+0x2a8>
 801052a:	2b01      	cmp	r3, #1
 801052c:	d115      	bne.n	801055a <__gethex+0x28e>
 801052e:	42ae      	cmp	r6, r5
 8010530:	d113      	bne.n	801055a <__gethex+0x28e>
 8010532:	2e01      	cmp	r6, #1
 8010534:	d10b      	bne.n	801054e <__gethex+0x282>
 8010536:	9a02      	ldr	r2, [sp, #8]
 8010538:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801053c:	6013      	str	r3, [r2, #0]
 801053e:	2301      	movs	r3, #1
 8010540:	6123      	str	r3, [r4, #16]
 8010542:	f8ca 3000 	str.w	r3, [sl]
 8010546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010548:	2562      	movs	r5, #98	@ 0x62
 801054a:	601c      	str	r4, [r3, #0]
 801054c:	e73a      	b.n	80103c4 <__gethex+0xf8>
 801054e:	1e71      	subs	r1, r6, #1
 8010550:	4620      	mov	r0, r4
 8010552:	f000 fee6 	bl	8011322 <__any_on>
 8010556:	2800      	cmp	r0, #0
 8010558:	d1ed      	bne.n	8010536 <__gethex+0x26a>
 801055a:	9801      	ldr	r0, [sp, #4]
 801055c:	4621      	mov	r1, r4
 801055e:	f000 fa8f 	bl	8010a80 <_Bfree>
 8010562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010564:	2300      	movs	r3, #0
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	2550      	movs	r5, #80	@ 0x50
 801056a:	e72b      	b.n	80103c4 <__gethex+0xf8>
 801056c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1f3      	bne.n	801055a <__gethex+0x28e>
 8010572:	e7e0      	b.n	8010536 <__gethex+0x26a>
 8010574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1dd      	bne.n	8010536 <__gethex+0x26a>
 801057a:	e7ee      	b.n	801055a <__gethex+0x28e>
 801057c:	08013f48 	.word	0x08013f48
 8010580:	080141f4 	.word	0x080141f4
 8010584:	08014205 	.word	0x08014205
 8010588:	1e6f      	subs	r7, r5, #1
 801058a:	f1b9 0f00 	cmp.w	r9, #0
 801058e:	d130      	bne.n	80105f2 <__gethex+0x326>
 8010590:	b127      	cbz	r7, 801059c <__gethex+0x2d0>
 8010592:	4639      	mov	r1, r7
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fec4 	bl	8011322 <__any_on>
 801059a:	4681      	mov	r9, r0
 801059c:	117a      	asrs	r2, r7, #5
 801059e:	2301      	movs	r3, #1
 80105a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80105a4:	f007 071f 	and.w	r7, r7, #31
 80105a8:	40bb      	lsls	r3, r7
 80105aa:	4213      	tst	r3, r2
 80105ac:	4629      	mov	r1, r5
 80105ae:	4620      	mov	r0, r4
 80105b0:	bf18      	it	ne
 80105b2:	f049 0902 	orrne.w	r9, r9, #2
 80105b6:	f7ff fe21 	bl	80101fc <rshift>
 80105ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80105be:	1b76      	subs	r6, r6, r5
 80105c0:	2502      	movs	r5, #2
 80105c2:	f1b9 0f00 	cmp.w	r9, #0
 80105c6:	d047      	beq.n	8010658 <__gethex+0x38c>
 80105c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d015      	beq.n	80105fc <__gethex+0x330>
 80105d0:	2b03      	cmp	r3, #3
 80105d2:	d017      	beq.n	8010604 <__gethex+0x338>
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d109      	bne.n	80105ec <__gethex+0x320>
 80105d8:	f019 0f02 	tst.w	r9, #2
 80105dc:	d006      	beq.n	80105ec <__gethex+0x320>
 80105de:	f8da 3000 	ldr.w	r3, [sl]
 80105e2:	ea49 0903 	orr.w	r9, r9, r3
 80105e6:	f019 0f01 	tst.w	r9, #1
 80105ea:	d10e      	bne.n	801060a <__gethex+0x33e>
 80105ec:	f045 0510 	orr.w	r5, r5, #16
 80105f0:	e032      	b.n	8010658 <__gethex+0x38c>
 80105f2:	f04f 0901 	mov.w	r9, #1
 80105f6:	e7d1      	b.n	801059c <__gethex+0x2d0>
 80105f8:	2501      	movs	r5, #1
 80105fa:	e7e2      	b.n	80105c2 <__gethex+0x2f6>
 80105fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105fe:	f1c3 0301 	rsb	r3, r3, #1
 8010602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d0f0      	beq.n	80105ec <__gethex+0x320>
 801060a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801060e:	f104 0314 	add.w	r3, r4, #20
 8010612:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010616:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801061a:	f04f 0c00 	mov.w	ip, #0
 801061e:	4618      	mov	r0, r3
 8010620:	f853 2b04 	ldr.w	r2, [r3], #4
 8010624:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010628:	d01b      	beq.n	8010662 <__gethex+0x396>
 801062a:	3201      	adds	r2, #1
 801062c:	6002      	str	r2, [r0, #0]
 801062e:	2d02      	cmp	r5, #2
 8010630:	f104 0314 	add.w	r3, r4, #20
 8010634:	d13c      	bne.n	80106b0 <__gethex+0x3e4>
 8010636:	f8d8 2000 	ldr.w	r2, [r8]
 801063a:	3a01      	subs	r2, #1
 801063c:	42b2      	cmp	r2, r6
 801063e:	d109      	bne.n	8010654 <__gethex+0x388>
 8010640:	1171      	asrs	r1, r6, #5
 8010642:	2201      	movs	r2, #1
 8010644:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010648:	f006 061f 	and.w	r6, r6, #31
 801064c:	fa02 f606 	lsl.w	r6, r2, r6
 8010650:	421e      	tst	r6, r3
 8010652:	d13a      	bne.n	80106ca <__gethex+0x3fe>
 8010654:	f045 0520 	orr.w	r5, r5, #32
 8010658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801065a:	601c      	str	r4, [r3, #0]
 801065c:	9b02      	ldr	r3, [sp, #8]
 801065e:	601f      	str	r7, [r3, #0]
 8010660:	e6b0      	b.n	80103c4 <__gethex+0xf8>
 8010662:	4299      	cmp	r1, r3
 8010664:	f843 cc04 	str.w	ip, [r3, #-4]
 8010668:	d8d9      	bhi.n	801061e <__gethex+0x352>
 801066a:	68a3      	ldr	r3, [r4, #8]
 801066c:	459b      	cmp	fp, r3
 801066e:	db17      	blt.n	80106a0 <__gethex+0x3d4>
 8010670:	6861      	ldr	r1, [r4, #4]
 8010672:	9801      	ldr	r0, [sp, #4]
 8010674:	3101      	adds	r1, #1
 8010676:	f000 f9c3 	bl	8010a00 <_Balloc>
 801067a:	4681      	mov	r9, r0
 801067c:	b918      	cbnz	r0, 8010686 <__gethex+0x3ba>
 801067e:	4b1a      	ldr	r3, [pc, #104]	@ (80106e8 <__gethex+0x41c>)
 8010680:	4602      	mov	r2, r0
 8010682:	2184      	movs	r1, #132	@ 0x84
 8010684:	e6c5      	b.n	8010412 <__gethex+0x146>
 8010686:	6922      	ldr	r2, [r4, #16]
 8010688:	3202      	adds	r2, #2
 801068a:	f104 010c 	add.w	r1, r4, #12
 801068e:	0092      	lsls	r2, r2, #2
 8010690:	300c      	adds	r0, #12
 8010692:	f7fe fee0 	bl	800f456 <memcpy>
 8010696:	4621      	mov	r1, r4
 8010698:	9801      	ldr	r0, [sp, #4]
 801069a:	f000 f9f1 	bl	8010a80 <_Bfree>
 801069e:	464c      	mov	r4, r9
 80106a0:	6923      	ldr	r3, [r4, #16]
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106a8:	6122      	str	r2, [r4, #16]
 80106aa:	2201      	movs	r2, #1
 80106ac:	615a      	str	r2, [r3, #20]
 80106ae:	e7be      	b.n	801062e <__gethex+0x362>
 80106b0:	6922      	ldr	r2, [r4, #16]
 80106b2:	455a      	cmp	r2, fp
 80106b4:	dd0b      	ble.n	80106ce <__gethex+0x402>
 80106b6:	2101      	movs	r1, #1
 80106b8:	4620      	mov	r0, r4
 80106ba:	f7ff fd9f 	bl	80101fc <rshift>
 80106be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106c2:	3701      	adds	r7, #1
 80106c4:	42bb      	cmp	r3, r7
 80106c6:	f6ff aee0 	blt.w	801048a <__gethex+0x1be>
 80106ca:	2501      	movs	r5, #1
 80106cc:	e7c2      	b.n	8010654 <__gethex+0x388>
 80106ce:	f016 061f 	ands.w	r6, r6, #31
 80106d2:	d0fa      	beq.n	80106ca <__gethex+0x3fe>
 80106d4:	4453      	add	r3, sl
 80106d6:	f1c6 0620 	rsb	r6, r6, #32
 80106da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80106de:	f000 fa81 	bl	8010be4 <__hi0bits>
 80106e2:	42b0      	cmp	r0, r6
 80106e4:	dbe7      	blt.n	80106b6 <__gethex+0x3ea>
 80106e6:	e7f0      	b.n	80106ca <__gethex+0x3fe>
 80106e8:	080141f4 	.word	0x080141f4

080106ec <L_shift>:
 80106ec:	f1c2 0208 	rsb	r2, r2, #8
 80106f0:	0092      	lsls	r2, r2, #2
 80106f2:	b570      	push	{r4, r5, r6, lr}
 80106f4:	f1c2 0620 	rsb	r6, r2, #32
 80106f8:	6843      	ldr	r3, [r0, #4]
 80106fa:	6804      	ldr	r4, [r0, #0]
 80106fc:	fa03 f506 	lsl.w	r5, r3, r6
 8010700:	432c      	orrs	r4, r5
 8010702:	40d3      	lsrs	r3, r2
 8010704:	6004      	str	r4, [r0, #0]
 8010706:	f840 3f04 	str.w	r3, [r0, #4]!
 801070a:	4288      	cmp	r0, r1
 801070c:	d3f4      	bcc.n	80106f8 <L_shift+0xc>
 801070e:	bd70      	pop	{r4, r5, r6, pc}

08010710 <__match>:
 8010710:	b530      	push	{r4, r5, lr}
 8010712:	6803      	ldr	r3, [r0, #0]
 8010714:	3301      	adds	r3, #1
 8010716:	f811 4b01 	ldrb.w	r4, [r1], #1
 801071a:	b914      	cbnz	r4, 8010722 <__match+0x12>
 801071c:	6003      	str	r3, [r0, #0]
 801071e:	2001      	movs	r0, #1
 8010720:	bd30      	pop	{r4, r5, pc}
 8010722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010726:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801072a:	2d19      	cmp	r5, #25
 801072c:	bf98      	it	ls
 801072e:	3220      	addls	r2, #32
 8010730:	42a2      	cmp	r2, r4
 8010732:	d0f0      	beq.n	8010716 <__match+0x6>
 8010734:	2000      	movs	r0, #0
 8010736:	e7f3      	b.n	8010720 <__match+0x10>

08010738 <__hexnan>:
 8010738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	680b      	ldr	r3, [r1, #0]
 801073e:	6801      	ldr	r1, [r0, #0]
 8010740:	115e      	asrs	r6, r3, #5
 8010742:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010746:	f013 031f 	ands.w	r3, r3, #31
 801074a:	b087      	sub	sp, #28
 801074c:	bf18      	it	ne
 801074e:	3604      	addne	r6, #4
 8010750:	2500      	movs	r5, #0
 8010752:	1f37      	subs	r7, r6, #4
 8010754:	4682      	mov	sl, r0
 8010756:	4690      	mov	r8, r2
 8010758:	9301      	str	r3, [sp, #4]
 801075a:	f846 5c04 	str.w	r5, [r6, #-4]
 801075e:	46b9      	mov	r9, r7
 8010760:	463c      	mov	r4, r7
 8010762:	9502      	str	r5, [sp, #8]
 8010764:	46ab      	mov	fp, r5
 8010766:	784a      	ldrb	r2, [r1, #1]
 8010768:	1c4b      	adds	r3, r1, #1
 801076a:	9303      	str	r3, [sp, #12]
 801076c:	b342      	cbz	r2, 80107c0 <__hexnan+0x88>
 801076e:	4610      	mov	r0, r2
 8010770:	9105      	str	r1, [sp, #20]
 8010772:	9204      	str	r2, [sp, #16]
 8010774:	f7ff fd94 	bl	80102a0 <__hexdig_fun>
 8010778:	2800      	cmp	r0, #0
 801077a:	d151      	bne.n	8010820 <__hexnan+0xe8>
 801077c:	9a04      	ldr	r2, [sp, #16]
 801077e:	9905      	ldr	r1, [sp, #20]
 8010780:	2a20      	cmp	r2, #32
 8010782:	d818      	bhi.n	80107b6 <__hexnan+0x7e>
 8010784:	9b02      	ldr	r3, [sp, #8]
 8010786:	459b      	cmp	fp, r3
 8010788:	dd13      	ble.n	80107b2 <__hexnan+0x7a>
 801078a:	454c      	cmp	r4, r9
 801078c:	d206      	bcs.n	801079c <__hexnan+0x64>
 801078e:	2d07      	cmp	r5, #7
 8010790:	dc04      	bgt.n	801079c <__hexnan+0x64>
 8010792:	462a      	mov	r2, r5
 8010794:	4649      	mov	r1, r9
 8010796:	4620      	mov	r0, r4
 8010798:	f7ff ffa8 	bl	80106ec <L_shift>
 801079c:	4544      	cmp	r4, r8
 801079e:	d952      	bls.n	8010846 <__hexnan+0x10e>
 80107a0:	2300      	movs	r3, #0
 80107a2:	f1a4 0904 	sub.w	r9, r4, #4
 80107a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80107aa:	f8cd b008 	str.w	fp, [sp, #8]
 80107ae:	464c      	mov	r4, r9
 80107b0:	461d      	mov	r5, r3
 80107b2:	9903      	ldr	r1, [sp, #12]
 80107b4:	e7d7      	b.n	8010766 <__hexnan+0x2e>
 80107b6:	2a29      	cmp	r2, #41	@ 0x29
 80107b8:	d157      	bne.n	801086a <__hexnan+0x132>
 80107ba:	3102      	adds	r1, #2
 80107bc:	f8ca 1000 	str.w	r1, [sl]
 80107c0:	f1bb 0f00 	cmp.w	fp, #0
 80107c4:	d051      	beq.n	801086a <__hexnan+0x132>
 80107c6:	454c      	cmp	r4, r9
 80107c8:	d206      	bcs.n	80107d8 <__hexnan+0xa0>
 80107ca:	2d07      	cmp	r5, #7
 80107cc:	dc04      	bgt.n	80107d8 <__hexnan+0xa0>
 80107ce:	462a      	mov	r2, r5
 80107d0:	4649      	mov	r1, r9
 80107d2:	4620      	mov	r0, r4
 80107d4:	f7ff ff8a 	bl	80106ec <L_shift>
 80107d8:	4544      	cmp	r4, r8
 80107da:	d936      	bls.n	801084a <__hexnan+0x112>
 80107dc:	f1a8 0204 	sub.w	r2, r8, #4
 80107e0:	4623      	mov	r3, r4
 80107e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80107e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80107ea:	429f      	cmp	r7, r3
 80107ec:	d2f9      	bcs.n	80107e2 <__hexnan+0xaa>
 80107ee:	1b3b      	subs	r3, r7, r4
 80107f0:	f023 0303 	bic.w	r3, r3, #3
 80107f4:	3304      	adds	r3, #4
 80107f6:	3401      	adds	r4, #1
 80107f8:	3e03      	subs	r6, #3
 80107fa:	42b4      	cmp	r4, r6
 80107fc:	bf88      	it	hi
 80107fe:	2304      	movhi	r3, #4
 8010800:	4443      	add	r3, r8
 8010802:	2200      	movs	r2, #0
 8010804:	f843 2b04 	str.w	r2, [r3], #4
 8010808:	429f      	cmp	r7, r3
 801080a:	d2fb      	bcs.n	8010804 <__hexnan+0xcc>
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	b91b      	cbnz	r3, 8010818 <__hexnan+0xe0>
 8010810:	4547      	cmp	r7, r8
 8010812:	d128      	bne.n	8010866 <__hexnan+0x12e>
 8010814:	2301      	movs	r3, #1
 8010816:	603b      	str	r3, [r7, #0]
 8010818:	2005      	movs	r0, #5
 801081a:	b007      	add	sp, #28
 801081c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010820:	3501      	adds	r5, #1
 8010822:	2d08      	cmp	r5, #8
 8010824:	f10b 0b01 	add.w	fp, fp, #1
 8010828:	dd06      	ble.n	8010838 <__hexnan+0x100>
 801082a:	4544      	cmp	r4, r8
 801082c:	d9c1      	bls.n	80107b2 <__hexnan+0x7a>
 801082e:	2300      	movs	r3, #0
 8010830:	f844 3c04 	str.w	r3, [r4, #-4]
 8010834:	2501      	movs	r5, #1
 8010836:	3c04      	subs	r4, #4
 8010838:	6822      	ldr	r2, [r4, #0]
 801083a:	f000 000f 	and.w	r0, r0, #15
 801083e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010842:	6020      	str	r0, [r4, #0]
 8010844:	e7b5      	b.n	80107b2 <__hexnan+0x7a>
 8010846:	2508      	movs	r5, #8
 8010848:	e7b3      	b.n	80107b2 <__hexnan+0x7a>
 801084a:	9b01      	ldr	r3, [sp, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d0dd      	beq.n	801080c <__hexnan+0xd4>
 8010850:	f1c3 0320 	rsb	r3, r3, #32
 8010854:	f04f 32ff 	mov.w	r2, #4294967295
 8010858:	40da      	lsrs	r2, r3
 801085a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801085e:	4013      	ands	r3, r2
 8010860:	f846 3c04 	str.w	r3, [r6, #-4]
 8010864:	e7d2      	b.n	801080c <__hexnan+0xd4>
 8010866:	3f04      	subs	r7, #4
 8010868:	e7d0      	b.n	801080c <__hexnan+0xd4>
 801086a:	2004      	movs	r0, #4
 801086c:	e7d5      	b.n	801081a <__hexnan+0xe2>
	...

08010870 <malloc>:
 8010870:	4b02      	ldr	r3, [pc, #8]	@ (801087c <malloc+0xc>)
 8010872:	4601      	mov	r1, r0
 8010874:	6818      	ldr	r0, [r3, #0]
 8010876:	f000 b825 	b.w	80108c4 <_malloc_r>
 801087a:	bf00      	nop
 801087c:	20000268 	.word	0x20000268

08010880 <sbrk_aligned>:
 8010880:	b570      	push	{r4, r5, r6, lr}
 8010882:	4e0f      	ldr	r6, [pc, #60]	@ (80108c0 <sbrk_aligned+0x40>)
 8010884:	460c      	mov	r4, r1
 8010886:	6831      	ldr	r1, [r6, #0]
 8010888:	4605      	mov	r5, r0
 801088a:	b911      	cbnz	r1, 8010892 <sbrk_aligned+0x12>
 801088c:	f000 ffa6 	bl	80117dc <_sbrk_r>
 8010890:	6030      	str	r0, [r6, #0]
 8010892:	4621      	mov	r1, r4
 8010894:	4628      	mov	r0, r5
 8010896:	f000 ffa1 	bl	80117dc <_sbrk_r>
 801089a:	1c43      	adds	r3, r0, #1
 801089c:	d103      	bne.n	80108a6 <sbrk_aligned+0x26>
 801089e:	f04f 34ff 	mov.w	r4, #4294967295
 80108a2:	4620      	mov	r0, r4
 80108a4:	bd70      	pop	{r4, r5, r6, pc}
 80108a6:	1cc4      	adds	r4, r0, #3
 80108a8:	f024 0403 	bic.w	r4, r4, #3
 80108ac:	42a0      	cmp	r0, r4
 80108ae:	d0f8      	beq.n	80108a2 <sbrk_aligned+0x22>
 80108b0:	1a21      	subs	r1, r4, r0
 80108b2:	4628      	mov	r0, r5
 80108b4:	f000 ff92 	bl	80117dc <_sbrk_r>
 80108b8:	3001      	adds	r0, #1
 80108ba:	d1f2      	bne.n	80108a2 <sbrk_aligned+0x22>
 80108bc:	e7ef      	b.n	801089e <sbrk_aligned+0x1e>
 80108be:	bf00      	nop
 80108c0:	20000838 	.word	0x20000838

080108c4 <_malloc_r>:
 80108c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108c8:	1ccd      	adds	r5, r1, #3
 80108ca:	f025 0503 	bic.w	r5, r5, #3
 80108ce:	3508      	adds	r5, #8
 80108d0:	2d0c      	cmp	r5, #12
 80108d2:	bf38      	it	cc
 80108d4:	250c      	movcc	r5, #12
 80108d6:	2d00      	cmp	r5, #0
 80108d8:	4606      	mov	r6, r0
 80108da:	db01      	blt.n	80108e0 <_malloc_r+0x1c>
 80108dc:	42a9      	cmp	r1, r5
 80108de:	d904      	bls.n	80108ea <_malloc_r+0x26>
 80108e0:	230c      	movs	r3, #12
 80108e2:	6033      	str	r3, [r6, #0]
 80108e4:	2000      	movs	r0, #0
 80108e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80109c0 <_malloc_r+0xfc>
 80108ee:	f000 f87b 	bl	80109e8 <__malloc_lock>
 80108f2:	f8d8 3000 	ldr.w	r3, [r8]
 80108f6:	461c      	mov	r4, r3
 80108f8:	bb44      	cbnz	r4, 801094c <_malloc_r+0x88>
 80108fa:	4629      	mov	r1, r5
 80108fc:	4630      	mov	r0, r6
 80108fe:	f7ff ffbf 	bl	8010880 <sbrk_aligned>
 8010902:	1c43      	adds	r3, r0, #1
 8010904:	4604      	mov	r4, r0
 8010906:	d158      	bne.n	80109ba <_malloc_r+0xf6>
 8010908:	f8d8 4000 	ldr.w	r4, [r8]
 801090c:	4627      	mov	r7, r4
 801090e:	2f00      	cmp	r7, #0
 8010910:	d143      	bne.n	801099a <_malloc_r+0xd6>
 8010912:	2c00      	cmp	r4, #0
 8010914:	d04b      	beq.n	80109ae <_malloc_r+0xea>
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	4639      	mov	r1, r7
 801091a:	4630      	mov	r0, r6
 801091c:	eb04 0903 	add.w	r9, r4, r3
 8010920:	f000 ff5c 	bl	80117dc <_sbrk_r>
 8010924:	4581      	cmp	r9, r0
 8010926:	d142      	bne.n	80109ae <_malloc_r+0xea>
 8010928:	6821      	ldr	r1, [r4, #0]
 801092a:	1a6d      	subs	r5, r5, r1
 801092c:	4629      	mov	r1, r5
 801092e:	4630      	mov	r0, r6
 8010930:	f7ff ffa6 	bl	8010880 <sbrk_aligned>
 8010934:	3001      	adds	r0, #1
 8010936:	d03a      	beq.n	80109ae <_malloc_r+0xea>
 8010938:	6823      	ldr	r3, [r4, #0]
 801093a:	442b      	add	r3, r5
 801093c:	6023      	str	r3, [r4, #0]
 801093e:	f8d8 3000 	ldr.w	r3, [r8]
 8010942:	685a      	ldr	r2, [r3, #4]
 8010944:	bb62      	cbnz	r2, 80109a0 <_malloc_r+0xdc>
 8010946:	f8c8 7000 	str.w	r7, [r8]
 801094a:	e00f      	b.n	801096c <_malloc_r+0xa8>
 801094c:	6822      	ldr	r2, [r4, #0]
 801094e:	1b52      	subs	r2, r2, r5
 8010950:	d420      	bmi.n	8010994 <_malloc_r+0xd0>
 8010952:	2a0b      	cmp	r2, #11
 8010954:	d917      	bls.n	8010986 <_malloc_r+0xc2>
 8010956:	1961      	adds	r1, r4, r5
 8010958:	42a3      	cmp	r3, r4
 801095a:	6025      	str	r5, [r4, #0]
 801095c:	bf18      	it	ne
 801095e:	6059      	strne	r1, [r3, #4]
 8010960:	6863      	ldr	r3, [r4, #4]
 8010962:	bf08      	it	eq
 8010964:	f8c8 1000 	streq.w	r1, [r8]
 8010968:	5162      	str	r2, [r4, r5]
 801096a:	604b      	str	r3, [r1, #4]
 801096c:	4630      	mov	r0, r6
 801096e:	f000 f841 	bl	80109f4 <__malloc_unlock>
 8010972:	f104 000b 	add.w	r0, r4, #11
 8010976:	1d23      	adds	r3, r4, #4
 8010978:	f020 0007 	bic.w	r0, r0, #7
 801097c:	1ac2      	subs	r2, r0, r3
 801097e:	bf1c      	itt	ne
 8010980:	1a1b      	subne	r3, r3, r0
 8010982:	50a3      	strne	r3, [r4, r2]
 8010984:	e7af      	b.n	80108e6 <_malloc_r+0x22>
 8010986:	6862      	ldr	r2, [r4, #4]
 8010988:	42a3      	cmp	r3, r4
 801098a:	bf0c      	ite	eq
 801098c:	f8c8 2000 	streq.w	r2, [r8]
 8010990:	605a      	strne	r2, [r3, #4]
 8010992:	e7eb      	b.n	801096c <_malloc_r+0xa8>
 8010994:	4623      	mov	r3, r4
 8010996:	6864      	ldr	r4, [r4, #4]
 8010998:	e7ae      	b.n	80108f8 <_malloc_r+0x34>
 801099a:	463c      	mov	r4, r7
 801099c:	687f      	ldr	r7, [r7, #4]
 801099e:	e7b6      	b.n	801090e <_malloc_r+0x4a>
 80109a0:	461a      	mov	r2, r3
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	42a3      	cmp	r3, r4
 80109a6:	d1fb      	bne.n	80109a0 <_malloc_r+0xdc>
 80109a8:	2300      	movs	r3, #0
 80109aa:	6053      	str	r3, [r2, #4]
 80109ac:	e7de      	b.n	801096c <_malloc_r+0xa8>
 80109ae:	230c      	movs	r3, #12
 80109b0:	6033      	str	r3, [r6, #0]
 80109b2:	4630      	mov	r0, r6
 80109b4:	f000 f81e 	bl	80109f4 <__malloc_unlock>
 80109b8:	e794      	b.n	80108e4 <_malloc_r+0x20>
 80109ba:	6005      	str	r5, [r0, #0]
 80109bc:	e7d6      	b.n	801096c <_malloc_r+0xa8>
 80109be:	bf00      	nop
 80109c0:	2000083c 	.word	0x2000083c

080109c4 <__ascii_mbtowc>:
 80109c4:	b082      	sub	sp, #8
 80109c6:	b901      	cbnz	r1, 80109ca <__ascii_mbtowc+0x6>
 80109c8:	a901      	add	r1, sp, #4
 80109ca:	b142      	cbz	r2, 80109de <__ascii_mbtowc+0x1a>
 80109cc:	b14b      	cbz	r3, 80109e2 <__ascii_mbtowc+0x1e>
 80109ce:	7813      	ldrb	r3, [r2, #0]
 80109d0:	600b      	str	r3, [r1, #0]
 80109d2:	7812      	ldrb	r2, [r2, #0]
 80109d4:	1e10      	subs	r0, r2, #0
 80109d6:	bf18      	it	ne
 80109d8:	2001      	movne	r0, #1
 80109da:	b002      	add	sp, #8
 80109dc:	4770      	bx	lr
 80109de:	4610      	mov	r0, r2
 80109e0:	e7fb      	b.n	80109da <__ascii_mbtowc+0x16>
 80109e2:	f06f 0001 	mvn.w	r0, #1
 80109e6:	e7f8      	b.n	80109da <__ascii_mbtowc+0x16>

080109e8 <__malloc_lock>:
 80109e8:	4801      	ldr	r0, [pc, #4]	@ (80109f0 <__malloc_lock+0x8>)
 80109ea:	f7fe bd32 	b.w	800f452 <__retarget_lock_acquire_recursive>
 80109ee:	bf00      	nop
 80109f0:	20000834 	.word	0x20000834

080109f4 <__malloc_unlock>:
 80109f4:	4801      	ldr	r0, [pc, #4]	@ (80109fc <__malloc_unlock+0x8>)
 80109f6:	f7fe bd2d 	b.w	800f454 <__retarget_lock_release_recursive>
 80109fa:	bf00      	nop
 80109fc:	20000834 	.word	0x20000834

08010a00 <_Balloc>:
 8010a00:	b570      	push	{r4, r5, r6, lr}
 8010a02:	69c6      	ldr	r6, [r0, #28]
 8010a04:	4604      	mov	r4, r0
 8010a06:	460d      	mov	r5, r1
 8010a08:	b976      	cbnz	r6, 8010a28 <_Balloc+0x28>
 8010a0a:	2010      	movs	r0, #16
 8010a0c:	f7ff ff30 	bl	8010870 <malloc>
 8010a10:	4602      	mov	r2, r0
 8010a12:	61e0      	str	r0, [r4, #28]
 8010a14:	b920      	cbnz	r0, 8010a20 <_Balloc+0x20>
 8010a16:	4b18      	ldr	r3, [pc, #96]	@ (8010a78 <_Balloc+0x78>)
 8010a18:	4818      	ldr	r0, [pc, #96]	@ (8010a7c <_Balloc+0x7c>)
 8010a1a:	216b      	movs	r1, #107	@ 0x6b
 8010a1c:	f7fe fd3a 	bl	800f494 <__assert_func>
 8010a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a24:	6006      	str	r6, [r0, #0]
 8010a26:	60c6      	str	r6, [r0, #12]
 8010a28:	69e6      	ldr	r6, [r4, #28]
 8010a2a:	68f3      	ldr	r3, [r6, #12]
 8010a2c:	b183      	cbz	r3, 8010a50 <_Balloc+0x50>
 8010a2e:	69e3      	ldr	r3, [r4, #28]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a36:	b9b8      	cbnz	r0, 8010a68 <_Balloc+0x68>
 8010a38:	2101      	movs	r1, #1
 8010a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8010a3e:	1d72      	adds	r2, r6, #5
 8010a40:	0092      	lsls	r2, r2, #2
 8010a42:	4620      	mov	r0, r4
 8010a44:	f000 fee1 	bl	801180a <_calloc_r>
 8010a48:	b160      	cbz	r0, 8010a64 <_Balloc+0x64>
 8010a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a4e:	e00e      	b.n	8010a6e <_Balloc+0x6e>
 8010a50:	2221      	movs	r2, #33	@ 0x21
 8010a52:	2104      	movs	r1, #4
 8010a54:	4620      	mov	r0, r4
 8010a56:	f000 fed8 	bl	801180a <_calloc_r>
 8010a5a:	69e3      	ldr	r3, [r4, #28]
 8010a5c:	60f0      	str	r0, [r6, #12]
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1e4      	bne.n	8010a2e <_Balloc+0x2e>
 8010a64:	2000      	movs	r0, #0
 8010a66:	bd70      	pop	{r4, r5, r6, pc}
 8010a68:	6802      	ldr	r2, [r0, #0]
 8010a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a6e:	2300      	movs	r3, #0
 8010a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a74:	e7f7      	b.n	8010a66 <_Balloc+0x66>
 8010a76:	bf00      	nop
 8010a78:	080140da 	.word	0x080140da
 8010a7c:	08014265 	.word	0x08014265

08010a80 <_Bfree>:
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	69c6      	ldr	r6, [r0, #28]
 8010a84:	4605      	mov	r5, r0
 8010a86:	460c      	mov	r4, r1
 8010a88:	b976      	cbnz	r6, 8010aa8 <_Bfree+0x28>
 8010a8a:	2010      	movs	r0, #16
 8010a8c:	f7ff fef0 	bl	8010870 <malloc>
 8010a90:	4602      	mov	r2, r0
 8010a92:	61e8      	str	r0, [r5, #28]
 8010a94:	b920      	cbnz	r0, 8010aa0 <_Bfree+0x20>
 8010a96:	4b09      	ldr	r3, [pc, #36]	@ (8010abc <_Bfree+0x3c>)
 8010a98:	4809      	ldr	r0, [pc, #36]	@ (8010ac0 <_Bfree+0x40>)
 8010a9a:	218f      	movs	r1, #143	@ 0x8f
 8010a9c:	f7fe fcfa 	bl	800f494 <__assert_func>
 8010aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010aa4:	6006      	str	r6, [r0, #0]
 8010aa6:	60c6      	str	r6, [r0, #12]
 8010aa8:	b13c      	cbz	r4, 8010aba <_Bfree+0x3a>
 8010aaa:	69eb      	ldr	r3, [r5, #28]
 8010aac:	6862      	ldr	r2, [r4, #4]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ab4:	6021      	str	r1, [r4, #0]
 8010ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010aba:	bd70      	pop	{r4, r5, r6, pc}
 8010abc:	080140da 	.word	0x080140da
 8010ac0:	08014265 	.word	0x08014265

08010ac4 <__multadd>:
 8010ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac8:	690d      	ldr	r5, [r1, #16]
 8010aca:	4607      	mov	r7, r0
 8010acc:	460c      	mov	r4, r1
 8010ace:	461e      	mov	r6, r3
 8010ad0:	f101 0c14 	add.w	ip, r1, #20
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8010ada:	b299      	uxth	r1, r3
 8010adc:	fb02 6101 	mla	r1, r2, r1, r6
 8010ae0:	0c1e      	lsrs	r6, r3, #16
 8010ae2:	0c0b      	lsrs	r3, r1, #16
 8010ae4:	fb02 3306 	mla	r3, r2, r6, r3
 8010ae8:	b289      	uxth	r1, r1
 8010aea:	3001      	adds	r0, #1
 8010aec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010af0:	4285      	cmp	r5, r0
 8010af2:	f84c 1b04 	str.w	r1, [ip], #4
 8010af6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010afa:	dcec      	bgt.n	8010ad6 <__multadd+0x12>
 8010afc:	b30e      	cbz	r6, 8010b42 <__multadd+0x7e>
 8010afe:	68a3      	ldr	r3, [r4, #8]
 8010b00:	42ab      	cmp	r3, r5
 8010b02:	dc19      	bgt.n	8010b38 <__multadd+0x74>
 8010b04:	6861      	ldr	r1, [r4, #4]
 8010b06:	4638      	mov	r0, r7
 8010b08:	3101      	adds	r1, #1
 8010b0a:	f7ff ff79 	bl	8010a00 <_Balloc>
 8010b0e:	4680      	mov	r8, r0
 8010b10:	b928      	cbnz	r0, 8010b1e <__multadd+0x5a>
 8010b12:	4602      	mov	r2, r0
 8010b14:	4b0c      	ldr	r3, [pc, #48]	@ (8010b48 <__multadd+0x84>)
 8010b16:	480d      	ldr	r0, [pc, #52]	@ (8010b4c <__multadd+0x88>)
 8010b18:	21ba      	movs	r1, #186	@ 0xba
 8010b1a:	f7fe fcbb 	bl	800f494 <__assert_func>
 8010b1e:	6922      	ldr	r2, [r4, #16]
 8010b20:	3202      	adds	r2, #2
 8010b22:	f104 010c 	add.w	r1, r4, #12
 8010b26:	0092      	lsls	r2, r2, #2
 8010b28:	300c      	adds	r0, #12
 8010b2a:	f7fe fc94 	bl	800f456 <memcpy>
 8010b2e:	4621      	mov	r1, r4
 8010b30:	4638      	mov	r0, r7
 8010b32:	f7ff ffa5 	bl	8010a80 <_Bfree>
 8010b36:	4644      	mov	r4, r8
 8010b38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b3c:	3501      	adds	r5, #1
 8010b3e:	615e      	str	r6, [r3, #20]
 8010b40:	6125      	str	r5, [r4, #16]
 8010b42:	4620      	mov	r0, r4
 8010b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b48:	080141f4 	.word	0x080141f4
 8010b4c:	08014265 	.word	0x08014265

08010b50 <__s2b>:
 8010b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b54:	460c      	mov	r4, r1
 8010b56:	4615      	mov	r5, r2
 8010b58:	461f      	mov	r7, r3
 8010b5a:	2209      	movs	r2, #9
 8010b5c:	3308      	adds	r3, #8
 8010b5e:	4606      	mov	r6, r0
 8010b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b64:	2100      	movs	r1, #0
 8010b66:	2201      	movs	r2, #1
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	db09      	blt.n	8010b80 <__s2b+0x30>
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	f7ff ff47 	bl	8010a00 <_Balloc>
 8010b72:	b940      	cbnz	r0, 8010b86 <__s2b+0x36>
 8010b74:	4602      	mov	r2, r0
 8010b76:	4b19      	ldr	r3, [pc, #100]	@ (8010bdc <__s2b+0x8c>)
 8010b78:	4819      	ldr	r0, [pc, #100]	@ (8010be0 <__s2b+0x90>)
 8010b7a:	21d3      	movs	r1, #211	@ 0xd3
 8010b7c:	f7fe fc8a 	bl	800f494 <__assert_func>
 8010b80:	0052      	lsls	r2, r2, #1
 8010b82:	3101      	adds	r1, #1
 8010b84:	e7f0      	b.n	8010b68 <__s2b+0x18>
 8010b86:	9b08      	ldr	r3, [sp, #32]
 8010b88:	6143      	str	r3, [r0, #20]
 8010b8a:	2d09      	cmp	r5, #9
 8010b8c:	f04f 0301 	mov.w	r3, #1
 8010b90:	6103      	str	r3, [r0, #16]
 8010b92:	dd16      	ble.n	8010bc2 <__s2b+0x72>
 8010b94:	f104 0909 	add.w	r9, r4, #9
 8010b98:	46c8      	mov	r8, r9
 8010b9a:	442c      	add	r4, r5
 8010b9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	3b30      	subs	r3, #48	@ 0x30
 8010ba4:	220a      	movs	r2, #10
 8010ba6:	4630      	mov	r0, r6
 8010ba8:	f7ff ff8c 	bl	8010ac4 <__multadd>
 8010bac:	45a0      	cmp	r8, r4
 8010bae:	d1f5      	bne.n	8010b9c <__s2b+0x4c>
 8010bb0:	f1a5 0408 	sub.w	r4, r5, #8
 8010bb4:	444c      	add	r4, r9
 8010bb6:	1b2d      	subs	r5, r5, r4
 8010bb8:	1963      	adds	r3, r4, r5
 8010bba:	42bb      	cmp	r3, r7
 8010bbc:	db04      	blt.n	8010bc8 <__s2b+0x78>
 8010bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bc2:	340a      	adds	r4, #10
 8010bc4:	2509      	movs	r5, #9
 8010bc6:	e7f6      	b.n	8010bb6 <__s2b+0x66>
 8010bc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010bcc:	4601      	mov	r1, r0
 8010bce:	3b30      	subs	r3, #48	@ 0x30
 8010bd0:	220a      	movs	r2, #10
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	f7ff ff76 	bl	8010ac4 <__multadd>
 8010bd8:	e7ee      	b.n	8010bb8 <__s2b+0x68>
 8010bda:	bf00      	nop
 8010bdc:	080141f4 	.word	0x080141f4
 8010be0:	08014265 	.word	0x08014265

08010be4 <__hi0bits>:
 8010be4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010be8:	4603      	mov	r3, r0
 8010bea:	bf36      	itet	cc
 8010bec:	0403      	lslcc	r3, r0, #16
 8010bee:	2000      	movcs	r0, #0
 8010bf0:	2010      	movcc	r0, #16
 8010bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010bf6:	bf3c      	itt	cc
 8010bf8:	021b      	lslcc	r3, r3, #8
 8010bfa:	3008      	addcc	r0, #8
 8010bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c00:	bf3c      	itt	cc
 8010c02:	011b      	lslcc	r3, r3, #4
 8010c04:	3004      	addcc	r0, #4
 8010c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c0a:	bf3c      	itt	cc
 8010c0c:	009b      	lslcc	r3, r3, #2
 8010c0e:	3002      	addcc	r0, #2
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	db05      	blt.n	8010c20 <__hi0bits+0x3c>
 8010c14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010c18:	f100 0001 	add.w	r0, r0, #1
 8010c1c:	bf08      	it	eq
 8010c1e:	2020      	moveq	r0, #32
 8010c20:	4770      	bx	lr

08010c22 <__lo0bits>:
 8010c22:	6803      	ldr	r3, [r0, #0]
 8010c24:	4602      	mov	r2, r0
 8010c26:	f013 0007 	ands.w	r0, r3, #7
 8010c2a:	d00b      	beq.n	8010c44 <__lo0bits+0x22>
 8010c2c:	07d9      	lsls	r1, r3, #31
 8010c2e:	d421      	bmi.n	8010c74 <__lo0bits+0x52>
 8010c30:	0798      	lsls	r0, r3, #30
 8010c32:	bf49      	itett	mi
 8010c34:	085b      	lsrmi	r3, r3, #1
 8010c36:	089b      	lsrpl	r3, r3, #2
 8010c38:	2001      	movmi	r0, #1
 8010c3a:	6013      	strmi	r3, [r2, #0]
 8010c3c:	bf5c      	itt	pl
 8010c3e:	6013      	strpl	r3, [r2, #0]
 8010c40:	2002      	movpl	r0, #2
 8010c42:	4770      	bx	lr
 8010c44:	b299      	uxth	r1, r3
 8010c46:	b909      	cbnz	r1, 8010c4c <__lo0bits+0x2a>
 8010c48:	0c1b      	lsrs	r3, r3, #16
 8010c4a:	2010      	movs	r0, #16
 8010c4c:	b2d9      	uxtb	r1, r3
 8010c4e:	b909      	cbnz	r1, 8010c54 <__lo0bits+0x32>
 8010c50:	3008      	adds	r0, #8
 8010c52:	0a1b      	lsrs	r3, r3, #8
 8010c54:	0719      	lsls	r1, r3, #28
 8010c56:	bf04      	itt	eq
 8010c58:	091b      	lsreq	r3, r3, #4
 8010c5a:	3004      	addeq	r0, #4
 8010c5c:	0799      	lsls	r1, r3, #30
 8010c5e:	bf04      	itt	eq
 8010c60:	089b      	lsreq	r3, r3, #2
 8010c62:	3002      	addeq	r0, #2
 8010c64:	07d9      	lsls	r1, r3, #31
 8010c66:	d403      	bmi.n	8010c70 <__lo0bits+0x4e>
 8010c68:	085b      	lsrs	r3, r3, #1
 8010c6a:	f100 0001 	add.w	r0, r0, #1
 8010c6e:	d003      	beq.n	8010c78 <__lo0bits+0x56>
 8010c70:	6013      	str	r3, [r2, #0]
 8010c72:	4770      	bx	lr
 8010c74:	2000      	movs	r0, #0
 8010c76:	4770      	bx	lr
 8010c78:	2020      	movs	r0, #32
 8010c7a:	4770      	bx	lr

08010c7c <__i2b>:
 8010c7c:	b510      	push	{r4, lr}
 8010c7e:	460c      	mov	r4, r1
 8010c80:	2101      	movs	r1, #1
 8010c82:	f7ff febd 	bl	8010a00 <_Balloc>
 8010c86:	4602      	mov	r2, r0
 8010c88:	b928      	cbnz	r0, 8010c96 <__i2b+0x1a>
 8010c8a:	4b05      	ldr	r3, [pc, #20]	@ (8010ca0 <__i2b+0x24>)
 8010c8c:	4805      	ldr	r0, [pc, #20]	@ (8010ca4 <__i2b+0x28>)
 8010c8e:	f240 1145 	movw	r1, #325	@ 0x145
 8010c92:	f7fe fbff 	bl	800f494 <__assert_func>
 8010c96:	2301      	movs	r3, #1
 8010c98:	6144      	str	r4, [r0, #20]
 8010c9a:	6103      	str	r3, [r0, #16]
 8010c9c:	bd10      	pop	{r4, pc}
 8010c9e:	bf00      	nop
 8010ca0:	080141f4 	.word	0x080141f4
 8010ca4:	08014265 	.word	0x08014265

08010ca8 <__multiply>:
 8010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	4614      	mov	r4, r2
 8010cae:	690a      	ldr	r2, [r1, #16]
 8010cb0:	6923      	ldr	r3, [r4, #16]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	bfa8      	it	ge
 8010cb6:	4623      	movge	r3, r4
 8010cb8:	460f      	mov	r7, r1
 8010cba:	bfa4      	itt	ge
 8010cbc:	460c      	movge	r4, r1
 8010cbe:	461f      	movge	r7, r3
 8010cc0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010cc4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010cc8:	68a3      	ldr	r3, [r4, #8]
 8010cca:	6861      	ldr	r1, [r4, #4]
 8010ccc:	eb0a 0609 	add.w	r6, sl, r9
 8010cd0:	42b3      	cmp	r3, r6
 8010cd2:	b085      	sub	sp, #20
 8010cd4:	bfb8      	it	lt
 8010cd6:	3101      	addlt	r1, #1
 8010cd8:	f7ff fe92 	bl	8010a00 <_Balloc>
 8010cdc:	b930      	cbnz	r0, 8010cec <__multiply+0x44>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	4b44      	ldr	r3, [pc, #272]	@ (8010df4 <__multiply+0x14c>)
 8010ce2:	4845      	ldr	r0, [pc, #276]	@ (8010df8 <__multiply+0x150>)
 8010ce4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010ce8:	f7fe fbd4 	bl	800f494 <__assert_func>
 8010cec:	f100 0514 	add.w	r5, r0, #20
 8010cf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010cf4:	462b      	mov	r3, r5
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	4543      	cmp	r3, r8
 8010cfa:	d321      	bcc.n	8010d40 <__multiply+0x98>
 8010cfc:	f107 0114 	add.w	r1, r7, #20
 8010d00:	f104 0214 	add.w	r2, r4, #20
 8010d04:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010d08:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010d0c:	9302      	str	r3, [sp, #8]
 8010d0e:	1b13      	subs	r3, r2, r4
 8010d10:	3b15      	subs	r3, #21
 8010d12:	f023 0303 	bic.w	r3, r3, #3
 8010d16:	3304      	adds	r3, #4
 8010d18:	f104 0715 	add.w	r7, r4, #21
 8010d1c:	42ba      	cmp	r2, r7
 8010d1e:	bf38      	it	cc
 8010d20:	2304      	movcc	r3, #4
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	9b02      	ldr	r3, [sp, #8]
 8010d26:	9103      	str	r1, [sp, #12]
 8010d28:	428b      	cmp	r3, r1
 8010d2a:	d80c      	bhi.n	8010d46 <__multiply+0x9e>
 8010d2c:	2e00      	cmp	r6, #0
 8010d2e:	dd03      	ble.n	8010d38 <__multiply+0x90>
 8010d30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d05b      	beq.n	8010df0 <__multiply+0x148>
 8010d38:	6106      	str	r6, [r0, #16]
 8010d3a:	b005      	add	sp, #20
 8010d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d40:	f843 2b04 	str.w	r2, [r3], #4
 8010d44:	e7d8      	b.n	8010cf8 <__multiply+0x50>
 8010d46:	f8b1 a000 	ldrh.w	sl, [r1]
 8010d4a:	f1ba 0f00 	cmp.w	sl, #0
 8010d4e:	d024      	beq.n	8010d9a <__multiply+0xf2>
 8010d50:	f104 0e14 	add.w	lr, r4, #20
 8010d54:	46a9      	mov	r9, r5
 8010d56:	f04f 0c00 	mov.w	ip, #0
 8010d5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d5e:	f8d9 3000 	ldr.w	r3, [r9]
 8010d62:	fa1f fb87 	uxth.w	fp, r7
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	fb0a 330b 	mla	r3, sl, fp, r3
 8010d6c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010d70:	f8d9 7000 	ldr.w	r7, [r9]
 8010d74:	4463      	add	r3, ip
 8010d76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010d7a:	fb0a c70b 	mla	r7, sl, fp, ip
 8010d7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010d88:	4572      	cmp	r2, lr
 8010d8a:	f849 3b04 	str.w	r3, [r9], #4
 8010d8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010d92:	d8e2      	bhi.n	8010d5a <__multiply+0xb2>
 8010d94:	9b01      	ldr	r3, [sp, #4]
 8010d96:	f845 c003 	str.w	ip, [r5, r3]
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010da0:	3104      	adds	r1, #4
 8010da2:	f1b9 0f00 	cmp.w	r9, #0
 8010da6:	d021      	beq.n	8010dec <__multiply+0x144>
 8010da8:	682b      	ldr	r3, [r5, #0]
 8010daa:	f104 0c14 	add.w	ip, r4, #20
 8010dae:	46ae      	mov	lr, r5
 8010db0:	f04f 0a00 	mov.w	sl, #0
 8010db4:	f8bc b000 	ldrh.w	fp, [ip]
 8010db8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010dbc:	fb09 770b 	mla	r7, r9, fp, r7
 8010dc0:	4457      	add	r7, sl
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010dc8:	f84e 3b04 	str.w	r3, [lr], #4
 8010dcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010dd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010dd4:	f8be 3000 	ldrh.w	r3, [lr]
 8010dd8:	fb09 330a 	mla	r3, r9, sl, r3
 8010ddc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010de0:	4562      	cmp	r2, ip
 8010de2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010de6:	d8e5      	bhi.n	8010db4 <__multiply+0x10c>
 8010de8:	9f01      	ldr	r7, [sp, #4]
 8010dea:	51eb      	str	r3, [r5, r7]
 8010dec:	3504      	adds	r5, #4
 8010dee:	e799      	b.n	8010d24 <__multiply+0x7c>
 8010df0:	3e01      	subs	r6, #1
 8010df2:	e79b      	b.n	8010d2c <__multiply+0x84>
 8010df4:	080141f4 	.word	0x080141f4
 8010df8:	08014265 	.word	0x08014265

08010dfc <__pow5mult>:
 8010dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e00:	4615      	mov	r5, r2
 8010e02:	f012 0203 	ands.w	r2, r2, #3
 8010e06:	4607      	mov	r7, r0
 8010e08:	460e      	mov	r6, r1
 8010e0a:	d007      	beq.n	8010e1c <__pow5mult+0x20>
 8010e0c:	4c25      	ldr	r4, [pc, #148]	@ (8010ea4 <__pow5mult+0xa8>)
 8010e0e:	3a01      	subs	r2, #1
 8010e10:	2300      	movs	r3, #0
 8010e12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e16:	f7ff fe55 	bl	8010ac4 <__multadd>
 8010e1a:	4606      	mov	r6, r0
 8010e1c:	10ad      	asrs	r5, r5, #2
 8010e1e:	d03d      	beq.n	8010e9c <__pow5mult+0xa0>
 8010e20:	69fc      	ldr	r4, [r7, #28]
 8010e22:	b97c      	cbnz	r4, 8010e44 <__pow5mult+0x48>
 8010e24:	2010      	movs	r0, #16
 8010e26:	f7ff fd23 	bl	8010870 <malloc>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	61f8      	str	r0, [r7, #28]
 8010e2e:	b928      	cbnz	r0, 8010e3c <__pow5mult+0x40>
 8010e30:	4b1d      	ldr	r3, [pc, #116]	@ (8010ea8 <__pow5mult+0xac>)
 8010e32:	481e      	ldr	r0, [pc, #120]	@ (8010eac <__pow5mult+0xb0>)
 8010e34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010e38:	f7fe fb2c 	bl	800f494 <__assert_func>
 8010e3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e40:	6004      	str	r4, [r0, #0]
 8010e42:	60c4      	str	r4, [r0, #12]
 8010e44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010e48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e4c:	b94c      	cbnz	r4, 8010e62 <__pow5mult+0x66>
 8010e4e:	f240 2171 	movw	r1, #625	@ 0x271
 8010e52:	4638      	mov	r0, r7
 8010e54:	f7ff ff12 	bl	8010c7c <__i2b>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e5e:	4604      	mov	r4, r0
 8010e60:	6003      	str	r3, [r0, #0]
 8010e62:	f04f 0900 	mov.w	r9, #0
 8010e66:	07eb      	lsls	r3, r5, #31
 8010e68:	d50a      	bpl.n	8010e80 <__pow5mult+0x84>
 8010e6a:	4631      	mov	r1, r6
 8010e6c:	4622      	mov	r2, r4
 8010e6e:	4638      	mov	r0, r7
 8010e70:	f7ff ff1a 	bl	8010ca8 <__multiply>
 8010e74:	4631      	mov	r1, r6
 8010e76:	4680      	mov	r8, r0
 8010e78:	4638      	mov	r0, r7
 8010e7a:	f7ff fe01 	bl	8010a80 <_Bfree>
 8010e7e:	4646      	mov	r6, r8
 8010e80:	106d      	asrs	r5, r5, #1
 8010e82:	d00b      	beq.n	8010e9c <__pow5mult+0xa0>
 8010e84:	6820      	ldr	r0, [r4, #0]
 8010e86:	b938      	cbnz	r0, 8010e98 <__pow5mult+0x9c>
 8010e88:	4622      	mov	r2, r4
 8010e8a:	4621      	mov	r1, r4
 8010e8c:	4638      	mov	r0, r7
 8010e8e:	f7ff ff0b 	bl	8010ca8 <__multiply>
 8010e92:	6020      	str	r0, [r4, #0]
 8010e94:	f8c0 9000 	str.w	r9, [r0]
 8010e98:	4604      	mov	r4, r0
 8010e9a:	e7e4      	b.n	8010e66 <__pow5mult+0x6a>
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ea2:	bf00      	nop
 8010ea4:	080142c0 	.word	0x080142c0
 8010ea8:	080140da 	.word	0x080140da
 8010eac:	08014265 	.word	0x08014265

08010eb0 <__lshift>:
 8010eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb4:	460c      	mov	r4, r1
 8010eb6:	6849      	ldr	r1, [r1, #4]
 8010eb8:	6923      	ldr	r3, [r4, #16]
 8010eba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ebe:	68a3      	ldr	r3, [r4, #8]
 8010ec0:	4607      	mov	r7, r0
 8010ec2:	4691      	mov	r9, r2
 8010ec4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ec8:	f108 0601 	add.w	r6, r8, #1
 8010ecc:	42b3      	cmp	r3, r6
 8010ece:	db0b      	blt.n	8010ee8 <__lshift+0x38>
 8010ed0:	4638      	mov	r0, r7
 8010ed2:	f7ff fd95 	bl	8010a00 <_Balloc>
 8010ed6:	4605      	mov	r5, r0
 8010ed8:	b948      	cbnz	r0, 8010eee <__lshift+0x3e>
 8010eda:	4602      	mov	r2, r0
 8010edc:	4b28      	ldr	r3, [pc, #160]	@ (8010f80 <__lshift+0xd0>)
 8010ede:	4829      	ldr	r0, [pc, #164]	@ (8010f84 <__lshift+0xd4>)
 8010ee0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010ee4:	f7fe fad6 	bl	800f494 <__assert_func>
 8010ee8:	3101      	adds	r1, #1
 8010eea:	005b      	lsls	r3, r3, #1
 8010eec:	e7ee      	b.n	8010ecc <__lshift+0x1c>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	f100 0114 	add.w	r1, r0, #20
 8010ef4:	f100 0210 	add.w	r2, r0, #16
 8010ef8:	4618      	mov	r0, r3
 8010efa:	4553      	cmp	r3, sl
 8010efc:	db33      	blt.n	8010f66 <__lshift+0xb6>
 8010efe:	6920      	ldr	r0, [r4, #16]
 8010f00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f04:	f104 0314 	add.w	r3, r4, #20
 8010f08:	f019 091f 	ands.w	r9, r9, #31
 8010f0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f14:	d02b      	beq.n	8010f6e <__lshift+0xbe>
 8010f16:	f1c9 0e20 	rsb	lr, r9, #32
 8010f1a:	468a      	mov	sl, r1
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	6818      	ldr	r0, [r3, #0]
 8010f20:	fa00 f009 	lsl.w	r0, r0, r9
 8010f24:	4310      	orrs	r0, r2
 8010f26:	f84a 0b04 	str.w	r0, [sl], #4
 8010f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f2e:	459c      	cmp	ip, r3
 8010f30:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f34:	d8f3      	bhi.n	8010f1e <__lshift+0x6e>
 8010f36:	ebac 0304 	sub.w	r3, ip, r4
 8010f3a:	3b15      	subs	r3, #21
 8010f3c:	f023 0303 	bic.w	r3, r3, #3
 8010f40:	3304      	adds	r3, #4
 8010f42:	f104 0015 	add.w	r0, r4, #21
 8010f46:	4584      	cmp	ip, r0
 8010f48:	bf38      	it	cc
 8010f4a:	2304      	movcc	r3, #4
 8010f4c:	50ca      	str	r2, [r1, r3]
 8010f4e:	b10a      	cbz	r2, 8010f54 <__lshift+0xa4>
 8010f50:	f108 0602 	add.w	r6, r8, #2
 8010f54:	3e01      	subs	r6, #1
 8010f56:	4638      	mov	r0, r7
 8010f58:	612e      	str	r6, [r5, #16]
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	f7ff fd90 	bl	8010a80 <_Bfree>
 8010f60:	4628      	mov	r0, r5
 8010f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	e7c5      	b.n	8010efa <__lshift+0x4a>
 8010f6e:	3904      	subs	r1, #4
 8010f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f78:	459c      	cmp	ip, r3
 8010f7a:	d8f9      	bhi.n	8010f70 <__lshift+0xc0>
 8010f7c:	e7ea      	b.n	8010f54 <__lshift+0xa4>
 8010f7e:	bf00      	nop
 8010f80:	080141f4 	.word	0x080141f4
 8010f84:	08014265 	.word	0x08014265

08010f88 <__mcmp>:
 8010f88:	690a      	ldr	r2, [r1, #16]
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	6900      	ldr	r0, [r0, #16]
 8010f8e:	1a80      	subs	r0, r0, r2
 8010f90:	b530      	push	{r4, r5, lr}
 8010f92:	d10e      	bne.n	8010fb2 <__mcmp+0x2a>
 8010f94:	3314      	adds	r3, #20
 8010f96:	3114      	adds	r1, #20
 8010f98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010f9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010fa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010fa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010fa8:	4295      	cmp	r5, r2
 8010faa:	d003      	beq.n	8010fb4 <__mcmp+0x2c>
 8010fac:	d205      	bcs.n	8010fba <__mcmp+0x32>
 8010fae:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb2:	bd30      	pop	{r4, r5, pc}
 8010fb4:	42a3      	cmp	r3, r4
 8010fb6:	d3f3      	bcc.n	8010fa0 <__mcmp+0x18>
 8010fb8:	e7fb      	b.n	8010fb2 <__mcmp+0x2a>
 8010fba:	2001      	movs	r0, #1
 8010fbc:	e7f9      	b.n	8010fb2 <__mcmp+0x2a>
	...

08010fc0 <__mdiff>:
 8010fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	4689      	mov	r9, r1
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	4611      	mov	r1, r2
 8010fca:	4648      	mov	r0, r9
 8010fcc:	4614      	mov	r4, r2
 8010fce:	f7ff ffdb 	bl	8010f88 <__mcmp>
 8010fd2:	1e05      	subs	r5, r0, #0
 8010fd4:	d112      	bne.n	8010ffc <__mdiff+0x3c>
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f7ff fd11 	bl	8010a00 <_Balloc>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	b928      	cbnz	r0, 8010fee <__mdiff+0x2e>
 8010fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80110e0 <__mdiff+0x120>)
 8010fe4:	f240 2137 	movw	r1, #567	@ 0x237
 8010fe8:	483e      	ldr	r0, [pc, #248]	@ (80110e4 <__mdiff+0x124>)
 8010fea:	f7fe fa53 	bl	800f494 <__assert_func>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ff4:	4610      	mov	r0, r2
 8010ff6:	b003      	add	sp, #12
 8010ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffc:	bfbc      	itt	lt
 8010ffe:	464b      	movlt	r3, r9
 8011000:	46a1      	movlt	r9, r4
 8011002:	4630      	mov	r0, r6
 8011004:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011008:	bfba      	itte	lt
 801100a:	461c      	movlt	r4, r3
 801100c:	2501      	movlt	r5, #1
 801100e:	2500      	movge	r5, #0
 8011010:	f7ff fcf6 	bl	8010a00 <_Balloc>
 8011014:	4602      	mov	r2, r0
 8011016:	b918      	cbnz	r0, 8011020 <__mdiff+0x60>
 8011018:	4b31      	ldr	r3, [pc, #196]	@ (80110e0 <__mdiff+0x120>)
 801101a:	f240 2145 	movw	r1, #581	@ 0x245
 801101e:	e7e3      	b.n	8010fe8 <__mdiff+0x28>
 8011020:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011024:	6926      	ldr	r6, [r4, #16]
 8011026:	60c5      	str	r5, [r0, #12]
 8011028:	f109 0310 	add.w	r3, r9, #16
 801102c:	f109 0514 	add.w	r5, r9, #20
 8011030:	f104 0e14 	add.w	lr, r4, #20
 8011034:	f100 0b14 	add.w	fp, r0, #20
 8011038:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801103c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011040:	9301      	str	r3, [sp, #4]
 8011042:	46d9      	mov	r9, fp
 8011044:	f04f 0c00 	mov.w	ip, #0
 8011048:	9b01      	ldr	r3, [sp, #4]
 801104a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801104e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011052:	9301      	str	r3, [sp, #4]
 8011054:	fa1f f38a 	uxth.w	r3, sl
 8011058:	4619      	mov	r1, r3
 801105a:	b283      	uxth	r3, r0
 801105c:	1acb      	subs	r3, r1, r3
 801105e:	0c00      	lsrs	r0, r0, #16
 8011060:	4463      	add	r3, ip
 8011062:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011066:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801106a:	b29b      	uxth	r3, r3
 801106c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011070:	4576      	cmp	r6, lr
 8011072:	f849 3b04 	str.w	r3, [r9], #4
 8011076:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801107a:	d8e5      	bhi.n	8011048 <__mdiff+0x88>
 801107c:	1b33      	subs	r3, r6, r4
 801107e:	3b15      	subs	r3, #21
 8011080:	f023 0303 	bic.w	r3, r3, #3
 8011084:	3415      	adds	r4, #21
 8011086:	3304      	adds	r3, #4
 8011088:	42a6      	cmp	r6, r4
 801108a:	bf38      	it	cc
 801108c:	2304      	movcc	r3, #4
 801108e:	441d      	add	r5, r3
 8011090:	445b      	add	r3, fp
 8011092:	461e      	mov	r6, r3
 8011094:	462c      	mov	r4, r5
 8011096:	4544      	cmp	r4, r8
 8011098:	d30e      	bcc.n	80110b8 <__mdiff+0xf8>
 801109a:	f108 0103 	add.w	r1, r8, #3
 801109e:	1b49      	subs	r1, r1, r5
 80110a0:	f021 0103 	bic.w	r1, r1, #3
 80110a4:	3d03      	subs	r5, #3
 80110a6:	45a8      	cmp	r8, r5
 80110a8:	bf38      	it	cc
 80110aa:	2100      	movcc	r1, #0
 80110ac:	440b      	add	r3, r1
 80110ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80110b2:	b191      	cbz	r1, 80110da <__mdiff+0x11a>
 80110b4:	6117      	str	r7, [r2, #16]
 80110b6:	e79d      	b.n	8010ff4 <__mdiff+0x34>
 80110b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80110bc:	46e6      	mov	lr, ip
 80110be:	0c08      	lsrs	r0, r1, #16
 80110c0:	fa1c fc81 	uxtah	ip, ip, r1
 80110c4:	4471      	add	r1, lr
 80110c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80110ca:	b289      	uxth	r1, r1
 80110cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80110d0:	f846 1b04 	str.w	r1, [r6], #4
 80110d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110d8:	e7dd      	b.n	8011096 <__mdiff+0xd6>
 80110da:	3f01      	subs	r7, #1
 80110dc:	e7e7      	b.n	80110ae <__mdiff+0xee>
 80110de:	bf00      	nop
 80110e0:	080141f4 	.word	0x080141f4
 80110e4:	08014265 	.word	0x08014265

080110e8 <__ulp>:
 80110e8:	b082      	sub	sp, #8
 80110ea:	ed8d 0b00 	vstr	d0, [sp]
 80110ee:	9a01      	ldr	r2, [sp, #4]
 80110f0:	4b0f      	ldr	r3, [pc, #60]	@ (8011130 <__ulp+0x48>)
 80110f2:	4013      	ands	r3, r2
 80110f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	dc08      	bgt.n	801110e <__ulp+0x26>
 80110fc:	425b      	negs	r3, r3
 80110fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011102:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011106:	da04      	bge.n	8011112 <__ulp+0x2a>
 8011108:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801110c:	4113      	asrs	r3, r2
 801110e:	2200      	movs	r2, #0
 8011110:	e008      	b.n	8011124 <__ulp+0x3c>
 8011112:	f1a2 0314 	sub.w	r3, r2, #20
 8011116:	2b1e      	cmp	r3, #30
 8011118:	bfda      	itte	le
 801111a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801111e:	40da      	lsrle	r2, r3
 8011120:	2201      	movgt	r2, #1
 8011122:	2300      	movs	r3, #0
 8011124:	4619      	mov	r1, r3
 8011126:	4610      	mov	r0, r2
 8011128:	ec41 0b10 	vmov	d0, r0, r1
 801112c:	b002      	add	sp, #8
 801112e:	4770      	bx	lr
 8011130:	7ff00000 	.word	0x7ff00000

08011134 <__b2d>:
 8011134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011138:	6906      	ldr	r6, [r0, #16]
 801113a:	f100 0814 	add.w	r8, r0, #20
 801113e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011142:	1f37      	subs	r7, r6, #4
 8011144:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011148:	4610      	mov	r0, r2
 801114a:	f7ff fd4b 	bl	8010be4 <__hi0bits>
 801114e:	f1c0 0320 	rsb	r3, r0, #32
 8011152:	280a      	cmp	r0, #10
 8011154:	600b      	str	r3, [r1, #0]
 8011156:	491b      	ldr	r1, [pc, #108]	@ (80111c4 <__b2d+0x90>)
 8011158:	dc15      	bgt.n	8011186 <__b2d+0x52>
 801115a:	f1c0 0c0b 	rsb	ip, r0, #11
 801115e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011162:	45b8      	cmp	r8, r7
 8011164:	ea43 0501 	orr.w	r5, r3, r1
 8011168:	bf34      	ite	cc
 801116a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801116e:	2300      	movcs	r3, #0
 8011170:	3015      	adds	r0, #21
 8011172:	fa02 f000 	lsl.w	r0, r2, r0
 8011176:	fa23 f30c 	lsr.w	r3, r3, ip
 801117a:	4303      	orrs	r3, r0
 801117c:	461c      	mov	r4, r3
 801117e:	ec45 4b10 	vmov	d0, r4, r5
 8011182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011186:	45b8      	cmp	r8, r7
 8011188:	bf3a      	itte	cc
 801118a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801118e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011192:	2300      	movcs	r3, #0
 8011194:	380b      	subs	r0, #11
 8011196:	d012      	beq.n	80111be <__b2d+0x8a>
 8011198:	f1c0 0120 	rsb	r1, r0, #32
 801119c:	fa23 f401 	lsr.w	r4, r3, r1
 80111a0:	4082      	lsls	r2, r0
 80111a2:	4322      	orrs	r2, r4
 80111a4:	4547      	cmp	r7, r8
 80111a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80111aa:	bf8c      	ite	hi
 80111ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80111b0:	2200      	movls	r2, #0
 80111b2:	4083      	lsls	r3, r0
 80111b4:	40ca      	lsrs	r2, r1
 80111b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80111ba:	4313      	orrs	r3, r2
 80111bc:	e7de      	b.n	801117c <__b2d+0x48>
 80111be:	ea42 0501 	orr.w	r5, r2, r1
 80111c2:	e7db      	b.n	801117c <__b2d+0x48>
 80111c4:	3ff00000 	.word	0x3ff00000

080111c8 <__d2b>:
 80111c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111cc:	460f      	mov	r7, r1
 80111ce:	2101      	movs	r1, #1
 80111d0:	ec59 8b10 	vmov	r8, r9, d0
 80111d4:	4616      	mov	r6, r2
 80111d6:	f7ff fc13 	bl	8010a00 <_Balloc>
 80111da:	4604      	mov	r4, r0
 80111dc:	b930      	cbnz	r0, 80111ec <__d2b+0x24>
 80111de:	4602      	mov	r2, r0
 80111e0:	4b23      	ldr	r3, [pc, #140]	@ (8011270 <__d2b+0xa8>)
 80111e2:	4824      	ldr	r0, [pc, #144]	@ (8011274 <__d2b+0xac>)
 80111e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80111e8:	f7fe f954 	bl	800f494 <__assert_func>
 80111ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111f4:	b10d      	cbz	r5, 80111fa <__d2b+0x32>
 80111f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	f1b8 0300 	subs.w	r3, r8, #0
 8011200:	d023      	beq.n	801124a <__d2b+0x82>
 8011202:	4668      	mov	r0, sp
 8011204:	9300      	str	r3, [sp, #0]
 8011206:	f7ff fd0c 	bl	8010c22 <__lo0bits>
 801120a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801120e:	b1d0      	cbz	r0, 8011246 <__d2b+0x7e>
 8011210:	f1c0 0320 	rsb	r3, r0, #32
 8011214:	fa02 f303 	lsl.w	r3, r2, r3
 8011218:	430b      	orrs	r3, r1
 801121a:	40c2      	lsrs	r2, r0
 801121c:	6163      	str	r3, [r4, #20]
 801121e:	9201      	str	r2, [sp, #4]
 8011220:	9b01      	ldr	r3, [sp, #4]
 8011222:	61a3      	str	r3, [r4, #24]
 8011224:	2b00      	cmp	r3, #0
 8011226:	bf0c      	ite	eq
 8011228:	2201      	moveq	r2, #1
 801122a:	2202      	movne	r2, #2
 801122c:	6122      	str	r2, [r4, #16]
 801122e:	b1a5      	cbz	r5, 801125a <__d2b+0x92>
 8011230:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011234:	4405      	add	r5, r0
 8011236:	603d      	str	r5, [r7, #0]
 8011238:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801123c:	6030      	str	r0, [r6, #0]
 801123e:	4620      	mov	r0, r4
 8011240:	b003      	add	sp, #12
 8011242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011246:	6161      	str	r1, [r4, #20]
 8011248:	e7ea      	b.n	8011220 <__d2b+0x58>
 801124a:	a801      	add	r0, sp, #4
 801124c:	f7ff fce9 	bl	8010c22 <__lo0bits>
 8011250:	9b01      	ldr	r3, [sp, #4]
 8011252:	6163      	str	r3, [r4, #20]
 8011254:	3020      	adds	r0, #32
 8011256:	2201      	movs	r2, #1
 8011258:	e7e8      	b.n	801122c <__d2b+0x64>
 801125a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801125e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011262:	6038      	str	r0, [r7, #0]
 8011264:	6918      	ldr	r0, [r3, #16]
 8011266:	f7ff fcbd 	bl	8010be4 <__hi0bits>
 801126a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801126e:	e7e5      	b.n	801123c <__d2b+0x74>
 8011270:	080141f4 	.word	0x080141f4
 8011274:	08014265 	.word	0x08014265

08011278 <__ratio>:
 8011278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127c:	b085      	sub	sp, #20
 801127e:	e9cd 1000 	strd	r1, r0, [sp]
 8011282:	a902      	add	r1, sp, #8
 8011284:	f7ff ff56 	bl	8011134 <__b2d>
 8011288:	9800      	ldr	r0, [sp, #0]
 801128a:	a903      	add	r1, sp, #12
 801128c:	ec55 4b10 	vmov	r4, r5, d0
 8011290:	f7ff ff50 	bl	8011134 <__b2d>
 8011294:	9b01      	ldr	r3, [sp, #4]
 8011296:	6919      	ldr	r1, [r3, #16]
 8011298:	9b00      	ldr	r3, [sp, #0]
 801129a:	691b      	ldr	r3, [r3, #16]
 801129c:	1ac9      	subs	r1, r1, r3
 801129e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80112a2:	1a9b      	subs	r3, r3, r2
 80112a4:	ec5b ab10 	vmov	sl, fp, d0
 80112a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	bfce      	itee	gt
 80112b0:	462a      	movgt	r2, r5
 80112b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80112b6:	465a      	movle	r2, fp
 80112b8:	462f      	mov	r7, r5
 80112ba:	46d9      	mov	r9, fp
 80112bc:	bfcc      	ite	gt
 80112be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80112c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80112c6:	464b      	mov	r3, r9
 80112c8:	4652      	mov	r2, sl
 80112ca:	4620      	mov	r0, r4
 80112cc:	4639      	mov	r1, r7
 80112ce:	f7ef fabd 	bl	800084c <__aeabi_ddiv>
 80112d2:	ec41 0b10 	vmov	d0, r0, r1
 80112d6:	b005      	add	sp, #20
 80112d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080112dc <__copybits>:
 80112dc:	3901      	subs	r1, #1
 80112de:	b570      	push	{r4, r5, r6, lr}
 80112e0:	1149      	asrs	r1, r1, #5
 80112e2:	6914      	ldr	r4, [r2, #16]
 80112e4:	3101      	adds	r1, #1
 80112e6:	f102 0314 	add.w	r3, r2, #20
 80112ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80112ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80112f2:	1f05      	subs	r5, r0, #4
 80112f4:	42a3      	cmp	r3, r4
 80112f6:	d30c      	bcc.n	8011312 <__copybits+0x36>
 80112f8:	1aa3      	subs	r3, r4, r2
 80112fa:	3b11      	subs	r3, #17
 80112fc:	f023 0303 	bic.w	r3, r3, #3
 8011300:	3211      	adds	r2, #17
 8011302:	42a2      	cmp	r2, r4
 8011304:	bf88      	it	hi
 8011306:	2300      	movhi	r3, #0
 8011308:	4418      	add	r0, r3
 801130a:	2300      	movs	r3, #0
 801130c:	4288      	cmp	r0, r1
 801130e:	d305      	bcc.n	801131c <__copybits+0x40>
 8011310:	bd70      	pop	{r4, r5, r6, pc}
 8011312:	f853 6b04 	ldr.w	r6, [r3], #4
 8011316:	f845 6f04 	str.w	r6, [r5, #4]!
 801131a:	e7eb      	b.n	80112f4 <__copybits+0x18>
 801131c:	f840 3b04 	str.w	r3, [r0], #4
 8011320:	e7f4      	b.n	801130c <__copybits+0x30>

08011322 <__any_on>:
 8011322:	f100 0214 	add.w	r2, r0, #20
 8011326:	6900      	ldr	r0, [r0, #16]
 8011328:	114b      	asrs	r3, r1, #5
 801132a:	4298      	cmp	r0, r3
 801132c:	b510      	push	{r4, lr}
 801132e:	db11      	blt.n	8011354 <__any_on+0x32>
 8011330:	dd0a      	ble.n	8011348 <__any_on+0x26>
 8011332:	f011 011f 	ands.w	r1, r1, #31
 8011336:	d007      	beq.n	8011348 <__any_on+0x26>
 8011338:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801133c:	fa24 f001 	lsr.w	r0, r4, r1
 8011340:	fa00 f101 	lsl.w	r1, r0, r1
 8011344:	428c      	cmp	r4, r1
 8011346:	d10b      	bne.n	8011360 <__any_on+0x3e>
 8011348:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801134c:	4293      	cmp	r3, r2
 801134e:	d803      	bhi.n	8011358 <__any_on+0x36>
 8011350:	2000      	movs	r0, #0
 8011352:	bd10      	pop	{r4, pc}
 8011354:	4603      	mov	r3, r0
 8011356:	e7f7      	b.n	8011348 <__any_on+0x26>
 8011358:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801135c:	2900      	cmp	r1, #0
 801135e:	d0f5      	beq.n	801134c <__any_on+0x2a>
 8011360:	2001      	movs	r0, #1
 8011362:	e7f6      	b.n	8011352 <__any_on+0x30>

08011364 <__ascii_wctomb>:
 8011364:	4603      	mov	r3, r0
 8011366:	4608      	mov	r0, r1
 8011368:	b141      	cbz	r1, 801137c <__ascii_wctomb+0x18>
 801136a:	2aff      	cmp	r2, #255	@ 0xff
 801136c:	d904      	bls.n	8011378 <__ascii_wctomb+0x14>
 801136e:	228a      	movs	r2, #138	@ 0x8a
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	f04f 30ff 	mov.w	r0, #4294967295
 8011376:	4770      	bx	lr
 8011378:	700a      	strb	r2, [r1, #0]
 801137a:	2001      	movs	r0, #1
 801137c:	4770      	bx	lr

0801137e <__ssputs_r>:
 801137e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011382:	688e      	ldr	r6, [r1, #8]
 8011384:	461f      	mov	r7, r3
 8011386:	42be      	cmp	r6, r7
 8011388:	680b      	ldr	r3, [r1, #0]
 801138a:	4682      	mov	sl, r0
 801138c:	460c      	mov	r4, r1
 801138e:	4690      	mov	r8, r2
 8011390:	d82d      	bhi.n	80113ee <__ssputs_r+0x70>
 8011392:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011396:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801139a:	d026      	beq.n	80113ea <__ssputs_r+0x6c>
 801139c:	6965      	ldr	r5, [r4, #20]
 801139e:	6909      	ldr	r1, [r1, #16]
 80113a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113a4:	eba3 0901 	sub.w	r9, r3, r1
 80113a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113ac:	1c7b      	adds	r3, r7, #1
 80113ae:	444b      	add	r3, r9
 80113b0:	106d      	asrs	r5, r5, #1
 80113b2:	429d      	cmp	r5, r3
 80113b4:	bf38      	it	cc
 80113b6:	461d      	movcc	r5, r3
 80113b8:	0553      	lsls	r3, r2, #21
 80113ba:	d527      	bpl.n	801140c <__ssputs_r+0x8e>
 80113bc:	4629      	mov	r1, r5
 80113be:	f7ff fa81 	bl	80108c4 <_malloc_r>
 80113c2:	4606      	mov	r6, r0
 80113c4:	b360      	cbz	r0, 8011420 <__ssputs_r+0xa2>
 80113c6:	6921      	ldr	r1, [r4, #16]
 80113c8:	464a      	mov	r2, r9
 80113ca:	f7fe f844 	bl	800f456 <memcpy>
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80113d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113d8:	81a3      	strh	r3, [r4, #12]
 80113da:	6126      	str	r6, [r4, #16]
 80113dc:	6165      	str	r5, [r4, #20]
 80113de:	444e      	add	r6, r9
 80113e0:	eba5 0509 	sub.w	r5, r5, r9
 80113e4:	6026      	str	r6, [r4, #0]
 80113e6:	60a5      	str	r5, [r4, #8]
 80113e8:	463e      	mov	r6, r7
 80113ea:	42be      	cmp	r6, r7
 80113ec:	d900      	bls.n	80113f0 <__ssputs_r+0x72>
 80113ee:	463e      	mov	r6, r7
 80113f0:	6820      	ldr	r0, [r4, #0]
 80113f2:	4632      	mov	r2, r6
 80113f4:	4641      	mov	r1, r8
 80113f6:	f000 f9d7 	bl	80117a8 <memmove>
 80113fa:	68a3      	ldr	r3, [r4, #8]
 80113fc:	1b9b      	subs	r3, r3, r6
 80113fe:	60a3      	str	r3, [r4, #8]
 8011400:	6823      	ldr	r3, [r4, #0]
 8011402:	4433      	add	r3, r6
 8011404:	6023      	str	r3, [r4, #0]
 8011406:	2000      	movs	r0, #0
 8011408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801140c:	462a      	mov	r2, r5
 801140e:	f000 fa10 	bl	8011832 <_realloc_r>
 8011412:	4606      	mov	r6, r0
 8011414:	2800      	cmp	r0, #0
 8011416:	d1e0      	bne.n	80113da <__ssputs_r+0x5c>
 8011418:	6921      	ldr	r1, [r4, #16]
 801141a:	4650      	mov	r0, sl
 801141c:	f7fe fea4 	bl	8010168 <_free_r>
 8011420:	230c      	movs	r3, #12
 8011422:	f8ca 3000 	str.w	r3, [sl]
 8011426:	89a3      	ldrh	r3, [r4, #12]
 8011428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801142c:	81a3      	strh	r3, [r4, #12]
 801142e:	f04f 30ff 	mov.w	r0, #4294967295
 8011432:	e7e9      	b.n	8011408 <__ssputs_r+0x8a>

08011434 <_svfiprintf_r>:
 8011434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011438:	4698      	mov	r8, r3
 801143a:	898b      	ldrh	r3, [r1, #12]
 801143c:	061b      	lsls	r3, r3, #24
 801143e:	b09d      	sub	sp, #116	@ 0x74
 8011440:	4607      	mov	r7, r0
 8011442:	460d      	mov	r5, r1
 8011444:	4614      	mov	r4, r2
 8011446:	d510      	bpl.n	801146a <_svfiprintf_r+0x36>
 8011448:	690b      	ldr	r3, [r1, #16]
 801144a:	b973      	cbnz	r3, 801146a <_svfiprintf_r+0x36>
 801144c:	2140      	movs	r1, #64	@ 0x40
 801144e:	f7ff fa39 	bl	80108c4 <_malloc_r>
 8011452:	6028      	str	r0, [r5, #0]
 8011454:	6128      	str	r0, [r5, #16]
 8011456:	b930      	cbnz	r0, 8011466 <_svfiprintf_r+0x32>
 8011458:	230c      	movs	r3, #12
 801145a:	603b      	str	r3, [r7, #0]
 801145c:	f04f 30ff 	mov.w	r0, #4294967295
 8011460:	b01d      	add	sp, #116	@ 0x74
 8011462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011466:	2340      	movs	r3, #64	@ 0x40
 8011468:	616b      	str	r3, [r5, #20]
 801146a:	2300      	movs	r3, #0
 801146c:	9309      	str	r3, [sp, #36]	@ 0x24
 801146e:	2320      	movs	r3, #32
 8011470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011474:	f8cd 800c 	str.w	r8, [sp, #12]
 8011478:	2330      	movs	r3, #48	@ 0x30
 801147a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011618 <_svfiprintf_r+0x1e4>
 801147e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011482:	f04f 0901 	mov.w	r9, #1
 8011486:	4623      	mov	r3, r4
 8011488:	469a      	mov	sl, r3
 801148a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801148e:	b10a      	cbz	r2, 8011494 <_svfiprintf_r+0x60>
 8011490:	2a25      	cmp	r2, #37	@ 0x25
 8011492:	d1f9      	bne.n	8011488 <_svfiprintf_r+0x54>
 8011494:	ebba 0b04 	subs.w	fp, sl, r4
 8011498:	d00b      	beq.n	80114b2 <_svfiprintf_r+0x7e>
 801149a:	465b      	mov	r3, fp
 801149c:	4622      	mov	r2, r4
 801149e:	4629      	mov	r1, r5
 80114a0:	4638      	mov	r0, r7
 80114a2:	f7ff ff6c 	bl	801137e <__ssputs_r>
 80114a6:	3001      	adds	r0, #1
 80114a8:	f000 80a7 	beq.w	80115fa <_svfiprintf_r+0x1c6>
 80114ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114ae:	445a      	add	r2, fp
 80114b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80114b2:	f89a 3000 	ldrb.w	r3, [sl]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 809f 	beq.w	80115fa <_svfiprintf_r+0x1c6>
 80114bc:	2300      	movs	r3, #0
 80114be:	f04f 32ff 	mov.w	r2, #4294967295
 80114c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114c6:	f10a 0a01 	add.w	sl, sl, #1
 80114ca:	9304      	str	r3, [sp, #16]
 80114cc:	9307      	str	r3, [sp, #28]
 80114ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80114d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80114d4:	4654      	mov	r4, sl
 80114d6:	2205      	movs	r2, #5
 80114d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114dc:	484e      	ldr	r0, [pc, #312]	@ (8011618 <_svfiprintf_r+0x1e4>)
 80114de:	f7ee fe77 	bl	80001d0 <memchr>
 80114e2:	9a04      	ldr	r2, [sp, #16]
 80114e4:	b9d8      	cbnz	r0, 801151e <_svfiprintf_r+0xea>
 80114e6:	06d0      	lsls	r0, r2, #27
 80114e8:	bf44      	itt	mi
 80114ea:	2320      	movmi	r3, #32
 80114ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114f0:	0711      	lsls	r1, r2, #28
 80114f2:	bf44      	itt	mi
 80114f4:	232b      	movmi	r3, #43	@ 0x2b
 80114f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114fa:	f89a 3000 	ldrb.w	r3, [sl]
 80114fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8011500:	d015      	beq.n	801152e <_svfiprintf_r+0xfa>
 8011502:	9a07      	ldr	r2, [sp, #28]
 8011504:	4654      	mov	r4, sl
 8011506:	2000      	movs	r0, #0
 8011508:	f04f 0c0a 	mov.w	ip, #10
 801150c:	4621      	mov	r1, r4
 801150e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011512:	3b30      	subs	r3, #48	@ 0x30
 8011514:	2b09      	cmp	r3, #9
 8011516:	d94b      	bls.n	80115b0 <_svfiprintf_r+0x17c>
 8011518:	b1b0      	cbz	r0, 8011548 <_svfiprintf_r+0x114>
 801151a:	9207      	str	r2, [sp, #28]
 801151c:	e014      	b.n	8011548 <_svfiprintf_r+0x114>
 801151e:	eba0 0308 	sub.w	r3, r0, r8
 8011522:	fa09 f303 	lsl.w	r3, r9, r3
 8011526:	4313      	orrs	r3, r2
 8011528:	9304      	str	r3, [sp, #16]
 801152a:	46a2      	mov	sl, r4
 801152c:	e7d2      	b.n	80114d4 <_svfiprintf_r+0xa0>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	1d19      	adds	r1, r3, #4
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	9103      	str	r1, [sp, #12]
 8011536:	2b00      	cmp	r3, #0
 8011538:	bfbb      	ittet	lt
 801153a:	425b      	neglt	r3, r3
 801153c:	f042 0202 	orrlt.w	r2, r2, #2
 8011540:	9307      	strge	r3, [sp, #28]
 8011542:	9307      	strlt	r3, [sp, #28]
 8011544:	bfb8      	it	lt
 8011546:	9204      	strlt	r2, [sp, #16]
 8011548:	7823      	ldrb	r3, [r4, #0]
 801154a:	2b2e      	cmp	r3, #46	@ 0x2e
 801154c:	d10a      	bne.n	8011564 <_svfiprintf_r+0x130>
 801154e:	7863      	ldrb	r3, [r4, #1]
 8011550:	2b2a      	cmp	r3, #42	@ 0x2a
 8011552:	d132      	bne.n	80115ba <_svfiprintf_r+0x186>
 8011554:	9b03      	ldr	r3, [sp, #12]
 8011556:	1d1a      	adds	r2, r3, #4
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	9203      	str	r2, [sp, #12]
 801155c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011560:	3402      	adds	r4, #2
 8011562:	9305      	str	r3, [sp, #20]
 8011564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011628 <_svfiprintf_r+0x1f4>
 8011568:	7821      	ldrb	r1, [r4, #0]
 801156a:	2203      	movs	r2, #3
 801156c:	4650      	mov	r0, sl
 801156e:	f7ee fe2f 	bl	80001d0 <memchr>
 8011572:	b138      	cbz	r0, 8011584 <_svfiprintf_r+0x150>
 8011574:	9b04      	ldr	r3, [sp, #16]
 8011576:	eba0 000a 	sub.w	r0, r0, sl
 801157a:	2240      	movs	r2, #64	@ 0x40
 801157c:	4082      	lsls	r2, r0
 801157e:	4313      	orrs	r3, r2
 8011580:	3401      	adds	r4, #1
 8011582:	9304      	str	r3, [sp, #16]
 8011584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011588:	4824      	ldr	r0, [pc, #144]	@ (801161c <_svfiprintf_r+0x1e8>)
 801158a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801158e:	2206      	movs	r2, #6
 8011590:	f7ee fe1e 	bl	80001d0 <memchr>
 8011594:	2800      	cmp	r0, #0
 8011596:	d036      	beq.n	8011606 <_svfiprintf_r+0x1d2>
 8011598:	4b21      	ldr	r3, [pc, #132]	@ (8011620 <_svfiprintf_r+0x1ec>)
 801159a:	bb1b      	cbnz	r3, 80115e4 <_svfiprintf_r+0x1b0>
 801159c:	9b03      	ldr	r3, [sp, #12]
 801159e:	3307      	adds	r3, #7
 80115a0:	f023 0307 	bic.w	r3, r3, #7
 80115a4:	3308      	adds	r3, #8
 80115a6:	9303      	str	r3, [sp, #12]
 80115a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115aa:	4433      	add	r3, r6
 80115ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80115ae:	e76a      	b.n	8011486 <_svfiprintf_r+0x52>
 80115b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80115b4:	460c      	mov	r4, r1
 80115b6:	2001      	movs	r0, #1
 80115b8:	e7a8      	b.n	801150c <_svfiprintf_r+0xd8>
 80115ba:	2300      	movs	r3, #0
 80115bc:	3401      	adds	r4, #1
 80115be:	9305      	str	r3, [sp, #20]
 80115c0:	4619      	mov	r1, r3
 80115c2:	f04f 0c0a 	mov.w	ip, #10
 80115c6:	4620      	mov	r0, r4
 80115c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115cc:	3a30      	subs	r2, #48	@ 0x30
 80115ce:	2a09      	cmp	r2, #9
 80115d0:	d903      	bls.n	80115da <_svfiprintf_r+0x1a6>
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0c6      	beq.n	8011564 <_svfiprintf_r+0x130>
 80115d6:	9105      	str	r1, [sp, #20]
 80115d8:	e7c4      	b.n	8011564 <_svfiprintf_r+0x130>
 80115da:	fb0c 2101 	mla	r1, ip, r1, r2
 80115de:	4604      	mov	r4, r0
 80115e0:	2301      	movs	r3, #1
 80115e2:	e7f0      	b.n	80115c6 <_svfiprintf_r+0x192>
 80115e4:	ab03      	add	r3, sp, #12
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	462a      	mov	r2, r5
 80115ea:	4b0e      	ldr	r3, [pc, #56]	@ (8011624 <_svfiprintf_r+0x1f0>)
 80115ec:	a904      	add	r1, sp, #16
 80115ee:	4638      	mov	r0, r7
 80115f0:	f7fc ff52 	bl	800e498 <_printf_float>
 80115f4:	1c42      	adds	r2, r0, #1
 80115f6:	4606      	mov	r6, r0
 80115f8:	d1d6      	bne.n	80115a8 <_svfiprintf_r+0x174>
 80115fa:	89ab      	ldrh	r3, [r5, #12]
 80115fc:	065b      	lsls	r3, r3, #25
 80115fe:	f53f af2d 	bmi.w	801145c <_svfiprintf_r+0x28>
 8011602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011604:	e72c      	b.n	8011460 <_svfiprintf_r+0x2c>
 8011606:	ab03      	add	r3, sp, #12
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	462a      	mov	r2, r5
 801160c:	4b05      	ldr	r3, [pc, #20]	@ (8011624 <_svfiprintf_r+0x1f0>)
 801160e:	a904      	add	r1, sp, #16
 8011610:	4638      	mov	r0, r7
 8011612:	f7fd f9d9 	bl	800e9c8 <_printf_i>
 8011616:	e7ed      	b.n	80115f4 <_svfiprintf_r+0x1c0>
 8011618:	080143c0 	.word	0x080143c0
 801161c:	080143ca 	.word	0x080143ca
 8011620:	0800e499 	.word	0x0800e499
 8011624:	0801137f 	.word	0x0801137f
 8011628:	080143c6 	.word	0x080143c6

0801162c <__sflush_r>:
 801162c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011634:	0716      	lsls	r6, r2, #28
 8011636:	4605      	mov	r5, r0
 8011638:	460c      	mov	r4, r1
 801163a:	d454      	bmi.n	80116e6 <__sflush_r+0xba>
 801163c:	684b      	ldr	r3, [r1, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	dc02      	bgt.n	8011648 <__sflush_r+0x1c>
 8011642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011644:	2b00      	cmp	r3, #0
 8011646:	dd48      	ble.n	80116da <__sflush_r+0xae>
 8011648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801164a:	2e00      	cmp	r6, #0
 801164c:	d045      	beq.n	80116da <__sflush_r+0xae>
 801164e:	2300      	movs	r3, #0
 8011650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011654:	682f      	ldr	r7, [r5, #0]
 8011656:	6a21      	ldr	r1, [r4, #32]
 8011658:	602b      	str	r3, [r5, #0]
 801165a:	d030      	beq.n	80116be <__sflush_r+0x92>
 801165c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801165e:	89a3      	ldrh	r3, [r4, #12]
 8011660:	0759      	lsls	r1, r3, #29
 8011662:	d505      	bpl.n	8011670 <__sflush_r+0x44>
 8011664:	6863      	ldr	r3, [r4, #4]
 8011666:	1ad2      	subs	r2, r2, r3
 8011668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801166a:	b10b      	cbz	r3, 8011670 <__sflush_r+0x44>
 801166c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801166e:	1ad2      	subs	r2, r2, r3
 8011670:	2300      	movs	r3, #0
 8011672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011674:	6a21      	ldr	r1, [r4, #32]
 8011676:	4628      	mov	r0, r5
 8011678:	47b0      	blx	r6
 801167a:	1c43      	adds	r3, r0, #1
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	d106      	bne.n	801168e <__sflush_r+0x62>
 8011680:	6829      	ldr	r1, [r5, #0]
 8011682:	291d      	cmp	r1, #29
 8011684:	d82b      	bhi.n	80116de <__sflush_r+0xb2>
 8011686:	4a2a      	ldr	r2, [pc, #168]	@ (8011730 <__sflush_r+0x104>)
 8011688:	410a      	asrs	r2, r1
 801168a:	07d6      	lsls	r6, r2, #31
 801168c:	d427      	bmi.n	80116de <__sflush_r+0xb2>
 801168e:	2200      	movs	r2, #0
 8011690:	6062      	str	r2, [r4, #4]
 8011692:	04d9      	lsls	r1, r3, #19
 8011694:	6922      	ldr	r2, [r4, #16]
 8011696:	6022      	str	r2, [r4, #0]
 8011698:	d504      	bpl.n	80116a4 <__sflush_r+0x78>
 801169a:	1c42      	adds	r2, r0, #1
 801169c:	d101      	bne.n	80116a2 <__sflush_r+0x76>
 801169e:	682b      	ldr	r3, [r5, #0]
 80116a0:	b903      	cbnz	r3, 80116a4 <__sflush_r+0x78>
 80116a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80116a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80116a6:	602f      	str	r7, [r5, #0]
 80116a8:	b1b9      	cbz	r1, 80116da <__sflush_r+0xae>
 80116aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116ae:	4299      	cmp	r1, r3
 80116b0:	d002      	beq.n	80116b8 <__sflush_r+0x8c>
 80116b2:	4628      	mov	r0, r5
 80116b4:	f7fe fd58 	bl	8010168 <_free_r>
 80116b8:	2300      	movs	r3, #0
 80116ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80116bc:	e00d      	b.n	80116da <__sflush_r+0xae>
 80116be:	2301      	movs	r3, #1
 80116c0:	4628      	mov	r0, r5
 80116c2:	47b0      	blx	r6
 80116c4:	4602      	mov	r2, r0
 80116c6:	1c50      	adds	r0, r2, #1
 80116c8:	d1c9      	bne.n	801165e <__sflush_r+0x32>
 80116ca:	682b      	ldr	r3, [r5, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d0c6      	beq.n	801165e <__sflush_r+0x32>
 80116d0:	2b1d      	cmp	r3, #29
 80116d2:	d001      	beq.n	80116d8 <__sflush_r+0xac>
 80116d4:	2b16      	cmp	r3, #22
 80116d6:	d11e      	bne.n	8011716 <__sflush_r+0xea>
 80116d8:	602f      	str	r7, [r5, #0]
 80116da:	2000      	movs	r0, #0
 80116dc:	e022      	b.n	8011724 <__sflush_r+0xf8>
 80116de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116e2:	b21b      	sxth	r3, r3
 80116e4:	e01b      	b.n	801171e <__sflush_r+0xf2>
 80116e6:	690f      	ldr	r7, [r1, #16]
 80116e8:	2f00      	cmp	r7, #0
 80116ea:	d0f6      	beq.n	80116da <__sflush_r+0xae>
 80116ec:	0793      	lsls	r3, r2, #30
 80116ee:	680e      	ldr	r6, [r1, #0]
 80116f0:	bf08      	it	eq
 80116f2:	694b      	ldreq	r3, [r1, #20]
 80116f4:	600f      	str	r7, [r1, #0]
 80116f6:	bf18      	it	ne
 80116f8:	2300      	movne	r3, #0
 80116fa:	eba6 0807 	sub.w	r8, r6, r7
 80116fe:	608b      	str	r3, [r1, #8]
 8011700:	f1b8 0f00 	cmp.w	r8, #0
 8011704:	dde9      	ble.n	80116da <__sflush_r+0xae>
 8011706:	6a21      	ldr	r1, [r4, #32]
 8011708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801170a:	4643      	mov	r3, r8
 801170c:	463a      	mov	r2, r7
 801170e:	4628      	mov	r0, r5
 8011710:	47b0      	blx	r6
 8011712:	2800      	cmp	r0, #0
 8011714:	dc08      	bgt.n	8011728 <__sflush_r+0xfc>
 8011716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801171a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801171e:	81a3      	strh	r3, [r4, #12]
 8011720:	f04f 30ff 	mov.w	r0, #4294967295
 8011724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011728:	4407      	add	r7, r0
 801172a:	eba8 0800 	sub.w	r8, r8, r0
 801172e:	e7e7      	b.n	8011700 <__sflush_r+0xd4>
 8011730:	dfbffffe 	.word	0xdfbffffe

08011734 <_fflush_r>:
 8011734:	b538      	push	{r3, r4, r5, lr}
 8011736:	690b      	ldr	r3, [r1, #16]
 8011738:	4605      	mov	r5, r0
 801173a:	460c      	mov	r4, r1
 801173c:	b913      	cbnz	r3, 8011744 <_fflush_r+0x10>
 801173e:	2500      	movs	r5, #0
 8011740:	4628      	mov	r0, r5
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	b118      	cbz	r0, 801174e <_fflush_r+0x1a>
 8011746:	6a03      	ldr	r3, [r0, #32]
 8011748:	b90b      	cbnz	r3, 801174e <_fflush_r+0x1a>
 801174a:	f7fd fcfd 	bl	800f148 <__sinit>
 801174e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d0f3      	beq.n	801173e <_fflush_r+0xa>
 8011756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011758:	07d0      	lsls	r0, r2, #31
 801175a:	d404      	bmi.n	8011766 <_fflush_r+0x32>
 801175c:	0599      	lsls	r1, r3, #22
 801175e:	d402      	bmi.n	8011766 <_fflush_r+0x32>
 8011760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011762:	f7fd fe76 	bl	800f452 <__retarget_lock_acquire_recursive>
 8011766:	4628      	mov	r0, r5
 8011768:	4621      	mov	r1, r4
 801176a:	f7ff ff5f 	bl	801162c <__sflush_r>
 801176e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011770:	07da      	lsls	r2, r3, #31
 8011772:	4605      	mov	r5, r0
 8011774:	d4e4      	bmi.n	8011740 <_fflush_r+0xc>
 8011776:	89a3      	ldrh	r3, [r4, #12]
 8011778:	059b      	lsls	r3, r3, #22
 801177a:	d4e1      	bmi.n	8011740 <_fflush_r+0xc>
 801177c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801177e:	f7fd fe69 	bl	800f454 <__retarget_lock_release_recursive>
 8011782:	e7dd      	b.n	8011740 <_fflush_r+0xc>

08011784 <fiprintf>:
 8011784:	b40e      	push	{r1, r2, r3}
 8011786:	b503      	push	{r0, r1, lr}
 8011788:	4601      	mov	r1, r0
 801178a:	ab03      	add	r3, sp, #12
 801178c:	4805      	ldr	r0, [pc, #20]	@ (80117a4 <fiprintf+0x20>)
 801178e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011792:	6800      	ldr	r0, [r0, #0]
 8011794:	9301      	str	r3, [sp, #4]
 8011796:	f000 f8a3 	bl	80118e0 <_vfiprintf_r>
 801179a:	b002      	add	sp, #8
 801179c:	f85d eb04 	ldr.w	lr, [sp], #4
 80117a0:	b003      	add	sp, #12
 80117a2:	4770      	bx	lr
 80117a4:	20000268 	.word	0x20000268

080117a8 <memmove>:
 80117a8:	4288      	cmp	r0, r1
 80117aa:	b510      	push	{r4, lr}
 80117ac:	eb01 0402 	add.w	r4, r1, r2
 80117b0:	d902      	bls.n	80117b8 <memmove+0x10>
 80117b2:	4284      	cmp	r4, r0
 80117b4:	4623      	mov	r3, r4
 80117b6:	d807      	bhi.n	80117c8 <memmove+0x20>
 80117b8:	1e43      	subs	r3, r0, #1
 80117ba:	42a1      	cmp	r1, r4
 80117bc:	d008      	beq.n	80117d0 <memmove+0x28>
 80117be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117c6:	e7f8      	b.n	80117ba <memmove+0x12>
 80117c8:	4402      	add	r2, r0
 80117ca:	4601      	mov	r1, r0
 80117cc:	428a      	cmp	r2, r1
 80117ce:	d100      	bne.n	80117d2 <memmove+0x2a>
 80117d0:	bd10      	pop	{r4, pc}
 80117d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117da:	e7f7      	b.n	80117cc <memmove+0x24>

080117dc <_sbrk_r>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4d06      	ldr	r5, [pc, #24]	@ (80117f8 <_sbrk_r+0x1c>)
 80117e0:	2300      	movs	r3, #0
 80117e2:	4604      	mov	r4, r0
 80117e4:	4608      	mov	r0, r1
 80117e6:	602b      	str	r3, [r5, #0]
 80117e8:	f7f8 f96e 	bl	8009ac8 <_sbrk>
 80117ec:	1c43      	adds	r3, r0, #1
 80117ee:	d102      	bne.n	80117f6 <_sbrk_r+0x1a>
 80117f0:	682b      	ldr	r3, [r5, #0]
 80117f2:	b103      	cbz	r3, 80117f6 <_sbrk_r+0x1a>
 80117f4:	6023      	str	r3, [r4, #0]
 80117f6:	bd38      	pop	{r3, r4, r5, pc}
 80117f8:	20000830 	.word	0x20000830

080117fc <abort>:
 80117fc:	b508      	push	{r3, lr}
 80117fe:	2006      	movs	r0, #6
 8011800:	f000 fa42 	bl	8011c88 <raise>
 8011804:	2001      	movs	r0, #1
 8011806:	f7f8 f8e7 	bl	80099d8 <_exit>

0801180a <_calloc_r>:
 801180a:	b570      	push	{r4, r5, r6, lr}
 801180c:	fba1 5402 	umull	r5, r4, r1, r2
 8011810:	b93c      	cbnz	r4, 8011822 <_calloc_r+0x18>
 8011812:	4629      	mov	r1, r5
 8011814:	f7ff f856 	bl	80108c4 <_malloc_r>
 8011818:	4606      	mov	r6, r0
 801181a:	b928      	cbnz	r0, 8011828 <_calloc_r+0x1e>
 801181c:	2600      	movs	r6, #0
 801181e:	4630      	mov	r0, r6
 8011820:	bd70      	pop	{r4, r5, r6, pc}
 8011822:	220c      	movs	r2, #12
 8011824:	6002      	str	r2, [r0, #0]
 8011826:	e7f9      	b.n	801181c <_calloc_r+0x12>
 8011828:	462a      	mov	r2, r5
 801182a:	4621      	mov	r1, r4
 801182c:	f7fd fd25 	bl	800f27a <memset>
 8011830:	e7f5      	b.n	801181e <_calloc_r+0x14>

08011832 <_realloc_r>:
 8011832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011836:	4680      	mov	r8, r0
 8011838:	4615      	mov	r5, r2
 801183a:	460c      	mov	r4, r1
 801183c:	b921      	cbnz	r1, 8011848 <_realloc_r+0x16>
 801183e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011842:	4611      	mov	r1, r2
 8011844:	f7ff b83e 	b.w	80108c4 <_malloc_r>
 8011848:	b92a      	cbnz	r2, 8011856 <_realloc_r+0x24>
 801184a:	f7fe fc8d 	bl	8010168 <_free_r>
 801184e:	2400      	movs	r4, #0
 8011850:	4620      	mov	r0, r4
 8011852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011856:	f000 fa33 	bl	8011cc0 <_malloc_usable_size_r>
 801185a:	4285      	cmp	r5, r0
 801185c:	4606      	mov	r6, r0
 801185e:	d802      	bhi.n	8011866 <_realloc_r+0x34>
 8011860:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011864:	d8f4      	bhi.n	8011850 <_realloc_r+0x1e>
 8011866:	4629      	mov	r1, r5
 8011868:	4640      	mov	r0, r8
 801186a:	f7ff f82b 	bl	80108c4 <_malloc_r>
 801186e:	4607      	mov	r7, r0
 8011870:	2800      	cmp	r0, #0
 8011872:	d0ec      	beq.n	801184e <_realloc_r+0x1c>
 8011874:	42b5      	cmp	r5, r6
 8011876:	462a      	mov	r2, r5
 8011878:	4621      	mov	r1, r4
 801187a:	bf28      	it	cs
 801187c:	4632      	movcs	r2, r6
 801187e:	f7fd fdea 	bl	800f456 <memcpy>
 8011882:	4621      	mov	r1, r4
 8011884:	4640      	mov	r0, r8
 8011886:	f7fe fc6f 	bl	8010168 <_free_r>
 801188a:	463c      	mov	r4, r7
 801188c:	e7e0      	b.n	8011850 <_realloc_r+0x1e>

0801188e <__sfputc_r>:
 801188e:	6893      	ldr	r3, [r2, #8]
 8011890:	3b01      	subs	r3, #1
 8011892:	2b00      	cmp	r3, #0
 8011894:	b410      	push	{r4}
 8011896:	6093      	str	r3, [r2, #8]
 8011898:	da08      	bge.n	80118ac <__sfputc_r+0x1e>
 801189a:	6994      	ldr	r4, [r2, #24]
 801189c:	42a3      	cmp	r3, r4
 801189e:	db01      	blt.n	80118a4 <__sfputc_r+0x16>
 80118a0:	290a      	cmp	r1, #10
 80118a2:	d103      	bne.n	80118ac <__sfputc_r+0x1e>
 80118a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118a8:	f000 b932 	b.w	8011b10 <__swbuf_r>
 80118ac:	6813      	ldr	r3, [r2, #0]
 80118ae:	1c58      	adds	r0, r3, #1
 80118b0:	6010      	str	r0, [r2, #0]
 80118b2:	7019      	strb	r1, [r3, #0]
 80118b4:	4608      	mov	r0, r1
 80118b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <__sfputs_r>:
 80118bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118be:	4606      	mov	r6, r0
 80118c0:	460f      	mov	r7, r1
 80118c2:	4614      	mov	r4, r2
 80118c4:	18d5      	adds	r5, r2, r3
 80118c6:	42ac      	cmp	r4, r5
 80118c8:	d101      	bne.n	80118ce <__sfputs_r+0x12>
 80118ca:	2000      	movs	r0, #0
 80118cc:	e007      	b.n	80118de <__sfputs_r+0x22>
 80118ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118d2:	463a      	mov	r2, r7
 80118d4:	4630      	mov	r0, r6
 80118d6:	f7ff ffda 	bl	801188e <__sfputc_r>
 80118da:	1c43      	adds	r3, r0, #1
 80118dc:	d1f3      	bne.n	80118c6 <__sfputs_r+0xa>
 80118de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080118e0 <_vfiprintf_r>:
 80118e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e4:	460d      	mov	r5, r1
 80118e6:	b09d      	sub	sp, #116	@ 0x74
 80118e8:	4614      	mov	r4, r2
 80118ea:	4698      	mov	r8, r3
 80118ec:	4606      	mov	r6, r0
 80118ee:	b118      	cbz	r0, 80118f8 <_vfiprintf_r+0x18>
 80118f0:	6a03      	ldr	r3, [r0, #32]
 80118f2:	b90b      	cbnz	r3, 80118f8 <_vfiprintf_r+0x18>
 80118f4:	f7fd fc28 	bl	800f148 <__sinit>
 80118f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80118fa:	07d9      	lsls	r1, r3, #31
 80118fc:	d405      	bmi.n	801190a <_vfiprintf_r+0x2a>
 80118fe:	89ab      	ldrh	r3, [r5, #12]
 8011900:	059a      	lsls	r2, r3, #22
 8011902:	d402      	bmi.n	801190a <_vfiprintf_r+0x2a>
 8011904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011906:	f7fd fda4 	bl	800f452 <__retarget_lock_acquire_recursive>
 801190a:	89ab      	ldrh	r3, [r5, #12]
 801190c:	071b      	lsls	r3, r3, #28
 801190e:	d501      	bpl.n	8011914 <_vfiprintf_r+0x34>
 8011910:	692b      	ldr	r3, [r5, #16]
 8011912:	b99b      	cbnz	r3, 801193c <_vfiprintf_r+0x5c>
 8011914:	4629      	mov	r1, r5
 8011916:	4630      	mov	r0, r6
 8011918:	f000 f938 	bl	8011b8c <__swsetup_r>
 801191c:	b170      	cbz	r0, 801193c <_vfiprintf_r+0x5c>
 801191e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011920:	07dc      	lsls	r4, r3, #31
 8011922:	d504      	bpl.n	801192e <_vfiprintf_r+0x4e>
 8011924:	f04f 30ff 	mov.w	r0, #4294967295
 8011928:	b01d      	add	sp, #116	@ 0x74
 801192a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192e:	89ab      	ldrh	r3, [r5, #12]
 8011930:	0598      	lsls	r0, r3, #22
 8011932:	d4f7      	bmi.n	8011924 <_vfiprintf_r+0x44>
 8011934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011936:	f7fd fd8d 	bl	800f454 <__retarget_lock_release_recursive>
 801193a:	e7f3      	b.n	8011924 <_vfiprintf_r+0x44>
 801193c:	2300      	movs	r3, #0
 801193e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011940:	2320      	movs	r3, #32
 8011942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011946:	f8cd 800c 	str.w	r8, [sp, #12]
 801194a:	2330      	movs	r3, #48	@ 0x30
 801194c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011afc <_vfiprintf_r+0x21c>
 8011950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011954:	f04f 0901 	mov.w	r9, #1
 8011958:	4623      	mov	r3, r4
 801195a:	469a      	mov	sl, r3
 801195c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011960:	b10a      	cbz	r2, 8011966 <_vfiprintf_r+0x86>
 8011962:	2a25      	cmp	r2, #37	@ 0x25
 8011964:	d1f9      	bne.n	801195a <_vfiprintf_r+0x7a>
 8011966:	ebba 0b04 	subs.w	fp, sl, r4
 801196a:	d00b      	beq.n	8011984 <_vfiprintf_r+0xa4>
 801196c:	465b      	mov	r3, fp
 801196e:	4622      	mov	r2, r4
 8011970:	4629      	mov	r1, r5
 8011972:	4630      	mov	r0, r6
 8011974:	f7ff ffa2 	bl	80118bc <__sfputs_r>
 8011978:	3001      	adds	r0, #1
 801197a:	f000 80a7 	beq.w	8011acc <_vfiprintf_r+0x1ec>
 801197e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011980:	445a      	add	r2, fp
 8011982:	9209      	str	r2, [sp, #36]	@ 0x24
 8011984:	f89a 3000 	ldrb.w	r3, [sl]
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 809f 	beq.w	8011acc <_vfiprintf_r+0x1ec>
 801198e:	2300      	movs	r3, #0
 8011990:	f04f 32ff 	mov.w	r2, #4294967295
 8011994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011998:	f10a 0a01 	add.w	sl, sl, #1
 801199c:	9304      	str	r3, [sp, #16]
 801199e:	9307      	str	r3, [sp, #28]
 80119a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80119a6:	4654      	mov	r4, sl
 80119a8:	2205      	movs	r2, #5
 80119aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119ae:	4853      	ldr	r0, [pc, #332]	@ (8011afc <_vfiprintf_r+0x21c>)
 80119b0:	f7ee fc0e 	bl	80001d0 <memchr>
 80119b4:	9a04      	ldr	r2, [sp, #16]
 80119b6:	b9d8      	cbnz	r0, 80119f0 <_vfiprintf_r+0x110>
 80119b8:	06d1      	lsls	r1, r2, #27
 80119ba:	bf44      	itt	mi
 80119bc:	2320      	movmi	r3, #32
 80119be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119c2:	0713      	lsls	r3, r2, #28
 80119c4:	bf44      	itt	mi
 80119c6:	232b      	movmi	r3, #43	@ 0x2b
 80119c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119cc:	f89a 3000 	ldrb.w	r3, [sl]
 80119d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80119d2:	d015      	beq.n	8011a00 <_vfiprintf_r+0x120>
 80119d4:	9a07      	ldr	r2, [sp, #28]
 80119d6:	4654      	mov	r4, sl
 80119d8:	2000      	movs	r0, #0
 80119da:	f04f 0c0a 	mov.w	ip, #10
 80119de:	4621      	mov	r1, r4
 80119e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119e4:	3b30      	subs	r3, #48	@ 0x30
 80119e6:	2b09      	cmp	r3, #9
 80119e8:	d94b      	bls.n	8011a82 <_vfiprintf_r+0x1a2>
 80119ea:	b1b0      	cbz	r0, 8011a1a <_vfiprintf_r+0x13a>
 80119ec:	9207      	str	r2, [sp, #28]
 80119ee:	e014      	b.n	8011a1a <_vfiprintf_r+0x13a>
 80119f0:	eba0 0308 	sub.w	r3, r0, r8
 80119f4:	fa09 f303 	lsl.w	r3, r9, r3
 80119f8:	4313      	orrs	r3, r2
 80119fa:	9304      	str	r3, [sp, #16]
 80119fc:	46a2      	mov	sl, r4
 80119fe:	e7d2      	b.n	80119a6 <_vfiprintf_r+0xc6>
 8011a00:	9b03      	ldr	r3, [sp, #12]
 8011a02:	1d19      	adds	r1, r3, #4
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	9103      	str	r1, [sp, #12]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	bfbb      	ittet	lt
 8011a0c:	425b      	neglt	r3, r3
 8011a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8011a12:	9307      	strge	r3, [sp, #28]
 8011a14:	9307      	strlt	r3, [sp, #28]
 8011a16:	bfb8      	it	lt
 8011a18:	9204      	strlt	r2, [sp, #16]
 8011a1a:	7823      	ldrb	r3, [r4, #0]
 8011a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a1e:	d10a      	bne.n	8011a36 <_vfiprintf_r+0x156>
 8011a20:	7863      	ldrb	r3, [r4, #1]
 8011a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a24:	d132      	bne.n	8011a8c <_vfiprintf_r+0x1ac>
 8011a26:	9b03      	ldr	r3, [sp, #12]
 8011a28:	1d1a      	adds	r2, r3, #4
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	9203      	str	r2, [sp, #12]
 8011a2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a32:	3402      	adds	r4, #2
 8011a34:	9305      	str	r3, [sp, #20]
 8011a36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011b0c <_vfiprintf_r+0x22c>
 8011a3a:	7821      	ldrb	r1, [r4, #0]
 8011a3c:	2203      	movs	r2, #3
 8011a3e:	4650      	mov	r0, sl
 8011a40:	f7ee fbc6 	bl	80001d0 <memchr>
 8011a44:	b138      	cbz	r0, 8011a56 <_vfiprintf_r+0x176>
 8011a46:	9b04      	ldr	r3, [sp, #16]
 8011a48:	eba0 000a 	sub.w	r0, r0, sl
 8011a4c:	2240      	movs	r2, #64	@ 0x40
 8011a4e:	4082      	lsls	r2, r0
 8011a50:	4313      	orrs	r3, r2
 8011a52:	3401      	adds	r4, #1
 8011a54:	9304      	str	r3, [sp, #16]
 8011a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a5a:	4829      	ldr	r0, [pc, #164]	@ (8011b00 <_vfiprintf_r+0x220>)
 8011a5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011a60:	2206      	movs	r2, #6
 8011a62:	f7ee fbb5 	bl	80001d0 <memchr>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d03f      	beq.n	8011aea <_vfiprintf_r+0x20a>
 8011a6a:	4b26      	ldr	r3, [pc, #152]	@ (8011b04 <_vfiprintf_r+0x224>)
 8011a6c:	bb1b      	cbnz	r3, 8011ab6 <_vfiprintf_r+0x1d6>
 8011a6e:	9b03      	ldr	r3, [sp, #12]
 8011a70:	3307      	adds	r3, #7
 8011a72:	f023 0307 	bic.w	r3, r3, #7
 8011a76:	3308      	adds	r3, #8
 8011a78:	9303      	str	r3, [sp, #12]
 8011a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a7c:	443b      	add	r3, r7
 8011a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a80:	e76a      	b.n	8011958 <_vfiprintf_r+0x78>
 8011a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a86:	460c      	mov	r4, r1
 8011a88:	2001      	movs	r0, #1
 8011a8a:	e7a8      	b.n	80119de <_vfiprintf_r+0xfe>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	3401      	adds	r4, #1
 8011a90:	9305      	str	r3, [sp, #20]
 8011a92:	4619      	mov	r1, r3
 8011a94:	f04f 0c0a 	mov.w	ip, #10
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a9e:	3a30      	subs	r2, #48	@ 0x30
 8011aa0:	2a09      	cmp	r2, #9
 8011aa2:	d903      	bls.n	8011aac <_vfiprintf_r+0x1cc>
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d0c6      	beq.n	8011a36 <_vfiprintf_r+0x156>
 8011aa8:	9105      	str	r1, [sp, #20]
 8011aaa:	e7c4      	b.n	8011a36 <_vfiprintf_r+0x156>
 8011aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e7f0      	b.n	8011a98 <_vfiprintf_r+0x1b8>
 8011ab6:	ab03      	add	r3, sp, #12
 8011ab8:	9300      	str	r3, [sp, #0]
 8011aba:	462a      	mov	r2, r5
 8011abc:	4b12      	ldr	r3, [pc, #72]	@ (8011b08 <_vfiprintf_r+0x228>)
 8011abe:	a904      	add	r1, sp, #16
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f7fc fce9 	bl	800e498 <_printf_float>
 8011ac6:	4607      	mov	r7, r0
 8011ac8:	1c78      	adds	r0, r7, #1
 8011aca:	d1d6      	bne.n	8011a7a <_vfiprintf_r+0x19a>
 8011acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ace:	07d9      	lsls	r1, r3, #31
 8011ad0:	d405      	bmi.n	8011ade <_vfiprintf_r+0x1fe>
 8011ad2:	89ab      	ldrh	r3, [r5, #12]
 8011ad4:	059a      	lsls	r2, r3, #22
 8011ad6:	d402      	bmi.n	8011ade <_vfiprintf_r+0x1fe>
 8011ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ada:	f7fd fcbb 	bl	800f454 <__retarget_lock_release_recursive>
 8011ade:	89ab      	ldrh	r3, [r5, #12]
 8011ae0:	065b      	lsls	r3, r3, #25
 8011ae2:	f53f af1f 	bmi.w	8011924 <_vfiprintf_r+0x44>
 8011ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ae8:	e71e      	b.n	8011928 <_vfiprintf_r+0x48>
 8011aea:	ab03      	add	r3, sp, #12
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	462a      	mov	r2, r5
 8011af0:	4b05      	ldr	r3, [pc, #20]	@ (8011b08 <_vfiprintf_r+0x228>)
 8011af2:	a904      	add	r1, sp, #16
 8011af4:	4630      	mov	r0, r6
 8011af6:	f7fc ff67 	bl	800e9c8 <_printf_i>
 8011afa:	e7e4      	b.n	8011ac6 <_vfiprintf_r+0x1e6>
 8011afc:	080143c0 	.word	0x080143c0
 8011b00:	080143ca 	.word	0x080143ca
 8011b04:	0800e499 	.word	0x0800e499
 8011b08:	080118bd 	.word	0x080118bd
 8011b0c:	080143c6 	.word	0x080143c6

08011b10 <__swbuf_r>:
 8011b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b12:	460e      	mov	r6, r1
 8011b14:	4614      	mov	r4, r2
 8011b16:	4605      	mov	r5, r0
 8011b18:	b118      	cbz	r0, 8011b22 <__swbuf_r+0x12>
 8011b1a:	6a03      	ldr	r3, [r0, #32]
 8011b1c:	b90b      	cbnz	r3, 8011b22 <__swbuf_r+0x12>
 8011b1e:	f7fd fb13 	bl	800f148 <__sinit>
 8011b22:	69a3      	ldr	r3, [r4, #24]
 8011b24:	60a3      	str	r3, [r4, #8]
 8011b26:	89a3      	ldrh	r3, [r4, #12]
 8011b28:	071a      	lsls	r2, r3, #28
 8011b2a:	d501      	bpl.n	8011b30 <__swbuf_r+0x20>
 8011b2c:	6923      	ldr	r3, [r4, #16]
 8011b2e:	b943      	cbnz	r3, 8011b42 <__swbuf_r+0x32>
 8011b30:	4621      	mov	r1, r4
 8011b32:	4628      	mov	r0, r5
 8011b34:	f000 f82a 	bl	8011b8c <__swsetup_r>
 8011b38:	b118      	cbz	r0, 8011b42 <__swbuf_r+0x32>
 8011b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8011b3e:	4638      	mov	r0, r7
 8011b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b42:	6823      	ldr	r3, [r4, #0]
 8011b44:	6922      	ldr	r2, [r4, #16]
 8011b46:	1a98      	subs	r0, r3, r2
 8011b48:	6963      	ldr	r3, [r4, #20]
 8011b4a:	b2f6      	uxtb	r6, r6
 8011b4c:	4283      	cmp	r3, r0
 8011b4e:	4637      	mov	r7, r6
 8011b50:	dc05      	bgt.n	8011b5e <__swbuf_r+0x4e>
 8011b52:	4621      	mov	r1, r4
 8011b54:	4628      	mov	r0, r5
 8011b56:	f7ff fded 	bl	8011734 <_fflush_r>
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d1ed      	bne.n	8011b3a <__swbuf_r+0x2a>
 8011b5e:	68a3      	ldr	r3, [r4, #8]
 8011b60:	3b01      	subs	r3, #1
 8011b62:	60a3      	str	r3, [r4, #8]
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	1c5a      	adds	r2, r3, #1
 8011b68:	6022      	str	r2, [r4, #0]
 8011b6a:	701e      	strb	r6, [r3, #0]
 8011b6c:	6962      	ldr	r2, [r4, #20]
 8011b6e:	1c43      	adds	r3, r0, #1
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d004      	beq.n	8011b7e <__swbuf_r+0x6e>
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	07db      	lsls	r3, r3, #31
 8011b78:	d5e1      	bpl.n	8011b3e <__swbuf_r+0x2e>
 8011b7a:	2e0a      	cmp	r6, #10
 8011b7c:	d1df      	bne.n	8011b3e <__swbuf_r+0x2e>
 8011b7e:	4621      	mov	r1, r4
 8011b80:	4628      	mov	r0, r5
 8011b82:	f7ff fdd7 	bl	8011734 <_fflush_r>
 8011b86:	2800      	cmp	r0, #0
 8011b88:	d0d9      	beq.n	8011b3e <__swbuf_r+0x2e>
 8011b8a:	e7d6      	b.n	8011b3a <__swbuf_r+0x2a>

08011b8c <__swsetup_r>:
 8011b8c:	b538      	push	{r3, r4, r5, lr}
 8011b8e:	4b29      	ldr	r3, [pc, #164]	@ (8011c34 <__swsetup_r+0xa8>)
 8011b90:	4605      	mov	r5, r0
 8011b92:	6818      	ldr	r0, [r3, #0]
 8011b94:	460c      	mov	r4, r1
 8011b96:	b118      	cbz	r0, 8011ba0 <__swsetup_r+0x14>
 8011b98:	6a03      	ldr	r3, [r0, #32]
 8011b9a:	b90b      	cbnz	r3, 8011ba0 <__swsetup_r+0x14>
 8011b9c:	f7fd fad4 	bl	800f148 <__sinit>
 8011ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ba4:	0719      	lsls	r1, r3, #28
 8011ba6:	d422      	bmi.n	8011bee <__swsetup_r+0x62>
 8011ba8:	06da      	lsls	r2, r3, #27
 8011baa:	d407      	bmi.n	8011bbc <__swsetup_r+0x30>
 8011bac:	2209      	movs	r2, #9
 8011bae:	602a      	str	r2, [r5, #0]
 8011bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bb4:	81a3      	strh	r3, [r4, #12]
 8011bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bba:	e033      	b.n	8011c24 <__swsetup_r+0x98>
 8011bbc:	0758      	lsls	r0, r3, #29
 8011bbe:	d512      	bpl.n	8011be6 <__swsetup_r+0x5a>
 8011bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bc2:	b141      	cbz	r1, 8011bd6 <__swsetup_r+0x4a>
 8011bc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bc8:	4299      	cmp	r1, r3
 8011bca:	d002      	beq.n	8011bd2 <__swsetup_r+0x46>
 8011bcc:	4628      	mov	r0, r5
 8011bce:	f7fe facb 	bl	8010168 <_free_r>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bd6:	89a3      	ldrh	r3, [r4, #12]
 8011bd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011bdc:	81a3      	strh	r3, [r4, #12]
 8011bde:	2300      	movs	r3, #0
 8011be0:	6063      	str	r3, [r4, #4]
 8011be2:	6923      	ldr	r3, [r4, #16]
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	89a3      	ldrh	r3, [r4, #12]
 8011be8:	f043 0308 	orr.w	r3, r3, #8
 8011bec:	81a3      	strh	r3, [r4, #12]
 8011bee:	6923      	ldr	r3, [r4, #16]
 8011bf0:	b94b      	cbnz	r3, 8011c06 <__swsetup_r+0x7a>
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011bfc:	d003      	beq.n	8011c06 <__swsetup_r+0x7a>
 8011bfe:	4621      	mov	r1, r4
 8011c00:	4628      	mov	r0, r5
 8011c02:	f000 f88b 	bl	8011d1c <__smakebuf_r>
 8011c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c0a:	f013 0201 	ands.w	r2, r3, #1
 8011c0e:	d00a      	beq.n	8011c26 <__swsetup_r+0x9a>
 8011c10:	2200      	movs	r2, #0
 8011c12:	60a2      	str	r2, [r4, #8]
 8011c14:	6962      	ldr	r2, [r4, #20]
 8011c16:	4252      	negs	r2, r2
 8011c18:	61a2      	str	r2, [r4, #24]
 8011c1a:	6922      	ldr	r2, [r4, #16]
 8011c1c:	b942      	cbnz	r2, 8011c30 <__swsetup_r+0xa4>
 8011c1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011c22:	d1c5      	bne.n	8011bb0 <__swsetup_r+0x24>
 8011c24:	bd38      	pop	{r3, r4, r5, pc}
 8011c26:	0799      	lsls	r1, r3, #30
 8011c28:	bf58      	it	pl
 8011c2a:	6962      	ldrpl	r2, [r4, #20]
 8011c2c:	60a2      	str	r2, [r4, #8]
 8011c2e:	e7f4      	b.n	8011c1a <__swsetup_r+0x8e>
 8011c30:	2000      	movs	r0, #0
 8011c32:	e7f7      	b.n	8011c24 <__swsetup_r+0x98>
 8011c34:	20000268 	.word	0x20000268

08011c38 <_raise_r>:
 8011c38:	291f      	cmp	r1, #31
 8011c3a:	b538      	push	{r3, r4, r5, lr}
 8011c3c:	4605      	mov	r5, r0
 8011c3e:	460c      	mov	r4, r1
 8011c40:	d904      	bls.n	8011c4c <_raise_r+0x14>
 8011c42:	2316      	movs	r3, #22
 8011c44:	6003      	str	r3, [r0, #0]
 8011c46:	f04f 30ff 	mov.w	r0, #4294967295
 8011c4a:	bd38      	pop	{r3, r4, r5, pc}
 8011c4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011c4e:	b112      	cbz	r2, 8011c56 <_raise_r+0x1e>
 8011c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c54:	b94b      	cbnz	r3, 8011c6a <_raise_r+0x32>
 8011c56:	4628      	mov	r0, r5
 8011c58:	f000 f830 	bl	8011cbc <_getpid_r>
 8011c5c:	4622      	mov	r2, r4
 8011c5e:	4601      	mov	r1, r0
 8011c60:	4628      	mov	r0, r5
 8011c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c66:	f000 b817 	b.w	8011c98 <_kill_r>
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d00a      	beq.n	8011c84 <_raise_r+0x4c>
 8011c6e:	1c59      	adds	r1, r3, #1
 8011c70:	d103      	bne.n	8011c7a <_raise_r+0x42>
 8011c72:	2316      	movs	r3, #22
 8011c74:	6003      	str	r3, [r0, #0]
 8011c76:	2001      	movs	r0, #1
 8011c78:	e7e7      	b.n	8011c4a <_raise_r+0x12>
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011c80:	4620      	mov	r0, r4
 8011c82:	4798      	blx	r3
 8011c84:	2000      	movs	r0, #0
 8011c86:	e7e0      	b.n	8011c4a <_raise_r+0x12>

08011c88 <raise>:
 8011c88:	4b02      	ldr	r3, [pc, #8]	@ (8011c94 <raise+0xc>)
 8011c8a:	4601      	mov	r1, r0
 8011c8c:	6818      	ldr	r0, [r3, #0]
 8011c8e:	f7ff bfd3 	b.w	8011c38 <_raise_r>
 8011c92:	bf00      	nop
 8011c94:	20000268 	.word	0x20000268

08011c98 <_kill_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4d07      	ldr	r5, [pc, #28]	@ (8011cb8 <_kill_r+0x20>)
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	602b      	str	r3, [r5, #0]
 8011ca6:	f7f7 fe87 	bl	80099b8 <_kill>
 8011caa:	1c43      	adds	r3, r0, #1
 8011cac:	d102      	bne.n	8011cb4 <_kill_r+0x1c>
 8011cae:	682b      	ldr	r3, [r5, #0]
 8011cb0:	b103      	cbz	r3, 8011cb4 <_kill_r+0x1c>
 8011cb2:	6023      	str	r3, [r4, #0]
 8011cb4:	bd38      	pop	{r3, r4, r5, pc}
 8011cb6:	bf00      	nop
 8011cb8:	20000830 	.word	0x20000830

08011cbc <_getpid_r>:
 8011cbc:	f7f7 be74 	b.w	80099a8 <_getpid>

08011cc0 <_malloc_usable_size_r>:
 8011cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cc4:	1f18      	subs	r0, r3, #4
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	bfbc      	itt	lt
 8011cca:	580b      	ldrlt	r3, [r1, r0]
 8011ccc:	18c0      	addlt	r0, r0, r3
 8011cce:	4770      	bx	lr

08011cd0 <__swhatbuf_r>:
 8011cd0:	b570      	push	{r4, r5, r6, lr}
 8011cd2:	460c      	mov	r4, r1
 8011cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cd8:	2900      	cmp	r1, #0
 8011cda:	b096      	sub	sp, #88	@ 0x58
 8011cdc:	4615      	mov	r5, r2
 8011cde:	461e      	mov	r6, r3
 8011ce0:	da0d      	bge.n	8011cfe <__swhatbuf_r+0x2e>
 8011ce2:	89a3      	ldrh	r3, [r4, #12]
 8011ce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ce8:	f04f 0100 	mov.w	r1, #0
 8011cec:	bf14      	ite	ne
 8011cee:	2340      	movne	r3, #64	@ 0x40
 8011cf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	6031      	str	r1, [r6, #0]
 8011cf8:	602b      	str	r3, [r5, #0]
 8011cfa:	b016      	add	sp, #88	@ 0x58
 8011cfc:	bd70      	pop	{r4, r5, r6, pc}
 8011cfe:	466a      	mov	r2, sp
 8011d00:	f000 f848 	bl	8011d94 <_fstat_r>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	dbec      	blt.n	8011ce2 <__swhatbuf_r+0x12>
 8011d08:	9901      	ldr	r1, [sp, #4]
 8011d0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011d0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011d12:	4259      	negs	r1, r3
 8011d14:	4159      	adcs	r1, r3
 8011d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d1a:	e7eb      	b.n	8011cf4 <__swhatbuf_r+0x24>

08011d1c <__smakebuf_r>:
 8011d1c:	898b      	ldrh	r3, [r1, #12]
 8011d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d20:	079d      	lsls	r5, r3, #30
 8011d22:	4606      	mov	r6, r0
 8011d24:	460c      	mov	r4, r1
 8011d26:	d507      	bpl.n	8011d38 <__smakebuf_r+0x1c>
 8011d28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011d2c:	6023      	str	r3, [r4, #0]
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	2301      	movs	r3, #1
 8011d32:	6163      	str	r3, [r4, #20]
 8011d34:	b003      	add	sp, #12
 8011d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d38:	ab01      	add	r3, sp, #4
 8011d3a:	466a      	mov	r2, sp
 8011d3c:	f7ff ffc8 	bl	8011cd0 <__swhatbuf_r>
 8011d40:	9f00      	ldr	r7, [sp, #0]
 8011d42:	4605      	mov	r5, r0
 8011d44:	4639      	mov	r1, r7
 8011d46:	4630      	mov	r0, r6
 8011d48:	f7fe fdbc 	bl	80108c4 <_malloc_r>
 8011d4c:	b948      	cbnz	r0, 8011d62 <__smakebuf_r+0x46>
 8011d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d52:	059a      	lsls	r2, r3, #22
 8011d54:	d4ee      	bmi.n	8011d34 <__smakebuf_r+0x18>
 8011d56:	f023 0303 	bic.w	r3, r3, #3
 8011d5a:	f043 0302 	orr.w	r3, r3, #2
 8011d5e:	81a3      	strh	r3, [r4, #12]
 8011d60:	e7e2      	b.n	8011d28 <__smakebuf_r+0xc>
 8011d62:	89a3      	ldrh	r3, [r4, #12]
 8011d64:	6020      	str	r0, [r4, #0]
 8011d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d6a:	81a3      	strh	r3, [r4, #12]
 8011d6c:	9b01      	ldr	r3, [sp, #4]
 8011d6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011d72:	b15b      	cbz	r3, 8011d8c <__smakebuf_r+0x70>
 8011d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f000 f81d 	bl	8011db8 <_isatty_r>
 8011d7e:	b128      	cbz	r0, 8011d8c <__smakebuf_r+0x70>
 8011d80:	89a3      	ldrh	r3, [r4, #12]
 8011d82:	f023 0303 	bic.w	r3, r3, #3
 8011d86:	f043 0301 	orr.w	r3, r3, #1
 8011d8a:	81a3      	strh	r3, [r4, #12]
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	431d      	orrs	r5, r3
 8011d90:	81a5      	strh	r5, [r4, #12]
 8011d92:	e7cf      	b.n	8011d34 <__smakebuf_r+0x18>

08011d94 <_fstat_r>:
 8011d94:	b538      	push	{r3, r4, r5, lr}
 8011d96:	4d07      	ldr	r5, [pc, #28]	@ (8011db4 <_fstat_r+0x20>)
 8011d98:	2300      	movs	r3, #0
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	4608      	mov	r0, r1
 8011d9e:	4611      	mov	r1, r2
 8011da0:	602b      	str	r3, [r5, #0]
 8011da2:	f7f7 fe69 	bl	8009a78 <_fstat>
 8011da6:	1c43      	adds	r3, r0, #1
 8011da8:	d102      	bne.n	8011db0 <_fstat_r+0x1c>
 8011daa:	682b      	ldr	r3, [r5, #0]
 8011dac:	b103      	cbz	r3, 8011db0 <_fstat_r+0x1c>
 8011dae:	6023      	str	r3, [r4, #0]
 8011db0:	bd38      	pop	{r3, r4, r5, pc}
 8011db2:	bf00      	nop
 8011db4:	20000830 	.word	0x20000830

08011db8 <_isatty_r>:
 8011db8:	b538      	push	{r3, r4, r5, lr}
 8011dba:	4d06      	ldr	r5, [pc, #24]	@ (8011dd4 <_isatty_r+0x1c>)
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	4608      	mov	r0, r1
 8011dc2:	602b      	str	r3, [r5, #0]
 8011dc4:	f7f7 fe68 	bl	8009a98 <_isatty>
 8011dc8:	1c43      	adds	r3, r0, #1
 8011dca:	d102      	bne.n	8011dd2 <_isatty_r+0x1a>
 8011dcc:	682b      	ldr	r3, [r5, #0]
 8011dce:	b103      	cbz	r3, 8011dd2 <_isatty_r+0x1a>
 8011dd0:	6023      	str	r3, [r4, #0]
 8011dd2:	bd38      	pop	{r3, r4, r5, pc}
 8011dd4:	20000830 	.word	0x20000830

08011dd8 <atan2>:
 8011dd8:	f000 bdfe 	b.w	80129d8 <__ieee754_atan2>
 8011ddc:	0000      	movs	r0, r0
	...

08011de0 <hypot>:
 8011de0:	b508      	push	{r3, lr}
 8011de2:	ed2d 8b06 	vpush	{d8-d10}
 8011de6:	eeb0 aa40 	vmov.f32	s20, s0
 8011dea:	eef0 aa60 	vmov.f32	s21, s1
 8011dee:	eeb0 9a41 	vmov.f32	s18, s2
 8011df2:	eef0 9a61 	vmov.f32	s19, s3
 8011df6:	f000 feb5 	bl	8012b64 <__ieee754_hypot>
 8011dfa:	eeb0 8a40 	vmov.f32	s16, s0
 8011dfe:	eef0 8a60 	vmov.f32	s17, s1
 8011e02:	f000 f8fd 	bl	8012000 <finite>
 8011e06:	b998      	cbnz	r0, 8011e30 <hypot+0x50>
 8011e08:	eeb0 0a4a 	vmov.f32	s0, s20
 8011e0c:	eef0 0a6a 	vmov.f32	s1, s21
 8011e10:	f000 f8f6 	bl	8012000 <finite>
 8011e14:	b160      	cbz	r0, 8011e30 <hypot+0x50>
 8011e16:	eeb0 0a49 	vmov.f32	s0, s18
 8011e1a:	eef0 0a69 	vmov.f32	s1, s19
 8011e1e:	f000 f8ef 	bl	8012000 <finite>
 8011e22:	b128      	cbz	r0, 8011e30 <hypot+0x50>
 8011e24:	f7fd faea 	bl	800f3fc <__errno>
 8011e28:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8011e40 <hypot+0x60>
 8011e2c:	2322      	movs	r3, #34	@ 0x22
 8011e2e:	6003      	str	r3, [r0, #0]
 8011e30:	eeb0 0a48 	vmov.f32	s0, s16
 8011e34:	eef0 0a68 	vmov.f32	s1, s17
 8011e38:	ecbd 8b06 	vpop	{d8-d10}
 8011e3c:	bd08      	pop	{r3, pc}
 8011e3e:	bf00      	nop
 8011e40:	00000000 	.word	0x00000000
 8011e44:	7ff00000 	.word	0x7ff00000

08011e48 <cos>:
 8011e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e4a:	ec53 2b10 	vmov	r2, r3, d0
 8011e4e:	4826      	ldr	r0, [pc, #152]	@ (8011ee8 <cos+0xa0>)
 8011e50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011e54:	4281      	cmp	r1, r0
 8011e56:	d806      	bhi.n	8011e66 <cos+0x1e>
 8011e58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011ee0 <cos+0x98>
 8011e5c:	b005      	add	sp, #20
 8011e5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e62:	f000 ba31 	b.w	80122c8 <__kernel_cos>
 8011e66:	4821      	ldr	r0, [pc, #132]	@ (8011eec <cos+0xa4>)
 8011e68:	4281      	cmp	r1, r0
 8011e6a:	d908      	bls.n	8011e7e <cos+0x36>
 8011e6c:	4610      	mov	r0, r2
 8011e6e:	4619      	mov	r1, r3
 8011e70:	f7ee fa0a 	bl	8000288 <__aeabi_dsub>
 8011e74:	ec41 0b10 	vmov	d0, r0, r1
 8011e78:	b005      	add	sp, #20
 8011e7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e7e:	4668      	mov	r0, sp
 8011e80:	f000 ff86 	bl	8012d90 <__ieee754_rem_pio2>
 8011e84:	f000 0003 	and.w	r0, r0, #3
 8011e88:	2801      	cmp	r0, #1
 8011e8a:	d00b      	beq.n	8011ea4 <cos+0x5c>
 8011e8c:	2802      	cmp	r0, #2
 8011e8e:	d015      	beq.n	8011ebc <cos+0x74>
 8011e90:	b9d8      	cbnz	r0, 8011eca <cos+0x82>
 8011e92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e96:	ed9d 0b00 	vldr	d0, [sp]
 8011e9a:	f000 fa15 	bl	80122c8 <__kernel_cos>
 8011e9e:	ec51 0b10 	vmov	r0, r1, d0
 8011ea2:	e7e7      	b.n	8011e74 <cos+0x2c>
 8011ea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ea8:	ed9d 0b00 	vldr	d0, [sp]
 8011eac:	f000 fad4 	bl	8012458 <__kernel_sin>
 8011eb0:	ec53 2b10 	vmov	r2, r3, d0
 8011eb4:	4610      	mov	r0, r2
 8011eb6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011eba:	e7db      	b.n	8011e74 <cos+0x2c>
 8011ebc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ec0:	ed9d 0b00 	vldr	d0, [sp]
 8011ec4:	f000 fa00 	bl	80122c8 <__kernel_cos>
 8011ec8:	e7f2      	b.n	8011eb0 <cos+0x68>
 8011eca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ece:	ed9d 0b00 	vldr	d0, [sp]
 8011ed2:	2001      	movs	r0, #1
 8011ed4:	f000 fac0 	bl	8012458 <__kernel_sin>
 8011ed8:	e7e1      	b.n	8011e9e <cos+0x56>
 8011eda:	bf00      	nop
 8011edc:	f3af 8000 	nop.w
	...
 8011ee8:	3fe921fb 	.word	0x3fe921fb
 8011eec:	7fefffff 	.word	0x7fefffff

08011ef0 <sin>:
 8011ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ef2:	ec53 2b10 	vmov	r2, r3, d0
 8011ef6:	4826      	ldr	r0, [pc, #152]	@ (8011f90 <sin+0xa0>)
 8011ef8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011efc:	4281      	cmp	r1, r0
 8011efe:	d807      	bhi.n	8011f10 <sin+0x20>
 8011f00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011f88 <sin+0x98>
 8011f04:	2000      	movs	r0, #0
 8011f06:	b005      	add	sp, #20
 8011f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f0c:	f000 baa4 	b.w	8012458 <__kernel_sin>
 8011f10:	4820      	ldr	r0, [pc, #128]	@ (8011f94 <sin+0xa4>)
 8011f12:	4281      	cmp	r1, r0
 8011f14:	d908      	bls.n	8011f28 <sin+0x38>
 8011f16:	4610      	mov	r0, r2
 8011f18:	4619      	mov	r1, r3
 8011f1a:	f7ee f9b5 	bl	8000288 <__aeabi_dsub>
 8011f1e:	ec41 0b10 	vmov	d0, r0, r1
 8011f22:	b005      	add	sp, #20
 8011f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f28:	4668      	mov	r0, sp
 8011f2a:	f000 ff31 	bl	8012d90 <__ieee754_rem_pio2>
 8011f2e:	f000 0003 	and.w	r0, r0, #3
 8011f32:	2801      	cmp	r0, #1
 8011f34:	d00c      	beq.n	8011f50 <sin+0x60>
 8011f36:	2802      	cmp	r0, #2
 8011f38:	d011      	beq.n	8011f5e <sin+0x6e>
 8011f3a:	b9e8      	cbnz	r0, 8011f78 <sin+0x88>
 8011f3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f40:	ed9d 0b00 	vldr	d0, [sp]
 8011f44:	2001      	movs	r0, #1
 8011f46:	f000 fa87 	bl	8012458 <__kernel_sin>
 8011f4a:	ec51 0b10 	vmov	r0, r1, d0
 8011f4e:	e7e6      	b.n	8011f1e <sin+0x2e>
 8011f50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f54:	ed9d 0b00 	vldr	d0, [sp]
 8011f58:	f000 f9b6 	bl	80122c8 <__kernel_cos>
 8011f5c:	e7f5      	b.n	8011f4a <sin+0x5a>
 8011f5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f62:	ed9d 0b00 	vldr	d0, [sp]
 8011f66:	2001      	movs	r0, #1
 8011f68:	f000 fa76 	bl	8012458 <__kernel_sin>
 8011f6c:	ec53 2b10 	vmov	r2, r3, d0
 8011f70:	4610      	mov	r0, r2
 8011f72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011f76:	e7d2      	b.n	8011f1e <sin+0x2e>
 8011f78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f7c:	ed9d 0b00 	vldr	d0, [sp]
 8011f80:	f000 f9a2 	bl	80122c8 <__kernel_cos>
 8011f84:	e7f2      	b.n	8011f6c <sin+0x7c>
 8011f86:	bf00      	nop
	...
 8011f90:	3fe921fb 	.word	0x3fe921fb
 8011f94:	7fefffff 	.word	0x7fefffff

08011f98 <tan>:
 8011f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f9a:	ec53 2b10 	vmov	r2, r3, d0
 8011f9e:	4816      	ldr	r0, [pc, #88]	@ (8011ff8 <tan+0x60>)
 8011fa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011fa4:	4281      	cmp	r1, r0
 8011fa6:	d807      	bhi.n	8011fb8 <tan+0x20>
 8011fa8:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8011ff0 <tan+0x58>
 8011fac:	2001      	movs	r0, #1
 8011fae:	b005      	add	sp, #20
 8011fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fb4:	f000 bb0c 	b.w	80125d0 <__kernel_tan>
 8011fb8:	4810      	ldr	r0, [pc, #64]	@ (8011ffc <tan+0x64>)
 8011fba:	4281      	cmp	r1, r0
 8011fbc:	d908      	bls.n	8011fd0 <tan+0x38>
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	f7ee f961 	bl	8000288 <__aeabi_dsub>
 8011fc6:	ec41 0b10 	vmov	d0, r0, r1
 8011fca:	b005      	add	sp, #20
 8011fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fd0:	4668      	mov	r0, sp
 8011fd2:	f000 fedd 	bl	8012d90 <__ieee754_rem_pio2>
 8011fd6:	0040      	lsls	r0, r0, #1
 8011fd8:	f000 0002 	and.w	r0, r0, #2
 8011fdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011fe0:	ed9d 0b00 	vldr	d0, [sp]
 8011fe4:	f1c0 0001 	rsb	r0, r0, #1
 8011fe8:	f000 faf2 	bl	80125d0 <__kernel_tan>
 8011fec:	e7ed      	b.n	8011fca <tan+0x32>
 8011fee:	bf00      	nop
	...
 8011ff8:	3fe921fb 	.word	0x3fe921fb
 8011ffc:	7fefffff 	.word	0x7fefffff

08012000 <finite>:
 8012000:	b082      	sub	sp, #8
 8012002:	ed8d 0b00 	vstr	d0, [sp]
 8012006:	9801      	ldr	r0, [sp, #4]
 8012008:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801200c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012010:	0fc0      	lsrs	r0, r0, #31
 8012012:	b002      	add	sp, #8
 8012014:	4770      	bx	lr

08012016 <fmax>:
 8012016:	b508      	push	{r3, lr}
 8012018:	ed2d 8b04 	vpush	{d8-d9}
 801201c:	eeb0 8a40 	vmov.f32	s16, s0
 8012020:	eef0 8a60 	vmov.f32	s17, s1
 8012024:	eeb0 9a41 	vmov.f32	s18, s2
 8012028:	eef0 9a61 	vmov.f32	s19, s3
 801202c:	f000 f848 	bl	80120c0 <__fpclassifyd>
 8012030:	b950      	cbnz	r0, 8012048 <fmax+0x32>
 8012032:	eeb0 8a49 	vmov.f32	s16, s18
 8012036:	eef0 8a69 	vmov.f32	s17, s19
 801203a:	eeb0 0a48 	vmov.f32	s0, s16
 801203e:	eef0 0a68 	vmov.f32	s1, s17
 8012042:	ecbd 8b04 	vpop	{d8-d9}
 8012046:	bd08      	pop	{r3, pc}
 8012048:	eeb0 0a49 	vmov.f32	s0, s18
 801204c:	eef0 0a69 	vmov.f32	s1, s19
 8012050:	f000 f836 	bl	80120c0 <__fpclassifyd>
 8012054:	2800      	cmp	r0, #0
 8012056:	d0f0      	beq.n	801203a <fmax+0x24>
 8012058:	ec53 2b19 	vmov	r2, r3, d9
 801205c:	ec51 0b18 	vmov	r0, r1, d8
 8012060:	f7ee fd5a 	bl	8000b18 <__aeabi_dcmpgt>
 8012064:	2800      	cmp	r0, #0
 8012066:	d0e4      	beq.n	8012032 <fmax+0x1c>
 8012068:	e7e7      	b.n	801203a <fmax+0x24>

0801206a <fmin>:
 801206a:	b508      	push	{r3, lr}
 801206c:	ed2d 8b04 	vpush	{d8-d9}
 8012070:	eeb0 8a40 	vmov.f32	s16, s0
 8012074:	eef0 8a60 	vmov.f32	s17, s1
 8012078:	eeb0 9a41 	vmov.f32	s18, s2
 801207c:	eef0 9a61 	vmov.f32	s19, s3
 8012080:	f000 f81e 	bl	80120c0 <__fpclassifyd>
 8012084:	b950      	cbnz	r0, 801209c <fmin+0x32>
 8012086:	eeb0 8a49 	vmov.f32	s16, s18
 801208a:	eef0 8a69 	vmov.f32	s17, s19
 801208e:	eeb0 0a48 	vmov.f32	s0, s16
 8012092:	eef0 0a68 	vmov.f32	s1, s17
 8012096:	ecbd 8b04 	vpop	{d8-d9}
 801209a:	bd08      	pop	{r3, pc}
 801209c:	eeb0 0a49 	vmov.f32	s0, s18
 80120a0:	eef0 0a69 	vmov.f32	s1, s19
 80120a4:	f000 f80c 	bl	80120c0 <__fpclassifyd>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d0f0      	beq.n	801208e <fmin+0x24>
 80120ac:	ec53 2b19 	vmov	r2, r3, d9
 80120b0:	ec51 0b18 	vmov	r0, r1, d8
 80120b4:	f7ee fd12 	bl	8000adc <__aeabi_dcmplt>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d0e4      	beq.n	8012086 <fmin+0x1c>
 80120bc:	e7e7      	b.n	801208e <fmin+0x24>
	...

080120c0 <__fpclassifyd>:
 80120c0:	ec51 0b10 	vmov	r0, r1, d0
 80120c4:	b510      	push	{r4, lr}
 80120c6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80120ca:	460b      	mov	r3, r1
 80120cc:	d019      	beq.n	8012102 <__fpclassifyd+0x42>
 80120ce:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80120d2:	490e      	ldr	r1, [pc, #56]	@ (801210c <__fpclassifyd+0x4c>)
 80120d4:	428a      	cmp	r2, r1
 80120d6:	d90e      	bls.n	80120f6 <__fpclassifyd+0x36>
 80120d8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80120dc:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80120e0:	428a      	cmp	r2, r1
 80120e2:	d908      	bls.n	80120f6 <__fpclassifyd+0x36>
 80120e4:	4a0a      	ldr	r2, [pc, #40]	@ (8012110 <__fpclassifyd+0x50>)
 80120e6:	4213      	tst	r3, r2
 80120e8:	d007      	beq.n	80120fa <__fpclassifyd+0x3a>
 80120ea:	4294      	cmp	r4, r2
 80120ec:	d107      	bne.n	80120fe <__fpclassifyd+0x3e>
 80120ee:	fab0 f080 	clz	r0, r0
 80120f2:	0940      	lsrs	r0, r0, #5
 80120f4:	bd10      	pop	{r4, pc}
 80120f6:	2004      	movs	r0, #4
 80120f8:	e7fc      	b.n	80120f4 <__fpclassifyd+0x34>
 80120fa:	2003      	movs	r0, #3
 80120fc:	e7fa      	b.n	80120f4 <__fpclassifyd+0x34>
 80120fe:	2000      	movs	r0, #0
 8012100:	e7f8      	b.n	80120f4 <__fpclassifyd+0x34>
 8012102:	2800      	cmp	r0, #0
 8012104:	d1ee      	bne.n	80120e4 <__fpclassifyd+0x24>
 8012106:	2002      	movs	r0, #2
 8012108:	e7f4      	b.n	80120f4 <__fpclassifyd+0x34>
 801210a:	bf00      	nop
 801210c:	7fdfffff 	.word	0x7fdfffff
 8012110:	7ff00000 	.word	0x7ff00000

08012114 <__ieee754_sqrt>:
 8012114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012118:	4a68      	ldr	r2, [pc, #416]	@ (80122bc <__ieee754_sqrt+0x1a8>)
 801211a:	ec55 4b10 	vmov	r4, r5, d0
 801211e:	43aa      	bics	r2, r5
 8012120:	462b      	mov	r3, r5
 8012122:	4621      	mov	r1, r4
 8012124:	d110      	bne.n	8012148 <__ieee754_sqrt+0x34>
 8012126:	4622      	mov	r2, r4
 8012128:	4620      	mov	r0, r4
 801212a:	4629      	mov	r1, r5
 801212c:	f7ee fa64 	bl	80005f8 <__aeabi_dmul>
 8012130:	4602      	mov	r2, r0
 8012132:	460b      	mov	r3, r1
 8012134:	4620      	mov	r0, r4
 8012136:	4629      	mov	r1, r5
 8012138:	f7ee f8a8 	bl	800028c <__adddf3>
 801213c:	4604      	mov	r4, r0
 801213e:	460d      	mov	r5, r1
 8012140:	ec45 4b10 	vmov	d0, r4, r5
 8012144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012148:	2d00      	cmp	r5, #0
 801214a:	dc0e      	bgt.n	801216a <__ieee754_sqrt+0x56>
 801214c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012150:	4322      	orrs	r2, r4
 8012152:	d0f5      	beq.n	8012140 <__ieee754_sqrt+0x2c>
 8012154:	b19d      	cbz	r5, 801217e <__ieee754_sqrt+0x6a>
 8012156:	4622      	mov	r2, r4
 8012158:	4620      	mov	r0, r4
 801215a:	4629      	mov	r1, r5
 801215c:	f7ee f894 	bl	8000288 <__aeabi_dsub>
 8012160:	4602      	mov	r2, r0
 8012162:	460b      	mov	r3, r1
 8012164:	f7ee fb72 	bl	800084c <__aeabi_ddiv>
 8012168:	e7e8      	b.n	801213c <__ieee754_sqrt+0x28>
 801216a:	152a      	asrs	r2, r5, #20
 801216c:	d115      	bne.n	801219a <__ieee754_sqrt+0x86>
 801216e:	2000      	movs	r0, #0
 8012170:	e009      	b.n	8012186 <__ieee754_sqrt+0x72>
 8012172:	0acb      	lsrs	r3, r1, #11
 8012174:	3a15      	subs	r2, #21
 8012176:	0549      	lsls	r1, r1, #21
 8012178:	2b00      	cmp	r3, #0
 801217a:	d0fa      	beq.n	8012172 <__ieee754_sqrt+0x5e>
 801217c:	e7f7      	b.n	801216e <__ieee754_sqrt+0x5a>
 801217e:	462a      	mov	r2, r5
 8012180:	e7fa      	b.n	8012178 <__ieee754_sqrt+0x64>
 8012182:	005b      	lsls	r3, r3, #1
 8012184:	3001      	adds	r0, #1
 8012186:	02dc      	lsls	r4, r3, #11
 8012188:	d5fb      	bpl.n	8012182 <__ieee754_sqrt+0x6e>
 801218a:	1e44      	subs	r4, r0, #1
 801218c:	1b12      	subs	r2, r2, r4
 801218e:	f1c0 0420 	rsb	r4, r0, #32
 8012192:	fa21 f404 	lsr.w	r4, r1, r4
 8012196:	4323      	orrs	r3, r4
 8012198:	4081      	lsls	r1, r0
 801219a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801219e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80121a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80121a6:	07d2      	lsls	r2, r2, #31
 80121a8:	bf5c      	itt	pl
 80121aa:	005b      	lslpl	r3, r3, #1
 80121ac:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80121b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80121b4:	bf58      	it	pl
 80121b6:	0049      	lslpl	r1, r1, #1
 80121b8:	2600      	movs	r6, #0
 80121ba:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80121be:	106d      	asrs	r5, r5, #1
 80121c0:	0049      	lsls	r1, r1, #1
 80121c2:	2016      	movs	r0, #22
 80121c4:	4632      	mov	r2, r6
 80121c6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80121ca:	1917      	adds	r7, r2, r4
 80121cc:	429f      	cmp	r7, r3
 80121ce:	bfde      	ittt	le
 80121d0:	193a      	addle	r2, r7, r4
 80121d2:	1bdb      	suble	r3, r3, r7
 80121d4:	1936      	addle	r6, r6, r4
 80121d6:	0fcf      	lsrs	r7, r1, #31
 80121d8:	3801      	subs	r0, #1
 80121da:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80121de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80121e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80121e6:	d1f0      	bne.n	80121ca <__ieee754_sqrt+0xb6>
 80121e8:	4604      	mov	r4, r0
 80121ea:	2720      	movs	r7, #32
 80121ec:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80121f0:	429a      	cmp	r2, r3
 80121f2:	eb00 0e0c 	add.w	lr, r0, ip
 80121f6:	db02      	blt.n	80121fe <__ieee754_sqrt+0xea>
 80121f8:	d113      	bne.n	8012222 <__ieee754_sqrt+0x10e>
 80121fa:	458e      	cmp	lr, r1
 80121fc:	d811      	bhi.n	8012222 <__ieee754_sqrt+0x10e>
 80121fe:	f1be 0f00 	cmp.w	lr, #0
 8012202:	eb0e 000c 	add.w	r0, lr, ip
 8012206:	da42      	bge.n	801228e <__ieee754_sqrt+0x17a>
 8012208:	2800      	cmp	r0, #0
 801220a:	db40      	blt.n	801228e <__ieee754_sqrt+0x17a>
 801220c:	f102 0801 	add.w	r8, r2, #1
 8012210:	1a9b      	subs	r3, r3, r2
 8012212:	458e      	cmp	lr, r1
 8012214:	bf88      	it	hi
 8012216:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801221a:	eba1 010e 	sub.w	r1, r1, lr
 801221e:	4464      	add	r4, ip
 8012220:	4642      	mov	r2, r8
 8012222:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012226:	3f01      	subs	r7, #1
 8012228:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801222c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012230:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012234:	d1dc      	bne.n	80121f0 <__ieee754_sqrt+0xdc>
 8012236:	4319      	orrs	r1, r3
 8012238:	d01b      	beq.n	8012272 <__ieee754_sqrt+0x15e>
 801223a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80122c0 <__ieee754_sqrt+0x1ac>
 801223e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80122c4 <__ieee754_sqrt+0x1b0>
 8012242:	e9da 0100 	ldrd	r0, r1, [sl]
 8012246:	e9db 2300 	ldrd	r2, r3, [fp]
 801224a:	f7ee f81d 	bl	8000288 <__aeabi_dsub>
 801224e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012252:	4602      	mov	r2, r0
 8012254:	460b      	mov	r3, r1
 8012256:	4640      	mov	r0, r8
 8012258:	4649      	mov	r1, r9
 801225a:	f7ee fc49 	bl	8000af0 <__aeabi_dcmple>
 801225e:	b140      	cbz	r0, 8012272 <__ieee754_sqrt+0x15e>
 8012260:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012264:	e9da 0100 	ldrd	r0, r1, [sl]
 8012268:	e9db 2300 	ldrd	r2, r3, [fp]
 801226c:	d111      	bne.n	8012292 <__ieee754_sqrt+0x17e>
 801226e:	3601      	adds	r6, #1
 8012270:	463c      	mov	r4, r7
 8012272:	1072      	asrs	r2, r6, #1
 8012274:	0863      	lsrs	r3, r4, #1
 8012276:	07f1      	lsls	r1, r6, #31
 8012278:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801227c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012280:	bf48      	it	mi
 8012282:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012286:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801228a:	4618      	mov	r0, r3
 801228c:	e756      	b.n	801213c <__ieee754_sqrt+0x28>
 801228e:	4690      	mov	r8, r2
 8012290:	e7be      	b.n	8012210 <__ieee754_sqrt+0xfc>
 8012292:	f7ed fffb 	bl	800028c <__adddf3>
 8012296:	e9da 8900 	ldrd	r8, r9, [sl]
 801229a:	4602      	mov	r2, r0
 801229c:	460b      	mov	r3, r1
 801229e:	4640      	mov	r0, r8
 80122a0:	4649      	mov	r1, r9
 80122a2:	f7ee fc1b 	bl	8000adc <__aeabi_dcmplt>
 80122a6:	b120      	cbz	r0, 80122b2 <__ieee754_sqrt+0x19e>
 80122a8:	1ca0      	adds	r0, r4, #2
 80122aa:	bf08      	it	eq
 80122ac:	3601      	addeq	r6, #1
 80122ae:	3402      	adds	r4, #2
 80122b0:	e7df      	b.n	8012272 <__ieee754_sqrt+0x15e>
 80122b2:	1c63      	adds	r3, r4, #1
 80122b4:	f023 0401 	bic.w	r4, r3, #1
 80122b8:	e7db      	b.n	8012272 <__ieee754_sqrt+0x15e>
 80122ba:	bf00      	nop
 80122bc:	7ff00000 	.word	0x7ff00000
 80122c0:	200002c0 	.word	0x200002c0
 80122c4:	200002b8 	.word	0x200002b8

080122c8 <__kernel_cos>:
 80122c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122cc:	ec57 6b10 	vmov	r6, r7, d0
 80122d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80122d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80122d8:	ed8d 1b00 	vstr	d1, [sp]
 80122dc:	d206      	bcs.n	80122ec <__kernel_cos+0x24>
 80122de:	4630      	mov	r0, r6
 80122e0:	4639      	mov	r1, r7
 80122e2:	f7ee fc39 	bl	8000b58 <__aeabi_d2iz>
 80122e6:	2800      	cmp	r0, #0
 80122e8:	f000 8088 	beq.w	80123fc <__kernel_cos+0x134>
 80122ec:	4632      	mov	r2, r6
 80122ee:	463b      	mov	r3, r7
 80122f0:	4630      	mov	r0, r6
 80122f2:	4639      	mov	r1, r7
 80122f4:	f7ee f980 	bl	80005f8 <__aeabi_dmul>
 80122f8:	4b51      	ldr	r3, [pc, #324]	@ (8012440 <__kernel_cos+0x178>)
 80122fa:	2200      	movs	r2, #0
 80122fc:	4604      	mov	r4, r0
 80122fe:	460d      	mov	r5, r1
 8012300:	f7ee f97a 	bl	80005f8 <__aeabi_dmul>
 8012304:	a340      	add	r3, pc, #256	@ (adr r3, 8012408 <__kernel_cos+0x140>)
 8012306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230a:	4682      	mov	sl, r0
 801230c:	468b      	mov	fp, r1
 801230e:	4620      	mov	r0, r4
 8012310:	4629      	mov	r1, r5
 8012312:	f7ee f971 	bl	80005f8 <__aeabi_dmul>
 8012316:	a33e      	add	r3, pc, #248	@ (adr r3, 8012410 <__kernel_cos+0x148>)
 8012318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231c:	f7ed ffb6 	bl	800028c <__adddf3>
 8012320:	4622      	mov	r2, r4
 8012322:	462b      	mov	r3, r5
 8012324:	f7ee f968 	bl	80005f8 <__aeabi_dmul>
 8012328:	a33b      	add	r3, pc, #236	@ (adr r3, 8012418 <__kernel_cos+0x150>)
 801232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232e:	f7ed ffab 	bl	8000288 <__aeabi_dsub>
 8012332:	4622      	mov	r2, r4
 8012334:	462b      	mov	r3, r5
 8012336:	f7ee f95f 	bl	80005f8 <__aeabi_dmul>
 801233a:	a339      	add	r3, pc, #228	@ (adr r3, 8012420 <__kernel_cos+0x158>)
 801233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012340:	f7ed ffa4 	bl	800028c <__adddf3>
 8012344:	4622      	mov	r2, r4
 8012346:	462b      	mov	r3, r5
 8012348:	f7ee f956 	bl	80005f8 <__aeabi_dmul>
 801234c:	a336      	add	r3, pc, #216	@ (adr r3, 8012428 <__kernel_cos+0x160>)
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	f7ed ff99 	bl	8000288 <__aeabi_dsub>
 8012356:	4622      	mov	r2, r4
 8012358:	462b      	mov	r3, r5
 801235a:	f7ee f94d 	bl	80005f8 <__aeabi_dmul>
 801235e:	a334      	add	r3, pc, #208	@ (adr r3, 8012430 <__kernel_cos+0x168>)
 8012360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012364:	f7ed ff92 	bl	800028c <__adddf3>
 8012368:	4622      	mov	r2, r4
 801236a:	462b      	mov	r3, r5
 801236c:	f7ee f944 	bl	80005f8 <__aeabi_dmul>
 8012370:	4622      	mov	r2, r4
 8012372:	462b      	mov	r3, r5
 8012374:	f7ee f940 	bl	80005f8 <__aeabi_dmul>
 8012378:	e9dd 2300 	ldrd	r2, r3, [sp]
 801237c:	4604      	mov	r4, r0
 801237e:	460d      	mov	r5, r1
 8012380:	4630      	mov	r0, r6
 8012382:	4639      	mov	r1, r7
 8012384:	f7ee f938 	bl	80005f8 <__aeabi_dmul>
 8012388:	460b      	mov	r3, r1
 801238a:	4602      	mov	r2, r0
 801238c:	4629      	mov	r1, r5
 801238e:	4620      	mov	r0, r4
 8012390:	f7ed ff7a 	bl	8000288 <__aeabi_dsub>
 8012394:	4b2b      	ldr	r3, [pc, #172]	@ (8012444 <__kernel_cos+0x17c>)
 8012396:	4598      	cmp	r8, r3
 8012398:	4606      	mov	r6, r0
 801239a:	460f      	mov	r7, r1
 801239c:	d810      	bhi.n	80123c0 <__kernel_cos+0xf8>
 801239e:	4602      	mov	r2, r0
 80123a0:	460b      	mov	r3, r1
 80123a2:	4650      	mov	r0, sl
 80123a4:	4659      	mov	r1, fp
 80123a6:	f7ed ff6f 	bl	8000288 <__aeabi_dsub>
 80123aa:	460b      	mov	r3, r1
 80123ac:	4926      	ldr	r1, [pc, #152]	@ (8012448 <__kernel_cos+0x180>)
 80123ae:	4602      	mov	r2, r0
 80123b0:	2000      	movs	r0, #0
 80123b2:	f7ed ff69 	bl	8000288 <__aeabi_dsub>
 80123b6:	ec41 0b10 	vmov	d0, r0, r1
 80123ba:	b003      	add	sp, #12
 80123bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c0:	4b22      	ldr	r3, [pc, #136]	@ (801244c <__kernel_cos+0x184>)
 80123c2:	4921      	ldr	r1, [pc, #132]	@ (8012448 <__kernel_cos+0x180>)
 80123c4:	4598      	cmp	r8, r3
 80123c6:	bf8c      	ite	hi
 80123c8:	4d21      	ldrhi	r5, [pc, #132]	@ (8012450 <__kernel_cos+0x188>)
 80123ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80123ce:	2400      	movs	r4, #0
 80123d0:	4622      	mov	r2, r4
 80123d2:	462b      	mov	r3, r5
 80123d4:	2000      	movs	r0, #0
 80123d6:	f7ed ff57 	bl	8000288 <__aeabi_dsub>
 80123da:	4622      	mov	r2, r4
 80123dc:	4680      	mov	r8, r0
 80123de:	4689      	mov	r9, r1
 80123e0:	462b      	mov	r3, r5
 80123e2:	4650      	mov	r0, sl
 80123e4:	4659      	mov	r1, fp
 80123e6:	f7ed ff4f 	bl	8000288 <__aeabi_dsub>
 80123ea:	4632      	mov	r2, r6
 80123ec:	463b      	mov	r3, r7
 80123ee:	f7ed ff4b 	bl	8000288 <__aeabi_dsub>
 80123f2:	4602      	mov	r2, r0
 80123f4:	460b      	mov	r3, r1
 80123f6:	4640      	mov	r0, r8
 80123f8:	4649      	mov	r1, r9
 80123fa:	e7da      	b.n	80123b2 <__kernel_cos+0xea>
 80123fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012438 <__kernel_cos+0x170>
 8012400:	e7db      	b.n	80123ba <__kernel_cos+0xf2>
 8012402:	bf00      	nop
 8012404:	f3af 8000 	nop.w
 8012408:	be8838d4 	.word	0xbe8838d4
 801240c:	bda8fae9 	.word	0xbda8fae9
 8012410:	bdb4b1c4 	.word	0xbdb4b1c4
 8012414:	3e21ee9e 	.word	0x3e21ee9e
 8012418:	809c52ad 	.word	0x809c52ad
 801241c:	3e927e4f 	.word	0x3e927e4f
 8012420:	19cb1590 	.word	0x19cb1590
 8012424:	3efa01a0 	.word	0x3efa01a0
 8012428:	16c15177 	.word	0x16c15177
 801242c:	3f56c16c 	.word	0x3f56c16c
 8012430:	5555554c 	.word	0x5555554c
 8012434:	3fa55555 	.word	0x3fa55555
 8012438:	00000000 	.word	0x00000000
 801243c:	3ff00000 	.word	0x3ff00000
 8012440:	3fe00000 	.word	0x3fe00000
 8012444:	3fd33332 	.word	0x3fd33332
 8012448:	3ff00000 	.word	0x3ff00000
 801244c:	3fe90000 	.word	0x3fe90000
 8012450:	3fd20000 	.word	0x3fd20000
 8012454:	00000000 	.word	0x00000000

08012458 <__kernel_sin>:
 8012458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245c:	ec55 4b10 	vmov	r4, r5, d0
 8012460:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012464:	b085      	sub	sp, #20
 8012466:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801246a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801246e:	4680      	mov	r8, r0
 8012470:	d205      	bcs.n	801247e <__kernel_sin+0x26>
 8012472:	4620      	mov	r0, r4
 8012474:	4629      	mov	r1, r5
 8012476:	f7ee fb6f 	bl	8000b58 <__aeabi_d2iz>
 801247a:	2800      	cmp	r0, #0
 801247c:	d052      	beq.n	8012524 <__kernel_sin+0xcc>
 801247e:	4622      	mov	r2, r4
 8012480:	462b      	mov	r3, r5
 8012482:	4620      	mov	r0, r4
 8012484:	4629      	mov	r1, r5
 8012486:	f7ee f8b7 	bl	80005f8 <__aeabi_dmul>
 801248a:	4682      	mov	sl, r0
 801248c:	468b      	mov	fp, r1
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	4620      	mov	r0, r4
 8012494:	4629      	mov	r1, r5
 8012496:	f7ee f8af 	bl	80005f8 <__aeabi_dmul>
 801249a:	a342      	add	r3, pc, #264	@ (adr r3, 80125a4 <__kernel_sin+0x14c>)
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	e9cd 0100 	strd	r0, r1, [sp]
 80124a4:	4650      	mov	r0, sl
 80124a6:	4659      	mov	r1, fp
 80124a8:	f7ee f8a6 	bl	80005f8 <__aeabi_dmul>
 80124ac:	a33f      	add	r3, pc, #252	@ (adr r3, 80125ac <__kernel_sin+0x154>)
 80124ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b2:	f7ed fee9 	bl	8000288 <__aeabi_dsub>
 80124b6:	4652      	mov	r2, sl
 80124b8:	465b      	mov	r3, fp
 80124ba:	f7ee f89d 	bl	80005f8 <__aeabi_dmul>
 80124be:	a33d      	add	r3, pc, #244	@ (adr r3, 80125b4 <__kernel_sin+0x15c>)
 80124c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c4:	f7ed fee2 	bl	800028c <__adddf3>
 80124c8:	4652      	mov	r2, sl
 80124ca:	465b      	mov	r3, fp
 80124cc:	f7ee f894 	bl	80005f8 <__aeabi_dmul>
 80124d0:	a33a      	add	r3, pc, #232	@ (adr r3, 80125bc <__kernel_sin+0x164>)
 80124d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d6:	f7ed fed7 	bl	8000288 <__aeabi_dsub>
 80124da:	4652      	mov	r2, sl
 80124dc:	465b      	mov	r3, fp
 80124de:	f7ee f88b 	bl	80005f8 <__aeabi_dmul>
 80124e2:	a338      	add	r3, pc, #224	@ (adr r3, 80125c4 <__kernel_sin+0x16c>)
 80124e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e8:	f7ed fed0 	bl	800028c <__adddf3>
 80124ec:	4606      	mov	r6, r0
 80124ee:	460f      	mov	r7, r1
 80124f0:	f1b8 0f00 	cmp.w	r8, #0
 80124f4:	d11b      	bne.n	801252e <__kernel_sin+0xd6>
 80124f6:	4602      	mov	r2, r0
 80124f8:	460b      	mov	r3, r1
 80124fa:	4650      	mov	r0, sl
 80124fc:	4659      	mov	r1, fp
 80124fe:	f7ee f87b 	bl	80005f8 <__aeabi_dmul>
 8012502:	a325      	add	r3, pc, #148	@ (adr r3, 8012598 <__kernel_sin+0x140>)
 8012504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012508:	f7ed febe 	bl	8000288 <__aeabi_dsub>
 801250c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012510:	f7ee f872 	bl	80005f8 <__aeabi_dmul>
 8012514:	4602      	mov	r2, r0
 8012516:	460b      	mov	r3, r1
 8012518:	4620      	mov	r0, r4
 801251a:	4629      	mov	r1, r5
 801251c:	f7ed feb6 	bl	800028c <__adddf3>
 8012520:	4604      	mov	r4, r0
 8012522:	460d      	mov	r5, r1
 8012524:	ec45 4b10 	vmov	d0, r4, r5
 8012528:	b005      	add	sp, #20
 801252a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801252e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012532:	4b1b      	ldr	r3, [pc, #108]	@ (80125a0 <__kernel_sin+0x148>)
 8012534:	2200      	movs	r2, #0
 8012536:	f7ee f85f 	bl	80005f8 <__aeabi_dmul>
 801253a:	4632      	mov	r2, r6
 801253c:	4680      	mov	r8, r0
 801253e:	4689      	mov	r9, r1
 8012540:	463b      	mov	r3, r7
 8012542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012546:	f7ee f857 	bl	80005f8 <__aeabi_dmul>
 801254a:	4602      	mov	r2, r0
 801254c:	460b      	mov	r3, r1
 801254e:	4640      	mov	r0, r8
 8012550:	4649      	mov	r1, r9
 8012552:	f7ed fe99 	bl	8000288 <__aeabi_dsub>
 8012556:	4652      	mov	r2, sl
 8012558:	465b      	mov	r3, fp
 801255a:	f7ee f84d 	bl	80005f8 <__aeabi_dmul>
 801255e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012562:	f7ed fe91 	bl	8000288 <__aeabi_dsub>
 8012566:	a30c      	add	r3, pc, #48	@ (adr r3, 8012598 <__kernel_sin+0x140>)
 8012568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256c:	4606      	mov	r6, r0
 801256e:	460f      	mov	r7, r1
 8012570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012574:	f7ee f840 	bl	80005f8 <__aeabi_dmul>
 8012578:	4602      	mov	r2, r0
 801257a:	460b      	mov	r3, r1
 801257c:	4630      	mov	r0, r6
 801257e:	4639      	mov	r1, r7
 8012580:	f7ed fe84 	bl	800028c <__adddf3>
 8012584:	4602      	mov	r2, r0
 8012586:	460b      	mov	r3, r1
 8012588:	4620      	mov	r0, r4
 801258a:	4629      	mov	r1, r5
 801258c:	f7ed fe7c 	bl	8000288 <__aeabi_dsub>
 8012590:	e7c6      	b.n	8012520 <__kernel_sin+0xc8>
 8012592:	bf00      	nop
 8012594:	f3af 8000 	nop.w
 8012598:	55555549 	.word	0x55555549
 801259c:	3fc55555 	.word	0x3fc55555
 80125a0:	3fe00000 	.word	0x3fe00000
 80125a4:	5acfd57c 	.word	0x5acfd57c
 80125a8:	3de5d93a 	.word	0x3de5d93a
 80125ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80125b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80125b4:	57b1fe7d 	.word	0x57b1fe7d
 80125b8:	3ec71de3 	.word	0x3ec71de3
 80125bc:	19c161d5 	.word	0x19c161d5
 80125c0:	3f2a01a0 	.word	0x3f2a01a0
 80125c4:	1110f8a6 	.word	0x1110f8a6
 80125c8:	3f811111 	.word	0x3f811111
 80125cc:	00000000 	.word	0x00000000

080125d0 <__kernel_tan>:
 80125d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d4:	ec5b ab10 	vmov	sl, fp, d0
 80125d8:	4bdb      	ldr	r3, [pc, #876]	@ (8012948 <__kernel_tan+0x378>)
 80125da:	b089      	sub	sp, #36	@ 0x24
 80125dc:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 80125e0:	429f      	cmp	r7, r3
 80125e2:	ec59 8b11 	vmov	r8, r9, d1
 80125e6:	4606      	mov	r6, r0
 80125e8:	f8cd b008 	str.w	fp, [sp, #8]
 80125ec:	d85d      	bhi.n	80126aa <__kernel_tan+0xda>
 80125ee:	4650      	mov	r0, sl
 80125f0:	4659      	mov	r1, fp
 80125f2:	f7ee fab1 	bl	8000b58 <__aeabi_d2iz>
 80125f6:	4605      	mov	r5, r0
 80125f8:	2800      	cmp	r0, #0
 80125fa:	d17c      	bne.n	80126f6 <__kernel_tan+0x126>
 80125fc:	1c73      	adds	r3, r6, #1
 80125fe:	4652      	mov	r2, sl
 8012600:	4313      	orrs	r3, r2
 8012602:	433b      	orrs	r3, r7
 8012604:	d110      	bne.n	8012628 <__kernel_tan+0x58>
 8012606:	ec4b ab10 	vmov	d0, sl, fp
 801260a:	f000 ff55 	bl	80134b8 <fabs>
 801260e:	49cf      	ldr	r1, [pc, #828]	@ (801294c <__kernel_tan+0x37c>)
 8012610:	ec53 2b10 	vmov	r2, r3, d0
 8012614:	2000      	movs	r0, #0
 8012616:	f7ee f919 	bl	800084c <__aeabi_ddiv>
 801261a:	4682      	mov	sl, r0
 801261c:	468b      	mov	fp, r1
 801261e:	ec4b ab10 	vmov	d0, sl, fp
 8012622:	b009      	add	sp, #36	@ 0x24
 8012624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012628:	2e01      	cmp	r6, #1
 801262a:	d0f8      	beq.n	801261e <__kernel_tan+0x4e>
 801262c:	4642      	mov	r2, r8
 801262e:	464b      	mov	r3, r9
 8012630:	4650      	mov	r0, sl
 8012632:	4659      	mov	r1, fp
 8012634:	f7ed fe2a 	bl	800028c <__adddf3>
 8012638:	4602      	mov	r2, r0
 801263a:	460b      	mov	r3, r1
 801263c:	460f      	mov	r7, r1
 801263e:	2000      	movs	r0, #0
 8012640:	49c3      	ldr	r1, [pc, #780]	@ (8012950 <__kernel_tan+0x380>)
 8012642:	f7ee f903 	bl	800084c <__aeabi_ddiv>
 8012646:	e9cd 0100 	strd	r0, r1, [sp]
 801264a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801264e:	462e      	mov	r6, r5
 8012650:	4652      	mov	r2, sl
 8012652:	462c      	mov	r4, r5
 8012654:	4630      	mov	r0, r6
 8012656:	461d      	mov	r5, r3
 8012658:	4639      	mov	r1, r7
 801265a:	465b      	mov	r3, fp
 801265c:	f7ed fe14 	bl	8000288 <__aeabi_dsub>
 8012660:	4602      	mov	r2, r0
 8012662:	460b      	mov	r3, r1
 8012664:	4640      	mov	r0, r8
 8012666:	4649      	mov	r1, r9
 8012668:	f7ed fe0e 	bl	8000288 <__aeabi_dsub>
 801266c:	4632      	mov	r2, r6
 801266e:	462b      	mov	r3, r5
 8012670:	f7ed ffc2 	bl	80005f8 <__aeabi_dmul>
 8012674:	4632      	mov	r2, r6
 8012676:	4682      	mov	sl, r0
 8012678:	468b      	mov	fp, r1
 801267a:	462b      	mov	r3, r5
 801267c:	4630      	mov	r0, r6
 801267e:	4639      	mov	r1, r7
 8012680:	f7ed ffba 	bl	80005f8 <__aeabi_dmul>
 8012684:	4bb1      	ldr	r3, [pc, #708]	@ (801294c <__kernel_tan+0x37c>)
 8012686:	2200      	movs	r2, #0
 8012688:	f7ed fe00 	bl	800028c <__adddf3>
 801268c:	4602      	mov	r2, r0
 801268e:	460b      	mov	r3, r1
 8012690:	4650      	mov	r0, sl
 8012692:	4659      	mov	r1, fp
 8012694:	f7ed fdfa 	bl	800028c <__adddf3>
 8012698:	e9dd 2300 	ldrd	r2, r3, [sp]
 801269c:	f7ed ffac 	bl	80005f8 <__aeabi_dmul>
 80126a0:	4622      	mov	r2, r4
 80126a2:	462b      	mov	r3, r5
 80126a4:	f7ed fdf2 	bl	800028c <__adddf3>
 80126a8:	e7b7      	b.n	801261a <__kernel_tan+0x4a>
 80126aa:	4baa      	ldr	r3, [pc, #680]	@ (8012954 <__kernel_tan+0x384>)
 80126ac:	429f      	cmp	r7, r3
 80126ae:	d922      	bls.n	80126f6 <__kernel_tan+0x126>
 80126b0:	9b02      	ldr	r3, [sp, #8]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	da05      	bge.n	80126c2 <__kernel_tan+0xf2>
 80126b6:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80126ba:	469b      	mov	fp, r3
 80126bc:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80126c0:	4699      	mov	r9, r3
 80126c2:	4652      	mov	r2, sl
 80126c4:	465b      	mov	r3, fp
 80126c6:	a182      	add	r1, pc, #520	@ (adr r1, 80128d0 <__kernel_tan+0x300>)
 80126c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126cc:	f7ed fddc 	bl	8000288 <__aeabi_dsub>
 80126d0:	4642      	mov	r2, r8
 80126d2:	464b      	mov	r3, r9
 80126d4:	4604      	mov	r4, r0
 80126d6:	460d      	mov	r5, r1
 80126d8:	a17f      	add	r1, pc, #508	@ (adr r1, 80128d8 <__kernel_tan+0x308>)
 80126da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126de:	f7ed fdd3 	bl	8000288 <__aeabi_dsub>
 80126e2:	4622      	mov	r2, r4
 80126e4:	462b      	mov	r3, r5
 80126e6:	f7ed fdd1 	bl	800028c <__adddf3>
 80126ea:	f04f 0800 	mov.w	r8, #0
 80126ee:	4682      	mov	sl, r0
 80126f0:	468b      	mov	fp, r1
 80126f2:	f04f 0900 	mov.w	r9, #0
 80126f6:	4652      	mov	r2, sl
 80126f8:	465b      	mov	r3, fp
 80126fa:	4650      	mov	r0, sl
 80126fc:	4659      	mov	r1, fp
 80126fe:	f7ed ff7b 	bl	80005f8 <__aeabi_dmul>
 8012702:	4602      	mov	r2, r0
 8012704:	460b      	mov	r3, r1
 8012706:	e9cd 2300 	strd	r2, r3, [sp]
 801270a:	f7ed ff75 	bl	80005f8 <__aeabi_dmul>
 801270e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012712:	4604      	mov	r4, r0
 8012714:	460d      	mov	r5, r1
 8012716:	4650      	mov	r0, sl
 8012718:	4659      	mov	r1, fp
 801271a:	f7ed ff6d 	bl	80005f8 <__aeabi_dmul>
 801271e:	a370      	add	r3, pc, #448	@ (adr r3, 80128e0 <__kernel_tan+0x310>)
 8012720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012728:	4620      	mov	r0, r4
 801272a:	4629      	mov	r1, r5
 801272c:	f7ed ff64 	bl	80005f8 <__aeabi_dmul>
 8012730:	a36d      	add	r3, pc, #436	@ (adr r3, 80128e8 <__kernel_tan+0x318>)
 8012732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012736:	f7ed fda9 	bl	800028c <__adddf3>
 801273a:	4622      	mov	r2, r4
 801273c:	462b      	mov	r3, r5
 801273e:	f7ed ff5b 	bl	80005f8 <__aeabi_dmul>
 8012742:	a36b      	add	r3, pc, #428	@ (adr r3, 80128f0 <__kernel_tan+0x320>)
 8012744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012748:	f7ed fda0 	bl	800028c <__adddf3>
 801274c:	4622      	mov	r2, r4
 801274e:	462b      	mov	r3, r5
 8012750:	f7ed ff52 	bl	80005f8 <__aeabi_dmul>
 8012754:	a368      	add	r3, pc, #416	@ (adr r3, 80128f8 <__kernel_tan+0x328>)
 8012756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275a:	f7ed fd97 	bl	800028c <__adddf3>
 801275e:	4622      	mov	r2, r4
 8012760:	462b      	mov	r3, r5
 8012762:	f7ed ff49 	bl	80005f8 <__aeabi_dmul>
 8012766:	a366      	add	r3, pc, #408	@ (adr r3, 8012900 <__kernel_tan+0x330>)
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	f7ed fd8e 	bl	800028c <__adddf3>
 8012770:	4622      	mov	r2, r4
 8012772:	462b      	mov	r3, r5
 8012774:	f7ed ff40 	bl	80005f8 <__aeabi_dmul>
 8012778:	a363      	add	r3, pc, #396	@ (adr r3, 8012908 <__kernel_tan+0x338>)
 801277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277e:	f7ed fd85 	bl	800028c <__adddf3>
 8012782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012786:	f7ed ff37 	bl	80005f8 <__aeabi_dmul>
 801278a:	a361      	add	r3, pc, #388	@ (adr r3, 8012910 <__kernel_tan+0x340>)
 801278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012790:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012794:	4620      	mov	r0, r4
 8012796:	4629      	mov	r1, r5
 8012798:	f7ed ff2e 	bl	80005f8 <__aeabi_dmul>
 801279c:	a35e      	add	r3, pc, #376	@ (adr r3, 8012918 <__kernel_tan+0x348>)
 801279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a2:	f7ed fd73 	bl	800028c <__adddf3>
 80127a6:	4622      	mov	r2, r4
 80127a8:	462b      	mov	r3, r5
 80127aa:	f7ed ff25 	bl	80005f8 <__aeabi_dmul>
 80127ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8012920 <__kernel_tan+0x350>)
 80127b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b4:	f7ed fd6a 	bl	800028c <__adddf3>
 80127b8:	4622      	mov	r2, r4
 80127ba:	462b      	mov	r3, r5
 80127bc:	f7ed ff1c 	bl	80005f8 <__aeabi_dmul>
 80127c0:	a359      	add	r3, pc, #356	@ (adr r3, 8012928 <__kernel_tan+0x358>)
 80127c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c6:	f7ed fd61 	bl	800028c <__adddf3>
 80127ca:	4622      	mov	r2, r4
 80127cc:	462b      	mov	r3, r5
 80127ce:	f7ed ff13 	bl	80005f8 <__aeabi_dmul>
 80127d2:	a357      	add	r3, pc, #348	@ (adr r3, 8012930 <__kernel_tan+0x360>)
 80127d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d8:	f7ed fd58 	bl	800028c <__adddf3>
 80127dc:	4622      	mov	r2, r4
 80127de:	462b      	mov	r3, r5
 80127e0:	f7ed ff0a 	bl	80005f8 <__aeabi_dmul>
 80127e4:	a354      	add	r3, pc, #336	@ (adr r3, 8012938 <__kernel_tan+0x368>)
 80127e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ea:	f7ed fd4f 	bl	800028c <__adddf3>
 80127ee:	4602      	mov	r2, r0
 80127f0:	460b      	mov	r3, r1
 80127f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127f6:	f7ed fd49 	bl	800028c <__adddf3>
 80127fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127fe:	f7ed fefb 	bl	80005f8 <__aeabi_dmul>
 8012802:	4642      	mov	r2, r8
 8012804:	464b      	mov	r3, r9
 8012806:	f7ed fd41 	bl	800028c <__adddf3>
 801280a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801280e:	f7ed fef3 	bl	80005f8 <__aeabi_dmul>
 8012812:	4642      	mov	r2, r8
 8012814:	464b      	mov	r3, r9
 8012816:	f7ed fd39 	bl	800028c <__adddf3>
 801281a:	a349      	add	r3, pc, #292	@ (adr r3, 8012940 <__kernel_tan+0x370>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	4604      	mov	r4, r0
 8012822:	460d      	mov	r5, r1
 8012824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012828:	f7ed fee6 	bl	80005f8 <__aeabi_dmul>
 801282c:	4622      	mov	r2, r4
 801282e:	462b      	mov	r3, r5
 8012830:	f7ed fd2c 	bl	800028c <__adddf3>
 8012834:	e9cd 0100 	strd	r0, r1, [sp]
 8012838:	460b      	mov	r3, r1
 801283a:	4602      	mov	r2, r0
 801283c:	4659      	mov	r1, fp
 801283e:	4650      	mov	r0, sl
 8012840:	f7ed fd24 	bl	800028c <__adddf3>
 8012844:	4b43      	ldr	r3, [pc, #268]	@ (8012954 <__kernel_tan+0x384>)
 8012846:	429f      	cmp	r7, r3
 8012848:	4604      	mov	r4, r0
 801284a:	460d      	mov	r5, r1
 801284c:	f240 8084 	bls.w	8012958 <__kernel_tan+0x388>
 8012850:	4630      	mov	r0, r6
 8012852:	f7ed fe67 	bl	8000524 <__aeabi_i2d>
 8012856:	4622      	mov	r2, r4
 8012858:	4680      	mov	r8, r0
 801285a:	4689      	mov	r9, r1
 801285c:	462b      	mov	r3, r5
 801285e:	4620      	mov	r0, r4
 8012860:	4629      	mov	r1, r5
 8012862:	f7ed fec9 	bl	80005f8 <__aeabi_dmul>
 8012866:	4642      	mov	r2, r8
 8012868:	4606      	mov	r6, r0
 801286a:	460f      	mov	r7, r1
 801286c:	464b      	mov	r3, r9
 801286e:	4620      	mov	r0, r4
 8012870:	4629      	mov	r1, r5
 8012872:	f7ed fd0b 	bl	800028c <__adddf3>
 8012876:	4602      	mov	r2, r0
 8012878:	460b      	mov	r3, r1
 801287a:	4630      	mov	r0, r6
 801287c:	4639      	mov	r1, r7
 801287e:	f7ed ffe5 	bl	800084c <__aeabi_ddiv>
 8012882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012886:	f7ed fcff 	bl	8000288 <__aeabi_dsub>
 801288a:	4602      	mov	r2, r0
 801288c:	460b      	mov	r3, r1
 801288e:	4650      	mov	r0, sl
 8012890:	4659      	mov	r1, fp
 8012892:	f7ed fcf9 	bl	8000288 <__aeabi_dsub>
 8012896:	4602      	mov	r2, r0
 8012898:	460b      	mov	r3, r1
 801289a:	f7ed fcf7 	bl	800028c <__adddf3>
 801289e:	4602      	mov	r2, r0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4640      	mov	r0, r8
 80128a4:	4649      	mov	r1, r9
 80128a6:	f7ed fcef 	bl	8000288 <__aeabi_dsub>
 80128aa:	9b02      	ldr	r3, [sp, #8]
 80128ac:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80128b0:	f00a 0a02 	and.w	sl, sl, #2
 80128b4:	4604      	mov	r4, r0
 80128b6:	f1ca 0001 	rsb	r0, sl, #1
 80128ba:	460d      	mov	r5, r1
 80128bc:	f7ed fe32 	bl	8000524 <__aeabi_i2d>
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	4620      	mov	r0, r4
 80128c6:	4629      	mov	r1, r5
 80128c8:	f7ed fe96 	bl	80005f8 <__aeabi_dmul>
 80128cc:	e6a5      	b.n	801261a <__kernel_tan+0x4a>
 80128ce:	bf00      	nop
 80128d0:	54442d18 	.word	0x54442d18
 80128d4:	3fe921fb 	.word	0x3fe921fb
 80128d8:	33145c07 	.word	0x33145c07
 80128dc:	3c81a626 	.word	0x3c81a626
 80128e0:	74bf7ad4 	.word	0x74bf7ad4
 80128e4:	3efb2a70 	.word	0x3efb2a70
 80128e8:	32f0a7e9 	.word	0x32f0a7e9
 80128ec:	3f12b80f 	.word	0x3f12b80f
 80128f0:	1a8d1068 	.word	0x1a8d1068
 80128f4:	3f3026f7 	.word	0x3f3026f7
 80128f8:	fee08315 	.word	0xfee08315
 80128fc:	3f57dbc8 	.word	0x3f57dbc8
 8012900:	e96e8493 	.word	0xe96e8493
 8012904:	3f8226e3 	.word	0x3f8226e3
 8012908:	1bb341fe 	.word	0x1bb341fe
 801290c:	3faba1ba 	.word	0x3faba1ba
 8012910:	db605373 	.word	0xdb605373
 8012914:	bef375cb 	.word	0xbef375cb
 8012918:	a03792a6 	.word	0xa03792a6
 801291c:	3f147e88 	.word	0x3f147e88
 8012920:	f2f26501 	.word	0xf2f26501
 8012924:	3f4344d8 	.word	0x3f4344d8
 8012928:	c9560328 	.word	0xc9560328
 801292c:	3f6d6d22 	.word	0x3f6d6d22
 8012930:	8406d637 	.word	0x8406d637
 8012934:	3f9664f4 	.word	0x3f9664f4
 8012938:	1110fe7a 	.word	0x1110fe7a
 801293c:	3fc11111 	.word	0x3fc11111
 8012940:	55555563 	.word	0x55555563
 8012944:	3fd55555 	.word	0x3fd55555
 8012948:	3e2fffff 	.word	0x3e2fffff
 801294c:	3ff00000 	.word	0x3ff00000
 8012950:	bff00000 	.word	0xbff00000
 8012954:	3fe59427 	.word	0x3fe59427
 8012958:	2e01      	cmp	r6, #1
 801295a:	d033      	beq.n	80129c4 <__kernel_tan+0x3f4>
 801295c:	f04f 0800 	mov.w	r8, #0
 8012960:	4689      	mov	r9, r1
 8012962:	4602      	mov	r2, r0
 8012964:	460b      	mov	r3, r1
 8012966:	2000      	movs	r0, #0
 8012968:	4918      	ldr	r1, [pc, #96]	@ (80129cc <__kernel_tan+0x3fc>)
 801296a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801296e:	f7ed ff6d 	bl	800084c <__aeabi_ddiv>
 8012972:	4652      	mov	r2, sl
 8012974:	460f      	mov	r7, r1
 8012976:	465b      	mov	r3, fp
 8012978:	4606      	mov	r6, r0
 801297a:	460d      	mov	r5, r1
 801297c:	4640      	mov	r0, r8
 801297e:	4649      	mov	r1, r9
 8012980:	f7ed fc82 	bl	8000288 <__aeabi_dsub>
 8012984:	4602      	mov	r2, r0
 8012986:	460b      	mov	r3, r1
 8012988:	e9dd 0100 	ldrd	r0, r1, [sp]
 801298c:	f7ed fc7c 	bl	8000288 <__aeabi_dsub>
 8012990:	4642      	mov	r2, r8
 8012992:	463b      	mov	r3, r7
 8012994:	f7ed fe30 	bl	80005f8 <__aeabi_dmul>
 8012998:	4642      	mov	r2, r8
 801299a:	4682      	mov	sl, r0
 801299c:	468b      	mov	fp, r1
 801299e:	463b      	mov	r3, r7
 80129a0:	4640      	mov	r0, r8
 80129a2:	4649      	mov	r1, r9
 80129a4:	f7ed fe28 	bl	80005f8 <__aeabi_dmul>
 80129a8:	4b09      	ldr	r3, [pc, #36]	@ (80129d0 <__kernel_tan+0x400>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	f7ed fc6e 	bl	800028c <__adddf3>
 80129b0:	4602      	mov	r2, r0
 80129b2:	460b      	mov	r3, r1
 80129b4:	4650      	mov	r0, sl
 80129b6:	4659      	mov	r1, fp
 80129b8:	f7ed fc68 	bl	800028c <__adddf3>
 80129bc:	4644      	mov	r4, r8
 80129be:	4632      	mov	r2, r6
 80129c0:	463b      	mov	r3, r7
 80129c2:	e66b      	b.n	801269c <__kernel_tan+0xcc>
 80129c4:	4682      	mov	sl, r0
 80129c6:	468b      	mov	fp, r1
 80129c8:	e629      	b.n	801261e <__kernel_tan+0x4e>
 80129ca:	bf00      	nop
 80129cc:	bff00000 	.word	0xbff00000
 80129d0:	3ff00000 	.word	0x3ff00000
 80129d4:	00000000 	.word	0x00000000

080129d8 <__ieee754_atan2>:
 80129d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129dc:	ec57 6b11 	vmov	r6, r7, d1
 80129e0:	4273      	negs	r3, r6
 80129e2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8012b60 <__ieee754_atan2+0x188>
 80129e6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80129ea:	4333      	orrs	r3, r6
 80129ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80129f0:	4543      	cmp	r3, r8
 80129f2:	ec51 0b10 	vmov	r0, r1, d0
 80129f6:	4635      	mov	r5, r6
 80129f8:	d809      	bhi.n	8012a0e <__ieee754_atan2+0x36>
 80129fa:	4244      	negs	r4, r0
 80129fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012a00:	4304      	orrs	r4, r0
 8012a02:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012a06:	4544      	cmp	r4, r8
 8012a08:	468e      	mov	lr, r1
 8012a0a:	4681      	mov	r9, r0
 8012a0c:	d907      	bls.n	8012a1e <__ieee754_atan2+0x46>
 8012a0e:	4632      	mov	r2, r6
 8012a10:	463b      	mov	r3, r7
 8012a12:	f7ed fc3b 	bl	800028c <__adddf3>
 8012a16:	ec41 0b10 	vmov	d0, r0, r1
 8012a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a1e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8012a22:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8012a26:	4334      	orrs	r4, r6
 8012a28:	d103      	bne.n	8012a32 <__ieee754_atan2+0x5a>
 8012a2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a2e:	f000 bbab 	b.w	8013188 <atan>
 8012a32:	17bc      	asrs	r4, r7, #30
 8012a34:	f004 0402 	and.w	r4, r4, #2
 8012a38:	ea53 0909 	orrs.w	r9, r3, r9
 8012a3c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012a40:	d107      	bne.n	8012a52 <__ieee754_atan2+0x7a>
 8012a42:	2c02      	cmp	r4, #2
 8012a44:	d05f      	beq.n	8012b06 <__ieee754_atan2+0x12e>
 8012a46:	2c03      	cmp	r4, #3
 8012a48:	d1e5      	bne.n	8012a16 <__ieee754_atan2+0x3e>
 8012a4a:	a141      	add	r1, pc, #260	@ (adr r1, 8012b50 <__ieee754_atan2+0x178>)
 8012a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a50:	e7e1      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012a52:	4315      	orrs	r5, r2
 8012a54:	d106      	bne.n	8012a64 <__ieee754_atan2+0x8c>
 8012a56:	f1be 0f00 	cmp.w	lr, #0
 8012a5a:	da5f      	bge.n	8012b1c <__ieee754_atan2+0x144>
 8012a5c:	a13e      	add	r1, pc, #248	@ (adr r1, 8012b58 <__ieee754_atan2+0x180>)
 8012a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a62:	e7d8      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012a64:	4542      	cmp	r2, r8
 8012a66:	d10f      	bne.n	8012a88 <__ieee754_atan2+0xb0>
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012a6e:	d107      	bne.n	8012a80 <__ieee754_atan2+0xa8>
 8012a70:	2c02      	cmp	r4, #2
 8012a72:	d84c      	bhi.n	8012b0e <__ieee754_atan2+0x136>
 8012a74:	4b34      	ldr	r3, [pc, #208]	@ (8012b48 <__ieee754_atan2+0x170>)
 8012a76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a7e:	e7ca      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012a80:	2c02      	cmp	r4, #2
 8012a82:	d848      	bhi.n	8012b16 <__ieee754_atan2+0x13e>
 8012a84:	4b31      	ldr	r3, [pc, #196]	@ (8012b4c <__ieee754_atan2+0x174>)
 8012a86:	e7f6      	b.n	8012a76 <__ieee754_atan2+0x9e>
 8012a88:	4543      	cmp	r3, r8
 8012a8a:	d0e4      	beq.n	8012a56 <__ieee754_atan2+0x7e>
 8012a8c:	1a9b      	subs	r3, r3, r2
 8012a8e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8012a92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012a96:	da1e      	bge.n	8012ad6 <__ieee754_atan2+0xfe>
 8012a98:	2f00      	cmp	r7, #0
 8012a9a:	da01      	bge.n	8012aa0 <__ieee754_atan2+0xc8>
 8012a9c:	323c      	adds	r2, #60	@ 0x3c
 8012a9e:	db1e      	blt.n	8012ade <__ieee754_atan2+0x106>
 8012aa0:	4632      	mov	r2, r6
 8012aa2:	463b      	mov	r3, r7
 8012aa4:	f7ed fed2 	bl	800084c <__aeabi_ddiv>
 8012aa8:	ec41 0b10 	vmov	d0, r0, r1
 8012aac:	f000 fd04 	bl	80134b8 <fabs>
 8012ab0:	f000 fb6a 	bl	8013188 <atan>
 8012ab4:	ec51 0b10 	vmov	r0, r1, d0
 8012ab8:	2c01      	cmp	r4, #1
 8012aba:	d013      	beq.n	8012ae4 <__ieee754_atan2+0x10c>
 8012abc:	2c02      	cmp	r4, #2
 8012abe:	d015      	beq.n	8012aec <__ieee754_atan2+0x114>
 8012ac0:	2c00      	cmp	r4, #0
 8012ac2:	d0a8      	beq.n	8012a16 <__ieee754_atan2+0x3e>
 8012ac4:	a318      	add	r3, pc, #96	@ (adr r3, 8012b28 <__ieee754_atan2+0x150>)
 8012ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aca:	f7ed fbdd 	bl	8000288 <__aeabi_dsub>
 8012ace:	a318      	add	r3, pc, #96	@ (adr r3, 8012b30 <__ieee754_atan2+0x158>)
 8012ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad4:	e014      	b.n	8012b00 <__ieee754_atan2+0x128>
 8012ad6:	a118      	add	r1, pc, #96	@ (adr r1, 8012b38 <__ieee754_atan2+0x160>)
 8012ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012adc:	e7ec      	b.n	8012ab8 <__ieee754_atan2+0xe0>
 8012ade:	2000      	movs	r0, #0
 8012ae0:	2100      	movs	r1, #0
 8012ae2:	e7e9      	b.n	8012ab8 <__ieee754_atan2+0xe0>
 8012ae4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012ae8:	4619      	mov	r1, r3
 8012aea:	e794      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012aec:	a30e      	add	r3, pc, #56	@ (adr r3, 8012b28 <__ieee754_atan2+0x150>)
 8012aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af2:	f7ed fbc9 	bl	8000288 <__aeabi_dsub>
 8012af6:	4602      	mov	r2, r0
 8012af8:	460b      	mov	r3, r1
 8012afa:	a10d      	add	r1, pc, #52	@ (adr r1, 8012b30 <__ieee754_atan2+0x158>)
 8012afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b00:	f7ed fbc2 	bl	8000288 <__aeabi_dsub>
 8012b04:	e787      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012b06:	a10a      	add	r1, pc, #40	@ (adr r1, 8012b30 <__ieee754_atan2+0x158>)
 8012b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b0c:	e783      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012b0e:	a10c      	add	r1, pc, #48	@ (adr r1, 8012b40 <__ieee754_atan2+0x168>)
 8012b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b14:	e77f      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012b16:	2000      	movs	r0, #0
 8012b18:	2100      	movs	r1, #0
 8012b1a:	e77c      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012b1c:	a106      	add	r1, pc, #24	@ (adr r1, 8012b38 <__ieee754_atan2+0x160>)
 8012b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b22:	e778      	b.n	8012a16 <__ieee754_atan2+0x3e>
 8012b24:	f3af 8000 	nop.w
 8012b28:	33145c07 	.word	0x33145c07
 8012b2c:	3ca1a626 	.word	0x3ca1a626
 8012b30:	54442d18 	.word	0x54442d18
 8012b34:	400921fb 	.word	0x400921fb
 8012b38:	54442d18 	.word	0x54442d18
 8012b3c:	3ff921fb 	.word	0x3ff921fb
 8012b40:	54442d18 	.word	0x54442d18
 8012b44:	3fe921fb 	.word	0x3fe921fb
 8012b48:	080143f0 	.word	0x080143f0
 8012b4c:	080143d8 	.word	0x080143d8
 8012b50:	54442d18 	.word	0x54442d18
 8012b54:	c00921fb 	.word	0xc00921fb
 8012b58:	54442d18 	.word	0x54442d18
 8012b5c:	bff921fb 	.word	0xbff921fb
 8012b60:	7ff00000 	.word	0x7ff00000

08012b64 <__ieee754_hypot>:
 8012b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b68:	ec51 0b10 	vmov	r0, r1, d0
 8012b6c:	ec53 2b11 	vmov	r2, r3, d1
 8012b70:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8012b74:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8012b78:	42a5      	cmp	r5, r4
 8012b7a:	b087      	sub	sp, #28
 8012b7c:	da05      	bge.n	8012b8a <__ieee754_hypot+0x26>
 8012b7e:	462e      	mov	r6, r5
 8012b80:	4625      	mov	r5, r4
 8012b82:	4634      	mov	r4, r6
 8012b84:	4606      	mov	r6, r0
 8012b86:	4610      	mov	r0, r2
 8012b88:	4632      	mov	r2, r6
 8012b8a:	1b2b      	subs	r3, r5, r4
 8012b8c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8012b90:	4629      	mov	r1, r5
 8012b92:	4682      	mov	sl, r0
 8012b94:	46ab      	mov	fp, r5
 8012b96:	4616      	mov	r6, r2
 8012b98:	4627      	mov	r7, r4
 8012b9a:	dd05      	ble.n	8012ba8 <__ieee754_hypot+0x44>
 8012b9c:	4623      	mov	r3, r4
 8012b9e:	f7ed fb75 	bl	800028c <__adddf3>
 8012ba2:	4682      	mov	sl, r0
 8012ba4:	468b      	mov	fp, r1
 8012ba6:	e016      	b.n	8012bd6 <__ieee754_hypot+0x72>
 8012ba8:	4b75      	ldr	r3, [pc, #468]	@ (8012d80 <__ieee754_hypot+0x21c>)
 8012baa:	429d      	cmp	r5, r3
 8012bac:	f340 8096 	ble.w	8012cdc <__ieee754_hypot+0x178>
 8012bb0:	4b74      	ldr	r3, [pc, #464]	@ (8012d84 <__ieee754_hypot+0x220>)
 8012bb2:	429d      	cmp	r5, r3
 8012bb4:	dd14      	ble.n	8012be0 <__ieee754_hypot+0x7c>
 8012bb6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012bba:	4305      	orrs	r5, r0
 8012bbc:	d004      	beq.n	8012bc8 <__ieee754_hypot+0x64>
 8012bbe:	4623      	mov	r3, r4
 8012bc0:	f7ed fb64 	bl	800028c <__adddf3>
 8012bc4:	4682      	mov	sl, r0
 8012bc6:	468b      	mov	fp, r1
 8012bc8:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8012bcc:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8012bd0:	4334      	orrs	r4, r6
 8012bd2:	f000 80d2 	beq.w	8012d7a <__ieee754_hypot+0x216>
 8012bd6:	ec4b ab10 	vmov	d0, sl, fp
 8012bda:	b007      	add	sp, #28
 8012bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8012be4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8012be8:	46ab      	mov	fp, r5
 8012bea:	4627      	mov	r7, r4
 8012bec:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8012bf0:	9301      	str	r3, [sp, #4]
 8012bf2:	4b65      	ldr	r3, [pc, #404]	@ (8012d88 <__ieee754_hypot+0x224>)
 8012bf4:	429c      	cmp	r4, r3
 8012bf6:	dc19      	bgt.n	8012c2c <__ieee754_hypot+0xc8>
 8012bf8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8012bfc:	da70      	bge.n	8012ce0 <__ieee754_hypot+0x17c>
 8012bfe:	4633      	mov	r3, r6
 8012c00:	4323      	orrs	r3, r4
 8012c02:	d0e8      	beq.n	8012bd6 <__ieee754_hypot+0x72>
 8012c04:	4b61      	ldr	r3, [pc, #388]	@ (8012d8c <__ieee754_hypot+0x228>)
 8012c06:	2200      	movs	r2, #0
 8012c08:	4630      	mov	r0, r6
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	f7ed fcf4 	bl	80005f8 <__aeabi_dmul>
 8012c10:	4b5e      	ldr	r3, [pc, #376]	@ (8012d8c <__ieee754_hypot+0x228>)
 8012c12:	4606      	mov	r6, r0
 8012c14:	460f      	mov	r7, r1
 8012c16:	4650      	mov	r0, sl
 8012c18:	4659      	mov	r1, fp
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f7ed fcec 	bl	80005f8 <__aeabi_dmul>
 8012c20:	9b01      	ldr	r3, [sp, #4]
 8012c22:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8012c26:	4682      	mov	sl, r0
 8012c28:	468b      	mov	fp, r1
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	4632      	mov	r2, r6
 8012c2e:	463b      	mov	r3, r7
 8012c30:	4650      	mov	r0, sl
 8012c32:	4659      	mov	r1, fp
 8012c34:	f7ed fb28 	bl	8000288 <__aeabi_dsub>
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4680      	mov	r8, r0
 8012c3e:	4689      	mov	r9, r1
 8012c40:	4630      	mov	r0, r6
 8012c42:	4639      	mov	r1, r7
 8012c44:	f7ed ff4a 	bl	8000adc <__aeabi_dcmplt>
 8012c48:	2200      	movs	r2, #0
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d053      	beq.n	8012cf6 <__ieee754_hypot+0x192>
 8012c4e:	462b      	mov	r3, r5
 8012c50:	4610      	mov	r0, r2
 8012c52:	4629      	mov	r1, r5
 8012c54:	4614      	mov	r4, r2
 8012c56:	f7ed fccf 	bl	80005f8 <__aeabi_dmul>
 8012c5a:	4632      	mov	r2, r6
 8012c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c60:	463b      	mov	r3, r7
 8012c62:	4630      	mov	r0, r6
 8012c64:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8012c68:	f7ed fcc6 	bl	80005f8 <__aeabi_dmul>
 8012c6c:	4622      	mov	r2, r4
 8012c6e:	4606      	mov	r6, r0
 8012c70:	460f      	mov	r7, r1
 8012c72:	462b      	mov	r3, r5
 8012c74:	4650      	mov	r0, sl
 8012c76:	4659      	mov	r1, fp
 8012c78:	f7ed fb08 	bl	800028c <__adddf3>
 8012c7c:	4622      	mov	r2, r4
 8012c7e:	4680      	mov	r8, r0
 8012c80:	4689      	mov	r9, r1
 8012c82:	462b      	mov	r3, r5
 8012c84:	4650      	mov	r0, sl
 8012c86:	4659      	mov	r1, fp
 8012c88:	f7ed fafe 	bl	8000288 <__aeabi_dsub>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	460b      	mov	r3, r1
 8012c90:	4640      	mov	r0, r8
 8012c92:	4649      	mov	r1, r9
 8012c94:	f7ed fcb0 	bl	80005f8 <__aeabi_dmul>
 8012c98:	4602      	mov	r2, r0
 8012c9a:	460b      	mov	r3, r1
 8012c9c:	4630      	mov	r0, r6
 8012c9e:	4639      	mov	r1, r7
 8012ca0:	f7ed faf2 	bl	8000288 <__aeabi_dsub>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cac:	f7ed faec 	bl	8000288 <__aeabi_dsub>
 8012cb0:	ec41 0b10 	vmov	d0, r0, r1
 8012cb4:	f7ff fa2e 	bl	8012114 <__ieee754_sqrt>
 8012cb8:	9b01      	ldr	r3, [sp, #4]
 8012cba:	ec5b ab10 	vmov	sl, fp, d0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d089      	beq.n	8012bd6 <__ieee754_hypot+0x72>
 8012cc2:	051b      	lsls	r3, r3, #20
 8012cc4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012cc8:	2000      	movs	r0, #0
 8012cca:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012cce:	4602      	mov	r2, r0
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	4650      	mov	r0, sl
 8012cd4:	4659      	mov	r1, fp
 8012cd6:	f7ed fc8f 	bl	80005f8 <__aeabi_dmul>
 8012cda:	e762      	b.n	8012ba2 <__ieee754_hypot+0x3e>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	e787      	b.n	8012bf0 <__ieee754_hypot+0x8c>
 8012ce0:	9b01      	ldr	r3, [sp, #4]
 8012ce2:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8012ce6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8012cea:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8012cee:	9301      	str	r3, [sp, #4]
 8012cf0:	46ab      	mov	fp, r5
 8012cf2:	4627      	mov	r7, r4
 8012cf4:	e79a      	b.n	8012c2c <__ieee754_hypot+0xc8>
 8012cf6:	4623      	mov	r3, r4
 8012cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d00:	2200      	movs	r2, #0
 8012d02:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8012d06:	4614      	mov	r4, r2
 8012d08:	461d      	mov	r5, r3
 8012d0a:	f7ed fc75 	bl	80005f8 <__aeabi_dmul>
 8012d0e:	4642      	mov	r2, r8
 8012d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d14:	464b      	mov	r3, r9
 8012d16:	4640      	mov	r0, r8
 8012d18:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 8012d1c:	f7ed fc6c 	bl	80005f8 <__aeabi_dmul>
 8012d20:	4652      	mov	r2, sl
 8012d22:	465b      	mov	r3, fp
 8012d24:	4680      	mov	r8, r0
 8012d26:	4689      	mov	r9, r1
 8012d28:	4650      	mov	r0, sl
 8012d2a:	4659      	mov	r1, fp
 8012d2c:	f7ed faae 	bl	800028c <__adddf3>
 8012d30:	4622      	mov	r2, r4
 8012d32:	462b      	mov	r3, r5
 8012d34:	f7ed faa8 	bl	8000288 <__aeabi_dsub>
 8012d38:	4632      	mov	r2, r6
 8012d3a:	463b      	mov	r3, r7
 8012d3c:	f7ed fc5c 	bl	80005f8 <__aeabi_dmul>
 8012d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d44:	4682      	mov	sl, r0
 8012d46:	468b      	mov	fp, r1
 8012d48:	4630      	mov	r0, r6
 8012d4a:	4639      	mov	r1, r7
 8012d4c:	f7ed fa9c 	bl	8000288 <__aeabi_dsub>
 8012d50:	4622      	mov	r2, r4
 8012d52:	462b      	mov	r3, r5
 8012d54:	f7ed fc50 	bl	80005f8 <__aeabi_dmul>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	4650      	mov	r0, sl
 8012d5e:	4659      	mov	r1, fp
 8012d60:	f7ed fa94 	bl	800028c <__adddf3>
 8012d64:	4602      	mov	r2, r0
 8012d66:	460b      	mov	r3, r1
 8012d68:	4640      	mov	r0, r8
 8012d6a:	4649      	mov	r1, r9
 8012d6c:	f7ed fa8c 	bl	8000288 <__aeabi_dsub>
 8012d70:	4602      	mov	r2, r0
 8012d72:	460b      	mov	r3, r1
 8012d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d78:	e798      	b.n	8012cac <__ieee754_hypot+0x148>
 8012d7a:	46b2      	mov	sl, r6
 8012d7c:	46bb      	mov	fp, r7
 8012d7e:	e72a      	b.n	8012bd6 <__ieee754_hypot+0x72>
 8012d80:	5f300000 	.word	0x5f300000
 8012d84:	7fefffff 	.word	0x7fefffff
 8012d88:	20afffff 	.word	0x20afffff
 8012d8c:	7fd00000 	.word	0x7fd00000

08012d90 <__ieee754_rem_pio2>:
 8012d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d94:	ec57 6b10 	vmov	r6, r7, d0
 8012d98:	4bc5      	ldr	r3, [pc, #788]	@ (80130b0 <__ieee754_rem_pio2+0x320>)
 8012d9a:	b08d      	sub	sp, #52	@ 0x34
 8012d9c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012da0:	4598      	cmp	r8, r3
 8012da2:	4604      	mov	r4, r0
 8012da4:	9704      	str	r7, [sp, #16]
 8012da6:	d807      	bhi.n	8012db8 <__ieee754_rem_pio2+0x28>
 8012da8:	2200      	movs	r2, #0
 8012daa:	2300      	movs	r3, #0
 8012dac:	ed80 0b00 	vstr	d0, [r0]
 8012db0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012db4:	2500      	movs	r5, #0
 8012db6:	e028      	b.n	8012e0a <__ieee754_rem_pio2+0x7a>
 8012db8:	4bbe      	ldr	r3, [pc, #760]	@ (80130b4 <__ieee754_rem_pio2+0x324>)
 8012dba:	4598      	cmp	r8, r3
 8012dbc:	d878      	bhi.n	8012eb0 <__ieee754_rem_pio2+0x120>
 8012dbe:	9b04      	ldr	r3, [sp, #16]
 8012dc0:	4dbd      	ldr	r5, [pc, #756]	@ (80130b8 <__ieee754_rem_pio2+0x328>)
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	4630      	mov	r0, r6
 8012dc6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2e8>)
 8012dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dcc:	4639      	mov	r1, r7
 8012dce:	dd38      	ble.n	8012e42 <__ieee754_rem_pio2+0xb2>
 8012dd0:	f7ed fa5a 	bl	8000288 <__aeabi_dsub>
 8012dd4:	45a8      	cmp	r8, r5
 8012dd6:	4606      	mov	r6, r0
 8012dd8:	460f      	mov	r7, r1
 8012dda:	d01a      	beq.n	8012e12 <__ieee754_rem_pio2+0x82>
 8012ddc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f0>)
 8012dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de2:	f7ed fa51 	bl	8000288 <__aeabi_dsub>
 8012de6:	4602      	mov	r2, r0
 8012de8:	460b      	mov	r3, r1
 8012dea:	4680      	mov	r8, r0
 8012dec:	4689      	mov	r9, r1
 8012dee:	4630      	mov	r0, r6
 8012df0:	4639      	mov	r1, r7
 8012df2:	f7ed fa49 	bl	8000288 <__aeabi_dsub>
 8012df6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f0>)
 8012df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfc:	f7ed fa44 	bl	8000288 <__aeabi_dsub>
 8012e00:	e9c4 8900 	strd	r8, r9, [r4]
 8012e04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e08:	2501      	movs	r5, #1
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	b00d      	add	sp, #52	@ 0x34
 8012e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e12:	a39d      	add	r3, pc, #628	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x2f8>)
 8012e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e18:	f7ed fa36 	bl	8000288 <__aeabi_dsub>
 8012e1c:	a39c      	add	r3, pc, #624	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x300>)
 8012e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e22:	4606      	mov	r6, r0
 8012e24:	460f      	mov	r7, r1
 8012e26:	f7ed fa2f 	bl	8000288 <__aeabi_dsub>
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	4680      	mov	r8, r0
 8012e30:	4689      	mov	r9, r1
 8012e32:	4630      	mov	r0, r6
 8012e34:	4639      	mov	r1, r7
 8012e36:	f7ed fa27 	bl	8000288 <__aeabi_dsub>
 8012e3a:	a395      	add	r3, pc, #596	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x300>)
 8012e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e40:	e7dc      	b.n	8012dfc <__ieee754_rem_pio2+0x6c>
 8012e42:	f7ed fa23 	bl	800028c <__adddf3>
 8012e46:	45a8      	cmp	r8, r5
 8012e48:	4606      	mov	r6, r0
 8012e4a:	460f      	mov	r7, r1
 8012e4c:	d018      	beq.n	8012e80 <__ieee754_rem_pio2+0xf0>
 8012e4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f0>)
 8012e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e54:	f7ed fa1a 	bl	800028c <__adddf3>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	460b      	mov	r3, r1
 8012e5c:	4680      	mov	r8, r0
 8012e5e:	4689      	mov	r9, r1
 8012e60:	4630      	mov	r0, r6
 8012e62:	4639      	mov	r1, r7
 8012e64:	f7ed fa10 	bl	8000288 <__aeabi_dsub>
 8012e68:	a385      	add	r3, pc, #532	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f0>)
 8012e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6e:	f7ed fa0d 	bl	800028c <__adddf3>
 8012e72:	f04f 35ff 	mov.w	r5, #4294967295
 8012e76:	e9c4 8900 	strd	r8, r9, [r4]
 8012e7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e7e:	e7c4      	b.n	8012e0a <__ieee754_rem_pio2+0x7a>
 8012e80:	a381      	add	r3, pc, #516	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x2f8>)
 8012e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e86:	f7ed fa01 	bl	800028c <__adddf3>
 8012e8a:	a381      	add	r3, pc, #516	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x300>)
 8012e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e90:	4606      	mov	r6, r0
 8012e92:	460f      	mov	r7, r1
 8012e94:	f7ed f9fa 	bl	800028c <__adddf3>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	4680      	mov	r8, r0
 8012e9e:	4689      	mov	r9, r1
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	4639      	mov	r1, r7
 8012ea4:	f7ed f9f0 	bl	8000288 <__aeabi_dsub>
 8012ea8:	a379      	add	r3, pc, #484	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x300>)
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	e7de      	b.n	8012e6e <__ieee754_rem_pio2+0xde>
 8012eb0:	4b82      	ldr	r3, [pc, #520]	@ (80130bc <__ieee754_rem_pio2+0x32c>)
 8012eb2:	4598      	cmp	r8, r3
 8012eb4:	f200 80d1 	bhi.w	801305a <__ieee754_rem_pio2+0x2ca>
 8012eb8:	f000 fafe 	bl	80134b8 <fabs>
 8012ebc:	ec57 6b10 	vmov	r6, r7, d0
 8012ec0:	a375      	add	r3, pc, #468	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x308>)
 8012ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	4639      	mov	r1, r7
 8012eca:	f7ed fb95 	bl	80005f8 <__aeabi_dmul>
 8012ece:	4b7c      	ldr	r3, [pc, #496]	@ (80130c0 <__ieee754_rem_pio2+0x330>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	f7ed f9db 	bl	800028c <__adddf3>
 8012ed6:	f7ed fe3f 	bl	8000b58 <__aeabi_d2iz>
 8012eda:	4605      	mov	r5, r0
 8012edc:	f7ed fb22 	bl	8000524 <__aeabi_i2d>
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012ee8:	a363      	add	r3, pc, #396	@ (adr r3, 8013078 <__ieee754_rem_pio2+0x2e8>)
 8012eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eee:	f7ed fb83 	bl	80005f8 <__aeabi_dmul>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	4639      	mov	r1, r7
 8012efa:	f7ed f9c5 	bl	8000288 <__aeabi_dsub>
 8012efe:	a360      	add	r3, pc, #384	@ (adr r3, 8013080 <__ieee754_rem_pio2+0x2f0>)
 8012f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f04:	4682      	mov	sl, r0
 8012f06:	468b      	mov	fp, r1
 8012f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f0c:	f7ed fb74 	bl	80005f8 <__aeabi_dmul>
 8012f10:	2d1f      	cmp	r5, #31
 8012f12:	4606      	mov	r6, r0
 8012f14:	460f      	mov	r7, r1
 8012f16:	dc0c      	bgt.n	8012f32 <__ieee754_rem_pio2+0x1a2>
 8012f18:	4b6a      	ldr	r3, [pc, #424]	@ (80130c4 <__ieee754_rem_pio2+0x334>)
 8012f1a:	1e6a      	subs	r2, r5, #1
 8012f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f20:	4543      	cmp	r3, r8
 8012f22:	d006      	beq.n	8012f32 <__ieee754_rem_pio2+0x1a2>
 8012f24:	4632      	mov	r2, r6
 8012f26:	463b      	mov	r3, r7
 8012f28:	4650      	mov	r0, sl
 8012f2a:	4659      	mov	r1, fp
 8012f2c:	f7ed f9ac 	bl	8000288 <__aeabi_dsub>
 8012f30:	e00e      	b.n	8012f50 <__ieee754_rem_pio2+0x1c0>
 8012f32:	463b      	mov	r3, r7
 8012f34:	4632      	mov	r2, r6
 8012f36:	4650      	mov	r0, sl
 8012f38:	4659      	mov	r1, fp
 8012f3a:	f7ed f9a5 	bl	8000288 <__aeabi_dsub>
 8012f3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012f42:	9305      	str	r3, [sp, #20]
 8012f44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f48:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012f4c:	2b10      	cmp	r3, #16
 8012f4e:	dc02      	bgt.n	8012f56 <__ieee754_rem_pio2+0x1c6>
 8012f50:	e9c4 0100 	strd	r0, r1, [r4]
 8012f54:	e039      	b.n	8012fca <__ieee754_rem_pio2+0x23a>
 8012f56:	a34c      	add	r3, pc, #304	@ (adr r3, 8013088 <__ieee754_rem_pio2+0x2f8>)
 8012f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f60:	f7ed fb4a 	bl	80005f8 <__aeabi_dmul>
 8012f64:	4606      	mov	r6, r0
 8012f66:	460f      	mov	r7, r1
 8012f68:	4602      	mov	r2, r0
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	4650      	mov	r0, sl
 8012f6e:	4659      	mov	r1, fp
 8012f70:	f7ed f98a 	bl	8000288 <__aeabi_dsub>
 8012f74:	4602      	mov	r2, r0
 8012f76:	460b      	mov	r3, r1
 8012f78:	4680      	mov	r8, r0
 8012f7a:	4689      	mov	r9, r1
 8012f7c:	4650      	mov	r0, sl
 8012f7e:	4659      	mov	r1, fp
 8012f80:	f7ed f982 	bl	8000288 <__aeabi_dsub>
 8012f84:	4632      	mov	r2, r6
 8012f86:	463b      	mov	r3, r7
 8012f88:	f7ed f97e 	bl	8000288 <__aeabi_dsub>
 8012f8c:	a340      	add	r3, pc, #256	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x300>)
 8012f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f92:	4606      	mov	r6, r0
 8012f94:	460f      	mov	r7, r1
 8012f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f9a:	f7ed fb2d 	bl	80005f8 <__aeabi_dmul>
 8012f9e:	4632      	mov	r2, r6
 8012fa0:	463b      	mov	r3, r7
 8012fa2:	f7ed f971 	bl	8000288 <__aeabi_dsub>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	460b      	mov	r3, r1
 8012faa:	4606      	mov	r6, r0
 8012fac:	460f      	mov	r7, r1
 8012fae:	4640      	mov	r0, r8
 8012fb0:	4649      	mov	r1, r9
 8012fb2:	f7ed f969 	bl	8000288 <__aeabi_dsub>
 8012fb6:	9a05      	ldr	r2, [sp, #20]
 8012fb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012fbc:	1ad3      	subs	r3, r2, r3
 8012fbe:	2b31      	cmp	r3, #49	@ 0x31
 8012fc0:	dc20      	bgt.n	8013004 <__ieee754_rem_pio2+0x274>
 8012fc2:	e9c4 0100 	strd	r0, r1, [r4]
 8012fc6:	46c2      	mov	sl, r8
 8012fc8:	46cb      	mov	fp, r9
 8012fca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012fce:	4650      	mov	r0, sl
 8012fd0:	4642      	mov	r2, r8
 8012fd2:	464b      	mov	r3, r9
 8012fd4:	4659      	mov	r1, fp
 8012fd6:	f7ed f957 	bl	8000288 <__aeabi_dsub>
 8012fda:	463b      	mov	r3, r7
 8012fdc:	4632      	mov	r2, r6
 8012fde:	f7ed f953 	bl	8000288 <__aeabi_dsub>
 8012fe2:	9b04      	ldr	r3, [sp, #16]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012fea:	f6bf af0e 	bge.w	8012e0a <__ieee754_rem_pio2+0x7a>
 8012fee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012ff2:	6063      	str	r3, [r4, #4]
 8012ff4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012ff8:	f8c4 8000 	str.w	r8, [r4]
 8012ffc:	60a0      	str	r0, [r4, #8]
 8012ffe:	60e3      	str	r3, [r4, #12]
 8013000:	426d      	negs	r5, r5
 8013002:	e702      	b.n	8012e0a <__ieee754_rem_pio2+0x7a>
 8013004:	a326      	add	r3, pc, #152	@ (adr r3, 80130a0 <__ieee754_rem_pio2+0x310>)
 8013006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801300e:	f7ed faf3 	bl	80005f8 <__aeabi_dmul>
 8013012:	4606      	mov	r6, r0
 8013014:	460f      	mov	r7, r1
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	4640      	mov	r0, r8
 801301c:	4649      	mov	r1, r9
 801301e:	f7ed f933 	bl	8000288 <__aeabi_dsub>
 8013022:	4602      	mov	r2, r0
 8013024:	460b      	mov	r3, r1
 8013026:	4682      	mov	sl, r0
 8013028:	468b      	mov	fp, r1
 801302a:	4640      	mov	r0, r8
 801302c:	4649      	mov	r1, r9
 801302e:	f7ed f92b 	bl	8000288 <__aeabi_dsub>
 8013032:	4632      	mov	r2, r6
 8013034:	463b      	mov	r3, r7
 8013036:	f7ed f927 	bl	8000288 <__aeabi_dsub>
 801303a:	a31b      	add	r3, pc, #108	@ (adr r3, 80130a8 <__ieee754_rem_pio2+0x318>)
 801303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013040:	4606      	mov	r6, r0
 8013042:	460f      	mov	r7, r1
 8013044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013048:	f7ed fad6 	bl	80005f8 <__aeabi_dmul>
 801304c:	4632      	mov	r2, r6
 801304e:	463b      	mov	r3, r7
 8013050:	f7ed f91a 	bl	8000288 <__aeabi_dsub>
 8013054:	4606      	mov	r6, r0
 8013056:	460f      	mov	r7, r1
 8013058:	e764      	b.n	8012f24 <__ieee754_rem_pio2+0x194>
 801305a:	4b1b      	ldr	r3, [pc, #108]	@ (80130c8 <__ieee754_rem_pio2+0x338>)
 801305c:	4598      	cmp	r8, r3
 801305e:	d935      	bls.n	80130cc <__ieee754_rem_pio2+0x33c>
 8013060:	4632      	mov	r2, r6
 8013062:	463b      	mov	r3, r7
 8013064:	4630      	mov	r0, r6
 8013066:	4639      	mov	r1, r7
 8013068:	f7ed f90e 	bl	8000288 <__aeabi_dsub>
 801306c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013070:	e9c4 0100 	strd	r0, r1, [r4]
 8013074:	e69e      	b.n	8012db4 <__ieee754_rem_pio2+0x24>
 8013076:	bf00      	nop
 8013078:	54400000 	.word	0x54400000
 801307c:	3ff921fb 	.word	0x3ff921fb
 8013080:	1a626331 	.word	0x1a626331
 8013084:	3dd0b461 	.word	0x3dd0b461
 8013088:	1a600000 	.word	0x1a600000
 801308c:	3dd0b461 	.word	0x3dd0b461
 8013090:	2e037073 	.word	0x2e037073
 8013094:	3ba3198a 	.word	0x3ba3198a
 8013098:	6dc9c883 	.word	0x6dc9c883
 801309c:	3fe45f30 	.word	0x3fe45f30
 80130a0:	2e000000 	.word	0x2e000000
 80130a4:	3ba3198a 	.word	0x3ba3198a
 80130a8:	252049c1 	.word	0x252049c1
 80130ac:	397b839a 	.word	0x397b839a
 80130b0:	3fe921fb 	.word	0x3fe921fb
 80130b4:	4002d97b 	.word	0x4002d97b
 80130b8:	3ff921fb 	.word	0x3ff921fb
 80130bc:	413921fb 	.word	0x413921fb
 80130c0:	3fe00000 	.word	0x3fe00000
 80130c4:	08014408 	.word	0x08014408
 80130c8:	7fefffff 	.word	0x7fefffff
 80130cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80130d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80130d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80130d8:	4630      	mov	r0, r6
 80130da:	460f      	mov	r7, r1
 80130dc:	f7ed fd3c 	bl	8000b58 <__aeabi_d2iz>
 80130e0:	f7ed fa20 	bl	8000524 <__aeabi_i2d>
 80130e4:	4602      	mov	r2, r0
 80130e6:	460b      	mov	r3, r1
 80130e8:	4630      	mov	r0, r6
 80130ea:	4639      	mov	r1, r7
 80130ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130f0:	f7ed f8ca 	bl	8000288 <__aeabi_dsub>
 80130f4:	4b22      	ldr	r3, [pc, #136]	@ (8013180 <__ieee754_rem_pio2+0x3f0>)
 80130f6:	2200      	movs	r2, #0
 80130f8:	f7ed fa7e 	bl	80005f8 <__aeabi_dmul>
 80130fc:	460f      	mov	r7, r1
 80130fe:	4606      	mov	r6, r0
 8013100:	f7ed fd2a 	bl	8000b58 <__aeabi_d2iz>
 8013104:	f7ed fa0e 	bl	8000524 <__aeabi_i2d>
 8013108:	4602      	mov	r2, r0
 801310a:	460b      	mov	r3, r1
 801310c:	4630      	mov	r0, r6
 801310e:	4639      	mov	r1, r7
 8013110:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013114:	f7ed f8b8 	bl	8000288 <__aeabi_dsub>
 8013118:	4b19      	ldr	r3, [pc, #100]	@ (8013180 <__ieee754_rem_pio2+0x3f0>)
 801311a:	2200      	movs	r2, #0
 801311c:	f7ed fa6c 	bl	80005f8 <__aeabi_dmul>
 8013120:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013124:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013128:	f04f 0803 	mov.w	r8, #3
 801312c:	2600      	movs	r6, #0
 801312e:	2700      	movs	r7, #0
 8013130:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013134:	4632      	mov	r2, r6
 8013136:	463b      	mov	r3, r7
 8013138:	46c2      	mov	sl, r8
 801313a:	f108 38ff 	add.w	r8, r8, #4294967295
 801313e:	f7ed fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8013142:	2800      	cmp	r0, #0
 8013144:	d1f4      	bne.n	8013130 <__ieee754_rem_pio2+0x3a0>
 8013146:	4b0f      	ldr	r3, [pc, #60]	@ (8013184 <__ieee754_rem_pio2+0x3f4>)
 8013148:	9301      	str	r3, [sp, #4]
 801314a:	2302      	movs	r3, #2
 801314c:	9300      	str	r3, [sp, #0]
 801314e:	462a      	mov	r2, r5
 8013150:	4653      	mov	r3, sl
 8013152:	4621      	mov	r1, r4
 8013154:	a806      	add	r0, sp, #24
 8013156:	f000 f9b7 	bl	80134c8 <__kernel_rem_pio2>
 801315a:	9b04      	ldr	r3, [sp, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	4605      	mov	r5, r0
 8013160:	f6bf ae53 	bge.w	8012e0a <__ieee754_rem_pio2+0x7a>
 8013164:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013168:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801316c:	e9c4 2300 	strd	r2, r3, [r4]
 8013170:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013174:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013178:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801317c:	e740      	b.n	8013000 <__ieee754_rem_pio2+0x270>
 801317e:	bf00      	nop
 8013180:	41700000 	.word	0x41700000
 8013184:	08014488 	.word	0x08014488

08013188 <atan>:
 8013188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	ec55 4b10 	vmov	r4, r5, d0
 8013190:	4bbf      	ldr	r3, [pc, #764]	@ (8013490 <atan+0x308>)
 8013192:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013196:	429e      	cmp	r6, r3
 8013198:	46ab      	mov	fp, r5
 801319a:	d918      	bls.n	80131ce <atan+0x46>
 801319c:	4bbd      	ldr	r3, [pc, #756]	@ (8013494 <atan+0x30c>)
 801319e:	429e      	cmp	r6, r3
 80131a0:	d801      	bhi.n	80131a6 <atan+0x1e>
 80131a2:	d109      	bne.n	80131b8 <atan+0x30>
 80131a4:	b144      	cbz	r4, 80131b8 <atan+0x30>
 80131a6:	4622      	mov	r2, r4
 80131a8:	462b      	mov	r3, r5
 80131aa:	4620      	mov	r0, r4
 80131ac:	4629      	mov	r1, r5
 80131ae:	f7ed f86d 	bl	800028c <__adddf3>
 80131b2:	4604      	mov	r4, r0
 80131b4:	460d      	mov	r5, r1
 80131b6:	e006      	b.n	80131c6 <atan+0x3e>
 80131b8:	f1bb 0f00 	cmp.w	fp, #0
 80131bc:	f340 812b 	ble.w	8013416 <atan+0x28e>
 80131c0:	a597      	add	r5, pc, #604	@ (adr r5, 8013420 <atan+0x298>)
 80131c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80131c6:	ec45 4b10 	vmov	d0, r4, r5
 80131ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ce:	4bb2      	ldr	r3, [pc, #712]	@ (8013498 <atan+0x310>)
 80131d0:	429e      	cmp	r6, r3
 80131d2:	d813      	bhi.n	80131fc <atan+0x74>
 80131d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80131d8:	429e      	cmp	r6, r3
 80131da:	d80c      	bhi.n	80131f6 <atan+0x6e>
 80131dc:	a392      	add	r3, pc, #584	@ (adr r3, 8013428 <atan+0x2a0>)
 80131de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e2:	4620      	mov	r0, r4
 80131e4:	4629      	mov	r1, r5
 80131e6:	f7ed f851 	bl	800028c <__adddf3>
 80131ea:	4bac      	ldr	r3, [pc, #688]	@ (801349c <atan+0x314>)
 80131ec:	2200      	movs	r2, #0
 80131ee:	f7ed fc93 	bl	8000b18 <__aeabi_dcmpgt>
 80131f2:	2800      	cmp	r0, #0
 80131f4:	d1e7      	bne.n	80131c6 <atan+0x3e>
 80131f6:	f04f 3aff 	mov.w	sl, #4294967295
 80131fa:	e029      	b.n	8013250 <atan+0xc8>
 80131fc:	f000 f95c 	bl	80134b8 <fabs>
 8013200:	4ba7      	ldr	r3, [pc, #668]	@ (80134a0 <atan+0x318>)
 8013202:	429e      	cmp	r6, r3
 8013204:	ec55 4b10 	vmov	r4, r5, d0
 8013208:	f200 80bc 	bhi.w	8013384 <atan+0x1fc>
 801320c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013210:	429e      	cmp	r6, r3
 8013212:	f200 809e 	bhi.w	8013352 <atan+0x1ca>
 8013216:	4622      	mov	r2, r4
 8013218:	462b      	mov	r3, r5
 801321a:	4620      	mov	r0, r4
 801321c:	4629      	mov	r1, r5
 801321e:	f7ed f835 	bl	800028c <__adddf3>
 8013222:	4b9e      	ldr	r3, [pc, #632]	@ (801349c <atan+0x314>)
 8013224:	2200      	movs	r2, #0
 8013226:	f7ed f82f 	bl	8000288 <__aeabi_dsub>
 801322a:	2200      	movs	r2, #0
 801322c:	4606      	mov	r6, r0
 801322e:	460f      	mov	r7, r1
 8013230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013234:	4620      	mov	r0, r4
 8013236:	4629      	mov	r1, r5
 8013238:	f7ed f828 	bl	800028c <__adddf3>
 801323c:	4602      	mov	r2, r0
 801323e:	460b      	mov	r3, r1
 8013240:	4630      	mov	r0, r6
 8013242:	4639      	mov	r1, r7
 8013244:	f7ed fb02 	bl	800084c <__aeabi_ddiv>
 8013248:	f04f 0a00 	mov.w	sl, #0
 801324c:	4604      	mov	r4, r0
 801324e:	460d      	mov	r5, r1
 8013250:	4622      	mov	r2, r4
 8013252:	462b      	mov	r3, r5
 8013254:	4620      	mov	r0, r4
 8013256:	4629      	mov	r1, r5
 8013258:	f7ed f9ce 	bl	80005f8 <__aeabi_dmul>
 801325c:	4602      	mov	r2, r0
 801325e:	460b      	mov	r3, r1
 8013260:	4680      	mov	r8, r0
 8013262:	4689      	mov	r9, r1
 8013264:	f7ed f9c8 	bl	80005f8 <__aeabi_dmul>
 8013268:	a371      	add	r3, pc, #452	@ (adr r3, 8013430 <atan+0x2a8>)
 801326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326e:	4606      	mov	r6, r0
 8013270:	460f      	mov	r7, r1
 8013272:	f7ed f9c1 	bl	80005f8 <__aeabi_dmul>
 8013276:	a370      	add	r3, pc, #448	@ (adr r3, 8013438 <atan+0x2b0>)
 8013278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327c:	f7ed f806 	bl	800028c <__adddf3>
 8013280:	4632      	mov	r2, r6
 8013282:	463b      	mov	r3, r7
 8013284:	f7ed f9b8 	bl	80005f8 <__aeabi_dmul>
 8013288:	a36d      	add	r3, pc, #436	@ (adr r3, 8013440 <atan+0x2b8>)
 801328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328e:	f7ec fffd 	bl	800028c <__adddf3>
 8013292:	4632      	mov	r2, r6
 8013294:	463b      	mov	r3, r7
 8013296:	f7ed f9af 	bl	80005f8 <__aeabi_dmul>
 801329a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013448 <atan+0x2c0>)
 801329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a0:	f7ec fff4 	bl	800028c <__adddf3>
 80132a4:	4632      	mov	r2, r6
 80132a6:	463b      	mov	r3, r7
 80132a8:	f7ed f9a6 	bl	80005f8 <__aeabi_dmul>
 80132ac:	a368      	add	r3, pc, #416	@ (adr r3, 8013450 <atan+0x2c8>)
 80132ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b2:	f7ec ffeb 	bl	800028c <__adddf3>
 80132b6:	4632      	mov	r2, r6
 80132b8:	463b      	mov	r3, r7
 80132ba:	f7ed f99d 	bl	80005f8 <__aeabi_dmul>
 80132be:	a366      	add	r3, pc, #408	@ (adr r3, 8013458 <atan+0x2d0>)
 80132c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c4:	f7ec ffe2 	bl	800028c <__adddf3>
 80132c8:	4642      	mov	r2, r8
 80132ca:	464b      	mov	r3, r9
 80132cc:	f7ed f994 	bl	80005f8 <__aeabi_dmul>
 80132d0:	a363      	add	r3, pc, #396	@ (adr r3, 8013460 <atan+0x2d8>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	4680      	mov	r8, r0
 80132d8:	4689      	mov	r9, r1
 80132da:	4630      	mov	r0, r6
 80132dc:	4639      	mov	r1, r7
 80132de:	f7ed f98b 	bl	80005f8 <__aeabi_dmul>
 80132e2:	a361      	add	r3, pc, #388	@ (adr r3, 8013468 <atan+0x2e0>)
 80132e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e8:	f7ec ffce 	bl	8000288 <__aeabi_dsub>
 80132ec:	4632      	mov	r2, r6
 80132ee:	463b      	mov	r3, r7
 80132f0:	f7ed f982 	bl	80005f8 <__aeabi_dmul>
 80132f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013470 <atan+0x2e8>)
 80132f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fa:	f7ec ffc5 	bl	8000288 <__aeabi_dsub>
 80132fe:	4632      	mov	r2, r6
 8013300:	463b      	mov	r3, r7
 8013302:	f7ed f979 	bl	80005f8 <__aeabi_dmul>
 8013306:	a35c      	add	r3, pc, #368	@ (adr r3, 8013478 <atan+0x2f0>)
 8013308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330c:	f7ec ffbc 	bl	8000288 <__aeabi_dsub>
 8013310:	4632      	mov	r2, r6
 8013312:	463b      	mov	r3, r7
 8013314:	f7ed f970 	bl	80005f8 <__aeabi_dmul>
 8013318:	a359      	add	r3, pc, #356	@ (adr r3, 8013480 <atan+0x2f8>)
 801331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331e:	f7ec ffb3 	bl	8000288 <__aeabi_dsub>
 8013322:	4632      	mov	r2, r6
 8013324:	463b      	mov	r3, r7
 8013326:	f7ed f967 	bl	80005f8 <__aeabi_dmul>
 801332a:	4602      	mov	r2, r0
 801332c:	460b      	mov	r3, r1
 801332e:	4640      	mov	r0, r8
 8013330:	4649      	mov	r1, r9
 8013332:	f7ec ffab 	bl	800028c <__adddf3>
 8013336:	4622      	mov	r2, r4
 8013338:	462b      	mov	r3, r5
 801333a:	f7ed f95d 	bl	80005f8 <__aeabi_dmul>
 801333e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013342:	4602      	mov	r2, r0
 8013344:	460b      	mov	r3, r1
 8013346:	d148      	bne.n	80133da <atan+0x252>
 8013348:	4620      	mov	r0, r4
 801334a:	4629      	mov	r1, r5
 801334c:	f7ec ff9c 	bl	8000288 <__aeabi_dsub>
 8013350:	e72f      	b.n	80131b2 <atan+0x2a>
 8013352:	4b52      	ldr	r3, [pc, #328]	@ (801349c <atan+0x314>)
 8013354:	2200      	movs	r2, #0
 8013356:	4620      	mov	r0, r4
 8013358:	4629      	mov	r1, r5
 801335a:	f7ec ff95 	bl	8000288 <__aeabi_dsub>
 801335e:	4b4f      	ldr	r3, [pc, #316]	@ (801349c <atan+0x314>)
 8013360:	4606      	mov	r6, r0
 8013362:	460f      	mov	r7, r1
 8013364:	2200      	movs	r2, #0
 8013366:	4620      	mov	r0, r4
 8013368:	4629      	mov	r1, r5
 801336a:	f7ec ff8f 	bl	800028c <__adddf3>
 801336e:	4602      	mov	r2, r0
 8013370:	460b      	mov	r3, r1
 8013372:	4630      	mov	r0, r6
 8013374:	4639      	mov	r1, r7
 8013376:	f7ed fa69 	bl	800084c <__aeabi_ddiv>
 801337a:	f04f 0a01 	mov.w	sl, #1
 801337e:	4604      	mov	r4, r0
 8013380:	460d      	mov	r5, r1
 8013382:	e765      	b.n	8013250 <atan+0xc8>
 8013384:	4b47      	ldr	r3, [pc, #284]	@ (80134a4 <atan+0x31c>)
 8013386:	429e      	cmp	r6, r3
 8013388:	d21c      	bcs.n	80133c4 <atan+0x23c>
 801338a:	4b47      	ldr	r3, [pc, #284]	@ (80134a8 <atan+0x320>)
 801338c:	2200      	movs	r2, #0
 801338e:	4620      	mov	r0, r4
 8013390:	4629      	mov	r1, r5
 8013392:	f7ec ff79 	bl	8000288 <__aeabi_dsub>
 8013396:	4b44      	ldr	r3, [pc, #272]	@ (80134a8 <atan+0x320>)
 8013398:	4606      	mov	r6, r0
 801339a:	460f      	mov	r7, r1
 801339c:	2200      	movs	r2, #0
 801339e:	4620      	mov	r0, r4
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7ed f929 	bl	80005f8 <__aeabi_dmul>
 80133a6:	4b3d      	ldr	r3, [pc, #244]	@ (801349c <atan+0x314>)
 80133a8:	2200      	movs	r2, #0
 80133aa:	f7ec ff6f 	bl	800028c <__adddf3>
 80133ae:	4602      	mov	r2, r0
 80133b0:	460b      	mov	r3, r1
 80133b2:	4630      	mov	r0, r6
 80133b4:	4639      	mov	r1, r7
 80133b6:	f7ed fa49 	bl	800084c <__aeabi_ddiv>
 80133ba:	f04f 0a02 	mov.w	sl, #2
 80133be:	4604      	mov	r4, r0
 80133c0:	460d      	mov	r5, r1
 80133c2:	e745      	b.n	8013250 <atan+0xc8>
 80133c4:	4622      	mov	r2, r4
 80133c6:	462b      	mov	r3, r5
 80133c8:	4938      	ldr	r1, [pc, #224]	@ (80134ac <atan+0x324>)
 80133ca:	2000      	movs	r0, #0
 80133cc:	f7ed fa3e 	bl	800084c <__aeabi_ddiv>
 80133d0:	f04f 0a03 	mov.w	sl, #3
 80133d4:	4604      	mov	r4, r0
 80133d6:	460d      	mov	r5, r1
 80133d8:	e73a      	b.n	8013250 <atan+0xc8>
 80133da:	4b35      	ldr	r3, [pc, #212]	@ (80134b0 <atan+0x328>)
 80133dc:	4e35      	ldr	r6, [pc, #212]	@ (80134b4 <atan+0x32c>)
 80133de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80133e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e6:	f7ec ff4f 	bl	8000288 <__aeabi_dsub>
 80133ea:	4622      	mov	r2, r4
 80133ec:	462b      	mov	r3, r5
 80133ee:	f7ec ff4b 	bl	8000288 <__aeabi_dsub>
 80133f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80133f6:	4602      	mov	r2, r0
 80133f8:	460b      	mov	r3, r1
 80133fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80133fe:	f7ec ff43 	bl	8000288 <__aeabi_dsub>
 8013402:	f1bb 0f00 	cmp.w	fp, #0
 8013406:	4604      	mov	r4, r0
 8013408:	460d      	mov	r5, r1
 801340a:	f6bf aedc 	bge.w	80131c6 <atan+0x3e>
 801340e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013412:	461d      	mov	r5, r3
 8013414:	e6d7      	b.n	80131c6 <atan+0x3e>
 8013416:	a51c      	add	r5, pc, #112	@ (adr r5, 8013488 <atan+0x300>)
 8013418:	e9d5 4500 	ldrd	r4, r5, [r5]
 801341c:	e6d3      	b.n	80131c6 <atan+0x3e>
 801341e:	bf00      	nop
 8013420:	54442d18 	.word	0x54442d18
 8013424:	3ff921fb 	.word	0x3ff921fb
 8013428:	8800759c 	.word	0x8800759c
 801342c:	7e37e43c 	.word	0x7e37e43c
 8013430:	e322da11 	.word	0xe322da11
 8013434:	3f90ad3a 	.word	0x3f90ad3a
 8013438:	24760deb 	.word	0x24760deb
 801343c:	3fa97b4b 	.word	0x3fa97b4b
 8013440:	a0d03d51 	.word	0xa0d03d51
 8013444:	3fb10d66 	.word	0x3fb10d66
 8013448:	c54c206e 	.word	0xc54c206e
 801344c:	3fb745cd 	.word	0x3fb745cd
 8013450:	920083ff 	.word	0x920083ff
 8013454:	3fc24924 	.word	0x3fc24924
 8013458:	5555550d 	.word	0x5555550d
 801345c:	3fd55555 	.word	0x3fd55555
 8013460:	2c6a6c2f 	.word	0x2c6a6c2f
 8013464:	bfa2b444 	.word	0xbfa2b444
 8013468:	52defd9a 	.word	0x52defd9a
 801346c:	3fadde2d 	.word	0x3fadde2d
 8013470:	af749a6d 	.word	0xaf749a6d
 8013474:	3fb3b0f2 	.word	0x3fb3b0f2
 8013478:	fe231671 	.word	0xfe231671
 801347c:	3fbc71c6 	.word	0x3fbc71c6
 8013480:	9998ebc4 	.word	0x9998ebc4
 8013484:	3fc99999 	.word	0x3fc99999
 8013488:	54442d18 	.word	0x54442d18
 801348c:	bff921fb 	.word	0xbff921fb
 8013490:	440fffff 	.word	0x440fffff
 8013494:	7ff00000 	.word	0x7ff00000
 8013498:	3fdbffff 	.word	0x3fdbffff
 801349c:	3ff00000 	.word	0x3ff00000
 80134a0:	3ff2ffff 	.word	0x3ff2ffff
 80134a4:	40038000 	.word	0x40038000
 80134a8:	3ff80000 	.word	0x3ff80000
 80134ac:	bff00000 	.word	0xbff00000
 80134b0:	08014590 	.word	0x08014590
 80134b4:	080145b0 	.word	0x080145b0

080134b8 <fabs>:
 80134b8:	ec51 0b10 	vmov	r0, r1, d0
 80134bc:	4602      	mov	r2, r0
 80134be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134c2:	ec43 2b10 	vmov	d0, r2, r3
 80134c6:	4770      	bx	lr

080134c8 <__kernel_rem_pio2>:
 80134c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134cc:	ed2d 8b02 	vpush	{d8}
 80134d0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80134d4:	f112 0f14 	cmn.w	r2, #20
 80134d8:	9306      	str	r3, [sp, #24]
 80134da:	9104      	str	r1, [sp, #16]
 80134dc:	4bbe      	ldr	r3, [pc, #760]	@ (80137d8 <__kernel_rem_pio2+0x310>)
 80134de:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80134e0:	9008      	str	r0, [sp, #32]
 80134e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	9b06      	ldr	r3, [sp, #24]
 80134ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80134ee:	bfa8      	it	ge
 80134f0:	1ed4      	subge	r4, r2, #3
 80134f2:	9305      	str	r3, [sp, #20]
 80134f4:	bfb2      	itee	lt
 80134f6:	2400      	movlt	r4, #0
 80134f8:	2318      	movge	r3, #24
 80134fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80134fe:	f06f 0317 	mvn.w	r3, #23
 8013502:	fb04 3303 	mla	r3, r4, r3, r3
 8013506:	eb03 0b02 	add.w	fp, r3, r2
 801350a:	9b00      	ldr	r3, [sp, #0]
 801350c:	9a05      	ldr	r2, [sp, #20]
 801350e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80137c8 <__kernel_rem_pio2+0x300>
 8013512:	eb03 0802 	add.w	r8, r3, r2
 8013516:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013518:	1aa7      	subs	r7, r4, r2
 801351a:	ae20      	add	r6, sp, #128	@ 0x80
 801351c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013520:	2500      	movs	r5, #0
 8013522:	4545      	cmp	r5, r8
 8013524:	dd13      	ble.n	801354e <__kernel_rem_pio2+0x86>
 8013526:	9b06      	ldr	r3, [sp, #24]
 8013528:	aa20      	add	r2, sp, #128	@ 0x80
 801352a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801352e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013532:	f04f 0800 	mov.w	r8, #0
 8013536:	9b00      	ldr	r3, [sp, #0]
 8013538:	4598      	cmp	r8, r3
 801353a:	dc31      	bgt.n	80135a0 <__kernel_rem_pio2+0xd8>
 801353c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80137c8 <__kernel_rem_pio2+0x300>
 8013540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013544:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013548:	462f      	mov	r7, r5
 801354a:	2600      	movs	r6, #0
 801354c:	e01b      	b.n	8013586 <__kernel_rem_pio2+0xbe>
 801354e:	42ef      	cmn	r7, r5
 8013550:	d407      	bmi.n	8013562 <__kernel_rem_pio2+0x9a>
 8013552:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013556:	f7ec ffe5 	bl	8000524 <__aeabi_i2d>
 801355a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801355e:	3501      	adds	r5, #1
 8013560:	e7df      	b.n	8013522 <__kernel_rem_pio2+0x5a>
 8013562:	ec51 0b18 	vmov	r0, r1, d8
 8013566:	e7f8      	b.n	801355a <__kernel_rem_pio2+0x92>
 8013568:	e9d7 2300 	ldrd	r2, r3, [r7]
 801356c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013570:	f7ed f842 	bl	80005f8 <__aeabi_dmul>
 8013574:	4602      	mov	r2, r0
 8013576:	460b      	mov	r3, r1
 8013578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801357c:	f7ec fe86 	bl	800028c <__adddf3>
 8013580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013584:	3601      	adds	r6, #1
 8013586:	9b05      	ldr	r3, [sp, #20]
 8013588:	429e      	cmp	r6, r3
 801358a:	f1a7 0708 	sub.w	r7, r7, #8
 801358e:	ddeb      	ble.n	8013568 <__kernel_rem_pio2+0xa0>
 8013590:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013594:	f108 0801 	add.w	r8, r8, #1
 8013598:	ecaa 7b02 	vstmia	sl!, {d7}
 801359c:	3508      	adds	r5, #8
 801359e:	e7ca      	b.n	8013536 <__kernel_rem_pio2+0x6e>
 80135a0:	9b00      	ldr	r3, [sp, #0]
 80135a2:	f8dd 8000 	ldr.w	r8, [sp]
 80135a6:	aa0c      	add	r2, sp, #48	@ 0x30
 80135a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80135ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80135b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80135b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80135b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80135ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80135bc:	ab98      	add	r3, sp, #608	@ 0x260
 80135be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80135c2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80135c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80135ca:	ac0c      	add	r4, sp, #48	@ 0x30
 80135cc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80135ce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80135d2:	46a1      	mov	r9, r4
 80135d4:	46c2      	mov	sl, r8
 80135d6:	f1ba 0f00 	cmp.w	sl, #0
 80135da:	f1a5 0508 	sub.w	r5, r5, #8
 80135de:	dc77      	bgt.n	80136d0 <__kernel_rem_pio2+0x208>
 80135e0:	4658      	mov	r0, fp
 80135e2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80135e6:	f000 fac7 	bl	8013b78 <scalbn>
 80135ea:	ec57 6b10 	vmov	r6, r7, d0
 80135ee:	2200      	movs	r2, #0
 80135f0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80135f4:	4630      	mov	r0, r6
 80135f6:	4639      	mov	r1, r7
 80135f8:	f7ec fffe 	bl	80005f8 <__aeabi_dmul>
 80135fc:	ec41 0b10 	vmov	d0, r0, r1
 8013600:	f000 fb3a 	bl	8013c78 <floor>
 8013604:	4b75      	ldr	r3, [pc, #468]	@ (80137dc <__kernel_rem_pio2+0x314>)
 8013606:	ec51 0b10 	vmov	r0, r1, d0
 801360a:	2200      	movs	r2, #0
 801360c:	f7ec fff4 	bl	80005f8 <__aeabi_dmul>
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	4630      	mov	r0, r6
 8013616:	4639      	mov	r1, r7
 8013618:	f7ec fe36 	bl	8000288 <__aeabi_dsub>
 801361c:	460f      	mov	r7, r1
 801361e:	4606      	mov	r6, r0
 8013620:	f7ed fa9a 	bl	8000b58 <__aeabi_d2iz>
 8013624:	9002      	str	r0, [sp, #8]
 8013626:	f7ec ff7d 	bl	8000524 <__aeabi_i2d>
 801362a:	4602      	mov	r2, r0
 801362c:	460b      	mov	r3, r1
 801362e:	4630      	mov	r0, r6
 8013630:	4639      	mov	r1, r7
 8013632:	f7ec fe29 	bl	8000288 <__aeabi_dsub>
 8013636:	f1bb 0f00 	cmp.w	fp, #0
 801363a:	4606      	mov	r6, r0
 801363c:	460f      	mov	r7, r1
 801363e:	dd6c      	ble.n	801371a <__kernel_rem_pio2+0x252>
 8013640:	f108 31ff 	add.w	r1, r8, #4294967295
 8013644:	ab0c      	add	r3, sp, #48	@ 0x30
 8013646:	9d02      	ldr	r5, [sp, #8]
 8013648:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801364c:	f1cb 0018 	rsb	r0, fp, #24
 8013650:	fa43 f200 	asr.w	r2, r3, r0
 8013654:	4415      	add	r5, r2
 8013656:	4082      	lsls	r2, r0
 8013658:	1a9b      	subs	r3, r3, r2
 801365a:	aa0c      	add	r2, sp, #48	@ 0x30
 801365c:	9502      	str	r5, [sp, #8]
 801365e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013662:	f1cb 0217 	rsb	r2, fp, #23
 8013666:	fa43 f902 	asr.w	r9, r3, r2
 801366a:	f1b9 0f00 	cmp.w	r9, #0
 801366e:	dd64      	ble.n	801373a <__kernel_rem_pio2+0x272>
 8013670:	9b02      	ldr	r3, [sp, #8]
 8013672:	2200      	movs	r2, #0
 8013674:	3301      	adds	r3, #1
 8013676:	9302      	str	r3, [sp, #8]
 8013678:	4615      	mov	r5, r2
 801367a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801367e:	4590      	cmp	r8, r2
 8013680:	f300 80b8 	bgt.w	80137f4 <__kernel_rem_pio2+0x32c>
 8013684:	f1bb 0f00 	cmp.w	fp, #0
 8013688:	dd07      	ble.n	801369a <__kernel_rem_pio2+0x1d2>
 801368a:	f1bb 0f01 	cmp.w	fp, #1
 801368e:	f000 80bf 	beq.w	8013810 <__kernel_rem_pio2+0x348>
 8013692:	f1bb 0f02 	cmp.w	fp, #2
 8013696:	f000 80c6 	beq.w	8013826 <__kernel_rem_pio2+0x35e>
 801369a:	f1b9 0f02 	cmp.w	r9, #2
 801369e:	d14c      	bne.n	801373a <__kernel_rem_pio2+0x272>
 80136a0:	4632      	mov	r2, r6
 80136a2:	463b      	mov	r3, r7
 80136a4:	494e      	ldr	r1, [pc, #312]	@ (80137e0 <__kernel_rem_pio2+0x318>)
 80136a6:	2000      	movs	r0, #0
 80136a8:	f7ec fdee 	bl	8000288 <__aeabi_dsub>
 80136ac:	4606      	mov	r6, r0
 80136ae:	460f      	mov	r7, r1
 80136b0:	2d00      	cmp	r5, #0
 80136b2:	d042      	beq.n	801373a <__kernel_rem_pio2+0x272>
 80136b4:	4658      	mov	r0, fp
 80136b6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80137d0 <__kernel_rem_pio2+0x308>
 80136ba:	f000 fa5d 	bl	8013b78 <scalbn>
 80136be:	4630      	mov	r0, r6
 80136c0:	4639      	mov	r1, r7
 80136c2:	ec53 2b10 	vmov	r2, r3, d0
 80136c6:	f7ec fddf 	bl	8000288 <__aeabi_dsub>
 80136ca:	4606      	mov	r6, r0
 80136cc:	460f      	mov	r7, r1
 80136ce:	e034      	b.n	801373a <__kernel_rem_pio2+0x272>
 80136d0:	4b44      	ldr	r3, [pc, #272]	@ (80137e4 <__kernel_rem_pio2+0x31c>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136d8:	f7ec ff8e 	bl	80005f8 <__aeabi_dmul>
 80136dc:	f7ed fa3c 	bl	8000b58 <__aeabi_d2iz>
 80136e0:	f7ec ff20 	bl	8000524 <__aeabi_i2d>
 80136e4:	4b40      	ldr	r3, [pc, #256]	@ (80137e8 <__kernel_rem_pio2+0x320>)
 80136e6:	2200      	movs	r2, #0
 80136e8:	4606      	mov	r6, r0
 80136ea:	460f      	mov	r7, r1
 80136ec:	f7ec ff84 	bl	80005f8 <__aeabi_dmul>
 80136f0:	4602      	mov	r2, r0
 80136f2:	460b      	mov	r3, r1
 80136f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136f8:	f7ec fdc6 	bl	8000288 <__aeabi_dsub>
 80136fc:	f7ed fa2c 	bl	8000b58 <__aeabi_d2iz>
 8013700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013704:	f849 0b04 	str.w	r0, [r9], #4
 8013708:	4639      	mov	r1, r7
 801370a:	4630      	mov	r0, r6
 801370c:	f7ec fdbe 	bl	800028c <__adddf3>
 8013710:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013718:	e75d      	b.n	80135d6 <__kernel_rem_pio2+0x10e>
 801371a:	d107      	bne.n	801372c <__kernel_rem_pio2+0x264>
 801371c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013720:	aa0c      	add	r2, sp, #48	@ 0x30
 8013722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013726:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801372a:	e79e      	b.n	801366a <__kernel_rem_pio2+0x1a2>
 801372c:	4b2f      	ldr	r3, [pc, #188]	@ (80137ec <__kernel_rem_pio2+0x324>)
 801372e:	2200      	movs	r2, #0
 8013730:	f7ed f9e8 	bl	8000b04 <__aeabi_dcmpge>
 8013734:	2800      	cmp	r0, #0
 8013736:	d143      	bne.n	80137c0 <__kernel_rem_pio2+0x2f8>
 8013738:	4681      	mov	r9, r0
 801373a:	2200      	movs	r2, #0
 801373c:	2300      	movs	r3, #0
 801373e:	4630      	mov	r0, r6
 8013740:	4639      	mov	r1, r7
 8013742:	f7ed f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8013746:	2800      	cmp	r0, #0
 8013748:	f000 80bf 	beq.w	80138ca <__kernel_rem_pio2+0x402>
 801374c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013750:	2200      	movs	r2, #0
 8013752:	9900      	ldr	r1, [sp, #0]
 8013754:	428b      	cmp	r3, r1
 8013756:	da6e      	bge.n	8013836 <__kernel_rem_pio2+0x36e>
 8013758:	2a00      	cmp	r2, #0
 801375a:	f000 8089 	beq.w	8013870 <__kernel_rem_pio2+0x3a8>
 801375e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013762:	ab0c      	add	r3, sp, #48	@ 0x30
 8013764:	f1ab 0b18 	sub.w	fp, fp, #24
 8013768:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d0f6      	beq.n	801375e <__kernel_rem_pio2+0x296>
 8013770:	4658      	mov	r0, fp
 8013772:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80137d0 <__kernel_rem_pio2+0x308>
 8013776:	f000 f9ff 	bl	8013b78 <scalbn>
 801377a:	f108 0301 	add.w	r3, r8, #1
 801377e:	00da      	lsls	r2, r3, #3
 8013780:	9205      	str	r2, [sp, #20]
 8013782:	ec55 4b10 	vmov	r4, r5, d0
 8013786:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013788:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80137e4 <__kernel_rem_pio2+0x31c>
 801378c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013790:	4646      	mov	r6, r8
 8013792:	f04f 0a00 	mov.w	sl, #0
 8013796:	2e00      	cmp	r6, #0
 8013798:	f280 80cf 	bge.w	801393a <__kernel_rem_pio2+0x472>
 801379c:	4644      	mov	r4, r8
 801379e:	2c00      	cmp	r4, #0
 80137a0:	f2c0 80fd 	blt.w	801399e <__kernel_rem_pio2+0x4d6>
 80137a4:	4b12      	ldr	r3, [pc, #72]	@ (80137f0 <__kernel_rem_pio2+0x328>)
 80137a6:	461f      	mov	r7, r3
 80137a8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80137aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80137ae:	9306      	str	r3, [sp, #24]
 80137b0:	f04f 0a00 	mov.w	sl, #0
 80137b4:	f04f 0b00 	mov.w	fp, #0
 80137b8:	2600      	movs	r6, #0
 80137ba:	eba8 0504 	sub.w	r5, r8, r4
 80137be:	e0e2      	b.n	8013986 <__kernel_rem_pio2+0x4be>
 80137c0:	f04f 0902 	mov.w	r9, #2
 80137c4:	e754      	b.n	8013670 <__kernel_rem_pio2+0x1a8>
 80137c6:	bf00      	nop
	...
 80137d4:	3ff00000 	.word	0x3ff00000
 80137d8:	08014610 	.word	0x08014610
 80137dc:	40200000 	.word	0x40200000
 80137e0:	3ff00000 	.word	0x3ff00000
 80137e4:	3e700000 	.word	0x3e700000
 80137e8:	41700000 	.word	0x41700000
 80137ec:	3fe00000 	.word	0x3fe00000
 80137f0:	080145d0 	.word	0x080145d0
 80137f4:	f854 3b04 	ldr.w	r3, [r4], #4
 80137f8:	b945      	cbnz	r5, 801380c <__kernel_rem_pio2+0x344>
 80137fa:	b123      	cbz	r3, 8013806 <__kernel_rem_pio2+0x33e>
 80137fc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013800:	f844 3c04 	str.w	r3, [r4, #-4]
 8013804:	2301      	movs	r3, #1
 8013806:	3201      	adds	r2, #1
 8013808:	461d      	mov	r5, r3
 801380a:	e738      	b.n	801367e <__kernel_rem_pio2+0x1b6>
 801380c:	1acb      	subs	r3, r1, r3
 801380e:	e7f7      	b.n	8013800 <__kernel_rem_pio2+0x338>
 8013810:	f108 32ff 	add.w	r2, r8, #4294967295
 8013814:	ab0c      	add	r3, sp, #48	@ 0x30
 8013816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801381a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801381e:	a90c      	add	r1, sp, #48	@ 0x30
 8013820:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013824:	e739      	b.n	801369a <__kernel_rem_pio2+0x1d2>
 8013826:	f108 32ff 	add.w	r2, r8, #4294967295
 801382a:	ab0c      	add	r3, sp, #48	@ 0x30
 801382c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013830:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013834:	e7f3      	b.n	801381e <__kernel_rem_pio2+0x356>
 8013836:	a90c      	add	r1, sp, #48	@ 0x30
 8013838:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801383c:	3b01      	subs	r3, #1
 801383e:	430a      	orrs	r2, r1
 8013840:	e787      	b.n	8013752 <__kernel_rem_pio2+0x28a>
 8013842:	3401      	adds	r4, #1
 8013844:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013848:	2a00      	cmp	r2, #0
 801384a:	d0fa      	beq.n	8013842 <__kernel_rem_pio2+0x37a>
 801384c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801384e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013852:	eb0d 0503 	add.w	r5, sp, r3
 8013856:	9b06      	ldr	r3, [sp, #24]
 8013858:	aa20      	add	r2, sp, #128	@ 0x80
 801385a:	4443      	add	r3, r8
 801385c:	f108 0701 	add.w	r7, r8, #1
 8013860:	3d98      	subs	r5, #152	@ 0x98
 8013862:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013866:	4444      	add	r4, r8
 8013868:	42bc      	cmp	r4, r7
 801386a:	da04      	bge.n	8013876 <__kernel_rem_pio2+0x3ae>
 801386c:	46a0      	mov	r8, r4
 801386e:	e6a2      	b.n	80135b6 <__kernel_rem_pio2+0xee>
 8013870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013872:	2401      	movs	r4, #1
 8013874:	e7e6      	b.n	8013844 <__kernel_rem_pio2+0x37c>
 8013876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013878:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801387c:	f7ec fe52 	bl	8000524 <__aeabi_i2d>
 8013880:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8013b48 <__kernel_rem_pio2+0x680>
 8013884:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013888:	ed8d 7b02 	vstr	d7, [sp, #8]
 801388c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013890:	46b2      	mov	sl, r6
 8013892:	f04f 0800 	mov.w	r8, #0
 8013896:	9b05      	ldr	r3, [sp, #20]
 8013898:	4598      	cmp	r8, r3
 801389a:	dd05      	ble.n	80138a8 <__kernel_rem_pio2+0x3e0>
 801389c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138a0:	3701      	adds	r7, #1
 80138a2:	eca5 7b02 	vstmia	r5!, {d7}
 80138a6:	e7df      	b.n	8013868 <__kernel_rem_pio2+0x3a0>
 80138a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80138ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80138b0:	f7ec fea2 	bl	80005f8 <__aeabi_dmul>
 80138b4:	4602      	mov	r2, r0
 80138b6:	460b      	mov	r3, r1
 80138b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138bc:	f7ec fce6 	bl	800028c <__adddf3>
 80138c0:	f108 0801 	add.w	r8, r8, #1
 80138c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80138c8:	e7e5      	b.n	8013896 <__kernel_rem_pio2+0x3ce>
 80138ca:	f1cb 0000 	rsb	r0, fp, #0
 80138ce:	ec47 6b10 	vmov	d0, r6, r7
 80138d2:	f000 f951 	bl	8013b78 <scalbn>
 80138d6:	ec55 4b10 	vmov	r4, r5, d0
 80138da:	4b9d      	ldr	r3, [pc, #628]	@ (8013b50 <__kernel_rem_pio2+0x688>)
 80138dc:	2200      	movs	r2, #0
 80138de:	4620      	mov	r0, r4
 80138e0:	4629      	mov	r1, r5
 80138e2:	f7ed f90f 	bl	8000b04 <__aeabi_dcmpge>
 80138e6:	b300      	cbz	r0, 801392a <__kernel_rem_pio2+0x462>
 80138e8:	4b9a      	ldr	r3, [pc, #616]	@ (8013b54 <__kernel_rem_pio2+0x68c>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	4620      	mov	r0, r4
 80138ee:	4629      	mov	r1, r5
 80138f0:	f7ec fe82 	bl	80005f8 <__aeabi_dmul>
 80138f4:	f7ed f930 	bl	8000b58 <__aeabi_d2iz>
 80138f8:	4606      	mov	r6, r0
 80138fa:	f7ec fe13 	bl	8000524 <__aeabi_i2d>
 80138fe:	4b94      	ldr	r3, [pc, #592]	@ (8013b50 <__kernel_rem_pio2+0x688>)
 8013900:	2200      	movs	r2, #0
 8013902:	f7ec fe79 	bl	80005f8 <__aeabi_dmul>
 8013906:	460b      	mov	r3, r1
 8013908:	4602      	mov	r2, r0
 801390a:	4629      	mov	r1, r5
 801390c:	4620      	mov	r0, r4
 801390e:	f7ec fcbb 	bl	8000288 <__aeabi_dsub>
 8013912:	f7ed f921 	bl	8000b58 <__aeabi_d2iz>
 8013916:	ab0c      	add	r3, sp, #48	@ 0x30
 8013918:	f10b 0b18 	add.w	fp, fp, #24
 801391c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013920:	f108 0801 	add.w	r8, r8, #1
 8013924:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013928:	e722      	b.n	8013770 <__kernel_rem_pio2+0x2a8>
 801392a:	4620      	mov	r0, r4
 801392c:	4629      	mov	r1, r5
 801392e:	f7ed f913 	bl	8000b58 <__aeabi_d2iz>
 8013932:	ab0c      	add	r3, sp, #48	@ 0x30
 8013934:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013938:	e71a      	b.n	8013770 <__kernel_rem_pio2+0x2a8>
 801393a:	ab0c      	add	r3, sp, #48	@ 0x30
 801393c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013940:	f7ec fdf0 	bl	8000524 <__aeabi_i2d>
 8013944:	4622      	mov	r2, r4
 8013946:	462b      	mov	r3, r5
 8013948:	f7ec fe56 	bl	80005f8 <__aeabi_dmul>
 801394c:	4652      	mov	r2, sl
 801394e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013952:	465b      	mov	r3, fp
 8013954:	4620      	mov	r0, r4
 8013956:	4629      	mov	r1, r5
 8013958:	f7ec fe4e 	bl	80005f8 <__aeabi_dmul>
 801395c:	3e01      	subs	r6, #1
 801395e:	4604      	mov	r4, r0
 8013960:	460d      	mov	r5, r1
 8013962:	e718      	b.n	8013796 <__kernel_rem_pio2+0x2ce>
 8013964:	9906      	ldr	r1, [sp, #24]
 8013966:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801396a:	9106      	str	r1, [sp, #24]
 801396c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013970:	f7ec fe42 	bl	80005f8 <__aeabi_dmul>
 8013974:	4602      	mov	r2, r0
 8013976:	460b      	mov	r3, r1
 8013978:	4650      	mov	r0, sl
 801397a:	4659      	mov	r1, fp
 801397c:	f7ec fc86 	bl	800028c <__adddf3>
 8013980:	3601      	adds	r6, #1
 8013982:	4682      	mov	sl, r0
 8013984:	468b      	mov	fp, r1
 8013986:	9b00      	ldr	r3, [sp, #0]
 8013988:	429e      	cmp	r6, r3
 801398a:	dc01      	bgt.n	8013990 <__kernel_rem_pio2+0x4c8>
 801398c:	42b5      	cmp	r5, r6
 801398e:	dae9      	bge.n	8013964 <__kernel_rem_pio2+0x49c>
 8013990:	ab48      	add	r3, sp, #288	@ 0x120
 8013992:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013996:	e9c5 ab00 	strd	sl, fp, [r5]
 801399a:	3c01      	subs	r4, #1
 801399c:	e6ff      	b.n	801379e <__kernel_rem_pio2+0x2d6>
 801399e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80139a0:	2b02      	cmp	r3, #2
 80139a2:	dc0b      	bgt.n	80139bc <__kernel_rem_pio2+0x4f4>
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	dc39      	bgt.n	8013a1c <__kernel_rem_pio2+0x554>
 80139a8:	d05d      	beq.n	8013a66 <__kernel_rem_pio2+0x59e>
 80139aa:	9b02      	ldr	r3, [sp, #8]
 80139ac:	f003 0007 	and.w	r0, r3, #7
 80139b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80139b4:	ecbd 8b02 	vpop	{d8}
 80139b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80139be:	2b03      	cmp	r3, #3
 80139c0:	d1f3      	bne.n	80139aa <__kernel_rem_pio2+0x4e2>
 80139c2:	9b05      	ldr	r3, [sp, #20]
 80139c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80139c8:	eb0d 0403 	add.w	r4, sp, r3
 80139cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80139d0:	4625      	mov	r5, r4
 80139d2:	46c2      	mov	sl, r8
 80139d4:	f1ba 0f00 	cmp.w	sl, #0
 80139d8:	f1a5 0508 	sub.w	r5, r5, #8
 80139dc:	dc6b      	bgt.n	8013ab6 <__kernel_rem_pio2+0x5ee>
 80139de:	4645      	mov	r5, r8
 80139e0:	2d01      	cmp	r5, #1
 80139e2:	f1a4 0408 	sub.w	r4, r4, #8
 80139e6:	f300 8087 	bgt.w	8013af8 <__kernel_rem_pio2+0x630>
 80139ea:	9c05      	ldr	r4, [sp, #20]
 80139ec:	ab48      	add	r3, sp, #288	@ 0x120
 80139ee:	441c      	add	r4, r3
 80139f0:	2000      	movs	r0, #0
 80139f2:	2100      	movs	r1, #0
 80139f4:	f1b8 0f01 	cmp.w	r8, #1
 80139f8:	f300 809c 	bgt.w	8013b34 <__kernel_rem_pio2+0x66c>
 80139fc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8013a00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8013a04:	f1b9 0f00 	cmp.w	r9, #0
 8013a08:	f040 80a6 	bne.w	8013b58 <__kernel_rem_pio2+0x690>
 8013a0c:	9b04      	ldr	r3, [sp, #16]
 8013a0e:	e9c3 7800 	strd	r7, r8, [r3]
 8013a12:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013a16:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013a1a:	e7c6      	b.n	80139aa <__kernel_rem_pio2+0x4e2>
 8013a1c:	9d05      	ldr	r5, [sp, #20]
 8013a1e:	ab48      	add	r3, sp, #288	@ 0x120
 8013a20:	441d      	add	r5, r3
 8013a22:	4644      	mov	r4, r8
 8013a24:	2000      	movs	r0, #0
 8013a26:	2100      	movs	r1, #0
 8013a28:	2c00      	cmp	r4, #0
 8013a2a:	da35      	bge.n	8013a98 <__kernel_rem_pio2+0x5d0>
 8013a2c:	f1b9 0f00 	cmp.w	r9, #0
 8013a30:	d038      	beq.n	8013aa4 <__kernel_rem_pio2+0x5dc>
 8013a32:	4602      	mov	r2, r0
 8013a34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a38:	9c04      	ldr	r4, [sp, #16]
 8013a3a:	e9c4 2300 	strd	r2, r3, [r4]
 8013a3e:	4602      	mov	r2, r0
 8013a40:	460b      	mov	r3, r1
 8013a42:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013a46:	f7ec fc1f 	bl	8000288 <__aeabi_dsub>
 8013a4a:	ad4a      	add	r5, sp, #296	@ 0x128
 8013a4c:	2401      	movs	r4, #1
 8013a4e:	45a0      	cmp	r8, r4
 8013a50:	da2b      	bge.n	8013aaa <__kernel_rem_pio2+0x5e2>
 8013a52:	f1b9 0f00 	cmp.w	r9, #0
 8013a56:	d002      	beq.n	8013a5e <__kernel_rem_pio2+0x596>
 8013a58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	9b04      	ldr	r3, [sp, #16]
 8013a60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013a64:	e7a1      	b.n	80139aa <__kernel_rem_pio2+0x4e2>
 8013a66:	9c05      	ldr	r4, [sp, #20]
 8013a68:	ab48      	add	r3, sp, #288	@ 0x120
 8013a6a:	441c      	add	r4, r3
 8013a6c:	2000      	movs	r0, #0
 8013a6e:	2100      	movs	r1, #0
 8013a70:	f1b8 0f00 	cmp.w	r8, #0
 8013a74:	da09      	bge.n	8013a8a <__kernel_rem_pio2+0x5c2>
 8013a76:	f1b9 0f00 	cmp.w	r9, #0
 8013a7a:	d002      	beq.n	8013a82 <__kernel_rem_pio2+0x5ba>
 8013a7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a80:	4619      	mov	r1, r3
 8013a82:	9b04      	ldr	r3, [sp, #16]
 8013a84:	e9c3 0100 	strd	r0, r1, [r3]
 8013a88:	e78f      	b.n	80139aa <__kernel_rem_pio2+0x4e2>
 8013a8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a8e:	f7ec fbfd 	bl	800028c <__adddf3>
 8013a92:	f108 38ff 	add.w	r8, r8, #4294967295
 8013a96:	e7eb      	b.n	8013a70 <__kernel_rem_pio2+0x5a8>
 8013a98:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013a9c:	f7ec fbf6 	bl	800028c <__adddf3>
 8013aa0:	3c01      	subs	r4, #1
 8013aa2:	e7c1      	b.n	8013a28 <__kernel_rem_pio2+0x560>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	e7c6      	b.n	8013a38 <__kernel_rem_pio2+0x570>
 8013aaa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013aae:	f7ec fbed 	bl	800028c <__adddf3>
 8013ab2:	3401      	adds	r4, #1
 8013ab4:	e7cb      	b.n	8013a4e <__kernel_rem_pio2+0x586>
 8013ab6:	ed95 7b00 	vldr	d7, [r5]
 8013aba:	ed8d 7b00 	vstr	d7, [sp]
 8013abe:	ed95 7b02 	vldr	d7, [r5, #8]
 8013ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ac6:	ec53 2b17 	vmov	r2, r3, d7
 8013aca:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ace:	f7ec fbdd 	bl	800028c <__adddf3>
 8013ad2:	4602      	mov	r2, r0
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	460f      	mov	r7, r1
 8013ada:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ade:	f7ec fbd3 	bl	8000288 <__aeabi_dsub>
 8013ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ae6:	f7ec fbd1 	bl	800028c <__adddf3>
 8013aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013aee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013af2:	e9c5 6700 	strd	r6, r7, [r5]
 8013af6:	e76d      	b.n	80139d4 <__kernel_rem_pio2+0x50c>
 8013af8:	ed94 7b00 	vldr	d7, [r4]
 8013afc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013b00:	ec51 0b17 	vmov	r0, r1, d7
 8013b04:	4652      	mov	r2, sl
 8013b06:	465b      	mov	r3, fp
 8013b08:	ed8d 7b00 	vstr	d7, [sp]
 8013b0c:	f7ec fbbe 	bl	800028c <__adddf3>
 8013b10:	4602      	mov	r2, r0
 8013b12:	460b      	mov	r3, r1
 8013b14:	4606      	mov	r6, r0
 8013b16:	460f      	mov	r7, r1
 8013b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b1c:	f7ec fbb4 	bl	8000288 <__aeabi_dsub>
 8013b20:	4652      	mov	r2, sl
 8013b22:	465b      	mov	r3, fp
 8013b24:	f7ec fbb2 	bl	800028c <__adddf3>
 8013b28:	3d01      	subs	r5, #1
 8013b2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013b2e:	e9c4 6700 	strd	r6, r7, [r4]
 8013b32:	e755      	b.n	80139e0 <__kernel_rem_pio2+0x518>
 8013b34:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013b38:	f7ec fba8 	bl	800028c <__adddf3>
 8013b3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b40:	e758      	b.n	80139f4 <__kernel_rem_pio2+0x52c>
 8013b42:	bf00      	nop
 8013b44:	f3af 8000 	nop.w
	...
 8013b50:	41700000 	.word	0x41700000
 8013b54:	3e700000 	.word	0x3e700000
 8013b58:	9b04      	ldr	r3, [sp, #16]
 8013b5a:	9a04      	ldr	r2, [sp, #16]
 8013b5c:	601f      	str	r7, [r3, #0]
 8013b5e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8013b62:	605c      	str	r4, [r3, #4]
 8013b64:	609d      	str	r5, [r3, #8]
 8013b66:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013b6a:	60d3      	str	r3, [r2, #12]
 8013b6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013b70:	6110      	str	r0, [r2, #16]
 8013b72:	6153      	str	r3, [r2, #20]
 8013b74:	e719      	b.n	80139aa <__kernel_rem_pio2+0x4e2>
 8013b76:	bf00      	nop

08013b78 <scalbn>:
 8013b78:	b570      	push	{r4, r5, r6, lr}
 8013b7a:	ec55 4b10 	vmov	r4, r5, d0
 8013b7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013b82:	4606      	mov	r6, r0
 8013b84:	462b      	mov	r3, r5
 8013b86:	b991      	cbnz	r1, 8013bae <scalbn+0x36>
 8013b88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013b8c:	4323      	orrs	r3, r4
 8013b8e:	d03d      	beq.n	8013c0c <scalbn+0x94>
 8013b90:	4b35      	ldr	r3, [pc, #212]	@ (8013c68 <scalbn+0xf0>)
 8013b92:	4620      	mov	r0, r4
 8013b94:	4629      	mov	r1, r5
 8013b96:	2200      	movs	r2, #0
 8013b98:	f7ec fd2e 	bl	80005f8 <__aeabi_dmul>
 8013b9c:	4b33      	ldr	r3, [pc, #204]	@ (8013c6c <scalbn+0xf4>)
 8013b9e:	429e      	cmp	r6, r3
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	da0f      	bge.n	8013bc6 <scalbn+0x4e>
 8013ba6:	a328      	add	r3, pc, #160	@ (adr r3, 8013c48 <scalbn+0xd0>)
 8013ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bac:	e01e      	b.n	8013bec <scalbn+0x74>
 8013bae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013bb2:	4291      	cmp	r1, r2
 8013bb4:	d10b      	bne.n	8013bce <scalbn+0x56>
 8013bb6:	4622      	mov	r2, r4
 8013bb8:	4620      	mov	r0, r4
 8013bba:	4629      	mov	r1, r5
 8013bbc:	f7ec fb66 	bl	800028c <__adddf3>
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	460d      	mov	r5, r1
 8013bc4:	e022      	b.n	8013c0c <scalbn+0x94>
 8013bc6:	460b      	mov	r3, r1
 8013bc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013bcc:	3936      	subs	r1, #54	@ 0x36
 8013bce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013bd2:	4296      	cmp	r6, r2
 8013bd4:	dd0d      	ble.n	8013bf2 <scalbn+0x7a>
 8013bd6:	2d00      	cmp	r5, #0
 8013bd8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013c50 <scalbn+0xd8>)
 8013bda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bde:	da02      	bge.n	8013be6 <scalbn+0x6e>
 8013be0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013c58 <scalbn+0xe0>)
 8013be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013be6:	a31a      	add	r3, pc, #104	@ (adr r3, 8013c50 <scalbn+0xd8>)
 8013be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bec:	f7ec fd04 	bl	80005f8 <__aeabi_dmul>
 8013bf0:	e7e6      	b.n	8013bc0 <scalbn+0x48>
 8013bf2:	1872      	adds	r2, r6, r1
 8013bf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013bf8:	428a      	cmp	r2, r1
 8013bfa:	dcec      	bgt.n	8013bd6 <scalbn+0x5e>
 8013bfc:	2a00      	cmp	r2, #0
 8013bfe:	dd08      	ble.n	8013c12 <scalbn+0x9a>
 8013c00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013c04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013c08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c0c:	ec45 4b10 	vmov	d0, r4, r5
 8013c10:	bd70      	pop	{r4, r5, r6, pc}
 8013c12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013c16:	da08      	bge.n	8013c2a <scalbn+0xb2>
 8013c18:	2d00      	cmp	r5, #0
 8013c1a:	a10b      	add	r1, pc, #44	@ (adr r1, 8013c48 <scalbn+0xd0>)
 8013c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c20:	dac1      	bge.n	8013ba6 <scalbn+0x2e>
 8013c22:	a10f      	add	r1, pc, #60	@ (adr r1, 8013c60 <scalbn+0xe8>)
 8013c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c28:	e7bd      	b.n	8013ba6 <scalbn+0x2e>
 8013c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013c2e:	3236      	adds	r2, #54	@ 0x36
 8013c30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013c34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c38:	4620      	mov	r0, r4
 8013c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013c70 <scalbn+0xf8>)
 8013c3c:	4629      	mov	r1, r5
 8013c3e:	2200      	movs	r2, #0
 8013c40:	e7d4      	b.n	8013bec <scalbn+0x74>
 8013c42:	bf00      	nop
 8013c44:	f3af 8000 	nop.w
 8013c48:	c2f8f359 	.word	0xc2f8f359
 8013c4c:	01a56e1f 	.word	0x01a56e1f
 8013c50:	8800759c 	.word	0x8800759c
 8013c54:	7e37e43c 	.word	0x7e37e43c
 8013c58:	8800759c 	.word	0x8800759c
 8013c5c:	fe37e43c 	.word	0xfe37e43c
 8013c60:	c2f8f359 	.word	0xc2f8f359
 8013c64:	81a56e1f 	.word	0x81a56e1f
 8013c68:	43500000 	.word	0x43500000
 8013c6c:	ffff3cb0 	.word	0xffff3cb0
 8013c70:	3c900000 	.word	0x3c900000
 8013c74:	00000000 	.word	0x00000000

08013c78 <floor>:
 8013c78:	ec51 0b10 	vmov	r0, r1, d0
 8013c7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c84:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013c88:	2e13      	cmp	r6, #19
 8013c8a:	460c      	mov	r4, r1
 8013c8c:	4605      	mov	r5, r0
 8013c8e:	4680      	mov	r8, r0
 8013c90:	dc34      	bgt.n	8013cfc <floor+0x84>
 8013c92:	2e00      	cmp	r6, #0
 8013c94:	da17      	bge.n	8013cc6 <floor+0x4e>
 8013c96:	a332      	add	r3, pc, #200	@ (adr r3, 8013d60 <floor+0xe8>)
 8013c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9c:	f7ec faf6 	bl	800028c <__adddf3>
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	f7ec ff38 	bl	8000b18 <__aeabi_dcmpgt>
 8013ca8:	b150      	cbz	r0, 8013cc0 <floor+0x48>
 8013caa:	2c00      	cmp	r4, #0
 8013cac:	da55      	bge.n	8013d5a <floor+0xe2>
 8013cae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013cb2:	432c      	orrs	r4, r5
 8013cb4:	2500      	movs	r5, #0
 8013cb6:	42ac      	cmp	r4, r5
 8013cb8:	4c2b      	ldr	r4, [pc, #172]	@ (8013d68 <floor+0xf0>)
 8013cba:	bf08      	it	eq
 8013cbc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013cc0:	4621      	mov	r1, r4
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	e023      	b.n	8013d0e <floor+0x96>
 8013cc6:	4f29      	ldr	r7, [pc, #164]	@ (8013d6c <floor+0xf4>)
 8013cc8:	4137      	asrs	r7, r6
 8013cca:	ea01 0307 	and.w	r3, r1, r7
 8013cce:	4303      	orrs	r3, r0
 8013cd0:	d01d      	beq.n	8013d0e <floor+0x96>
 8013cd2:	a323      	add	r3, pc, #140	@ (adr r3, 8013d60 <floor+0xe8>)
 8013cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd8:	f7ec fad8 	bl	800028c <__adddf3>
 8013cdc:	2200      	movs	r2, #0
 8013cde:	2300      	movs	r3, #0
 8013ce0:	f7ec ff1a 	bl	8000b18 <__aeabi_dcmpgt>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d0eb      	beq.n	8013cc0 <floor+0x48>
 8013ce8:	2c00      	cmp	r4, #0
 8013cea:	bfbe      	ittt	lt
 8013cec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013cf0:	4133      	asrlt	r3, r6
 8013cf2:	18e4      	addlt	r4, r4, r3
 8013cf4:	ea24 0407 	bic.w	r4, r4, r7
 8013cf8:	2500      	movs	r5, #0
 8013cfa:	e7e1      	b.n	8013cc0 <floor+0x48>
 8013cfc:	2e33      	cmp	r6, #51	@ 0x33
 8013cfe:	dd0a      	ble.n	8013d16 <floor+0x9e>
 8013d00:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013d04:	d103      	bne.n	8013d0e <floor+0x96>
 8013d06:	4602      	mov	r2, r0
 8013d08:	460b      	mov	r3, r1
 8013d0a:	f7ec fabf 	bl	800028c <__adddf3>
 8013d0e:	ec41 0b10 	vmov	d0, r0, r1
 8013d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d16:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013d1a:	f04f 37ff 	mov.w	r7, #4294967295
 8013d1e:	40df      	lsrs	r7, r3
 8013d20:	4207      	tst	r7, r0
 8013d22:	d0f4      	beq.n	8013d0e <floor+0x96>
 8013d24:	a30e      	add	r3, pc, #56	@ (adr r3, 8013d60 <floor+0xe8>)
 8013d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2a:	f7ec faaf 	bl	800028c <__adddf3>
 8013d2e:	2200      	movs	r2, #0
 8013d30:	2300      	movs	r3, #0
 8013d32:	f7ec fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d0c2      	beq.n	8013cc0 <floor+0x48>
 8013d3a:	2c00      	cmp	r4, #0
 8013d3c:	da0a      	bge.n	8013d54 <floor+0xdc>
 8013d3e:	2e14      	cmp	r6, #20
 8013d40:	d101      	bne.n	8013d46 <floor+0xce>
 8013d42:	3401      	adds	r4, #1
 8013d44:	e006      	b.n	8013d54 <floor+0xdc>
 8013d46:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	40b3      	lsls	r3, r6
 8013d4e:	441d      	add	r5, r3
 8013d50:	4545      	cmp	r5, r8
 8013d52:	d3f6      	bcc.n	8013d42 <floor+0xca>
 8013d54:	ea25 0507 	bic.w	r5, r5, r7
 8013d58:	e7b2      	b.n	8013cc0 <floor+0x48>
 8013d5a:	2500      	movs	r5, #0
 8013d5c:	462c      	mov	r4, r5
 8013d5e:	e7af      	b.n	8013cc0 <floor+0x48>
 8013d60:	8800759c 	.word	0x8800759c
 8013d64:	7e37e43c 	.word	0x7e37e43c
 8013d68:	bff00000 	.word	0xbff00000
 8013d6c:	000fffff 	.word	0x000fffff

08013d70 <_init>:
 8013d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d72:	bf00      	nop
 8013d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d76:	bc08      	pop	{r3}
 8013d78:	469e      	mov	lr, r3
 8013d7a:	4770      	bx	lr

08013d7c <_fini>:
 8013d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d7e:	bf00      	nop
 8013d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d82:	bc08      	pop	{r3}
 8013d84:	469e      	mov	lr, r3
 8013d86:	4770      	bx	lr
