
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d28  08010cb8  08010cb8  00011cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119e0  080119e0  000132b0  2**0
                  CONTENTS
  4 .ARM          00000008  080119e0  080119e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119e8  080119e8  000132b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119e8  080119e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119ec  080119ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  080119f0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132b0  2**0
                  CONTENTS
 10 .bss          000005b4  200002b0  200002b0  000132b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000864  20000864  000132b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f65  00000000  00000000  000132e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c83  00000000  00000000  00028245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0002aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9f  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012763  00000000  00000000  0002cfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005861  00000000  00000000  0003f742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00044fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f4  00000000  00000000  00044fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0004b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ca0 	.word	0x08010ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08010ca0 	.word	0x08010ca0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f006 fb77 	bl	800772c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f006 fb6f 	bl	800772c <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(double Vx, double Vy, double W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0b8      	sub	sp, #224	@ 0xe0
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 8001152:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8001156:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6;
 800115a:	a3c5      	add	r3, pc, #788	@ (adr r3, 8001470 <Inverse_Kinematics+0x328>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double minThreshold = 1000;
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4bbf      	ldr	r3, [pc, #764]	@ (8001468 <Inverse_Kinematics+0x320>)
 800116a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double wheelMaxSpeed = 5500;
 800116e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001420 <Inverse_Kinematics+0x2d8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double M1 = (-sin(M_PI_4) * Vx * 1.25 + cos(M_PI_4) * Vy - R * W);
 8001178:	a3ab      	add	r3, pc, #684	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4bb6      	ldr	r3, [pc, #728]	@ (800146c <Inverse_Kinematics+0x324>)
 8001194:	f7ff fa30 	bl	80005f8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	a3a3      	add	r3, pc, #652	@ (adr r3, 8001430 <Inverse_Kinematics+0x2e8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f869 	bl	800028c <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80011ca:	f7ff fa15 	bl	80005f8 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4620      	mov	r0, r4
 80011d4:	4629      	mov	r1, r5
 80011d6:	f7ff f857 	bl	8000288 <__aeabi_dsub>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = (-sin(3 * M_PI_4) * Vx * 1.4 + cos(3 * M_PI_4) * Vy - R * W);
 80011e2:	a395      	add	r3, pc, #596	@ (adr r3, 8001438 <Inverse_Kinematics+0x2f0>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	a391      	add	r3, pc, #580	@ (adr r3, 8001440 <Inverse_Kinematics+0x2f8>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff f9fb 	bl	80005f8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4614      	mov	r4, r2
 8001208:	461d      	mov	r5, r3
 800120a:	a387      	add	r3, pc, #540	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001214:	f7ff f9f0 	bl	80005f8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f834 	bl	800028c <__adddf3>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001230:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001234:	f7ff f9e0 	bl	80005f8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7ff f822 	bl	8000288 <__aeabi_dsub>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W); //0.952702703
 800124c:	a37e      	add	r3, pc, #504	@ (adr r3, 8001448 <Inverse_Kinematics+0x300>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001256:	f7ff f9cf 	bl	80005f8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4614      	mov	r4, r2
 8001260:	461d      	mov	r5, r3
 8001262:	a37b      	add	r3, pc, #492	@ (adr r3, 8001450 <Inverse_Kinematics+0x308>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800126c:	f7ff f9c4 	bl	80005f8 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f808 	bl	800028c <__adddf3>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4614      	mov	r4, r2
 8001282:	461d      	mov	r5, r3
 8001284:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001288:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800128c:	f7ff f9b4 	bl	80005f8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7fe fff6 	bl	8000288 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W); // 0.893632381
 80012a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8001458 <Inverse_Kinematics+0x310>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80012ae:	f7ff f9a3 	bl	80005f8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	a369      	add	r3, pc, #420	@ (adr r3, 8001460 <Inverse_Kinematics+0x318>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffdc 	bl	800028c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4614      	mov	r4, r2
 80012da:	461d      	mov	r5, r3
 80012dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7fe ffca 	bl	8000288 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 80012fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001306:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800130c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
 8001312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001316:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
 800131c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001326:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800132c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001336:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
 800133c:	ed97 1b08 	vldr	d1, [r7, #32]
 8001340:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001344:	f00e f803 	bl	800f34e <fmax>
 8001348:	eeb0 7a40 	vmov.f32	s14, s0
 800134c:	eef0 7a60 	vmov.f32	s15, s1
 8001350:	eeb0 1a47 	vmov.f32	s2, s14
 8001354:	eef0 1a67 	vmov.f32	s3, s15
 8001358:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800135c:	f00d fff7 	bl	800f34e <fmax>
 8001360:	eeb0 7a40 	vmov.f32	s14, s0
 8001364:	eef0 7a60 	vmov.f32	s15, s1
 8001368:	eeb0 1a47 	vmov.f32	s2, s14
 800136c:	eef0 1a67 	vmov.f32	s3, s15
 8001370:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001374:	f00d ffeb 	bl	800f34e <fmax>
 8001378:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

    if (maxM > wheelMaxSpeed) {
 800137c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001380:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001384:	f7ff fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d031      	beq.n	80013f2 <Inverse_Kinematics+0x2aa>
        double scale = wheelMaxSpeed / maxM;
 800138e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001392:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001396:	f7ff fa59 	bl	800084c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        M1 *= scale;
 80013a2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013a6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80013aa:	f7ff f925 	bl	80005f8 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 80013b6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013ba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80013be:	f7ff f91b 	bl	80005f8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 80013ca:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 80013de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80013e6:	f7ff f907 	bl	80005f8 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 80013f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001406:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800140a:	f7ff fb67 	bl	8000adc <__aeabi_dcmplt>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d035      	beq.n	8001480 <Inverse_Kinematics+0x338>
 8001414:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8001418:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800141c:	e058      	b.n	80014d0 <Inverse_Kinematics+0x388>
 800141e:	bf00      	nop
 8001420:	00000000 	.word	0x00000000
 8001424:	40b57c00 	.word	0x40b57c00
 8001428:	667f3bcc 	.word	0x667f3bcc
 800142c:	bfe6a09e 	.word	0xbfe6a09e
 8001430:	667f3bcd 	.word	0x667f3bcd
 8001434:	3fe6a09e 	.word	0x3fe6a09e
 8001438:	667f3bcd 	.word	0x667f3bcd
 800143c:	bfe6a09e 	.word	0xbfe6a09e
 8001440:	66666666 	.word	0x66666666
 8001444:	3ff66666 	.word	0x3ff66666
 8001448:	667f3bcc 	.word	0x667f3bcc
 800144c:	3fe6a09e 	.word	0x3fe6a09e
 8001450:	667f3bce 	.word	0x667f3bce
 8001454:	bfe6a09e 	.word	0xbfe6a09e
 8001458:	667f3bce 	.word	0x667f3bce
 800145c:	3fe6a09e 	.word	0x3fe6a09e
 8001460:	667f3bcb 	.word	0x667f3bcb
 8001464:	3fe6a09e 	.word	0x3fe6a09e
 8001468:	408f4000 	.word	0x408f4000
 800146c:	3ff40000 	.word	0x3ff40000
 8001470:	66666666 	.word	0x66666666
 8001474:	401e6666 	.word	0x401e6666
	...
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800148c:	f7ff fb26 	bl	8000adc <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <Inverse_Kinematics+0x360>
 8001496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800149a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800149c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014a6:	e013      	b.n	80014d0 <Inverse_Kinematics+0x388>
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014b4:	f7ff fb30 	bl	8000b18 <__aeabi_dcmpgt>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <Inverse_Kinematics+0x380>
 80014be:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80014c2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014c6:	e003      	b.n	80014d0 <Inverse_Kinematics+0x388>
 80014c8:	ed1f 7b15 	vldr	d7, [pc, #-84]	@ 8001478 <Inverse_Kinematics+0x330>
 80014cc:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014d0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80014d4:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80014d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ec:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80014f0:	f7ff faf4 	bl	8000adc <__aeabi_dcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <Inverse_Kinematics+0x3bc>
 80014fa:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 80014fe:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001502:	e027      	b.n	8001554 <Inverse_Kinematics+0x40c>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <Inverse_Kinematics+0x3e4>
 800151a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800151e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001524:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001528:	657b      	str	r3, [r7, #84]	@ 0x54
 800152a:	e013      	b.n	8001554 <Inverse_Kinematics+0x40c>
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001538:	f7ff faee 	bl	8000b18 <__aeabi_dcmpgt>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <Inverse_Kinematics+0x404>
 8001542:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001546:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800154a:	e003      	b.n	8001554 <Inverse_Kinematics+0x40c>
 800154c:	ed1f 7b36 	vldr	d7, [pc, #-216]	@ 8001478 <Inverse_Kinematics+0x330>
 8001550:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001554:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001558:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 800155c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001566:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001570:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001574:	f7ff fab2 	bl	8000adc <__aeabi_dcmplt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <Inverse_Kinematics+0x440>
 800157e:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 8001582:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001586:	e027      	b.n	80015d8 <Inverse_Kinematics+0x490>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001594:	f7ff faa2 	bl	8000adc <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <Inverse_Kinematics+0x468>
 800159e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015ae:	e013      	b.n	80015d8 <Inverse_Kinematics+0x490>
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015bc:	f7ff faac 	bl	8000b18 <__aeabi_dcmpgt>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <Inverse_Kinematics+0x488>
 80015c6:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80015ca:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015ce:	e003      	b.n	80015d8 <Inverse_Kinematics+0x490>
 80015d0:	ed1f 7b57 	vldr	d7, [pc, #-348]	@ 8001478 <Inverse_Kinematics+0x330>
 80015d4:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015d8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80015dc:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 80015e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80015ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80015f8:	f7ff fa70 	bl	8000adc <__aeabi_dcmplt>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <Inverse_Kinematics+0x4c4>
 8001602:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001606:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800160a:	e027      	b.n	800165c <Inverse_Kinematics+0x514>
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001618:	f7ff fa60 	bl	8000adc <__aeabi_dcmplt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <Inverse_Kinematics+0x4ec>
 8001622:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
 8001628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800162c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001630:	647b      	str	r3, [r7, #68]	@ 0x44
 8001632:	e013      	b.n	800165c <Inverse_Kinematics+0x514>
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001640:	f7ff fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <Inverse_Kinematics+0x50c>
 800164a:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 800164e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001652:	e003      	b.n	800165c <Inverse_Kinematics+0x514>
 8001654:	ed1f 7b78 	vldr	d7, [pc, #-480]	@ 8001478 <Inverse_Kinematics+0x330>
 8001658:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800165c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001660:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    setMotorSpeed(6, (int)V1);
 8001664:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001668:	f7ff fa76 	bl	8000b58 <__aeabi_d2iz>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff58 	bl	8000524 <__aeabi_i2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	ec43 2b10 	vmov	d0, r2, r3
 800167c:	2006      	movs	r0, #6
 800167e:	f7ff fced 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 8001682:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001686:	f7ff fa67 	bl	8000b58 <__aeabi_d2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff49 	bl	8000524 <__aeabi_i2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ec43 2b10 	vmov	d0, r2, r3
 800169a:	2005      	movs	r0, #5
 800169c:	f7ff fcde 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 80016a0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80016a4:	f7ff fa58 	bl	8000b58 <__aeabi_d2iz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	ec43 2b10 	vmov	d0, r2, r3
 80016b8:	2004      	movs	r0, #4
 80016ba:	f7ff fccf 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 80016be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016c2:	f7ff fa49 	bl	8000b58 <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ec43 2b10 	vmov	d0, r2, r3
 80016d6:	2008      	movs	r0, #8
 80016d8:	f7ff fcc0 	bl	800105c <setMotorSpeed>
}
 80016dc:	bf00      	nop
 80016de:	37e0      	adds	r7, #224	@ 0xe0
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	0000      	movs	r0, r0
	...

080016e8 <trying>:

void trying(double Vx, double Vy, double W, double desiredHeading, double KpH)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b0c6      	sub	sp, #280	@ 0x118
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
 80016f2:	ed87 1b1e 	vstr	d1, [r7, #120]	@ 0x78
 80016f6:	ed87 2b1c 	vstr	d2, [r7, #112]	@ 0x70
 80016fa:	ed87 3b1a 	vstr	d3, [r7, #104]	@ 0x68
 80016fe:	ed87 4b18 	vstr	d4, [r7, #96]	@ 0x60
	external_global currentPosition = odometry_eg();
 8001702:	f003 f8ed 	bl	80048e0 <odometry_eg>
 8001706:	eeb0 5a40 	vmov.f32	s10, s0
 800170a:	eef0 5a60 	vmov.f32	s11, s1
 800170e:	eeb0 6a41 	vmov.f32	s12, s2
 8001712:	eef0 6a61 	vmov.f32	s13, s3
 8001716:	eeb0 7a42 	vmov.f32	s14, s4
 800171a:	eef0 7a62 	vmov.f32	s15, s5
 800171e:	ed87 5b22 	vstr	d5, [r7, #136]	@ 0x88
 8001722:	ed87 6b24 	vstr	d6, [r7, #144]	@ 0x90
 8001726:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98

    double R = 7.6;
 800172a:	a3c8      	add	r3, pc, #800	@ (adr r3, 8001a4c <trying+0x364>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
    double minThreshold = 1000;
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4bbf      	ldr	r3, [pc, #764]	@ (8001a38 <trying+0x350>)
 800173a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
    double wheelMaxSpeed = 5500;
 800173e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80019f0 <trying+0x308>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8

    // Read current heading
    double yaw = currentPosition.h;
 8001748:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800174c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

    // Calculate heading error
    double headingError = desiredHeading - yaw;
 8001750:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8001754:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001758:	f7fe fd96 	bl	8000288 <__aeabi_dsub>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    if (headingError > 180) headingError -= 360;
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4bb4      	ldr	r3, [pc, #720]	@ (8001a3c <trying+0x354>)
 800176a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800176e:	f7ff f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00a      	beq.n	800178e <trying+0xa6>
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4bb0      	ldr	r3, [pc, #704]	@ (8001a40 <trying+0x358>)
 800177e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001782:	f7fe fd81 	bl	8000288 <__aeabi_dsub>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    if (headingError < -180) headingError += 360;
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4bac      	ldr	r3, [pc, #688]	@ (8001a44 <trying+0x35c>)
 8001794:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001798:	f7ff f9a0 	bl	8000adc <__aeabi_dcmplt>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <trying+0xd0>
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a40 <trying+0x358>)
 80017a8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80017ac:	f7fe fd6e 	bl	800028c <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

    // Adjust rotational speed based on heading error
    W += KpH * headingError; // KpH is a heading correction gain
 80017b8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80017bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80017c0:	f7fe ff1a 	bl	80005f8 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017cc:	f7fe fd5e 	bl	800028c <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double M1 = (-sin(M_PI_4) * Vx * 1.25 + cos(M_PI_4) * Vy - R * W);
 80017d8:	a387      	add	r3, pc, #540	@ (adr r3, 80019f8 <trying+0x310>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80017e2:	f7fe ff09 	bl	80005f8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b95      	ldr	r3, [pc, #596]	@ (8001a48 <trying+0x360>)
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	461d      	mov	r5, r3
 8001800:	a37f      	add	r3, pc, #508	@ (adr r3, 8001a00 <trying+0x318>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800180a:	f7fe fef5 	bl	80005f8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fd39 	bl	800028c <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	461d      	mov	r5, r3
 8001822:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001826:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fd27 	bl	8000288 <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
    double M2 = (-sin(3 * M_PI_4) * Vx * 1.4 + cos(3 * M_PI_4) * Vy - R * W);
 8001842:	a371      	add	r3, pc, #452	@ (adr r3, 8001a08 <trying+0x320>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800184c:	f7fe fed4 	bl	80005f8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	a36d      	add	r3, pc, #436	@ (adr r3, 8001a10 <trying+0x328>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fecb 	bl	80005f8 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	461d      	mov	r5, r3
 800186a:	a363      	add	r3, pc, #396	@ (adr r3, 80019f8 <trying+0x310>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001874:	f7fe fec0 	bl	80005f8 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fd04 	bl	800028c <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001890:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8001894:	f7fe feb0 	bl	80005f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fcf2 	bl	8000288 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 80018ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8001a18 <trying+0x330>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80018b6:	f7fe fe9f 	bl	80005f8 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4614      	mov	r4, r2
 80018c0:	461d      	mov	r5, r3
 80018c2:	a357      	add	r3, pc, #348	@ (adr r3, 8001a20 <trying+0x338>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80018cc:	f7fe fe94 	bl	80005f8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fcd8 	bl	800028c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018e8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80018ec:	f7fe fe84 	bl	80005f8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcc6 	bl	8000288 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 8001904:	a348      	add	r3, pc, #288	@ (adr r3, 8001a28 <trying+0x340>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800190e:	f7fe fe73 	bl	80005f8 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	461d      	mov	r5, r3
 800191a:	a345      	add	r3, pc, #276	@ (adr r3, 8001a30 <trying+0x348>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001924:	f7fe fe68 	bl	80005f8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fcac 	bl	800028c <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001940:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8001944:	f7fe fe58 	bl	80005f8 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fc9a 	bl	8000288 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 800195c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001966:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800196c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
 8001972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800197a:	637b      	str	r3, [r7, #52]	@ 0x34
 800197c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001986:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001996:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
 800199c:	ed97 1b08 	vldr	d1, [r7, #32]
 80019a0:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80019a4:	f00d fcd3 	bl	800f34e <fmax>
 80019a8:	eeb0 7a40 	vmov.f32	s14, s0
 80019ac:	eef0 7a60 	vmov.f32	s15, s1
 80019b0:	eeb0 1a47 	vmov.f32	s2, s14
 80019b4:	eef0 1a67 	vmov.f32	s3, s15
 80019b8:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80019bc:	f00d fcc7 	bl	800f34e <fmax>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	eeb0 1a47 	vmov.f32	s2, s14
 80019cc:	eef0 1a67 	vmov.f32	s3, s15
 80019d0:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80019d4:	f00d fcbb 	bl	800f34e <fmax>
 80019d8:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8

    if (maxM > wheelMaxSpeed) {
 80019dc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80019e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80019e4:	f7ff f898 	bl	8000b18 <__aeabi_dcmpgt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d068      	beq.n	8001ac0 <trying+0x3d8>
 80019ee:	e035      	b.n	8001a5c <trying+0x374>
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40b57c00 	.word	0x40b57c00
 80019f8:	667f3bcc 	.word	0x667f3bcc
 80019fc:	bfe6a09e 	.word	0xbfe6a09e
 8001a00:	667f3bcd 	.word	0x667f3bcd
 8001a04:	3fe6a09e 	.word	0x3fe6a09e
 8001a08:	667f3bcd 	.word	0x667f3bcd
 8001a0c:	bfe6a09e 	.word	0xbfe6a09e
 8001a10:	66666666 	.word	0x66666666
 8001a14:	3ff66666 	.word	0x3ff66666
 8001a18:	667f3bcc 	.word	0x667f3bcc
 8001a1c:	3fe6a09e 	.word	0x3fe6a09e
 8001a20:	667f3bce 	.word	0x667f3bce
 8001a24:	bfe6a09e 	.word	0xbfe6a09e
 8001a28:	667f3bce 	.word	0x667f3bce
 8001a2c:	3fe6a09e 	.word	0x3fe6a09e
 8001a30:	667f3bcb 	.word	0x667f3bcb
 8001a34:	3fe6a09e 	.word	0x3fe6a09e
 8001a38:	408f4000 	.word	0x408f4000
 8001a3c:	40668000 	.word	0x40668000
 8001a40:	40768000 	.word	0x40768000
 8001a44:	c0668000 	.word	0xc0668000
 8001a48:	3ff40000 	.word	0x3ff40000
 8001a4c:	66666666 	.word	0x66666666
 8001a50:	401e6666 	.word	0x401e6666
	...
        double scale = wheelMaxSpeed / maxM;
 8001a5c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8001a60:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001a64:	f7fe fef2 	bl	800084c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
        M1 *= scale;
 8001a70:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001a74:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001a78:	f7fe fdbe 	bl	80005f8 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        M2 *= scale;
 8001a84:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001a88:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001a8c:	f7fe fdb4 	bl	80005f8 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
        M3 *= scale;
 8001a98:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001a9c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
        M4 *= scale;
 8001aac:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001ab0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8001ab4:	f7fe fda0 	bl	80005f8 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 8001ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ad8:	f7ff f800 	bl	8000adc <__aeabi_dcmplt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <trying+0x404>
 8001ae2:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 8001ae6:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001aea:	e027      	b.n	8001b3c <trying+0x454>
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001af8:	f7fe fff0 	bl	8000adc <__aeabi_dcmplt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <trying+0x42c>
 8001b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b0c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b12:	e013      	b.n	8001b3c <trying+0x454>
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001b20:	f7fe fffa 	bl	8000b18 <__aeabi_dcmpgt>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <trying+0x44c>
 8001b2a:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001b2e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001b32:	e003      	b.n	8001b3c <trying+0x454>
 8001b34:	ed1f 7b39 	vldr	d7, [pc, #-228]	@ 8001a54 <trying+0x36c>
 8001b38:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001b3c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001b40:	ed87 7b2e 	vstr	d7, [r7, #184]	@ 0xb8
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 8001b44:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001b4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001b5c:	f7fe ffbe 	bl	8000adc <__aeabi_dcmplt>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <trying+0x488>
 8001b66:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 8001b6a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001b6e:	e027      	b.n	8001bc0 <trying+0x4d8>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001b7c:	f7fe ffae 	bl	8000adc <__aeabi_dcmplt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <trying+0x4b0>
 8001b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b90:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b94:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b96:	e013      	b.n	8001bc0 <trying+0x4d8>
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001ba4:	f7fe ffb8 	bl	8000b18 <__aeabi_dcmpgt>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <trying+0x4d0>
 8001bae:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001bb2:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001bb6:	e003      	b.n	8001bc0 <trying+0x4d8>
 8001bb8:	ed1f 7b5a 	vldr	d7, [pc, #-360]	@ 8001a54 <trying+0x36c>
 8001bbc:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001bc0:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001bc4:	ed87 7b2c 	vstr	d7, [r7, #176]	@ 0xb0
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 8001bc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001be0:	f7fe ff7c 	bl	8000adc <__aeabi_dcmplt>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <trying+0x50c>
 8001bea:	ed97 7b3e 	vldr	d7, [r7, #248]	@ 0xf8
 8001bee:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001bf2:	e027      	b.n	8001c44 <trying+0x55c>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001c00:	f7fe ff6c 	bl	8000adc <__aeabi_dcmplt>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <trying+0x534>
 8001c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c14:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c1a:	e013      	b.n	8001c44 <trying+0x55c>
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001c28:	f7fe ff76 	bl	8000b18 <__aeabi_dcmpgt>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <trying+0x554>
 8001c32:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001c36:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001c3a:	e003      	b.n	8001c44 <trying+0x55c>
 8001c3c:	ed1f 7b7b 	vldr	d7, [pc, #-492]	@ 8001a54 <trying+0x36c>
 8001c40:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001c44:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001c48:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 8001c4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c64:	f7fe ff3a 	bl	8000adc <__aeabi_dcmplt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <trying+0x590>
 8001c6e:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8001c72:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001c76:	e027      	b.n	8001cc8 <trying+0x5e0>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8001c84:	f7fe ff2a 	bl	8000adc <__aeabi_dcmplt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <trying+0x5b8>
 8001c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c98:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c9e:	e013      	b.n	8001cc8 <trying+0x5e0>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8001cac:	f7fe ff34 	bl	8000b18 <__aeabi_dcmpgt>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <trying+0x5d8>
 8001cb6:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001cba:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001cbe:	e003      	b.n	8001cc8 <trying+0x5e0>
 8001cc0:	ed1f 7b9c 	vldr	d7, [pc, #-624]	@ 8001a54 <trying+0x36c>
 8001cc4:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001cc8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001ccc:	ed87 7b28 	vstr	d7, [r7, #160]	@ 0xa0

    setMotorSpeed(6, (int)V1);
 8001cd0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001cd4:	f7fe ff40 	bl	8000b58 <__aeabi_d2iz>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc22 	bl	8000524 <__aeabi_i2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	ec43 2b10 	vmov	d0, r2, r3
 8001ce8:	2006      	movs	r0, #6
 8001cea:	f7ff f9b7 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 8001cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001cf2:	f7fe ff31 	bl	8000b58 <__aeabi_d2iz>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc13 	bl	8000524 <__aeabi_i2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ec43 2b10 	vmov	d0, r2, r3
 8001d06:	2005      	movs	r0, #5
 8001d08:	f7ff f9a8 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 8001d0c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001d10:	f7fe ff22 	bl	8000b58 <__aeabi_d2iz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc04 	bl	8000524 <__aeabi_i2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	ec43 2b10 	vmov	d0, r2, r3
 8001d24:	2004      	movs	r0, #4
 8001d26:	f7ff f999 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 8001d2a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001d2e:	f7fe ff13 	bl	8000b58 <__aeabi_d2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbf5 	bl	8000524 <__aeabi_i2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ec43 2b10 	vmov	d0, r2, r3
 8001d42:	2008      	movs	r0, #8
 8001d44:	f7ff f98a 	bl	800105c <setMotorSpeed>
}
 8001d48:	bf00      	nop
 8001d4a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	0000      	movs	r0, r0
	...

08001d58 <putar>:
    setMotorSpeed(4, (int)V3);
    setMotorSpeed(8, (int)V4);
}

void putar(int Vx, int Vy, int W)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	ed2d 8b02 	vpush	{d8}
 8001d5e:	b098      	sub	sp, #96	@ 0x60
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001d68:	f20f 534c 	addw	r3, pc, #1356	@ 0x54c
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
     int minSpeed = 650;
 8001d74:	f240 238a 	movw	r3, #650	@ 0x28a
 8001d78:	657b      	str	r3, [r7, #84]	@ 0x54
     int maxSpeed = 1000;
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	653b      	str	r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7fe fbcf 	bl	8000524 <__aeabi_i2d>
 8001d86:	f20f 5338 	addw	r3, pc, #1336	@ 0x538
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f7fe fc33 	bl	80005f8 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4614      	mov	r4, r2
 8001d98:	461d      	mov	r5, r3
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f7fe fbc2 	bl	8000524 <__aeabi_i2d>
 8001da0:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fa6a 	bl	800028c <__adddf3>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dca:	f7fe fc15 	bl	80005f8 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa57 	bl	8000288 <__aeabi_dsub>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7fe fb9e 	bl	8000524 <__aeabi_i2d>
 8001de8:	f20f 43e4 	addw	r3, pc, #1252	@ 0x4e4
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fc02 	bl	80005f8 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	68b8      	ldr	r0, [r7, #8]
 8001dfe:	f7fe fb91 	bl	8000524 <__aeabi_i2d>
 8001e02:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fbf5 	bl	80005f8 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fa39 	bl	800028c <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e2c:	f7fe fbe4 	bl	80005f8 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fa26 	bl	8000288 <__aeabi_dsub>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7fe fb6d 	bl	8000524 <__aeabi_i2d>
 8001e4a:	f20f 438c 	addw	r3, pc, #1164	@ 0x48c
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	68b8      	ldr	r0, [r7, #8]
 8001e60:	f7fe fb60 	bl	8000524 <__aeabi_i2d>
 8001e64:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa08 	bl	800028c <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe fb4d 	bl	8000524 <__aeabi_i2d>
 8001e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e8e:	f7fe fbb3 	bl	80005f8 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4620      	mov	r0, r4
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f7fe f9f5 	bl	8000288 <__aeabi_dsub>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7fe fb3c 	bl	8000524 <__aeabi_i2d>
 8001eac:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fba0 	bl	80005f8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	68b8      	ldr	r0, [r7, #8]
 8001ec2:	f7fe fb2f 	bl	8000524 <__aeabi_i2d>
 8001ec6:	f20f 4328 	addw	r3, pc, #1064	@ 0x428
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fb93 	bl	80005f8 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe f9d7 	bl	800028c <__adddf3>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fb1c 	bl	8000524 <__aeabi_i2d>
 8001eec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ef0:	f7fe fb82 	bl	80005f8 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe f9c4 	bl	8000288 <__aeabi_dsub>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > minSpeed || M1 < -minSpeed) ? fmin(fmax(M1, -maxSpeed), maxSpeed) : ((M1 < -0) ? -minSpeed : ((M1 > 0) ? minSpeed : 0));
 8001f08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f0a:	f7fe fb0b 	bl	8000524 <__aeabi_i2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f16:	f7fe fdff 	bl	8000b18 <__aeabi_dcmpgt>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <putar+0x1e4>
 8001f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f22:	425b      	negs	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fafd 	bl	8000524 <__aeabi_i2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f32:	f7fe fdd3 	bl	8000adc <__aeabi_dcmplt>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <putar+0x226>
 8001f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f3e:	425b      	negs	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	ec43 2b11 	vmov	d1, r2, r3
 8001f4e:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001f52:	f00d f9fc 	bl	800f34e <fmax>
 8001f56:	eeb0 8a40 	vmov.f32	s16, s0
 8001f5a:	eef0 8a60 	vmov.f32	s17, s1
 8001f5e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f60:	f7fe fae0 	bl	8000524 <__aeabi_i2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	ec43 2b11 	vmov	d1, r2, r3
 8001f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8001f70:	eef0 0a68 	vmov.f32	s1, s17
 8001f74:	f00d fa15 	bl	800f3a2 <fmin>
 8001f78:	ec53 2b10 	vmov	r2, r3, d0
 8001f7c:	e027      	b.n	8001fce <putar+0x276>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f8a:	f7fe fda7 	bl	8000adc <__aeabi_dcmplt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <putar+0x24c>
 8001f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f96:	425b      	negs	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fac3 	bl	8000524 <__aeabi_i2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	e014      	b.n	8001fce <putar+0x276>
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001fb0:	f7fe fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <putar+0x26e>
 8001fba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001fbc:	f7fe fab2 	bl	8000524 <__aeabi_i2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	e003      	b.n	8001fce <putar+0x276>
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
     double V2 = (M2 > minSpeed || M2 < -minSpeed) ? fmin(fmax(M2, -maxSpeed), maxSpeed) : ((M2 < -0) ? -minSpeed : ((M2 > 0) ? minSpeed : 0));
 8001fd2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001fd4:	f7fe faa6 	bl	8000524 <__aeabi_i2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001fe0:	f7fe fd9a 	bl	8000b18 <__aeabi_dcmpgt>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <putar+0x2ae>
 8001fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fec:	425b      	negs	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa98 	bl	8000524 <__aeabi_i2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ffc:	f7fe fd6e 	bl	8000adc <__aeabi_dcmplt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <putar+0x2f0>
 8002006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002008:	425b      	negs	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa8a 	bl	8000524 <__aeabi_i2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	ec43 2b11 	vmov	d1, r2, r3
 8002018:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 800201c:	f00d f997 	bl	800f34e <fmax>
 8002020:	eeb0 8a40 	vmov.f32	s16, s0
 8002024:	eef0 8a60 	vmov.f32	s17, s1
 8002028:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800202a:	f7fe fa7b 	bl	8000524 <__aeabi_i2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ec43 2b11 	vmov	d1, r2, r3
 8002036:	eeb0 0a48 	vmov.f32	s0, s16
 800203a:	eef0 0a68 	vmov.f32	s1, s17
 800203e:	f00d f9b0 	bl	800f3a2 <fmin>
 8002042:	ec53 2b10 	vmov	r2, r3, d0
 8002046:	e027      	b.n	8002098 <putar+0x340>
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002054:	f7fe fd42 	bl	8000adc <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <putar+0x316>
 800205e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002060:	425b      	negs	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa5e 	bl	8000524 <__aeabi_i2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e014      	b.n	8002098 <putar+0x340>
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800207a:	f7fe fd4d 	bl	8000b18 <__aeabi_dcmpgt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <putar+0x338>
 8002084:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002086:	f7fe fa4d 	bl	8000524 <__aeabi_i2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	e003      	b.n	8002098 <putar+0x340>
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9c7 2308 	strd	r2, r3, [r7, #32]
     double V3 = (M3 > minSpeed || M3 < -minSpeed) ? fmin(fmax(M3, -maxSpeed), maxSpeed) : ((M3 < -0) ? -minSpeed : ((M3 > 0) ? minSpeed : 0));
 800209c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800209e:	f7fe fa41 	bl	8000524 <__aeabi_i2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020aa:	f7fe fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <putar+0x378>
 80020b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b6:	425b      	negs	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa33 	bl	8000524 <__aeabi_i2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020c6:	f7fe fd09 	bl	8000adc <__aeabi_dcmplt>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <putar+0x3ba>
 80020d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020d2:	425b      	negs	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa25 	bl	8000524 <__aeabi_i2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	ec43 2b11 	vmov	d1, r2, r3
 80020e2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80020e6:	f00d f932 	bl	800f34e <fmax>
 80020ea:	eeb0 8a40 	vmov.f32	s16, s0
 80020ee:	eef0 8a60 	vmov.f32	s17, s1
 80020f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020f4:	f7fe fa16 	bl	8000524 <__aeabi_i2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	ec43 2b11 	vmov	d1, r2, r3
 8002100:	eeb0 0a48 	vmov.f32	s0, s16
 8002104:	eef0 0a68 	vmov.f32	s1, s17
 8002108:	f00d f94b 	bl	800f3a2 <fmin>
 800210c:	ec53 2b10 	vmov	r2, r3, d0
 8002110:	e027      	b.n	8002162 <putar+0x40a>
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800211e:	f7fe fcdd 	bl	8000adc <__aeabi_dcmplt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <putar+0x3e0>
 8002128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212a:	425b      	negs	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f9f9 	bl	8000524 <__aeabi_i2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	e014      	b.n	8002162 <putar+0x40a>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002144:	f7fe fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <putar+0x402>
 800214e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002150:	f7fe f9e8 	bl	8000524 <__aeabi_i2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	e003      	b.n	8002162 <putar+0x40a>
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9c7 2306 	strd	r2, r3, [r7, #24]
     double V4 = (M4 > minSpeed || M4 < -minSpeed) ? fmin(fmax(M4, -maxSpeed), maxSpeed) : ((M4 < -0) ? -minSpeed : ((M4 > 0) ? minSpeed : 0));
 8002166:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002168:	f7fe f9dc 	bl	8000524 <__aeabi_i2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002174:	f7fe fcd0 	bl	8000b18 <__aeabi_dcmpgt>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <putar+0x442>
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	425b      	negs	r3, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9ce 	bl	8000524 <__aeabi_i2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002190:	f7fe fca4 	bl	8000adc <__aeabi_dcmplt>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d020      	beq.n	80021dc <putar+0x484>
 800219a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219c:	425b      	negs	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9c0 	bl	8000524 <__aeabi_i2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	ec43 2b11 	vmov	d1, r2, r3
 80021ac:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80021b0:	f00d f8cd 	bl	800f34e <fmax>
 80021b4:	eeb0 8a40 	vmov.f32	s16, s0
 80021b8:	eef0 8a60 	vmov.f32	s17, s1
 80021bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80021be:	f7fe f9b1 	bl	8000524 <__aeabi_i2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	ec43 2b11 	vmov	d1, r2, r3
 80021ca:	eeb0 0a48 	vmov.f32	s0, s16
 80021ce:	eef0 0a68 	vmov.f32	s1, s17
 80021d2:	f00d f8e6 	bl	800f3a2 <fmin>
 80021d6:	ec53 2b10 	vmov	r2, r3, d0
 80021da:	e027      	b.n	800222c <putar+0x4d4>
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021e8:	f7fe fc78 	bl	8000adc <__aeabi_dcmplt>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <putar+0x4aa>
 80021f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f4:	425b      	negs	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f994 	bl	8000524 <__aeabi_i2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	e014      	b.n	800222c <putar+0x4d4>
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800220e:	f7fe fc83 	bl	8000b18 <__aeabi_dcmpgt>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <putar+0x4cc>
 8002218:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800221a:	f7fe f983 	bl	8000524 <__aeabi_i2d>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	e003      	b.n	800222c <putar+0x4d4>
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9c7 2304 	strd	r2, r3, [r7, #16]

     setMotorSpeed(6, (int)V1);
 8002230:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002234:	f7fe fc90 	bl	8000b58 <__aeabi_d2iz>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f972 	bl	8000524 <__aeabi_i2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	ec43 2b10 	vmov	d0, r2, r3
 8002248:	2006      	movs	r0, #6
 800224a:	f7fe ff07 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, (int)V2);
 800224e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002252:	f7fe fc81 	bl	8000b58 <__aeabi_d2iz>
 8002256:	4603      	mov	r3, r0
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f963 	bl	8000524 <__aeabi_i2d>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	ec43 2b10 	vmov	d0, r2, r3
 8002266:	2005      	movs	r0, #5
 8002268:	f7fe fef8 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, (int)V3);
 800226c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002270:	f7fe fc72 	bl	8000b58 <__aeabi_d2iz>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f954 	bl	8000524 <__aeabi_i2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	ec43 2b10 	vmov	d0, r2, r3
 8002284:	2004      	movs	r0, #4
 8002286:	f7fe fee9 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, (int)V4);
 800228a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800228e:	f7fe fc63 	bl	8000b58 <__aeabi_d2iz>
 8002292:	4603      	mov	r3, r0
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f945 	bl	8000524 <__aeabi_i2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	ec43 2b10 	vmov	d0, r2, r3
 80022a2:	2008      	movs	r0, #8
 80022a4:	f7fe feda 	bl	800105c <setMotorSpeed>
}
 80022a8:	bf00      	nop
 80022aa:	3760      	adds	r7, #96	@ 0x60
 80022ac:	46bd      	mov	sp, r7
 80022ae:	ecbd 8b02 	vpop	{d8}
 80022b2:	bdb0      	pop	{r4, r5, r7, pc}
 80022b4:	f3af 8000 	nop.w
 80022b8:	66666666 	.word	0x66666666
 80022bc:	401e6666 	.word	0x401e6666
 80022c0:	667f3bcc 	.word	0x667f3bcc
 80022c4:	bfe6a09e 	.word	0xbfe6a09e
 80022c8:	667f3bcd 	.word	0x667f3bcd
 80022cc:	3fe6a09e 	.word	0x3fe6a09e
 80022d0:	667f3bcd 	.word	0x667f3bcd
 80022d4:	bfe6a09e 	.word	0xbfe6a09e
 80022d8:	667f3bcc 	.word	0x667f3bcc
 80022dc:	3fe6a09e 	.word	0x3fe6a09e
 80022e0:	667f3bce 	.word	0x667f3bce
 80022e4:	bfe6a09e 	.word	0xbfe6a09e
 80022e8:	667f3bce 	.word	0x667f3bce
 80022ec:	3fe6a09e 	.word	0x3fe6a09e
 80022f0:	667f3bcb 	.word	0x667f3bcb
 80022f4:	3fe6a09e 	.word	0x3fe6a09e

080022f8 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	4603      	mov	r3, r0
 8002300:	460a      	mov	r2, r1
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	4613      	mov	r3, r2
 8002306:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	b2db      	uxtb	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4313      	orrs	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <lcd_write_nibble+0x7c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	b25a      	sxtb	r2, r3
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b25b      	sxtb	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	b2db      	uxtb	r3, r3
 8002336:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002338:	f107 020f 	add.w	r2, r7, #15
 800233c:	2364      	movs	r3, #100	@ 0x64
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	214e      	movs	r1, #78	@ 0x4e
 8002344:	480c      	ldr	r0, [pc, #48]	@ (8002378 <lcd_write_nibble+0x80>)
 8002346:	f005 fb67 	bl	8007a18 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f004 fe72 	bl	8007034 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	f023 0304 	bic.w	r3, r3, #4
 8002356:	b2db      	uxtb	r3, r3
 8002358:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 800235a:	f107 020f 	add.w	r2, r7, #15
 800235e:	2364      	movs	r3, #100	@ 0x64
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	214e      	movs	r1, #78	@ 0x4e
 8002366:	4804      	ldr	r0, [pc, #16]	@ (8002378 <lcd_write_nibble+0x80>)
 8002368:	f005 fb56 	bl	8007a18 <HAL_I2C_Master_Transmit>
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200000c8 	.word	0x200000c8
 8002378:	200002cc 	.word	0x200002cc

0800237c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ffad 	bl	80022f8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800239e:	7bbb      	ldrb	r3, [r7, #14]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ffa8 	bl	80022f8 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d002      	beq.n	80023b4 <lcd_send_cmd+0x38>
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d102      	bne.n	80023ba <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 80023b4:	2002      	movs	r0, #2
 80023b6:	f004 fe3d 	bl	8007034 <HAL_Delay>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2101      	movs	r1, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff8a 	bl	80022f8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80023e4:	7bbb      	ldrb	r3, [r7, #14]
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff85 	bl	80022f8 <lcd_write_nibble>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <lcd_init>:

void lcd_init()
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80023fa:	2032      	movs	r0, #50	@ 0x32
 80023fc:	f004 fe1a 	bl	8007034 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002400:	2100      	movs	r1, #0
 8002402:	2003      	movs	r0, #3
 8002404:	f7ff ff78 	bl	80022f8 <lcd_write_nibble>
  HAL_Delay(5);
 8002408:	2005      	movs	r0, #5
 800240a:	f004 fe13 	bl	8007034 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800240e:	2100      	movs	r1, #0
 8002410:	2003      	movs	r0, #3
 8002412:	f7ff ff71 	bl	80022f8 <lcd_write_nibble>
  HAL_Delay(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f004 fe0c 	bl	8007034 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800241c:	2100      	movs	r1, #0
 800241e:	2003      	movs	r0, #3
 8002420:	f7ff ff6a 	bl	80022f8 <lcd_write_nibble>
  HAL_Delay(1);
 8002424:	2001      	movs	r0, #1
 8002426:	f004 fe05 	bl	8007034 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 800242a:	2100      	movs	r1, #0
 800242c:	2002      	movs	r0, #2
 800242e:	f7ff ff63 	bl	80022f8 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8002432:	2028      	movs	r0, #40	@ 0x28
 8002434:	f7ff ffa2 	bl	800237c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8002438:	200c      	movs	r0, #12
 800243a:	f7ff ff9f 	bl	800237c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800243e:	2006      	movs	r0, #6
 8002440:	f7ff ff9c 	bl	800237c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8002444:	2001      	movs	r0, #1
 8002446:	f7ff ff99 	bl	800237c <lcd_send_cmd>
  HAL_Delay(2);
 800244a:	2002      	movs	r0, #2
 800244c:	f004 fdf2 	bl	8007034 <HAL_Delay>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  while (*str)
 800245c:	e006      	b.n	800246c <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ffab 	bl	80023c2 <lcd_send_data>
  while (*str)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f4      	bne.n	800245e <lcd_write_string+0xa>
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d816      	bhi.n	80024c4 <lcd_set_cursor+0x44>
 8002496:	a201      	add	r2, pc, #4	@ (adr r2, 800249c <lcd_set_cursor+0x1c>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024b3 	.word	0x080024b3
 80024a4:	080024b9 	.word	0x080024b9
 80024a8:	080024bf 	.word	0x080024bf
  {
  case 0:
    address = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
    break;
 80024b0:	e00a      	b.n	80024c8 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 80024b2:	2340      	movs	r3, #64	@ 0x40
 80024b4:	73fb      	strb	r3, [r7, #15]
    break;
 80024b6:	e007      	b.n	80024c8 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 80024b8:	2314      	movs	r3, #20
 80024ba:	73fb      	strb	r3, [r7, #15]
    break;
 80024bc:	e004      	b.n	80024c8 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 80024be:	2354      	movs	r3, #84	@ 0x54
 80024c0:	73fb      	strb	r3, [r7, #15]
    break;
 80024c2:	e001      	b.n	80024c8 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	4413      	add	r3, r2
 80024ce:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff4f 	bl	800237c <lcd_send_cmd>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop

080024e8 <lcd_clear>:

void lcd_clear(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff ff45 	bl	800237c <lcd_send_cmd>
  HAL_Delay(2);
 80024f2:	2002      	movs	r0, #2
 80024f4:	f004 fd9e 	bl	8007034 <HAL_Delay>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
movingState mode = VOID;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11d      	bne.n	8002548 <HAL_GPIO_EXTI_Callback+0x4c>
 800250c:	2108      	movs	r1, #8
 800250e:	488f      	ldr	r0, [pc, #572]	@ (800274c <HAL_GPIO_EXTI_Callback+0x250>)
 8002510:	f005 f8f4 	bl	80076fc <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d116      	bne.n	8002548 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 800251a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800251e:	488c      	ldr	r0, [pc, #560]	@ (8002750 <HAL_GPIO_EXTI_Callback+0x254>)
 8002520:	f005 f8ec 	bl	80076fc <HAL_GPIO_ReadPin>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_GPIO_EXTI_Callback+0x3a>
 800252a:	4b8a      	ldr	r3, [pc, #552]	@ (8002754 <HAL_GPIO_EXTI_Callback+0x258>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	4a88      	ldr	r2, [pc, #544]	@ (8002754 <HAL_GPIO_EXTI_Callback+0x258>)
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e004      	b.n	8002540 <HAL_GPIO_EXTI_Callback+0x44>
 8002536:	4b87      	ldr	r3, [pc, #540]	@ (8002754 <HAL_GPIO_EXTI_Callback+0x258>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	4a85      	ldr	r2, [pc, #532]	@ (8002754 <HAL_GPIO_EXTI_Callback+0x258>)
 800253e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8002540:	4b85      	ldr	r3, [pc, #532]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002542:	2208      	movs	r2, #8
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	e159      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d11c      	bne.n	8002588 <HAL_GPIO_EXTI_Callback+0x8c>
 800254e:	2102      	movs	r1, #2
 8002550:	4882      	ldr	r0, [pc, #520]	@ (800275c <HAL_GPIO_EXTI_Callback+0x260>)
 8002552:	f005 f8d3 	bl	80076fc <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d115      	bne.n	8002588 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 800255c:	2101      	movs	r1, #1
 800255e:	487f      	ldr	r0, [pc, #508]	@ (800275c <HAL_GPIO_EXTI_Callback+0x260>)
 8002560:	f005 f8cc 	bl	80076fc <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_GPIO_EXTI_Callback+0x7a>
 800256a:	4b7d      	ldr	r3, [pc, #500]	@ (8002760 <HAL_GPIO_EXTI_Callback+0x264>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3b01      	subs	r3, #1
 8002570:	4a7b      	ldr	r2, [pc, #492]	@ (8002760 <HAL_GPIO_EXTI_Callback+0x264>)
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e004      	b.n	8002580 <HAL_GPIO_EXTI_Callback+0x84>
 8002576:	4b7a      	ldr	r3, [pc, #488]	@ (8002760 <HAL_GPIO_EXTI_Callback+0x264>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a78      	ldr	r2, [pc, #480]	@ (8002760 <HAL_GPIO_EXTI_Callback+0x264>)
 800257e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8002580:	4b75      	ldr	r3, [pc, #468]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002582:	2202      	movs	r2, #2
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	e139      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b20      	cmp	r3, #32
 800258c:	d11c      	bne.n	80025c8 <HAL_GPIO_EXTI_Callback+0xcc>
 800258e:	2120      	movs	r1, #32
 8002590:	486e      	ldr	r0, [pc, #440]	@ (800274c <HAL_GPIO_EXTI_Callback+0x250>)
 8002592:	f005 f8b3 	bl	80076fc <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d115      	bne.n	80025c8 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 800259c:	2110      	movs	r1, #16
 800259e:	486b      	ldr	r0, [pc, #428]	@ (800274c <HAL_GPIO_EXTI_Callback+0x250>)
 80025a0:	f005 f8ac 	bl	80076fc <HAL_GPIO_ReadPin>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_EXTI_Callback+0xba>
 80025aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002764 <HAL_GPIO_EXTI_Callback+0x268>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	4a6c      	ldr	r2, [pc, #432]	@ (8002764 <HAL_GPIO_EXTI_Callback+0x268>)
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_EXTI_Callback+0xc4>
 80025b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002764 <HAL_GPIO_EXTI_Callback+0x268>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a69      	ldr	r2, [pc, #420]	@ (8002764 <HAL_GPIO_EXTI_Callback+0x268>)
 80025be:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 80025c0:	4b65      	ldr	r3, [pc, #404]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025c2:	2220      	movs	r2, #32
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	e119      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d11c      	bne.n	8002608 <HAL_GPIO_EXTI_Callback+0x10c>
 80025ce:	2104      	movs	r1, #4
 80025d0:	4862      	ldr	r0, [pc, #392]	@ (800275c <HAL_GPIO_EXTI_Callback+0x260>)
 80025d2:	f005 f893 	bl	80076fc <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d115      	bne.n	8002608 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 80025dc:	2108      	movs	r1, #8
 80025de:	485f      	ldr	r0, [pc, #380]	@ (800275c <HAL_GPIO_EXTI_Callback+0x260>)
 80025e0:	f005 f88c 	bl	80076fc <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_EXTI_Callback+0xfa>
 80025ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002768 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002768 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_EXTI_Callback+0x104>
 80025f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002768 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002768 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025fe:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8002600:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002602:	2204      	movs	r2, #4
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	e0f9      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d11c      	bne.n	8002648 <HAL_GPIO_EXTI_Callback+0x14c>
 800260e:	2101      	movs	r1, #1
 8002610:	484f      	ldr	r0, [pc, #316]	@ (8002750 <HAL_GPIO_EXTI_Callback+0x254>)
 8002612:	f005 f873 	bl	80076fc <HAL_GPIO_ReadPin>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	d115      	bne.n	8002648 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 800261c:	2102      	movs	r1, #2
 800261e:	484c      	ldr	r0, [pc, #304]	@ (8002750 <HAL_GPIO_EXTI_Callback+0x254>)
 8002620:	f005 f86c 	bl	80076fc <HAL_GPIO_ReadPin>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_EXTI_Callback+0x13a>
 800262a:	4b50      	ldr	r3, [pc, #320]	@ (800276c <HAL_GPIO_EXTI_Callback+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	4a4e      	ldr	r2, [pc, #312]	@ (800276c <HAL_GPIO_EXTI_Callback+0x270>)
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e004      	b.n	8002640 <HAL_GPIO_EXTI_Callback+0x144>
 8002636:	4b4d      	ldr	r3, [pc, #308]	@ (800276c <HAL_GPIO_EXTI_Callback+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a4b      	ldr	r2, [pc, #300]	@ (800276c <HAL_GPIO_EXTI_Callback+0x270>)
 800263e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8002640:	4b45      	ldr	r3, [pc, #276]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002642:	2201      	movs	r2, #1
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	e0d9      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264e:	d11f      	bne.n	8002690 <HAL_GPIO_EXTI_Callback+0x194>
 8002650:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002654:	4846      	ldr	r0, [pc, #280]	@ (8002770 <HAL_GPIO_EXTI_Callback+0x274>)
 8002656:	f005 f851 	bl	80076fc <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d117      	bne.n	8002690 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8002660:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002664:	4842      	ldr	r0, [pc, #264]	@ (8002770 <HAL_GPIO_EXTI_Callback+0x274>)
 8002666:	f005 f849 	bl	80076fc <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_GPIO_EXTI_Callback+0x180>
 8002670:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <HAL_GPIO_EXTI_Callback+0x278>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	4a3f      	ldr	r2, [pc, #252]	@ (8002774 <HAL_GPIO_EXTI_Callback+0x278>)
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e004      	b.n	8002686 <HAL_GPIO_EXTI_Callback+0x18a>
 800267c:	4b3d      	ldr	r3, [pc, #244]	@ (8002774 <HAL_GPIO_EXTI_Callback+0x278>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3b01      	subs	r3, #1
 8002682:	4a3c      	ldr	r2, [pc, #240]	@ (8002774 <HAL_GPIO_EXTI_Callback+0x278>)
 8002684:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8002686:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002688:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800268c:	615a      	str	r2, [r3, #20]
 800268e:	e0b5      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002696:	d11f      	bne.n	80026d8 <HAL_GPIO_EXTI_Callback+0x1dc>
 8002698:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800269c:	482c      	ldr	r0, [pc, #176]	@ (8002750 <HAL_GPIO_EXTI_Callback+0x254>)
 800269e:	f005 f82d 	bl	80076fc <HAL_GPIO_ReadPin>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d117      	bne.n	80026d8 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 80026a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026ac:	4828      	ldr	r0, [pc, #160]	@ (8002750 <HAL_GPIO_EXTI_Callback+0x254>)
 80026ae:	f005 f825 	bl	80076fc <HAL_GPIO_ReadPin>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_GPIO_EXTI_Callback+0x1c8>
 80026b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x27c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3b01      	subs	r3, #1
 80026be:	4a2e      	ldr	r2, [pc, #184]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x27c>)
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e004      	b.n	80026ce <HAL_GPIO_EXTI_Callback+0x1d2>
 80026c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x27c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x27c>)
 80026cc:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 80026d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026d4:	615a      	str	r2, [r3, #20]
 80026d6:	e091      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	2b40      	cmp	r3, #64	@ 0x40
 80026dc:	d117      	bne.n	800270e <HAL_GPIO_EXTI_Callback+0x212>
 80026de:	2140      	movs	r1, #64	@ 0x40
 80026e0:	481b      	ldr	r0, [pc, #108]	@ (8002750 <HAL_GPIO_EXTI_Callback+0x254>)
 80026e2:	f005 f80b 	bl	80076fc <HAL_GPIO_ReadPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d110      	bne.n	800270e <HAL_GPIO_EXTI_Callback+0x212>
	{
		mode = mode + RED_STEP;
 80026ec:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b21      	ldr	r3, [pc, #132]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 80026f6:	701a      	strb	r2, [r3, #0]
		if(mode > RED_STEP)
 80026f8:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d902      	bls.n	8002706 <HAL_GPIO_EXTI_Callback+0x20a>
		{
			mode = VOID;
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 8002706:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002708:	2240      	movs	r2, #64	@ 0x40
 800270a:	615a      	str	r2, [r3, #20]
 800270c:	e076      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002714:	d136      	bne.n	8002784 <HAL_GPIO_EXTI_Callback+0x288>
 8002716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800271a:	4819      	ldr	r0, [pc, #100]	@ (8002780 <HAL_GPIO_EXTI_Callback+0x284>)
 800271c:	f004 ffee 	bl	80076fc <HAL_GPIO_ReadPin>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d12e      	bne.n	8002784 <HAL_GPIO_EXTI_Callback+0x288>
	{
		mode = mode + RED_RETRY;
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	3306      	adds	r3, #6
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b13      	ldr	r3, [pc, #76]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 8002730:	701a      	strb	r2, [r3, #0]
		if(mode > RED_RETRY)
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <HAL_GPIO_EXTI_Callback+0x244>
		{
			mode = VOID;
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002746:	615a      	str	r2, [r3, #20]
 8002748:	e058      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
 800274a:	bf00      	nop
 800274c:	40020400 	.word	0x40020400
 8002750:	40020000 	.word	0x40020000
 8002754:	200004d0 	.word	0x200004d0
 8002758:	40013c00 	.word	0x40013c00
 800275c:	40020800 	.word	0x40020800
 8002760:	200004d4 	.word	0x200004d4
 8002764:	200004d8 	.word	0x200004d8
 8002768:	200004dc 	.word	0x200004dc
 800276c:	200004e0 	.word	0x200004e0
 8002770:	40020c00 	.word	0x40020c00
 8002774:	200004e4 	.word	0x200004e4
 8002778:	200004e8 	.word	0x200004e8
 800277c:	20000610 	.word	0x20000610
 8002780:	40021000 	.word	0x40021000
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278a:	d119      	bne.n	80027c0 <HAL_GPIO_EXTI_Callback+0x2c4>
 800278c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002790:	481c      	ldr	r0, [pc, #112]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x308>)
 8002792:	f004 ffb3 	bl	80076fc <HAL_GPIO_ReadPin>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d111      	bne.n	80027c0 <HAL_GPIO_EXTI_Callback+0x2c4>
	{
		mode = mode + BLUE_STEP;
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	330b      	adds	r3, #11
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 80027a6:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP)
 80027a8:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b0b      	cmp	r3, #11
 80027ae:	d902      	bls.n	80027b6 <HAL_GPIO_EXTI_Callback+0x2ba>
		{
			mode = VOID;
 80027b0:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_GPIO_EXTI_Callback+0x310>)
 80027b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027bc:	615a      	str	r2, [r3, #20]
 80027be:	e01d      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027c6:	d119      	bne.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
 80027c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027cc:	4810      	ldr	r0, [pc, #64]	@ (8002810 <HAL_GPIO_EXTI_Callback+0x314>)
 80027ce:	f004 ff95 	bl	80076fc <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
	{
		mode = mode + BLUE_RETRY;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3310      	adds	r3, #16
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 80027e2:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_RETRY)
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d902      	bls.n	80027f2 <HAL_GPIO_EXTI_Callback+0x2f6>
		{
			mode = VOID;
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_GPIO_EXTI_Callback+0x310>)
 80027f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027f8:	615a      	str	r2, [r3, #20]
	}
}
 80027fa:	e7ff      	b.n	80027fc <HAL_GPIO_EXTI_Callback+0x300>
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	20000610 	.word	0x20000610
 800280c:	40013c00 	.word	0x40013c00
 8002810:	40020400 	.word	0x40020400
 8002814:	00000000 	.word	0x00000000

08002818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	f5ad 6ded 	sub.w	sp, sp, #1896	@ 0x768
 8002820:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002822:	f004 fb95 	bl	8006f50 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002826:	f001 fa33 	bl	8003c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800282a:	f001 fd51 	bl	80042d0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800282e:	f001 fa99 	bl	8003d64 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002832:	f001 fac5 	bl	8003dc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002836:	f001 fb87 	bl	8003f48 <MX_TIM2_Init>
  MX_TIM8_Init();
 800283a:	f001 fc07 	bl	800404c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800283e:	f001 fcc9 	bl	80041d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002842:	f001 fcf1 	bl	8004228 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002846:	f001 fd19 	bl	800427c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800284a:	2100      	movs	r1, #0
 800284c:	48cd      	ldr	r0, [pc, #820]	@ (8002b84 <main+0x36c>)
 800284e:	f006 f97d 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <main+0x44>
  {
	  Error_Handler();
 8002858:	f002 f81e 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800285c:	2104      	movs	r1, #4
 800285e:	48c9      	ldr	r0, [pc, #804]	@ (8002b84 <main+0x36c>)
 8002860:	f006 f974 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <main+0x56>
  {
	  Error_Handler();
 800286a:	f002 f815 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK)
 800286e:	2108      	movs	r1, #8
 8002870:	48c4      	ldr	r0, [pc, #784]	@ (8002b84 <main+0x36c>)
 8002872:	f006 f96b 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <main+0x68>
  {
	  Error_Handler();
 800287c:	f002 f80c 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8002880:	210c      	movs	r1, #12
 8002882:	48c0      	ldr	r0, [pc, #768]	@ (8002b84 <main+0x36c>)
 8002884:	f006 f962 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <main+0x7a>
  {
	  Error_Handler();
 800288e:	f002 f803 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1) != HAL_OK)
 8002892:	2100      	movs	r1, #0
 8002894:	48bc      	ldr	r0, [pc, #752]	@ (8002b88 <main+0x370>)
 8002896:	f006 f959 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <main+0x8c>
  {
	  Error_Handler();
 80028a0:	f001 fffa 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2) != HAL_OK)
 80028a4:	2104      	movs	r1, #4
 80028a6:	48b8      	ldr	r0, [pc, #736]	@ (8002b88 <main+0x370>)
 80028a8:	f006 f950 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <main+0x9e>
  {
	  Error_Handler();
 80028b2:	f001 fff1 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3) != HAL_OK)
 80028b6:	2108      	movs	r1, #8
 80028b8:	48b3      	ldr	r0, [pc, #716]	@ (8002b88 <main+0x370>)
 80028ba:	f006 f947 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <main+0xb0>
  {
	  Error_Handler();
 80028c4:	f001 ffe8 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4) != HAL_OK)
 80028c8:	210c      	movs	r1, #12
 80028ca:	48af      	ldr	r0, [pc, #700]	@ (8002b88 <main+0x370>)
 80028cc:	f006 f93e 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <main+0xc2>
  {
	  Error_Handler();
 80028d6:	f001 ffdf 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK)
 80028da:	2108      	movs	r1, #8
 80028dc:	48ab      	ldr	r0, [pc, #684]	@ (8002b8c <main+0x374>)
 80028de:	f006 f935 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <main+0xd4>
  {
	  Error_Handler();
 80028e8:	f001 ffd6 	bl	8004898 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 80028ec:	210c      	movs	r1, #12
 80028ee:	48a7      	ldr	r0, [pc, #668]	@ (8002b8c <main+0x374>)
 80028f0:	f006 f92c 	bl	8008b4c <HAL_TIM_PWM_Start_IT>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <main+0xe6>
  {
	  Error_Handler();
 80028fa:	f001 ffcd 	bl	8004898 <Error_Handler>
  }

  if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 80028fe:	2201      	movs	r2, #1
 8002900:	49a3      	ldr	r1, [pc, #652]	@ (8002b90 <main+0x378>)
 8002902:	48a4      	ldr	r0, [pc, #656]	@ (8002b94 <main+0x37c>)
 8002904:	f007 f932 	bl	8009b6c <HAL_UART_Receive_IT>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <main+0xfa>
  {
	  Error_Handler();
 800290e:	f001 ffc3 	bl	8004898 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 8002912:	2201      	movs	r2, #1
 8002914:	49a0      	ldr	r1, [pc, #640]	@ (8002b98 <main+0x380>)
 8002916:	48a1      	ldr	r0, [pc, #644]	@ (8002b9c <main+0x384>)
 8002918:	f007 f928 	bl	8009b6c <HAL_UART_Receive_IT>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <main+0x10e>
  {
	  Error_Handler();
 8002922:	f001 ffb9 	bl	8004898 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 8002926:	2201      	movs	r2, #1
 8002928:	499d      	ldr	r1, [pc, #628]	@ (8002ba0 <main+0x388>)
 800292a:	489e      	ldr	r0, [pc, #632]	@ (8002ba4 <main+0x38c>)
 800292c:	f007 f91e 	bl	8009b6c <HAL_UART_Receive_IT>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <main+0x122>
  {
	  Error_Handler();
 8002936:	f001 ffaf 	bl	8004898 <Error_Handler>
  }

  initializeSilos();
 800293a:	f003 f885 	bl	8005a48 <initializeSilos>

  external_global red_step[3] = {
 800293e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ba8 <main+0x390>)
 8002940:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 8002944:	4611      	mov	r1, r2
 8002946:	2248      	movs	r2, #72	@ 0x48
 8002948:	4618      	mov	r0, r3
 800294a:	f009 ff54 	bl	800c7f6 <memcpy>
		  {0.0, 6200.0, 0.0},
		  {3750.0, 6200.0, 0.0},
		  {3750.0, 9500.0, 0.0}
  };
  external_global red_storage = {1100.0, 9500.0, 0.0};
 800294e:	4b97      	ldr	r3, [pc, #604]	@ (8002bac <main+0x394>)
 8002950:	f507 64dc 	add.w	r4, r7, #1760	@ 0x6e0
 8002954:	461d      	mov	r5, r3
 8002956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800295e:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_silo = {3700.0, 9500.0, 90.0};
 8002962:	4b93      	ldr	r3, [pc, #588]	@ (8002bb0 <main+0x398>)
 8002964:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8002968:	461d      	mov	r5, r3
 800296a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002972:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_throwBall = {1100.0, 8500.0, -179.0};
 8002976:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb4 <main+0x39c>)
 8002978:	f507 64d6 	add.w	r4, r7, #1712	@ 0x6b0
 800297c:	461d      	mov	r5, r3
 800297e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002982:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002986:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global redBall[3] = {
 800298a:	4a8b      	ldr	r2, [pc, #556]	@ (8002bb8 <main+0x3a0>)
 800298c:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 8002990:	4611      	mov	r1, r2
 8002992:	2248      	movs	r2, #72	@ 0x48
 8002994:	4618      	mov	r0, r3
 8002996:	f009 ff2e 	bl	800c7f6 <memcpy>
		  {1150.0, 9500.0, -90.0},
		  {1150.0, 10500.0, -179.0},
		  {1150.0, 8500.0, 0.0}
  };

  external_global red_retry[4] = {
 800299a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800299e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80029a2:	4a86      	ldr	r2, [pc, #536]	@ (8002bbc <main+0x3a4>)
 80029a4:	4618      	mov	r0, r3
 80029a6:	4611      	mov	r1, r2
 80029a8:	2360      	movs	r3, #96	@ 0x60
 80029aa:	461a      	mov	r2, r3
 80029ac:	f009 ff23 	bl	800c7f6 <memcpy>
		  {500.0, 0.0, 0.0},
		  {500.0, 1000.0, 0.0},
		  {3830.0, 1000.0, 0.0},
		  {3830.0, 4300.0, 0.0}
  };
  external_global red_retry_storage = {1100.0, 4300.0, 0.0};
 80029b0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80029b4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029b8:	4a81      	ldr	r2, [pc, #516]	@ (8002bc0 <main+0x3a8>)
 80029ba:	461c      	mov	r4, r3
 80029bc:	4615      	mov	r5, r2
 80029be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029c6:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_retry_silo = {3750.0, 4300.0, 90.0};
 80029ca:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80029ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029d2:	4a7c      	ldr	r2, [pc, #496]	@ (8002bc4 <main+0x3ac>)
 80029d4:	461c      	mov	r4, r3
 80029d6:	4615      	mov	r5, r2
 80029d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029e0:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_retry_throwBall = {1100.0, 3300.0, -179.0};
 80029e4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80029e8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80029ec:	4a76      	ldr	r2, [pc, #472]	@ (8002bc8 <main+0x3b0>)
 80029ee:	461c      	mov	r4, r3
 80029f0:	4615      	mov	r5, r2
 80029f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029fa:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global redRetryBall[3] = {
 80029fe:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a02:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a06:	4a71      	ldr	r2, [pc, #452]	@ (8002bcc <main+0x3b4>)
 8002a08:	4618      	mov	r0, r3
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	2348      	movs	r3, #72	@ 0x48
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f009 fef1 	bl	800c7f6 <memcpy>
		  {1650.0, 3300.0, 0.0}
  };



  external_global blue_step[3] = {
 8002a14:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a18:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8002a1c:	4a6c      	ldr	r2, [pc, #432]	@ (8002bd0 <main+0x3b8>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	4611      	mov	r1, r2
 8002a22:	2348      	movs	r3, #72	@ 0x48
 8002a24:	461a      	mov	r2, r3
 8002a26:	f009 fee6 	bl	800c7f6 <memcpy>
		  {0.0, 6200.0, 0.0},
		  {-3750.0, 6200.0, 0.0},
		  {-3750.0, 9500.0, 0.0}
  };
  external_global blue_storage = {-1100.0, 9500.0, 0.0};
 8002a2a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a2e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002a32:	4a68      	ldr	r2, [pc, #416]	@ (8002bd4 <main+0x3bc>)
 8002a34:	461c      	mov	r4, r3
 8002a36:	4615      	mov	r5, r2
 8002a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a40:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_silo = {-3700.0, 9500.0, 90.0};
 8002a44:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a48:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002a4c:	4a62      	ldr	r2, [pc, #392]	@ (8002bd8 <main+0x3c0>)
 8002a4e:	461c      	mov	r4, r3
 8002a50:	4615      	mov	r5, r2
 8002a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a5a:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_throwBall = {-1100.0, 8500.0, -179.0};
 8002a5e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a62:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002a66:	4a5d      	ldr	r2, [pc, #372]	@ (8002bdc <main+0x3c4>)
 8002a68:	461c      	mov	r4, r3
 8002a6a:	4615      	mov	r5, r2
 8002a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a74:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global blueBall[3] = {
 8002a78:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a7c:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002a80:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <main+0x3c8>)
 8002a82:	4618      	mov	r0, r3
 8002a84:	4611      	mov	r1, r2
 8002a86:	2348      	movs	r3, #72	@ 0x48
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f009 feb4 	bl	800c7f6 <memcpy>
		  {-1150.0, 9500.0, -90.0},
		  {-1150.0, 10500.0, -179.0},
		  {-1150.0, 8500.0, 0.0}
  };

  external_global blue_retry[4] = {
 8002a8e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a92:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002a96:	4a53      	ldr	r2, [pc, #332]	@ (8002be4 <main+0x3cc>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	2360      	movs	r3, #96	@ 0x60
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f009 fea9 	bl	800c7f6 <memcpy>
		  {-500.0, 0.0, 0.0},
		  {-500.0, 1000.0, 0.0},
		  {-3830.0, 1000.0, 0.0},
		  {-3830.0, 4300.0, 0.0}
  };
  external_global blue_retry_storage = {-1100.0, 4300.0, 0.0};
 8002aa4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002aa8:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002aac:	4a4e      	ldr	r2, [pc, #312]	@ (8002be8 <main+0x3d0>)
 8002aae:	461c      	mov	r4, r3
 8002ab0:	4615      	mov	r5, r2
 8002ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ab6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002aba:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_retry_silo = {-3750.0, 4300.0, 90.0};
 8002abe:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002ac2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002ac6:	4a49      	ldr	r2, [pc, #292]	@ (8002bec <main+0x3d4>)
 8002ac8:	461c      	mov	r4, r3
 8002aca:	4615      	mov	r5, r2
 8002acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ad4:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_retry_throwBall = {-1100.0, 3300.0, -179.0};
 8002ad8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002adc:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002ae0:	4a43      	ldr	r2, [pc, #268]	@ (8002bf0 <main+0x3d8>)
 8002ae2:	461c      	mov	r4, r3
 8002ae4:	4615      	mov	r5, r2
 8002ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002aee:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global blueRetryBall[3] = {
 8002af2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002af6:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002afa:	4a3e      	ldr	r2, [pc, #248]	@ (8002bf4 <main+0x3dc>)
 8002afc:	4618      	mov	r0, r3
 8002afe:	4611      	mov	r1, r2
 8002b00:	2348      	movs	r3, #72	@ 0x48
 8002b02:	461a      	mov	r2, r3
 8002b04:	f009 fe77 	bl	800c7f6 <memcpy>
		  {-1650.0, 3300.0, 0.0}
  };



  external_global tes = {0.0, 0.0, 0.0};
 8002b08:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b0c:	f5a3 7172 	sub.w	r1, r3, #968	@ 0x3c8
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9c1 2300 	strd	r2, r3, [r1]
 8002b1c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b20:	f5a3 7172 	sub.w	r1, r3, #968	@ 0x3c8
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002b30:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b34:	f5a3 7172 	sub.w	r1, r3, #968	@ 0x3c8
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9c1 2304 	strd	r2, r3, [r1, #16]
	double smoothingFactor;
	int maxVelocity;
	double xyTolerance;
	double hTolerance;
   */
  PID_parameter red_step_parameters[3] = {
 8002b44:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b48:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <main+0x3e0>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4611      	mov	r1, r2
 8002b52:	23c0      	movs	r3, #192	@ 0xc0
 8002b54:	461a      	mov	r2, r3
 8002b56:	f009 fe4e 	bl	800c7f6 <memcpy>
		  {1.25, 0.0, 0.0, 2.5, 0.8, 3000, 200, 2},
		  {1.8, 0.0, 0.0, 3.5, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.5, 0.8, 3500, 200, 5}
  };

  PID_parameter red_retry_parameters[4] = {
 8002b5a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b5e:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8002b62:	4a26      	ldr	r2, [pc, #152]	@ (8002bfc <main+0x3e4>)
 8002b64:	4618      	mov	r0, r3
 8002b66:	4611      	mov	r1, r2
 8002b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f009 fe42 	bl	800c7f6 <memcpy>
		  {2.6, 0.0, 0.0, 2.5, 0.75, 2500, 200, 2},
		  {1.8, 0.0, 0.0, 3.0, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.8, 0.8, 3500, 200, 5}
  };

  uint16_t red_step_numPoints = sizeof(red_step) / sizeof(red_step[0]);
 8002b72:	2303      	movs	r3, #3
 8002b74:	f8a7 375e 	strh.w	r3, [r7, #1886]	@ 0x75e
  uint16_t red_retry_numPoints = sizeof(red_retry) / sizeof(red_retry[0]);
 8002b78:	2304      	movs	r3, #4
 8002b7a:	f8a7 375c 	strh.w	r3, [r7, #1884]	@ 0x75c



  PID_parameter blue_step_parameters[3] = {
 8002b7e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b82:	e03d      	b.n	8002c00 <main+0x3e8>
 8002b84:	20000320 	.word	0x20000320
 8002b88:	200003b0 	.word	0x200003b0
 8002b8c:	20000368 	.word	0x20000368
 8002b90:	200004ec 	.word	0x200004ec
 8002b94:	200003f8 	.word	0x200003f8
 8002b98:	20000540 	.word	0x20000540
 8002b9c:	20000440 	.word	0x20000440
 8002ba0:	200005c4 	.word	0x200005c4
 8002ba4:	20000488 	.word	0x20000488
 8002ba8:	08010cb8 	.word	0x08010cb8
 8002bac:	08010d00 	.word	0x08010d00
 8002bb0:	08010d18 	.word	0x08010d18
 8002bb4:	08010d30 	.word	0x08010d30
 8002bb8:	08010d48 	.word	0x08010d48
 8002bbc:	08010d90 	.word	0x08010d90
 8002bc0:	08010df0 	.word	0x08010df0
 8002bc4:	08010e08 	.word	0x08010e08
 8002bc8:	08010e20 	.word	0x08010e20
 8002bcc:	08010e38 	.word	0x08010e38
 8002bd0:	08010e80 	.word	0x08010e80
 8002bd4:	08010ec8 	.word	0x08010ec8
 8002bd8:	08010ee0 	.word	0x08010ee0
 8002bdc:	08010ef8 	.word	0x08010ef8
 8002be0:	08010f10 	.word	0x08010f10
 8002be4:	08010f58 	.word	0x08010f58
 8002be8:	08010fb8 	.word	0x08010fb8
 8002bec:	08010fd0 	.word	0x08010fd0
 8002bf0:	08010fe8 	.word	0x08010fe8
 8002bf4:	08011000 	.word	0x08011000
 8002bf8:	08011048 	.word	0x08011048
 8002bfc:	08011108 	.word	0x08011108
 8002c00:	f5a3 63c9 	sub.w	r3, r3, #1608	@ 0x648
 8002c04:	4af4      	ldr	r2, [pc, #976]	@ (8002fd8 <main+0x7c0>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	4611      	mov	r1, r2
 8002c0a:	23c0      	movs	r3, #192	@ 0xc0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f009 fdf2 	bl	800c7f6 <memcpy>
		  {1.25, 0.0, 0.0, 2.5, 0.8, 3000, 200, 2},
		  {1.8, 0.0, 0.0, 3.5, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.5, 0.8, 3500, 200, 5}
  };

  PID_parameter blue_retry_parameters[4] = {
 8002c12:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002c16:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8002c1a:	4af0      	ldr	r2, [pc, #960]	@ (8002fdc <main+0x7c4>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	4611      	mov	r1, r2
 8002c20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c24:	461a      	mov	r2, r3
 8002c26:	f009 fde6 	bl	800c7f6 <memcpy>
		  {2.6, 0.0, 0.0, 2.5, 0.75, 2500, 200, 2},
		  {1.8, 0.0, 0.0, 3.0, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.8, 0.8, 3500, 200, 5}
  };

  uint16_t blue_step_numPoints = sizeof(blue_step) / sizeof(blue_step[0]);
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
  uint16_t blue_retry_numPoints = sizeof(blue_retry) / sizeof(blue_retry[0]);
 8002c30:	2304      	movs	r3, #4
 8002c32:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 8002c36:	f7ff fbde 	bl	80023f6 <lcd_init>

	  int FL_distance = sensorMEGA[0];
 8002c3a:	4be9      	ldr	r3, [pc, #932]	@ (8002fe0 <main+0x7c8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
	  int FR_distance = sensorMEGA[2];
 8002c42:	4be7      	ldr	r3, [pc, #924]	@ (8002fe0 <main+0x7c8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f8c7 3750 	str.w	r3, [r7, #1872]	@ 0x750

	  external_global position = odometry_eg();
 8002c4a:	f001 fe49 	bl	80048e0 <odometry_eg>
 8002c4e:	eeb0 5a40 	vmov.f32	s10, s0
 8002c52:	eef0 5a60 	vmov.f32	s11, s1
 8002c56:	eeb0 6a41 	vmov.f32	s12, s2
 8002c5a:	eef0 6a61 	vmov.f32	s13, s3
 8002c5e:	eeb0 7a42 	vmov.f32	s14, s4
 8002c62:	eef0 7a62 	vmov.f32	s15, s5
 8002c66:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002c6a:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002c6e:	ed83 5b00 	vstr	d5, [r3]
 8002c72:	ed83 6b02 	vstr	d6, [r3, #8]
 8002c76:	ed83 7b04 	vstr	d7, [r3, #16]
//	  displaySilo();
//	  display_EG();
	  displayCounter();
 8002c7a:	f001 ff75 	bl	8004b68 <displayCounter>

	  if(fabs(position.x) > 99999 || fabs(position.y) > 99999)
 8002c7e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002c82:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002c90:	a3c9      	add	r3, pc, #804	@ (adr r3, 8002fb8 <main+0x7a0>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	4640      	mov	r0, r8
 8002c98:	4649      	mov	r1, r9
 8002c9a:	f7fd ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d112      	bne.n	8002cca <main+0x4b2>
 8002ca4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002ca8:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002cac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cb0:	4692      	mov	sl, r2
 8002cb2:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002cb6:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002fb8 <main+0x7a0>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	4650      	mov	r0, sl
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	f7fd ff2a 	bl	8000b18 <__aeabi_dcmpgt>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <main+0x4b6>
	  {
		  Error_Handler();
 8002cca:	f001 fde5 	bl	8004898 <Error_Handler>
	  }

	  bool red_step_check = atTargetEG(red_step[red_step_numPoints-1], position, 400, 5);
 8002cce:	f8b7 375e 	ldrh.w	r3, [r7, #1886]	@ 0x75e
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002cd8:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002cdc:	ed93 3b00 	vldr	d3, [r3]
 8002ce0:	ed93 4b02 	vldr	d4, [r3, #8]
 8002ce4:	ed93 5b04 	vldr	d5, [r3, #16]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8002cf4:	443b      	add	r3, r7
 8002cf6:	3b68      	subs	r3, #104	@ 0x68
 8002cf8:	ed93 0b00 	vldr	d0, [r3]
 8002cfc:	ed93 1b02 	vldr	d1, [r3, #8]
 8002d00:	ed93 2b04 	vldr	d2, [r3, #16]
 8002d04:	ed9f 7bae 	vldr	d7, [pc, #696]	@ 8002fc0 <main+0x7a8>
 8002d08:	ed9f 6baf 	vldr	d6, [pc, #700]	@ 8002fc8 <main+0x7b0>
 8002d0c:	f002 f976 	bl	8004ffc <atTargetEG>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
	  bool red_storage_check = atTargetEG(red_storage, position, 400, 1);
 8002d16:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002d1a:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002d1e:	ed93 3b00 	vldr	d3, [r3]
 8002d22:	ed93 4b02 	vldr	d4, [r3, #8]
 8002d26:	ed93 5b04 	vldr	d5, [r3, #16]
 8002d2a:	f507 63dc 	add.w	r3, r7, #1760	@ 0x6e0
 8002d2e:	ed93 0b00 	vldr	d0, [r3]
 8002d32:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 8002d36:	ed93 1b00 	vldr	d1, [r3]
 8002d3a:	f507 63de 	add.w	r3, r7, #1776	@ 0x6f0
 8002d3e:	ed93 2b00 	vldr	d2, [r3]
 8002d42:	ed9f 7ba3 	vldr	d7, [pc, #652]	@ 8002fd0 <main+0x7b8>
 8002d46:	ed9f 6ba0 	vldr	d6, [pc, #640]	@ 8002fc8 <main+0x7b0>
 8002d4a:	f002 f957 	bl	8004ffc <atTargetEG>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 374e 	strb.w	r3, [r7, #1870]	@ 0x74e
	  bool red_silo_check = atTargetEG(red_silo, position, 400, 1);
 8002d54:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002d58:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002d5c:	ed93 3b00 	vldr	d3, [r3]
 8002d60:	ed93 4b02 	vldr	d4, [r3, #8]
 8002d64:	ed93 5b04 	vldr	d5, [r3, #16]
 8002d68:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8002d6c:	ed93 0b00 	vldr	d0, [r3]
 8002d70:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002d74:	ed93 1b00 	vldr	d1, [r3]
 8002d78:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 8002d7c:	ed93 2b00 	vldr	d2, [r3]
 8002d80:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8002fd0 <main+0x7b8>
 8002d84:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8002fc8 <main+0x7b0>
 8002d88:	f002 f938 	bl	8004ffc <atTargetEG>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 374d 	strb.w	r3, [r7, #1869]	@ 0x74d

	  bool red_retry_check = atTargetEG(red_retry[red_retry_numPoints-1], position, 400, 5);
 8002d92:	f8b7 375c 	ldrh.w	r3, [r7, #1884]	@ 0x75c
 8002d96:	1e5a      	subs	r2, r3, #1
 8002d98:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002d9c:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002da0:	ed93 3b00 	vldr	d3, [r3]
 8002da4:	ed93 4b02 	vldr	d4, [r3, #8]
 8002da8:	ed93 5b04 	vldr	d5, [r3, #16]
 8002dac:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002db0:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	ed93 0b00 	vldr	d0, [r3]
 8002dc2:	ed93 1b02 	vldr	d1, [r3, #8]
 8002dc6:	ed93 2b04 	vldr	d2, [r3, #16]
 8002dca:	ed9f 7b7d 	vldr	d7, [pc, #500]	@ 8002fc0 <main+0x7a8>
 8002dce:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8002fc8 <main+0x7b0>
 8002dd2:	f002 f913 	bl	8004ffc <atTargetEG>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 374c 	strb.w	r3, [r7, #1868]	@ 0x74c
	  bool red_retry_storage_check = atTargetEG(red_retry_storage, position, 400, 1);
 8002ddc:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002de0:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002de4:	ed93 3b00 	vldr	d3, [r3]
 8002de8:	ed93 4b02 	vldr	d4, [r3, #8]
 8002dec:	ed93 5b04 	vldr	d5, [r3, #16]
 8002df0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002df4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002df8:	ed93 0b00 	vldr	d0, [r3]
 8002dfc:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e00:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e04:	ed9f 7b72 	vldr	d7, [pc, #456]	@ 8002fd0 <main+0x7b8>
 8002e08:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8002fc8 <main+0x7b0>
 8002e0c:	f002 f8f6 	bl	8004ffc <atTargetEG>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f887 374b 	strb.w	r3, [r7, #1867]	@ 0x74b
	  bool red_retry_silo_check = atTargetEG(red_retry_silo, position, 400, 1);
 8002e16:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e1a:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002e1e:	ed93 3b00 	vldr	d3, [r3]
 8002e22:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e26:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e2a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e2e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e32:	ed93 0b00 	vldr	d0, [r3]
 8002e36:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e3a:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e3e:	ed9f 7b64 	vldr	d7, [pc, #400]	@ 8002fd0 <main+0x7b8>
 8002e42:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8002fc8 <main+0x7b0>
 8002e46:	f002 f8d9 	bl	8004ffc <atTargetEG>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f887 374a 	strb.w	r3, [r7, #1866]	@ 0x74a


	  bool blue_step_check = atTargetEG(blue_step[blue_step_numPoints-1], position, 400, 5);
 8002e50:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 8002e54:	1e5a      	subs	r2, r3, #1
 8002e56:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e5a:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002e5e:	ed93 3b00 	vldr	d3, [r3]
 8002e62:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e66:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e6a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e6e:	f5a3 710c 	sub.w	r1, r3, #560	@ 0x230
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	ed93 0b00 	vldr	d0, [r3]
 8002e80:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e84:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e88:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8002fc0 <main+0x7a8>
 8002e8c:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8002fc8 <main+0x7b0>
 8002e90:	f002 f8b4 	bl	8004ffc <atTargetEG>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 3749 	strb.w	r3, [r7, #1865]	@ 0x749
	  bool blue_storage_check = atTargetEG(blue_storage, position, 400, 1);
 8002e9a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e9e:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002ea2:	ed93 3b00 	vldr	d3, [r3]
 8002ea6:	ed93 4b02 	vldr	d4, [r3, #8]
 8002eaa:	ed93 5b04 	vldr	d5, [r3, #16]
 8002eae:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002eb2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002eb6:	ed93 0b00 	vldr	d0, [r3]
 8002eba:	ed93 1b02 	vldr	d1, [r3, #8]
 8002ebe:	ed93 2b04 	vldr	d2, [r3, #16]
 8002ec2:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8002fd0 <main+0x7b8>
 8002ec6:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8002fc8 <main+0x7b0>
 8002eca:	f002 f897 	bl	8004ffc <atTargetEG>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3748 	strb.w	r3, [r7, #1864]	@ 0x748
	  bool blue_silo_check = atTargetEG(blue_silo, position, 400, 1);
 8002ed4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002ed8:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002edc:	ed93 3b00 	vldr	d3, [r3]
 8002ee0:	ed93 4b02 	vldr	d4, [r3, #8]
 8002ee4:	ed93 5b04 	vldr	d5, [r3, #16]
 8002ee8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002eec:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002ef0:	ed93 0b00 	vldr	d0, [r3]
 8002ef4:	ed93 1b02 	vldr	d1, [r3, #8]
 8002ef8:	ed93 2b04 	vldr	d2, [r3, #16]
 8002efc:	ed9f 7b34 	vldr	d7, [pc, #208]	@ 8002fd0 <main+0x7b8>
 8002f00:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8002fc8 <main+0x7b0>
 8002f04:	f002 f87a 	bl	8004ffc <atTargetEG>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 3747 	strb.w	r3, [r7, #1863]	@ 0x747

	  bool blue_retry_check = atTargetEG(blue_retry[blue_retry_numPoints-1], position, 400, 5);
 8002f0e:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f18:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002f1c:	ed93 3b00 	vldr	d3, [r3]
 8002f20:	ed93 4b02 	vldr	d4, [r3, #8]
 8002f24:	ed93 5b04 	vldr	d5, [r3, #16]
 8002f28:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f2c:	f5a3 7148 	sub.w	r1, r3, #800	@ 0x320
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	ed93 0b00 	vldr	d0, [r3]
 8002f3e:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f42:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f46:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 8002fc0 <main+0x7a8>
 8002f4a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8002fc8 <main+0x7b0>
 8002f4e:	f002 f855 	bl	8004ffc <atTargetEG>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f887 3746 	strb.w	r3, [r7, #1862]	@ 0x746
	  bool blue_retry_storage_check = atTargetEG(blue_retry_storage, position, 400, 1);
 8002f58:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f5c:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002f60:	ed93 3b00 	vldr	d3, [r3]
 8002f64:	ed93 4b02 	vldr	d4, [r3, #8]
 8002f68:	ed93 5b04 	vldr	d5, [r3, #16]
 8002f6c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f70:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002f74:	ed93 0b00 	vldr	d0, [r3]
 8002f78:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f7c:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f80:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8002fd0 <main+0x7b8>
 8002f84:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8002fc8 <main+0x7b0>
 8002f88:	f002 f838 	bl	8004ffc <atTargetEG>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 3745 	strb.w	r3, [r7, #1861]	@ 0x745
	  bool blue_retry_silo_check = atTargetEG(blue_retry_silo, position, 400, 1);
 8002f92:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f96:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002f9a:	ed93 3b00 	vldr	d3, [r3]
 8002f9e:	ed93 4b02 	vldr	d4, [r3, #8]
 8002fa2:	ed93 5b04 	vldr	d5, [r3, #16]
 8002fa6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002faa:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002fae:	ed93 0b00 	vldr	d0, [r3]
 8002fb2:	ed93 1b02 	vldr	d1, [r3, #8]
 8002fb6:	e015      	b.n	8002fe4 <main+0x7cc>
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	40f869f0 	.word	0x40f869f0
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	40140000 	.word	0x40140000
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	40790000 	.word	0x40790000
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	3ff00000 	.word	0x3ff00000
 8002fd8:	08011048 	.word	0x08011048
 8002fdc:	08011108 	.word	0x08011108
 8002fe0:	20000600 	.word	0x20000600
 8002fe4:	ed93 2b04 	vldr	d2, [r3, #16]
 8002fe8:	ed9f 7bc9 	vldr	d7, [pc, #804]	@ 8003310 <main+0xaf8>
 8002fec:	ed9f 6bca 	vldr	d6, [pc, #808]	@ 8003318 <main+0xb00>
 8002ff0:	f002 f804 	bl	8004ffc <atTargetEG>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f887 3744 	strb.w	r3, [r7, #1860]	@ 0x744

	  switch(mode)
 8002ffa:	4bdd      	ldr	r3, [pc, #884]	@ (8003370 <main+0xb58>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	2b15      	cmp	r3, #21
 8003002:	f200 85d8 	bhi.w	8003bb6 <main+0x139e>
 8003006:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <main+0x7f4>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	08003065 	.word	0x08003065
 8003010:	080030a3 	.word	0x080030a3
 8003014:	08003127 	.word	0x08003127
 8003018:	080031bf 	.word	0x080031bf
 800301c:	0800322b 	.word	0x0800322b
 8003020:	080032d1 	.word	0x080032d1
 8003024:	08003381 	.word	0x08003381
 8003028:	08003401 	.word	0x08003401
 800302c:	08003491 	.word	0x08003491
 8003030:	080034f7 	.word	0x080034f7
 8003034:	08003597 	.word	0x08003597
 8003038:	080035d3 	.word	0x080035d3
 800303c:	08003651 	.word	0x08003651
 8003040:	08003747 	.word	0x08003747
 8003044:	080037ad 	.word	0x080037ad
 8003048:	0800384d 	.word	0x0800384d
 800304c:	08003889 	.word	0x08003889
 8003050:	08003907 	.word	0x08003907
 8003054:	08003997 	.word	0x08003997
 8003058:	08003a61 	.word	0x08003a61
 800305c:	08003b01 	.word	0x08003b01
 8003060:	08003b9d 	.word	0x08003b9d
	  {
	  case RED_STEP:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003064:	2201      	movs	r2, #1
 8003066:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800306a:	48c2      	ldr	r0, [pc, #776]	@ (8003374 <main+0xb5c>)
 800306c:	f004 fb5e 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003070:	2200      	movs	r2, #0
 8003072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003076:	48bf      	ldr	r0, [pc, #764]	@ (8003374 <main+0xb5c>)
 8003078:	f004 fb58 	bl	800772c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(red_step, red_step_parameters, red_step_numPoints);
 800307c:	f8b7 275e 	ldrh.w	r2, [r7, #1886]	@ 0x75e
 8003080:	f507 7136 	add.w	r1, r7, #728	@ 0x2d8
 8003084:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fa09 	bl	80054a0 <PID_moveToCoordinate>
		  if(red_step_check)
 800308e:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 85b3 	beq.w	8003bfe <main+0x13e6>
		  {
			  mode = RED_STORAGE;
 8003098:	4bb5      	ldr	r3, [pc, #724]	@ (8003370 <main+0xb58>)
 800309a:	2202      	movs	r2, #2
 800309c:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800309e:	f000 bdae 	b.w	8003bfe <main+0x13e6>

	  case RED_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80030a8:	48b2      	ldr	r0, [pc, #712]	@ (8003374 <main+0xb5c>)
 80030aa:	f004 fb3f 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80030ae:	2201      	movs	r2, #1
 80030b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030b4:	48af      	ldr	r0, [pc, #700]	@ (8003374 <main+0xb5c>)
 80030b6:	f004 fb39 	bl	800772c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80030ba:	ed9f 0b99 	vldr	d0, [pc, #612]	@ 8003320 <main+0xb08>
 80030be:	2001      	movs	r0, #1
 80030c0:	f7fd ffcc 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80030c4:	ed9f 0b96 	vldr	d0, [pc, #600]	@ 8003320 <main+0xb08>
 80030c8:	2002      	movs	r0, #2
 80030ca:	f7fd ffc7 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80030ce:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8003320 <main+0xb08>
 80030d2:	2007      	movs	r0, #7
 80030d4:	f7fd ffc2 	bl	800105c <setMotorSpeed>
		  PID_EG(red_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80030d8:	f507 63dc 	add.w	r3, r7, #1760	@ 0x6e0
 80030dc:	ed93 0b00 	vldr	d0, [r3]
 80030e0:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 80030e4:	ed93 1b00 	vldr	d1, [r3]
 80030e8:	f507 63de 	add.w	r3, r7, #1776	@ 0x6f0
 80030ec:	ed93 2b00 	vldr	d2, [r3]
 80030f0:	a38d      	add	r3, pc, #564	@ (adr r3, 8003328 <main+0xb10>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	e9cd 2300 	strd	r2, r3, [sp]
 80030fa:	ed9f 7b8d 	vldr	d7, [pc, #564]	@ 8003330 <main+0xb18>
 80030fe:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8003338 <main+0xb20>
 8003102:	ed9f 5b87 	vldr	d5, [pc, #540]	@ 8003320 <main+0xb08>
 8003106:	ed9f 4b86 	vldr	d4, [pc, #536]	@ 8003320 <main+0xb08>
 800310a:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 8003340 <main+0xb28>
 800310e:	f002 f83f 	bl	8005190 <PID_EG>
		  if(red_storage_check)
 8003112:	f897 374e 	ldrb.w	r3, [r7, #1870]	@ 0x74e
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8573 	beq.w	8003c02 <main+0x13ea>
		  {
			  mode = RED_FIND_BALL;
 800311c:	4b94      	ldr	r3, [pc, #592]	@ (8003370 <main+0xb58>)
 800311e:	2203      	movs	r2, #3
 8003120:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003122:	f000 bd6e 	b.w	8003c02 <main+0x13ea>

	  case RED_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003126:	2201      	movs	r2, #1
 8003128:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800312c:	4891      	ldr	r0, [pc, #580]	@ (8003374 <main+0xb5c>)
 800312e:	f004 fafd 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
 8003134:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003138:	488e      	ldr	r0, [pc, #568]	@ (8003374 <main+0xb5c>)
 800313a:	f004 faf7 	bl	800772c <HAL_GPIO_WritePin>

		  findAndTakeBall(redBall);
 800313e:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 8003142:	4618      	mov	r0, r3
 8003144:	f003 f824 	bl	8006190 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = RED_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003148:	4b8b      	ldr	r3, [pc, #556]	@ (8003378 <main+0xb60>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d108      	bne.n	8003162 <main+0x94a>
 8003150:	4b8a      	ldr	r3, [pc, #552]	@ (800337c <main+0xb64>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d104      	bne.n	8003162 <main+0x94a>
		  {
			  mode = RED_FACING_SILO;
 8003158:	4b85      	ldr	r3, [pc, #532]	@ (8003370 <main+0xb58>)
 800315a:	2204      	movs	r2, #4
 800315c:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(red_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 800315e:	f000 bd52 	b.w	8003c06 <main+0x13ee>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 8003162:	4b85      	ldr	r3, [pc, #532]	@ (8003378 <main+0xb60>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 854d 	bne.w	8003c06 <main+0x13ee>
 800316c:	4b83      	ldr	r3, [pc, #524]	@ (800337c <main+0xb64>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 8548 	bne.w	8003c06 <main+0x13ee>
			  throwTheBall(red_throwBall, 1.5, 0.0, 0.0, 1.5);
 8003176:	f507 63d6 	add.w	r3, r7, #1712	@ 0x6b0
 800317a:	ed93 1b00 	vldr	d1, [r3]
 800317e:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8003182:	ed93 2b00 	vldr	d2, [r3]
 8003186:	f507 63d8 	add.w	r3, r7, #1728	@ 0x6c0
 800318a:	ed93 7b00 	vldr	d7, [r3]
 800318e:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8003338 <main+0xb20>
 8003192:	ed9f 5b63 	vldr	d5, [pc, #396]	@ 8003320 <main+0xb08>
 8003196:	ed9f 4b62 	vldr	d4, [pc, #392]	@ 8003320 <main+0xb08>
 800319a:	ed9f 3b67 	vldr	d3, [pc, #412]	@ 8003338 <main+0xb20>
 800319e:	eeb0 0a41 	vmov.f32	s0, s2
 80031a2:	eef0 0a61 	vmov.f32	s1, s3
 80031a6:	eeb0 1a42 	vmov.f32	s2, s4
 80031aa:	eef0 1a62 	vmov.f32	s3, s5
 80031ae:	eeb0 2a47 	vmov.f32	s4, s14
 80031b2:	eef0 2a67 	vmov.f32	s5, s15
 80031b6:	f003 fa73 	bl	80066a0 <throwTheBall>
		  break;
 80031ba:	f000 bd24 	b.w	8003c06 <main+0x13ee>

	  case RED_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031c4:	486b      	ldr	r0, [pc, #428]	@ (8003374 <main+0xb5c>)
 80031c6:	f004 fab1 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80031ca:	2201      	movs	r2, #1
 80031cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031d0:	4868      	ldr	r0, [pc, #416]	@ (8003374 <main+0xb5c>)
 80031d2:	f004 faab 	bl	800772c <HAL_GPIO_WritePin>

		  servo_write(120);
 80031d6:	2078      	movs	r0, #120	@ 0x78
 80031d8:	f001 ffc2 	bl	8005160 <servo_write>
		  PID_EG(red_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 80031dc:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 80031e0:	ed93 0b00 	vldr	d0, [r3]
 80031e4:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80031e8:	ed93 1b00 	vldr	d1, [r3]
 80031ec:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 80031f0:	ed93 2b00 	vldr	d2, [r3]
 80031f4:	a354      	add	r3, pc, #336	@ (adr r3, 8003348 <main+0xb30>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	e9cd 2300 	strd	r2, r3, [sp]
 80031fe:	ed9f 7b54 	vldr	d7, [pc, #336]	@ 8003350 <main+0xb38>
 8003202:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8003338 <main+0xb20>
 8003206:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8003320 <main+0xb08>
 800320a:	ed9f 4b45 	vldr	d4, [pc, #276]	@ 8003320 <main+0xb08>
 800320e:	ed9f 3b4c 	vldr	d3, [pc, #304]	@ 8003340 <main+0xb28>
 8003212:	f001 ffbd 	bl	8005190 <PID_EG>
		  if(red_silo_check)
 8003216:	f897 374d 	ldrb.w	r3, [r7, #1869]	@ 0x74d
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 84f5 	beq.w	8003c0a <main+0x13f2>
		  {
			  mode = RED_FIND_SILO;
 8003220:	4b53      	ldr	r3, [pc, #332]	@ (8003370 <main+0xb58>)
 8003222:	2205      	movs	r2, #5
 8003224:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003226:	f000 bcf0 	b.w	8003c0a <main+0x13f2>

	  case RED_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800322a:	2201      	movs	r2, #1
 800322c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003230:	4850      	ldr	r0, [pc, #320]	@ (8003374 <main+0xb5c>)
 8003232:	f004 fa7b 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003236:	2200      	movs	r2, #0
 8003238:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800323c:	484d      	ldr	r0, [pc, #308]	@ (8003374 <main+0xb5c>)
 800323e:	f004 fa75 	bl	800772c <HAL_GPIO_WritePin>

		  placeBallInSilo(red_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 8003242:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8003246:	ed93 0b00 	vldr	d0, [r3]
 800324a:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800324e:	ed93 1b00 	vldr	d1, [r3]
 8003252:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 8003256:	ed93 2b00 	vldr	d2, [r3]
 800325a:	a33f      	add	r3, pc, #252	@ (adr r3, 8003358 <main+0xb40>)
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	e9cd 2300 	strd	r2, r3, [sp]
 8003264:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 8003330 <main+0xb18>
 8003268:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8003338 <main+0xb20>
 800326c:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8003320 <main+0xb08>
 8003270:	ed9f 4b2b 	vldr	d4, [pc, #172]	@ 8003320 <main+0xb08>
 8003274:	ed9f 3b30 	vldr	d3, [pc, #192]	@ 8003338 <main+0xb20>
 8003278:	f002 fe1a 	bl	8005eb0 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 800327c:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003280:	2b00      	cmp	r3, #0
 8003282:	dd03      	ble.n	800328c <main+0xa74>
 8003284:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003288:	2b0a      	cmp	r3, #10
 800328a:	dd09      	ble.n	80032a0 <main+0xa88>
 800328c:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003290:	2b00      	cmp	r3, #0
 8003292:	f340 84bc 	ble.w	8003c0e <main+0x13f6>
 8003296:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 800329a:	2b0a      	cmp	r3, #10
 800329c:	f300 84b7 	bgt.w	8003c0e <main+0x13f6>
		  {
			  setMotorSpeed(1, -2000);
 80032a0:	ed9f 0b2f 	vldr	d0, [pc, #188]	@ 8003360 <main+0xb48>
 80032a4:	2001      	movs	r0, #1
 80032a6:	f7fd fed9 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 80032aa:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 8003360 <main+0xb48>
 80032ae:	2002      	movs	r0, #2
 80032b0:	f7fd fed4 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 80032b4:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8003368 <main+0xb50>
 80032b8:	2007      	movs	r0, #7
 80032ba:	f7fd fecf 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 80032be:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80032c2:	f003 feb7 	bl	8007034 <HAL_Delay>
			  mode = RED_STORAGE;
 80032c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <main+0xb58>)
 80032c8:	2202      	movs	r2, #2
 80032ca:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80032cc:	f000 bc9f 	b.w	8003c0e <main+0x13f6>

	  case RED_RETRY:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80032d0:	2201      	movs	r2, #1
 80032d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032d6:	4827      	ldr	r0, [pc, #156]	@ (8003374 <main+0xb5c>)
 80032d8:	f004 fa28 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e2:	4824      	ldr	r0, [pc, #144]	@ (8003374 <main+0xb5c>)
 80032e4:	f004 fa22 	bl	800772c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(red_retry, red_retry_parameters, red_retry_numPoints);
 80032e8:	f8b7 275c 	ldrh.w	r2, [r7, #1884]	@ 0x75c
 80032ec:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80032f0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80032f4:	4618      	mov	r0, r3
 80032f6:	f002 f8d3 	bl	80054a0 <PID_moveToCoordinate>
		  if(red_retry_check)
 80032fa:	f897 374c 	ldrb.w	r3, [r7, #1868]	@ 0x74c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8487 	beq.w	8003c12 <main+0x13fa>
		  {
			  mode = RED_RETRY_STORAGE;
 8003304:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <main+0xb58>)
 8003306:	2207      	movs	r2, #7
 8003308:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800330a:	f000 bc82 	b.w	8003c12 <main+0x13fa>
 800330e:	bf00      	nop
 8003310:	00000000 	.word	0x00000000
 8003314:	3ff00000 	.word	0x3ff00000
 8003318:	00000000 	.word	0x00000000
 800331c:	40790000 	.word	0x40790000
	...
 800332c:	40ab5800 	.word	0x40ab5800
 8003330:	66666666 	.word	0x66666666
 8003334:	3fe66666 	.word	0x3fe66666
 8003338:	00000000 	.word	0x00000000
 800333c:	3ff80000 	.word	0x3ff80000
 8003340:	cccccccd 	.word	0xcccccccd
 8003344:	3ffccccc 	.word	0x3ffccccc
 8003348:	00000000 	.word	0x00000000
 800334c:	40a77000 	.word	0x40a77000
 8003350:	9999999a 	.word	0x9999999a
 8003354:	3fe99999 	.word	0x3fe99999
 8003358:	00000000 	.word	0x00000000
 800335c:	40a38800 	.word	0x40a38800
 8003360:	00000000 	.word	0x00000000
 8003364:	c09f4000 	.word	0xc09f4000
 8003368:	00000000 	.word	0x00000000
 800336c:	c0a5e000 	.word	0xc0a5e000
 8003370:	20000610 	.word	0x20000610
 8003374:	40020c00 	.word	0x40020c00
 8003378:	20000600 	.word	0x20000600
 800337c:	2000057c 	.word	0x2000057c

	  case RED_RETRY_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003386:	48d6      	ldr	r0, [pc, #856]	@ (80036e0 <main+0xec8>)
 8003388:	f004 f9d0 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800338c:	2201      	movs	r2, #1
 800338e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003392:	48d3      	ldr	r0, [pc, #844]	@ (80036e0 <main+0xec8>)
 8003394:	f004 f9ca 	bl	800772c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 8003398:	ed9f 0bbd 	vldr	d0, [pc, #756]	@ 8003690 <main+0xe78>
 800339c:	2001      	movs	r0, #1
 800339e:	f7fd fe5d 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80033a2:	ed9f 0bbb 	vldr	d0, [pc, #748]	@ 8003690 <main+0xe78>
 80033a6:	2002      	movs	r0, #2
 80033a8:	f7fd fe58 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80033ac:	ed9f 0bb8 	vldr	d0, [pc, #736]	@ 8003690 <main+0xe78>
 80033b0:	2007      	movs	r0, #7
 80033b2:	f7fd fe53 	bl	800105c <setMotorSpeed>
		  PID_EG(red_retry_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80033b6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80033ba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80033be:	ed93 0b00 	vldr	d0, [r3]
 80033c2:	ed93 1b02 	vldr	d1, [r3, #8]
 80033c6:	ed93 2b04 	vldr	d2, [r3, #16]
 80033ca:	a3b3      	add	r3, pc, #716	@ (adr r3, 8003698 <main+0xe80>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	e9cd 2300 	strd	r2, r3, [sp]
 80033d4:	ed9f 7bb2 	vldr	d7, [pc, #712]	@ 80036a0 <main+0xe88>
 80033d8:	ed9f 6bb3 	vldr	d6, [pc, #716]	@ 80036a8 <main+0xe90>
 80033dc:	ed9f 5bac 	vldr	d5, [pc, #688]	@ 8003690 <main+0xe78>
 80033e0:	ed9f 4bab 	vldr	d4, [pc, #684]	@ 8003690 <main+0xe78>
 80033e4:	ed9f 3bb2 	vldr	d3, [pc, #712]	@ 80036b0 <main+0xe98>
 80033e8:	f001 fed2 	bl	8005190 <PID_EG>
		  if(red_retry_storage_check)
 80033ec:	f897 374b 	ldrb.w	r3, [r7, #1867]	@ 0x74b
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8410 	beq.w	8003c16 <main+0x13fe>
		  {
			  mode = RED_RETRY_FIND_BALL;
 80033f6:	4bbb      	ldr	r3, [pc, #748]	@ (80036e4 <main+0xecc>)
 80033f8:	2208      	movs	r2, #8
 80033fa:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80033fc:	f000 bc0b 	b.w	8003c16 <main+0x13fe>

	  case RED_RETRY_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003400:	2201      	movs	r2, #1
 8003402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003406:	48b6      	ldr	r0, [pc, #728]	@ (80036e0 <main+0xec8>)
 8003408:	f004 f990 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003412:	48b3      	ldr	r0, [pc, #716]	@ (80036e0 <main+0xec8>)
 8003414:	f004 f98a 	bl	800772c <HAL_GPIO_WritePin>

		  findAndTakeBall(redRetryBall);
 8003418:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 800341c:	4618      	mov	r0, r3
 800341e:	f002 feb7 	bl	8006190 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = RED_RETRY_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003422:	4bb1      	ldr	r3, [pc, #708]	@ (80036e8 <main+0xed0>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <main+0xc22>
 800342a:	4bb0      	ldr	r3, [pc, #704]	@ (80036ec <main+0xed4>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d103      	bne.n	800343a <main+0xc22>
		  {
			  mode = RED_RETRY_FACING_SILO;
 8003432:	4bac      	ldr	r3, [pc, #688]	@ (80036e4 <main+0xecc>)
 8003434:	2209      	movs	r2, #9
 8003436:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(red_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003438:	e3ef      	b.n	8003c1a <main+0x1402>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 800343a:	4bab      	ldr	r3, [pc, #684]	@ (80036e8 <main+0xed0>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 83eb 	bne.w	8003c1a <main+0x1402>
 8003444:	4ba9      	ldr	r3, [pc, #676]	@ (80036ec <main+0xed4>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 83e6 	bne.w	8003c1a <main+0x1402>
			  throwTheBall(red_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
 800344e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003452:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003456:	ed93 1b00 	vldr	d1, [r3]
 800345a:	ed93 2b02 	vldr	d2, [r3, #8]
 800345e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003462:	ed9f 6b91 	vldr	d6, [pc, #580]	@ 80036a8 <main+0xe90>
 8003466:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 8003690 <main+0xe78>
 800346a:	ed9f 4b89 	vldr	d4, [pc, #548]	@ 8003690 <main+0xe78>
 800346e:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 80036a8 <main+0xe90>
 8003472:	eeb0 0a41 	vmov.f32	s0, s2
 8003476:	eef0 0a61 	vmov.f32	s1, s3
 800347a:	eeb0 1a42 	vmov.f32	s2, s4
 800347e:	eef0 1a62 	vmov.f32	s3, s5
 8003482:	eeb0 2a47 	vmov.f32	s4, s14
 8003486:	eef0 2a67 	vmov.f32	s5, s15
 800348a:	f003 f909 	bl	80066a0 <throwTheBall>
		  break;
 800348e:	e3c4      	b.n	8003c1a <main+0x1402>

	  case RED_RETRY_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003490:	2200      	movs	r2, #0
 8003492:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003496:	4892      	ldr	r0, [pc, #584]	@ (80036e0 <main+0xec8>)
 8003498:	f004 f948 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800349c:	2201      	movs	r2, #1
 800349e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034a2:	488f      	ldr	r0, [pc, #572]	@ (80036e0 <main+0xec8>)
 80034a4:	f004 f942 	bl	800772c <HAL_GPIO_WritePin>

		  servo_write(120);
 80034a8:	2078      	movs	r0, #120	@ 0x78
 80034aa:	f001 fe59 	bl	8005160 <servo_write>
		  PID_EG(red_retry_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 80034ae:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80034b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80034b6:	ed93 0b00 	vldr	d0, [r3]
 80034ba:	ed93 1b02 	vldr	d1, [r3, #8]
 80034be:	ed93 2b04 	vldr	d2, [r3, #16]
 80034c2:	a37d      	add	r3, pc, #500	@ (adr r3, 80036b8 <main+0xea0>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	e9cd 2300 	strd	r2, r3, [sp]
 80034cc:	ed9f 7b7c 	vldr	d7, [pc, #496]	@ 80036c0 <main+0xea8>
 80034d0:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80036a8 <main+0xe90>
 80034d4:	ed9f 5b6e 	vldr	d5, [pc, #440]	@ 8003690 <main+0xe78>
 80034d8:	ed9f 4b6d 	vldr	d4, [pc, #436]	@ 8003690 <main+0xe78>
 80034dc:	ed9f 3b74 	vldr	d3, [pc, #464]	@ 80036b0 <main+0xe98>
 80034e0:	f001 fe56 	bl	8005190 <PID_EG>
		  if(red_retry_silo_check)
 80034e4:	f897 374a 	ldrb.w	r3, [r7, #1866]	@ 0x74a
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8398 	beq.w	8003c1e <main+0x1406>
		  {
			  mode = RED_RETRY_FIND_SILO;
 80034ee:	4b7d      	ldr	r3, [pc, #500]	@ (80036e4 <main+0xecc>)
 80034f0:	220a      	movs	r2, #10
 80034f2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80034f4:	e393      	b.n	8003c1e <main+0x1406>

	  case RED_RETRY_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80034f6:	2201      	movs	r2, #1
 80034f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034fc:	4878      	ldr	r0, [pc, #480]	@ (80036e0 <main+0xec8>)
 80034fe:	f004 f915 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003508:	4875      	ldr	r0, [pc, #468]	@ (80036e0 <main+0xec8>)
 800350a:	f004 f90f 	bl	800772c <HAL_GPIO_WritePin>

		  placeBallInSilo(red_retry_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 800350e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003512:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003516:	ed93 0b00 	vldr	d0, [r3]
 800351a:	ed93 1b02 	vldr	d1, [r3, #8]
 800351e:	ed93 2b04 	vldr	d2, [r3, #16]
 8003522:	a369      	add	r3, pc, #420	@ (adr r3, 80036c8 <main+0xeb0>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	e9cd 2300 	strd	r2, r3, [sp]
 800352c:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 80036a0 <main+0xe88>
 8003530:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 80036a8 <main+0xe90>
 8003534:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8003690 <main+0xe78>
 8003538:	ed9f 4b55 	vldr	d4, [pc, #340]	@ 8003690 <main+0xe78>
 800353c:	ed9f 3b5a 	vldr	d3, [pc, #360]	@ 80036a8 <main+0xe90>
 8003540:	f002 fcb6 	bl	8005eb0 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003544:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003548:	2b00      	cmp	r3, #0
 800354a:	dd03      	ble.n	8003554 <main+0xd3c>
 800354c:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003550:	2b0a      	cmp	r3, #10
 8003552:	dd09      	ble.n	8003568 <main+0xd50>
 8003554:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003558:	2b00      	cmp	r3, #0
 800355a:	f340 8362 	ble.w	8003c22 <main+0x140a>
 800355e:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003562:	2b0a      	cmp	r3, #10
 8003564:	f300 835d 	bgt.w	8003c22 <main+0x140a>
		  {
			  setMotorSpeed(1, -2000);
 8003568:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 80036d0 <main+0xeb8>
 800356c:	2001      	movs	r0, #1
 800356e:	f7fd fd75 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003572:	ed9f 0b57 	vldr	d0, [pc, #348]	@ 80036d0 <main+0xeb8>
 8003576:	2002      	movs	r0, #2
 8003578:	f7fd fd70 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 800357c:	ed9f 0b56 	vldr	d0, [pc, #344]	@ 80036d8 <main+0xec0>
 8003580:	2007      	movs	r0, #7
 8003582:	f7fd fd6b 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8003586:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800358a:	f003 fd53 	bl	8007034 <HAL_Delay>
			  mode = RED_RETRY_STORAGE;
 800358e:	4b55      	ldr	r3, [pc, #340]	@ (80036e4 <main+0xecc>)
 8003590:	2207      	movs	r2, #7
 8003592:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003594:	e345      	b.n	8003c22 <main+0x140a>

	  case BLUE_STEP:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003596:	2201      	movs	r2, #1
 8003598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800359c:	4850      	ldr	r0, [pc, #320]	@ (80036e0 <main+0xec8>)
 800359e:	f004 f8c5 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80035a2:	2200      	movs	r2, #0
 80035a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a8:	484d      	ldr	r0, [pc, #308]	@ (80036e0 <main+0xec8>)
 80035aa:	f004 f8bf 	bl	800772c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(blue_step, blue_step_parameters, blue_step_numPoints);
 80035ae:	f8b7 275a 	ldrh.w	r2, [r7, #1882]	@ 0x75a
 80035b2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80035b6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 ff70 	bl	80054a0 <PID_moveToCoordinate>
		  if(blue_step_check)
 80035c0:	f897 3749 	ldrb.w	r3, [r7, #1865]	@ 0x749
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 832e 	beq.w	8003c26 <main+0x140e>
		  {
			  mode = BLUE_STORAGE;
 80035ca:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <main+0xecc>)
 80035cc:	220c      	movs	r2, #12
 80035ce:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80035d0:	e329      	b.n	8003c26 <main+0x140e>

	  case BLUE_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80035d2:	2200      	movs	r2, #0
 80035d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035d8:	4841      	ldr	r0, [pc, #260]	@ (80036e0 <main+0xec8>)
 80035da:	f004 f8a7 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80035de:	2201      	movs	r2, #1
 80035e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035e4:	483e      	ldr	r0, [pc, #248]	@ (80036e0 <main+0xec8>)
 80035e6:	f004 f8a1 	bl	800772c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80035ea:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8003690 <main+0xe78>
 80035ee:	2001      	movs	r0, #1
 80035f0:	f7fd fd34 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80035f4:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8003690 <main+0xe78>
 80035f8:	2002      	movs	r0, #2
 80035fa:	f7fd fd2f 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80035fe:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8003690 <main+0xe78>
 8003602:	2007      	movs	r0, #7
 8003604:	f7fd fd2a 	bl	800105c <setMotorSpeed>
		  PID_EG(blue_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 8003608:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800360c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003610:	ed93 0b00 	vldr	d0, [r3]
 8003614:	ed93 1b02 	vldr	d1, [r3, #8]
 8003618:	ed93 2b04 	vldr	d2, [r3, #16]
 800361c:	a31e      	add	r3, pc, #120	@ (adr r3, 8003698 <main+0xe80>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	e9cd 2300 	strd	r2, r3, [sp]
 8003626:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 80036a0 <main+0xe88>
 800362a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 80036a8 <main+0xe90>
 800362e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8003690 <main+0xe78>
 8003632:	ed9f 4b17 	vldr	d4, [pc, #92]	@ 8003690 <main+0xe78>
 8003636:	ed9f 3b1e 	vldr	d3, [pc, #120]	@ 80036b0 <main+0xe98>
 800363a:	f001 fda9 	bl	8005190 <PID_EG>
		  if(blue_storage_check)
 800363e:	f897 3748 	ldrb.w	r3, [r7, #1864]	@ 0x748
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 82f1 	beq.w	8003c2a <main+0x1412>
		  {
			  mode = BLUE_FIND_BALL;
 8003648:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <main+0xecc>)
 800364a:	220d      	movs	r2, #13
 800364c:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800364e:	e2ec      	b.n	8003c2a <main+0x1412>

	  case BLUE_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003650:	2201      	movs	r2, #1
 8003652:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003656:	4822      	ldr	r0, [pc, #136]	@ (80036e0 <main+0xec8>)
 8003658:	f004 f868 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003662:	481f      	ldr	r0, [pc, #124]	@ (80036e0 <main+0xec8>)
 8003664:	f004 f862 	bl	800772c <HAL_GPIO_WritePin>

		  findAndTakeBall(blueBall);
 8003668:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800366c:	4618      	mov	r0, r3
 800366e:	f002 fd8f 	bl	8006190 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = BLUE_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003672:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <main+0xed0>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d13a      	bne.n	80036f0 <main+0xed8>
 800367a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <main+0xed4>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d136      	bne.n	80036f0 <main+0xed8>
		  {
			  mode = BLUE_FACING_SILO;
 8003682:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <main+0xecc>)
 8003684:	220e      	movs	r2, #14
 8003686:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(blue_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003688:	e2d1      	b.n	8003c2e <main+0x1416>
 800368a:	bf00      	nop
 800368c:	f3af 8000 	nop.w
	...
 800369c:	40ab5800 	.word	0x40ab5800
 80036a0:	66666666 	.word	0x66666666
 80036a4:	3fe66666 	.word	0x3fe66666
 80036a8:	00000000 	.word	0x00000000
 80036ac:	3ff80000 	.word	0x3ff80000
 80036b0:	cccccccd 	.word	0xcccccccd
 80036b4:	3ffccccc 	.word	0x3ffccccc
 80036b8:	00000000 	.word	0x00000000
 80036bc:	40a77000 	.word	0x40a77000
 80036c0:	9999999a 	.word	0x9999999a
 80036c4:	3fe99999 	.word	0x3fe99999
 80036c8:	00000000 	.word	0x00000000
 80036cc:	40a38800 	.word	0x40a38800
 80036d0:	00000000 	.word	0x00000000
 80036d4:	c09f4000 	.word	0xc09f4000
 80036d8:	00000000 	.word	0x00000000
 80036dc:	c0a5e000 	.word	0xc0a5e000
 80036e0:	40020c00 	.word	0x40020c00
 80036e4:	20000610 	.word	0x20000610
 80036e8:	20000600 	.word	0x20000600
 80036ec:	2000057c 	.word	0x2000057c
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 80036f0:	4bd7      	ldr	r3, [pc, #860]	@ (8003a50 <main+0x1238>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 829a 	bne.w	8003c2e <main+0x1416>
 80036fa:	4bd6      	ldr	r3, [pc, #856]	@ (8003a54 <main+0x123c>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 8295 	bne.w	8003c2e <main+0x1416>
			  throwTheBall(blue_throwBall, 1.5, 0.0, 0.0, 1.5);
 8003704:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003708:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800370c:	ed93 1b00 	vldr	d1, [r3]
 8003710:	ed93 2b02 	vldr	d2, [r3, #8]
 8003714:	ed93 7b04 	vldr	d7, [r3, #16]
 8003718:	ed9f 6bb9 	vldr	d6, [pc, #740]	@ 8003a00 <main+0x11e8>
 800371c:	ed9f 5bba 	vldr	d5, [pc, #744]	@ 8003a08 <main+0x11f0>
 8003720:	ed9f 4bb9 	vldr	d4, [pc, #740]	@ 8003a08 <main+0x11f0>
 8003724:	ed9f 3bb6 	vldr	d3, [pc, #728]	@ 8003a00 <main+0x11e8>
 8003728:	eeb0 0a41 	vmov.f32	s0, s2
 800372c:	eef0 0a61 	vmov.f32	s1, s3
 8003730:	eeb0 1a42 	vmov.f32	s2, s4
 8003734:	eef0 1a62 	vmov.f32	s3, s5
 8003738:	eeb0 2a47 	vmov.f32	s4, s14
 800373c:	eef0 2a67 	vmov.f32	s5, s15
 8003740:	f002 ffae 	bl	80066a0 <throwTheBall>
		  break;
 8003744:	e273      	b.n	8003c2e <main+0x1416>

	  case BLUE_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800374c:	48c2      	ldr	r0, [pc, #776]	@ (8003a58 <main+0x1240>)
 800374e:	f003 ffed 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003752:	2201      	movs	r2, #1
 8003754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003758:	48bf      	ldr	r0, [pc, #764]	@ (8003a58 <main+0x1240>)
 800375a:	f003 ffe7 	bl	800772c <HAL_GPIO_WritePin>

		  servo_write(120);
 800375e:	2078      	movs	r0, #120	@ 0x78
 8003760:	f001 fcfe 	bl	8005160 <servo_write>
		  PID_EG(blue_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 8003764:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003768:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800376c:	ed93 0b00 	vldr	d0, [r3]
 8003770:	ed93 1b02 	vldr	d1, [r3, #8]
 8003774:	ed93 2b04 	vldr	d2, [r3, #16]
 8003778:	a3a5      	add	r3, pc, #660	@ (adr r3, 8003a10 <main+0x11f8>)
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	e9cd 2300 	strd	r2, r3, [sp]
 8003782:	ed9f 7ba5 	vldr	d7, [pc, #660]	@ 8003a18 <main+0x1200>
 8003786:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 8003a00 <main+0x11e8>
 800378a:	ed9f 5b9f 	vldr	d5, [pc, #636]	@ 8003a08 <main+0x11f0>
 800378e:	ed9f 4b9e 	vldr	d4, [pc, #632]	@ 8003a08 <main+0x11f0>
 8003792:	ed9f 3ba3 	vldr	d3, [pc, #652]	@ 8003a20 <main+0x1208>
 8003796:	f001 fcfb 	bl	8005190 <PID_EG>
		  if(blue_silo_check)
 800379a:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8247 	beq.w	8003c32 <main+0x141a>
		  {
			  mode = BLUE_FIND_SILO;
 80037a4:	4bad      	ldr	r3, [pc, #692]	@ (8003a5c <main+0x1244>)
 80037a6:	220f      	movs	r2, #15
 80037a8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80037aa:	e242      	b.n	8003c32 <main+0x141a>

	  case BLUE_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80037ac:	2201      	movs	r2, #1
 80037ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037b2:	48a9      	ldr	r0, [pc, #676]	@ (8003a58 <main+0x1240>)
 80037b4:	f003 ffba 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037be:	48a6      	ldr	r0, [pc, #664]	@ (8003a58 <main+0x1240>)
 80037c0:	f003 ffb4 	bl	800772c <HAL_GPIO_WritePin>

		  placeBallInSilo(blue_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 80037c4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80037c8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80037cc:	ed93 0b00 	vldr	d0, [r3]
 80037d0:	ed93 1b02 	vldr	d1, [r3, #8]
 80037d4:	ed93 2b04 	vldr	d2, [r3, #16]
 80037d8:	a393      	add	r3, pc, #588	@ (adr r3, 8003a28 <main+0x1210>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	e9cd 2300 	strd	r2, r3, [sp]
 80037e2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8003a30 <main+0x1218>
 80037e6:	ed9f 6b86 	vldr	d6, [pc, #536]	@ 8003a00 <main+0x11e8>
 80037ea:	ed9f 5b87 	vldr	d5, [pc, #540]	@ 8003a08 <main+0x11f0>
 80037ee:	ed9f 4b86 	vldr	d4, [pc, #536]	@ 8003a08 <main+0x11f0>
 80037f2:	ed9f 3b83 	vldr	d3, [pc, #524]	@ 8003a00 <main+0x11e8>
 80037f6:	f002 fb5b 	bl	8005eb0 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 80037fa:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80037fe:	2b00      	cmp	r3, #0
 8003800:	dd03      	ble.n	800380a <main+0xff2>
 8003802:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003806:	2b0a      	cmp	r3, #10
 8003808:	dd09      	ble.n	800381e <main+0x1006>
 800380a:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 800380e:	2b00      	cmp	r3, #0
 8003810:	f340 8211 	ble.w	8003c36 <main+0x141e>
 8003814:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003818:	2b0a      	cmp	r3, #10
 800381a:	f300 820c 	bgt.w	8003c36 <main+0x141e>
		  {
			  setMotorSpeed(1, -2000);
 800381e:	ed9f 0b86 	vldr	d0, [pc, #536]	@ 8003a38 <main+0x1220>
 8003822:	2001      	movs	r0, #1
 8003824:	f7fd fc1a 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003828:	ed9f 0b83 	vldr	d0, [pc, #524]	@ 8003a38 <main+0x1220>
 800382c:	2002      	movs	r0, #2
 800382e:	f7fd fc15 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003832:	ed9f 0b83 	vldr	d0, [pc, #524]	@ 8003a40 <main+0x1228>
 8003836:	2007      	movs	r0, #7
 8003838:	f7fd fc10 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 800383c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003840:	f003 fbf8 	bl	8007034 <HAL_Delay>
			  mode = BLUE_STORAGE;
 8003844:	4b85      	ldr	r3, [pc, #532]	@ (8003a5c <main+0x1244>)
 8003846:	220c      	movs	r2, #12
 8003848:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800384a:	e1f4      	b.n	8003c36 <main+0x141e>

	  case BLUE_RETRY:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800384c:	2201      	movs	r2, #1
 800384e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003852:	4881      	ldr	r0, [pc, #516]	@ (8003a58 <main+0x1240>)
 8003854:	f003 ff6a 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800385e:	487e      	ldr	r0, [pc, #504]	@ (8003a58 <main+0x1240>)
 8003860:	f003 ff64 	bl	800772c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(blue_retry, blue_retry_parameters, blue_retry_numPoints);
 8003864:	f8b7 2758 	ldrh.w	r2, [r7, #1880]	@ 0x758
 8003868:	f107 0118 	add.w	r1, r7, #24
 800386c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fe15 	bl	80054a0 <PID_moveToCoordinate>
		  if(blue_retry_check)
 8003876:	f897 3746 	ldrb.w	r3, [r7, #1862]	@ 0x746
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 81dd 	beq.w	8003c3a <main+0x1422>
		  {
			  mode = BLUE_RETRY_STORAGE;
 8003880:	4b76      	ldr	r3, [pc, #472]	@ (8003a5c <main+0x1244>)
 8003882:	2211      	movs	r2, #17
 8003884:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003886:	e1d8      	b.n	8003c3a <main+0x1422>

	  case BLUE_RETRY_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800388e:	4872      	ldr	r0, [pc, #456]	@ (8003a58 <main+0x1240>)
 8003890:	f003 ff4c 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800389a:	486f      	ldr	r0, [pc, #444]	@ (8003a58 <main+0x1240>)
 800389c:	f003 ff46 	bl	800772c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80038a0:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8003a08 <main+0x11f0>
 80038a4:	2001      	movs	r0, #1
 80038a6:	f7fd fbd9 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80038aa:	ed9f 0b57 	vldr	d0, [pc, #348]	@ 8003a08 <main+0x11f0>
 80038ae:	2002      	movs	r0, #2
 80038b0:	f7fd fbd4 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80038b4:	ed9f 0b54 	vldr	d0, [pc, #336]	@ 8003a08 <main+0x11f0>
 80038b8:	2007      	movs	r0, #7
 80038ba:	f7fd fbcf 	bl	800105c <setMotorSpeed>
		  PID_EG(blue_retry_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80038be:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80038c2:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80038c6:	ed93 0b00 	vldr	d0, [r3]
 80038ca:	ed93 1b02 	vldr	d1, [r3, #8]
 80038ce:	ed93 2b04 	vldr	d2, [r3, #16]
 80038d2:	a35d      	add	r3, pc, #372	@ (adr r3, 8003a48 <main+0x1230>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	e9cd 2300 	strd	r2, r3, [sp]
 80038dc:	ed9f 7b54 	vldr	d7, [pc, #336]	@ 8003a30 <main+0x1218>
 80038e0:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8003a00 <main+0x11e8>
 80038e4:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 8003a08 <main+0x11f0>
 80038e8:	ed9f 4b47 	vldr	d4, [pc, #284]	@ 8003a08 <main+0x11f0>
 80038ec:	ed9f 3b4c 	vldr	d3, [pc, #304]	@ 8003a20 <main+0x1208>
 80038f0:	f001 fc4e 	bl	8005190 <PID_EG>
		  if(blue_retry_storage_check)
 80038f4:	f897 3745 	ldrb.w	r3, [r7, #1861]	@ 0x745
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 81a0 	beq.w	8003c3e <main+0x1426>
		  {
			  mode = BLUE_RETRY_FIND_BALL;
 80038fe:	4b57      	ldr	r3, [pc, #348]	@ (8003a5c <main+0x1244>)
 8003900:	2212      	movs	r2, #18
 8003902:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003904:	e19b      	b.n	8003c3e <main+0x1426>

	  case BLUE_RETRY_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003906:	2201      	movs	r2, #1
 8003908:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800390c:	4852      	ldr	r0, [pc, #328]	@ (8003a58 <main+0x1240>)
 800390e:	f003 ff0d 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003912:	2200      	movs	r2, #0
 8003914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003918:	484f      	ldr	r0, [pc, #316]	@ (8003a58 <main+0x1240>)
 800391a:	f003 ff07 	bl	800772c <HAL_GPIO_WritePin>

		  findAndTakeBall(blueRetryBall);
 800391e:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8003922:	4618      	mov	r0, r3
 8003924:	f002 fc34 	bl	8006190 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = BLUE_RETRY_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003928:	4b49      	ldr	r3, [pc, #292]	@ (8003a50 <main+0x1238>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <main+0x1128>
 8003930:	4b48      	ldr	r3, [pc, #288]	@ (8003a54 <main+0x123c>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d103      	bne.n	8003940 <main+0x1128>
		  {
			  mode = BLUE_RETRY_FACING_SILO;
 8003938:	4b48      	ldr	r3, [pc, #288]	@ (8003a5c <main+0x1244>)
 800393a:	2213      	movs	r2, #19
 800393c:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(blue_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 800393e:	e180      	b.n	8003c42 <main+0x142a>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 8003940:	4b43      	ldr	r3, [pc, #268]	@ (8003a50 <main+0x1238>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 817c 	bne.w	8003c42 <main+0x142a>
 800394a:	4b42      	ldr	r3, [pc, #264]	@ (8003a54 <main+0x123c>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 8177 	bne.w	8003c42 <main+0x142a>
			  throwTheBall(blue_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
 8003954:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003958:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800395c:	ed93 1b00 	vldr	d1, [r3]
 8003960:	ed93 2b02 	vldr	d2, [r3, #8]
 8003964:	ed93 7b04 	vldr	d7, [r3, #16]
 8003968:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8003a00 <main+0x11e8>
 800396c:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8003a08 <main+0x11f0>
 8003970:	ed9f 4b25 	vldr	d4, [pc, #148]	@ 8003a08 <main+0x11f0>
 8003974:	ed9f 3b22 	vldr	d3, [pc, #136]	@ 8003a00 <main+0x11e8>
 8003978:	eeb0 0a41 	vmov.f32	s0, s2
 800397c:	eef0 0a61 	vmov.f32	s1, s3
 8003980:	eeb0 1a42 	vmov.f32	s2, s4
 8003984:	eef0 1a62 	vmov.f32	s3, s5
 8003988:	eeb0 2a47 	vmov.f32	s4, s14
 800398c:	eef0 2a67 	vmov.f32	s5, s15
 8003990:	f002 fe86 	bl	80066a0 <throwTheBall>
		  break;
 8003994:	e155      	b.n	8003c42 <main+0x142a>

	  case BLUE_RETRY_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800399c:	482e      	ldr	r0, [pc, #184]	@ (8003a58 <main+0x1240>)
 800399e:	f003 fec5 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80039a2:	2201      	movs	r2, #1
 80039a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039a8:	482b      	ldr	r0, [pc, #172]	@ (8003a58 <main+0x1240>)
 80039aa:	f003 febf 	bl	800772c <HAL_GPIO_WritePin>

		  servo_write(120);
 80039ae:	2078      	movs	r0, #120	@ 0x78
 80039b0:	f001 fbd6 	bl	8005160 <servo_write>
		  PID_EG(blue_retry_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 80039b4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80039b8:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80039bc:	ed93 0b00 	vldr	d0, [r3]
 80039c0:	ed93 1b02 	vldr	d1, [r3, #8]
 80039c4:	ed93 2b04 	vldr	d2, [r3, #16]
 80039c8:	a311      	add	r3, pc, #68	@ (adr r3, 8003a10 <main+0x11f8>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	e9cd 2300 	strd	r2, r3, [sp]
 80039d2:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8003a18 <main+0x1200>
 80039d6:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8003a00 <main+0x11e8>
 80039da:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8003a08 <main+0x11f0>
 80039de:	ed9f 4b0a 	vldr	d4, [pc, #40]	@ 8003a08 <main+0x11f0>
 80039e2:	ed9f 3b0f 	vldr	d3, [pc, #60]	@ 8003a20 <main+0x1208>
 80039e6:	f001 fbd3 	bl	8005190 <PID_EG>
		  if(blue_retry_silo_check)
 80039ea:	f897 3744 	ldrb.w	r3, [r7, #1860]	@ 0x744
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8129 	beq.w	8003c46 <main+0x142e>
		  {
			  mode = BLUE_RETRY_FIND_SILO;
 80039f4:	4b19      	ldr	r3, [pc, #100]	@ (8003a5c <main+0x1244>)
 80039f6:	2214      	movs	r2, #20
 80039f8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80039fa:	e124      	b.n	8003c46 <main+0x142e>
 80039fc:	f3af 8000 	nop.w
 8003a00:	00000000 	.word	0x00000000
 8003a04:	3ff80000 	.word	0x3ff80000
	...
 8003a14:	40a77000 	.word	0x40a77000
 8003a18:	9999999a 	.word	0x9999999a
 8003a1c:	3fe99999 	.word	0x3fe99999
 8003a20:	cccccccd 	.word	0xcccccccd
 8003a24:	3ffccccc 	.word	0x3ffccccc
 8003a28:	00000000 	.word	0x00000000
 8003a2c:	40a38800 	.word	0x40a38800
 8003a30:	66666666 	.word	0x66666666
 8003a34:	3fe66666 	.word	0x3fe66666
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	c09f4000 	.word	0xc09f4000
 8003a40:	00000000 	.word	0x00000000
 8003a44:	c0a5e000 	.word	0xc0a5e000
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	40ab5800 	.word	0x40ab5800
 8003a50:	20000600 	.word	0x20000600
 8003a54:	2000057c 	.word	0x2000057c
 8003a58:	40020c00 	.word	0x40020c00
 8003a5c:	20000610 	.word	0x20000610

	  case BLUE_RETRY_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003a60:	2201      	movs	r2, #1
 8003a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a66:	4888      	ldr	r0, [pc, #544]	@ (8003c88 <main+0x1470>)
 8003a68:	f003 fe60 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a72:	4885      	ldr	r0, [pc, #532]	@ (8003c88 <main+0x1470>)
 8003a74:	f003 fe5a 	bl	800772c <HAL_GPIO_WritePin>

		  placeBallInSilo(blue_retry_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 8003a78:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003a7c:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003a80:	ed93 0b00 	vldr	d0, [r3]
 8003a84:	ed93 1b02 	vldr	d1, [r3, #8]
 8003a88:	ed93 2b04 	vldr	d2, [r3, #16]
 8003a8c:	a372      	add	r3, pc, #456	@ (adr r3, 8003c58 <main+0x1440>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	e9cd 2300 	strd	r2, r3, [sp]
 8003a96:	ed9f 7b72 	vldr	d7, [pc, #456]	@ 8003c60 <main+0x1448>
 8003a9a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8003c68 <main+0x1450>
 8003a9e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8003c70 <main+0x1458>
 8003aa2:	ed9f 4b73 	vldr	d4, [pc, #460]	@ 8003c70 <main+0x1458>
 8003aa6:	ed9f 3b70 	vldr	d3, [pc, #448]	@ 8003c68 <main+0x1450>
 8003aaa:	f002 fa01 	bl	8005eb0 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003aae:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	dd03      	ble.n	8003abe <main+0x12a6>
 8003ab6:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003aba:	2b0a      	cmp	r3, #10
 8003abc:	dd09      	ble.n	8003ad2 <main+0x12ba>
 8003abe:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f340 80c1 	ble.w	8003c4a <main+0x1432>
 8003ac8:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003acc:	2b0a      	cmp	r3, #10
 8003ace:	f300 80bc 	bgt.w	8003c4a <main+0x1432>
		  {
			  setMotorSpeed(1, -2000);
 8003ad2:	ed9f 0b69 	vldr	d0, [pc, #420]	@ 8003c78 <main+0x1460>
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7fd fac0 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003adc:	ed9f 0b66 	vldr	d0, [pc, #408]	@ 8003c78 <main+0x1460>
 8003ae0:	2002      	movs	r0, #2
 8003ae2:	f7fd fabb 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003ae6:	ed9f 0b66 	vldr	d0, [pc, #408]	@ 8003c80 <main+0x1468>
 8003aea:	2007      	movs	r0, #7
 8003aec:	f7fd fab6 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8003af0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003af4:	f003 fa9e 	bl	8007034 <HAL_Delay>
			  mode = BLUE_RETRY_STORAGE;
 8003af8:	4b64      	ldr	r3, [pc, #400]	@ (8003c8c <main+0x1474>)
 8003afa:	2211      	movs	r2, #17
 8003afc:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003afe:	e0a4      	b.n	8003c4a <main+0x1432>

	  case TES:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003b00:	2201      	movs	r2, #1
 8003b02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b06:	4860      	ldr	r0, [pc, #384]	@ (8003c88 <main+0x1470>)
 8003b08:	f003 fe10 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b12:	485d      	ldr	r0, [pc, #372]	@ (8003c88 <main+0x1470>)
 8003b14:	f003 fe0a 	bl	800772c <HAL_GPIO_WritePin>

		  placeBallInSilo(tes, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 8003b18:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003b1c:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8003b20:	ed93 0b00 	vldr	d0, [r3]
 8003b24:	ed93 1b02 	vldr	d1, [r3, #8]
 8003b28:	ed93 2b04 	vldr	d2, [r3, #16]
 8003b2c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c58 <main+0x1440>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	e9cd 2300 	strd	r2, r3, [sp]
 8003b36:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 8003c60 <main+0x1448>
 8003b3a:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8003c68 <main+0x1450>
 8003b3e:	ed9f 5b4c 	vldr	d5, [pc, #304]	@ 8003c70 <main+0x1458>
 8003b42:	ed9f 4b4b 	vldr	d4, [pc, #300]	@ 8003c70 <main+0x1458>
 8003b46:	ed9f 3b48 	vldr	d3, [pc, #288]	@ 8003c68 <main+0x1450>
 8003b4a:	f002 f9b1 	bl	8005eb0 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003b4e:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dd03      	ble.n	8003b5e <main+0x1346>
 8003b56:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003b5a:	2b0a      	cmp	r3, #10
 8003b5c:	dd07      	ble.n	8003b6e <main+0x1356>
 8003b5e:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	dd73      	ble.n	8003c4e <main+0x1436>
 8003b66:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	dc6f      	bgt.n	8003c4e <main+0x1436>
		  {
			  setMotorSpeed(1, -2000);
 8003b6e:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8003c78 <main+0x1460>
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7fd fa72 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003b78:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8003c78 <main+0x1460>
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f7fd fa6d 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003b82:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8003c80 <main+0x1468>
 8003b86:	2007      	movs	r0, #7
 8003b88:	f7fd fa68 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8003b8c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003b90:	f003 fa50 	bl	8007034 <HAL_Delay>
			  mode = VOID;
 8003b94:	4b3d      	ldr	r3, [pc, #244]	@ (8003c8c <main+0x1474>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003b9a:	e058      	b.n	8003c4e <main+0x1436>

	  case TES2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ba2:	4839      	ldr	r0, [pc, #228]	@ (8003c88 <main+0x1470>)
 8003ba4:	f003 fdc2 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bae:	4836      	ldr	r0, [pc, #216]	@ (8003c88 <main+0x1470>)
 8003bb0:	f003 fdbc 	bl	800772c <HAL_GPIO_WritePin>
		  break;
 8003bb4:	e04c      	b.n	8003c50 <main+0x1438>
	  default:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bbc:	4832      	ldr	r0, [pc, #200]	@ (8003c88 <main+0x1470>)
 8003bbe:	f003 fdb5 	bl	800772c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bc8:	482f      	ldr	r0, [pc, #188]	@ (8003c88 <main+0x1470>)
 8003bca:	f003 fdaf 	bl	800772c <HAL_GPIO_WritePin>

//		  trying(2500, 0, 0, 0.0, 3.0);
		  Inverse_Kinematics(0, 0, 0);
 8003bce:	ed9f 2b28 	vldr	d2, [pc, #160]	@ 8003c70 <main+0x1458>
 8003bd2:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003c70 <main+0x1458>
 8003bd6:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8003c70 <main+0x1458>
 8003bda:	f7fd fab5 	bl	8001148 <Inverse_Kinematics>
		  setMotorSpeed(1, 0);
 8003bde:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8003c70 <main+0x1458>
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fd fa3a 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8003be8:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 8003c70 <main+0x1458>
 8003bec:	2002      	movs	r0, #2
 8003bee:	f7fd fa35 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8003bf2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8003c70 <main+0x1458>
 8003bf6:	2007      	movs	r0, #7
 8003bf8:	f7fd fa30 	bl	800105c <setMotorSpeed>
		  break;
 8003bfc:	e028      	b.n	8003c50 <main+0x1438>
		  break;
 8003bfe:	bf00      	nop
 8003c00:	e026      	b.n	8003c50 <main+0x1438>
		  break;
 8003c02:	bf00      	nop
 8003c04:	e024      	b.n	8003c50 <main+0x1438>
		  break;
 8003c06:	bf00      	nop
 8003c08:	e022      	b.n	8003c50 <main+0x1438>
		  break;
 8003c0a:	bf00      	nop
 8003c0c:	e020      	b.n	8003c50 <main+0x1438>
		  break;
 8003c0e:	bf00      	nop
 8003c10:	e01e      	b.n	8003c50 <main+0x1438>
		  break;
 8003c12:	bf00      	nop
 8003c14:	e01c      	b.n	8003c50 <main+0x1438>
		  break;
 8003c16:	bf00      	nop
 8003c18:	e01a      	b.n	8003c50 <main+0x1438>
		  break;
 8003c1a:	bf00      	nop
 8003c1c:	e018      	b.n	8003c50 <main+0x1438>
		  break;
 8003c1e:	bf00      	nop
 8003c20:	e016      	b.n	8003c50 <main+0x1438>
		  break;
 8003c22:	bf00      	nop
 8003c24:	e014      	b.n	8003c50 <main+0x1438>
		  break;
 8003c26:	bf00      	nop
 8003c28:	e012      	b.n	8003c50 <main+0x1438>
		  break;
 8003c2a:	bf00      	nop
 8003c2c:	e010      	b.n	8003c50 <main+0x1438>
		  break;
 8003c2e:	bf00      	nop
 8003c30:	e00e      	b.n	8003c50 <main+0x1438>
		  break;
 8003c32:	bf00      	nop
 8003c34:	e00c      	b.n	8003c50 <main+0x1438>
		  break;
 8003c36:	bf00      	nop
 8003c38:	e00a      	b.n	8003c50 <main+0x1438>
		  break;
 8003c3a:	bf00      	nop
 8003c3c:	e008      	b.n	8003c50 <main+0x1438>
		  break;
 8003c3e:	bf00      	nop
 8003c40:	e006      	b.n	8003c50 <main+0x1438>
		  break;
 8003c42:	bf00      	nop
 8003c44:	e004      	b.n	8003c50 <main+0x1438>
		  break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <main+0x1438>
		  break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <main+0x1438>
		  break;
 8003c4e:	bf00      	nop
	  }
	  lcd_clear();
 8003c50:	f7fe fc4a 	bl	80024e8 <lcd_clear>
  {
 8003c54:	f7fe bfef 	b.w	8002c36 <main+0x41e>
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	40a38800 	.word	0x40a38800
 8003c60:	66666666 	.word	0x66666666
 8003c64:	3fe66666 	.word	0x3fe66666
 8003c68:	00000000 	.word	0x00000000
 8003c6c:	3ff80000 	.word	0x3ff80000
	...
 8003c7c:	c09f4000 	.word	0xc09f4000
 8003c80:	00000000 	.word	0x00000000
 8003c84:	c0a5e000 	.word	0xc0a5e000
 8003c88:	40020c00 	.word	0x40020c00
 8003c8c:	20000610 	.word	0x20000610

08003c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b094      	sub	sp, #80	@ 0x50
 8003c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c96:	f107 0320 	add.w	r3, r7, #32
 8003c9a:	2230      	movs	r2, #48	@ 0x30
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f008 fcbb 	bl	800c61a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	4b28      	ldr	r3, [pc, #160]	@ (8003d5c <SystemClock_Config+0xcc>)
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	4a27      	ldr	r2, [pc, #156]	@ (8003d5c <SystemClock_Config+0xcc>)
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc4:	4b25      	ldr	r3, [pc, #148]	@ (8003d5c <SystemClock_Config+0xcc>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <SystemClock_Config+0xd0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a21      	ldr	r2, [pc, #132]	@ (8003d60 <SystemClock_Config+0xd0>)
 8003cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <SystemClock_Config+0xd0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d00:	2308      	movs	r3, #8
 8003d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003d04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003d08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d0e:	2307      	movs	r3, #7
 8003d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d12:	f107 0320 	add.w	r3, r7, #32
 8003d16:	4618      	mov	r0, r3
 8003d18:	f004 f9d8 	bl	80080cc <HAL_RCC_OscConfig>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003d22:	f000 fdb9 	bl	8004898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d26:	230f      	movs	r3, #15
 8003d28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003d36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	2105      	movs	r1, #5
 8003d44:	4618      	mov	r0, r3
 8003d46:	f004 fc39 	bl	80085bc <HAL_RCC_ClockConfig>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003d50:	f000 fda2 	bl	8004898 <Error_Handler>
  }
}
 8003d54:	bf00      	nop
 8003d56:	3750      	adds	r7, #80	@ 0x50
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000

08003d64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003d68:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d6a:	4a13      	ldr	r2, [pc, #76]	@ (8003db8 <MX_I2C2_Init+0x54>)
 8003d6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003d6e:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d70:	4a12      	ldr	r2, [pc, #72]	@ (8003dbc <MX_I2C2_Init+0x58>)
 8003d72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d74:	4b0f      	ldr	r3, [pc, #60]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d80:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003d8e:	4b09      	ldr	r3, [pc, #36]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d94:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003da0:	4804      	ldr	r0, [pc, #16]	@ (8003db4 <MX_I2C2_Init+0x50>)
 8003da2:	f003 fcf5 	bl	8007790 <HAL_I2C_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003dac:	f000 fd74 	bl	8004898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200002cc 	.word	0x200002cc
 8003db8:	40005800 	.word	0x40005800
 8003dbc:	000186a0 	.word	0x000186a0

08003dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b096      	sub	sp, #88	@ 0x58
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	611a      	str	r2, [r3, #16]
 8003dee:	615a      	str	r2, [r3, #20]
 8003df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003df2:	1d3b      	adds	r3, r7, #4
 8003df4:	2220      	movs	r2, #32
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f008 fc0e 	bl	800c61a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dfe:	4b50      	ldr	r3, [pc, #320]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e00:	4a50      	ldr	r2, [pc, #320]	@ (8003f44 <MX_TIM1_Init+0x184>)
 8003e02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8003e04:	4b4e      	ldr	r3, [pc, #312]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e06:	2214      	movs	r2, #20
 8003e08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 8003e10:	4b4b      	ldr	r3, [pc, #300]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e12:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e18:	4b49      	ldr	r3, [pc, #292]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e1e:	4b48      	ldr	r3, [pc, #288]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e24:	4b46      	ldr	r3, [pc, #280]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e2a:	4845      	ldr	r0, [pc, #276]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e2c:	f004 fde6 	bl	80089fc <HAL_TIM_Base_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003e36:	f000 fd2f 	bl	8004898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003e44:	4619      	mov	r1, r3
 8003e46:	483e      	ldr	r0, [pc, #248]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e48:	f005 f948 	bl	80090dc <HAL_TIM_ConfigClockSource>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003e52:	f000 fd21 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e56:	483a      	ldr	r0, [pc, #232]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e58:	f004 fe1f 	bl	8008a9a <HAL_TIM_PWM_Init>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003e62:	f000 fd19 	bl	8004898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e72:	4619      	mov	r1, r3
 8003e74:	4832      	ldr	r0, [pc, #200]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003e76:	f005 fd47 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003e80:	f000 fd0a 	bl	8004898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e84:	2360      	movs	r3, #96	@ 0x60
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e90:	2300      	movs	r3, #0
 8003e92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4825      	ldr	r0, [pc, #148]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003eaa:	f005 f855 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003eb4:	f000 fcf0 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	481f      	ldr	r0, [pc, #124]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003ec2:	f005 f849 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003ecc:	f000 fce4 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4819      	ldr	r0, [pc, #100]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003eda:	f005 f83d 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003ee4:	f000 fcd8 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eec:	220c      	movs	r2, #12
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4813      	ldr	r0, [pc, #76]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003ef2:	f005 f831 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003efc:	f000 fccc 	bl	8004898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4807      	ldr	r0, [pc, #28]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003f24:	f005 fd6c 	bl	8009a00 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003f2e:	f000 fcb3 	bl	8004898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f32:	4803      	ldr	r0, [pc, #12]	@ (8003f40 <MX_TIM1_Init+0x180>)
 8003f34:	f002 fd0a 	bl	800694c <HAL_TIM_MspPostInit>

}
 8003f38:	bf00      	nop
 8003f3a:	3758      	adds	r7, #88	@ 0x58
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000320 	.word	0x20000320
 8003f44:	40010000 	.word	0x40010000

08003f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08e      	sub	sp, #56	@ 0x38
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
 8003f74:	615a      	str	r2, [r3, #20]
 8003f76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f78:	4b33      	ldr	r3, [pc, #204]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8003f80:	4b31      	ldr	r3, [pc, #196]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003f82:	f240 628f 	movw	r2, #1679	@ 0x68f
 8003f86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f88:	4b2f      	ldr	r3, [pc, #188]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003f90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f96:	4b2c      	ldr	r3, [pc, #176]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fa2:	4829      	ldr	r0, [pc, #164]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003fa4:	f004 fd2a 	bl	80089fc <HAL_TIM_Base_Init>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003fae:	f000 fc73 	bl	8004898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4822      	ldr	r0, [pc, #136]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003fc0:	f005 f88c 	bl	80090dc <HAL_TIM_ConfigClockSource>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003fca:	f000 fc65 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fce:	481e      	ldr	r0, [pc, #120]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003fd0:	f004 fd63 	bl	8008a9a <HAL_TIM_PWM_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003fda:	f000 fc5d 	bl	8004898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fe6:	f107 0320 	add.w	r3, r7, #32
 8003fea:	4619      	mov	r1, r3
 8003fec:	4816      	ldr	r0, [pc, #88]	@ (8004048 <MX_TIM2_Init+0x100>)
 8003fee:	f005 fc8b 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003ff8:	f000 fc4e 	bl	8004898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ffc:	2360      	movs	r3, #96	@ 0x60
 8003ffe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	2208      	movs	r2, #8
 8004010:	4619      	mov	r1, r3
 8004012:	480d      	ldr	r0, [pc, #52]	@ (8004048 <MX_TIM2_Init+0x100>)
 8004014:	f004 ffa0 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800401e:	f000 fc3b 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	220c      	movs	r2, #12
 8004026:	4619      	mov	r1, r3
 8004028:	4807      	ldr	r0, [pc, #28]	@ (8004048 <MX_TIM2_Init+0x100>)
 800402a:	f004 ff95 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004034:	f000 fc30 	bl	8004898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004038:	4803      	ldr	r0, [pc, #12]	@ (8004048 <MX_TIM2_Init+0x100>)
 800403a:	f002 fc87 	bl	800694c <HAL_TIM_MspPostInit>

}
 800403e:	bf00      	nop
 8004040:	3738      	adds	r7, #56	@ 0x38
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000368 	.word	0x20000368

0800404c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b096      	sub	sp, #88	@ 0x58
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004052:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800406a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	611a      	str	r2, [r3, #16]
 800407a:	615a      	str	r2, [r3, #20]
 800407c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	2220      	movs	r2, #32
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f008 fac8 	bl	800c61a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800408a:	4b50      	ldr	r3, [pc, #320]	@ (80041cc <MX_TIM8_Init+0x180>)
 800408c:	4a50      	ldr	r2, [pc, #320]	@ (80041d0 <MX_TIM8_Init+0x184>)
 800408e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20;
 8004090:	4b4e      	ldr	r3, [pc, #312]	@ (80041cc <MX_TIM8_Init+0x180>)
 8004092:	2214      	movs	r2, #20
 8004094:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004096:	4b4d      	ldr	r3, [pc, #308]	@ (80041cc <MX_TIM8_Init+0x180>)
 8004098:	2200      	movs	r2, #0
 800409a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 800409c:	4b4b      	ldr	r3, [pc, #300]	@ (80041cc <MX_TIM8_Init+0x180>)
 800409e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80040a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a4:	4b49      	ldr	r3, [pc, #292]	@ (80041cc <MX_TIM8_Init+0x180>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040aa:	4b48      	ldr	r3, [pc, #288]	@ (80041cc <MX_TIM8_Init+0x180>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b0:	4b46      	ldr	r3, [pc, #280]	@ (80041cc <MX_TIM8_Init+0x180>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80040b6:	4845      	ldr	r0, [pc, #276]	@ (80041cc <MX_TIM8_Init+0x180>)
 80040b8:	f004 fca0 	bl	80089fc <HAL_TIM_Base_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80040c2:	f000 fbe9 	bl	8004898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80040cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80040d0:	4619      	mov	r1, r3
 80040d2:	483e      	ldr	r0, [pc, #248]	@ (80041cc <MX_TIM8_Init+0x180>)
 80040d4:	f005 f802 	bl	80090dc <HAL_TIM_ConfigClockSource>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80040de:	f000 fbdb 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040e2:	483a      	ldr	r0, [pc, #232]	@ (80041cc <MX_TIM8_Init+0x180>)
 80040e4:	f004 fcd9 	bl	8008a9a <HAL_TIM_PWM_Init>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80040ee:	f000 fbd3 	bl	8004898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80040fe:	4619      	mov	r1, r3
 8004100:	4832      	ldr	r0, [pc, #200]	@ (80041cc <MX_TIM8_Init+0x180>)
 8004102:	f005 fc01 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800410c:	f000 fbc4 	bl	8004898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004110:	2360      	movs	r3, #96	@ 0x60
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004118:	2300      	movs	r3, #0
 800411a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800411c:	2300      	movs	r3, #0
 800411e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004120:	2300      	movs	r3, #0
 8004122:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004124:	2300      	movs	r3, #0
 8004126:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800412c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004130:	2200      	movs	r2, #0
 8004132:	4619      	mov	r1, r3
 8004134:	4825      	ldr	r0, [pc, #148]	@ (80041cc <MX_TIM8_Init+0x180>)
 8004136:	f004 ff0f 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004140:	f000 fbaa 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004148:	2204      	movs	r2, #4
 800414a:	4619      	mov	r1, r3
 800414c:	481f      	ldr	r0, [pc, #124]	@ (80041cc <MX_TIM8_Init+0x180>)
 800414e:	f004 ff03 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004158:	f000 fb9e 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800415c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004160:	2208      	movs	r2, #8
 8004162:	4619      	mov	r1, r3
 8004164:	4819      	ldr	r0, [pc, #100]	@ (80041cc <MX_TIM8_Init+0x180>)
 8004166:	f004 fef7 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8004170:	f000 fb92 	bl	8004898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004178:	220c      	movs	r2, #12
 800417a:	4619      	mov	r1, r3
 800417c:	4813      	ldr	r0, [pc, #76]	@ (80041cc <MX_TIM8_Init+0x180>)
 800417e:	f004 feeb 	bl	8008f58 <HAL_TIM_PWM_ConfigChannel>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8004188:	f000 fb86 	bl	8004898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800418c:	2300      	movs	r3, #0
 800418e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4807      	ldr	r0, [pc, #28]	@ (80041cc <MX_TIM8_Init+0x180>)
 80041b0:	f005 fc26 	bl	8009a00 <HAL_TIMEx_ConfigBreakDeadTime>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80041ba:	f000 fb6d 	bl	8004898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80041be:	4803      	ldr	r0, [pc, #12]	@ (80041cc <MX_TIM8_Init+0x180>)
 80041c0:	f002 fbc4 	bl	800694c <HAL_TIM_MspPostInit>

}
 80041c4:	bf00      	nop
 80041c6:	3758      	adds	r7, #88	@ 0x58
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	200003b0 	.word	0x200003b0
 80041d0:	40010400 	.word	0x40010400

080041d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 80041da:	4a12      	ldr	r2, [pc, #72]	@ (8004224 <MX_USART1_UART_Init+0x50>)
 80041dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 80041e0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80041e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 80041fa:	220c      	movs	r2, #12
 80041fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004204:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800420a:	4805      	ldr	r0, [pc, #20]	@ (8004220 <MX_USART1_UART_Init+0x4c>)
 800420c:	f005 fc5e 	bl	8009acc <HAL_UART_Init>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004216:	f000 fb3f 	bl	8004898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200003f8 	.word	0x200003f8
 8004224:	40011000 	.word	0x40011000

08004228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800422c:	4b11      	ldr	r3, [pc, #68]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <MX_USART2_UART_Init+0x50>)
 8004230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004232:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 8004234:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800423a:	4b0e      	ldr	r3, [pc, #56]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 800423c:	2200      	movs	r2, #0
 800423e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 8004242:	2200      	movs	r2, #0
 8004244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 8004248:	2200      	movs	r2, #0
 800424a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800424c:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 800424e:	220c      	movs	r2, #12
 8004250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004252:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004258:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 800425a:	2200      	movs	r2, #0
 800425c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800425e:	4805      	ldr	r0, [pc, #20]	@ (8004274 <MX_USART2_UART_Init+0x4c>)
 8004260:	f005 fc34 	bl	8009acc <HAL_UART_Init>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800426a:	f000 fb15 	bl	8004898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000440 	.word	0x20000440
 8004278:	40004400 	.word	0x40004400

0800427c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004280:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 8004282:	4a12      	ldr	r2, [pc, #72]	@ (80042cc <MX_USART3_UART_Init+0x50>)
 8004284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8004286:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 8004288:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800428c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800428e:	4b0e      	ldr	r3, [pc, #56]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 8004296:	2200      	movs	r2, #0
 8004298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800429a:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 800429c:	2200      	movs	r2, #0
 800429e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 80042a2:	220c      	movs	r2, #12
 80042a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042a6:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042b2:	4805      	ldr	r0, [pc, #20]	@ (80042c8 <MX_USART3_UART_Init+0x4c>)
 80042b4:	f005 fc0a 	bl	8009acc <HAL_UART_Init>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80042be:	f000 faeb 	bl	8004898 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000488 	.word	0x20000488
 80042cc:	40004800 	.word	0x40004800

080042d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08c      	sub	sp, #48	@ 0x30
 80042d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d6:	f107 031c 	add.w	r3, r7, #28
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	4bbd      	ldr	r3, [pc, #756]	@ (80045e0 <MX_GPIO_Init+0x310>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	4abc      	ldr	r2, [pc, #752]	@ (80045e0 <MX_GPIO_Init+0x310>)
 80042f0:	f043 0310 	orr.w	r3, r3, #16
 80042f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f6:	4bba      	ldr	r3, [pc, #744]	@ (80045e0 <MX_GPIO_Init+0x310>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	4bb6      	ldr	r3, [pc, #728]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	4ab5      	ldr	r2, [pc, #724]	@ (80045e0 <MX_GPIO_Init+0x310>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6313      	str	r3, [r2, #48]	@ 0x30
 8004312:	4bb3      	ldr	r3, [pc, #716]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	4baf      	ldr	r3, [pc, #700]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	4aae      	ldr	r2, [pc, #696]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432c:	6313      	str	r3, [r2, #48]	@ 0x30
 800432e:	4bac      	ldr	r3, [pc, #688]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	4ba8      	ldr	r3, [pc, #672]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	4aa7      	ldr	r2, [pc, #668]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6313      	str	r3, [r2, #48]	@ 0x30
 800434a:	4ba5      	ldr	r3, [pc, #660]	@ (80045e0 <MX_GPIO_Init+0x310>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	4ba1      	ldr	r3, [pc, #644]	@ (80045e0 <MX_GPIO_Init+0x310>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	4aa0      	ldr	r2, [pc, #640]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	6313      	str	r3, [r2, #48]	@ 0x30
 8004366:	4b9e      	ldr	r3, [pc, #632]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	4b9a      	ldr	r3, [pc, #616]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	4a99      	ldr	r2, [pc, #612]	@ (80045e0 <MX_GPIO_Init+0x310>)
 800437c:	f043 0308 	orr.w	r3, r3, #8
 8004380:	6313      	str	r3, [r2, #48]	@ 0x30
 8004382:	4b97      	ldr	r3, [pc, #604]	@ (80045e0 <MX_GPIO_Init+0x310>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800438e:	2200      	movs	r2, #0
 8004390:	217f      	movs	r1, #127	@ 0x7f
 8004392:	4894      	ldr	r0, [pc, #592]	@ (80045e4 <MX_GPIO_Init+0x314>)
 8004394:	f003 f9ca 	bl	800772c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8004398:	2200      	movs	r2, #0
 800439a:	f24f 0130 	movw	r1, #61488	@ 0xf030
 800439e:	4892      	ldr	r0, [pc, #584]	@ (80045e8 <MX_GPIO_Init+0x318>)
 80043a0:	f003 f9c4 	bl	800772c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80043a4:	2200      	movs	r2, #0
 80043a6:	2103      	movs	r1, #3
 80043a8:	4890      	ldr	r0, [pc, #576]	@ (80045ec <MX_GPIO_Init+0x31c>)
 80043aa:	f003 f9bf 	bl	800772c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80043ae:	2200      	movs	r2, #0
 80043b0:	f24c 011f 	movw	r1, #49183	@ 0xc01f
 80043b4:	488e      	ldr	r0, [pc, #568]	@ (80045f0 <MX_GPIO_Init+0x320>)
 80043b6:	f003 f9b9 	bl	800772c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80043ba:	237f      	movs	r3, #127	@ 0x7f
 80043bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80043be:	2311      	movs	r3, #17
 80043c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c6:	2303      	movs	r3, #3
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043ca:	f107 031c 	add.w	r3, r7, #28
 80043ce:	4619      	mov	r1, r3
 80043d0:	4884      	ldr	r0, [pc, #528]	@ (80045e4 <MX_GPIO_Init+0x314>)
 80043d2:	f002 fff7 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80043d6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80043da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80043dc:	2311      	movs	r3, #17
 80043de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e8:	f107 031c 	add.w	r3, r7, #28
 80043ec:	4619      	mov	r1, r3
 80043ee:	487e      	ldr	r0, [pc, #504]	@ (80045e8 <MX_GPIO_Init+0x318>)
 80043f0:	f002 ffe8 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 80043f4:	2309      	movs	r3, #9
 80043f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f8:	2300      	movs	r3, #0
 80043fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043fc:	2301      	movs	r3, #1
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	4619      	mov	r1, r3
 8004406:	4878      	ldr	r0, [pc, #480]	@ (80045e8 <MX_GPIO_Init+0x318>)
 8004408:	f002 ffdc 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 800440c:	2306      	movs	r3, #6
 800440e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004410:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004416:	2301      	movs	r3, #1
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800441a:	f107 031c 	add.w	r3, r7, #28
 800441e:	4619      	mov	r1, r3
 8004420:	4871      	ldr	r0, [pc, #452]	@ (80045e8 <MX_GPIO_Init+0x318>)
 8004422:	f002 ffcf 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8004426:	f244 0301 	movw	r3, #16385	@ 0x4001
 800442a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800442c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004432:	2301      	movs	r3, #1
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f107 031c 	add.w	r3, r7, #28
 800443a:	4619      	mov	r1, r3
 800443c:	486d      	ldr	r0, [pc, #436]	@ (80045f4 <MX_GPIO_Init+0x324>)
 800443e:	f002 ffc1 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8004442:	f248 4302 	movw	r3, #33794	@ 0x8402
 8004446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004450:	f107 031c 	add.w	r3, r7, #28
 8004454:	4619      	mov	r1, r3
 8004456:	4867      	ldr	r0, [pc, #412]	@ (80045f4 <MX_GPIO_Init+0x324>)
 8004458:	f002 ffb4 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 800445c:	2340      	movs	r3, #64	@ 0x40
 800445e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004460:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004466:	2301      	movs	r3, #1
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 800446a:	f107 031c 	add.w	r3, r7, #28
 800446e:	4619      	mov	r1, r3
 8004470:	4860      	ldr	r0, [pc, #384]	@ (80045f4 <MX_GPIO_Init+0x324>)
 8004472:	f002 ffa7 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8004476:	f241 0330 	movw	r3, #4144	@ 0x1030
 800447a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800447c:	2311      	movs	r3, #17
 800447e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004484:	2303      	movs	r3, #3
 8004486:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004488:	f107 031c 	add.w	r3, r7, #28
 800448c:	4619      	mov	r1, r3
 800448e:	4856      	ldr	r0, [pc, #344]	@ (80045e8 <MX_GPIO_Init+0x318>)
 8004490:	f002 ff98 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004494:	2303      	movs	r3, #3
 8004496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004498:	2311      	movs	r3, #17
 800449a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a0:	2303      	movs	r3, #3
 80044a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a4:	f107 031c 	add.w	r3, r7, #28
 80044a8:	4619      	mov	r1, r3
 80044aa:	4850      	ldr	r0, [pc, #320]	@ (80045ec <MX_GPIO_Init+0x31c>)
 80044ac:	f002 ff8a 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_3_Pin;
 80044b0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80044b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80044ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044bc:	2301      	movs	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044c0:	f107 031c 	add.w	r3, r7, #28
 80044c4:	4619      	mov	r1, r3
 80044c6:	4847      	ldr	r0, [pc, #284]	@ (80045e4 <MX_GPIO_Init+0x314>)
 80044c8:	f002 ff7c 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 80044cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80044d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d8:	2301      	movs	r3, #1
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 80044dc:	f107 031c 	add.w	r3, r7, #28
 80044e0:	4619      	mov	r1, r3
 80044e2:	4842      	ldr	r0, [pc, #264]	@ (80045ec <MX_GPIO_Init+0x31c>)
 80044e4:	f002 ff6e 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 80044e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044f2:	2301      	movs	r3, #1
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 80044f6:	f107 031c 	add.w	r3, r7, #28
 80044fa:	4619      	mov	r1, r3
 80044fc:	483c      	ldr	r0, [pc, #240]	@ (80045f0 <MX_GPIO_Init+0x320>)
 80044fe:	f002 ff61 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 8004502:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004508:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800450c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800450e:	2301      	movs	r3, #1
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 8004512:	f107 031c 	add.w	r3, r7, #28
 8004516:	4619      	mov	r1, r3
 8004518:	4835      	ldr	r0, [pc, #212]	@ (80045f0 <MX_GPIO_Init+0x320>)
 800451a:	f002 ff53 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800451e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004524:	2301      	movs	r3, #1
 8004526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004528:	2302      	movs	r3, #2
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452c:	2300      	movs	r3, #0
 800452e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004530:	f107 031c 	add.w	r3, r7, #28
 8004534:	4619      	mov	r1, r3
 8004536:	482e      	ldr	r0, [pc, #184]	@ (80045f0 <MX_GPIO_Init+0x320>)
 8004538:	f002 ff44 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800453c:	231f      	movs	r3, #31
 800453e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004540:	2311      	movs	r3, #17
 8004542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800454c:	f107 031c 	add.w	r3, r7, #28
 8004550:	4619      	mov	r1, r3
 8004552:	4827      	ldr	r0, [pc, #156]	@ (80045f0 <MX_GPIO_Init+0x320>)
 8004554:	f002 ff36 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 8004558:	2328      	movs	r3, #40	@ 0x28
 800455a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800455c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004562:	2301      	movs	r3, #1
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004566:	f107 031c 	add.w	r3, r7, #28
 800456a:	4619      	mov	r1, r3
 800456c:	481f      	ldr	r0, [pc, #124]	@ (80045ec <MX_GPIO_Init+0x31c>)
 800456e:	f002 ff29 	bl	80073c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8004572:	2310      	movs	r3, #16
 8004574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800457a:	2301      	movs	r3, #1
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	4619      	mov	r1, r3
 8004584:	4819      	ldr	r0, [pc, #100]	@ (80045ec <MX_GPIO_Init+0x31c>)
 8004586:	f002 ff1d 	bl	80073c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	2006      	movs	r0, #6
 8004590:	f002 fe4f 	bl	8007232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004594:	2006      	movs	r0, #6
 8004596:	f002 fe68 	bl	800726a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	2007      	movs	r0, #7
 80045a0:	f002 fe47 	bl	8007232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80045a4:	2007      	movs	r0, #7
 80045a6:	f002 fe60 	bl	800726a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	2008      	movs	r0, #8
 80045b0:	f002 fe3f 	bl	8007232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80045b4:	2008      	movs	r0, #8
 80045b6:	f002 fe58 	bl	800726a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	2009      	movs	r0, #9
 80045c0:	f002 fe37 	bl	8007232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045c4:	2009      	movs	r0, #9
 80045c6:	f002 fe50 	bl	800726a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	2017      	movs	r0, #23
 80045d0:	f002 fe2f 	bl	8007232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045d4:	2017      	movs	r0, #23
 80045d6:	f002 fe48 	bl	800726a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	e00c      	b.n	80045f8 <MX_GPIO_Init+0x328>
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40020800 	.word	0x40020800
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40020c00 	.word	0x40020c00
 80045f4:	40020000 	.word	0x40020000
 80045f8:	2100      	movs	r1, #0
 80045fa:	2028      	movs	r0, #40	@ 0x28
 80045fc:	f002 fe19 	bl	8007232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004600:	2028      	movs	r0, #40	@ 0x28
 8004602:	f002 fe32 	bl	800726a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004606:	bf00      	nop
 8004608:	3730      	adds	r7, #48	@ 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop

08004610 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a8b      	ldr	r2, [pc, #556]	@ (800484c <HAL_UART_RxCpltCallback+0x23c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d15a      	bne.n	80046d8 <HAL_UART_RxCpltCallback+0xc8>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8004622:	4b8b      	ldr	r3, [pc, #556]	@ (8004850 <HAL_UART_RxCpltCallback+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a8b      	ldr	r2, [pc, #556]	@ (8004854 <HAL_UART_RxCpltCallback+0x244>)
 8004628:	5cd3      	ldrb	r3, [r2, r3]
 800462a:	2b0d      	cmp	r3, #13
 800462c:	d005      	beq.n	800463a <HAL_UART_RxCpltCallback+0x2a>
 800462e:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_UART_RxCpltCallback+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a88      	ldr	r2, [pc, #544]	@ (8004854 <HAL_UART_RxCpltCallback+0x244>)
 8004634:	5cd3      	ldrb	r3, [r2, r3]
 8004636:	2b0a      	cmp	r3, #10
 8004638:	d139      	bne.n	80046ae <HAL_UART_RxCpltCallback+0x9e>
		{
			receive[rxIndex] = '\0';
 800463a:	4b85      	ldr	r3, [pc, #532]	@ (8004850 <HAL_UART_RxCpltCallback+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a85      	ldr	r2, [pc, #532]	@ (8004854 <HAL_UART_RxCpltCallback+0x244>)
 8004640:	2100      	movs	r1, #0
 8004642:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8004644:	4984      	ldr	r1, [pc, #528]	@ (8004858 <HAL_UART_RxCpltCallback+0x248>)
 8004646:	4883      	ldr	r0, [pc, #524]	@ (8004854 <HAL_UART_RxCpltCallback+0x244>)
 8004648:	f008 f802 	bl	800c650 <strtok>
 800464c:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 800464e:	4b83      	ldr	r3, [pc, #524]	@ (800485c <HAL_UART_RxCpltCallback+0x24c>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004654:	e015      	b.n	8004682 <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8004656:	4b81      	ldr	r3, [pc, #516]	@ (800485c <HAL_UART_RxCpltCallback+0x24c>)
 8004658:	681c      	ldr	r4, [r3, #0]
 800465a:	1c63      	adds	r3, r4, #1
 800465c:	4a7f      	ldr	r2, [pc, #508]	@ (800485c <HAL_UART_RxCpltCallback+0x24c>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	6978      	ldr	r0, [r7, #20]
 8004662:	f006 f9a7 	bl	800a9b4 <atof>
 8004666:	eeb0 7a40 	vmov.f32	s14, s0
 800466a:	eef0 7a60 	vmov.f32	s15, s1
 800466e:	4a7c      	ldr	r2, [pc, #496]	@ (8004860 <HAL_UART_RxCpltCallback+0x250>)
 8004670:	00e3      	lsls	r3, r4, #3
 8004672:	4413      	add	r3, r2
 8004674:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8004678:	4977      	ldr	r1, [pc, #476]	@ (8004858 <HAL_UART_RxCpltCallback+0x248>)
 800467a:	2000      	movs	r0, #0
 800467c:	f007 ffe8 	bl	800c650 <strtok>
 8004680:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e6      	bne.n	8004656 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8004688:	2232      	movs	r2, #50	@ 0x32
 800468a:	2100      	movs	r1, #0
 800468c:	4871      	ldr	r0, [pc, #452]	@ (8004854 <HAL_UART_RxCpltCallback+0x244>)
 800468e:	f007 ffc4 	bl	800c61a <memset>
			rxIndex = 0;
 8004692:	4b6f      	ldr	r3, [pc, #444]	@ (8004850 <HAL_UART_RxCpltCallback+0x240>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8004698:	2201      	movs	r2, #1
 800469a:	496e      	ldr	r1, [pc, #440]	@ (8004854 <HAL_UART_RxCpltCallback+0x244>)
 800469c:	4871      	ldr	r0, [pc, #452]	@ (8004864 <HAL_UART_RxCpltCallback+0x254>)
 800469e:	f005 fa65 	bl	8009b6c <HAL_UART_Receive_IT>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d016      	beq.n	80046d6 <HAL_UART_RxCpltCallback+0xc6>
			{
				Error_Handler();
 80046a8:	f000 f8f6 	bl	8004898 <Error_Handler>
		{
 80046ac:	e013      	b.n	80046d6 <HAL_UART_RxCpltCallback+0xc6>
			}
		}
		else
		{
			rxIndex++;
 80046ae:	4b68      	ldr	r3, [pc, #416]	@ (8004850 <HAL_UART_RxCpltCallback+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a66      	ldr	r2, [pc, #408]	@ (8004850 <HAL_UART_RxCpltCallback+0x240>)
 80046b6:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1) != HAL_OK)
 80046b8:	4b65      	ldr	r3, [pc, #404]	@ (8004850 <HAL_UART_RxCpltCallback+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a65      	ldr	r2, [pc, #404]	@ (8004854 <HAL_UART_RxCpltCallback+0x244>)
 80046be:	4413      	add	r3, r2
 80046c0:	2201      	movs	r2, #1
 80046c2:	4619      	mov	r1, r3
 80046c4:	4867      	ldr	r0, [pc, #412]	@ (8004864 <HAL_UART_RxCpltCallback+0x254>)
 80046c6:	f005 fa51 	bl	8009b6c <HAL_UART_Receive_IT>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_UART_RxCpltCallback+0xc8>
			{
				Error_Handler();
 80046d0:	f000 f8e2 	bl	8004898 <Error_Handler>
 80046d4:	e000      	b.n	80046d8 <HAL_UART_RxCpltCallback+0xc8>
		{
 80046d6:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a62      	ldr	r2, [pc, #392]	@ (8004868 <HAL_UART_RxCpltCallback+0x258>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d155      	bne.n	800478e <HAL_UART_RxCpltCallback+0x17e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 80046e2:	4b62      	ldr	r3, [pc, #392]	@ (800486c <HAL_UART_RxCpltCallback+0x25c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a62      	ldr	r2, [pc, #392]	@ (8004870 <HAL_UART_RxCpltCallback+0x260>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	2b0d      	cmp	r3, #13
 80046ec:	d005      	beq.n	80046fa <HAL_UART_RxCpltCallback+0xea>
 80046ee:	4b5f      	ldr	r3, [pc, #380]	@ (800486c <HAL_UART_RxCpltCallback+0x25c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004870 <HAL_UART_RxCpltCallback+0x260>)
 80046f4:	5cd3      	ldrb	r3, [r2, r3]
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d134      	bne.n	8004764 <HAL_UART_RxCpltCallback+0x154>
		{
			receiveCAM[indexCAM] = '\0';
 80046fa:	4b5c      	ldr	r3, [pc, #368]	@ (800486c <HAL_UART_RxCpltCallback+0x25c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004870 <HAL_UART_RxCpltCallback+0x260>)
 8004700:	2100      	movs	r1, #0
 8004702:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8004704:	4954      	ldr	r1, [pc, #336]	@ (8004858 <HAL_UART_RxCpltCallback+0x248>)
 8004706:	485a      	ldr	r0, [pc, #360]	@ (8004870 <HAL_UART_RxCpltCallback+0x260>)
 8004708:	f007 ffa2 	bl	800c650 <strtok>
 800470c:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 800470e:	4b59      	ldr	r3, [pc, #356]	@ (8004874 <HAL_UART_RxCpltCallback+0x264>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004714:	e010      	b.n	8004738 <HAL_UART_RxCpltCallback+0x128>
			{
				camera[dataindexCAM++] = atoi(token);
 8004716:	4b57      	ldr	r3, [pc, #348]	@ (8004874 <HAL_UART_RxCpltCallback+0x264>)
 8004718:	681c      	ldr	r4, [r3, #0]
 800471a:	1c63      	adds	r3, r4, #1
 800471c:	4a55      	ldr	r2, [pc, #340]	@ (8004874 <HAL_UART_RxCpltCallback+0x264>)
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	6938      	ldr	r0, [r7, #16]
 8004722:	f006 f94a 	bl	800a9ba <atoi>
 8004726:	4603      	mov	r3, r0
 8004728:	4a53      	ldr	r2, [pc, #332]	@ (8004878 <HAL_UART_RxCpltCallback+0x268>)
 800472a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 800472e:	494a      	ldr	r1, [pc, #296]	@ (8004858 <HAL_UART_RxCpltCallback+0x248>)
 8004730:	2000      	movs	r0, #0
 8004732:	f007 ff8d 	bl	800c650 <strtok>
 8004736:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1eb      	bne.n	8004716 <HAL_UART_RxCpltCallback+0x106>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 800473e:	2232      	movs	r2, #50	@ 0x32
 8004740:	2100      	movs	r1, #0
 8004742:	484b      	ldr	r0, [pc, #300]	@ (8004870 <HAL_UART_RxCpltCallback+0x260>)
 8004744:	f007 ff69 	bl	800c61a <memset>
			indexCAM = 0;
 8004748:	4b48      	ldr	r3, [pc, #288]	@ (800486c <HAL_UART_RxCpltCallback+0x25c>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 800474e:	2201      	movs	r2, #1
 8004750:	4947      	ldr	r1, [pc, #284]	@ (8004870 <HAL_UART_RxCpltCallback+0x260>)
 8004752:	484a      	ldr	r0, [pc, #296]	@ (800487c <HAL_UART_RxCpltCallback+0x26c>)
 8004754:	f005 fa0a 	bl	8009b6c <HAL_UART_Receive_IT>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_UART_RxCpltCallback+0x17c>
			{
				Error_Handler();
 800475e:	f000 f89b 	bl	8004898 <Error_Handler>
		{
 8004762:	e013      	b.n	800478c <HAL_UART_RxCpltCallback+0x17c>
			}
		}
		else
		{
			indexCAM++;
 8004764:	4b41      	ldr	r3, [pc, #260]	@ (800486c <HAL_UART_RxCpltCallback+0x25c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	4a40      	ldr	r2, [pc, #256]	@ (800486c <HAL_UART_RxCpltCallback+0x25c>)
 800476c:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1) != HAL_OK)
 800476e:	4b3f      	ldr	r3, [pc, #252]	@ (800486c <HAL_UART_RxCpltCallback+0x25c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a3f      	ldr	r2, [pc, #252]	@ (8004870 <HAL_UART_RxCpltCallback+0x260>)
 8004774:	4413      	add	r3, r2
 8004776:	2201      	movs	r2, #1
 8004778:	4619      	mov	r1, r3
 800477a:	4840      	ldr	r0, [pc, #256]	@ (800487c <HAL_UART_RxCpltCallback+0x26c>)
 800477c:	f005 f9f6 	bl	8009b6c <HAL_UART_Receive_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_UART_RxCpltCallback+0x17e>
			{
				Error_Handler();
 8004786:	f000 f887 	bl	8004898 <Error_Handler>
 800478a:	e000      	b.n	800478e <HAL_UART_RxCpltCallback+0x17e>
		{
 800478c:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART3)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3b      	ldr	r2, [pc, #236]	@ (8004880 <HAL_UART_RxCpltCallback+0x270>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d155      	bne.n	8004844 <HAL_UART_RxCpltCallback+0x234>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8004798:	4b3a      	ldr	r3, [pc, #232]	@ (8004884 <HAL_UART_RxCpltCallback+0x274>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a3a      	ldr	r2, [pc, #232]	@ (8004888 <HAL_UART_RxCpltCallback+0x278>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
 80047a0:	2b0d      	cmp	r3, #13
 80047a2:	d005      	beq.n	80047b0 <HAL_UART_RxCpltCallback+0x1a0>
 80047a4:	4b37      	ldr	r3, [pc, #220]	@ (8004884 <HAL_UART_RxCpltCallback+0x274>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a37      	ldr	r2, [pc, #220]	@ (8004888 <HAL_UART_RxCpltCallback+0x278>)
 80047aa:	5cd3      	ldrb	r3, [r2, r3]
 80047ac:	2b0a      	cmp	r3, #10
 80047ae:	d134      	bne.n	800481a <HAL_UART_RxCpltCallback+0x20a>
		{
			receiveMEGA[indexMEGA] = '\0';
 80047b0:	4b34      	ldr	r3, [pc, #208]	@ (8004884 <HAL_UART_RxCpltCallback+0x274>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a34      	ldr	r2, [pc, #208]	@ (8004888 <HAL_UART_RxCpltCallback+0x278>)
 80047b6:	2100      	movs	r1, #0
 80047b8:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 80047ba:	4927      	ldr	r1, [pc, #156]	@ (8004858 <HAL_UART_RxCpltCallback+0x248>)
 80047bc:	4832      	ldr	r0, [pc, #200]	@ (8004888 <HAL_UART_RxCpltCallback+0x278>)
 80047be:	f007 ff47 	bl	800c650 <strtok>
 80047c2:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 80047c4:	4b31      	ldr	r3, [pc, #196]	@ (800488c <HAL_UART_RxCpltCallback+0x27c>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 80047ca:	e010      	b.n	80047ee <HAL_UART_RxCpltCallback+0x1de>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 80047cc:	4b2f      	ldr	r3, [pc, #188]	@ (800488c <HAL_UART_RxCpltCallback+0x27c>)
 80047ce:	681c      	ldr	r4, [r3, #0]
 80047d0:	1c63      	adds	r3, r4, #1
 80047d2:	4a2e      	ldr	r2, [pc, #184]	@ (800488c <HAL_UART_RxCpltCallback+0x27c>)
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f006 f8ef 	bl	800a9ba <atoi>
 80047dc:	4603      	mov	r3, r0
 80047de:	4a2c      	ldr	r2, [pc, #176]	@ (8004890 <HAL_UART_RxCpltCallback+0x280>)
 80047e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 80047e4:	491c      	ldr	r1, [pc, #112]	@ (8004858 <HAL_UART_RxCpltCallback+0x248>)
 80047e6:	2000      	movs	r0, #0
 80047e8:	f007 ff32 	bl	800c650 <strtok>
 80047ec:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1eb      	bne.n	80047cc <HAL_UART_RxCpltCallback+0x1bc>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 80047f4:	2232      	movs	r2, #50	@ 0x32
 80047f6:	2100      	movs	r1, #0
 80047f8:	4823      	ldr	r0, [pc, #140]	@ (8004888 <HAL_UART_RxCpltCallback+0x278>)
 80047fa:	f007 ff0e 	bl	800c61a <memset>
			indexMEGA = 0;
 80047fe:	4b21      	ldr	r3, [pc, #132]	@ (8004884 <HAL_UART_RxCpltCallback+0x274>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 8004804:	2201      	movs	r2, #1
 8004806:	4920      	ldr	r1, [pc, #128]	@ (8004888 <HAL_UART_RxCpltCallback+0x278>)
 8004808:	4822      	ldr	r0, [pc, #136]	@ (8004894 <HAL_UART_RxCpltCallback+0x284>)
 800480a:	f005 f9af 	bl	8009b6c <HAL_UART_Receive_IT>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <HAL_UART_RxCpltCallback+0x232>
			{
				Error_Handler();
 8004814:	f000 f840 	bl	8004898 <Error_Handler>
		{
 8004818:	e013      	b.n	8004842 <HAL_UART_RxCpltCallback+0x232>
			}
		}
		else
		{
			indexMEGA++;
 800481a:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <HAL_UART_RxCpltCallback+0x274>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	4a18      	ldr	r2, [pc, #96]	@ (8004884 <HAL_UART_RxCpltCallback+0x274>)
 8004822:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1) != HAL_OK)
 8004824:	4b17      	ldr	r3, [pc, #92]	@ (8004884 <HAL_UART_RxCpltCallback+0x274>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a17      	ldr	r2, [pc, #92]	@ (8004888 <HAL_UART_RxCpltCallback+0x278>)
 800482a:	4413      	add	r3, r2
 800482c:	2201      	movs	r2, #1
 800482e:	4619      	mov	r1, r3
 8004830:	4818      	ldr	r0, [pc, #96]	@ (8004894 <HAL_UART_RxCpltCallback+0x284>)
 8004832:	f005 f99b 	bl	8009b6c <HAL_UART_Receive_IT>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_UART_RxCpltCallback+0x234>
			{
				Error_Handler();
 800483c:	f000 f82c 	bl	8004898 <Error_Handler>
			}
		}
	}
}
 8004840:	e000      	b.n	8004844 <HAL_UART_RxCpltCallback+0x234>
		{
 8004842:	bf00      	nop
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	40011000 	.word	0x40011000
 8004850:	20000520 	.word	0x20000520
 8004854:	200004ec 	.word	0x200004ec
 8004858:	08011208 	.word	0x08011208
 800485c:	20000524 	.word	0x20000524
 8004860:	20000528 	.word	0x20000528
 8004864:	200003f8 	.word	0x200003f8
 8004868:	40004400 	.word	0x40004400
 800486c:	20000574 	.word	0x20000574
 8004870:	20000540 	.word	0x20000540
 8004874:	20000578 	.word	0x20000578
 8004878:	2000057c 	.word	0x2000057c
 800487c:	20000440 	.word	0x20000440
 8004880:	40004800 	.word	0x40004800
 8004884:	200005f8 	.word	0x200005f8
 8004888:	200005c4 	.word	0x200005c4
 800488c:	200005fc 	.word	0x200005fc
 8004890:	20000600 	.word	0x20000600
 8004894:	20000488 	.word	0x20000488

08004898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800489c:	b672      	cpsid	i
}
 800489e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Inverse_Kinematics(0, 0, 0);
 80048a0:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 80048d8 <Error_Handler+0x40>
 80048a4:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 80048d8 <Error_Handler+0x40>
 80048a8:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 80048d8 <Error_Handler+0x40>
 80048ac:	f7fc fc4c 	bl	8001148 <Inverse_Kinematics>
	  setMotorSpeed(1, 0);
 80048b0:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80048d8 <Error_Handler+0x40>
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7fc fbd1 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(2, 0);
 80048ba:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 80048d8 <Error_Handler+0x40>
 80048be:	2002      	movs	r0, #2
 80048c0:	f7fc fbcc 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(7, 0);
 80048c4:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 80048d8 <Error_Handler+0x40>
 80048c8:	2007      	movs	r0, #7
 80048ca:	f7fc fbc7 	bl	800105c <setMotorSpeed>
	  Inverse_Kinematics(0, 0, 0);
 80048ce:	bf00      	nop
 80048d0:	e7e6      	b.n	80048a0 <Error_Handler+0x8>
 80048d2:	bf00      	nop
 80048d4:	f3af 8000 	nop.w
	...

080048e0 <odometry_eg>:

extern int camera[13];
extern int sensorMEGA[4];

external_global odometry_eg()
{
 80048e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048e4:	b09e      	sub	sp, #120	@ 0x78
 80048e6:	af00      	add	r7, sp, #0
	external_global currentPosition;
    double yaw = sensorData[0] * M_PI / 180.0;
 80048e8:	4b93      	ldr	r3, [pc, #588]	@ (8004b38 <odometry_eg+0x258>)
 80048ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8004b20 <odometry_eg+0x240>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f7fb fe80 	bl	80005f8 <__aeabi_dmul>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	4b8d      	ldr	r3, [pc, #564]	@ (8004b3c <odometry_eg+0x25c>)
 8004906:	f7fb ffa1 	bl	800084c <__aeabi_ddiv>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 8004912:	4b8b      	ldr	r3, [pc, #556]	@ (8004b40 <odometry_eg+0x260>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b8b      	ldr	r3, [pc, #556]	@ (8004b44 <odometry_eg+0x264>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int dn2 = counter2 - oldEnc2;
 800491e:	4b8a      	ldr	r3, [pc, #552]	@ (8004b48 <odometry_eg+0x268>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8a      	ldr	r3, [pc, #552]	@ (8004b4c <odometry_eg+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	66bb      	str	r3, [r7, #104]	@ 0x68
    int dn3 = counter3 - oldEnc3;
 800492a:	4b89      	ldr	r3, [pc, #548]	@ (8004b50 <odometry_eg+0x270>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b89      	ldr	r3, [pc, #548]	@ (8004b54 <odometry_eg+0x274>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	667b      	str	r3, [r7, #100]	@ 0x64

    oldEnc1 = counter1;
 8004936:	4b82      	ldr	r3, [pc, #520]	@ (8004b40 <odometry_eg+0x260>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a82      	ldr	r2, [pc, #520]	@ (8004b44 <odometry_eg+0x264>)
 800493c:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 800493e:	4b82      	ldr	r3, [pc, #520]	@ (8004b48 <odometry_eg+0x268>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a82      	ldr	r2, [pc, #520]	@ (8004b4c <odometry_eg+0x26c>)
 8004944:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8004946:	4b82      	ldr	r3, [pc, #520]	@ (8004b50 <odometry_eg+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a82      	ldr	r2, [pc, #520]	@ (8004b54 <odometry_eg+0x274>)
 800494c:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 800494e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	4618      	mov	r0, r3
 8004956:	f7fb fde5 	bl	8000524 <__aeabi_i2d>
 800495a:	a373      	add	r3, pc, #460	@ (adr r3, 8004b28 <odometry_eg+0x248>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fe4a 	bl	80005f8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	a370      	add	r3, pc, #448	@ (adr r3, 8004b30 <odometry_eg+0x250>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb ff6b 	bl	800084c <__aeabi_ddiv>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 800497e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	22e6      	movs	r2, #230	@ 0xe6
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	4a73      	ldr	r2, [pc, #460]	@ (8004b58 <odometry_eg+0x278>)
 800498c:	fb82 1203 	smull	r1, r2, r2, r3
 8004990:	441a      	add	r2, r3
 8004992:	1212      	asrs	r2, r2, #8
 8004994:	17db      	asrs	r3, r3, #31
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800499a:	4413      	add	r3, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f7fb fdc1 	bl	8000524 <__aeabi_i2d>
 80049a2:	a361      	add	r3, pc, #388	@ (adr r3, 8004b28 <odometry_eg+0x248>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fe26 	bl	80005f8 <__aeabi_dmul>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 80049b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049b8:	4413      	add	r3, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fb fdb2 	bl	8000524 <__aeabi_i2d>
 80049c0:	a359      	add	r3, pc, #356	@ (adr r3, 8004b28 <odometry_eg+0x248>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fe17 	bl	80005f8 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4610      	mov	r0, r2
 80049d0:	4619      	mov	r1, r3
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80049da:	f7fb ff37 	bl	800084c <__aeabi_ddiv>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    /* END */

//	double theta = heading + (dtheta / 2.0);
	xGlobal += dx * cos(yaw) + dy * sin(yaw);
 80049e6:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 80049ea:	f00a fbfd 	bl	800f1e8 <cos>
 80049ee:	ec51 0b10 	vmov	r0, r1, d0
 80049f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049f6:	f7fb fdff 	bl	80005f8 <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4690      	mov	r8, r2
 8004a00:	4699      	mov	r9, r3
 8004a02:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8004a06:	f00a fc43 	bl	800f290 <sin>
 8004a0a:	ec51 0b10 	vmov	r0, r1, d0
 8004a0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a12:	f7fb fdf1 	bl	80005f8 <__aeabi_dmul>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	f7fb fc35 	bl	800028c <__adddf3>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b5c <odometry_eg+0x27c>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fc2c 	bl	800028c <__adddf3>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4948      	ldr	r1, [pc, #288]	@ (8004b5c <odometry_eg+0x27c>)
 8004a3a:	e9c1 2300 	strd	r2, r3, [r1]
	yGlobal += -dx * sin(yaw) + dy * cos(yaw);
 8004a3e:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8004a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a42:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004a46:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8004a4a:	f00a fc21 	bl	800f290 <sin>
 8004a4e:	ec53 2b10 	vmov	r2, r3, d0
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fdcf 	bl	80005f8 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4614      	mov	r4, r2
 8004a60:	461d      	mov	r5, r3
 8004a62:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8004a66:	f00a fbbf 	bl	800f1e8 <cos>
 8004a6a:	ec51 0b10 	vmov	r0, r1, d0
 8004a6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a72:	f7fb fdc1 	bl	80005f8 <__aeabi_dmul>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	f7fb fc05 	bl	800028c <__adddf3>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4b35      	ldr	r3, [pc, #212]	@ (8004b60 <odometry_eg+0x280>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fbfc 	bl	800028c <__adddf3>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4931      	ldr	r1, [pc, #196]	@ (8004b60 <odometry_eg+0x280>)
 8004a9a:	e9c1 2300 	strd	r2, r3, [r1]
	heading += dtheta;
 8004a9e:	4b31      	ldr	r3, [pc, #196]	@ (8004b64 <odometry_eg+0x284>)
 8004aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aa8:	f7fb fbf0 	bl	800028c <__adddf3>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	492c      	ldr	r1, [pc, #176]	@ (8004b64 <odometry_eg+0x284>)
 8004ab2:	e9c1 2300 	strd	r2, r3, [r1]

	currentPosition.x = xGlobal;
 8004ab6:	4b29      	ldr	r3, [pc, #164]	@ (8004b5c <odometry_eg+0x27c>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	currentPosition.y = yGlobal;
 8004ac0:	4b27      	ldr	r3, [pc, #156]	@ (8004b60 <odometry_eg+0x280>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	currentPosition.h = sensorData[0];
 8004aca:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <odometry_eg+0x258>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	return currentPosition;
 8004ad4:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8004ad8:	f107 0518 	add.w	r5, r7, #24
 8004adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ae4:	e884 0003 	stmia.w	r4, {r0, r1}
 8004ae8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004aec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004af0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004af4:	ec45 4b15 	vmov	d5, r4, r5
 8004af8:	ec41 0b16 	vmov	d6, r0, r1
 8004afc:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b00:	eeb0 0a45 	vmov.f32	s0, s10
 8004b04:	eef0 0a65 	vmov.f32	s1, s11
 8004b08:	eeb0 1a46 	vmov.f32	s2, s12
 8004b0c:	eef0 1a66 	vmov.f32	s3, s13
 8004b10:	eeb0 2a47 	vmov.f32	s4, s14
 8004b14:	eef0 2a67 	vmov.f32	s5, s15
 8004b18:	3778      	adds	r7, #120	@ 0x78
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b20:	54442d18 	.word	0x54442d18
 8004b24:	400921fb 	.word	0x400921fb
 8004b28:	2d6e5f19 	.word	0x2d6e5f19
 8004b2c:	3fb752bc 	.word	0x3fb752bc
 8004b30:	00000000 	.word	0x00000000
 8004b34:	4077c000 	.word	0x4077c000
 8004b38:	20000528 	.word	0x20000528
 8004b3c:	40668000 	.word	0x40668000
 8004b40:	200004d0 	.word	0x200004d0
 8004b44:	20000630 	.word	0x20000630
 8004b48:	200004d4 	.word	0x200004d4
 8004b4c:	20000634 	.word	0x20000634
 8004b50:	200004d8 	.word	0x200004d8
 8004b54:	20000638 	.word	0x20000638
 8004b58:	ac769185 	.word	0xac769185
 8004b5c:	20000618 	.word	0x20000618
 8004b60:	20000620 	.word	0x20000620
 8004b64:	20000628 	.word	0x20000628

08004b68 <displayCounter>:
	sprintf(buffer, "P:%i", sensorMEGA[3]);
	lcd_write_string(buffer);
}

void displayCounter()
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
	lcd_set_cursor(0, 0);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fd fc86 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "I1:%d", counterIN1);
 8004b74:	4b2f      	ldr	r3, [pc, #188]	@ (8004c34 <displayCounter+0xcc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	492f      	ldr	r1, [pc, #188]	@ (8004c38 <displayCounter+0xd0>)
 8004b7c:	482f      	ldr	r0, [pc, #188]	@ (8004c3c <displayCounter+0xd4>)
 8004b7e:	f007 fce9 	bl	800c554 <siprintf>
	lcd_write_string(buffer);
 8004b82:	482e      	ldr	r0, [pc, #184]	@ (8004c3c <displayCounter+0xd4>)
 8004b84:	f7fd fc66 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(1, 0);
 8004b88:	2100      	movs	r1, #0
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	f7fd fc78 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "I2:%d", counterIN2);
 8004b90:	4b2b      	ldr	r3, [pc, #172]	@ (8004c40 <displayCounter+0xd8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	492b      	ldr	r1, [pc, #172]	@ (8004c44 <displayCounter+0xdc>)
 8004b98:	4828      	ldr	r0, [pc, #160]	@ (8004c3c <displayCounter+0xd4>)
 8004b9a:	f007 fcdb 	bl	800c554 <siprintf>
	lcd_write_string(buffer);
 8004b9e:	4827      	ldr	r0, [pc, #156]	@ (8004c3c <displayCounter+0xd4>)
 8004ba0:	f7fd fc58 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(2, 0);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2002      	movs	r0, #2
 8004ba8:	f7fd fc6a 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "I3:%d", counterIN3);
 8004bac:	4b26      	ldr	r3, [pc, #152]	@ (8004c48 <displayCounter+0xe0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4926      	ldr	r1, [pc, #152]	@ (8004c4c <displayCounter+0xe4>)
 8004bb4:	4821      	ldr	r0, [pc, #132]	@ (8004c3c <displayCounter+0xd4>)
 8004bb6:	f007 fccd 	bl	800c554 <siprintf>
	lcd_write_string(buffer);
 8004bba:	4820      	ldr	r0, [pc, #128]	@ (8004c3c <displayCounter+0xd4>)
 8004bbc:	f7fd fc4a 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(3, 0);
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2003      	movs	r0, #3
 8004bc4:	f7fd fc5c 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "I4:%d", counterIN4);
 8004bc8:	4b21      	ldr	r3, [pc, #132]	@ (8004c50 <displayCounter+0xe8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4921      	ldr	r1, [pc, #132]	@ (8004c54 <displayCounter+0xec>)
 8004bd0:	481a      	ldr	r0, [pc, #104]	@ (8004c3c <displayCounter+0xd4>)
 8004bd2:	f007 fcbf 	bl	800c554 <siprintf>
	lcd_write_string(buffer);
 8004bd6:	4819      	ldr	r0, [pc, #100]	@ (8004c3c <displayCounter+0xd4>)
 8004bd8:	f7fd fc3c 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(0, 10);
 8004bdc:	210a      	movs	r1, #10
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7fd fc4e 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "E1:%d", counter1);
 8004be4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c58 <displayCounter+0xf0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	491c      	ldr	r1, [pc, #112]	@ (8004c5c <displayCounter+0xf4>)
 8004bec:	4813      	ldr	r0, [pc, #76]	@ (8004c3c <displayCounter+0xd4>)
 8004bee:	f007 fcb1 	bl	800c554 <siprintf>
	lcd_write_string(buffer);
 8004bf2:	4812      	ldr	r0, [pc, #72]	@ (8004c3c <displayCounter+0xd4>)
 8004bf4:	f7fd fc2e 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(1, 10);
 8004bf8:	210a      	movs	r1, #10
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f7fd fc40 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "E2:%d", counter2);
 8004c00:	4b17      	ldr	r3, [pc, #92]	@ (8004c60 <displayCounter+0xf8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	4917      	ldr	r1, [pc, #92]	@ (8004c64 <displayCounter+0xfc>)
 8004c08:	480c      	ldr	r0, [pc, #48]	@ (8004c3c <displayCounter+0xd4>)
 8004c0a:	f007 fca3 	bl	800c554 <siprintf>
	lcd_write_string(buffer);
 8004c0e:	480b      	ldr	r0, [pc, #44]	@ (8004c3c <displayCounter+0xd4>)
 8004c10:	f7fd fc20 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(2, 10);
 8004c14:	210a      	movs	r1, #10
 8004c16:	2002      	movs	r0, #2
 8004c18:	f7fd fc32 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "E3:%d", counter3);
 8004c1c:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <displayCounter+0x100>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	4912      	ldr	r1, [pc, #72]	@ (8004c6c <displayCounter+0x104>)
 8004c24:	4805      	ldr	r0, [pc, #20]	@ (8004c3c <displayCounter+0xd4>)
 8004c26:	f007 fc95 	bl	800c554 <siprintf>
	lcd_write_string(buffer);
 8004c2a:	4804      	ldr	r0, [pc, #16]	@ (8004c3c <displayCounter+0xd4>)
 8004c2c:	f7fd fc12 	bl	8002454 <lcd_write_string>
}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200004dc 	.word	0x200004dc
 8004c38:	080112ac 	.word	0x080112ac
 8004c3c:	2000063c 	.word	0x2000063c
 8004c40:	200004e0 	.word	0x200004e0
 8004c44:	080112b4 	.word	0x080112b4
 8004c48:	200004e4 	.word	0x200004e4
 8004c4c:	080112bc 	.word	0x080112bc
 8004c50:	200004e8 	.word	0x200004e8
 8004c54:	080112c4 	.word	0x080112c4
 8004c58:	200004d0 	.word	0x200004d0
 8004c5c:	080112cc 	.word	0x080112cc
 8004c60:	200004d4 	.word	0x200004d4
 8004c64:	080112d4 	.word	0x080112d4
 8004c68:	200004d8 	.word	0x200004d8
 8004c6c:	080112dc 	.word	0x080112dc

08004c70 <PID_controller>:
/* Variable for PID*/
double integral = 0.0, derivative = 0.0, prev_error = 0.0;
/* END */

double PID_controller(double setpoint, double actual_position, double Kp, double Ki, double Kd)
{
 8004c70:	b5b0      	push	{r4, r5, r7, lr}
 8004c72:	b090      	sub	sp, #64	@ 0x40
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	ed87 0b08 	vstr	d0, [r7, #32]
 8004c7a:	ed87 1b06 	vstr	d1, [r7, #24]
 8004c7e:	ed87 2b04 	vstr	d2, [r7, #16]
 8004c82:	ed87 3b02 	vstr	d3, [r7, #8]
 8004c86:	ed87 4b00 	vstr	d4, [r7]
	double dt = 0.01;
 8004c8a:	a33c      	add	r3, pc, #240	@ (adr r3, 8004d7c <PID_controller+0x10c>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Proportional
    double error = setpoint - actual_position;
 8004c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c9c:	f7fb faf4 	bl	8000288 <__aeabi_dsub>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Integral
    integral += error * dt;
 8004ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004cb0:	f7fb fca2 	bl	80005f8 <__aeabi_dmul>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8004d70 <PID_controller+0x100>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fae3 	bl	800028c <__adddf3>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4929      	ldr	r1, [pc, #164]	@ (8004d70 <PID_controller+0x100>)
 8004ccc:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = (error - prev_error) / dt;
 8004cd0:	4b28      	ldr	r3, [pc, #160]	@ (8004d74 <PID_controller+0x104>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004cda:	f7fb fad5 	bl	8000288 <__aeabi_dsub>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cea:	f7fb fdaf 	bl	800084c <__aeabi_ddiv>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4921      	ldr	r1, [pc, #132]	@ (8004d78 <PID_controller+0x108>)
 8004cf4:	e9c1 2300 	strd	r2, r3, [r1]

    double output = Kp * error + Ki * integral + Kd * derivative;
 8004cf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004cfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d00:	f7fb fc7a 	bl	80005f8 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4614      	mov	r4, r2
 8004d0a:	461d      	mov	r5, r3
 8004d0c:	4b18      	ldr	r3, [pc, #96]	@ (8004d70 <PID_controller+0x100>)
 8004d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d16:	f7fb fc6f 	bl	80005f8 <__aeabi_dmul>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4620      	mov	r0, r4
 8004d20:	4629      	mov	r1, r5
 8004d22:	f7fb fab3 	bl	800028c <__adddf3>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4614      	mov	r4, r2
 8004d2c:	461d      	mov	r5, r3
 8004d2e:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <PID_controller+0x108>)
 8004d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d38:	f7fb fc5e 	bl	80005f8 <__aeabi_dmul>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4620      	mov	r0, r4
 8004d42:	4629      	mov	r1, r5
 8004d44:	f7fb faa2 	bl	800028c <__adddf3>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    prev_error = error;
 8004d50:	4908      	ldr	r1, [pc, #32]	@ (8004d74 <PID_controller+0x104>)
 8004d52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004d56:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 8004d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d5e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d62:	eeb0 0a47 	vmov.f32	s0, s14
 8004d66:	eef0 0a67 	vmov.f32	s1, s15
 8004d6a:	3740      	adds	r7, #64	@ 0x40
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d70:	20000648 	.word	0x20000648
 8004d74:	20000658 	.word	0x20000658
 8004d78:	20000650 	.word	0x20000650
 8004d7c:	47ae147b 	.word	0x47ae147b
 8004d80:	3f847ae1 	.word	0x3f847ae1

08004d84 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, double Kp)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	@ 0x28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d8e:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d92:	ed87 2b00 	vstr	d2, [r7]
	double error = setpoint - actual_position;
 8004d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d9e:	f7fb fa73 	bl	8000288 <__aeabi_dsub>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if(error > 180)
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	4b1f      	ldr	r3, [pc, #124]	@ (8004e2c <PID_controllerH+0xa8>)
 8004db0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004db4:	f7fb feb0 	bl	8000b18 <__aeabi_dcmpgt>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <PID_controllerH+0x52>
	{
		error -= 360;
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <PID_controllerH+0xac>)
 8004dc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004dc8:	f7fb fa5e 	bl	8000288 <__aeabi_dsub>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004dd4:	e014      	b.n	8004e00 <PID_controllerH+0x7c>
	}
	else if(error < -180)
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	4b16      	ldr	r3, [pc, #88]	@ (8004e34 <PID_controllerH+0xb0>)
 8004ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004de0:	f7fb fe7c 	bl	8000adc <__aeabi_dcmplt>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <PID_controllerH+0x7c>
	{
		error += 360;
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <PID_controllerH+0xac>)
 8004df0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004df4:	f7fb fa4a 	bl	800028c <__adddf3>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

    // Proportional
	double P = Kp * error;
 8004e00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e08:	f7fb fbf6 	bl	80005f8 <__aeabi_dmul>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 8004e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e18:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8004e20:	eef0 0a67 	vmov.f32	s1, s15
 8004e24:	3728      	adds	r7, #40	@ 0x28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40668000 	.word	0x40668000
 8004e30:	40768000 	.word	0x40768000
 8004e34:	c0668000 	.word	0xc0668000

08004e38 <map>:
uint8_t lookingMode = 1;

Silo silos[MAX_SILOS];

int map(int st1, int fn1, int st2, int fn2, int value)
{
 8004e38:	b5b0      	push	{r4, r5, r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
    return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb fb69 	bl	8000524 <__aeabi_i2d>
 8004e52:	4604      	mov	r4, r0
 8004e54:	460d      	mov	r5, r1
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb61 	bl	8000524 <__aeabi_i2d>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fcef 	bl	800084c <__aeabi_ddiv>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4614      	mov	r4, r2
 8004e74:	461d      	mov	r5, r3
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb51 	bl	8000524 <__aeabi_i2d>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb fbb5 	bl	80005f8 <__aeabi_dmul>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4614      	mov	r4, r2
 8004e94:	461d      	mov	r5, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fb fb44 	bl	8000524 <__aeabi_i2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb f9f2 	bl	800028c <__adddf3>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	f7fb fe52 	bl	8000b58 <__aeabi_d2iz>
 8004eb4:	4603      	mov	r3, r0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004ec0 <smoothVelocity>:
    }
    return target;
}

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 8004ec0:	b5b0      	push	{r4, r5, r7, lr}
 8004ec2:	b08c      	sub	sp, #48	@ 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6178      	str	r0, [r7, #20]
 8004ec8:	6139      	str	r1, [r7, #16]
 8004eca:	60fa      	str	r2, [r7, #12]
 8004ecc:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 8004ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef8:	f04f 0000 	mov.w	r0, #0
 8004efc:	493e      	ldr	r1, [pc, #248]	@ (8004ff8 <smoothVelocity+0x138>)
 8004efe:	f7fb f9c3 	bl	8000288 <__aeabi_dsub>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f0e:	f7fb fb73 	bl	80005f8 <__aeabi_dmul>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4614      	mov	r4, r2
 8004f18:	461d      	mov	r5, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f24:	f7fb fb68 	bl	80005f8 <__aeabi_dmul>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb f9ac 	bl	800028c <__adddf3>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 8004f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	492c      	ldr	r1, [pc, #176]	@ (8004ff8 <smoothVelocity+0x138>)
 8004f48:	f7fb f99e 	bl	8000288 <__aeabi_dsub>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f58:	f7fb fb4e 	bl	80005f8 <__aeabi_dmul>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6e:	f7fb fb43 	bl	80005f8 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb f987 	bl	800028c <__adddf3>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	6939      	ldr	r1, [r7, #16]
 8004f84:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 8004f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8c:	f04f 0000 	mov.w	r0, #0
 8004f90:	4919      	ldr	r1, [pc, #100]	@ (8004ff8 <smoothVelocity+0x138>)
 8004f92:	f7fb f979 	bl	8000288 <__aeabi_dsub>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fa2:	f7fb fb29 	bl	80005f8 <__aeabi_dmul>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4614      	mov	r4, r2
 8004fac:	461d      	mov	r5, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb8:	f7fb fb1e 	bl	80005f8 <__aeabi_dmul>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	f7fb f962 	bl	800028c <__adddf3>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	68f9      	ldr	r1, [r7, #12]
 8004fce:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 8004ff0:	bf00      	nop
 8004ff2:	3730      	adds	r7, #48	@ 0x30
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff8:	3ff00000 	.word	0x3ff00000

08004ffc <atTargetEG>:
    }
    return targetVelocity;
}

bool atTargetEG(external_global setpoint, external_global position, double xyTolerance, double hTolerance)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b098      	sub	sp, #96	@ 0x60
 8005000:	af00      	add	r7, sp, #0
 8005002:	ed87 6b02 	vstr	d6, [r7, #8]
 8005006:	ed87 7b00 	vstr	d7, [r7]
 800500a:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 800500e:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8005012:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
 8005016:	ed87 3b04 	vstr	d3, [r7, #16]
 800501a:	ed87 4b06 	vstr	d4, [r7, #24]
 800501e:	ed87 5b08 	vstr	d5, [r7, #32]
	double error_x = setpoint.x - position.x;
 8005022:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005026:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800502a:	f7fb f92d 	bl	8000288 <__aeabi_dsub>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double error_y = setpoint.y - position.y;
 8005036:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800503a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503e:	f7fb f923 	bl	8000288 <__aeabi_dsub>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double error_h = fabs(setpoint.h - position.h);
 800504a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800504e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005052:	f7fb f919 	bl	8000288 <__aeabi_dsub>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4611      	mov	r1, r2
 800505c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800505e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005062:	64fb      	str	r3, [r7, #76]	@ 0x4c
	double distance = hypot(error_x, error_y);
 8005064:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8005068:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 800506c:	f00a f888 	bl	800f180 <hypot>
 8005070:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	return distance < xyTolerance && error_h < hTolerance;
 8005074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005078:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800507c:	f7fb fd2e 	bl	8000adc <__aeabi_dcmplt>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <atTargetEG+0xa0>
 8005086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800508a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800508e:	f7fb fd25 	bl	8000adc <__aeabi_dcmplt>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <atTargetEG+0xa0>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <atTargetEG+0xa2>
 800509c:	2300      	movs	r3, #0
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	b2db      	uxtb	r3, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3760      	adds	r7, #96	@ 0x60
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	0000      	movs	r0, r0
	...

080050b0 <lookForTheBall>:
	double distance = hypot(error_x, error_y);
	return distance < xyTolerance && error_h < hTolerance;
}

void lookForTheBall(double targetAngle1, double targetAngle2, double currentAngle)
{
 80050b0:	b5b0      	push	{r4, r5, r7, lr}
 80050b2:	b08c      	sub	sp, #48	@ 0x30
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	ed87 0b04 	vstr	d0, [r7, #16]
 80050ba:	ed87 1b02 	vstr	d1, [r7, #8]
 80050be:	ed87 2b00 	vstr	d2, [r7]
    double targetAngle;
    uint8_t nextMode;

    switch (lookingMode)
 80050c2:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <lookForTheBall+0xa8>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d002      	beq.n	80050d0 <lookForTheBall+0x20>
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d008      	beq.n	80050e0 <lookForTheBall+0x30>
        case 2:
        	targetAngle = targetAngle1;
            nextMode = 1;
            break;
        default:
            return; // Invalid mode, do nothing
 80050ce:	e03c      	b.n	800514a <lookForTheBall+0x9a>
        	targetAngle = targetAngle2;
 80050d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 2;
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80050de:	e007      	b.n	80050f0 <lookForTheBall+0x40>
        	targetAngle = targetAngle1;
 80050e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 1;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80050ee:	bf00      	nop
    }

    double W = PID_controllerH(targetAngle, currentAngle, 1.0);
 80050f0:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8005150 <lookForTheBall+0xa0>
 80050f4:	ed97 1b00 	vldr	d1, [r7]
 80050f8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80050fc:	f7ff fe42 	bl	8004d84 <PID_controllerH>
 8005100:	ed87 0b06 	vstr	d0, [r7, #24]
    putar(0, 0, W);
 8005104:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005108:	f7fb fd26 	bl	8000b58 <__aeabi_d2iz>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	2100      	movs	r1, #0
 8005112:	2000      	movs	r0, #0
 8005114:	f7fc fe20 	bl	8001d58 <putar>
    if (fabs(targetAngle - currentAngle) < 5.0)
 8005118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005120:	f7fb f8b2 	bl	8000288 <__aeabi_dsub>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4614      	mov	r4, r2
 800512a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <lookForTheBall+0xac>)
 8005134:	4620      	mov	r0, r4
 8005136:	4629      	mov	r1, r5
 8005138:	f7fb fcd0 	bl	8000adc <__aeabi_dcmplt>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <lookForTheBall+0x9a>
    {
        lookingMode = nextMode;
 8005142:	4a05      	ldr	r2, [pc, #20]	@ (8005158 <lookForTheBall+0xa8>)
 8005144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005148:	7013      	strb	r3, [r2, #0]
    }
}
 800514a:	3730      	adds	r7, #48	@ 0x30
 800514c:	46bd      	mov	sp, r7
 800514e:	bdb0      	pop	{r4, r5, r7, pc}
 8005150:	00000000 	.word	0x00000000
 8005154:	3ff00000 	.word	0x3ff00000
 8005158:	200000c9 	.word	0x200000c9
 800515c:	40140000 	.word	0x40140000

08005160 <servo_write>:

void servo_write(int angle)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 30, 130, angle);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2382      	movs	r3, #130	@ 0x82
 800516e:	221e      	movs	r2, #30
 8005170:	21b4      	movs	r1, #180	@ 0xb4
 8005172:	2000      	movs	r0, #0
 8005174:	f7ff fe60 	bl	8004e38 <map>
 8005178:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 800517a:	4b04      	ldr	r3, [pc, #16]	@ (800518c <servo_write+0x2c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000368 	.word	0x20000368

08005190 <PID_EG>:

void PID_EG(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8005190:	b5b0      	push	{r4, r5, r7, lr}
 8005192:	b0ae      	sub	sp, #184	@ 0xb8
 8005194:	af00      	add	r7, sp, #0
 8005196:	ed87 3b08 	vstr	d3, [r7, #32]
 800519a:	ed87 4b06 	vstr	d4, [r7, #24]
 800519e:	ed87 5b04 	vstr	d5, [r7, #16]
 80051a2:	ed87 6b02 	vstr	d6, [r7, #8]
 80051a6:	ed87 7b00 	vstr	d7, [r7]
 80051aa:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 80051ae:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 80051b2:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
	external_global currentPosition = odometry_eg();
 80051b6:	f7ff fb93 	bl	80048e0 <odometry_eg>
 80051ba:	eeb0 5a40 	vmov.f32	s10, s0
 80051be:	eef0 5a60 	vmov.f32	s11, s1
 80051c2:	eeb0 6a41 	vmov.f32	s12, s2
 80051c6:	eef0 6a61 	vmov.f32	s13, s3
 80051ca:	eeb0 7a42 	vmov.f32	s14, s4
 80051ce:	eef0 7a62 	vmov.f32	s15, s5
 80051d2:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 80051d6:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 80051da:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

	double pitch = sensorData[1] * 300; // IMU pitch
 80051de:	4bae      	ldr	r3, [pc, #696]	@ (8005498 <PID_EG+0x308>)
 80051e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80051e4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005488 <PID_EG+0x2f8>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fb fa05 	bl	80005f8 <__aeabi_dmul>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double roll = sensorData[2] * 300; // IMU roll
 80051f6:	4ba8      	ldr	r3, [pc, #672]	@ (8005498 <PID_EG+0x308>)
 80051f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80051fc:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005488 <PID_EG+0x2f8>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f7fb f9f9 	bl	80005f8 <__aeabi_dmul>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double error_x = setpoint.x - currentPosition.x;
 800520e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005216:	f7fb f837 	bl	8000288 <__aeabi_dsub>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double error_y = setpoint.y - currentPosition.y;
 8005222:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005226:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800522a:	f7fb f82d 	bl	8000288 <__aeabi_dsub>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8005236:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800523a:	a395      	add	r3, pc, #596	@ (adr r3, 8005490 <PID_EG+0x300>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fb f9da 	bl	80005f8 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	4b92      	ldr	r3, [pc, #584]	@ (800549c <PID_EG+0x30c>)
 8005252:	f7fb fafb 	bl	800084c <__aeabi_ddiv>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double distance = hypot(error_x, error_y);
 800525e:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 8005262:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8005266:	f009 ff8b 	bl	800f180 <hypot>
 800526a:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 800526e:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8005272:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8005276:	f00a f894 	bl	800f3a2 <fmin>
 800527a:	ec51 0b10 	vmov	r0, r1, d0
 800527e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005282:	f7fb fae3 	bl	800084c <__aeabi_ddiv>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = PID_controller(setpoint.x, currentPosition.x, Kp, Ki, Kd) * velocityFactor;
 800528e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8005292:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8005296:	ed97 4b04 	vldr	d4, [r7, #16]
 800529a:	ed97 3b06 	vldr	d3, [r7, #24]
 800529e:	ed97 2b08 	vldr	d2, [r7, #32]
 80052a2:	eeb0 1a46 	vmov.f32	s2, s12
 80052a6:	eef0 1a66 	vmov.f32	s3, s13
 80052aa:	eeb0 0a47 	vmov.f32	s0, s14
 80052ae:	eef0 0a67 	vmov.f32	s1, s15
 80052b2:	f7ff fcdd 	bl	8004c70 <PID_controller>
 80052b6:	ec53 2b10 	vmov	r2, r3, d0
 80052ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052be:	f7fb f99b 	bl	80005f8 <__aeabi_dmul>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = PID_controller(setpoint.y, currentPosition.y, Kp, Ki, Kd) * velocityFactor;
 80052ca:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80052ce:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80052d2:	ed97 4b04 	vldr	d4, [r7, #16]
 80052d6:	ed97 3b06 	vldr	d3, [r7, #24]
 80052da:	ed97 2b08 	vldr	d2, [r7, #32]
 80052de:	eeb0 1a46 	vmov.f32	s2, s12
 80052e2:	eef0 1a66 	vmov.f32	s3, s13
 80052e6:	eeb0 0a47 	vmov.f32	s0, s14
 80052ea:	eef0 0a67 	vmov.f32	s1, s15
 80052ee:	f7ff fcbf 	bl	8004c70 <PID_controller>
 80052f2:	ec53 2b10 	vmov	r2, r3, d0
 80052f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052fa:	f7fb f97d 	bl	80005f8 <__aeabi_dmul>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8005306:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800530a:	f009 ff6d 	bl	800f1e8 <cos>
 800530e:	ec51 0b10 	vmov	r0, r1, d0
 8005312:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005316:	f7fb f96f 	bl	80005f8 <__aeabi_dmul>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4614      	mov	r4, r2
 8005320:	461d      	mov	r5, r3
 8005322:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005326:	f009 ffb3 	bl	800f290 <sin>
 800532a:	ec51 0b10 	vmov	r0, r1, d0
 800532e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005332:	f7fb f961 	bl	80005f8 <__aeabi_dmul>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4620      	mov	r0, r4
 800533c:	4629      	mov	r1, r5
 800533e:	f7fa ffa3 	bl	8000288 <__aeabi_dsub>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 800534a:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800534e:	f009 ff9f 	bl	800f290 <sin>
 8005352:	ec51 0b10 	vmov	r0, r1, d0
 8005356:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800535a:	f7fb f94d 	bl	80005f8 <__aeabi_dmul>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4614      	mov	r4, r2
 8005364:	461d      	mov	r5, r3
 8005366:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800536a:	f009 ff3d 	bl	800f1e8 <cos>
 800536e:	ec51 0b10 	vmov	r0, r1, d0
 8005372:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005376:	f7fb f93f 	bl	80005f8 <__aeabi_dmul>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fa ff83 	bl	800028c <__adddf3>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 800538e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005392:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8005396:	ed97 2b02 	vldr	d2, [r7, #8]
 800539a:	eeb0 1a46 	vmov.f32	s2, s12
 800539e:	eef0 1a66 	vmov.f32	s3, s13
 80053a2:	eeb0 0a47 	vmov.f32	s0, s14
 80053a6:	eef0 0a67 	vmov.f32	s1, s15
 80053aa:	f7ff fceb 	bl	8004d84 <PID_controllerH>
 80053ae:	eeb0 7a40 	vmov.f32	s14, s0
 80053b2:	eef0 7a60 	vmov.f32	s15, s1
 80053b6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    if(roll > 0)	{Vx -= roll;}
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80053c6:	f7fb fba7 	bl	8000b18 <__aeabi_dcmpgt>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <PID_EG+0x256>
 80053d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80053d4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80053d8:	f7fa ff56 	bl	8000288 <__aeabi_dsub>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80053e4:	e009      	b.n	80053fa <PID_EG+0x26a>
    else			{Vx += roll;}
 80053e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80053ea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80053ee:	f7fa ff4d 	bl	800028c <__adddf3>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if(pitch > 0)	{Vy += pitch;}
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005406:	f7fb fb87 	bl	8000b18 <__aeabi_dcmpgt>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <PID_EG+0x296>
 8005410:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005414:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005418:	f7fa ff38 	bl	800028c <__adddf3>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8005424:	e009      	b.n	800543a <PID_EG+0x2aa>
    else			{Vy -= pitch;}
 8005426:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800542a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800542e:	f7fa ff2b 	bl	8000288 <__aeabi_dsub>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 800543a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800543e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8005442:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005446:	ed97 0b00 	vldr	d0, [r7]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fd38 	bl	8004ec0 <smoothVelocity>
    trying(Vx, Vy, W, setpoint.h, KpH);
 8005450:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005454:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8005458:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 800545c:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 8005460:	ed97 4b02 	vldr	d4, [r7, #8]
 8005464:	eeb0 2a45 	vmov.f32	s4, s10
 8005468:	eef0 2a65 	vmov.f32	s5, s11
 800546c:	eeb0 1a46 	vmov.f32	s2, s12
 8005470:	eef0 1a66 	vmov.f32	s3, s13
 8005474:	eeb0 0a47 	vmov.f32	s0, s14
 8005478:	eef0 0a67 	vmov.f32	s1, s15
 800547c:	f7fc f934 	bl	80016e8 <trying>
//    Inverse_Kinematics(Vx, Vy, W);
}
 8005480:	bf00      	nop
 8005482:	37b8      	adds	r7, #184	@ 0xb8
 8005484:	46bd      	mov	sp, r7
 8005486:	bdb0      	pop	{r4, r5, r7, pc}
 8005488:	00000000 	.word	0x00000000
 800548c:	4072c000 	.word	0x4072c000
 8005490:	54442d18 	.word	0x54442d18
 8005494:	400921fb 	.word	0x400921fb
 8005498:	20000528 	.word	0x20000528
 800549c:	40668000 	.word	0x40668000

080054a0 <PID_moveToCoordinate>:
    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
    Inverse_Kinematics(Vx, Vy, W);
}

void PID_moveToCoordinate(external_global *setpoint, PID_parameter *parameters, uint16_t numPoints)
{
 80054a0:	b5b0      	push	{r4, r5, r7, lr}
 80054a2:	b0a2      	sub	sp, #136	@ 0x88
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
	static uint8_t thread = 0;
	if(thread >= numPoints)
 80054ae:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <PID_moveToCoordinate+0x38>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d810      	bhi.n	80054dc <PID_moveToCoordinate+0x3c>
	{
		Inverse_Kinematics(0, 0, 0);
 80054ba:	ed9f 2b05 	vldr	d2, [pc, #20]	@ 80054d0 <PID_moveToCoordinate+0x30>
 80054be:	ed9f 1b04 	vldr	d1, [pc, #16]	@ 80054d0 <PID_moveToCoordinate+0x30>
 80054c2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 80054d0 <PID_moveToCoordinate+0x30>
 80054c6:	f7fb fe3f 	bl	8001148 <Inverse_Kinematics>
 80054ca:	e230      	b.n	800592e <PID_moveToCoordinate+0x48e>
 80054cc:	f3af 8000 	nop.w
	...
 80054d8:	20000700 	.word	0x20000700
		return;
	}
	external_global currentPosition = odometry_eg();
 80054dc:	f7ff fa00 	bl	80048e0 <odometry_eg>
 80054e0:	eeb0 5a40 	vmov.f32	s10, s0
 80054e4:	eef0 5a60 	vmov.f32	s11, s1
 80054e8:	eeb0 6a41 	vmov.f32	s12, s2
 80054ec:	eef0 6a61 	vmov.f32	s13, s3
 80054f0:	eeb0 7a42 	vmov.f32	s14, s4
 80054f4:	eef0 7a62 	vmov.f32	s15, s5
 80054f8:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80054fc:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8005500:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

	double pitch = sensorData[1] * 300; // IMU pitch
 8005504:	4bbc      	ldr	r3, [pc, #752]	@ (80057f8 <PID_moveToCoordinate+0x358>)
 8005506:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800550a:	a3b7      	add	r3, pc, #732	@ (adr r3, 80057e8 <PID_moveToCoordinate+0x348>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fb f872 	bl	80005f8 <__aeabi_dmul>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double roll = sensorData[2] * 300; // IMU roll
 800551c:	4bb6      	ldr	r3, [pc, #728]	@ (80057f8 <PID_moveToCoordinate+0x358>)
 800551e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005522:	a3b1      	add	r3, pc, #708	@ (adr r3, 80057e8 <PID_moveToCoordinate+0x348>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fb f866 	bl	80005f8 <__aeabi_dmul>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

    double error_x = setpoint[thread].x - currentPosition.x;
 8005534:	4bb1      	ldr	r3, [pc, #708]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	4613      	mov	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4413      	add	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800554c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005550:	f7fa fe9a 	bl	8000288 <__aeabi_dsub>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    double error_y = setpoint[thread].y - currentPosition.y;
 800555c:	4ba7      	ldr	r3, [pc, #668]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	4613      	mov	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	4413      	add	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005574:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005578:	f7fa fe86 	bl	8000288 <__aeabi_dsub>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8005584:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005588:	a399      	add	r3, pc, #612	@ (adr r3, 80057f0 <PID_moveToCoordinate+0x350>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fb f833 	bl	80005f8 <__aeabi_dmul>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	4b98      	ldr	r3, [pc, #608]	@ (8005800 <PID_moveToCoordinate+0x360>)
 80055a0:	f7fb f954 	bl	800084c <__aeabi_ddiv>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    double distance = hypot(error_x, error_y);
 80055ac:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 80055b0:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 80055b4:	f009 fde4 	bl	800f180 <hypot>
 80055b8:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
    double velocityFactor = fmin(distance, parameters[thread].maxVelocity) / distance;
 80055bc:	4b8f      	ldr	r3, [pc, #572]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	019b      	lsls	r3, r3, #6
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4413      	add	r3, r2
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fa ffab 	bl	8000524 <__aeabi_i2d>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	ec43 2b11 	vmov	d1, r2, r3
 80055d6:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80055da:	f009 fee2 	bl	800f3a2 <fmin>
 80055de:	ec51 0b10 	vmov	r0, r1, d0
 80055e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055e6:	f7fb f931 	bl	800084c <__aeabi_ddiv>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    double Vx_local = PID_controller(setpoint[thread].x, currentPosition.x, parameters[thread].KP, parameters[thread].KI, parameters[thread].KD) * velocityFactor;
 80055f2:	4b82      	ldr	r3, [pc, #520]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	461a      	mov	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	ed93 7b00 	vldr	d7, [r3]
 800560a:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800560e:	4b7b      	ldr	r3, [pc, #492]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	019b      	lsls	r3, r3, #6
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	4413      	add	r3, r2
 8005618:	ed93 5b00 	vldr	d5, [r3]
 800561c:	4b77      	ldr	r3, [pc, #476]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	ed93 3b02 	vldr	d3, [r3, #8]
 800562a:	4b74      	ldr	r3, [pc, #464]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	019b      	lsls	r3, r3, #6
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	4413      	add	r3, r2
 8005634:	ed93 4b04 	vldr	d4, [r3, #16]
 8005638:	eeb0 2a45 	vmov.f32	s4, s10
 800563c:	eef0 2a65 	vmov.f32	s5, s11
 8005640:	eeb0 1a46 	vmov.f32	s2, s12
 8005644:	eef0 1a66 	vmov.f32	s3, s13
 8005648:	eeb0 0a47 	vmov.f32	s0, s14
 800564c:	eef0 0a67 	vmov.f32	s1, s15
 8005650:	f7ff fb0e 	bl	8004c70 <PID_controller>
 8005654:	ec53 2b10 	vmov	r2, r3, d0
 8005658:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800565c:	f7fa ffcc 	bl	80005f8 <__aeabi_dmul>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double Vy_local = PID_controller(setpoint[thread].y, currentPosition.y, parameters[thread].KP, parameters[thread].KI, parameters[thread].KD) * velocityFactor;
 8005668:	4b64      	ldr	r3, [pc, #400]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005680:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8005684:	4b5d      	ldr	r3, [pc, #372]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	ed93 5b00 	vldr	d5, [r3]
 8005692:	4b5a      	ldr	r3, [pc, #360]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	019b      	lsls	r3, r3, #6
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4413      	add	r3, r2
 800569c:	ed93 3b02 	vldr	d3, [r3, #8]
 80056a0:	4b56      	ldr	r3, [pc, #344]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	ed93 4b04 	vldr	d4, [r3, #16]
 80056ae:	eeb0 2a45 	vmov.f32	s4, s10
 80056b2:	eef0 2a65 	vmov.f32	s5, s11
 80056b6:	eeb0 1a46 	vmov.f32	s2, s12
 80056ba:	eef0 1a66 	vmov.f32	s3, s13
 80056be:	eeb0 0a47 	vmov.f32	s0, s14
 80056c2:	eef0 0a67 	vmov.f32	s1, s15
 80056c6:	f7ff fad3 	bl	8004c70 <PID_controller>
 80056ca:	ec53 2b10 	vmov	r2, r3, d0
 80056ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80056d2:	f7fa ff91 	bl	80005f8 <__aeabi_dmul>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 80056de:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80056e2:	f009 fd81 	bl	800f1e8 <cos>
 80056e6:	ec51 0b10 	vmov	r0, r1, d0
 80056ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056ee:	f7fa ff83 	bl	80005f8 <__aeabi_dmul>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4614      	mov	r4, r2
 80056f8:	461d      	mov	r5, r3
 80056fa:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80056fe:	f009 fdc7 	bl	800f290 <sin>
 8005702:	ec51 0b10 	vmov	r0, r1, d0
 8005706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800570a:	f7fa ff75 	bl	80005f8 <__aeabi_dmul>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4620      	mov	r0, r4
 8005714:	4629      	mov	r1, r5
 8005716:	f7fa fdb7 	bl	8000288 <__aeabi_dsub>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 8005722:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8005726:	f009 fdb3 	bl	800f290 <sin>
 800572a:	ec51 0b10 	vmov	r0, r1, d0
 800572e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005732:	f7fa ff61 	bl	80005f8 <__aeabi_dmul>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4614      	mov	r4, r2
 800573c:	461d      	mov	r5, r3
 800573e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8005742:	f009 fd51 	bl	800f1e8 <cos>
 8005746:	ec51 0b10 	vmov	r0, r1, d0
 800574a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800574e:	f7fa ff53 	bl	80005f8 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fa fd97 	bl	800028c <__adddf3>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double W = PID_controllerH(setpoint[thread].h, currentPosition.h, parameters[thread].KpH);
 8005766:	4b25      	ldr	r3, [pc, #148]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	461a      	mov	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	ed93 7b04 	vldr	d7, [r3, #16]
 800577e:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8005782:	4b1e      	ldr	r3, [pc, #120]	@ (80057fc <PID_moveToCoordinate+0x35c>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	019b      	lsls	r3, r3, #6
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	4413      	add	r3, r2
 800578c:	ed93 5b06 	vldr	d5, [r3, #24]
 8005790:	eeb0 2a45 	vmov.f32	s4, s10
 8005794:	eef0 2a65 	vmov.f32	s5, s11
 8005798:	eeb0 1a46 	vmov.f32	s2, s12
 800579c:	eef0 1a66 	vmov.f32	s3, s13
 80057a0:	eeb0 0a47 	vmov.f32	s0, s14
 80057a4:	eef0 0a67 	vmov.f32	s1, s15
 80057a8:	f7ff faec 	bl	8004d84 <PID_controllerH>
 80057ac:	eeb0 7a40 	vmov.f32	s14, s0
 80057b0:	eef0 7a60 	vmov.f32	s15, s1
 80057b4:	ed87 7b04 	vstr	d7, [r7, #16]

    if(roll > 0)	{Vx -= roll;}
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80057c4:	f7fb f9a8 	bl	8000b18 <__aeabi_dcmpgt>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01a      	beq.n	8005804 <PID_moveToCoordinate+0x364>
 80057ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80057d2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80057d6:	f7fa fd57 	bl	8000288 <__aeabi_dsub>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80057e2:	e019      	b.n	8005818 <PID_moveToCoordinate+0x378>
 80057e4:	f3af 8000 	nop.w
 80057e8:	00000000 	.word	0x00000000
 80057ec:	4072c000 	.word	0x4072c000
 80057f0:	54442d18 	.word	0x54442d18
 80057f4:	400921fb 	.word	0x400921fb
 80057f8:	20000528 	.word	0x20000528
 80057fc:	20000700 	.word	0x20000700
 8005800:	40668000 	.word	0x40668000
    else			{Vx += roll;}
 8005804:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005808:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800580c:	f7fa fd3e 	bl	800028c <__adddf3>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if(pitch > 0)	{Vy += pitch;}
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005824:	f7fb f978 	bl	8000b18 <__aeabi_dcmpgt>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <PID_moveToCoordinate+0x3a4>
 800582e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005832:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005836:	f7fa fd29 	bl	800028c <__adddf3>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8005842:	e009      	b.n	8005858 <PID_moveToCoordinate+0x3b8>
    else			{Vy -= pitch;}
 8005844:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005848:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800584c:	f7fa fd1c 	bl	8000288 <__aeabi_dsub>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if(atTargetEG(setpoint[thread], currentPosition, parameters[thread].xyTolerance, parameters[thread].hTolerance))
 8005858:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <PID_moveToCoordinate+0x494>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	461a      	mov	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	4a31      	ldr	r2, [pc, #196]	@ (8005934 <PID_moveToCoordinate+0x494>)
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	0192      	lsls	r2, r2, #6
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	440a      	add	r2, r1
 8005876:	ed92 6b0c 	vldr	d6, [r2, #48]	@ 0x30
 800587a:	4a2e      	ldr	r2, [pc, #184]	@ (8005934 <PID_moveToCoordinate+0x494>)
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	0192      	lsls	r2, r2, #6
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	440a      	add	r2, r1
 8005884:	ed92 7b0e 	vldr	d7, [r2, #56]	@ 0x38
 8005888:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 800588c:	ed97 4b0c 	vldr	d4, [r7, #48]	@ 0x30
 8005890:	ed97 5b0e 	vldr	d5, [r7, #56]	@ 0x38
 8005894:	ed93 0b00 	vldr	d0, [r3]
 8005898:	ed93 1b02 	vldr	d1, [r3, #8]
 800589c:	ed93 2b04 	vldr	d2, [r3, #16]
 80058a0:	f7ff fbac 	bl	8004ffc <atTargetEG>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <PID_moveToCoordinate+0x418>
    {
    	thread++;
 80058aa:	4b22      	ldr	r3, [pc, #136]	@ (8005934 <PID_moveToCoordinate+0x494>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4b20      	ldr	r3, [pc, #128]	@ (8005934 <PID_moveToCoordinate+0x494>)
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e03a      	b.n	800592e <PID_moveToCoordinate+0x48e>
    }
    else
    {
		smoothVelocity(&Vx, &Vy, &W, parameters[thread].smoothingFactor);
 80058b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005934 <PID_moveToCoordinate+0x494>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	4413      	add	r3, r2
 80058c2:	ed93 7b08 	vldr	d7, [r3, #32]
 80058c6:	f107 0210 	add.w	r2, r7, #16
 80058ca:	f107 0118 	add.w	r1, r7, #24
 80058ce:	f107 0320 	add.w	r3, r7, #32
 80058d2:	eeb0 0a47 	vmov.f32	s0, s14
 80058d6:	eef0 0a67 	vmov.f32	s1, s15
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff faf0 	bl	8004ec0 <smoothVelocity>
		trying(Vx, Vy, W, setpoint[thread].h, parameters[thread].KpH);
 80058e0:	ed97 7b08 	vldr	d7, [r7, #32]
 80058e4:	ed97 6b06 	vldr	d6, [r7, #24]
 80058e8:	ed97 5b04 	vldr	d5, [r7, #16]
 80058ec:	4b11      	ldr	r3, [pc, #68]	@ (8005934 <PID_moveToCoordinate+0x494>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	461a      	mov	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	ed93 3b04 	vldr	d3, [r3, #16]
 8005904:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <PID_moveToCoordinate+0x494>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	019b      	lsls	r3, r3, #6
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	ed93 4b06 	vldr	d4, [r3, #24]
 8005912:	eeb0 2a45 	vmov.f32	s4, s10
 8005916:	eef0 2a65 	vmov.f32	s5, s11
 800591a:	eeb0 1a46 	vmov.f32	s2, s12
 800591e:	eef0 1a66 	vmov.f32	s3, s13
 8005922:	eeb0 0a47 	vmov.f32	s0, s14
 8005926:	eef0 0a67 	vmov.f32	s1, s15
 800592a:	f7fb fedd 	bl	80016e8 <trying>
//		Inverse_Kinematics(Vx, Vy, W);
    }
}
 800592e:	3788      	adds	r7, #136	@ 0x88
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	20000700 	.word	0x20000700

08005938 <focusToTheBall>:
    double W = PID_controllerH(setpoint_h, currentPosition.h, KpH);
    putar(0, 0, W);
}

void focusToTheBall()
{
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b08c      	sub	sp, #48	@ 0x30
 800593c:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 800593e:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <focusToTheBall+0x108>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
    int ballAngle = camera[1];
 800594c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a40 <focusToTheBall+0x108>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	623b      	str	r3, [r7, #32]
    int ballExistence = camera[2];
 8005952:	4b3b      	ldr	r3, [pc, #236]	@ (8005a40 <focusToTheBall+0x108>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	61fb      	str	r3, [r7, #28]
    int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 8005958:	6a38      	ldr	r0, [r7, #32]
 800595a:	f7fa fde3 	bl	8000524 <__aeabi_i2d>
 800595e:	a336      	add	r3, pc, #216	@ (adr r3, 8005a38 <focusToTheBall+0x100>)
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f7fa fe48 	bl	80005f8 <__aeabi_dmul>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	4b33      	ldr	r3, [pc, #204]	@ (8005a44 <focusToTheBall+0x10c>)
 8005976:	f7fa ff69 	bl	800084c <__aeabi_ddiv>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	ec43 2b17 	vmov	d7, r2, r3
 8005982:	eeb0 0a47 	vmov.f32	s0, s14
 8005986:	eef0 0a67 	vmov.f32	s1, s15
 800598a:	f009 fc2d 	bl	800f1e8 <cos>
 800598e:	ec55 4b10 	vmov	r4, r5, d0
 8005992:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005994:	f7fa fdc6 	bl	8000524 <__aeabi_i2d>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4620      	mov	r0, r4
 800599e:	4629      	mov	r1, r5
 80059a0:	f7fa fe2a 	bl	80005f8 <__aeabi_dmul>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4610      	mov	r0, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	f7fb f8d4 	bl	8000b58 <__aeabi_d2iz>
 80059b0:	4603      	mov	r3, r0
 80059b2:	61bb      	str	r3, [r7, #24]

    int gndtoCam = 518; // in mm
 80059b4:	f240 2306 	movw	r3, #518	@ 0x206
 80059b8:	617b      	str	r3, [r7, #20]
//    static bool increasing = true;
//    static int i = 95;

    if(ballExistence != 0)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d034      	beq.n	8005a2a <focusToTheBall+0xf2>
    {
        double focus = atan2(yBALL, gndtoCam) * 180.0 / M_PI;
 80059c0:	69b8      	ldr	r0, [r7, #24]
 80059c2:	f7fa fdaf 	bl	8000524 <__aeabi_i2d>
 80059c6:	4604      	mov	r4, r0
 80059c8:	460d      	mov	r5, r1
 80059ca:	6978      	ldr	r0, [r7, #20]
 80059cc:	f7fa fdaa 	bl	8000524 <__aeabi_i2d>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	ec43 2b11 	vmov	d1, r2, r3
 80059d8:	ec45 4b10 	vmov	d0, r4, r5
 80059dc:	f009 fbcc 	bl	800f178 <atan2>
 80059e0:	ec51 0b10 	vmov	r0, r1, d0
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	4b16      	ldr	r3, [pc, #88]	@ (8005a44 <focusToTheBall+0x10c>)
 80059ea:	f7fa fe05 	bl	80005f8 <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	a310      	add	r3, pc, #64	@ (adr r3, 8005a38 <focusToTheBall+0x100>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f7fa ff26 	bl	800084c <__aeabi_ddiv>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	e9c7 2302 	strd	r2, r3, [r7, #8]
        int focusMapping = map(0, 90, 45, 130, focus); // 45, 130
 8005a08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a0c:	f7fb f8a4 	bl	8000b58 <__aeabi_d2iz>
 8005a10:	4603      	mov	r3, r0
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2382      	movs	r3, #130	@ 0x82
 8005a16:	222d      	movs	r2, #45	@ 0x2d
 8005a18:	215a      	movs	r1, #90	@ 0x5a
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f7ff fa0c 	bl	8004e38 <map>
 8005a20:	6078      	str	r0, [r7, #4]
        servo_write(focusMapping);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fb9c 	bl	8005160 <servo_write>
//    		i-=5;
//    		if(i <= 95) increasing = true;
//    	}
//    	servo_write(i);
    }
}
 8005a28:	e002      	b.n	8005a30 <focusToTheBall+0xf8>
    	servo_write(97); // 100
 8005a2a:	2061      	movs	r0, #97	@ 0x61
 8005a2c:	f7ff fb98 	bl	8005160 <servo_write>
}
 8005a30:	bf00      	nop
 8005a32:	3728      	adds	r7, #40	@ 0x28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bdb0      	pop	{r4, r5, r7, pc}
 8005a38:	54442d18 	.word	0x54442d18
 8005a3c:	400921fb 	.word	0x400921fb
 8005a40:	2000057c 	.word	0x2000057c
 8005a44:	40668000 	.word	0x40668000

08005a48 <initializeSilos>:

// Initialize silos array
void initializeSilos()
{
 8005a48:	b5b0      	push	{r4, r5, r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SILOS; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	e092      	b.n	8005b7a <initializeSilos+0x132>
    {
        silos[i].distance = SILO_NOT_DETECTED_DISTANCE;
 8005a54:	4a50      	ldr	r2, [pc, #320]	@ (8005b98 <initializeSilos+0x150>)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	015b      	lsls	r3, r3, #5
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8005b9c <initializeSilos+0x154>)
 8005a5e:	601a      	str	r2, [r3, #0]
        silos[i].angle = SILO_NOT_DETECTED_ANGLE;
 8005a60:	4a4d      	ldr	r2, [pc, #308]	@ (8005b98 <initializeSilos+0x150>)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	015b      	lsls	r3, r3, #5
 8005a66:	4413      	add	r3, r2
 8005a68:	3304      	adds	r3, #4
 8005a6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005a6e:	601a      	str	r2, [r3, #0]
        silos[i].detected = false;
 8005a70:	4a49      	ldr	r2, [pc, #292]	@ (8005b98 <initializeSilos+0x150>)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	015b      	lsls	r3, r3, #5
 8005a76:	4413      	add	r3, r2
 8005a78:	3308      	adds	r3, #8
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
        silos[i].ballInSilo = 0;
 8005a7e:	4a46      	ldr	r2, [pc, #280]	@ (8005b98 <initializeSilos+0x150>)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	015b      	lsls	r3, r3, #5
 8005a84:	4413      	add	r3, r2
 8005a86:	330c      	adds	r3, #12
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
        silos[i].x = silos[i].distance * sin(silos[i].angle * M_PI/180.0);
 8005a8c:	4a42      	ldr	r2, [pc, #264]	@ (8005b98 <initializeSilos+0x150>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	015b      	lsls	r3, r3, #5
 8005a92:	4413      	add	r3, r2
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fa fd44 	bl	8000524 <__aeabi_i2d>
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8005b98 <initializeSilos+0x150>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	015b      	lsls	r3, r3, #5
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fa fd39 	bl	8000524 <__aeabi_i2d>
 8005ab2:	a337      	add	r3, pc, #220	@ (adr r3, 8005b90 <initializeSilos+0x148>)
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f7fa fd9e 	bl	80005f8 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	4b35      	ldr	r3, [pc, #212]	@ (8005ba0 <initializeSilos+0x158>)
 8005aca:	f7fa febf 	bl	800084c <__aeabi_ddiv>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	ec43 2b17 	vmov	d7, r2, r3
 8005ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8005ada:	eef0 0a67 	vmov.f32	s1, s15
 8005ade:	f009 fbd7 	bl	800f290 <sin>
 8005ae2:	ec53 2b10 	vmov	r2, r3, d0
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7fa fd85 	bl	80005f8 <__aeabi_dmul>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4829      	ldr	r0, [pc, #164]	@ (8005b98 <initializeSilos+0x150>)
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	0149      	lsls	r1, r1, #5
 8005af8:	4401      	add	r1, r0
 8005afa:	3110      	adds	r1, #16
 8005afc:	e9c1 2300 	strd	r2, r3, [r1]
        silos[i].y = silos[i].distance * cos(silos[i].angle * M_PI/180.0);
 8005b00:	4a25      	ldr	r2, [pc, #148]	@ (8005b98 <initializeSilos+0x150>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	015b      	lsls	r3, r3, #5
 8005b06:	4413      	add	r3, r2
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fa fd0a 	bl	8000524 <__aeabi_i2d>
 8005b10:	4604      	mov	r4, r0
 8005b12:	460d      	mov	r5, r1
 8005b14:	4a20      	ldr	r2, [pc, #128]	@ (8005b98 <initializeSilos+0x150>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	015b      	lsls	r3, r3, #5
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fa fcff 	bl	8000524 <__aeabi_i2d>
 8005b26:	a31a      	add	r3, pc, #104	@ (adr r3, 8005b90 <initializeSilos+0x148>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f7fa fd64 	bl	80005f8 <__aeabi_dmul>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	4b18      	ldr	r3, [pc, #96]	@ (8005ba0 <initializeSilos+0x158>)
 8005b3e:	f7fa fe85 	bl	800084c <__aeabi_ddiv>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	ec43 2b17 	vmov	d7, r2, r3
 8005b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8005b4e:	eef0 0a67 	vmov.f32	s1, s15
 8005b52:	f009 fb49 	bl	800f1e8 <cos>
 8005b56:	ec53 2b10 	vmov	r2, r3, d0
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f7fa fd4b 	bl	80005f8 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	480c      	ldr	r0, [pc, #48]	@ (8005b98 <initializeSilos+0x150>)
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	0149      	lsls	r1, r1, #5
 8005b6c:	4401      	add	r1, r0
 8005b6e:	3118      	adds	r1, #24
 8005b70:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < MAX_SILOS; i++)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3301      	adds	r3, #1
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	f77f af69 	ble.w	8005a54 <initializeSilos+0xc>
    }
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b8c:	f3af 8000 	nop.w
 8005b90:	54442d18 	.word	0x54442d18
 8005b94:	400921fb 	.word	0x400921fb
 8005b98:	20000660 	.word	0x20000660
 8005b9c:	00018696 	.word	0x00018696
 8005ba0:	40668000 	.word	0x40668000
 8005ba4:	00000000 	.word	0x00000000

08005ba8 <detectAndStoreSilo>:

Silo detectAndStoreSilo()
{
 8005ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bac:	b0a2      	sub	sp, #136	@ 0x88
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
    Silo bestSilo;
    bestSilo.distance = SILO_NOT_DETECTED_DISTANCE;
 8005bb2:	4bbb      	ldr	r3, [pc, #748]	@ (8005ea0 <detectAndStoreSilo+0x2f8>)
 8005bb4:	663b      	str	r3, [r7, #96]	@ 0x60
    bestSilo.angle = SILO_NOT_DETECTED_ANGLE;
 8005bb6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005bba:	667b      	str	r3, [r7, #100]	@ 0x64
    bestSilo.detected = false;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    servo_write(120);
 8005bc2:	2078      	movs	r0, #120	@ 0x78
 8005bc4:	f7ff facc 	bl	8005160 <servo_write>

    external_global position = odometry_eg();
 8005bc8:	f7fe fe8a 	bl	80048e0 <odometry_eg>
 8005bcc:	eeb0 5a40 	vmov.f32	s10, s0
 8005bd0:	eef0 5a60 	vmov.f32	s11, s1
 8005bd4:	eeb0 6a41 	vmov.f32	s12, s2
 8005bd8:	eef0 6a61 	vmov.f32	s13, s3
 8005bdc:	eeb0 7a42 	vmov.f32	s14, s4
 8005be0:	eef0 7a62 	vmov.f32	s15, s5
 8005be4:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8005be8:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8005bec:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    int siloDistances[MAX_SILOS] = {camera[3] * 10, camera[5] * 10, camera[7] * 10, camera[9] * 10, camera[11] * 10}; // convert to mm
 8005bf0:	4bac      	ldr	r3, [pc, #688]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfe:	4ba9      	ldr	r3, [pc, #676]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c0c:	4ba5      	ldr	r3, [pc, #660]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c1a:	4ba2      	ldr	r3, [pc, #648]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c28:	4b9e      	ldr	r3, [pc, #632]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	647b      	str	r3, [r7, #68]	@ 0x44
    int siloAngles[MAX_SILOS] = {camera[4], camera[6], camera[8], camera[10], camera[12]};
 8005c36:	4b9b      	ldr	r3, [pc, #620]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	623b      	str	r3, [r7, #32]
 8005c3c:	4b99      	ldr	r3, [pc, #612]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c42:	4b98      	ldr	r3, [pc, #608]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c48:	4b96      	ldr	r3, [pc, #600]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c4e:	4b95      	ldr	r3, [pc, #596]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30

    int ballExistence[5] = {camera[13], camera[14], camera[15], camera[16], camera[17]};
 8005c54:	4b93      	ldr	r3, [pc, #588]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	4b92      	ldr	r3, [pc, #584]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	4b90      	ldr	r3, [pc, #576]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	4b8f      	ldr	r3, [pc, #572]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea4 <detectAndStoreSilo+0x2fc>)
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c70:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < MAX_SILOS; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c78:	e0f8      	b.n	8005e6c <detectAndStoreSilo+0x2c4>
    {
        if (siloDistances[i] != SILO_NOT_DETECTED_DISTANCE && siloAngles[i] != SILO_NOT_DETECTED_ANGLE)
 8005c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	3388      	adds	r3, #136	@ 0x88
 8005c82:	443b      	add	r3, r7
 8005c84:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005c88:	4a85      	ldr	r2, [pc, #532]	@ (8005ea0 <detectAndStoreSilo+0x2f8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	f000 80e1 	beq.w	8005e52 <detectAndStoreSilo+0x2aa>
 8005c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	3388      	adds	r3, #136	@ 0x88
 8005c98:	443b      	add	r3, r7
 8005c9a:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8005c9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	f000 80d5 	beq.w	8005e52 <detectAndStoreSilo+0x2aa>
        {
            silos[i].distance = siloDistances[i];
 8005ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	3388      	adds	r3, #136	@ 0x88
 8005cb0:	443b      	add	r3, r7
 8005cb2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cb6:	497c      	ldr	r1, [pc, #496]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cbc:	015b      	lsls	r3, r3, #5
 8005cbe:	440b      	add	r3, r1
 8005cc0:	601a      	str	r2, [r3, #0]
            silos[i].angle = siloAngles[i];
 8005cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	3388      	adds	r3, #136	@ 0x88
 8005cca:	443b      	add	r3, r7
 8005ccc:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8005cd0:	4975      	ldr	r1, [pc, #468]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cd6:	015b      	lsls	r3, r3, #5
 8005cd8:	440b      	add	r3, r1
 8005cda:	3304      	adds	r3, #4
 8005cdc:	601a      	str	r2, [r3, #0]
            silos[i].detected = true;
 8005cde:	4a72      	ldr	r2, [pc, #456]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ce4:	015b      	lsls	r3, r3, #5
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3308      	adds	r3, #8
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
            silos[i].ballInSilo = ballExistence[i];
 8005cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	3388      	adds	r3, #136	@ 0x88
 8005cf6:	443b      	add	r3, r7
 8005cf8:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8005cfc:	496a      	ldr	r1, [pc, #424]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d02:	015b      	lsls	r3, r3, #5
 8005d04:	440b      	add	r3, r1
 8005d06:	330c      	adds	r3, #12
 8005d08:	601a      	str	r2, [r3, #0]

            // Calculate global coordinates of the detected silo
            silos[i].x = position.x + siloDistances[i] * sin(siloAngles[i] * M_PI / 180.0);
 8005d0a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	3388      	adds	r3, #136	@ 0x88
 8005d16:	443b      	add	r3, r7
 8005d18:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fc01 	bl	8000524 <__aeabi_i2d>
 8005d22:	4680      	mov	r8, r0
 8005d24:	4689      	mov	r9, r1
 8005d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	3388      	adds	r3, #136	@ 0x88
 8005d2e:	443b      	add	r3, r7
 8005d30:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fa fbf5 	bl	8000524 <__aeabi_i2d>
 8005d3a:	a357      	add	r3, pc, #348	@ (adr r3, 8005e98 <detectAndStoreSilo+0x2f0>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fc5a 	bl	80005f8 <__aeabi_dmul>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	4b56      	ldr	r3, [pc, #344]	@ (8005eac <detectAndStoreSilo+0x304>)
 8005d52:	f7fa fd7b 	bl	800084c <__aeabi_ddiv>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	ec43 2b17 	vmov	d7, r2, r3
 8005d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d62:	eef0 0a67 	vmov.f32	s1, s15
 8005d66:	f009 fa93 	bl	800f290 <sin>
 8005d6a:	ec53 2b10 	vmov	r2, r3, d0
 8005d6e:	4640      	mov	r0, r8
 8005d70:	4649      	mov	r1, r9
 8005d72:	f7fa fc41 	bl	80005f8 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa fa85 	bl	800028c <__adddf3>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4848      	ldr	r0, [pc, #288]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005d88:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8005d8c:	0149      	lsls	r1, r1, #5
 8005d8e:	4401      	add	r1, r0
 8005d90:	3110      	adds	r1, #16
 8005d92:	e9c1 2300 	strd	r2, r3, [r1]
            silos[i].y = position.y + siloDistances[i] * cos(siloAngles[i] * M_PI / 180.0);
 8005d96:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	3388      	adds	r3, #136	@ 0x88
 8005da2:	443b      	add	r3, r7
 8005da4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa fbbb 	bl	8000524 <__aeabi_i2d>
 8005dae:	4680      	mov	r8, r0
 8005db0:	4689      	mov	r9, r1
 8005db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	3388      	adds	r3, #136	@ 0x88
 8005dba:	443b      	add	r3, r7
 8005dbc:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fa fbaf 	bl	8000524 <__aeabi_i2d>
 8005dc6:	a334      	add	r3, pc, #208	@ (adr r3, 8005e98 <detectAndStoreSilo+0x2f0>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fc14 	bl	80005f8 <__aeabi_dmul>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	4b33      	ldr	r3, [pc, #204]	@ (8005eac <detectAndStoreSilo+0x304>)
 8005dde:	f7fa fd35 	bl	800084c <__aeabi_ddiv>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	ec43 2b17 	vmov	d7, r2, r3
 8005dea:	eeb0 0a47 	vmov.f32	s0, s14
 8005dee:	eef0 0a67 	vmov.f32	s1, s15
 8005df2:	f009 f9f9 	bl	800f1e8 <cos>
 8005df6:	ec53 2b10 	vmov	r2, r3, d0
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	f7fa fbfb 	bl	80005f8 <__aeabi_dmul>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fa3f 	bl	800028c <__adddf3>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4825      	ldr	r0, [pc, #148]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005e14:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8005e18:	0149      	lsls	r1, r1, #5
 8005e1a:	4401      	add	r1, r0
 8005e1c:	3118      	adds	r1, #24
 8005e1e:	e9c1 2300 	strd	r2, r3, [r1]

            // Check if this is the nearest silo
            if (silos[i].ballInSilo < 1)
 8005e22:	4a21      	ldr	r2, [pc, #132]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e28:	015b      	lsls	r3, r3, #5
 8005e2a:	4413      	add	r3, r2
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	dc16      	bgt.n	8005e62 <detectAndStoreSilo+0x2ba>
            {
                bestSilo = silos[i];
 8005e34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e3a:	015b      	lsls	r3, r3, #5
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8005e42:	461d      	mov	r5, r3
 8005e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (silos[i].ballInSilo < 1)
 8005e50:	e007      	b.n	8005e62 <detectAndStoreSilo+0x2ba>
            }
        }
        else
        {
            silos[i].detected = false;
 8005e52:	4a15      	ldr	r2, [pc, #84]	@ (8005ea8 <detectAndStoreSilo+0x300>)
 8005e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e58:	015b      	lsls	r3, r3, #5
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_SILOS; i++)
 8005e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e66:	3301      	adds	r3, #1
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	f77f af02 	ble.w	8005c7a <detectAndStoreSilo+0xd2>
        }
    }
    return bestSilo;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	461d      	mov	r5, r3
 8005e7a:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8005e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005e86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	3788      	adds	r7, #136	@ 0x88
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e94:	f3af 8000 	nop.w
 8005e98:	54442d18 	.word	0x54442d18
 8005e9c:	400921fb 	.word	0x400921fb
 8005ea0:	00018696 	.word	0x00018696
 8005ea4:	2000057c 	.word	0x2000057c
 8005ea8:	20000660 	.word	0x20000660
 8005eac:	40668000 	.word	0x40668000

08005eb0 <placeBallInSilo>:

void placeBallInSilo(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	ed2d 8b02 	vpush	{d8}
 8005eb6:	b0b4      	sub	sp, #208	@ 0xd0
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	ed87 3b08 	vstr	d3, [r7, #32]
 8005ebe:	ed87 4b06 	vstr	d4, [r7, #24]
 8005ec2:	ed87 5b04 	vstr	d5, [r7, #16]
 8005ec6:	ed87 6b02 	vstr	d6, [r7, #8]
 8005eca:	ed87 7b00 	vstr	d7, [r7]
 8005ece:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8005ed2:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8005ed6:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
    external_global position = odometry_eg();
 8005eda:	f7fe fd01 	bl	80048e0 <odometry_eg>
 8005ede:	eeb0 5a40 	vmov.f32	s10, s0
 8005ee2:	eef0 5a60 	vmov.f32	s11, s1
 8005ee6:	eeb0 6a41 	vmov.f32	s12, s2
 8005eea:	eef0 6a61 	vmov.f32	s13, s3
 8005eee:	eeb0 7a42 	vmov.f32	s14, s4
 8005ef2:	eef0 7a62 	vmov.f32	s15, s5
 8005ef6:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 8005efa:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 8005efe:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    Silo bestSilo = detectAndStoreSilo();
 8005f02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fe4e 	bl	8005ba8 <detectAndStoreSilo>
    double Vx = 0.0, Vy = 0.0, W = 0.0;
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    static uint32_t lastTime = 0;
    uint32_t timer = HAL_GetTick();
 8005f30:	f001 f874 	bl	800701c <HAL_GetTick>
 8005f34:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    setMotorSpeed(1, 0);
 8005f38:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 8006160 <placeBallInSilo+0x2b0>
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f7fb f88d 	bl	800105c <setMotorSpeed>
    setMotorSpeed(2, 0);
 8005f42:	ed9f 0b87 	vldr	d0, [pc, #540]	@ 8006160 <placeBallInSilo+0x2b0>
 8005f46:	2002      	movs	r0, #2
 8005f48:	f7fb f888 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, 0);
 8005f4c:	ed9f 0b84 	vldr	d0, [pc, #528]	@ 8006160 <placeBallInSilo+0x2b0>
 8005f50:	2007      	movs	r0, #7
 8005f52:	f7fb f883 	bl	800105c <setMotorSpeed>

    if(bestSilo.detected)
 8005f56:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80c8 	beq.w	80060f0 <placeBallInSilo+0x240>
    {
        double targetX = bestSilo.x;
 8005f60:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005f64:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
        double targetY = bestSilo.y;
 8005f68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005f6c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    //    double targetH = atan2(targetY - position.y_global, targetX - position.x_global) * 180.0 / M_PI;

        double error_x = targetX - position.x;
 8005f70:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005f74:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005f78:	f7fa f986 	bl	8000288 <__aeabi_dsub>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
        double error_y = targetY - position.y;
 8005f84:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005f88:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f8c:	f7fa f97c 	bl	8000288 <__aeabi_dsub>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        double distance = hypot(error_x, error_y);
 8005f98:	ed97 1b28 	vldr	d1, [r7, #160]	@ 0xa0
 8005f9c:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8005fa0:	f009 f8ee 	bl	800f180 <hypot>
 8005fa4:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
        double velocityFactor = fmin(distance, maxVelocity) / distance;
 8005fa8:	ed97 1b36 	vldr	d1, [r7, #216]	@ 0xd8
 8005fac:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 8005fb0:	f009 f9f7 	bl	800f3a2 <fmin>
 8005fb4:	ec51 0b10 	vmov	r0, r1, d0
 8005fb8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8005fbc:	f7fa fc46 	bl	800084c <__aeabi_ddiv>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        Vx = PID_controller(targetX, position.x, Kp, Ki, Kd) * velocityFactor;
 8005fc8:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8005fcc:	ed97 4b04 	vldr	d4, [r7, #16]
 8005fd0:	ed97 3b06 	vldr	d3, [r7, #24]
 8005fd4:	ed97 2b08 	vldr	d2, [r7, #32]
 8005fd8:	eeb0 1a47 	vmov.f32	s2, s14
 8005fdc:	eef0 1a67 	vmov.f32	s3, s15
 8005fe0:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8005fe4:	f7fe fe44 	bl	8004c70 <PID_controller>
 8005fe8:	ec51 0b10 	vmov	r0, r1, d0
 8005fec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
        Vy = PID_controller(targetY, position.y, Kp+0.5, Ki, Kd) * velocityFactor;
 8005ffc:	ed97 8b20 	vldr	d8, [r7, #128]	@ 0x80
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	4b5e      	ldr	r3, [pc, #376]	@ (8006180 <placeBallInSilo+0x2d0>)
 8006006:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800600a:	f7fa f93f 	bl	800028c <__adddf3>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	ec43 2b17 	vmov	d7, r2, r3
 8006016:	ed97 4b04 	vldr	d4, [r7, #16]
 800601a:	ed97 3b06 	vldr	d3, [r7, #24]
 800601e:	eeb0 2a47 	vmov.f32	s4, s14
 8006022:	eef0 2a67 	vmov.f32	s5, s15
 8006026:	eeb0 1a48 	vmov.f32	s2, s16
 800602a:	eef0 1a68 	vmov.f32	s3, s17
 800602e:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8006032:	f7fe fe1d 	bl	8004c70 <PID_controller>
 8006036:	ec51 0b10 	vmov	r0, r1, d0
 800603a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800603e:	f7fa fadb 	bl	80005f8 <__aeabi_dmul>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        W = PID_controllerH(setpoint.h, position.h, KpH);
 800604a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800604e:	ed97 6b22 	vldr	d6, [r7, #136]	@ 0x88
 8006052:	ed97 2b02 	vldr	d2, [r7, #8]
 8006056:	eeb0 1a46 	vmov.f32	s2, s12
 800605a:	eef0 1a66 	vmov.f32	s3, s13
 800605e:	eeb0 0a47 	vmov.f32	s0, s14
 8006062:	eef0 0a67 	vmov.f32	s1, s15
 8006066:	f7fe fe8d 	bl	8004d84 <PID_controllerH>
 800606a:	eeb0 7a40 	vmov.f32	s14, s0
 800606e:	eef0 7a60 	vmov.f32	s15, s1
 8006072:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

        if(bestSilo.distance <= 400) {Vx = 0; Vy = 2000; W = 0;}
 8006076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006078:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800607c:	dc10      	bgt.n	80060a0 <placeBallInSilo+0x1f0>
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	4b3d      	ldr	r3, [pc, #244]	@ (8006184 <placeBallInSilo+0x2d4>)
 8006090:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 80060a0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80060a4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80060a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80060ac:	ed97 0b00 	vldr	d0, [r7]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe ff05 	bl	8004ec0 <smoothVelocity>
//        Inverse_Kinematics(Vx, Vy, W);
        trying(Vx, Vy, W, setpoint.h, KpH);
 80060b6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80060ba:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80060be:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 80060c2:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 80060c6:	ed97 4b02 	vldr	d4, [r7, #8]
 80060ca:	eeb0 2a45 	vmov.f32	s4, s10
 80060ce:	eef0 2a65 	vmov.f32	s5, s11
 80060d2:	eeb0 1a46 	vmov.f32	s2, s12
 80060d6:	eef0 1a66 	vmov.f32	s3, s13
 80060da:	eeb0 0a47 	vmov.f32	s0, s14
 80060de:	eef0 0a67 	vmov.f32	s1, s15
 80060e2:	f7fb fb01 	bl	80016e8 <trying>
        lastTime = timer;
 80060e6:	4a28      	ldr	r2, [pc, #160]	@ (8006188 <placeBallInSilo+0x2d8>)
 80060e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060ec:	6013      	str	r3, [r2, #0]
    }
    else
    {
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
    }
}
 80060ee:	e02f      	b.n	8006150 <placeBallInSilo+0x2a0>
    else if(timer - lastTime <= 1600)
 80060f0:	4b25      	ldr	r3, [pc, #148]	@ (8006188 <placeBallInSilo+0x2d8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80060fe:	d810      	bhi.n	8006122 <placeBallInSilo+0x272>
    	trying(0, 2000, 0, setpoint.h, KpH);
 8006100:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8006104:	ed97 4b02 	vldr	d4, [r7, #8]
 8006108:	eeb0 3a47 	vmov.f32	s6, s14
 800610c:	eef0 3a67 	vmov.f32	s7, s15
 8006110:	ed9f 2b13 	vldr	d2, [pc, #76]	@ 8006160 <placeBallInSilo+0x2b0>
 8006114:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8006168 <placeBallInSilo+0x2b8>
 8006118:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8006160 <placeBallInSilo+0x2b0>
 800611c:	f7fb fae4 	bl	80016e8 <trying>
}
 8006120:	e016      	b.n	8006150 <placeBallInSilo+0x2a0>
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
 8006122:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8006126:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800612a:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 800612e:	a310      	add	r3, pc, #64	@ (adr r3, 8006170 <placeBallInSilo+0x2c0>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	e9cd 2300 	strd	r2, r3, [sp]
 8006138:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8006178 <placeBallInSilo+0x2c8>
 800613c:	ed97 6b02 	vldr	d6, [r7, #8]
 8006140:	ed97 5b04 	vldr	d5, [r7, #16]
 8006144:	ed97 4b06 	vldr	d4, [r7, #24]
 8006148:	ed97 3b08 	vldr	d3, [r7, #32]
 800614c:	f7ff f820 	bl	8005190 <PID_EG>
}
 8006150:	bf00      	nop
 8006152:	37c8      	adds	r7, #200	@ 0xc8
 8006154:	46bd      	mov	sp, r7
 8006156:	ecbd 8b02 	vpop	{d8}
 800615a:	bd80      	pop	{r7, pc}
 800615c:	f3af 8000 	nop.w
	...
 800616c:	409f4000 	.word	0x409f4000
 8006170:	00000000 	.word	0x00000000
 8006174:	40a77000 	.word	0x40a77000
 8006178:	00000000 	.word	0x00000000
 800617c:	3fe80000 	.word	0x3fe80000
 8006180:	3fe00000 	.word	0x3fe00000
 8006184:	409f4000 	.word	0x409f4000
 8006188:	20000704 	.word	0x20000704
 800618c:	00000000 	.word	0x00000000

08006190 <findAndTakeBall>:

void findAndTakeBall(external_global *findBall)
{
 8006190:	b5b0      	push	{r4, r5, r7, lr}
 8006192:	b098      	sub	sp, #96	@ 0x60
 8006194:	af02      	add	r7, sp, #8
 8006196:	6078      	str	r0, [r7, #4]
     * camera[2]: ball existence (number of balls)
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

	external_global position = odometry_eg();
 8006198:	f7fe fba2 	bl	80048e0 <odometry_eg>
 800619c:	eeb0 5a40 	vmov.f32	s10, s0
 80061a0:	eef0 5a60 	vmov.f32	s11, s1
 80061a4:	eeb0 6a41 	vmov.f32	s12, s2
 80061a8:	eef0 6a61 	vmov.f32	s13, s3
 80061ac:	eeb0 7a42 	vmov.f32	s14, s4
 80061b0:	eef0 7a62 	vmov.f32	s15, s5
 80061b4:	ed87 5b02 	vstr	d5, [r7, #8]
 80061b8:	ed87 6b04 	vstr	d6, [r7, #16]
 80061bc:	ed87 7b06 	vstr	d7, [r7, #24]
    static uint32_t lastTimeBallSeen = 0;
    static uint32_t searchStartTime = 0;
    static uint8_t searchMode = 1;
    static uint8_t lastSearchMode = 1;

    uint32_t timer = HAL_GetTick();
 80061c0:	f000 ff2c 	bl	800701c <HAL_GetTick>
 80061c4:	63f8      	str	r0, [r7, #60]	@ 0x3c

    int ballDistance = camera[0] * 10; // convert to mm
 80061c6:	4bbe      	ldr	r3, [pc, #760]	@ (80064c0 <findAndTakeBall+0x330>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    int ballAngle = camera[1];
 80061d4:	4bba      	ldr	r3, [pc, #744]	@ (80064c0 <findAndTakeBall+0x330>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
    int ballExistence = camera[2];
 80061da:	4bb9      	ldr	r3, [pc, #740]	@ (80064c0 <findAndTakeBall+0x330>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	633b      	str	r3, [r7, #48]	@ 0x30

    double Vx = 0.0;
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = 0.0;
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = 0.0;
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    focusToTheBall();
 8006204:	f7ff fb98 	bl	8005938 <focusToTheBall>

    if (ballExistence != 0)
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80a8 	beq.w	8006360 <findAndTakeBall+0x1d0>
    {
        double xBall = ballDistance * sin(ballAngle * M_PI / 180.0);
 8006210:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006212:	f7fa f987 	bl	8000524 <__aeabi_i2d>
 8006216:	4604      	mov	r4, r0
 8006218:	460d      	mov	r5, r1
 800621a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800621c:	f7fa f982 	bl	8000524 <__aeabi_i2d>
 8006220:	a38f      	add	r3, pc, #572	@ (adr r3, 8006460 <findAndTakeBall+0x2d0>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7fa f9e7 	bl	80005f8 <__aeabi_dmul>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4610      	mov	r0, r2
 8006230:	4619      	mov	r1, r3
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	4ba3      	ldr	r3, [pc, #652]	@ (80064c4 <findAndTakeBall+0x334>)
 8006238:	f7fa fb08 	bl	800084c <__aeabi_ddiv>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	ec43 2b17 	vmov	d7, r2, r3
 8006244:	eeb0 0a47 	vmov.f32	s0, s14
 8006248:	eef0 0a67 	vmov.f32	s1, s15
 800624c:	f009 f820 	bl	800f290 <sin>
 8006250:	ec53 2b10 	vmov	r2, r3, d0
 8006254:	4620      	mov	r0, r4
 8006256:	4629      	mov	r1, r5
 8006258:	f7fa f9ce 	bl	80005f8 <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        double yBall = ballDistance * cos(ballAngle * M_PI / 180.0);
 8006264:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006266:	f7fa f95d 	bl	8000524 <__aeabi_i2d>
 800626a:	4604      	mov	r4, r0
 800626c:	460d      	mov	r5, r1
 800626e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006270:	f7fa f958 	bl	8000524 <__aeabi_i2d>
 8006274:	a37a      	add	r3, pc, #488	@ (adr r3, 8006460 <findAndTakeBall+0x2d0>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7fa f9bd 	bl	80005f8 <__aeabi_dmul>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	4b8e      	ldr	r3, [pc, #568]	@ (80064c4 <findAndTakeBall+0x334>)
 800628c:	f7fa fade 	bl	800084c <__aeabi_ddiv>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	ec43 2b17 	vmov	d7, r2, r3
 8006298:	eeb0 0a47 	vmov.f32	s0, s14
 800629c:	eef0 0a67 	vmov.f32	s1, s15
 80062a0:	f008 ffa2 	bl	800f1e8 <cos>
 80062a4:	ec53 2b10 	vmov	r2, r3, d0
 80062a8:	4620      	mov	r0, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	f7fa f9a4 	bl	80005f8 <__aeabi_dmul>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	e9c7 2308 	strd	r2, r3, [r7, #32]

        Vx = PID_controller(xBall, 0.0, 1.5, 0.0, 0.0);
 80062b8:	ed9f 4b6b 	vldr	d4, [pc, #428]	@ 8006468 <findAndTakeBall+0x2d8>
 80062bc:	ed9f 3b6a 	vldr	d3, [pc, #424]	@ 8006468 <findAndTakeBall+0x2d8>
 80062c0:	ed9f 2b6b 	vldr	d2, [pc, #428]	@ 8006470 <findAndTakeBall+0x2e0>
 80062c4:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8006468 <findAndTakeBall+0x2d8>
 80062c8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80062cc:	f7fe fcd0 	bl	8004c70 <PID_controller>
 80062d0:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
        Vy = PID_controller(yBall, 0.0, 2.0, 0.0, 0.0);
 80062d4:	ed9f 4b64 	vldr	d4, [pc, #400]	@ 8006468 <findAndTakeBall+0x2d8>
 80062d8:	ed9f 3b63 	vldr	d3, [pc, #396]	@ 8006468 <findAndTakeBall+0x2d8>
 80062dc:	ed9f 2b66 	vldr	d2, [pc, #408]	@ 8006478 <findAndTakeBall+0x2e8>
 80062e0:	ed9f 1b61 	vldr	d1, [pc, #388]	@ 8006468 <findAndTakeBall+0x2d8>
 80062e4:	ed97 0b08 	vldr	d0, [r7, #32]
 80062e8:	f7fe fcc2 	bl	8004c70 <PID_controller>
 80062ec:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
        W = PID_controllerH(ballAngle, 0.0, 1.5);
 80062f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80062f2:	f7fa f917 	bl	8000524 <__aeabi_i2d>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	ed9f 2b5d 	vldr	d2, [pc, #372]	@ 8006470 <findAndTakeBall+0x2e0>
 80062fe:	ed9f 1b5a 	vldr	d1, [pc, #360]	@ 8006468 <findAndTakeBall+0x2d8>
 8006302:	ec43 2b10 	vmov	d0, r2, r3
 8006306:	f7fe fd3d 	bl	8004d84 <PID_controllerH>
 800630a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

        if(ballDistance <= 400) {Vx = 0; Vy = 2000; W = 0;}
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006314:	dc10      	bgt.n	8006338 <findAndTakeBall+0x1a8>
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	4b68      	ldr	r3, [pc, #416]	@ (80064c8 <findAndTakeBall+0x338>)
 8006328:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        Inverse_Kinematics(Vx, Vy, W);
 8006338:	ed97 2b10 	vldr	d2, [r7, #64]	@ 0x40
 800633c:	ed97 1b12 	vldr	d1, [r7, #72]	@ 0x48
 8006340:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8006344:	f7fa ff00 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2000);
 8006348:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8006480 <findAndTakeBall+0x2f0>
 800634c:	2001      	movs	r0, #1
 800634e:	f7fa fe85 	bl	800105c <setMotorSpeed>
        lastTimeBallSeen = timer;
 8006352:	4a5e      	ldr	r2, [pc, #376]	@ (80064cc <findAndTakeBall+0x33c>)
 8006354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006356:	6013      	str	r3, [r2, #0]
        searchStartTime = timer;
 8006358:	4a5d      	ldr	r2, [pc, #372]	@ (80064d0 <findAndTakeBall+0x340>)
 800635a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635c:	6013      	str	r3, [r2, #0]
//                    }
//                    break;
//            }
//        }
    }
}
 800635e:	e170      	b.n	8006642 <findAndTakeBall+0x4b2>
    else if (timer - lastTimeBallSeen <= 700)
 8006360:	4b5a      	ldr	r3, [pc, #360]	@ (80064cc <findAndTakeBall+0x33c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800636c:	d80d      	bhi.n	800638a <findAndTakeBall+0x1fa>
        Inverse_Kinematics(0, 2000, 0);
 800636e:	ed9f 2b3e 	vldr	d2, [pc, #248]	@ 8006468 <findAndTakeBall+0x2d8>
 8006372:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8006488 <findAndTakeBall+0x2f8>
 8006376:	ed9f 0b3c 	vldr	d0, [pc, #240]	@ 8006468 <findAndTakeBall+0x2d8>
 800637a:	f7fa fee5 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2000);
 800637e:	ed9f 0b40 	vldr	d0, [pc, #256]	@ 8006480 <findAndTakeBall+0x2f0>
 8006382:	2001      	movs	r0, #1
 8006384:	f7fa fe6a 	bl	800105c <setMotorSpeed>
}
 8006388:	e15b      	b.n	8006642 <findAndTakeBall+0x4b2>
        setMotorSpeed(1, 0);
 800638a:	ed9f 0b37 	vldr	d0, [pc, #220]	@ 8006468 <findAndTakeBall+0x2d8>
 800638e:	2001      	movs	r0, #1
 8006390:	f7fa fe64 	bl	800105c <setMotorSpeed>
        setMotorSpeed(2, 0);
 8006394:	ed9f 0b34 	vldr	d0, [pc, #208]	@ 8006468 <findAndTakeBall+0x2d8>
 8006398:	2002      	movs	r0, #2
 800639a:	f7fa fe5f 	bl	800105c <setMotorSpeed>
        setMotorSpeed(7, 0);
 800639e:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8006468 <findAndTakeBall+0x2d8>
 80063a2:	2007      	movs	r0, #7
 80063a4:	f7fa fe5a 	bl	800105c <setMotorSpeed>
        if (searchStartTime == 0) {searchStartTime = timer;}
 80063a8:	4b49      	ldr	r3, [pc, #292]	@ (80064d0 <findAndTakeBall+0x340>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <findAndTakeBall+0x226>
 80063b0:	4a47      	ldr	r2, [pc, #284]	@ (80064d0 <findAndTakeBall+0x340>)
 80063b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b4:	6013      	str	r3, [r2, #0]
        switch(searchMode)
 80063b6:	4b47      	ldr	r3, [pc, #284]	@ (80064d4 <findAndTakeBall+0x344>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	2b03      	cmp	r3, #3
 80063be:	f200 8140 	bhi.w	8006642 <findAndTakeBall+0x4b2>
 80063c2:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <findAndTakeBall+0x238>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080064dd 	.word	0x080064dd
 80063d0:	08006551 	.word	0x08006551
 80063d4:	080065c5 	.word	0x080065c5
        	if(timer - searchStartTime >= 6000)
 80063d8:	4b3d      	ldr	r3, [pc, #244]	@ (80064d0 <findAndTakeBall+0x340>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	f241 726f 	movw	r2, #5999	@ 0x176f
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d907      	bls.n	80063f8 <findAndTakeBall+0x268>
        		searchMode += lastSearchMode;
 80063e8:	4b3a      	ldr	r3, [pc, #232]	@ (80064d4 <findAndTakeBall+0x344>)
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	4b3a      	ldr	r3, [pc, #232]	@ (80064d8 <findAndTakeBall+0x348>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	4413      	add	r3, r2
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	4b37      	ldr	r3, [pc, #220]	@ (80064d4 <findAndTakeBall+0x344>)
 80063f6:	701a      	strb	r2, [r3, #0]
        	if(lastSearchMode == 1)
 80063f8:	4b37      	ldr	r3, [pc, #220]	@ (80064d8 <findAndTakeBall+0x348>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d10c      	bne.n	800641a <findAndTakeBall+0x28a>
        		lookForTheBall(-10.0, -170.0, position.h);
 8006400:	ed97 7b06 	vldr	d7, [r7, #24]
 8006404:	eeb0 2a47 	vmov.f32	s4, s14
 8006408:	eef0 2a67 	vmov.f32	s5, s15
 800640c:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8006490 <findAndTakeBall+0x300>
 8006410:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 8006498 <findAndTakeBall+0x308>
 8006414:	f7fe fe4c 	bl	80050b0 <lookForTheBall>
        	break;
 8006418:	e10c      	b.n	8006634 <findAndTakeBall+0x4a4>
        	else if(lastSearchMode == 2)
 800641a:	4b2f      	ldr	r3, [pc, #188]	@ (80064d8 <findAndTakeBall+0x348>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d10c      	bne.n	800643c <findAndTakeBall+0x2ac>
        		lookForTheBall(-100.0, 100.0, position.h);
 8006422:	ed97 7b06 	vldr	d7, [r7, #24]
 8006426:	eeb0 2a47 	vmov.f32	s4, s14
 800642a:	eef0 2a67 	vmov.f32	s5, s15
 800642e:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80064a0 <findAndTakeBall+0x310>
 8006432:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 80064a8 <findAndTakeBall+0x318>
 8006436:	f7fe fe3b 	bl	80050b0 <lookForTheBall>
        	break;
 800643a:	e0fb      	b.n	8006634 <findAndTakeBall+0x4a4>
        	else if(lastSearchMode == 3)
 800643c:	4b26      	ldr	r3, [pc, #152]	@ (80064d8 <findAndTakeBall+0x348>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b03      	cmp	r3, #3
 8006442:	f040 80f7 	bne.w	8006634 <findAndTakeBall+0x4a4>
        		lookForTheBall(-70.0, 70.0, position.h);
 8006446:	ed97 7b06 	vldr	d7, [r7, #24]
 800644a:	eeb0 2a47 	vmov.f32	s4, s14
 800644e:	eef0 2a67 	vmov.f32	s5, s15
 8006452:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 80064b0 <findAndTakeBall+0x320>
 8006456:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 80064b8 <findAndTakeBall+0x328>
 800645a:	f7fe fe29 	bl	80050b0 <lookForTheBall>
        	break;
 800645e:	e0e9      	b.n	8006634 <findAndTakeBall+0x4a4>
 8006460:	54442d18 	.word	0x54442d18
 8006464:	400921fb 	.word	0x400921fb
	...
 8006474:	3ff80000 	.word	0x3ff80000
 8006478:	00000000 	.word	0x00000000
 800647c:	40000000 	.word	0x40000000
 8006480:	00000000 	.word	0x00000000
 8006484:	c09f4000 	.word	0xc09f4000
 8006488:	00000000 	.word	0x00000000
 800648c:	409f4000 	.word	0x409f4000
 8006490:	00000000 	.word	0x00000000
 8006494:	c0654000 	.word	0xc0654000
 8006498:	00000000 	.word	0x00000000
 800649c:	c0240000 	.word	0xc0240000
 80064a0:	00000000 	.word	0x00000000
 80064a4:	40590000 	.word	0x40590000
 80064a8:	00000000 	.word	0x00000000
 80064ac:	c0590000 	.word	0xc0590000
 80064b0:	00000000 	.word	0x00000000
 80064b4:	40518000 	.word	0x40518000
 80064b8:	00000000 	.word	0x00000000
 80064bc:	c0518000 	.word	0xc0518000
 80064c0:	2000057c 	.word	0x2000057c
 80064c4:	40668000 	.word	0x40668000
 80064c8:	409f4000 	.word	0x409f4000
 80064cc:	20000708 	.word	0x20000708
 80064d0:	2000070c 	.word	0x2000070c
 80064d4:	200000ca 	.word	0x200000ca
 80064d8:	200000cb 	.word	0x200000cb
        	lastSearchMode = 2;
 80064dc:	4b6c      	ldr	r3, [pc, #432]	@ (8006690 <findAndTakeBall+0x500>)
 80064de:	2202      	movs	r2, #2
 80064e0:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[1], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3318      	adds	r3, #24
 80064e6:	ed93 0b00 	vldr	d0, [r3]
 80064ea:	ed93 1b02 	vldr	d1, [r3, #8]
 80064ee:	ed93 2b04 	vldr	d2, [r3, #16]
 80064f2:	a357      	add	r3, pc, #348	@ (adr r3, 8006650 <findAndTakeBall+0x4c0>)
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	e9cd 2300 	strd	r2, r3, [sp]
 80064fc:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8006658 <findAndTakeBall+0x4c8>
 8006500:	ed9f 6b57 	vldr	d6, [pc, #348]	@ 8006660 <findAndTakeBall+0x4d0>
 8006504:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8006668 <findAndTakeBall+0x4d8>
 8006508:	ed9f 4b57 	vldr	d4, [pc, #348]	@ 8006668 <findAndTakeBall+0x4d8>
 800650c:	ed9f 3b58 	vldr	d3, [pc, #352]	@ 8006670 <findAndTakeBall+0x4e0>
 8006510:	f7fe fe3e 	bl	8005190 <PID_EG>
        	searchStartTime = timer;
 8006514:	4a5f      	ldr	r2, [pc, #380]	@ (8006694 <findAndTakeBall+0x504>)
 8006516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006518:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[1], position, 500, 10))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3318      	adds	r3, #24
 800651e:	ed97 3b02 	vldr	d3, [r7, #8]
 8006522:	ed97 4b04 	vldr	d4, [r7, #16]
 8006526:	ed97 5b06 	vldr	d5, [r7, #24]
 800652a:	ed93 0b00 	vldr	d0, [r3]
 800652e:	ed93 1b02 	vldr	d1, [r3, #8]
 8006532:	ed93 2b04 	vldr	d2, [r3, #16]
 8006536:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 8006678 <findAndTakeBall+0x4e8>
 800653a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8006680 <findAndTakeBall+0x4f0>
 800653e:	f7fe fd5d 	bl	8004ffc <atTargetEG>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d077      	beq.n	8006638 <findAndTakeBall+0x4a8>
        		searchMode = 1;
 8006548:	4b53      	ldr	r3, [pc, #332]	@ (8006698 <findAndTakeBall+0x508>)
 800654a:	2201      	movs	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
        	break;
 800654e:	e073      	b.n	8006638 <findAndTakeBall+0x4a8>
        	lastSearchMode = 3;
 8006550:	4b4f      	ldr	r3, [pc, #316]	@ (8006690 <findAndTakeBall+0x500>)
 8006552:	2203      	movs	r2, #3
 8006554:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[2], 2.0, 0.0, 0.0, 1.3, 0.8, 2700);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3330      	adds	r3, #48	@ 0x30
 800655a:	ed93 0b00 	vldr	d0, [r3]
 800655e:	ed93 1b02 	vldr	d1, [r3, #8]
 8006562:	ed93 2b04 	vldr	d2, [r3, #16]
 8006566:	a33a      	add	r3, pc, #232	@ (adr r3, 8006650 <findAndTakeBall+0x4c0>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	e9cd 2300 	strd	r2, r3, [sp]
 8006570:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 8006658 <findAndTakeBall+0x4c8>
 8006574:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8006660 <findAndTakeBall+0x4d0>
 8006578:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8006668 <findAndTakeBall+0x4d8>
 800657c:	ed9f 4b3a 	vldr	d4, [pc, #232]	@ 8006668 <findAndTakeBall+0x4d8>
 8006580:	ed9f 3b41 	vldr	d3, [pc, #260]	@ 8006688 <findAndTakeBall+0x4f8>
 8006584:	f7fe fe04 	bl	8005190 <PID_EG>
        	searchStartTime = timer;
 8006588:	4a42      	ldr	r2, [pc, #264]	@ (8006694 <findAndTakeBall+0x504>)
 800658a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658c:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[2], position, 500, 10))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3330      	adds	r3, #48	@ 0x30
 8006592:	ed97 3b02 	vldr	d3, [r7, #8]
 8006596:	ed97 4b04 	vldr	d4, [r7, #16]
 800659a:	ed97 5b06 	vldr	d5, [r7, #24]
 800659e:	ed93 0b00 	vldr	d0, [r3]
 80065a2:	ed93 1b02 	vldr	d1, [r3, #8]
 80065a6:	ed93 2b04 	vldr	d2, [r3, #16]
 80065aa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8006678 <findAndTakeBall+0x4e8>
 80065ae:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8006680 <findAndTakeBall+0x4f0>
 80065b2:	f7fe fd23 	bl	8004ffc <atTargetEG>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d03f      	beq.n	800663c <findAndTakeBall+0x4ac>
        		searchMode = 1;
 80065bc:	4b36      	ldr	r3, [pc, #216]	@ (8006698 <findAndTakeBall+0x508>)
 80065be:	2201      	movs	r2, #1
 80065c0:	701a      	strb	r2, [r3, #0]
        	break;
 80065c2:	e03b      	b.n	800663c <findAndTakeBall+0x4ac>
        	lastSearchMode = 1;
 80065c4:	4b32      	ldr	r3, [pc, #200]	@ (8006690 <findAndTakeBall+0x500>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[0], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	ed93 0b00 	vldr	d0, [r3]
 80065d0:	ed93 1b02 	vldr	d1, [r3, #8]
 80065d4:	ed93 2b04 	vldr	d2, [r3, #16]
 80065d8:	a31d      	add	r3, pc, #116	@ (adr r3, 8006650 <findAndTakeBall+0x4c0>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	e9cd 2300 	strd	r2, r3, [sp]
 80065e2:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8006658 <findAndTakeBall+0x4c8>
 80065e6:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8006660 <findAndTakeBall+0x4d0>
 80065ea:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8006668 <findAndTakeBall+0x4d8>
 80065ee:	ed9f 4b1e 	vldr	d4, [pc, #120]	@ 8006668 <findAndTakeBall+0x4d8>
 80065f2:	ed9f 3b1f 	vldr	d3, [pc, #124]	@ 8006670 <findAndTakeBall+0x4e0>
 80065f6:	f7fe fdcb 	bl	8005190 <PID_EG>
        	searchStartTime = timer;
 80065fa:	4a26      	ldr	r2, [pc, #152]	@ (8006694 <findAndTakeBall+0x504>)
 80065fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fe:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[0], position, 500, 10))
 8006600:	ed97 3b02 	vldr	d3, [r7, #8]
 8006604:	ed97 4b04 	vldr	d4, [r7, #16]
 8006608:	ed97 5b06 	vldr	d5, [r7, #24]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	ed93 0b00 	vldr	d0, [r3]
 8006612:	ed93 1b02 	vldr	d1, [r3, #8]
 8006616:	ed93 2b04 	vldr	d2, [r3, #16]
 800661a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8006678 <findAndTakeBall+0x4e8>
 800661e:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8006680 <findAndTakeBall+0x4f0>
 8006622:	f7fe fceb 	bl	8004ffc <atTargetEG>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <findAndTakeBall+0x4b0>
        		searchMode = 1;
 800662c:	4b1a      	ldr	r3, [pc, #104]	@ (8006698 <findAndTakeBall+0x508>)
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
        	break;
 8006632:	e005      	b.n	8006640 <findAndTakeBall+0x4b0>
        	break;
 8006634:	bf00      	nop
 8006636:	e004      	b.n	8006642 <findAndTakeBall+0x4b2>
        	break;
 8006638:	bf00      	nop
 800663a:	e002      	b.n	8006642 <findAndTakeBall+0x4b2>
        	break;
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <findAndTakeBall+0x4b2>
        	break;
 8006640:	bf00      	nop
}
 8006642:	bf00      	nop
 8006644:	3758      	adds	r7, #88	@ 0x58
 8006646:	46bd      	mov	sp, r7
 8006648:	bdb0      	pop	{r4, r5, r7, pc}
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w
 8006650:	00000000 	.word	0x00000000
 8006654:	40a51800 	.word	0x40a51800
 8006658:	9999999a 	.word	0x9999999a
 800665c:	3fe99999 	.word	0x3fe99999
 8006660:	cccccccd 	.word	0xcccccccd
 8006664:	3ff4cccc 	.word	0x3ff4cccc
	...
 8006670:	66666666 	.word	0x66666666
 8006674:	40066666 	.word	0x40066666
 8006678:	00000000 	.word	0x00000000
 800667c:	40240000 	.word	0x40240000
 8006680:	00000000 	.word	0x00000000
 8006684:	407f4000 	.word	0x407f4000
 8006688:	00000000 	.word	0x00000000
 800668c:	40000000 	.word	0x40000000
 8006690:	200000cb 	.word	0x200000cb
 8006694:	2000070c 	.word	0x2000070c
 8006698:	200000ca 	.word	0x200000ca
 800669c:	00000000 	.word	0x00000000

080066a0 <throwTheBall>:

void throwTheBall(external_global whereTo, double Kp, double Ki, double Kd, double KpH)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b096      	sub	sp, #88	@ 0x58
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	eeb0 7a42 	vmov.f32	s14, s4
 80066aa:	eef0 7a62 	vmov.f32	s15, s5
 80066ae:	ed87 3b06 	vstr	d3, [r7, #24]
 80066b2:	ed87 4b04 	vstr	d4, [r7, #16]
 80066b6:	ed87 5b02 	vstr	d5, [r7, #8]
 80066ba:	ed87 6b00 	vstr	d6, [r7]
 80066be:	ed87 0b08 	vstr	d0, [r7, #32]
 80066c2:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80066c6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	external_global position = odometry_eg();
 80066ca:	f7fe f909 	bl	80048e0 <odometry_eg>
 80066ce:	eeb0 5a40 	vmov.f32	s10, s0
 80066d2:	eef0 5a60 	vmov.f32	s11, s1
 80066d6:	eeb0 6a41 	vmov.f32	s12, s2
 80066da:	eef0 6a61 	vmov.f32	s13, s3
 80066de:	eeb0 7a42 	vmov.f32	s14, s4
 80066e2:	eef0 7a62 	vmov.f32	s15, s5
 80066e6:	ed87 5b0e 	vstr	d5, [r7, #56]	@ 0x38
 80066ea:	ed87 6b10 	vstr	d6, [r7, #64]	@ 0x40
 80066ee:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

	if(atTargetEG(whereTo, position, 400, 5))
 80066f2:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 80066f6:	ed97 4b10 	vldr	d4, [r7, #64]	@ 0x40
 80066fa:	ed97 5b12 	vldr	d5, [r7, #72]	@ 0x48
 80066fe:	ed97 0b08 	vldr	d0, [r7, #32]
 8006702:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8006706:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 800670a:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8006780 <throwTheBall+0xe0>
 800670e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8006788 <throwTheBall+0xe8>
 8006712:	f7fe fc73 	bl	8004ffc <atTargetEG>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <throwTheBall+0xa4>
	{
		  setMotorSpeed(1, -2000);
 800671c:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8006790 <throwTheBall+0xf0>
 8006720:	2001      	movs	r0, #1
 8006722:	f7fa fc9b 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, -2000);
 8006726:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8006790 <throwTheBall+0xf0>
 800672a:	2002      	movs	r0, #2
 800672c:	f7fa fc96 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, -2000);
 8006730:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006790 <throwTheBall+0xf0>
 8006734:	2007      	movs	r0, #7
 8006736:	f7fa fc91 	bl	800105c <setMotorSpeed>
		  HAL_Delay(2500);
 800673a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800673e:	f000 fc79 	bl	8007034 <HAL_Delay>
	}
	else
	{
		PID_EG(whereTo, Kp, Ki, Kd, KpH, 0.7, 2800);
	}
}
 8006742:	e016      	b.n	8006772 <throwTheBall+0xd2>
		PID_EG(whereTo, Kp, Ki, Kd, KpH, 0.7, 2800);
 8006744:	ed97 0b08 	vldr	d0, [r7, #32]
 8006748:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800674c:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8006750:	a313      	add	r3, pc, #76	@ (adr r3, 80067a0 <throwTheBall+0x100>)
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	e9cd 2300 	strd	r2, r3, [sp]
 800675a:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8006798 <throwTheBall+0xf8>
 800675e:	ed97 6b00 	vldr	d6, [r7]
 8006762:	ed97 5b02 	vldr	d5, [r7, #8]
 8006766:	ed97 4b04 	vldr	d4, [r7, #16]
 800676a:	ed97 3b06 	vldr	d3, [r7, #24]
 800676e:	f7fe fd0f 	bl	8005190 <PID_EG>
}
 8006772:	bf00      	nop
 8006774:	3750      	adds	r7, #80	@ 0x50
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w
 8006780:	00000000 	.word	0x00000000
 8006784:	40140000 	.word	0x40140000
 8006788:	00000000 	.word	0x00000000
 800678c:	40790000 	.word	0x40790000
 8006790:	00000000 	.word	0x00000000
 8006794:	c09f4000 	.word	0xc09f4000
 8006798:	66666666 	.word	0x66666666
 800679c:	3fe66666 	.word	0x3fe66666
 80067a0:	00000000 	.word	0x00000000
 80067a4:	40a5e000 	.word	0x40a5e000

080067a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ae:	2300      	movs	r3, #0
 80067b0:	607b      	str	r3, [r7, #4]
 80067b2:	4b10      	ldr	r3, [pc, #64]	@ (80067f4 <HAL_MspInit+0x4c>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b6:	4a0f      	ldr	r2, [pc, #60]	@ (80067f4 <HAL_MspInit+0x4c>)
 80067b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <HAL_MspInit+0x4c>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	2300      	movs	r3, #0
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	4b09      	ldr	r3, [pc, #36]	@ (80067f4 <HAL_MspInit+0x4c>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	4a08      	ldr	r2, [pc, #32]	@ (80067f4 <HAL_MspInit+0x4c>)
 80067d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <HAL_MspInit+0x4c>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80067e6:	2007      	movs	r0, #7
 80067e8:	f000 fd18 	bl	800721c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40023800 	.word	0x40023800

080067f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	@ 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006800:	f107 0314 	add.w	r3, r7, #20
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	605a      	str	r2, [r3, #4]
 800680a:	609a      	str	r2, [r3, #8]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a19      	ldr	r2, [pc, #100]	@ (800687c <HAL_I2C_MspInit+0x84>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d12c      	bne.n	8006874 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	4b18      	ldr	r3, [pc, #96]	@ (8006880 <HAL_I2C_MspInit+0x88>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	4a17      	ldr	r2, [pc, #92]	@ (8006880 <HAL_I2C_MspInit+0x88>)
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	6313      	str	r3, [r2, #48]	@ 0x30
 800682a:	4b15      	ldr	r3, [pc, #84]	@ (8006880 <HAL_I2C_MspInit+0x88>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006836:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800683a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800683c:	2312      	movs	r3, #18
 800683e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006844:	2303      	movs	r3, #3
 8006846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006848:	2304      	movs	r3, #4
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800684c:	f107 0314 	add.w	r3, r7, #20
 8006850:	4619      	mov	r1, r3
 8006852:	480c      	ldr	r0, [pc, #48]	@ (8006884 <HAL_I2C_MspInit+0x8c>)
 8006854:	f000 fdb6 	bl	80073c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	4b08      	ldr	r3, [pc, #32]	@ (8006880 <HAL_I2C_MspInit+0x88>)
 800685e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006860:	4a07      	ldr	r2, [pc, #28]	@ (8006880 <HAL_I2C_MspInit+0x88>)
 8006862:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006866:	6413      	str	r3, [r2, #64]	@ 0x40
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <HAL_I2C_MspInit+0x88>)
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006874:	bf00      	nop
 8006876:	3728      	adds	r7, #40	@ 0x28
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40005800 	.word	0x40005800
 8006880:	40023800 	.word	0x40023800
 8006884:	40020400 	.word	0x40020400

08006888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a2a      	ldr	r2, [pc, #168]	@ (8006940 <HAL_TIM_Base_MspInit+0xb8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d116      	bne.n	80068c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	4b29      	ldr	r3, [pc, #164]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 80068a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a2:	4a28      	ldr	r2, [pc, #160]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80068aa:	4b26      	ldr	r3, [pc, #152]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 80068ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80068b6:	2200      	movs	r2, #0
 80068b8:	2100      	movs	r1, #0
 80068ba:	201b      	movs	r0, #27
 80068bc:	f000 fcb9 	bl	8007232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80068c0:	201b      	movs	r0, #27
 80068c2:	f000 fcd2 	bl	800726a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80068c6:	e036      	b.n	8006936 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d0:	d116      	bne.n	8006900 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	4a1a      	ldr	r2, [pc, #104]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068e2:	4b18      	ldr	r3, [pc, #96]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80068ee:	2200      	movs	r2, #0
 80068f0:	2100      	movs	r1, #0
 80068f2:	201c      	movs	r0, #28
 80068f4:	f000 fc9d 	bl	8007232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80068f8:	201c      	movs	r0, #28
 80068fa:	f000 fcb6 	bl	800726a <HAL_NVIC_EnableIRQ>
}
 80068fe:	e01a      	b.n	8006936 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a10      	ldr	r2, [pc, #64]	@ (8006948 <HAL_TIM_Base_MspInit+0xc0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d115      	bne.n	8006936 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 8006910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006912:	4a0c      	ldr	r2, [pc, #48]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 8006914:	f043 0302 	orr.w	r3, r3, #2
 8006918:	6453      	str	r3, [r2, #68]	@ 0x44
 800691a:	4b0a      	ldr	r3, [pc, #40]	@ (8006944 <HAL_TIM_Base_MspInit+0xbc>)
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8006926:	2200      	movs	r2, #0
 8006928:	2100      	movs	r1, #0
 800692a:	202e      	movs	r0, #46	@ 0x2e
 800692c:	f000 fc81 	bl	8007232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006930:	202e      	movs	r0, #46	@ 0x2e
 8006932:	f000 fc9a 	bl	800726a <HAL_NVIC_EnableIRQ>
}
 8006936:	bf00      	nop
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40023800 	.word	0x40023800
 8006948:	40010400 	.word	0x40010400

0800694c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	@ 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006954:	f107 0314 	add.w	r3, r7, #20
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	605a      	str	r2, [r3, #4]
 800695e:	609a      	str	r2, [r3, #8]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a37      	ldr	r2, [pc, #220]	@ (8006a48 <HAL_TIM_MspPostInit+0xfc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d11f      	bne.n	80069ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800696e:	2300      	movs	r3, #0
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	4b36      	ldr	r3, [pc, #216]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	4a35      	ldr	r2, [pc, #212]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 8006978:	f043 0310 	orr.w	r3, r3, #16
 800697c:	6313      	str	r3, [r2, #48]	@ 0x30
 800697e:	4b33      	ldr	r3, [pc, #204]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800698a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800698e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006990:	2312      	movs	r3, #18
 8006992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006994:	2302      	movs	r3, #2
 8006996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006998:	2303      	movs	r3, #3
 800699a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800699c:	2301      	movs	r3, #1
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069a0:	f107 0314 	add.w	r3, r7, #20
 80069a4:	4619      	mov	r1, r3
 80069a6:	482a      	ldr	r0, [pc, #168]	@ (8006a50 <HAL_TIM_MspPostInit+0x104>)
 80069a8:	f000 fd0c 	bl	80073c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80069ac:	e047      	b.n	8006a3e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b6:	d11e      	bne.n	80069f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	4b23      	ldr	r3, [pc, #140]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 80069be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c0:	4a22      	ldr	r2, [pc, #136]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80069c8:	4b20      	ldr	r3, [pc, #128]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80069d4:	230c      	movs	r3, #12
 80069d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069d8:	2312      	movs	r3, #18
 80069da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80069dc:	2302      	movs	r3, #2
 80069de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e0:	2303      	movs	r3, #3
 80069e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80069e4:	2301      	movs	r3, #1
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	4619      	mov	r1, r3
 80069ee:	4819      	ldr	r0, [pc, #100]	@ (8006a54 <HAL_TIM_MspPostInit+0x108>)
 80069f0:	f000 fce8 	bl	80073c4 <HAL_GPIO_Init>
}
 80069f4:	e023      	b.n	8006a3e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a17      	ldr	r2, [pc, #92]	@ (8006a58 <HAL_TIM_MspPostInit+0x10c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d11e      	bne.n	8006a3e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a00:	2300      	movs	r3, #0
 8006a02:	60bb      	str	r3, [r7, #8]
 8006a04:	4b11      	ldr	r3, [pc, #68]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	4a10      	ldr	r2, [pc, #64]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 8006a0a:	f043 0304 	orr.w	r3, r3, #4
 8006a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a10:	4b0e      	ldr	r3, [pc, #56]	@ (8006a4c <HAL_TIM_MspPostInit+0x100>)
 8006a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006a1c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a22:	2312      	movs	r3, #18
 8006a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a26:	2302      	movs	r3, #2
 8006a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a32:	f107 0314 	add.w	r3, r7, #20
 8006a36:	4619      	mov	r1, r3
 8006a38:	4808      	ldr	r0, [pc, #32]	@ (8006a5c <HAL_TIM_MspPostInit+0x110>)
 8006a3a:	f000 fcc3 	bl	80073c4 <HAL_GPIO_Init>
}
 8006a3e:	bf00      	nop
 8006a40:	3728      	adds	r7, #40	@ 0x28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	40021000 	.word	0x40021000
 8006a54:	40020000 	.word	0x40020000
 8006a58:	40010400 	.word	0x40010400
 8006a5c:	40020800 	.word	0x40020800

08006a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08e      	sub	sp, #56	@ 0x38
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	605a      	str	r2, [r3, #4]
 8006a72:	609a      	str	r2, [r3, #8]
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a57      	ldr	r2, [pc, #348]	@ (8006bdc <HAL_UART_MspInit+0x17c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d134      	bne.n	8006aec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a82:	2300      	movs	r3, #0
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	4b56      	ldr	r3, [pc, #344]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	4a55      	ldr	r2, [pc, #340]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006a8c:	f043 0310 	orr.w	r3, r3, #16
 8006a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a92:	4b53      	ldr	r3, [pc, #332]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	623b      	str	r3, [r7, #32]
 8006a9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
 8006aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006aa8:	f043 0302 	orr.w	r3, r3, #2
 8006aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8006aae:	4b4c      	ldr	r3, [pc, #304]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006aba:	23c0      	movs	r3, #192	@ 0xc0
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006abe:	2302      	movs	r3, #2
 8006ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006aca:	2307      	movs	r3, #7
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4843      	ldr	r0, [pc, #268]	@ (8006be4 <HAL_UART_MspInit+0x184>)
 8006ad6:	f000 fc75 	bl	80073c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	2025      	movs	r0, #37	@ 0x25
 8006ae0:	f000 fba7 	bl	8007232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006ae4:	2025      	movs	r0, #37	@ 0x25
 8006ae6:	f000 fbc0 	bl	800726a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006aea:	e073      	b.n	8006bd4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a3d      	ldr	r2, [pc, #244]	@ (8006be8 <HAL_UART_MspInit+0x188>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d134      	bne.n	8006b60 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	4b39      	ldr	r3, [pc, #228]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	4a38      	ldr	r2, [pc, #224]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b06:	4b36      	ldr	r3, [pc, #216]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	4b32      	ldr	r3, [pc, #200]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1a:	4a31      	ldr	r2, [pc, #196]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b1c:	f043 0308 	orr.w	r3, r3, #8
 8006b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b22:	4b2f      	ldr	r3, [pc, #188]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006b2e:	2360      	movs	r3, #96	@ 0x60
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b32:	2302      	movs	r3, #2
 8006b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b3e:	2307      	movs	r3, #7
 8006b40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b46:	4619      	mov	r1, r3
 8006b48:	4828      	ldr	r0, [pc, #160]	@ (8006bec <HAL_UART_MspInit+0x18c>)
 8006b4a:	f000 fc3b 	bl	80073c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	2026      	movs	r0, #38	@ 0x26
 8006b54:	f000 fb6d 	bl	8007232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006b58:	2026      	movs	r0, #38	@ 0x26
 8006b5a:	f000 fb86 	bl	800726a <HAL_NVIC_EnableIRQ>
}
 8006b5e:	e039      	b.n	8006bd4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a22      	ldr	r2, [pc, #136]	@ (8006bf0 <HAL_UART_MspInit+0x190>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d134      	bne.n	8006bd4 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b72:	4a1b      	ldr	r2, [pc, #108]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b7a:	4b19      	ldr	r3, [pc, #100]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	4b15      	ldr	r3, [pc, #84]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8e:	4a14      	ldr	r2, [pc, #80]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b90:	f043 0304 	orr.w	r3, r3, #4
 8006b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b96:	4b12      	ldr	r3, [pc, #72]	@ (8006be0 <HAL_UART_MspInit+0x180>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006ba2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006bb4:	2307      	movs	r3, #7
 8006bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	480d      	ldr	r0, [pc, #52]	@ (8006bf4 <HAL_UART_MspInit+0x194>)
 8006bc0:	f000 fc00 	bl	80073c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	2027      	movs	r0, #39	@ 0x27
 8006bca:	f000 fb32 	bl	8007232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006bce:	2027      	movs	r0, #39	@ 0x27
 8006bd0:	f000 fb4b 	bl	800726a <HAL_NVIC_EnableIRQ>
}
 8006bd4:	bf00      	nop
 8006bd6:	3738      	adds	r7, #56	@ 0x38
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40020400 	.word	0x40020400
 8006be8:	40004400 	.word	0x40004400
 8006bec:	40020c00 	.word	0x40020c00
 8006bf0:	40004800 	.word	0x40004800
 8006bf4:	40020800 	.word	0x40020800

08006bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006bfc:	bf00      	nop
 8006bfe:	e7fd      	b.n	8006bfc <NMI_Handler+0x4>

08006c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <HardFault_Handler+0x4>

08006c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c0c:	bf00      	nop
 8006c0e:	e7fd      	b.n	8006c0c <MemManage_Handler+0x4>

08006c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c14:	bf00      	nop
 8006c16:	e7fd      	b.n	8006c14 <BusFault_Handler+0x4>

08006c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c1c:	bf00      	nop
 8006c1e:	e7fd      	b.n	8006c1c <UsageFault_Handler+0x4>

08006c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c40:	bf00      	nop
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c4e:	f000 f9d1 	bl	8006ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c52:	bf00      	nop
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	f000 fd80 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 8006c68:	2002      	movs	r0, #2
 8006c6a:	f000 fd79 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 8006c76:	2004      	movs	r0, #4
 8006c78:	f000 fd72 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006c7c:	bf00      	nop
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8006c84:	2008      	movs	r0, #8
 8006c86:	f000 fd6b 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006c8a:	bf00      	nop
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 8006c92:	2020      	movs	r0, #32
 8006c94:	f000 fd64 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8006c98:	2040      	movs	r0, #64	@ 0x40
 8006c9a:	f000 fd61 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8006c9e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006ca2:	f000 fd5d 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006ca6:	bf00      	nop
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006cb0:	4802      	ldr	r0, [pc, #8]	@ (8006cbc <TIM1_CC_IRQHandler+0x10>)
 8006cb2:	f002 f861 	bl	8008d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000320 	.word	0x20000320

08006cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006cc4:	4802      	ldr	r0, [pc, #8]	@ (8006cd0 <TIM2_IRQHandler+0x10>)
 8006cc6:	f002 f857 	bl	8008d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000368 	.word	0x20000368

08006cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006cd8:	4802      	ldr	r0, [pc, #8]	@ (8006ce4 <USART1_IRQHandler+0x10>)
 8006cda:	f002 ff6d 	bl	8009bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006cde:	bf00      	nop
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200003f8 	.word	0x200003f8

08006ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006cec:	4802      	ldr	r0, [pc, #8]	@ (8006cf8 <USART2_IRQHandler+0x10>)
 8006cee:	f002 ff63 	bl	8009bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006cf2:	bf00      	nop
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000440 	.word	0x20000440

08006cfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006d00:	4802      	ldr	r0, [pc, #8]	@ (8006d0c <USART3_IRQHandler+0x10>)
 8006d02:	f002 ff59 	bl	8009bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006d06:	bf00      	nop
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000488 	.word	0x20000488

08006d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8006d14:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006d18:	f000 fd22 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 8006d1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006d20:	f000 fd1e 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8006d24:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006d28:	f000 fd1a 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8006d2c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006d30:	f000 fd16 	bl	8007760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006d34:	bf00      	nop
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006d3c:	4802      	ldr	r0, [pc, #8]	@ (8006d48 <TIM8_CC_IRQHandler+0x10>)
 8006d3e:	f002 f81b 	bl	8008d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8006d42:	bf00      	nop
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200003b0 	.word	0x200003b0

08006d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  return 1;
 8006d50:	2301      	movs	r3, #1
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <_kill>:

int _kill(int pid, int sig)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006d66:	f005 fd19 	bl	800c79c <__errno>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2216      	movs	r2, #22
 8006d6e:	601a      	str	r2, [r3, #0]
  return -1;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <_exit>:

void _exit (int status)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006d84:	f04f 31ff 	mov.w	r1, #4294967295
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ffe7 	bl	8006d5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <_exit+0x12>

08006d92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e00a      	b.n	8006dba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006da4:	f3af 8000 	nop.w
 8006da8:	4601      	mov	r1, r0
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	60ba      	str	r2, [r7, #8]
 8006db0:	b2ca      	uxtb	r2, r1
 8006db2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	3301      	adds	r3, #1
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	dbf0      	blt.n	8006da4 <_read+0x12>
  }

  return len;
 8006dc2:	687b      	ldr	r3, [r7, #4]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e009      	b.n	8006df2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	60ba      	str	r2, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	3301      	adds	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	dbf1      	blt.n	8006dde <_write+0x12>
  }
  return len;
 8006dfa:	687b      	ldr	r3, [r7, #4]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <_close>:

int _close(int file)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006e2c:	605a      	str	r2, [r3, #4]
  return 0;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <_isatty>:

int _isatty(int file)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006e44:	2301      	movs	r3, #1
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e74:	4a14      	ldr	r2, [pc, #80]	@ (8006ec8 <_sbrk+0x5c>)
 8006e76:	4b15      	ldr	r3, [pc, #84]	@ (8006ecc <_sbrk+0x60>)
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e80:	4b13      	ldr	r3, [pc, #76]	@ (8006ed0 <_sbrk+0x64>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e88:	4b11      	ldr	r3, [pc, #68]	@ (8006ed0 <_sbrk+0x64>)
 8006e8a:	4a12      	ldr	r2, [pc, #72]	@ (8006ed4 <_sbrk+0x68>)
 8006e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e8e:	4b10      	ldr	r3, [pc, #64]	@ (8006ed0 <_sbrk+0x64>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d207      	bcs.n	8006eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e9c:	f005 fc7e 	bl	800c79c <__errno>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	220c      	movs	r2, #12
 8006ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eaa:	e009      	b.n	8006ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006eac:	4b08      	ldr	r3, [pc, #32]	@ (8006ed0 <_sbrk+0x64>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006eb2:	4b07      	ldr	r3, [pc, #28]	@ (8006ed0 <_sbrk+0x64>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	4a05      	ldr	r2, [pc, #20]	@ (8006ed0 <_sbrk+0x64>)
 8006ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20020000 	.word	0x20020000
 8006ecc:	00000400 	.word	0x00000400
 8006ed0:	20000710 	.word	0x20000710
 8006ed4:	20000868 	.word	0x20000868

08006ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006edc:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <SystemInit+0x20>)
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee2:	4a05      	ldr	r2, [pc, #20]	@ (8006ef8 <SystemInit+0x20>)
 8006ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006eec:	bf00      	nop
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	e000ed00 	.word	0xe000ed00

08006efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006f34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006f00:	f7ff ffea 	bl	8006ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f04:	480c      	ldr	r0, [pc, #48]	@ (8006f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f06:	490d      	ldr	r1, [pc, #52]	@ (8006f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f08:	4a0d      	ldr	r2, [pc, #52]	@ (8006f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f0c:	e002      	b.n	8006f14 <LoopCopyDataInit>

08006f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f12:	3304      	adds	r3, #4

08006f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f18:	d3f9      	bcc.n	8006f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8006f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f20:	e001      	b.n	8006f26 <LoopFillZerobss>

08006f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f24:	3204      	adds	r2, #4

08006f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f28:	d3fb      	bcc.n	8006f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f2a:	f005 fc3d 	bl	800c7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f2e:	f7fb fc73 	bl	8002818 <main>
  bx  lr    
 8006f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f3c:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8006f40:	080119f0 	.word	0x080119f0
  ldr r2, =_sbss
 8006f44:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8006f48:	20000864 	.word	0x20000864

08006f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f4c:	e7fe      	b.n	8006f4c <ADC_IRQHandler>
	...

08006f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f54:	4b0e      	ldr	r3, [pc, #56]	@ (8006f90 <HAL_Init+0x40>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a0d      	ldr	r2, [pc, #52]	@ (8006f90 <HAL_Init+0x40>)
 8006f5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f60:	4b0b      	ldr	r3, [pc, #44]	@ (8006f90 <HAL_Init+0x40>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a0a      	ldr	r2, [pc, #40]	@ (8006f90 <HAL_Init+0x40>)
 8006f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f6c:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <HAL_Init+0x40>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a07      	ldr	r2, [pc, #28]	@ (8006f90 <HAL_Init+0x40>)
 8006f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f78:	2003      	movs	r0, #3
 8006f7a:	f000 f94f 	bl	800721c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f000 f808 	bl	8006f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f84:	f7ff fc10 	bl	80067a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40023c00 	.word	0x40023c00

08006f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f9c:	4b12      	ldr	r3, [pc, #72]	@ (8006fe8 <HAL_InitTick+0x54>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b12      	ldr	r3, [pc, #72]	@ (8006fec <HAL_InitTick+0x58>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f967 	bl	8007286 <HAL_SYSTICK_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e00e      	b.n	8006fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b0f      	cmp	r3, #15
 8006fc6:	d80a      	bhi.n	8006fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006fc8:	2200      	movs	r2, #0
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	f000 f92f 	bl	8007232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006fd4:	4a06      	ldr	r2, [pc, #24]	@ (8006ff0 <HAL_InitTick+0x5c>)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e000      	b.n	8006fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200000cc 	.word	0x200000cc
 8006fec:	200000d4 	.word	0x200000d4
 8006ff0:	200000d0 	.word	0x200000d0

08006ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <HAL_IncTick+0x20>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <HAL_IncTick+0x24>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4413      	add	r3, r2
 8007004:	4a04      	ldr	r2, [pc, #16]	@ (8007018 <HAL_IncTick+0x24>)
 8007006:	6013      	str	r3, [r2, #0]
}
 8007008:	bf00      	nop
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	200000d4 	.word	0x200000d4
 8007018:	20000714 	.word	0x20000714

0800701c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  return uwTick;
 8007020:	4b03      	ldr	r3, [pc, #12]	@ (8007030 <HAL_GetTick+0x14>)
 8007022:	681b      	ldr	r3, [r3, #0]
}
 8007024:	4618      	mov	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000714 	.word	0x20000714

08007034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800703c:	f7ff ffee 	bl	800701c <HAL_GetTick>
 8007040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d005      	beq.n	800705a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800704e:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <HAL_Delay+0x44>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800705a:	bf00      	nop
 800705c:	f7ff ffde 	bl	800701c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	429a      	cmp	r2, r3
 800706a:	d8f7      	bhi.n	800705c <HAL_Delay+0x28>
  {
  }
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	200000d4 	.word	0x200000d4

0800707c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800708c:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <__NVIC_SetPriorityGrouping+0x44>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007098:	4013      	ands	r3, r2
 800709a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ae:	4a04      	ldr	r2, [pc, #16]	@ (80070c0 <__NVIC_SetPriorityGrouping+0x44>)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	60d3      	str	r3, [r2, #12]
}
 80070b4:	bf00      	nop
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070c8:	4b04      	ldr	r3, [pc, #16]	@ (80070dc <__NVIC_GetPriorityGrouping+0x18>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	f003 0307 	and.w	r3, r3, #7
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	e000ed00 	.word	0xe000ed00

080070e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	db0b      	blt.n	800710a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	f003 021f 	and.w	r2, r3, #31
 80070f8:	4907      	ldr	r1, [pc, #28]	@ (8007118 <__NVIC_EnableIRQ+0x38>)
 80070fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	2001      	movs	r0, #1
 8007102:	fa00 f202 	lsl.w	r2, r0, r2
 8007106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	e000e100 	.word	0xe000e100

0800711c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800712c:	2b00      	cmp	r3, #0
 800712e:	db0a      	blt.n	8007146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	b2da      	uxtb	r2, r3
 8007134:	490c      	ldr	r1, [pc, #48]	@ (8007168 <__NVIC_SetPriority+0x4c>)
 8007136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713a:	0112      	lsls	r2, r2, #4
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	440b      	add	r3, r1
 8007140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007144:	e00a      	b.n	800715c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	b2da      	uxtb	r2, r3
 800714a:	4908      	ldr	r1, [pc, #32]	@ (800716c <__NVIC_SetPriority+0x50>)
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	3b04      	subs	r3, #4
 8007154:	0112      	lsls	r2, r2, #4
 8007156:	b2d2      	uxtb	r2, r2
 8007158:	440b      	add	r3, r1
 800715a:	761a      	strb	r2, [r3, #24]
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	e000e100 	.word	0xe000e100
 800716c:	e000ed00 	.word	0xe000ed00

08007170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007170:	b480      	push	{r7}
 8007172:	b089      	sub	sp, #36	@ 0x24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f1c3 0307 	rsb	r3, r3, #7
 800718a:	2b04      	cmp	r3, #4
 800718c:	bf28      	it	cs
 800718e:	2304      	movcs	r3, #4
 8007190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	3304      	adds	r3, #4
 8007196:	2b06      	cmp	r3, #6
 8007198:	d902      	bls.n	80071a0 <NVIC_EncodePriority+0x30>
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3b03      	subs	r3, #3
 800719e:	e000      	b.n	80071a2 <NVIC_EncodePriority+0x32>
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071a4:	f04f 32ff 	mov.w	r2, #4294967295
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	fa02 f303 	lsl.w	r3, r2, r3
 80071ae:	43da      	mvns	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	401a      	ands	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071b8:	f04f 31ff 	mov.w	r1, #4294967295
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	fa01 f303 	lsl.w	r3, r1, r3
 80071c2:	43d9      	mvns	r1, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071c8:	4313      	orrs	r3, r2
         );
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3724      	adds	r7, #36	@ 0x24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071e8:	d301      	bcc.n	80071ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071ea:	2301      	movs	r3, #1
 80071ec:	e00f      	b.n	800720e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007218 <SysTick_Config+0x40>)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071f6:	210f      	movs	r1, #15
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	f7ff ff8e 	bl	800711c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007200:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <SysTick_Config+0x40>)
 8007202:	2200      	movs	r2, #0
 8007204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007206:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <SysTick_Config+0x40>)
 8007208:	2207      	movs	r2, #7
 800720a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	e000e010 	.word	0xe000e010

0800721c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff ff29 	bl	800707c <__NVIC_SetPriorityGrouping>
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	4603      	mov	r3, r0
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007244:	f7ff ff3e 	bl	80070c4 <__NVIC_GetPriorityGrouping>
 8007248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	f7ff ff8e 	bl	8007170 <NVIC_EncodePriority>
 8007254:	4602      	mov	r2, r0
 8007256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff5d 	bl	800711c <__NVIC_SetPriority>
}
 8007262:	bf00      	nop
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	4603      	mov	r3, r0
 8007272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ff31 	bl	80070e0 <__NVIC_EnableIRQ>
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff ffa2 	bl	80071d8 <SysTick_Config>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80072ac:	f7ff feb6 	bl	800701c <HAL_GetTick>
 80072b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d008      	beq.n	80072d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2280      	movs	r2, #128	@ 0x80
 80072c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e052      	b.n	8007376 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0216 	bic.w	r2, r2, #22
 80072de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <HAL_DMA_Abort+0x62>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0208 	bic.w	r2, r2, #8
 800730e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007320:	e013      	b.n	800734a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007322:	f7ff fe7b 	bl	800701c <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b05      	cmp	r3, #5
 800732e:	d90c      	bls.n	800734a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2203      	movs	r2, #3
 800733a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e015      	b.n	8007376 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e4      	bne.n	8007322 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735c:	223f      	movs	r2, #63	@ 0x3f
 800735e:	409a      	lsls	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d004      	beq.n	800739c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2280      	movs	r2, #128	@ 0x80
 8007396:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e00c      	b.n	80073b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2205      	movs	r2, #5
 80073a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b089      	sub	sp, #36	@ 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	e16b      	b.n	80076b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073e0:	2201      	movs	r2, #1
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4013      	ands	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	f040 815a 	bne.w	80076b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b01      	cmp	r3, #1
 8007408:	d005      	beq.n	8007416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007412:	2b02      	cmp	r3, #2
 8007414:	d130      	bne.n	8007478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	2203      	movs	r2, #3
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	43db      	mvns	r3, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4013      	ands	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	4313      	orrs	r3, r2
 800743e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800744c:	2201      	movs	r2, #1
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	43db      	mvns	r3, r3
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	4013      	ands	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	091b      	lsrs	r3, r3, #4
 8007462:	f003 0201 	and.w	r2, r3, #1
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4313      	orrs	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	2b03      	cmp	r3, #3
 8007482:	d017      	beq.n	80074b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	2203      	movs	r2, #3
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43db      	mvns	r3, r3
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	4013      	ands	r3, r2
 800749a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d123      	bne.n	8007508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	08da      	lsrs	r2, r3, #3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3208      	adds	r2, #8
 80074c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	220f      	movs	r2, #15
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	43db      	mvns	r3, r3
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	4013      	ands	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	08da      	lsrs	r2, r3, #3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3208      	adds	r2, #8
 8007502:	69b9      	ldr	r1, [r7, #24]
 8007504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	2203      	movs	r2, #3
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	43db      	mvns	r3, r3
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4013      	ands	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f003 0203 	and.w	r2, r3, #3
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	fa02 f303 	lsl.w	r3, r2, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4313      	orrs	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80b4 	beq.w	80076b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	4b60      	ldr	r3, [pc, #384]	@ (80076d0 <HAL_GPIO_Init+0x30c>)
 8007550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007552:	4a5f      	ldr	r2, [pc, #380]	@ (80076d0 <HAL_GPIO_Init+0x30c>)
 8007554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007558:	6453      	str	r3, [r2, #68]	@ 0x44
 800755a:	4b5d      	ldr	r3, [pc, #372]	@ (80076d0 <HAL_GPIO_Init+0x30c>)
 800755c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800755e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007566:	4a5b      	ldr	r2, [pc, #364]	@ (80076d4 <HAL_GPIO_Init+0x310>)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	089b      	lsrs	r3, r3, #2
 800756c:	3302      	adds	r3, #2
 800756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	220f      	movs	r2, #15
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4013      	ands	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a52      	ldr	r2, [pc, #328]	@ (80076d8 <HAL_GPIO_Init+0x314>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d02b      	beq.n	80075ea <HAL_GPIO_Init+0x226>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a51      	ldr	r2, [pc, #324]	@ (80076dc <HAL_GPIO_Init+0x318>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d025      	beq.n	80075e6 <HAL_GPIO_Init+0x222>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a50      	ldr	r2, [pc, #320]	@ (80076e0 <HAL_GPIO_Init+0x31c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01f      	beq.n	80075e2 <HAL_GPIO_Init+0x21e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a4f      	ldr	r2, [pc, #316]	@ (80076e4 <HAL_GPIO_Init+0x320>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d019      	beq.n	80075de <HAL_GPIO_Init+0x21a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a4e      	ldr	r2, [pc, #312]	@ (80076e8 <HAL_GPIO_Init+0x324>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <HAL_GPIO_Init+0x216>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a4d      	ldr	r2, [pc, #308]	@ (80076ec <HAL_GPIO_Init+0x328>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00d      	beq.n	80075d6 <HAL_GPIO_Init+0x212>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a4c      	ldr	r2, [pc, #304]	@ (80076f0 <HAL_GPIO_Init+0x32c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d007      	beq.n	80075d2 <HAL_GPIO_Init+0x20e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a4b      	ldr	r2, [pc, #300]	@ (80076f4 <HAL_GPIO_Init+0x330>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d101      	bne.n	80075ce <HAL_GPIO_Init+0x20a>
 80075ca:	2307      	movs	r3, #7
 80075cc:	e00e      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075ce:	2308      	movs	r3, #8
 80075d0:	e00c      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075d2:	2306      	movs	r3, #6
 80075d4:	e00a      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075d6:	2305      	movs	r3, #5
 80075d8:	e008      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075da:	2304      	movs	r3, #4
 80075dc:	e006      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075de:	2303      	movs	r3, #3
 80075e0:	e004      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e002      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <HAL_GPIO_Init+0x228>
 80075ea:	2300      	movs	r3, #0
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	f002 0203 	and.w	r2, r2, #3
 80075f2:	0092      	lsls	r2, r2, #2
 80075f4:	4093      	lsls	r3, r2
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075fc:	4935      	ldr	r1, [pc, #212]	@ (80076d4 <HAL_GPIO_Init+0x310>)
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	3302      	adds	r3, #2
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800760a:	4b3b      	ldr	r3, [pc, #236]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	43db      	mvns	r3, r3
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	4013      	ands	r3, r2
 8007618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800762e:	4a32      	ldr	r2, [pc, #200]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007634:	4b30      	ldr	r3, [pc, #192]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	43db      	mvns	r3, r3
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	4013      	ands	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4313      	orrs	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007658:	4a27      	ldr	r2, [pc, #156]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800765e:	4b26      	ldr	r3, [pc, #152]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	43db      	mvns	r3, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4013      	ands	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007682:	4a1d      	ldr	r2, [pc, #116]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007688:	4b1b      	ldr	r3, [pc, #108]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	43db      	mvns	r3, r3
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	4013      	ands	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80076ac:	4a12      	ldr	r2, [pc, #72]	@ (80076f8 <HAL_GPIO_Init+0x334>)
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3301      	adds	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2b0f      	cmp	r3, #15
 80076bc:	f67f ae90 	bls.w	80073e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	3724      	adds	r7, #36	@ 0x24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	40023800 	.word	0x40023800
 80076d4:	40013800 	.word	0x40013800
 80076d8:	40020000 	.word	0x40020000
 80076dc:	40020400 	.word	0x40020400
 80076e0:	40020800 	.word	0x40020800
 80076e4:	40020c00 	.word	0x40020c00
 80076e8:	40021000 	.word	0x40021000
 80076ec:	40021400 	.word	0x40021400
 80076f0:	40021800 	.word	0x40021800
 80076f4:	40021c00 	.word	0x40021c00
 80076f8:	40013c00 	.word	0x40013c00

080076fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	887b      	ldrh	r3, [r7, #2]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
 8007718:	e001      	b.n	800771e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	807b      	strh	r3, [r7, #2]
 8007738:	4613      	mov	r3, r2
 800773a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800773c:	787b      	ldrb	r3, [r7, #1]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007742:	887a      	ldrh	r2, [r7, #2]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007748:	e003      	b.n	8007752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800774a:	887b      	ldrh	r3, [r7, #2]
 800774c:	041a      	lsls	r2, r3, #16
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	619a      	str	r2, [r3, #24]
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800776a:	4b08      	ldr	r3, [pc, #32]	@ (800778c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800776c:	695a      	ldr	r2, [r3, #20]
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	4013      	ands	r3, r2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d006      	beq.n	8007784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007776:	4a05      	ldr	r2, [pc, #20]	@ (800778c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	4618      	mov	r0, r3
 8007780:	f7fa febc 	bl	80024fc <HAL_GPIO_EXTI_Callback>
  }
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40013c00 	.word	0x40013c00

08007790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e12b      	b.n	80079fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff f81e 	bl	80067f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2224      	movs	r2, #36	@ 0x24
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077f4:	f001 f8da 	bl	80089ac <HAL_RCC_GetPCLK1Freq>
 80077f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	4a81      	ldr	r2, [pc, #516]	@ (8007a04 <HAL_I2C_Init+0x274>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d807      	bhi.n	8007814 <HAL_I2C_Init+0x84>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a80      	ldr	r2, [pc, #512]	@ (8007a08 <HAL_I2C_Init+0x278>)
 8007808:	4293      	cmp	r3, r2
 800780a:	bf94      	ite	ls
 800780c:	2301      	movls	r3, #1
 800780e:	2300      	movhi	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e006      	b.n	8007822 <HAL_I2C_Init+0x92>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a7d      	ldr	r2, [pc, #500]	@ (8007a0c <HAL_I2C_Init+0x27c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	bf94      	ite	ls
 800781c:	2301      	movls	r3, #1
 800781e:	2300      	movhi	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e0e7      	b.n	80079fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4a78      	ldr	r2, [pc, #480]	@ (8007a10 <HAL_I2C_Init+0x280>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0c9b      	lsrs	r3, r3, #18
 8007834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4a6a      	ldr	r2, [pc, #424]	@ (8007a04 <HAL_I2C_Init+0x274>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d802      	bhi.n	8007864 <HAL_I2C_Init+0xd4>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3301      	adds	r3, #1
 8007862:	e009      	b.n	8007878 <HAL_I2C_Init+0xe8>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800786a:	fb02 f303 	mul.w	r3, r2, r3
 800786e:	4a69      	ldr	r2, [pc, #420]	@ (8007a14 <HAL_I2C_Init+0x284>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	099b      	lsrs	r3, r3, #6
 8007876:	3301      	adds	r3, #1
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	430b      	orrs	r3, r1
 800787e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800788a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	495c      	ldr	r1, [pc, #368]	@ (8007a04 <HAL_I2C_Init+0x274>)
 8007894:	428b      	cmp	r3, r1
 8007896:	d819      	bhi.n	80078cc <HAL_I2C_Init+0x13c>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	1e59      	subs	r1, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078a6:	1c59      	adds	r1, r3, #1
 80078a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80078ac:	400b      	ands	r3, r1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <HAL_I2C_Init+0x138>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	1e59      	subs	r1, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80078c0:	3301      	adds	r3, #1
 80078c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c6:	e051      	b.n	800796c <HAL_I2C_Init+0x1dc>
 80078c8:	2304      	movs	r3, #4
 80078ca:	e04f      	b.n	800796c <HAL_I2C_Init+0x1dc>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d111      	bne.n	80078f8 <HAL_I2C_Init+0x168>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	1e58      	subs	r0, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	440b      	add	r3, r1
 80078e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078e6:	3301      	adds	r3, #1
 80078e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	e012      	b.n	800791e <HAL_I2C_Init+0x18e>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	1e58      	subs	r0, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6859      	ldr	r1, [r3, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	0099      	lsls	r1, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	fbb0 f3f3 	udiv	r3, r0, r3
 800790e:	3301      	adds	r3, #1
 8007910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007914:	2b00      	cmp	r3, #0
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Init+0x196>
 8007922:	2301      	movs	r3, #1
 8007924:	e022      	b.n	800796c <HAL_I2C_Init+0x1dc>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10e      	bne.n	800794c <HAL_I2C_Init+0x1bc>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1e58      	subs	r0, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6859      	ldr	r1, [r3, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	440b      	add	r3, r1
 800793c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007940:	3301      	adds	r3, #1
 8007942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794a:	e00f      	b.n	800796c <HAL_I2C_Init+0x1dc>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	1e58      	subs	r0, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6859      	ldr	r1, [r3, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	0099      	lsls	r1, r3, #2
 800795c:	440b      	add	r3, r1
 800795e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007962:	3301      	adds	r3, #1
 8007964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	6809      	ldr	r1, [r1, #0]
 8007970:	4313      	orrs	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69da      	ldr	r2, [r3, #28]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800799a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6911      	ldr	r1, [r2, #16]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	68d2      	ldr	r2, [r2, #12]
 80079a6:	4311      	orrs	r1, r2
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6812      	ldr	r2, [r2, #0]
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	000186a0 	.word	0x000186a0
 8007a08:	001e847f 	.word	0x001e847f
 8007a0c:	003d08ff 	.word	0x003d08ff
 8007a10:	431bde83 	.word	0x431bde83
 8007a14:	10624dd3 	.word	0x10624dd3

08007a18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	461a      	mov	r2, r3
 8007a24:	460b      	mov	r3, r1
 8007a26:	817b      	strh	r3, [r7, #10]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a2c:	f7ff faf6 	bl	800701c <HAL_GetTick>
 8007a30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	f040 80e0 	bne.w	8007c00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2319      	movs	r3, #25
 8007a46:	2201      	movs	r2, #1
 8007a48:	4970      	ldr	r1, [pc, #448]	@ (8007c0c <HAL_I2C_Master_Transmit+0x1f4>)
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f964 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007a56:	2302      	movs	r3, #2
 8007a58:	e0d3      	b.n	8007c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_I2C_Master_Transmit+0x50>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e0cc      	b.n	8007c02 <HAL_I2C_Master_Transmit+0x1ea>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d007      	beq.n	8007a8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0201 	orr.w	r2, r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2221      	movs	r2, #33	@ 0x21
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	893a      	ldrh	r2, [r7, #8]
 8007abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a50      	ldr	r2, [pc, #320]	@ (8007c10 <HAL_I2C_Master_Transmit+0x1f8>)
 8007ace:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007ad0:	8979      	ldrh	r1, [r7, #10]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a3a      	ldr	r2, [r7, #32]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f89c 	bl	8007c14 <I2C_MasterRequestWrite>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e08d      	b.n	8007c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007afc:	e066      	b.n	8007bcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	6a39      	ldr	r1, [r7, #32]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fa22 	bl	8007f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d107      	bne.n	8007b26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e06b      	b.n	8007c02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2e:	781a      	ldrb	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d11b      	bne.n	8007ba0 <HAL_I2C_Master_Transmit+0x188>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d017      	beq.n	8007ba0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	6a39      	ldr	r1, [r7, #32]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fa19 	bl	8007fdc <I2C_WaitOnBTFFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00d      	beq.n	8007bcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d107      	bne.n	8007bc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e01a      	b.n	8007c02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d194      	bne.n	8007afe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e000      	b.n	8007c02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007c00:	2302      	movs	r3, #2
  }
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	00100002 	.word	0x00100002
 8007c10:	ffff0000 	.word	0xffff0000

08007c14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	607a      	str	r2, [r7, #4]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	460b      	mov	r3, r1
 8007c22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d006      	beq.n	8007c3e <I2C_MasterRequestWrite+0x2a>
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d003      	beq.n	8007c3e <I2C_MasterRequestWrite+0x2a>
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c3c:	d108      	bne.n	8007c50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e00b      	b.n	8007c68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c54:	2b12      	cmp	r3, #18
 8007c56:	d107      	bne.n	8007c68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f84f 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00d      	beq.n	8007c9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8e:	d103      	bne.n	8007c98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e035      	b.n	8007d08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ca4:	d108      	bne.n	8007cb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ca6:	897b      	ldrh	r3, [r7, #10]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007cb4:	611a      	str	r2, [r3, #16]
 8007cb6:	e01b      	b.n	8007cf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007cb8:	897b      	ldrh	r3, [r7, #10]
 8007cba:	11db      	asrs	r3, r3, #7
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f003 0306 	and.w	r3, r3, #6
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f063 030f 	orn	r3, r3, #15
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	490e      	ldr	r1, [pc, #56]	@ (8007d10 <I2C_MasterRequestWrite+0xfc>)
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f898 	bl	8007e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e010      	b.n	8007d08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ce6:	897b      	ldrh	r3, [r7, #10]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4907      	ldr	r1, [pc, #28]	@ (8007d14 <I2C_MasterRequestWrite+0x100>)
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 f888 	bl	8007e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	00010008 	.word	0x00010008
 8007d14:	00010002 	.word	0x00010002

08007d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d28:	e048      	b.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d30:	d044      	beq.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7ff f973 	bl	800701c <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d139      	bne.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	0c1b      	lsrs	r3, r3, #16
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d10d      	bne.n	8007d6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	43da      	mvns	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bf0c      	ite	eq
 8007d64:	2301      	moveq	r3, #1
 8007d66:	2300      	movne	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	e00c      	b.n	8007d88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	43da      	mvns	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bf0c      	ite	eq
 8007d80:	2301      	moveq	r3, #1
 8007d82:	2300      	movne	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d116      	bne.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da8:	f043 0220 	orr.w	r2, r3, #32
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e023      	b.n	8007e04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d10d      	bne.n	8007de2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	43da      	mvns	r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2301      	moveq	r3, #1
 8007dda:	2300      	movne	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	461a      	mov	r2, r3
 8007de0:	e00c      	b.n	8007dfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	43da      	mvns	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	4013      	ands	r3, r2
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d093      	beq.n	8007d2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e1a:	e071      	b.n	8007f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e2a:	d123      	bne.n	8007e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e60:	f043 0204 	orr.w	r2, r3, #4
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e067      	b.n	8007f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d041      	beq.n	8007f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e7c:	f7ff f8ce 	bl	800701c <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d302      	bcc.n	8007e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d136      	bne.n	8007f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d10c      	bne.n	8007eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	43da      	mvns	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	2300      	moveq	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	e00b      	b.n	8007ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	43da      	mvns	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bf14      	ite	ne
 8007ec8:	2301      	movne	r3, #1
 8007eca:	2300      	moveq	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d016      	beq.n	8007f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eec:	f043 0220 	orr.w	r2, r3, #32
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e021      	b.n	8007f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	0c1b      	lsrs	r3, r3, #16
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d10c      	bne.n	8007f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	43da      	mvns	r2, r3
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4013      	ands	r3, r2
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf14      	ite	ne
 8007f1c:	2301      	movne	r3, #1
 8007f1e:	2300      	moveq	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	e00b      	b.n	8007f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	43da      	mvns	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bf14      	ite	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	2300      	moveq	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f47f af6d 	bne.w	8007e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f58:	e034      	b.n	8007fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f886 	bl	800806c <I2C_IsAcknowledgeFailed>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e034      	b.n	8007fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d028      	beq.n	8007fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f72:	f7ff f853 	bl	800701c <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d302      	bcc.n	8007f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11d      	bne.n	8007fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f92:	2b80      	cmp	r3, #128	@ 0x80
 8007f94:	d016      	beq.n	8007fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb0:	f043 0220 	orr.w	r2, r3, #32
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e007      	b.n	8007fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fce:	2b80      	cmp	r3, #128	@ 0x80
 8007fd0:	d1c3      	bne.n	8007f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007fe8:	e034      	b.n	8008054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 f83e 	bl	800806c <I2C_IsAcknowledgeFailed>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e034      	b.n	8008064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008000:	d028      	beq.n	8008054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008002:	f7ff f80b 	bl	800701c <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	429a      	cmp	r2, r3
 8008010:	d302      	bcc.n	8008018 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11d      	bne.n	8008054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b04      	cmp	r3, #4
 8008024:	d016      	beq.n	8008054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008040:	f043 0220 	orr.w	r2, r3, #32
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e007      	b.n	8008064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b04      	cmp	r3, #4
 8008060:	d1c3      	bne.n	8007fea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800807e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008082:	d11b      	bne.n	80080bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800808c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a8:	f043 0204 	orr.w	r2, r3, #4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e267      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d075      	beq.n	80081d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ea:	4b88      	ldr	r3, [pc, #544]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 030c 	and.w	r3, r3, #12
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d00c      	beq.n	8008110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080f6:	4b85      	ldr	r3, [pc, #532]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080fe:	2b08      	cmp	r3, #8
 8008100:	d112      	bne.n	8008128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008102:	4b82      	ldr	r3, [pc, #520]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800810a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800810e:	d10b      	bne.n	8008128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008110:	4b7e      	ldr	r3, [pc, #504]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d05b      	beq.n	80081d4 <HAL_RCC_OscConfig+0x108>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d157      	bne.n	80081d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e242      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008130:	d106      	bne.n	8008140 <HAL_RCC_OscConfig+0x74>
 8008132:	4b76      	ldr	r3, [pc, #472]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a75      	ldr	r2, [pc, #468]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	e01d      	b.n	800817c <HAL_RCC_OscConfig+0xb0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008148:	d10c      	bne.n	8008164 <HAL_RCC_OscConfig+0x98>
 800814a:	4b70      	ldr	r3, [pc, #448]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a6f      	ldr	r2, [pc, #444]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	4b6d      	ldr	r3, [pc, #436]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a6c      	ldr	r2, [pc, #432]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 800815c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	e00b      	b.n	800817c <HAL_RCC_OscConfig+0xb0>
 8008164:	4b69      	ldr	r3, [pc, #420]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a68      	ldr	r2, [pc, #416]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 800816a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	4b66      	ldr	r3, [pc, #408]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a65      	ldr	r2, [pc, #404]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800817a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d013      	beq.n	80081ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008184:	f7fe ff4a 	bl	800701c <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800818c:	f7fe ff46 	bl	800701c <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b64      	cmp	r3, #100	@ 0x64
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e207      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800819e:	4b5b      	ldr	r3, [pc, #364]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCC_OscConfig+0xc0>
 80081aa:	e014      	b.n	80081d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ac:	f7fe ff36 	bl	800701c <HAL_GetTick>
 80081b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081b4:	f7fe ff32 	bl	800701c <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b64      	cmp	r3, #100	@ 0x64
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e1f3      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081c6:	4b51      	ldr	r3, [pc, #324]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f0      	bne.n	80081b4 <HAL_RCC_OscConfig+0xe8>
 80081d2:	e000      	b.n	80081d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d063      	beq.n	80082aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081e2:	4b4a      	ldr	r3, [pc, #296]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f003 030c 	and.w	r3, r3, #12
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00b      	beq.n	8008206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ee:	4b47      	ldr	r3, [pc, #284]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d11c      	bne.n	8008234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081fa:	4b44      	ldr	r3, [pc, #272]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d116      	bne.n	8008234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008206:	4b41      	ldr	r3, [pc, #260]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_RCC_OscConfig+0x152>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d001      	beq.n	800821e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e1c7      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800821e:	4b3b      	ldr	r3, [pc, #236]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4937      	ldr	r1, [pc, #220]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008232:	e03a      	b.n	80082aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d020      	beq.n	800827e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800823c:	4b34      	ldr	r3, [pc, #208]	@ (8008310 <HAL_RCC_OscConfig+0x244>)
 800823e:	2201      	movs	r2, #1
 8008240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008242:	f7fe feeb 	bl	800701c <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008248:	e008      	b.n	800825c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800824a:	f7fe fee7 	bl	800701c <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d901      	bls.n	800825c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e1a8      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825c:	4b2b      	ldr	r3, [pc, #172]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0f0      	beq.n	800824a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008268:	4b28      	ldr	r3, [pc, #160]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	4925      	ldr	r1, [pc, #148]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 8008278:	4313      	orrs	r3, r2
 800827a:	600b      	str	r3, [r1, #0]
 800827c:	e015      	b.n	80082aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800827e:	4b24      	ldr	r3, [pc, #144]	@ (8008310 <HAL_RCC_OscConfig+0x244>)
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fe feca 	bl	800701c <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800828c:	f7fe fec6 	bl	800701c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e187      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800829e:	4b1b      	ldr	r3, [pc, #108]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1f0      	bne.n	800828c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d036      	beq.n	8008324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d016      	beq.n	80082ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082be:	4b15      	ldr	r3, [pc, #84]	@ (8008314 <HAL_RCC_OscConfig+0x248>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c4:	f7fe feaa 	bl	800701c <HAL_GetTick>
 80082c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ca:	e008      	b.n	80082de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082cc:	f7fe fea6 	bl	800701c <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e167      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082de:	4b0b      	ldr	r3, [pc, #44]	@ (800830c <HAL_RCC_OscConfig+0x240>)
 80082e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0f0      	beq.n	80082cc <HAL_RCC_OscConfig+0x200>
 80082ea:	e01b      	b.n	8008324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082ec:	4b09      	ldr	r3, [pc, #36]	@ (8008314 <HAL_RCC_OscConfig+0x248>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082f2:	f7fe fe93 	bl	800701c <HAL_GetTick>
 80082f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082f8:	e00e      	b.n	8008318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082fa:	f7fe fe8f 	bl	800701c <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d907      	bls.n	8008318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e150      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
 800830c:	40023800 	.word	0x40023800
 8008310:	42470000 	.word	0x42470000
 8008314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008318:	4b88      	ldr	r3, [pc, #544]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 800831a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ea      	bne.n	80082fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8097 	beq.w	8008460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008336:	4b81      	ldr	r3, [pc, #516]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10f      	bne.n	8008362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008342:	2300      	movs	r3, #0
 8008344:	60bb      	str	r3, [r7, #8]
 8008346:	4b7d      	ldr	r3, [pc, #500]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	4a7c      	ldr	r2, [pc, #496]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 800834c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008350:	6413      	str	r3, [r2, #64]	@ 0x40
 8008352:	4b7a      	ldr	r3, [pc, #488]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 8008354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800835a:	60bb      	str	r3, [r7, #8]
 800835c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800835e:	2301      	movs	r3, #1
 8008360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008362:	4b77      	ldr	r3, [pc, #476]	@ (8008540 <HAL_RCC_OscConfig+0x474>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836a:	2b00      	cmp	r3, #0
 800836c:	d118      	bne.n	80083a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800836e:	4b74      	ldr	r3, [pc, #464]	@ (8008540 <HAL_RCC_OscConfig+0x474>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a73      	ldr	r2, [pc, #460]	@ (8008540 <HAL_RCC_OscConfig+0x474>)
 8008374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800837a:	f7fe fe4f 	bl	800701c <HAL_GetTick>
 800837e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008380:	e008      	b.n	8008394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008382:	f7fe fe4b 	bl	800701c <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e10c      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008394:	4b6a      	ldr	r3, [pc, #424]	@ (8008540 <HAL_RCC_OscConfig+0x474>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0f0      	beq.n	8008382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <HAL_RCC_OscConfig+0x2ea>
 80083a8:	4b64      	ldr	r3, [pc, #400]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ac:	4a63      	ldr	r2, [pc, #396]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b4:	e01c      	b.n	80083f0 <HAL_RCC_OscConfig+0x324>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d10c      	bne.n	80083d8 <HAL_RCC_OscConfig+0x30c>
 80083be:	4b5f      	ldr	r3, [pc, #380]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c2:	4a5e      	ldr	r2, [pc, #376]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083c4:	f043 0304 	orr.w	r3, r3, #4
 80083c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083ca:	4b5c      	ldr	r3, [pc, #368]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ce:	4a5b      	ldr	r2, [pc, #364]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083d0:	f043 0301 	orr.w	r3, r3, #1
 80083d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80083d6:	e00b      	b.n	80083f0 <HAL_RCC_OscConfig+0x324>
 80083d8:	4b58      	ldr	r3, [pc, #352]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083dc:	4a57      	ldr	r2, [pc, #348]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083de:	f023 0301 	bic.w	r3, r3, #1
 80083e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083e4:	4b55      	ldr	r3, [pc, #340]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e8:	4a54      	ldr	r2, [pc, #336]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80083ea:	f023 0304 	bic.w	r3, r3, #4
 80083ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d015      	beq.n	8008424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f8:	f7fe fe10 	bl	800701c <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fe:	e00a      	b.n	8008416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008400:	f7fe fe0c 	bl	800701c <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e0cb      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008416:	4b49      	ldr	r3, [pc, #292]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0ee      	beq.n	8008400 <HAL_RCC_OscConfig+0x334>
 8008422:	e014      	b.n	800844e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008424:	f7fe fdfa 	bl	800701c <HAL_GetTick>
 8008428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800842a:	e00a      	b.n	8008442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800842c:	f7fe fdf6 	bl	800701c <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800843a:	4293      	cmp	r3, r2
 800843c:	d901      	bls.n	8008442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e0b5      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008442:	4b3e      	ldr	r3, [pc, #248]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1ee      	bne.n	800842c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d105      	bne.n	8008460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008454:	4b39      	ldr	r3, [pc, #228]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 8008456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008458:	4a38      	ldr	r2, [pc, #224]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 800845a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800845e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 80a1 	beq.w	80085ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800846a:	4b34      	ldr	r3, [pc, #208]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 030c 	and.w	r3, r3, #12
 8008472:	2b08      	cmp	r3, #8
 8008474:	d05c      	beq.n	8008530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d141      	bne.n	8008502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847e:	4b31      	ldr	r3, [pc, #196]	@ (8008544 <HAL_RCC_OscConfig+0x478>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008484:	f7fe fdca 	bl	800701c <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800848c:	f7fe fdc6 	bl	800701c <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e087      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800849e:	4b27      	ldr	r3, [pc, #156]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f0      	bne.n	800848c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	69da      	ldr	r2, [r3, #28]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b8:	019b      	lsls	r3, r3, #6
 80084ba:	431a      	orrs	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c0:	085b      	lsrs	r3, r3, #1
 80084c2:	3b01      	subs	r3, #1
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	491b      	ldr	r1, [pc, #108]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008544 <HAL_RCC_OscConfig+0x478>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084da:	f7fe fd9f 	bl	800701c <HAL_GetTick>
 80084de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084e0:	e008      	b.n	80084f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e2:	f7fe fd9b 	bl	800701c <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e05c      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084f4:	4b11      	ldr	r3, [pc, #68]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f0      	beq.n	80084e2 <HAL_RCC_OscConfig+0x416>
 8008500:	e054      	b.n	80085ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008502:	4b10      	ldr	r3, [pc, #64]	@ (8008544 <HAL_RCC_OscConfig+0x478>)
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008508:	f7fe fd88 	bl	800701c <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008510:	f7fe fd84 	bl	800701c <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e045      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008522:	4b06      	ldr	r3, [pc, #24]	@ (800853c <HAL_RCC_OscConfig+0x470>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1f0      	bne.n	8008510 <HAL_RCC_OscConfig+0x444>
 800852e:	e03d      	b.n	80085ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d107      	bne.n	8008548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e038      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
 800853c:	40023800 	.word	0x40023800
 8008540:	40007000 	.word	0x40007000
 8008544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008548:	4b1b      	ldr	r3, [pc, #108]	@ (80085b8 <HAL_RCC_OscConfig+0x4ec>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d028      	beq.n	80085a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008560:	429a      	cmp	r2, r3
 8008562:	d121      	bne.n	80085a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800856e:	429a      	cmp	r2, r3
 8008570:	d11a      	bne.n	80085a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008578:	4013      	ands	r3, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800857e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008580:	4293      	cmp	r3, r2
 8008582:	d111      	bne.n	80085a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858e:	085b      	lsrs	r3, r3, #1
 8008590:	3b01      	subs	r3, #1
 8008592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008594:	429a      	cmp	r2, r3
 8008596:	d107      	bne.n	80085a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d001      	beq.n	80085ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40023800 	.word	0x40023800

080085bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e0cc      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085d0:	4b68      	ldr	r3, [pc, #416]	@ (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d90c      	bls.n	80085f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085de:	4b65      	ldr	r3, [pc, #404]	@ (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085e6:	4b63      	ldr	r3, [pc, #396]	@ (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d001      	beq.n	80085f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e0b8      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d020      	beq.n	8008646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008610:	4b59      	ldr	r3, [pc, #356]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	4a58      	ldr	r2, [pc, #352]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800861a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008628:	4b53      	ldr	r3, [pc, #332]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	4a52      	ldr	r2, [pc, #328]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800862e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008634:	4b50      	ldr	r3, [pc, #320]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	494d      	ldr	r1, [pc, #308]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d044      	beq.n	80086dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d107      	bne.n	800866a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800865a:	4b47      	ldr	r3, [pc, #284]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d119      	bne.n	800869a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e07f      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d003      	beq.n	800867a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008676:	2b03      	cmp	r3, #3
 8008678:	d107      	bne.n	800868a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800867a:	4b3f      	ldr	r3, [pc, #252]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e06f      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800868a:	4b3b      	ldr	r3, [pc, #236]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e067      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800869a:	4b37      	ldr	r3, [pc, #220]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f023 0203 	bic.w	r2, r3, #3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4934      	ldr	r1, [pc, #208]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086ac:	f7fe fcb6 	bl	800701c <HAL_GetTick>
 80086b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086b2:	e00a      	b.n	80086ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086b4:	f7fe fcb2 	bl	800701c <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e04f      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ca:	4b2b      	ldr	r3, [pc, #172]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 020c 	and.w	r2, r3, #12
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	429a      	cmp	r2, r3
 80086da:	d1eb      	bne.n	80086b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086dc:	4b25      	ldr	r3, [pc, #148]	@ (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d20c      	bcs.n	8008704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ea:	4b22      	ldr	r3, [pc, #136]	@ (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086f2:	4b20      	ldr	r3, [pc, #128]	@ (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d001      	beq.n	8008704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e032      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d008      	beq.n	8008722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008710:	4b19      	ldr	r3, [pc, #100]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	4916      	ldr	r1, [pc, #88]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800872e:	4b12      	ldr	r3, [pc, #72]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	490e      	ldr	r1, [pc, #56]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800873e:	4313      	orrs	r3, r2
 8008740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008742:	f000 f821 	bl	8008788 <HAL_RCC_GetSysClockFreq>
 8008746:	4602      	mov	r2, r0
 8008748:	4b0b      	ldr	r3, [pc, #44]	@ (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	490a      	ldr	r1, [pc, #40]	@ (800877c <HAL_RCC_ClockConfig+0x1c0>)
 8008754:	5ccb      	ldrb	r3, [r1, r3]
 8008756:	fa22 f303 	lsr.w	r3, r2, r3
 800875a:	4a09      	ldr	r2, [pc, #36]	@ (8008780 <HAL_RCC_ClockConfig+0x1c4>)
 800875c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800875e:	4b09      	ldr	r3, [pc, #36]	@ (8008784 <HAL_RCC_ClockConfig+0x1c8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fc16 	bl	8006f94 <HAL_InitTick>

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	40023c00 	.word	0x40023c00
 8008778:	40023800 	.word	0x40023800
 800877c:	080112f4 	.word	0x080112f4
 8008780:	200000cc 	.word	0x200000cc
 8008784:	200000d0 	.word	0x200000d0

08008788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800878c:	b094      	sub	sp, #80	@ 0x50
 800878e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	647b      	str	r3, [r7, #68]	@ 0x44
 8008794:	2300      	movs	r3, #0
 8008796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008798:	2300      	movs	r3, #0
 800879a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087a0:	4b79      	ldr	r3, [pc, #484]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x200>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 030c 	and.w	r3, r3, #12
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d00d      	beq.n	80087c8 <HAL_RCC_GetSysClockFreq+0x40>
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	f200 80e1 	bhi.w	8008974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_RCC_GetSysClockFreq+0x34>
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d003      	beq.n	80087c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80087ba:	e0db      	b.n	8008974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087bc:	4b73      	ldr	r3, [pc, #460]	@ (800898c <HAL_RCC_GetSysClockFreq+0x204>)
 80087be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80087c0:	e0db      	b.n	800897a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087c2:	4b73      	ldr	r3, [pc, #460]	@ (8008990 <HAL_RCC_GetSysClockFreq+0x208>)
 80087c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087c6:	e0d8      	b.n	800897a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x200>)
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087d2:	4b6d      	ldr	r3, [pc, #436]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x200>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d063      	beq.n	80088a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087de:	4b6a      	ldr	r3, [pc, #424]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x200>)
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	099b      	lsrs	r3, r3, #6
 80087e4:	2200      	movs	r2, #0
 80087e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80087f2:	2300      	movs	r3, #0
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80087fa:	4622      	mov	r2, r4
 80087fc:	462b      	mov	r3, r5
 80087fe:	f04f 0000 	mov.w	r0, #0
 8008802:	f04f 0100 	mov.w	r1, #0
 8008806:	0159      	lsls	r1, r3, #5
 8008808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800880c:	0150      	lsls	r0, r2, #5
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4621      	mov	r1, r4
 8008814:	1a51      	subs	r1, r2, r1
 8008816:	6139      	str	r1, [r7, #16]
 8008818:	4629      	mov	r1, r5
 800881a:	eb63 0301 	sbc.w	r3, r3, r1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	f04f 0300 	mov.w	r3, #0
 8008828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800882c:	4659      	mov	r1, fp
 800882e:	018b      	lsls	r3, r1, #6
 8008830:	4651      	mov	r1, sl
 8008832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008836:	4651      	mov	r1, sl
 8008838:	018a      	lsls	r2, r1, #6
 800883a:	4651      	mov	r1, sl
 800883c:	ebb2 0801 	subs.w	r8, r2, r1
 8008840:	4659      	mov	r1, fp
 8008842:	eb63 0901 	sbc.w	r9, r3, r1
 8008846:	f04f 0200 	mov.w	r2, #0
 800884a:	f04f 0300 	mov.w	r3, #0
 800884e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800885a:	4690      	mov	r8, r2
 800885c:	4699      	mov	r9, r3
 800885e:	4623      	mov	r3, r4
 8008860:	eb18 0303 	adds.w	r3, r8, r3
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	462b      	mov	r3, r5
 8008868:	eb49 0303 	adc.w	r3, r9, r3
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800887a:	4629      	mov	r1, r5
 800887c:	024b      	lsls	r3, r1, #9
 800887e:	4621      	mov	r1, r4
 8008880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008884:	4621      	mov	r1, r4
 8008886:	024a      	lsls	r2, r1, #9
 8008888:	4610      	mov	r0, r2
 800888a:	4619      	mov	r1, r3
 800888c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800888e:	2200      	movs	r2, #0
 8008890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008898:	f7f8 f9f6 	bl	8000c88 <__aeabi_uldivmod>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4613      	mov	r3, r2
 80088a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088a4:	e058      	b.n	8008958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088a6:	4b38      	ldr	r3, [pc, #224]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x200>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	099b      	lsrs	r3, r3, #6
 80088ac:	2200      	movs	r2, #0
 80088ae:	4618      	mov	r0, r3
 80088b0:	4611      	mov	r1, r2
 80088b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80088b6:	623b      	str	r3, [r7, #32]
 80088b8:	2300      	movs	r3, #0
 80088ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80088bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088c0:	4642      	mov	r2, r8
 80088c2:	464b      	mov	r3, r9
 80088c4:	f04f 0000 	mov.w	r0, #0
 80088c8:	f04f 0100 	mov.w	r1, #0
 80088cc:	0159      	lsls	r1, r3, #5
 80088ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088d2:	0150      	lsls	r0, r2, #5
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4641      	mov	r1, r8
 80088da:	ebb2 0a01 	subs.w	sl, r2, r1
 80088de:	4649      	mov	r1, r9
 80088e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088f8:	ebb2 040a 	subs.w	r4, r2, sl
 80088fc:	eb63 050b 	sbc.w	r5, r3, fp
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	00eb      	lsls	r3, r5, #3
 800890a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800890e:	00e2      	lsls	r2, r4, #3
 8008910:	4614      	mov	r4, r2
 8008912:	461d      	mov	r5, r3
 8008914:	4643      	mov	r3, r8
 8008916:	18e3      	adds	r3, r4, r3
 8008918:	603b      	str	r3, [r7, #0]
 800891a:	464b      	mov	r3, r9
 800891c:	eb45 0303 	adc.w	r3, r5, r3
 8008920:	607b      	str	r3, [r7, #4]
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800892e:	4629      	mov	r1, r5
 8008930:	028b      	lsls	r3, r1, #10
 8008932:	4621      	mov	r1, r4
 8008934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008938:	4621      	mov	r1, r4
 800893a:	028a      	lsls	r2, r1, #10
 800893c:	4610      	mov	r0, r2
 800893e:	4619      	mov	r1, r3
 8008940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008942:	2200      	movs	r2, #0
 8008944:	61bb      	str	r3, [r7, #24]
 8008946:	61fa      	str	r2, [r7, #28]
 8008948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800894c:	f7f8 f99c 	bl	8000c88 <__aeabi_uldivmod>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4613      	mov	r3, r2
 8008956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008958:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x200>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	0c1b      	lsrs	r3, r3, #16
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	3301      	adds	r3, #1
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800896a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800896c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008972:	e002      	b.n	800897a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008974:	4b05      	ldr	r3, [pc, #20]	@ (800898c <HAL_RCC_GetSysClockFreq+0x204>)
 8008976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800897a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800897c:	4618      	mov	r0, r3
 800897e:	3750      	adds	r7, #80	@ 0x50
 8008980:	46bd      	mov	sp, r7
 8008982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008986:	bf00      	nop
 8008988:	40023800 	.word	0x40023800
 800898c:	00f42400 	.word	0x00f42400
 8008990:	007a1200 	.word	0x007a1200

08008994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008998:	4b03      	ldr	r3, [pc, #12]	@ (80089a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800899a:	681b      	ldr	r3, [r3, #0]
}
 800899c:	4618      	mov	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	200000cc 	.word	0x200000cc

080089ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80089b0:	f7ff fff0 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 80089b4:	4602      	mov	r2, r0
 80089b6:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	0a9b      	lsrs	r3, r3, #10
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	4903      	ldr	r1, [pc, #12]	@ (80089d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089c2:	5ccb      	ldrb	r3, [r1, r3]
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	40023800 	.word	0x40023800
 80089d0:	08011304 	.word	0x08011304

080089d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089d8:	f7ff ffdc 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 80089dc:	4602      	mov	r2, r0
 80089de:	4b05      	ldr	r3, [pc, #20]	@ (80089f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	0b5b      	lsrs	r3, r3, #13
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	4903      	ldr	r1, [pc, #12]	@ (80089f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089ea:	5ccb      	ldrb	r3, [r1, r3]
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	40023800 	.word	0x40023800
 80089f8:	08011304 	.word	0x08011304

080089fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e041      	b.n	8008a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7fd ff30 	bl	8006888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f000 fc48 	bl	80092d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e041      	b.n	8008b30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f839 	bl	8008b38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4610      	mov	r0, r2
 8008ada:	f000 fbf9 	bl	80092d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <HAL_TIM_PWM_Start_IT+0x28>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	bf14      	ite	ne
 8008b6c:	2301      	movne	r3, #1
 8008b6e:	2300      	moveq	r3, #0
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	e022      	b.n	8008bba <HAL_TIM_PWM_Start_IT+0x6e>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d109      	bne.n	8008b8e <HAL_TIM_PWM_Start_IT+0x42>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	bf14      	ite	ne
 8008b86:	2301      	movne	r3, #1
 8008b88:	2300      	moveq	r3, #0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	e015      	b.n	8008bba <HAL_TIM_PWM_Start_IT+0x6e>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d109      	bne.n	8008ba8 <HAL_TIM_PWM_Start_IT+0x5c>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	bf14      	ite	ne
 8008ba0:	2301      	movne	r3, #1
 8008ba2:	2300      	moveq	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	e008      	b.n	8008bba <HAL_TIM_PWM_Start_IT+0x6e>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	bf14      	ite	ne
 8008bb4:	2301      	movne	r3, #1
 8008bb6:	2300      	moveq	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e0c7      	b.n	8008d52 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <HAL_TIM_PWM_Start_IT+0x86>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bd0:	e013      	b.n	8008bfa <HAL_TIM_PWM_Start_IT+0xae>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d104      	bne.n	8008be2 <HAL_TIM_PWM_Start_IT+0x96>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008be0:	e00b      	b.n	8008bfa <HAL_TIM_PWM_Start_IT+0xae>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d104      	bne.n	8008bf2 <HAL_TIM_PWM_Start_IT+0xa6>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bf0:	e003      	b.n	8008bfa <HAL_TIM_PWM_Start_IT+0xae>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b0c      	cmp	r3, #12
 8008bfe:	d841      	bhi.n	8008c84 <HAL_TIM_PWM_Start_IT+0x138>
 8008c00:	a201      	add	r2, pc, #4	@ (adr r2, 8008c08 <HAL_TIM_PWM_Start_IT+0xbc>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c3d 	.word	0x08008c3d
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008c85 	.word	0x08008c85
 8008c14:	08008c85 	.word	0x08008c85
 8008c18:	08008c4f 	.word	0x08008c4f
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	08008c61 	.word	0x08008c61
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c73 	.word	0x08008c73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0202 	orr.w	r2, r2, #2
 8008c4a:	60da      	str	r2, [r3, #12]
      break;
 8008c4c:	e01d      	b.n	8008c8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0204 	orr.w	r2, r2, #4
 8008c5c:	60da      	str	r2, [r3, #12]
      break;
 8008c5e:	e014      	b.n	8008c8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0208 	orr.w	r2, r2, #8
 8008c6e:	60da      	str	r2, [r3, #12]
      break;
 8008c70:	e00b      	b.n	8008c8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0210 	orr.w	r2, r2, #16
 8008c80:	60da      	str	r2, [r3, #12]
      break;
 8008c82:	e002      	b.n	8008c8a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	73fb      	strb	r3, [r7, #15]
      break;
 8008c88:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d15f      	bne.n	8008d50 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2201      	movs	r2, #1
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fe0f 	bl	80098bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8008d5c <HAL_TIM_PWM_Start_IT+0x210>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d004      	beq.n	8008cb2 <HAL_TIM_PWM_Start_IT+0x166>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a2c      	ldr	r2, [pc, #176]	@ (8008d60 <HAL_TIM_PWM_Start_IT+0x214>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d101      	bne.n	8008cb6 <HAL_TIM_PWM_Start_IT+0x16a>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e000      	b.n	8008cb8 <HAL_TIM_PWM_Start_IT+0x16c>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a22      	ldr	r2, [pc, #136]	@ (8008d5c <HAL_TIM_PWM_Start_IT+0x210>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d022      	beq.n	8008d1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cde:	d01d      	beq.n	8008d1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d64 <HAL_TIM_PWM_Start_IT+0x218>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d018      	beq.n	8008d1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a1e      	ldr	r2, [pc, #120]	@ (8008d68 <HAL_TIM_PWM_Start_IT+0x21c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d013      	beq.n	8008d1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d6c <HAL_TIM_PWM_Start_IT+0x220>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00e      	beq.n	8008d1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a17      	ldr	r2, [pc, #92]	@ (8008d60 <HAL_TIM_PWM_Start_IT+0x214>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d009      	beq.n	8008d1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a18      	ldr	r2, [pc, #96]	@ (8008d70 <HAL_TIM_PWM_Start_IT+0x224>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d004      	beq.n	8008d1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <HAL_TIM_PWM_Start_IT+0x228>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d111      	bne.n	8008d40 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b06      	cmp	r3, #6
 8008d2c:	d010      	beq.n	8008d50 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f042 0201 	orr.w	r2, r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d3e:	e007      	b.n	8008d50 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0201 	orr.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40010000 	.word	0x40010000
 8008d60:	40010400 	.word	0x40010400
 8008d64:	40000400 	.word	0x40000400
 8008d68:	40000800 	.word	0x40000800
 8008d6c:	40000c00 	.word	0x40000c00
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40001800 	.word	0x40001800

08008d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d020      	beq.n	8008ddc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01b      	beq.n	8008ddc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f06f 0202 	mvn.w	r2, #2
 8008dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f003 0303 	and.w	r3, r3, #3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa65 	bl	8009292 <HAL_TIM_IC_CaptureCallback>
 8008dc8:	e005      	b.n	8008dd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fa57 	bl	800927e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fa68 	bl	80092a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d020      	beq.n	8008e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01b      	beq.n	8008e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0204 	mvn.w	r2, #4
 8008df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa3f 	bl	8009292 <HAL_TIM_IC_CaptureCallback>
 8008e14:	e005      	b.n	8008e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa31 	bl	800927e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fa42 	bl	80092a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d020      	beq.n	8008e74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01b      	beq.n	8008e74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f06f 0208 	mvn.w	r2, #8
 8008e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa19 	bl	8009292 <HAL_TIM_IC_CaptureCallback>
 8008e60:	e005      	b.n	8008e6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa0b 	bl	800927e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa1c 	bl	80092a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f003 0310 	and.w	r3, r3, #16
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d020      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f003 0310 	and.w	r3, r3, #16
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01b      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f06f 0210 	mvn.w	r2, #16
 8008e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2208      	movs	r2, #8
 8008e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f9f3 	bl	8009292 <HAL_TIM_IC_CaptureCallback>
 8008eac:	e005      	b.n	8008eba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f9e5 	bl	800927e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f9f6 	bl	80092a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00c      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d007      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0201 	mvn.w	r2, #1
 8008edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f9c3 	bl	800926a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fdd8 	bl	8009ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00c      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f9c7 	bl	80092ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00c      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f003 0320 	and.w	r3, r3, #32
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d007      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0220 	mvn.w	r2, #32
 8008f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fdaa 	bl	8009aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d101      	bne.n	8008f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f72:	2302      	movs	r3, #2
 8008f74:	e0ae      	b.n	80090d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b0c      	cmp	r3, #12
 8008f82:	f200 809f 	bhi.w	80090c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f86:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fc1 	.word	0x08008fc1
 8008f90:	080090c5 	.word	0x080090c5
 8008f94:	080090c5 	.word	0x080090c5
 8008f98:	080090c5 	.word	0x080090c5
 8008f9c:	08009001 	.word	0x08009001
 8008fa0:	080090c5 	.word	0x080090c5
 8008fa4:	080090c5 	.word	0x080090c5
 8008fa8:	080090c5 	.word	0x080090c5
 8008fac:	08009043 	.word	0x08009043
 8008fb0:	080090c5 	.word	0x080090c5
 8008fb4:	080090c5 	.word	0x080090c5
 8008fb8:	080090c5 	.word	0x080090c5
 8008fbc:	08009083 	.word	0x08009083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fa2e 	bl	8009428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699a      	ldr	r2, [r3, #24]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0208 	orr.w	r2, r2, #8
 8008fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f022 0204 	bic.w	r2, r2, #4
 8008fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6999      	ldr	r1, [r3, #24]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	691a      	ldr	r2, [r3, #16]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	619a      	str	r2, [r3, #24]
      break;
 8008ffe:	e064      	b.n	80090ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fa7e 	bl	8009508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800901a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699a      	ldr	r2, [r3, #24]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800902a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6999      	ldr	r1, [r3, #24]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	021a      	lsls	r2, r3, #8
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	619a      	str	r2, [r3, #24]
      break;
 8009040:	e043      	b.n	80090ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fad3 	bl	80095f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69da      	ldr	r2, [r3, #28]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f042 0208 	orr.w	r2, r2, #8
 800905c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	69da      	ldr	r2, [r3, #28]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0204 	bic.w	r2, r2, #4
 800906c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69d9      	ldr	r1, [r3, #28]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	61da      	str	r2, [r3, #28]
      break;
 8009080:	e023      	b.n	80090ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 fb27 	bl	80096dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69da      	ldr	r2, [r3, #28]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800909c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69da      	ldr	r2, [r3, #28]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69d9      	ldr	r1, [r3, #28]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	021a      	lsls	r2, r3, #8
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	61da      	str	r2, [r3, #28]
      break;
 80090c2:	e002      	b.n	80090ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_TIM_ConfigClockSource+0x1c>
 80090f4:	2302      	movs	r3, #2
 80090f6:	e0b4      	b.n	8009262 <HAL_TIM_ConfigClockSource+0x186>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800911e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009130:	d03e      	beq.n	80091b0 <HAL_TIM_ConfigClockSource+0xd4>
 8009132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009136:	f200 8087 	bhi.w	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 800913a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800913e:	f000 8086 	beq.w	800924e <HAL_TIM_ConfigClockSource+0x172>
 8009142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009146:	d87f      	bhi.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 8009148:	2b70      	cmp	r3, #112	@ 0x70
 800914a:	d01a      	beq.n	8009182 <HAL_TIM_ConfigClockSource+0xa6>
 800914c:	2b70      	cmp	r3, #112	@ 0x70
 800914e:	d87b      	bhi.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 8009150:	2b60      	cmp	r3, #96	@ 0x60
 8009152:	d050      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x11a>
 8009154:	2b60      	cmp	r3, #96	@ 0x60
 8009156:	d877      	bhi.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 8009158:	2b50      	cmp	r3, #80	@ 0x50
 800915a:	d03c      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0xfa>
 800915c:	2b50      	cmp	r3, #80	@ 0x50
 800915e:	d873      	bhi.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 8009160:	2b40      	cmp	r3, #64	@ 0x40
 8009162:	d058      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x13a>
 8009164:	2b40      	cmp	r3, #64	@ 0x40
 8009166:	d86f      	bhi.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 8009168:	2b30      	cmp	r3, #48	@ 0x30
 800916a:	d064      	beq.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
 800916c:	2b30      	cmp	r3, #48	@ 0x30
 800916e:	d86b      	bhi.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 8009170:	2b20      	cmp	r3, #32
 8009172:	d060      	beq.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
 8009174:	2b20      	cmp	r3, #32
 8009176:	d867      	bhi.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
 8009178:	2b00      	cmp	r3, #0
 800917a:	d05c      	beq.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
 800917c:	2b10      	cmp	r3, #16
 800917e:	d05a      	beq.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
 8009180:	e062      	b.n	8009248 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009192:	f000 fb73 	bl	800987c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	609a      	str	r2, [r3, #8]
      break;
 80091ae:	e04f      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091c0:	f000 fb5c 	bl	800987c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091d2:	609a      	str	r2, [r3, #8]
      break;
 80091d4:	e03c      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091e2:	461a      	mov	r2, r3
 80091e4:	f000 fad0 	bl	8009788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2150      	movs	r1, #80	@ 0x50
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fb29 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 80091f4:	e02c      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009202:	461a      	mov	r2, r3
 8009204:	f000 faef 	bl	80097e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2160      	movs	r1, #96	@ 0x60
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fb19 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009214:	e01c      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009222:	461a      	mov	r2, r3
 8009224:	f000 fab0 	bl	8009788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2140      	movs	r1, #64	@ 0x40
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fb09 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009234:	e00c      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4619      	mov	r1, r3
 8009240:	4610      	mov	r0, r2
 8009242:	f000 fb00 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009246:	e003      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	73fb      	strb	r3, [r7, #15]
      break;
 800924c:	e000      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800924e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800929a:	bf00      	nop
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b083      	sub	sp, #12
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
	...

080092d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a46      	ldr	r2, [pc, #280]	@ (80093fc <TIM_Base_SetConfig+0x12c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d013      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092ee:	d00f      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a43      	ldr	r2, [pc, #268]	@ (8009400 <TIM_Base_SetConfig+0x130>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d00b      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a42      	ldr	r2, [pc, #264]	@ (8009404 <TIM_Base_SetConfig+0x134>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d007      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a41      	ldr	r2, [pc, #260]	@ (8009408 <TIM_Base_SetConfig+0x138>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d003      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a40      	ldr	r2, [pc, #256]	@ (800940c <TIM_Base_SetConfig+0x13c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d108      	bne.n	8009322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a35      	ldr	r2, [pc, #212]	@ (80093fc <TIM_Base_SetConfig+0x12c>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d02b      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009330:	d027      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a32      	ldr	r2, [pc, #200]	@ (8009400 <TIM_Base_SetConfig+0x130>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d023      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a31      	ldr	r2, [pc, #196]	@ (8009404 <TIM_Base_SetConfig+0x134>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d01f      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a30      	ldr	r2, [pc, #192]	@ (8009408 <TIM_Base_SetConfig+0x138>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d01b      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a2f      	ldr	r2, [pc, #188]	@ (800940c <TIM_Base_SetConfig+0x13c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d017      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a2e      	ldr	r2, [pc, #184]	@ (8009410 <TIM_Base_SetConfig+0x140>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d013      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a2d      	ldr	r2, [pc, #180]	@ (8009414 <TIM_Base_SetConfig+0x144>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d00f      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a2c      	ldr	r2, [pc, #176]	@ (8009418 <TIM_Base_SetConfig+0x148>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00b      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a2b      	ldr	r2, [pc, #172]	@ (800941c <TIM_Base_SetConfig+0x14c>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d007      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a2a      	ldr	r2, [pc, #168]	@ (8009420 <TIM_Base_SetConfig+0x150>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d003      	beq.n	8009382 <TIM_Base_SetConfig+0xb2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a29      	ldr	r2, [pc, #164]	@ (8009424 <TIM_Base_SetConfig+0x154>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d108      	bne.n	8009394 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a10      	ldr	r2, [pc, #64]	@ (80093fc <TIM_Base_SetConfig+0x12c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d003      	beq.n	80093c8 <TIM_Base_SetConfig+0xf8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a12      	ldr	r2, [pc, #72]	@ (800940c <TIM_Base_SetConfig+0x13c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d103      	bne.n	80093d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d105      	bne.n	80093ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f023 0201 	bic.w	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	611a      	str	r2, [r3, #16]
  }
}
 80093ee:	bf00      	nop
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	40010000 	.word	0x40010000
 8009400:	40000400 	.word	0x40000400
 8009404:	40000800 	.word	0x40000800
 8009408:	40000c00 	.word	0x40000c00
 800940c:	40010400 	.word	0x40010400
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400
 8009418:	40014800 	.word	0x40014800
 800941c:	40001800 	.word	0x40001800
 8009420:	40001c00 	.word	0x40001c00
 8009424:	40002000 	.word	0x40002000

08009428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	f023 0201 	bic.w	r2, r3, #1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f023 0302 	bic.w	r3, r3, #2
 8009470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a20      	ldr	r2, [pc, #128]	@ (8009500 <TIM_OC1_SetConfig+0xd8>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d003      	beq.n	800948c <TIM_OC1_SetConfig+0x64>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a1f      	ldr	r2, [pc, #124]	@ (8009504 <TIM_OC1_SetConfig+0xdc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d10c      	bne.n	80094a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f023 0308 	bic.w	r3, r3, #8
 8009492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f023 0304 	bic.w	r3, r3, #4
 80094a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a15      	ldr	r2, [pc, #84]	@ (8009500 <TIM_OC1_SetConfig+0xd8>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d003      	beq.n	80094b6 <TIM_OC1_SetConfig+0x8e>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a14      	ldr	r2, [pc, #80]	@ (8009504 <TIM_OC1_SetConfig+0xdc>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d111      	bne.n	80094da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40010000 	.word	0x40010000
 8009504:	40010400 	.word	0x40010400

08009508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	f023 0210 	bic.w	r2, r3, #16
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800953e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f023 0320 	bic.w	r3, r3, #32
 8009552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a22      	ldr	r2, [pc, #136]	@ (80095ec <TIM_OC2_SetConfig+0xe4>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_OC2_SetConfig+0x68>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a21      	ldr	r2, [pc, #132]	@ (80095f0 <TIM_OC2_SetConfig+0xe8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d10d      	bne.n	800958c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	4313      	orrs	r3, r2
 8009582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800958a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a17      	ldr	r2, [pc, #92]	@ (80095ec <TIM_OC2_SetConfig+0xe4>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d003      	beq.n	800959c <TIM_OC2_SetConfig+0x94>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a16      	ldr	r2, [pc, #88]	@ (80095f0 <TIM_OC2_SetConfig+0xe8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d113      	bne.n	80095c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	621a      	str	r2, [r3, #32]
}
 80095de:	bf00      	nop
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40010400 	.word	0x40010400

080095f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800963c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a21      	ldr	r2, [pc, #132]	@ (80096d4 <TIM_OC3_SetConfig+0xe0>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_OC3_SetConfig+0x66>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a20      	ldr	r2, [pc, #128]	@ (80096d8 <TIM_OC3_SetConfig+0xe4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d10d      	bne.n	8009676 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	021b      	lsls	r3, r3, #8
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a16      	ldr	r2, [pc, #88]	@ (80096d4 <TIM_OC3_SetConfig+0xe0>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d003      	beq.n	8009686 <TIM_OC3_SetConfig+0x92>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a15      	ldr	r2, [pc, #84]	@ (80096d8 <TIM_OC3_SetConfig+0xe4>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d113      	bne.n	80096ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800968c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	4313      	orrs	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	621a      	str	r2, [r3, #32]
}
 80096c8:	bf00      	nop
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40010400 	.word	0x40010400

080096dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800970a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	031b      	lsls	r3, r3, #12
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a12      	ldr	r2, [pc, #72]	@ (8009780 <TIM_OC4_SetConfig+0xa4>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <TIM_OC4_SetConfig+0x68>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a11      	ldr	r2, [pc, #68]	@ (8009784 <TIM_OC4_SetConfig+0xa8>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d109      	bne.n	8009758 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800974a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	019b      	lsls	r3, r3, #6
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	621a      	str	r2, [r3, #32]
}
 8009772:	bf00      	nop
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40010000 	.word	0x40010000
 8009784:	40010400 	.word	0x40010400

08009788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	f023 0201 	bic.w	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f023 030a 	bic.w	r3, r3, #10
 80097c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	621a      	str	r2, [r3, #32]
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b087      	sub	sp, #28
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	60f8      	str	r0, [r7, #12]
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	f023 0210 	bic.w	r2, r3, #16
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	4313      	orrs	r3, r2
 800981a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009822:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	4313      	orrs	r3, r2
 800982c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	621a      	str	r2, [r3, #32]
}
 800983a:	bf00      	nop
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800985c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4313      	orrs	r3, r2
 8009864:	f043 0307 	orr.w	r3, r3, #7
 8009868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	609a      	str	r2, [r3, #8]
}
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	021a      	lsls	r2, r3, #8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	431a      	orrs	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	609a      	str	r2, [r3, #8]
}
 80098b0:	bf00      	nop
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f003 031f 	and.w	r3, r3, #31
 80098ce:	2201      	movs	r2, #1
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1a      	ldr	r2, [r3, #32]
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	43db      	mvns	r3, r3
 80098de:	401a      	ands	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a1a      	ldr	r2, [r3, #32]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f003 031f 	and.w	r3, r3, #31
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	fa01 f303 	lsl.w	r3, r1, r3
 80098f4:	431a      	orrs	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	621a      	str	r2, [r3, #32]
}
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800991c:	2302      	movs	r3, #2
 800991e:	e05a      	b.n	80099d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a21      	ldr	r2, [pc, #132]	@ (80099e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d022      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800996c:	d01d      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a1d      	ldr	r2, [pc, #116]	@ (80099e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d018      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a1b      	ldr	r2, [pc, #108]	@ (80099ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d013      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a1a      	ldr	r2, [pc, #104]	@ (80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d00e      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a18      	ldr	r2, [pc, #96]	@ (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d009      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a17      	ldr	r2, [pc, #92]	@ (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d004      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a15      	ldr	r2, [pc, #84]	@ (80099fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d10c      	bne.n	80099c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	40010000 	.word	0x40010000
 80099e8:	40000400 	.word	0x40000400
 80099ec:	40000800 	.word	0x40000800
 80099f0:	40000c00 	.word	0x40000c00
 80099f4:	40010400 	.word	0x40010400
 80099f8:	40014000 	.word	0x40014000
 80099fc:	40001800 	.word	0x40001800

08009a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e03d      	b.n	8009a98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e042      	b.n	8009b64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7fc ffb4 	bl	8006a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2224      	movs	r2, #36	@ 0x24
 8009afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fcdb 	bl	800a4cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	695a      	ldr	r2, [r3, #20]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	d112      	bne.n	8009bac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <HAL_UART_Receive_IT+0x26>
 8009b8c:	88fb      	ldrh	r3, [r7, #6]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e00b      	b.n	8009bae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b9c:	88fb      	ldrh	r3, [r7, #6]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68b9      	ldr	r1, [r7, #8]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 faba 	bl	800a11c <UART_Start_Receive_IT>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	e000      	b.n	8009bae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009bac:	2302      	movs	r3, #2
  }
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b0ba      	sub	sp, #232	@ 0xe8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10f      	bne.n	8009c1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d009      	beq.n	8009c1e <HAL_UART_IRQHandler+0x66>
 8009c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fb99 	bl	800a34e <UART_Receive_IT>
      return;
 8009c1c:	e25b      	b.n	800a0d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 80de 	beq.w	8009de4 <HAL_UART_IRQHandler+0x22c>
 8009c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d106      	bne.n	8009c42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 80d1 	beq.w	8009de4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00b      	beq.n	8009c66 <HAL_UART_IRQHandler+0xae>
 8009c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d005      	beq.n	8009c66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5e:	f043 0201 	orr.w	r2, r3, #1
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6a:	f003 0304 	and.w	r3, r3, #4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <HAL_UART_IRQHandler+0xd2>
 8009c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c82:	f043 0202 	orr.w	r2, r3, #2
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00b      	beq.n	8009cae <HAL_UART_IRQHandler+0xf6>
 8009c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d005      	beq.n	8009cae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ca6:	f043 0204 	orr.w	r2, r3, #4
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb2:	f003 0308 	and.w	r3, r3, #8
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d011      	beq.n	8009cde <HAL_UART_IRQHandler+0x126>
 8009cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d105      	bne.n	8009cd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd6:	f043 0208 	orr.w	r2, r3, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 81f2 	beq.w	800a0cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <HAL_UART_IRQHandler+0x14e>
 8009cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf8:	f003 0320 	and.w	r3, r3, #32
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fb24 	bl	800a34e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d10:	2b40      	cmp	r3, #64	@ 0x40
 8009d12:	bf0c      	ite	eq
 8009d14:	2301      	moveq	r3, #1
 8009d16:	2300      	movne	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <HAL_UART_IRQHandler+0x17a>
 8009d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d04f      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa2c 	bl	800a190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d42:	2b40      	cmp	r3, #64	@ 0x40
 8009d44:	d141      	bne.n	8009dca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3314      	adds	r3, #20
 8009d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3314      	adds	r3, #20
 8009d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1d9      	bne.n	8009d46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d013      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8009f98 <HAL_UART_IRQHandler+0x3e0>)
 8009da0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fd fae9 	bl	800737e <HAL_DMA_Abort_IT>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d016      	beq.n	8009de0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc0:	e00e      	b.n	8009de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f994 	bl	800a0f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc8:	e00a      	b.n	8009de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f990 	bl	800a0f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd0:	e006      	b.n	8009de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f98c 	bl	800a0f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009dde:	e175      	b.n	800a0cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de0:	bf00      	nop
    return;
 8009de2:	e173      	b.n	800a0cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	f040 814f 	bne.w	800a08c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8148 	beq.w	800a08c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 8141 	beq.w	800a08c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60bb      	str	r3, [r7, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60bb      	str	r3, [r7, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	60bb      	str	r3, [r7, #8]
 8009e1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e2a:	2b40      	cmp	r3, #64	@ 0x40
 8009e2c:	f040 80b6 	bne.w	8009f9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 8145 	beq.w	800a0d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	f080 813e 	bcs.w	800a0d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e66:	f000 8088 	beq.w	8009f7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	330c      	adds	r3, #12
 8009e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	330c      	adds	r3, #12
 8009e92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1d9      	bne.n	8009e6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3314      	adds	r3, #20
 8009ebc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ec8:	f023 0301 	bic.w	r3, r3, #1
 8009ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3314      	adds	r3, #20
 8009ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009eda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009eec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e1      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3314      	adds	r3, #20
 8009ef8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3314      	adds	r3, #20
 8009f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e3      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f4a:	f023 0310 	bic.w	r3, r3, #16
 8009f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	330c      	adds	r3, #12
 8009f58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009f5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e3      	bne.n	8009f38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fd f992 	bl	800729e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f8b7 	bl	800a104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f96:	e09b      	b.n	800a0d0 <HAL_UART_IRQHandler+0x518>
 8009f98:	0800a257 	.word	0x0800a257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 808e 	beq.w	800a0d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 8089 	beq.w	800a0d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	330c      	adds	r3, #12
 8009fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fcc:	e853 3f00 	ldrex	r3, [r3]
 8009fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	330c      	adds	r3, #12
 8009fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009fe6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fe8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e3      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3314      	adds	r3, #20
 800a000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	623b      	str	r3, [r7, #32]
   return(result);
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	f023 0301 	bic.w	r3, r3, #1
 800a010:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3314      	adds	r3, #20
 800a01a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a01e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a020:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e3      	bne.n	8009ffa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2220      	movs	r2, #32
 800a036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	330c      	adds	r3, #12
 800a046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	e853 3f00 	ldrex	r3, [r3]
 800a04e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0310 	bic.w	r3, r3, #16
 800a056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	330c      	adds	r3, #12
 800a060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a064:	61fa      	str	r2, [r7, #28]
 800a066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a068:	69b9      	ldr	r1, [r7, #24]
 800a06a:	69fa      	ldr	r2, [r7, #28]
 800a06c:	e841 2300 	strex	r3, r2, [r1]
 800a070:	617b      	str	r3, [r7, #20]
   return(result);
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1e3      	bne.n	800a040 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a07e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f83d 	bl	800a104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a08a:	e023      	b.n	800a0d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a094:	2b00      	cmp	r3, #0
 800a096:	d009      	beq.n	800a0ac <HAL_UART_IRQHandler+0x4f4>
 800a098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a09c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f8ea 	bl	800a27e <UART_Transmit_IT>
    return;
 800a0aa:	e014      	b.n	800a0d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00e      	beq.n	800a0d6 <HAL_UART_IRQHandler+0x51e>
 800a0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d008      	beq.n	800a0d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f92a 	bl	800a31e <UART_EndTransmit_IT>
    return;
 800a0ca:	e004      	b.n	800a0d6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a0cc:	bf00      	nop
 800a0ce:	e002      	b.n	800a0d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a0d0:	bf00      	nop
 800a0d2:	e000      	b.n	800a0d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a0d4:	bf00      	nop
  }
}
 800a0d6:	37e8      	adds	r7, #232	@ 0xe8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	4613      	mov	r3, r2
 800a128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	88fa      	ldrh	r2, [r7, #6]
 800a134:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	88fa      	ldrh	r2, [r7, #6]
 800a13a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2222      	movs	r2, #34	@ 0x22
 800a146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68da      	ldr	r2, [r3, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a160:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695a      	ldr	r2, [r3, #20]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f042 0201 	orr.w	r2, r2, #1
 800a170:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0220 	orr.w	r2, r2, #32
 800a180:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b095      	sub	sp, #84	@ 0x54
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	330c      	adds	r3, #12
 800a19e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	330c      	adds	r3, #12
 800a1b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1b8:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1c0:	e841 2300 	strex	r3, r2, [r1]
 800a1c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1e5      	bne.n	800a198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3314      	adds	r3, #20
 800a1d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	e853 3f00 	ldrex	r3, [r3]
 800a1da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	f023 0301 	bic.w	r3, r3, #1
 800a1e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3314      	adds	r3, #20
 800a1ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e5      	bne.n	800a1cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a204:	2b01      	cmp	r3, #1
 800a206:	d119      	bne.n	800a23c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	330c      	adds	r3, #12
 800a20e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	60bb      	str	r3, [r7, #8]
   return(result);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f023 0310 	bic.w	r3, r3, #16
 800a21e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	330c      	adds	r3, #12
 800a226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a228:	61ba      	str	r2, [r7, #24]
 800a22a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6979      	ldr	r1, [r7, #20]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	613b      	str	r3, [r7, #16]
   return(result);
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e5      	bne.n	800a208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2220      	movs	r2, #32
 800a240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a24a:	bf00      	nop
 800a24c:	3754      	adds	r7, #84	@ 0x54
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7ff ff3d 	bl	800a0f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a276:	bf00      	nop
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a27e:	b480      	push	{r7}
 800a280:	b085      	sub	sp, #20
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b21      	cmp	r3, #33	@ 0x21
 800a290:	d13e      	bne.n	800a310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a29a:	d114      	bne.n	800a2c6 <UART_Transmit_IT+0x48>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d110      	bne.n	800a2c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	1c9a      	adds	r2, r3, #2
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	621a      	str	r2, [r3, #32]
 800a2c4:	e008      	b.n	800a2d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	1c59      	adds	r1, r3, #1
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6211      	str	r1, [r2, #32]
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10f      	bne.n	800a30c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68da      	ldr	r2, [r3, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a30a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e000      	b.n	800a312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a310:	2302      	movs	r3, #2
  }
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68da      	ldr	r2, [r3, #12]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a334:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2220      	movs	r2, #32
 800a33a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7ff fecc 	bl	800a0dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b08c      	sub	sp, #48	@ 0x30
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b22      	cmp	r3, #34	@ 0x22
 800a360:	f040 80ae 	bne.w	800a4c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a36c:	d117      	bne.n	800a39e <UART_Receive_IT+0x50>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d113      	bne.n	800a39e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a376:	2300      	movs	r3, #0
 800a378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a396:	1c9a      	adds	r2, r3, #2
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a39c:	e026      	b.n	800a3ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b0:	d007      	beq.n	800a3c2 <UART_Receive_IT+0x74>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <UART_Receive_IT+0x82>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	e008      	b.n	800a3e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d15d      	bne.n	800a4bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0220 	bic.w	r2, r2, #32
 800a40e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	695a      	ldr	r2, [r3, #20]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a442:	2b01      	cmp	r3, #1
 800a444:	d135      	bne.n	800a4b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	330c      	adds	r3, #12
 800a452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	e853 3f00 	ldrex	r3, [r3]
 800a45a:	613b      	str	r3, [r7, #16]
   return(result);
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f023 0310 	bic.w	r3, r3, #16
 800a462:	627b      	str	r3, [r7, #36]	@ 0x24
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	330c      	adds	r3, #12
 800a46a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a46c:	623a      	str	r2, [r7, #32]
 800a46e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	69f9      	ldr	r1, [r7, #28]
 800a472:	6a3a      	ldr	r2, [r7, #32]
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	61bb      	str	r3, [r7, #24]
   return(result);
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e5      	bne.n	800a44c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0310 	and.w	r3, r3, #16
 800a48a:	2b10      	cmp	r3, #16
 800a48c:	d10a      	bne.n	800a4a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a48e:	2300      	movs	r3, #0
 800a490:	60fb      	str	r3, [r7, #12]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fe2a 	bl	800a104 <HAL_UARTEx_RxEventCallback>
 800a4b0:	e002      	b.n	800a4b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7fa f8ac 	bl	8004610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	e002      	b.n	800a4c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e000      	b.n	800a4c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a4c0:	2302      	movs	r3, #2
  }
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3730      	adds	r7, #48	@ 0x30
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d0:	b0c0      	sub	sp, #256	@ 0x100
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4e8:	68d9      	ldr	r1, [r3, #12]
 800a4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	ea40 0301 	orr.w	r3, r0, r1
 800a4f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	431a      	orrs	r2, r3
 800a504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	4313      	orrs	r3, r2
 800a514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a524:	f021 010c 	bic.w	r1, r1, #12
 800a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a532:	430b      	orrs	r3, r1
 800a534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a546:	6999      	ldr	r1, [r3, #24]
 800a548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	ea40 0301 	orr.w	r3, r0, r1
 800a552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	4b8f      	ldr	r3, [pc, #572]	@ (800a798 <UART_SetConfig+0x2cc>)
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d005      	beq.n	800a56c <UART_SetConfig+0xa0>
 800a560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	4b8d      	ldr	r3, [pc, #564]	@ (800a79c <UART_SetConfig+0x2d0>)
 800a568:	429a      	cmp	r2, r3
 800a56a:	d104      	bne.n	800a576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a56c:	f7fe fa32 	bl	80089d4 <HAL_RCC_GetPCLK2Freq>
 800a570:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a574:	e003      	b.n	800a57e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a576:	f7fe fa19 	bl	80089ac <HAL_RCC_GetPCLK1Freq>
 800a57a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a57e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a588:	f040 810c 	bne.w	800a7a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a58c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a590:	2200      	movs	r2, #0
 800a592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a596:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a59a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a59e:	4622      	mov	r2, r4
 800a5a0:	462b      	mov	r3, r5
 800a5a2:	1891      	adds	r1, r2, r2
 800a5a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a5a6:	415b      	adcs	r3, r3
 800a5a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	eb12 0801 	adds.w	r8, r2, r1
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	eb43 0901 	adc.w	r9, r3, r1
 800a5ba:	f04f 0200 	mov.w	r2, #0
 800a5be:	f04f 0300 	mov.w	r3, #0
 800a5c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a5ce:	4690      	mov	r8, r2
 800a5d0:	4699      	mov	r9, r3
 800a5d2:	4623      	mov	r3, r4
 800a5d4:	eb18 0303 	adds.w	r3, r8, r3
 800a5d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5dc:	462b      	mov	r3, r5
 800a5de:	eb49 0303 	adc.w	r3, r9, r3
 800a5e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a5e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a5f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a5f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	18db      	adds	r3, r3, r3
 800a5fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800a600:	4613      	mov	r3, r2
 800a602:	eb42 0303 	adc.w	r3, r2, r3
 800a606:	657b      	str	r3, [r7, #84]	@ 0x54
 800a608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a60c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a610:	f7f6 fb3a 	bl	8000c88 <__aeabi_uldivmod>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4b61      	ldr	r3, [pc, #388]	@ (800a7a0 <UART_SetConfig+0x2d4>)
 800a61a:	fba3 2302 	umull	r2, r3, r3, r2
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	011c      	lsls	r4, r3, #4
 800a622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a626:	2200      	movs	r2, #0
 800a628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a62c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a634:	4642      	mov	r2, r8
 800a636:	464b      	mov	r3, r9
 800a638:	1891      	adds	r1, r2, r2
 800a63a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a63c:	415b      	adcs	r3, r3
 800a63e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a644:	4641      	mov	r1, r8
 800a646:	eb12 0a01 	adds.w	sl, r2, r1
 800a64a:	4649      	mov	r1, r9
 800a64c:	eb43 0b01 	adc.w	fp, r3, r1
 800a650:	f04f 0200 	mov.w	r2, #0
 800a654:	f04f 0300 	mov.w	r3, #0
 800a658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a65c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a664:	4692      	mov	sl, r2
 800a666:	469b      	mov	fp, r3
 800a668:	4643      	mov	r3, r8
 800a66a:	eb1a 0303 	adds.w	r3, sl, r3
 800a66e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a672:	464b      	mov	r3, r9
 800a674:	eb4b 0303 	adc.w	r3, fp, r3
 800a678:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a688:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a68c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a690:	460b      	mov	r3, r1
 800a692:	18db      	adds	r3, r3, r3
 800a694:	643b      	str	r3, [r7, #64]	@ 0x40
 800a696:	4613      	mov	r3, r2
 800a698:	eb42 0303 	adc.w	r3, r2, r3
 800a69c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a69e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a6a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a6a6:	f7f6 faef 	bl	8000c88 <__aeabi_uldivmod>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a7a0 <UART_SetConfig+0x2d4>)
 800a6b2:	fba3 2301 	umull	r2, r3, r3, r1
 800a6b6:	095b      	lsrs	r3, r3, #5
 800a6b8:	2264      	movs	r2, #100	@ 0x64
 800a6ba:	fb02 f303 	mul.w	r3, r2, r3
 800a6be:	1acb      	subs	r3, r1, r3
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a6c6:	4b36      	ldr	r3, [pc, #216]	@ (800a7a0 <UART_SetConfig+0x2d4>)
 800a6c8:	fba3 2302 	umull	r2, r3, r3, r2
 800a6cc:	095b      	lsrs	r3, r3, #5
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a6d4:	441c      	add	r4, r3
 800a6d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a6e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	464b      	mov	r3, r9
 800a6ec:	1891      	adds	r1, r2, r2
 800a6ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a6f0:	415b      	adcs	r3, r3
 800a6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a6f8:	4641      	mov	r1, r8
 800a6fa:	1851      	adds	r1, r2, r1
 800a6fc:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6fe:	4649      	mov	r1, r9
 800a700:	414b      	adcs	r3, r1
 800a702:	637b      	str	r3, [r7, #52]	@ 0x34
 800a704:	f04f 0200 	mov.w	r2, #0
 800a708:	f04f 0300 	mov.w	r3, #0
 800a70c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a710:	4659      	mov	r1, fp
 800a712:	00cb      	lsls	r3, r1, #3
 800a714:	4651      	mov	r1, sl
 800a716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a71a:	4651      	mov	r1, sl
 800a71c:	00ca      	lsls	r2, r1, #3
 800a71e:	4610      	mov	r0, r2
 800a720:	4619      	mov	r1, r3
 800a722:	4603      	mov	r3, r0
 800a724:	4642      	mov	r2, r8
 800a726:	189b      	adds	r3, r3, r2
 800a728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a72c:	464b      	mov	r3, r9
 800a72e:	460a      	mov	r2, r1
 800a730:	eb42 0303 	adc.w	r3, r2, r3
 800a734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a744:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a74c:	460b      	mov	r3, r1
 800a74e:	18db      	adds	r3, r3, r3
 800a750:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a752:	4613      	mov	r3, r2
 800a754:	eb42 0303 	adc.w	r3, r2, r3
 800a758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a75a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a75e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a762:	f7f6 fa91 	bl	8000c88 <__aeabi_uldivmod>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a0 <UART_SetConfig+0x2d4>)
 800a76c:	fba3 1302 	umull	r1, r3, r3, r2
 800a770:	095b      	lsrs	r3, r3, #5
 800a772:	2164      	movs	r1, #100	@ 0x64
 800a774:	fb01 f303 	mul.w	r3, r1, r3
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	3332      	adds	r3, #50	@ 0x32
 800a77e:	4a08      	ldr	r2, [pc, #32]	@ (800a7a0 <UART_SetConfig+0x2d4>)
 800a780:	fba2 2303 	umull	r2, r3, r2, r3
 800a784:	095b      	lsrs	r3, r3, #5
 800a786:	f003 0207 	and.w	r2, r3, #7
 800a78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4422      	add	r2, r4
 800a792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a794:	e106      	b.n	800a9a4 <UART_SetConfig+0x4d8>
 800a796:	bf00      	nop
 800a798:	40011000 	.word	0x40011000
 800a79c:	40011400 	.word	0x40011400
 800a7a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a7b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	1891      	adds	r1, r2, r2
 800a7bc:	6239      	str	r1, [r7, #32]
 800a7be:	415b      	adcs	r3, r3
 800a7c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7c6:	4641      	mov	r1, r8
 800a7c8:	1854      	adds	r4, r2, r1
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	eb43 0501 	adc.w	r5, r3, r1
 800a7d0:	f04f 0200 	mov.w	r2, #0
 800a7d4:	f04f 0300 	mov.w	r3, #0
 800a7d8:	00eb      	lsls	r3, r5, #3
 800a7da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a7de:	00e2      	lsls	r2, r4, #3
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	461d      	mov	r5, r3
 800a7e4:	4643      	mov	r3, r8
 800a7e6:	18e3      	adds	r3, r4, r3
 800a7e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a7ec:	464b      	mov	r3, r9
 800a7ee:	eb45 0303 	adc.w	r3, r5, r3
 800a7f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a802:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a806:	f04f 0200 	mov.w	r2, #0
 800a80a:	f04f 0300 	mov.w	r3, #0
 800a80e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a812:	4629      	mov	r1, r5
 800a814:	008b      	lsls	r3, r1, #2
 800a816:	4621      	mov	r1, r4
 800a818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a81c:	4621      	mov	r1, r4
 800a81e:	008a      	lsls	r2, r1, #2
 800a820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a824:	f7f6 fa30 	bl	8000c88 <__aeabi_uldivmod>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4b60      	ldr	r3, [pc, #384]	@ (800a9b0 <UART_SetConfig+0x4e4>)
 800a82e:	fba3 2302 	umull	r2, r3, r3, r2
 800a832:	095b      	lsrs	r3, r3, #5
 800a834:	011c      	lsls	r4, r3, #4
 800a836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a840:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	1891      	adds	r1, r2, r2
 800a84e:	61b9      	str	r1, [r7, #24]
 800a850:	415b      	adcs	r3, r3
 800a852:	61fb      	str	r3, [r7, #28]
 800a854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a858:	4641      	mov	r1, r8
 800a85a:	1851      	adds	r1, r2, r1
 800a85c:	6139      	str	r1, [r7, #16]
 800a85e:	4649      	mov	r1, r9
 800a860:	414b      	adcs	r3, r1
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	f04f 0200 	mov.w	r2, #0
 800a868:	f04f 0300 	mov.w	r3, #0
 800a86c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a870:	4659      	mov	r1, fp
 800a872:	00cb      	lsls	r3, r1, #3
 800a874:	4651      	mov	r1, sl
 800a876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a87a:	4651      	mov	r1, sl
 800a87c:	00ca      	lsls	r2, r1, #3
 800a87e:	4610      	mov	r0, r2
 800a880:	4619      	mov	r1, r3
 800a882:	4603      	mov	r3, r0
 800a884:	4642      	mov	r2, r8
 800a886:	189b      	adds	r3, r3, r2
 800a888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a88c:	464b      	mov	r3, r9
 800a88e:	460a      	mov	r2, r1
 800a890:	eb42 0303 	adc.w	r3, r2, r3
 800a894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8a4:	f04f 0200 	mov.w	r2, #0
 800a8a8:	f04f 0300 	mov.w	r3, #0
 800a8ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	008b      	lsls	r3, r1, #2
 800a8b4:	4641      	mov	r1, r8
 800a8b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8ba:	4641      	mov	r1, r8
 800a8bc:	008a      	lsls	r2, r1, #2
 800a8be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a8c2:	f7f6 f9e1 	bl	8000c88 <__aeabi_uldivmod>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4b38      	ldr	r3, [pc, #224]	@ (800a9b0 <UART_SetConfig+0x4e4>)
 800a8ce:	fba3 2301 	umull	r2, r3, r3, r1
 800a8d2:	095b      	lsrs	r3, r3, #5
 800a8d4:	2264      	movs	r2, #100	@ 0x64
 800a8d6:	fb02 f303 	mul.w	r3, r2, r3
 800a8da:	1acb      	subs	r3, r1, r3
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	3332      	adds	r3, #50	@ 0x32
 800a8e0:	4a33      	ldr	r2, [pc, #204]	@ (800a9b0 <UART_SetConfig+0x4e4>)
 800a8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e6:	095b      	lsrs	r3, r3, #5
 800a8e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8ec:	441c      	add	r4, r3
 800a8ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a8f6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a8f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	1891      	adds	r1, r2, r2
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	415b      	adcs	r3, r3
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a90c:	4641      	mov	r1, r8
 800a90e:	1851      	adds	r1, r2, r1
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	4649      	mov	r1, r9
 800a914:	414b      	adcs	r3, r1
 800a916:	607b      	str	r3, [r7, #4]
 800a918:	f04f 0200 	mov.w	r2, #0
 800a91c:	f04f 0300 	mov.w	r3, #0
 800a920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a924:	4659      	mov	r1, fp
 800a926:	00cb      	lsls	r3, r1, #3
 800a928:	4651      	mov	r1, sl
 800a92a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a92e:	4651      	mov	r1, sl
 800a930:	00ca      	lsls	r2, r1, #3
 800a932:	4610      	mov	r0, r2
 800a934:	4619      	mov	r1, r3
 800a936:	4603      	mov	r3, r0
 800a938:	4642      	mov	r2, r8
 800a93a:	189b      	adds	r3, r3, r2
 800a93c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a93e:	464b      	mov	r3, r9
 800a940:	460a      	mov	r2, r1
 800a942:	eb42 0303 	adc.w	r3, r2, r3
 800a946:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	663b      	str	r3, [r7, #96]	@ 0x60
 800a952:	667a      	str	r2, [r7, #100]	@ 0x64
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a960:	4649      	mov	r1, r9
 800a962:	008b      	lsls	r3, r1, #2
 800a964:	4641      	mov	r1, r8
 800a966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a96a:	4641      	mov	r1, r8
 800a96c:	008a      	lsls	r2, r1, #2
 800a96e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a972:	f7f6 f989 	bl	8000c88 <__aeabi_uldivmod>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b0 <UART_SetConfig+0x4e4>)
 800a97c:	fba3 1302 	umull	r1, r3, r3, r2
 800a980:	095b      	lsrs	r3, r3, #5
 800a982:	2164      	movs	r1, #100	@ 0x64
 800a984:	fb01 f303 	mul.w	r3, r1, r3
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	011b      	lsls	r3, r3, #4
 800a98c:	3332      	adds	r3, #50	@ 0x32
 800a98e:	4a08      	ldr	r2, [pc, #32]	@ (800a9b0 <UART_SetConfig+0x4e4>)
 800a990:	fba2 2303 	umull	r2, r3, r2, r3
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	f003 020f 	and.w	r2, r3, #15
 800a99a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4422      	add	r2, r4
 800a9a2:	609a      	str	r2, [r3, #8]
}
 800a9a4:	bf00      	nop
 800a9a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9b0:	51eb851f 	.word	0x51eb851f

0800a9b4 <atof>:
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	f000 be0d 	b.w	800b5d4 <strtod>

0800a9ba <atoi>:
 800a9ba:	220a      	movs	r2, #10
 800a9bc:	2100      	movs	r1, #0
 800a9be:	f000 be91 	b.w	800b6e4 <strtol>

0800a9c2 <sulp>:
 800a9c2:	b570      	push	{r4, r5, r6, lr}
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	460d      	mov	r5, r1
 800a9c8:	ec45 4b10 	vmov	d0, r4, r5
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	f003 fd5b 	bl	800e488 <__ulp>
 800a9d2:	ec51 0b10 	vmov	r0, r1, d0
 800a9d6:	b17e      	cbz	r6, 800a9f8 <sulp+0x36>
 800a9d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9dc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dd09      	ble.n	800a9f8 <sulp+0x36>
 800a9e4:	051b      	lsls	r3, r3, #20
 800a9e6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a9f0:	4622      	mov	r2, r4
 800a9f2:	462b      	mov	r3, r5
 800a9f4:	f7f5 fe00 	bl	80005f8 <__aeabi_dmul>
 800a9f8:	ec41 0b10 	vmov	d0, r0, r1
 800a9fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa00 <_strtod_l>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	b09f      	sub	sp, #124	@ 0x7c
 800aa06:	460c      	mov	r4, r1
 800aa08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa0e:	9005      	str	r0, [sp, #20]
 800aa10:	f04f 0a00 	mov.w	sl, #0
 800aa14:	f04f 0b00 	mov.w	fp, #0
 800aa18:	460a      	mov	r2, r1
 800aa1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa1c:	7811      	ldrb	r1, [r2, #0]
 800aa1e:	292b      	cmp	r1, #43	@ 0x2b
 800aa20:	d04a      	beq.n	800aab8 <_strtod_l+0xb8>
 800aa22:	d838      	bhi.n	800aa96 <_strtod_l+0x96>
 800aa24:	290d      	cmp	r1, #13
 800aa26:	d832      	bhi.n	800aa8e <_strtod_l+0x8e>
 800aa28:	2908      	cmp	r1, #8
 800aa2a:	d832      	bhi.n	800aa92 <_strtod_l+0x92>
 800aa2c:	2900      	cmp	r1, #0
 800aa2e:	d03b      	beq.n	800aaa8 <_strtod_l+0xa8>
 800aa30:	2200      	movs	r2, #0
 800aa32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aa34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aa36:	782a      	ldrb	r2, [r5, #0]
 800aa38:	2a30      	cmp	r2, #48	@ 0x30
 800aa3a:	f040 80b3 	bne.w	800aba4 <_strtod_l+0x1a4>
 800aa3e:	786a      	ldrb	r2, [r5, #1]
 800aa40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa44:	2a58      	cmp	r2, #88	@ 0x58
 800aa46:	d16e      	bne.n	800ab26 <_strtod_l+0x126>
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	4a8e      	ldr	r2, [pc, #568]	@ (800ac8c <_strtod_l+0x28c>)
 800aa54:	9805      	ldr	r0, [sp, #20]
 800aa56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa58:	a919      	add	r1, sp, #100	@ 0x64
 800aa5a:	f002 fe07 	bl	800d66c <__gethex>
 800aa5e:	f010 060f 	ands.w	r6, r0, #15
 800aa62:	4604      	mov	r4, r0
 800aa64:	d005      	beq.n	800aa72 <_strtod_l+0x72>
 800aa66:	2e06      	cmp	r6, #6
 800aa68:	d128      	bne.n	800aabc <_strtod_l+0xbc>
 800aa6a:	3501      	adds	r5, #1
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f040 858e 	bne.w	800b596 <_strtod_l+0xb96>
 800aa7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa7c:	b1cb      	cbz	r3, 800aab2 <_strtod_l+0xb2>
 800aa7e:	4652      	mov	r2, sl
 800aa80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aa84:	ec43 2b10 	vmov	d0, r2, r3
 800aa88:	b01f      	add	sp, #124	@ 0x7c
 800aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	2920      	cmp	r1, #32
 800aa90:	d1ce      	bne.n	800aa30 <_strtod_l+0x30>
 800aa92:	3201      	adds	r2, #1
 800aa94:	e7c1      	b.n	800aa1a <_strtod_l+0x1a>
 800aa96:	292d      	cmp	r1, #45	@ 0x2d
 800aa98:	d1ca      	bne.n	800aa30 <_strtod_l+0x30>
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa9e:	1c51      	adds	r1, r2, #1
 800aaa0:	9119      	str	r1, [sp, #100]	@ 0x64
 800aaa2:	7852      	ldrb	r2, [r2, #1]
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d1c5      	bne.n	800aa34 <_strtod_l+0x34>
 800aaa8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f040 8570 	bne.w	800b592 <_strtod_l+0xb92>
 800aab2:	4652      	mov	r2, sl
 800aab4:	465b      	mov	r3, fp
 800aab6:	e7e5      	b.n	800aa84 <_strtod_l+0x84>
 800aab8:	2100      	movs	r1, #0
 800aaba:	e7ef      	b.n	800aa9c <_strtod_l+0x9c>
 800aabc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aabe:	b13a      	cbz	r2, 800aad0 <_strtod_l+0xd0>
 800aac0:	2135      	movs	r1, #53	@ 0x35
 800aac2:	a81c      	add	r0, sp, #112	@ 0x70
 800aac4:	f003 fdda 	bl	800e67c <__copybits>
 800aac8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaca:	9805      	ldr	r0, [sp, #20]
 800aacc:	f003 f9a8 	bl	800de20 <_Bfree>
 800aad0:	3e01      	subs	r6, #1
 800aad2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aad4:	2e04      	cmp	r6, #4
 800aad6:	d806      	bhi.n	800aae6 <_strtod_l+0xe6>
 800aad8:	e8df f006 	tbb	[pc, r6]
 800aadc:	201d0314 	.word	0x201d0314
 800aae0:	14          	.byte	0x14
 800aae1:	00          	.byte	0x00
 800aae2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aae6:	05e1      	lsls	r1, r4, #23
 800aae8:	bf48      	it	mi
 800aaea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aaee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aaf2:	0d1b      	lsrs	r3, r3, #20
 800aaf4:	051b      	lsls	r3, r3, #20
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1bb      	bne.n	800aa72 <_strtod_l+0x72>
 800aafa:	f001 fe4f 	bl	800c79c <__errno>
 800aafe:	2322      	movs	r3, #34	@ 0x22
 800ab00:	6003      	str	r3, [r0, #0]
 800ab02:	e7b6      	b.n	800aa72 <_strtod_l+0x72>
 800ab04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab14:	e7e7      	b.n	800aae6 <_strtod_l+0xe6>
 800ab16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ac94 <_strtod_l+0x294>
 800ab1a:	e7e4      	b.n	800aae6 <_strtod_l+0xe6>
 800ab1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab20:	f04f 3aff 	mov.w	sl, #4294967295
 800ab24:	e7df      	b.n	800aae6 <_strtod_l+0xe6>
 800ab26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab28:	1c5a      	adds	r2, r3, #1
 800ab2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab2c:	785b      	ldrb	r3, [r3, #1]
 800ab2e:	2b30      	cmp	r3, #48	@ 0x30
 800ab30:	d0f9      	beq.n	800ab26 <_strtod_l+0x126>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d09d      	beq.n	800aa72 <_strtod_l+0x72>
 800ab36:	2301      	movs	r3, #1
 800ab38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab3e:	2300      	movs	r3, #0
 800ab40:	9308      	str	r3, [sp, #32]
 800ab42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab44:	461f      	mov	r7, r3
 800ab46:	220a      	movs	r2, #10
 800ab48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ab4a:	7805      	ldrb	r5, [r0, #0]
 800ab4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ab50:	b2d9      	uxtb	r1, r3
 800ab52:	2909      	cmp	r1, #9
 800ab54:	d928      	bls.n	800aba8 <_strtod_l+0x1a8>
 800ab56:	494e      	ldr	r1, [pc, #312]	@ (800ac90 <_strtod_l+0x290>)
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f001 fd66 	bl	800c62a <strncmp>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d032      	beq.n	800abc8 <_strtod_l+0x1c8>
 800ab62:	2000      	movs	r0, #0
 800ab64:	462a      	mov	r2, r5
 800ab66:	4681      	mov	r9, r0
 800ab68:	463d      	mov	r5, r7
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2a65      	cmp	r2, #101	@ 0x65
 800ab6e:	d001      	beq.n	800ab74 <_strtod_l+0x174>
 800ab70:	2a45      	cmp	r2, #69	@ 0x45
 800ab72:	d114      	bne.n	800ab9e <_strtod_l+0x19e>
 800ab74:	b91d      	cbnz	r5, 800ab7e <_strtod_l+0x17e>
 800ab76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab78:	4302      	orrs	r2, r0
 800ab7a:	d095      	beq.n	800aaa8 <_strtod_l+0xa8>
 800ab7c:	2500      	movs	r5, #0
 800ab7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab80:	1c62      	adds	r2, r4, #1
 800ab82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab84:	7862      	ldrb	r2, [r4, #1]
 800ab86:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab88:	d077      	beq.n	800ac7a <_strtod_l+0x27a>
 800ab8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab8c:	d07b      	beq.n	800ac86 <_strtod_l+0x286>
 800ab8e:	f04f 0c00 	mov.w	ip, #0
 800ab92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab96:	2909      	cmp	r1, #9
 800ab98:	f240 8082 	bls.w	800aca0 <_strtod_l+0x2a0>
 800ab9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	e0a2      	b.n	800acea <_strtod_l+0x2ea>
 800aba4:	2300      	movs	r3, #0
 800aba6:	e7c7      	b.n	800ab38 <_strtod_l+0x138>
 800aba8:	2f08      	cmp	r7, #8
 800abaa:	bfd5      	itete	le
 800abac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800abae:	9908      	ldrgt	r1, [sp, #32]
 800abb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800abb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800abb8:	f100 0001 	add.w	r0, r0, #1
 800abbc:	bfd4      	ite	le
 800abbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800abc0:	9308      	strgt	r3, [sp, #32]
 800abc2:	3701      	adds	r7, #1
 800abc4:	9019      	str	r0, [sp, #100]	@ 0x64
 800abc6:	e7bf      	b.n	800ab48 <_strtod_l+0x148>
 800abc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	9219      	str	r2, [sp, #100]	@ 0x64
 800abce:	785a      	ldrb	r2, [r3, #1]
 800abd0:	b37f      	cbz	r7, 800ac32 <_strtod_l+0x232>
 800abd2:	4681      	mov	r9, r0
 800abd4:	463d      	mov	r5, r7
 800abd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800abda:	2b09      	cmp	r3, #9
 800abdc:	d912      	bls.n	800ac04 <_strtod_l+0x204>
 800abde:	2301      	movs	r3, #1
 800abe0:	e7c4      	b.n	800ab6c <_strtod_l+0x16c>
 800abe2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	9219      	str	r2, [sp, #100]	@ 0x64
 800abe8:	785a      	ldrb	r2, [r3, #1]
 800abea:	3001      	adds	r0, #1
 800abec:	2a30      	cmp	r2, #48	@ 0x30
 800abee:	d0f8      	beq.n	800abe2 <_strtod_l+0x1e2>
 800abf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800abf4:	2b08      	cmp	r3, #8
 800abf6:	f200 84d3 	bhi.w	800b5a0 <_strtod_l+0xba0>
 800abfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800abfe:	4681      	mov	r9, r0
 800ac00:	2000      	movs	r0, #0
 800ac02:	4605      	mov	r5, r0
 800ac04:	3a30      	subs	r2, #48	@ 0x30
 800ac06:	f100 0301 	add.w	r3, r0, #1
 800ac0a:	d02a      	beq.n	800ac62 <_strtod_l+0x262>
 800ac0c:	4499      	add	r9, r3
 800ac0e:	eb00 0c05 	add.w	ip, r0, r5
 800ac12:	462b      	mov	r3, r5
 800ac14:	210a      	movs	r1, #10
 800ac16:	4563      	cmp	r3, ip
 800ac18:	d10d      	bne.n	800ac36 <_strtod_l+0x236>
 800ac1a:	1c69      	adds	r1, r5, #1
 800ac1c:	4401      	add	r1, r0
 800ac1e:	4428      	add	r0, r5
 800ac20:	2808      	cmp	r0, #8
 800ac22:	dc16      	bgt.n	800ac52 <_strtod_l+0x252>
 800ac24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac26:	230a      	movs	r3, #10
 800ac28:	fb03 2300 	mla	r3, r3, r0, r2
 800ac2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e018      	b.n	800ac64 <_strtod_l+0x264>
 800ac32:	4638      	mov	r0, r7
 800ac34:	e7da      	b.n	800abec <_strtod_l+0x1ec>
 800ac36:	2b08      	cmp	r3, #8
 800ac38:	f103 0301 	add.w	r3, r3, #1
 800ac3c:	dc03      	bgt.n	800ac46 <_strtod_l+0x246>
 800ac3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ac40:	434e      	muls	r6, r1
 800ac42:	960a      	str	r6, [sp, #40]	@ 0x28
 800ac44:	e7e7      	b.n	800ac16 <_strtod_l+0x216>
 800ac46:	2b10      	cmp	r3, #16
 800ac48:	bfde      	ittt	le
 800ac4a:	9e08      	ldrle	r6, [sp, #32]
 800ac4c:	434e      	mulle	r6, r1
 800ac4e:	9608      	strle	r6, [sp, #32]
 800ac50:	e7e1      	b.n	800ac16 <_strtod_l+0x216>
 800ac52:	280f      	cmp	r0, #15
 800ac54:	dceb      	bgt.n	800ac2e <_strtod_l+0x22e>
 800ac56:	9808      	ldr	r0, [sp, #32]
 800ac58:	230a      	movs	r3, #10
 800ac5a:	fb03 2300 	mla	r3, r3, r0, r2
 800ac5e:	9308      	str	r3, [sp, #32]
 800ac60:	e7e5      	b.n	800ac2e <_strtod_l+0x22e>
 800ac62:	4629      	mov	r1, r5
 800ac64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac66:	1c50      	adds	r0, r2, #1
 800ac68:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac6a:	7852      	ldrb	r2, [r2, #1]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	460d      	mov	r5, r1
 800ac70:	e7b1      	b.n	800abd6 <_strtod_l+0x1d6>
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	2301      	movs	r3, #1
 800ac78:	e77d      	b.n	800ab76 <_strtod_l+0x176>
 800ac7a:	f04f 0c00 	mov.w	ip, #0
 800ac7e:	1ca2      	adds	r2, r4, #2
 800ac80:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac82:	78a2      	ldrb	r2, [r4, #2]
 800ac84:	e785      	b.n	800ab92 <_strtod_l+0x192>
 800ac86:	f04f 0c01 	mov.w	ip, #1
 800ac8a:	e7f8      	b.n	800ac7e <_strtod_l+0x27e>
 800ac8c:	08011324 	.word	0x08011324
 800ac90:	0801130c 	.word	0x0801130c
 800ac94:	7ff00000 	.word	0x7ff00000
 800ac98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac9a:	1c51      	adds	r1, r2, #1
 800ac9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac9e:	7852      	ldrb	r2, [r2, #1]
 800aca0:	2a30      	cmp	r2, #48	@ 0x30
 800aca2:	d0f9      	beq.n	800ac98 <_strtod_l+0x298>
 800aca4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aca8:	2908      	cmp	r1, #8
 800acaa:	f63f af78 	bhi.w	800ab9e <_strtod_l+0x19e>
 800acae:	3a30      	subs	r2, #48	@ 0x30
 800acb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800acb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800acb6:	f04f 080a 	mov.w	r8, #10
 800acba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acbc:	1c56      	adds	r6, r2, #1
 800acbe:	9619      	str	r6, [sp, #100]	@ 0x64
 800acc0:	7852      	ldrb	r2, [r2, #1]
 800acc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800acc6:	f1be 0f09 	cmp.w	lr, #9
 800acca:	d939      	bls.n	800ad40 <_strtod_l+0x340>
 800accc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800acce:	1a76      	subs	r6, r6, r1
 800acd0:	2e08      	cmp	r6, #8
 800acd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800acd6:	dc03      	bgt.n	800ace0 <_strtod_l+0x2e0>
 800acd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acda:	4588      	cmp	r8, r1
 800acdc:	bfa8      	it	ge
 800acde:	4688      	movge	r8, r1
 800ace0:	f1bc 0f00 	cmp.w	ip, #0
 800ace4:	d001      	beq.n	800acea <_strtod_l+0x2ea>
 800ace6:	f1c8 0800 	rsb	r8, r8, #0
 800acea:	2d00      	cmp	r5, #0
 800acec:	d14e      	bne.n	800ad8c <_strtod_l+0x38c>
 800acee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acf0:	4308      	orrs	r0, r1
 800acf2:	f47f aebe 	bne.w	800aa72 <_strtod_l+0x72>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f47f aed6 	bne.w	800aaa8 <_strtod_l+0xa8>
 800acfc:	2a69      	cmp	r2, #105	@ 0x69
 800acfe:	d028      	beq.n	800ad52 <_strtod_l+0x352>
 800ad00:	dc25      	bgt.n	800ad4e <_strtod_l+0x34e>
 800ad02:	2a49      	cmp	r2, #73	@ 0x49
 800ad04:	d025      	beq.n	800ad52 <_strtod_l+0x352>
 800ad06:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad08:	f47f aece 	bne.w	800aaa8 <_strtod_l+0xa8>
 800ad0c:	499b      	ldr	r1, [pc, #620]	@ (800af7c <_strtod_l+0x57c>)
 800ad0e:	a819      	add	r0, sp, #100	@ 0x64
 800ad10:	f002 fece 	bl	800dab0 <__match>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f43f aec7 	beq.w	800aaa8 <_strtod_l+0xa8>
 800ad1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b28      	cmp	r3, #40	@ 0x28
 800ad20:	d12e      	bne.n	800ad80 <_strtod_l+0x380>
 800ad22:	4997      	ldr	r1, [pc, #604]	@ (800af80 <_strtod_l+0x580>)
 800ad24:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad26:	a819      	add	r0, sp, #100	@ 0x64
 800ad28:	f002 fed6 	bl	800dad8 <__hexnan>
 800ad2c:	2805      	cmp	r0, #5
 800ad2e:	d127      	bne.n	800ad80 <_strtod_l+0x380>
 800ad30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ad36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ad3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ad3e:	e698      	b.n	800aa72 <_strtod_l+0x72>
 800ad40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ad42:	fb08 2101 	mla	r1, r8, r1, r2
 800ad46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ad4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad4c:	e7b5      	b.n	800acba <_strtod_l+0x2ba>
 800ad4e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad50:	e7da      	b.n	800ad08 <_strtod_l+0x308>
 800ad52:	498c      	ldr	r1, [pc, #560]	@ (800af84 <_strtod_l+0x584>)
 800ad54:	a819      	add	r0, sp, #100	@ 0x64
 800ad56:	f002 feab 	bl	800dab0 <__match>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f43f aea4 	beq.w	800aaa8 <_strtod_l+0xa8>
 800ad60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad62:	4989      	ldr	r1, [pc, #548]	@ (800af88 <_strtod_l+0x588>)
 800ad64:	3b01      	subs	r3, #1
 800ad66:	a819      	add	r0, sp, #100	@ 0x64
 800ad68:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad6a:	f002 fea1 	bl	800dab0 <__match>
 800ad6e:	b910      	cbnz	r0, 800ad76 <_strtod_l+0x376>
 800ad70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad72:	3301      	adds	r3, #1
 800ad74:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800af98 <_strtod_l+0x598>
 800ad7a:	f04f 0a00 	mov.w	sl, #0
 800ad7e:	e678      	b.n	800aa72 <_strtod_l+0x72>
 800ad80:	4882      	ldr	r0, [pc, #520]	@ (800af8c <_strtod_l+0x58c>)
 800ad82:	f001 fd49 	bl	800c818 <nan>
 800ad86:	ec5b ab10 	vmov	sl, fp, d0
 800ad8a:	e672      	b.n	800aa72 <_strtod_l+0x72>
 800ad8c:	eba8 0309 	sub.w	r3, r8, r9
 800ad90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad94:	2f00      	cmp	r7, #0
 800ad96:	bf08      	it	eq
 800ad98:	462f      	moveq	r7, r5
 800ad9a:	2d10      	cmp	r5, #16
 800ad9c:	462c      	mov	r4, r5
 800ad9e:	bfa8      	it	ge
 800ada0:	2410      	movge	r4, #16
 800ada2:	f7f5 fbaf 	bl	8000504 <__aeabi_ui2d>
 800ada6:	2d09      	cmp	r5, #9
 800ada8:	4682      	mov	sl, r0
 800adaa:	468b      	mov	fp, r1
 800adac:	dc13      	bgt.n	800add6 <_strtod_l+0x3d6>
 800adae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f43f ae5e 	beq.w	800aa72 <_strtod_l+0x72>
 800adb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb8:	dd78      	ble.n	800aeac <_strtod_l+0x4ac>
 800adba:	2b16      	cmp	r3, #22
 800adbc:	dc5f      	bgt.n	800ae7e <_strtod_l+0x47e>
 800adbe:	4974      	ldr	r1, [pc, #464]	@ (800af90 <_strtod_l+0x590>)
 800adc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc8:	4652      	mov	r2, sl
 800adca:	465b      	mov	r3, fp
 800adcc:	f7f5 fc14 	bl	80005f8 <__aeabi_dmul>
 800add0:	4682      	mov	sl, r0
 800add2:	468b      	mov	fp, r1
 800add4:	e64d      	b.n	800aa72 <_strtod_l+0x72>
 800add6:	4b6e      	ldr	r3, [pc, #440]	@ (800af90 <_strtod_l+0x590>)
 800add8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800addc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ade0:	f7f5 fc0a 	bl	80005f8 <__aeabi_dmul>
 800ade4:	4682      	mov	sl, r0
 800ade6:	9808      	ldr	r0, [sp, #32]
 800ade8:	468b      	mov	fp, r1
 800adea:	f7f5 fb8b 	bl	8000504 <__aeabi_ui2d>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4650      	mov	r0, sl
 800adf4:	4659      	mov	r1, fp
 800adf6:	f7f5 fa49 	bl	800028c <__adddf3>
 800adfa:	2d0f      	cmp	r5, #15
 800adfc:	4682      	mov	sl, r0
 800adfe:	468b      	mov	fp, r1
 800ae00:	ddd5      	ble.n	800adae <_strtod_l+0x3ae>
 800ae02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae04:	1b2c      	subs	r4, r5, r4
 800ae06:	441c      	add	r4, r3
 800ae08:	2c00      	cmp	r4, #0
 800ae0a:	f340 8096 	ble.w	800af3a <_strtod_l+0x53a>
 800ae0e:	f014 030f 	ands.w	r3, r4, #15
 800ae12:	d00a      	beq.n	800ae2a <_strtod_l+0x42a>
 800ae14:	495e      	ldr	r1, [pc, #376]	@ (800af90 <_strtod_l+0x590>)
 800ae16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae1a:	4652      	mov	r2, sl
 800ae1c:	465b      	mov	r3, fp
 800ae1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae22:	f7f5 fbe9 	bl	80005f8 <__aeabi_dmul>
 800ae26:	4682      	mov	sl, r0
 800ae28:	468b      	mov	fp, r1
 800ae2a:	f034 040f 	bics.w	r4, r4, #15
 800ae2e:	d073      	beq.n	800af18 <_strtod_l+0x518>
 800ae30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ae34:	dd48      	ble.n	800aec8 <_strtod_l+0x4c8>
 800ae36:	2400      	movs	r4, #0
 800ae38:	46a0      	mov	r8, r4
 800ae3a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae3c:	46a1      	mov	r9, r4
 800ae3e:	9a05      	ldr	r2, [sp, #20]
 800ae40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800af98 <_strtod_l+0x598>
 800ae44:	2322      	movs	r3, #34	@ 0x22
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	f04f 0a00 	mov.w	sl, #0
 800ae4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f43f ae0f 	beq.w	800aa72 <_strtod_l+0x72>
 800ae54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae56:	9805      	ldr	r0, [sp, #20]
 800ae58:	f002 ffe2 	bl	800de20 <_Bfree>
 800ae5c:	9805      	ldr	r0, [sp, #20]
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f002 ffde 	bl	800de20 <_Bfree>
 800ae64:	9805      	ldr	r0, [sp, #20]
 800ae66:	4641      	mov	r1, r8
 800ae68:	f002 ffda 	bl	800de20 <_Bfree>
 800ae6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae6e:	9805      	ldr	r0, [sp, #20]
 800ae70:	f002 ffd6 	bl	800de20 <_Bfree>
 800ae74:	9805      	ldr	r0, [sp, #20]
 800ae76:	4621      	mov	r1, r4
 800ae78:	f002 ffd2 	bl	800de20 <_Bfree>
 800ae7c:	e5f9      	b.n	800aa72 <_strtod_l+0x72>
 800ae7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae84:	4293      	cmp	r3, r2
 800ae86:	dbbc      	blt.n	800ae02 <_strtod_l+0x402>
 800ae88:	4c41      	ldr	r4, [pc, #260]	@ (800af90 <_strtod_l+0x590>)
 800ae8a:	f1c5 050f 	rsb	r5, r5, #15
 800ae8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae92:	4652      	mov	r2, sl
 800ae94:	465b      	mov	r3, fp
 800ae96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae9a:	f7f5 fbad 	bl	80005f8 <__aeabi_dmul>
 800ae9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea0:	1b5d      	subs	r5, r3, r5
 800aea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aeaa:	e78f      	b.n	800adcc <_strtod_l+0x3cc>
 800aeac:	3316      	adds	r3, #22
 800aeae:	dba8      	blt.n	800ae02 <_strtod_l+0x402>
 800aeb0:	4b37      	ldr	r3, [pc, #220]	@ (800af90 <_strtod_l+0x590>)
 800aeb2:	eba9 0808 	sub.w	r8, r9, r8
 800aeb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aeba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aebe:	4650      	mov	r0, sl
 800aec0:	4659      	mov	r1, fp
 800aec2:	f7f5 fcc3 	bl	800084c <__aeabi_ddiv>
 800aec6:	e783      	b.n	800add0 <_strtod_l+0x3d0>
 800aec8:	4b32      	ldr	r3, [pc, #200]	@ (800af94 <_strtod_l+0x594>)
 800aeca:	9308      	str	r3, [sp, #32]
 800aecc:	2300      	movs	r3, #0
 800aece:	1124      	asrs	r4, r4, #4
 800aed0:	4650      	mov	r0, sl
 800aed2:	4659      	mov	r1, fp
 800aed4:	461e      	mov	r6, r3
 800aed6:	2c01      	cmp	r4, #1
 800aed8:	dc21      	bgt.n	800af1e <_strtod_l+0x51e>
 800aeda:	b10b      	cbz	r3, 800aee0 <_strtod_l+0x4e0>
 800aedc:	4682      	mov	sl, r0
 800aede:	468b      	mov	fp, r1
 800aee0:	492c      	ldr	r1, [pc, #176]	@ (800af94 <_strtod_l+0x594>)
 800aee2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aee6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aeea:	4652      	mov	r2, sl
 800aeec:	465b      	mov	r3, fp
 800aeee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef2:	f7f5 fb81 	bl	80005f8 <__aeabi_dmul>
 800aef6:	4b28      	ldr	r3, [pc, #160]	@ (800af98 <_strtod_l+0x598>)
 800aef8:	460a      	mov	r2, r1
 800aefa:	400b      	ands	r3, r1
 800aefc:	4927      	ldr	r1, [pc, #156]	@ (800af9c <_strtod_l+0x59c>)
 800aefe:	428b      	cmp	r3, r1
 800af00:	4682      	mov	sl, r0
 800af02:	d898      	bhi.n	800ae36 <_strtod_l+0x436>
 800af04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af08:	428b      	cmp	r3, r1
 800af0a:	bf86      	itte	hi
 800af0c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800afa0 <_strtod_l+0x5a0>
 800af10:	f04f 3aff 	movhi.w	sl, #4294967295
 800af14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af18:	2300      	movs	r3, #0
 800af1a:	9308      	str	r3, [sp, #32]
 800af1c:	e07a      	b.n	800b014 <_strtod_l+0x614>
 800af1e:	07e2      	lsls	r2, r4, #31
 800af20:	d505      	bpl.n	800af2e <_strtod_l+0x52e>
 800af22:	9b08      	ldr	r3, [sp, #32]
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 fb66 	bl	80005f8 <__aeabi_dmul>
 800af2c:	2301      	movs	r3, #1
 800af2e:	9a08      	ldr	r2, [sp, #32]
 800af30:	3208      	adds	r2, #8
 800af32:	3601      	adds	r6, #1
 800af34:	1064      	asrs	r4, r4, #1
 800af36:	9208      	str	r2, [sp, #32]
 800af38:	e7cd      	b.n	800aed6 <_strtod_l+0x4d6>
 800af3a:	d0ed      	beq.n	800af18 <_strtod_l+0x518>
 800af3c:	4264      	negs	r4, r4
 800af3e:	f014 020f 	ands.w	r2, r4, #15
 800af42:	d00a      	beq.n	800af5a <_strtod_l+0x55a>
 800af44:	4b12      	ldr	r3, [pc, #72]	@ (800af90 <_strtod_l+0x590>)
 800af46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af4a:	4650      	mov	r0, sl
 800af4c:	4659      	mov	r1, fp
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 fc7b 	bl	800084c <__aeabi_ddiv>
 800af56:	4682      	mov	sl, r0
 800af58:	468b      	mov	fp, r1
 800af5a:	1124      	asrs	r4, r4, #4
 800af5c:	d0dc      	beq.n	800af18 <_strtod_l+0x518>
 800af5e:	2c1f      	cmp	r4, #31
 800af60:	dd20      	ble.n	800afa4 <_strtod_l+0x5a4>
 800af62:	2400      	movs	r4, #0
 800af64:	46a0      	mov	r8, r4
 800af66:	940a      	str	r4, [sp, #40]	@ 0x28
 800af68:	46a1      	mov	r9, r4
 800af6a:	9a05      	ldr	r2, [sp, #20]
 800af6c:	2322      	movs	r3, #34	@ 0x22
 800af6e:	f04f 0a00 	mov.w	sl, #0
 800af72:	f04f 0b00 	mov.w	fp, #0
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	e768      	b.n	800ae4c <_strtod_l+0x44c>
 800af7a:	bf00      	nop
 800af7c:	0801146e 	.word	0x0801146e
 800af80:	08011310 	.word	0x08011310
 800af84:	08011466 	.word	0x08011466
 800af88:	08011552 	.word	0x08011552
 800af8c:	0801154e 	.word	0x0801154e
 800af90:	080116b8 	.word	0x080116b8
 800af94:	08011690 	.word	0x08011690
 800af98:	7ff00000 	.word	0x7ff00000
 800af9c:	7ca00000 	.word	0x7ca00000
 800afa0:	7fefffff 	.word	0x7fefffff
 800afa4:	f014 0310 	ands.w	r3, r4, #16
 800afa8:	bf18      	it	ne
 800afaa:	236a      	movne	r3, #106	@ 0x6a
 800afac:	4ea9      	ldr	r6, [pc, #676]	@ (800b254 <_strtod_l+0x854>)
 800afae:	9308      	str	r3, [sp, #32]
 800afb0:	4650      	mov	r0, sl
 800afb2:	4659      	mov	r1, fp
 800afb4:	2300      	movs	r3, #0
 800afb6:	07e2      	lsls	r2, r4, #31
 800afb8:	d504      	bpl.n	800afc4 <_strtod_l+0x5c4>
 800afba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afbe:	f7f5 fb1b 	bl	80005f8 <__aeabi_dmul>
 800afc2:	2301      	movs	r3, #1
 800afc4:	1064      	asrs	r4, r4, #1
 800afc6:	f106 0608 	add.w	r6, r6, #8
 800afca:	d1f4      	bne.n	800afb6 <_strtod_l+0x5b6>
 800afcc:	b10b      	cbz	r3, 800afd2 <_strtod_l+0x5d2>
 800afce:	4682      	mov	sl, r0
 800afd0:	468b      	mov	fp, r1
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	b1b3      	cbz	r3, 800b004 <_strtod_l+0x604>
 800afd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800afda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800afde:	2b00      	cmp	r3, #0
 800afe0:	4659      	mov	r1, fp
 800afe2:	dd0f      	ble.n	800b004 <_strtod_l+0x604>
 800afe4:	2b1f      	cmp	r3, #31
 800afe6:	dd55      	ble.n	800b094 <_strtod_l+0x694>
 800afe8:	2b34      	cmp	r3, #52	@ 0x34
 800afea:	bfde      	ittt	le
 800afec:	f04f 33ff 	movle.w	r3, #4294967295
 800aff0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aff4:	4093      	lslle	r3, r2
 800aff6:	f04f 0a00 	mov.w	sl, #0
 800affa:	bfcc      	ite	gt
 800affc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b000:	ea03 0b01 	andle.w	fp, r3, r1
 800b004:	2200      	movs	r2, #0
 800b006:	2300      	movs	r3, #0
 800b008:	4650      	mov	r0, sl
 800b00a:	4659      	mov	r1, fp
 800b00c:	f7f5 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b010:	2800      	cmp	r0, #0
 800b012:	d1a6      	bne.n	800af62 <_strtod_l+0x562>
 800b014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b01a:	9805      	ldr	r0, [sp, #20]
 800b01c:	462b      	mov	r3, r5
 800b01e:	463a      	mov	r2, r7
 800b020:	f002 ff66 	bl	800def0 <__s2b>
 800b024:	900a      	str	r0, [sp, #40]	@ 0x28
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f af05 	beq.w	800ae36 <_strtod_l+0x436>
 800b02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b02e:	2a00      	cmp	r2, #0
 800b030:	eba9 0308 	sub.w	r3, r9, r8
 800b034:	bfa8      	it	ge
 800b036:	2300      	movge	r3, #0
 800b038:	9312      	str	r3, [sp, #72]	@ 0x48
 800b03a:	2400      	movs	r4, #0
 800b03c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b040:	9316      	str	r3, [sp, #88]	@ 0x58
 800b042:	46a0      	mov	r8, r4
 800b044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b046:	9805      	ldr	r0, [sp, #20]
 800b048:	6859      	ldr	r1, [r3, #4]
 800b04a:	f002 fea9 	bl	800dda0 <_Balloc>
 800b04e:	4681      	mov	r9, r0
 800b050:	2800      	cmp	r0, #0
 800b052:	f43f aef4 	beq.w	800ae3e <_strtod_l+0x43e>
 800b056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b058:	691a      	ldr	r2, [r3, #16]
 800b05a:	3202      	adds	r2, #2
 800b05c:	f103 010c 	add.w	r1, r3, #12
 800b060:	0092      	lsls	r2, r2, #2
 800b062:	300c      	adds	r0, #12
 800b064:	f001 fbc7 	bl	800c7f6 <memcpy>
 800b068:	ec4b ab10 	vmov	d0, sl, fp
 800b06c:	9805      	ldr	r0, [sp, #20]
 800b06e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b070:	a91b      	add	r1, sp, #108	@ 0x6c
 800b072:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b076:	f003 fa77 	bl	800e568 <__d2b>
 800b07a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b07c:	2800      	cmp	r0, #0
 800b07e:	f43f aede 	beq.w	800ae3e <_strtod_l+0x43e>
 800b082:	9805      	ldr	r0, [sp, #20]
 800b084:	2101      	movs	r1, #1
 800b086:	f002 ffc9 	bl	800e01c <__i2b>
 800b08a:	4680      	mov	r8, r0
 800b08c:	b948      	cbnz	r0, 800b0a2 <_strtod_l+0x6a2>
 800b08e:	f04f 0800 	mov.w	r8, #0
 800b092:	e6d4      	b.n	800ae3e <_strtod_l+0x43e>
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	fa02 f303 	lsl.w	r3, r2, r3
 800b09c:	ea03 0a0a 	and.w	sl, r3, sl
 800b0a0:	e7b0      	b.n	800b004 <_strtod_l+0x604>
 800b0a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b0a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b0a6:	2d00      	cmp	r5, #0
 800b0a8:	bfab      	itete	ge
 800b0aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b0ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b0ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b0b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b0b2:	bfac      	ite	ge
 800b0b4:	18ef      	addge	r7, r5, r3
 800b0b6:	1b5e      	sublt	r6, r3, r5
 800b0b8:	9b08      	ldr	r3, [sp, #32]
 800b0ba:	1aed      	subs	r5, r5, r3
 800b0bc:	4415      	add	r5, r2
 800b0be:	4b66      	ldr	r3, [pc, #408]	@ (800b258 <_strtod_l+0x858>)
 800b0c0:	3d01      	subs	r5, #1
 800b0c2:	429d      	cmp	r5, r3
 800b0c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b0c8:	da50      	bge.n	800b16c <_strtod_l+0x76c>
 800b0ca:	1b5b      	subs	r3, r3, r5
 800b0cc:	2b1f      	cmp	r3, #31
 800b0ce:	eba2 0203 	sub.w	r2, r2, r3
 800b0d2:	f04f 0101 	mov.w	r1, #1
 800b0d6:	dc3d      	bgt.n	800b154 <_strtod_l+0x754>
 800b0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0e2:	18bd      	adds	r5, r7, r2
 800b0e4:	9b08      	ldr	r3, [sp, #32]
 800b0e6:	42af      	cmp	r7, r5
 800b0e8:	4416      	add	r6, r2
 800b0ea:	441e      	add	r6, r3
 800b0ec:	463b      	mov	r3, r7
 800b0ee:	bfa8      	it	ge
 800b0f0:	462b      	movge	r3, r5
 800b0f2:	42b3      	cmp	r3, r6
 800b0f4:	bfa8      	it	ge
 800b0f6:	4633      	movge	r3, r6
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bfc2      	ittt	gt
 800b0fc:	1aed      	subgt	r5, r5, r3
 800b0fe:	1af6      	subgt	r6, r6, r3
 800b100:	1aff      	subgt	r7, r7, r3
 800b102:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd16      	ble.n	800b136 <_strtod_l+0x736>
 800b108:	4641      	mov	r1, r8
 800b10a:	9805      	ldr	r0, [sp, #20]
 800b10c:	461a      	mov	r2, r3
 800b10e:	f003 f845 	bl	800e19c <__pow5mult>
 800b112:	4680      	mov	r8, r0
 800b114:	2800      	cmp	r0, #0
 800b116:	d0ba      	beq.n	800b08e <_strtod_l+0x68e>
 800b118:	4601      	mov	r1, r0
 800b11a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b11c:	9805      	ldr	r0, [sp, #20]
 800b11e:	f002 ff93 	bl	800e048 <__multiply>
 800b122:	900e      	str	r0, [sp, #56]	@ 0x38
 800b124:	2800      	cmp	r0, #0
 800b126:	f43f ae8a 	beq.w	800ae3e <_strtod_l+0x43e>
 800b12a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b12c:	9805      	ldr	r0, [sp, #20]
 800b12e:	f002 fe77 	bl	800de20 <_Bfree>
 800b132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b134:	931a      	str	r3, [sp, #104]	@ 0x68
 800b136:	2d00      	cmp	r5, #0
 800b138:	dc1d      	bgt.n	800b176 <_strtod_l+0x776>
 800b13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dd23      	ble.n	800b188 <_strtod_l+0x788>
 800b140:	4649      	mov	r1, r9
 800b142:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b144:	9805      	ldr	r0, [sp, #20]
 800b146:	f003 f829 	bl	800e19c <__pow5mult>
 800b14a:	4681      	mov	r9, r0
 800b14c:	b9e0      	cbnz	r0, 800b188 <_strtod_l+0x788>
 800b14e:	f04f 0900 	mov.w	r9, #0
 800b152:	e674      	b.n	800ae3e <_strtod_l+0x43e>
 800b154:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b158:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b15c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b160:	35e2      	adds	r5, #226	@ 0xe2
 800b162:	fa01 f305 	lsl.w	r3, r1, r5
 800b166:	9310      	str	r3, [sp, #64]	@ 0x40
 800b168:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b16a:	e7ba      	b.n	800b0e2 <_strtod_l+0x6e2>
 800b16c:	2300      	movs	r3, #0
 800b16e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b170:	2301      	movs	r3, #1
 800b172:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b174:	e7b5      	b.n	800b0e2 <_strtod_l+0x6e2>
 800b176:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b178:	9805      	ldr	r0, [sp, #20]
 800b17a:	462a      	mov	r2, r5
 800b17c:	f003 f868 	bl	800e250 <__lshift>
 800b180:	901a      	str	r0, [sp, #104]	@ 0x68
 800b182:	2800      	cmp	r0, #0
 800b184:	d1d9      	bne.n	800b13a <_strtod_l+0x73a>
 800b186:	e65a      	b.n	800ae3e <_strtod_l+0x43e>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	dd07      	ble.n	800b19c <_strtod_l+0x79c>
 800b18c:	4649      	mov	r1, r9
 800b18e:	9805      	ldr	r0, [sp, #20]
 800b190:	4632      	mov	r2, r6
 800b192:	f003 f85d 	bl	800e250 <__lshift>
 800b196:	4681      	mov	r9, r0
 800b198:	2800      	cmp	r0, #0
 800b19a:	d0d8      	beq.n	800b14e <_strtod_l+0x74e>
 800b19c:	2f00      	cmp	r7, #0
 800b19e:	dd08      	ble.n	800b1b2 <_strtod_l+0x7b2>
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	9805      	ldr	r0, [sp, #20]
 800b1a4:	463a      	mov	r2, r7
 800b1a6:	f003 f853 	bl	800e250 <__lshift>
 800b1aa:	4680      	mov	r8, r0
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f43f ae46 	beq.w	800ae3e <_strtod_l+0x43e>
 800b1b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1b4:	9805      	ldr	r0, [sp, #20]
 800b1b6:	464a      	mov	r2, r9
 800b1b8:	f003 f8d2 	bl	800e360 <__mdiff>
 800b1bc:	4604      	mov	r4, r0
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f43f ae3d 	beq.w	800ae3e <_strtod_l+0x43e>
 800b1c4:	68c3      	ldr	r3, [r0, #12]
 800b1c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60c3      	str	r3, [r0, #12]
 800b1cc:	4641      	mov	r1, r8
 800b1ce:	f003 f8ab 	bl	800e328 <__mcmp>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	da46      	bge.n	800b264 <_strtod_l+0x864>
 800b1d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1d8:	ea53 030a 	orrs.w	r3, r3, sl
 800b1dc:	d16c      	bne.n	800b2b8 <_strtod_l+0x8b8>
 800b1de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d168      	bne.n	800b2b8 <_strtod_l+0x8b8>
 800b1e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1ea:	0d1b      	lsrs	r3, r3, #20
 800b1ec:	051b      	lsls	r3, r3, #20
 800b1ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1f2:	d961      	bls.n	800b2b8 <_strtod_l+0x8b8>
 800b1f4:	6963      	ldr	r3, [r4, #20]
 800b1f6:	b913      	cbnz	r3, 800b1fe <_strtod_l+0x7fe>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	dd5c      	ble.n	800b2b8 <_strtod_l+0x8b8>
 800b1fe:	4621      	mov	r1, r4
 800b200:	2201      	movs	r2, #1
 800b202:	9805      	ldr	r0, [sp, #20]
 800b204:	f003 f824 	bl	800e250 <__lshift>
 800b208:	4641      	mov	r1, r8
 800b20a:	4604      	mov	r4, r0
 800b20c:	f003 f88c 	bl	800e328 <__mcmp>
 800b210:	2800      	cmp	r0, #0
 800b212:	dd51      	ble.n	800b2b8 <_strtod_l+0x8b8>
 800b214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b218:	9a08      	ldr	r2, [sp, #32]
 800b21a:	0d1b      	lsrs	r3, r3, #20
 800b21c:	051b      	lsls	r3, r3, #20
 800b21e:	2a00      	cmp	r2, #0
 800b220:	d06b      	beq.n	800b2fa <_strtod_l+0x8fa>
 800b222:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b226:	d868      	bhi.n	800b2fa <_strtod_l+0x8fa>
 800b228:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b22c:	f67f ae9d 	bls.w	800af6a <_strtod_l+0x56a>
 800b230:	4b0a      	ldr	r3, [pc, #40]	@ (800b25c <_strtod_l+0x85c>)
 800b232:	4650      	mov	r0, sl
 800b234:	4659      	mov	r1, fp
 800b236:	2200      	movs	r2, #0
 800b238:	f7f5 f9de 	bl	80005f8 <__aeabi_dmul>
 800b23c:	4b08      	ldr	r3, [pc, #32]	@ (800b260 <_strtod_l+0x860>)
 800b23e:	400b      	ands	r3, r1
 800b240:	4682      	mov	sl, r0
 800b242:	468b      	mov	fp, r1
 800b244:	2b00      	cmp	r3, #0
 800b246:	f47f ae05 	bne.w	800ae54 <_strtod_l+0x454>
 800b24a:	9a05      	ldr	r2, [sp, #20]
 800b24c:	2322      	movs	r3, #34	@ 0x22
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	e600      	b.n	800ae54 <_strtod_l+0x454>
 800b252:	bf00      	nop
 800b254:	08011338 	.word	0x08011338
 800b258:	fffffc02 	.word	0xfffffc02
 800b25c:	39500000 	.word	0x39500000
 800b260:	7ff00000 	.word	0x7ff00000
 800b264:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b268:	d165      	bne.n	800b336 <_strtod_l+0x936>
 800b26a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b26c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b270:	b35a      	cbz	r2, 800b2ca <_strtod_l+0x8ca>
 800b272:	4a9f      	ldr	r2, [pc, #636]	@ (800b4f0 <_strtod_l+0xaf0>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d12b      	bne.n	800b2d0 <_strtod_l+0x8d0>
 800b278:	9b08      	ldr	r3, [sp, #32]
 800b27a:	4651      	mov	r1, sl
 800b27c:	b303      	cbz	r3, 800b2c0 <_strtod_l+0x8c0>
 800b27e:	4b9d      	ldr	r3, [pc, #628]	@ (800b4f4 <_strtod_l+0xaf4>)
 800b280:	465a      	mov	r2, fp
 800b282:	4013      	ands	r3, r2
 800b284:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b288:	f04f 32ff 	mov.w	r2, #4294967295
 800b28c:	d81b      	bhi.n	800b2c6 <_strtod_l+0x8c6>
 800b28e:	0d1b      	lsrs	r3, r3, #20
 800b290:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b294:	fa02 f303 	lsl.w	r3, r2, r3
 800b298:	4299      	cmp	r1, r3
 800b29a:	d119      	bne.n	800b2d0 <_strtod_l+0x8d0>
 800b29c:	4b96      	ldr	r3, [pc, #600]	@ (800b4f8 <_strtod_l+0xaf8>)
 800b29e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d102      	bne.n	800b2aa <_strtod_l+0x8aa>
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	f43f adca 	beq.w	800ae3e <_strtod_l+0x43e>
 800b2aa:	4b92      	ldr	r3, [pc, #584]	@ (800b4f4 <_strtod_l+0xaf4>)
 800b2ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2ae:	401a      	ands	r2, r3
 800b2b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b2b4:	f04f 0a00 	mov.w	sl, #0
 800b2b8:	9b08      	ldr	r3, [sp, #32]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1b8      	bne.n	800b230 <_strtod_l+0x830>
 800b2be:	e5c9      	b.n	800ae54 <_strtod_l+0x454>
 800b2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c4:	e7e8      	b.n	800b298 <_strtod_l+0x898>
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	e7e6      	b.n	800b298 <_strtod_l+0x898>
 800b2ca:	ea53 030a 	orrs.w	r3, r3, sl
 800b2ce:	d0a1      	beq.n	800b214 <_strtod_l+0x814>
 800b2d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2d2:	b1db      	cbz	r3, 800b30c <_strtod_l+0x90c>
 800b2d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2d6:	4213      	tst	r3, r2
 800b2d8:	d0ee      	beq.n	800b2b8 <_strtod_l+0x8b8>
 800b2da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2dc:	9a08      	ldr	r2, [sp, #32]
 800b2de:	4650      	mov	r0, sl
 800b2e0:	4659      	mov	r1, fp
 800b2e2:	b1bb      	cbz	r3, 800b314 <_strtod_l+0x914>
 800b2e4:	f7ff fb6d 	bl	800a9c2 <sulp>
 800b2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ec:	ec53 2b10 	vmov	r2, r3, d0
 800b2f0:	f7f4 ffcc 	bl	800028c <__adddf3>
 800b2f4:	4682      	mov	sl, r0
 800b2f6:	468b      	mov	fp, r1
 800b2f8:	e7de      	b.n	800b2b8 <_strtod_l+0x8b8>
 800b2fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b2fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b302:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b306:	f04f 3aff 	mov.w	sl, #4294967295
 800b30a:	e7d5      	b.n	800b2b8 <_strtod_l+0x8b8>
 800b30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b30e:	ea13 0f0a 	tst.w	r3, sl
 800b312:	e7e1      	b.n	800b2d8 <_strtod_l+0x8d8>
 800b314:	f7ff fb55 	bl	800a9c2 <sulp>
 800b318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b31c:	ec53 2b10 	vmov	r2, r3, d0
 800b320:	f7f4 ffb2 	bl	8000288 <__aeabi_dsub>
 800b324:	2200      	movs	r2, #0
 800b326:	2300      	movs	r3, #0
 800b328:	4682      	mov	sl, r0
 800b32a:	468b      	mov	fp, r1
 800b32c:	f7f5 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b330:	2800      	cmp	r0, #0
 800b332:	d0c1      	beq.n	800b2b8 <_strtod_l+0x8b8>
 800b334:	e619      	b.n	800af6a <_strtod_l+0x56a>
 800b336:	4641      	mov	r1, r8
 800b338:	4620      	mov	r0, r4
 800b33a:	f003 f96d 	bl	800e618 <__ratio>
 800b33e:	ec57 6b10 	vmov	r6, r7, d0
 800b342:	2200      	movs	r2, #0
 800b344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f5 fbd0 	bl	8000af0 <__aeabi_dcmple>
 800b350:	2800      	cmp	r0, #0
 800b352:	d06f      	beq.n	800b434 <_strtod_l+0xa34>
 800b354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d17a      	bne.n	800b450 <_strtod_l+0xa50>
 800b35a:	f1ba 0f00 	cmp.w	sl, #0
 800b35e:	d158      	bne.n	800b412 <_strtod_l+0xa12>
 800b360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b366:	2b00      	cmp	r3, #0
 800b368:	d15a      	bne.n	800b420 <_strtod_l+0xa20>
 800b36a:	4b64      	ldr	r3, [pc, #400]	@ (800b4fc <_strtod_l+0xafc>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	4630      	mov	r0, r6
 800b370:	4639      	mov	r1, r7
 800b372:	f7f5 fbb3 	bl	8000adc <__aeabi_dcmplt>
 800b376:	2800      	cmp	r0, #0
 800b378:	d159      	bne.n	800b42e <_strtod_l+0xa2e>
 800b37a:	4630      	mov	r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	4b60      	ldr	r3, [pc, #384]	@ (800b500 <_strtod_l+0xb00>)
 800b380:	2200      	movs	r2, #0
 800b382:	f7f5 f939 	bl	80005f8 <__aeabi_dmul>
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b38e:	9606      	str	r6, [sp, #24]
 800b390:	9307      	str	r3, [sp, #28]
 800b392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b396:	4d57      	ldr	r5, [pc, #348]	@ (800b4f4 <_strtod_l+0xaf4>)
 800b398:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b39e:	401d      	ands	r5, r3
 800b3a0:	4b58      	ldr	r3, [pc, #352]	@ (800b504 <_strtod_l+0xb04>)
 800b3a2:	429d      	cmp	r5, r3
 800b3a4:	f040 80b2 	bne.w	800b50c <_strtod_l+0xb0c>
 800b3a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b3ae:	ec4b ab10 	vmov	d0, sl, fp
 800b3b2:	f003 f869 	bl	800e488 <__ulp>
 800b3b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3ba:	ec51 0b10 	vmov	r0, r1, d0
 800b3be:	f7f5 f91b 	bl	80005f8 <__aeabi_dmul>
 800b3c2:	4652      	mov	r2, sl
 800b3c4:	465b      	mov	r3, fp
 800b3c6:	f7f4 ff61 	bl	800028c <__adddf3>
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4949      	ldr	r1, [pc, #292]	@ (800b4f4 <_strtod_l+0xaf4>)
 800b3ce:	4a4e      	ldr	r2, [pc, #312]	@ (800b508 <_strtod_l+0xb08>)
 800b3d0:	4019      	ands	r1, r3
 800b3d2:	4291      	cmp	r1, r2
 800b3d4:	4682      	mov	sl, r0
 800b3d6:	d942      	bls.n	800b45e <_strtod_l+0xa5e>
 800b3d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3da:	4b47      	ldr	r3, [pc, #284]	@ (800b4f8 <_strtod_l+0xaf8>)
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d103      	bne.n	800b3e8 <_strtod_l+0x9e8>
 800b3e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	f43f ad2b 	beq.w	800ae3e <_strtod_l+0x43e>
 800b3e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b4f8 <_strtod_l+0xaf8>
 800b3ec:	f04f 3aff 	mov.w	sl, #4294967295
 800b3f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3f2:	9805      	ldr	r0, [sp, #20]
 800b3f4:	f002 fd14 	bl	800de20 <_Bfree>
 800b3f8:	9805      	ldr	r0, [sp, #20]
 800b3fa:	4649      	mov	r1, r9
 800b3fc:	f002 fd10 	bl	800de20 <_Bfree>
 800b400:	9805      	ldr	r0, [sp, #20]
 800b402:	4641      	mov	r1, r8
 800b404:	f002 fd0c 	bl	800de20 <_Bfree>
 800b408:	9805      	ldr	r0, [sp, #20]
 800b40a:	4621      	mov	r1, r4
 800b40c:	f002 fd08 	bl	800de20 <_Bfree>
 800b410:	e618      	b.n	800b044 <_strtod_l+0x644>
 800b412:	f1ba 0f01 	cmp.w	sl, #1
 800b416:	d103      	bne.n	800b420 <_strtod_l+0xa20>
 800b418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f43f ada5 	beq.w	800af6a <_strtod_l+0x56a>
 800b420:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b4d0 <_strtod_l+0xad0>
 800b424:	4f35      	ldr	r7, [pc, #212]	@ (800b4fc <_strtod_l+0xafc>)
 800b426:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b42a:	2600      	movs	r6, #0
 800b42c:	e7b1      	b.n	800b392 <_strtod_l+0x992>
 800b42e:	4f34      	ldr	r7, [pc, #208]	@ (800b500 <_strtod_l+0xb00>)
 800b430:	2600      	movs	r6, #0
 800b432:	e7aa      	b.n	800b38a <_strtod_l+0x98a>
 800b434:	4b32      	ldr	r3, [pc, #200]	@ (800b500 <_strtod_l+0xb00>)
 800b436:	4630      	mov	r0, r6
 800b438:	4639      	mov	r1, r7
 800b43a:	2200      	movs	r2, #0
 800b43c:	f7f5 f8dc 	bl	80005f8 <__aeabi_dmul>
 800b440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d09f      	beq.n	800b38a <_strtod_l+0x98a>
 800b44a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b44e:	e7a0      	b.n	800b392 <_strtod_l+0x992>
 800b450:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b4d8 <_strtod_l+0xad8>
 800b454:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b458:	ec57 6b17 	vmov	r6, r7, d7
 800b45c:	e799      	b.n	800b392 <_strtod_l+0x992>
 800b45e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b462:	9b08      	ldr	r3, [sp, #32]
 800b464:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1c1      	bne.n	800b3f0 <_strtod_l+0x9f0>
 800b46c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b470:	0d1b      	lsrs	r3, r3, #20
 800b472:	051b      	lsls	r3, r3, #20
 800b474:	429d      	cmp	r5, r3
 800b476:	d1bb      	bne.n	800b3f0 <_strtod_l+0x9f0>
 800b478:	4630      	mov	r0, r6
 800b47a:	4639      	mov	r1, r7
 800b47c:	f7f5 fc1c 	bl	8000cb8 <__aeabi_d2lz>
 800b480:	f7f5 f88c 	bl	800059c <__aeabi_l2d>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f4 fefc 	bl	8000288 <__aeabi_dsub>
 800b490:	460b      	mov	r3, r1
 800b492:	4602      	mov	r2, r0
 800b494:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b498:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b49e:	ea46 060a 	orr.w	r6, r6, sl
 800b4a2:	431e      	orrs	r6, r3
 800b4a4:	d06f      	beq.n	800b586 <_strtod_l+0xb86>
 800b4a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b4e0 <_strtod_l+0xae0>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f7f5 fb16 	bl	8000adc <__aeabi_dcmplt>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	f47f accf 	bne.w	800ae54 <_strtod_l+0x454>
 800b4b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b4e8 <_strtod_l+0xae8>)
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4c0:	f7f5 fb2a 	bl	8000b18 <__aeabi_dcmpgt>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d093      	beq.n	800b3f0 <_strtod_l+0x9f0>
 800b4c8:	e4c4      	b.n	800ae54 <_strtod_l+0x454>
 800b4ca:	bf00      	nop
 800b4cc:	f3af 8000 	nop.w
 800b4d0:	00000000 	.word	0x00000000
 800b4d4:	bff00000 	.word	0xbff00000
 800b4d8:	00000000 	.word	0x00000000
 800b4dc:	3ff00000 	.word	0x3ff00000
 800b4e0:	94a03595 	.word	0x94a03595
 800b4e4:	3fdfffff 	.word	0x3fdfffff
 800b4e8:	35afe535 	.word	0x35afe535
 800b4ec:	3fe00000 	.word	0x3fe00000
 800b4f0:	000fffff 	.word	0x000fffff
 800b4f4:	7ff00000 	.word	0x7ff00000
 800b4f8:	7fefffff 	.word	0x7fefffff
 800b4fc:	3ff00000 	.word	0x3ff00000
 800b500:	3fe00000 	.word	0x3fe00000
 800b504:	7fe00000 	.word	0x7fe00000
 800b508:	7c9fffff 	.word	0x7c9fffff
 800b50c:	9b08      	ldr	r3, [sp, #32]
 800b50e:	b323      	cbz	r3, 800b55a <_strtod_l+0xb5a>
 800b510:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b514:	d821      	bhi.n	800b55a <_strtod_l+0xb5a>
 800b516:	a328      	add	r3, pc, #160	@ (adr r3, 800b5b8 <_strtod_l+0xbb8>)
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	4630      	mov	r0, r6
 800b51e:	4639      	mov	r1, r7
 800b520:	f7f5 fae6 	bl	8000af0 <__aeabi_dcmple>
 800b524:	b1a0      	cbz	r0, 800b550 <_strtod_l+0xb50>
 800b526:	4639      	mov	r1, r7
 800b528:	4630      	mov	r0, r6
 800b52a:	f7f5 fb3d 	bl	8000ba8 <__aeabi_d2uiz>
 800b52e:	2801      	cmp	r0, #1
 800b530:	bf38      	it	cc
 800b532:	2001      	movcc	r0, #1
 800b534:	f7f4 ffe6 	bl	8000504 <__aeabi_ui2d>
 800b538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	b9fb      	cbnz	r3, 800b580 <_strtod_l+0xb80>
 800b540:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b544:	9014      	str	r0, [sp, #80]	@ 0x50
 800b546:	9315      	str	r3, [sp, #84]	@ 0x54
 800b548:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b54c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b550:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b552:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b556:	1b5b      	subs	r3, r3, r5
 800b558:	9311      	str	r3, [sp, #68]	@ 0x44
 800b55a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b55e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b562:	f002 ff91 	bl	800e488 <__ulp>
 800b566:	4650      	mov	r0, sl
 800b568:	ec53 2b10 	vmov	r2, r3, d0
 800b56c:	4659      	mov	r1, fp
 800b56e:	f7f5 f843 	bl	80005f8 <__aeabi_dmul>
 800b572:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b576:	f7f4 fe89 	bl	800028c <__adddf3>
 800b57a:	4682      	mov	sl, r0
 800b57c:	468b      	mov	fp, r1
 800b57e:	e770      	b.n	800b462 <_strtod_l+0xa62>
 800b580:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b584:	e7e0      	b.n	800b548 <_strtod_l+0xb48>
 800b586:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5c0 <_strtod_l+0xbc0>)
 800b588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58c:	f7f5 faa6 	bl	8000adc <__aeabi_dcmplt>
 800b590:	e798      	b.n	800b4c4 <_strtod_l+0xac4>
 800b592:	2300      	movs	r3, #0
 800b594:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b596:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	f7ff ba6d 	b.w	800aa7a <_strtod_l+0x7a>
 800b5a0:	2a65      	cmp	r2, #101	@ 0x65
 800b5a2:	f43f ab66 	beq.w	800ac72 <_strtod_l+0x272>
 800b5a6:	2a45      	cmp	r2, #69	@ 0x45
 800b5a8:	f43f ab63 	beq.w	800ac72 <_strtod_l+0x272>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	f7ff bb9e 	b.w	800acee <_strtod_l+0x2ee>
 800b5b2:	bf00      	nop
 800b5b4:	f3af 8000 	nop.w
 800b5b8:	ffc00000 	.word	0xffc00000
 800b5bc:	41dfffff 	.word	0x41dfffff
 800b5c0:	94a03595 	.word	0x94a03595
 800b5c4:	3fcfffff 	.word	0x3fcfffff

0800b5c8 <_strtod_r>:
 800b5c8:	4b01      	ldr	r3, [pc, #4]	@ (800b5d0 <_strtod_r+0x8>)
 800b5ca:	f7ff ba19 	b.w	800aa00 <_strtod_l>
 800b5ce:	bf00      	nop
 800b5d0:	200000e4 	.word	0x200000e4

0800b5d4 <strtod>:
 800b5d4:	460a      	mov	r2, r1
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	4802      	ldr	r0, [pc, #8]	@ (800b5e4 <strtod+0x10>)
 800b5da:	4b03      	ldr	r3, [pc, #12]	@ (800b5e8 <strtod+0x14>)
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	f7ff ba0f 	b.w	800aa00 <_strtod_l>
 800b5e2:	bf00      	nop
 800b5e4:	20000250 	.word	0x20000250
 800b5e8:	200000e4 	.word	0x200000e4

0800b5ec <_strtol_l.constprop.0>:
 800b5ec:	2b24      	cmp	r3, #36	@ 0x24
 800b5ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f2:	4686      	mov	lr, r0
 800b5f4:	4690      	mov	r8, r2
 800b5f6:	d801      	bhi.n	800b5fc <_strtol_l.constprop.0+0x10>
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d106      	bne.n	800b60a <_strtol_l.constprop.0+0x1e>
 800b5fc:	f001 f8ce 	bl	800c79c <__errno>
 800b600:	2316      	movs	r3, #22
 800b602:	6003      	str	r3, [r0, #0]
 800b604:	2000      	movs	r0, #0
 800b606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60a:	4834      	ldr	r0, [pc, #208]	@ (800b6dc <_strtol_l.constprop.0+0xf0>)
 800b60c:	460d      	mov	r5, r1
 800b60e:	462a      	mov	r2, r5
 800b610:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b614:	5d06      	ldrb	r6, [r0, r4]
 800b616:	f016 0608 	ands.w	r6, r6, #8
 800b61a:	d1f8      	bne.n	800b60e <_strtol_l.constprop.0+0x22>
 800b61c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b61e:	d12d      	bne.n	800b67c <_strtol_l.constprop.0+0x90>
 800b620:	782c      	ldrb	r4, [r5, #0]
 800b622:	2601      	movs	r6, #1
 800b624:	1c95      	adds	r5, r2, #2
 800b626:	f033 0210 	bics.w	r2, r3, #16
 800b62a:	d109      	bne.n	800b640 <_strtol_l.constprop.0+0x54>
 800b62c:	2c30      	cmp	r4, #48	@ 0x30
 800b62e:	d12a      	bne.n	800b686 <_strtol_l.constprop.0+0x9a>
 800b630:	782a      	ldrb	r2, [r5, #0]
 800b632:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b636:	2a58      	cmp	r2, #88	@ 0x58
 800b638:	d125      	bne.n	800b686 <_strtol_l.constprop.0+0x9a>
 800b63a:	786c      	ldrb	r4, [r5, #1]
 800b63c:	2310      	movs	r3, #16
 800b63e:	3502      	adds	r5, #2
 800b640:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b644:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b648:	2200      	movs	r2, #0
 800b64a:	fbbc f9f3 	udiv	r9, ip, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	fb03 ca19 	mls	sl, r3, r9, ip
 800b654:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b658:	2f09      	cmp	r7, #9
 800b65a:	d81b      	bhi.n	800b694 <_strtol_l.constprop.0+0xa8>
 800b65c:	463c      	mov	r4, r7
 800b65e:	42a3      	cmp	r3, r4
 800b660:	dd27      	ble.n	800b6b2 <_strtol_l.constprop.0+0xc6>
 800b662:	1c57      	adds	r7, r2, #1
 800b664:	d007      	beq.n	800b676 <_strtol_l.constprop.0+0x8a>
 800b666:	4581      	cmp	r9, r0
 800b668:	d320      	bcc.n	800b6ac <_strtol_l.constprop.0+0xc0>
 800b66a:	d101      	bne.n	800b670 <_strtol_l.constprop.0+0x84>
 800b66c:	45a2      	cmp	sl, r4
 800b66e:	db1d      	blt.n	800b6ac <_strtol_l.constprop.0+0xc0>
 800b670:	fb00 4003 	mla	r0, r0, r3, r4
 800b674:	2201      	movs	r2, #1
 800b676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b67a:	e7eb      	b.n	800b654 <_strtol_l.constprop.0+0x68>
 800b67c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b67e:	bf04      	itt	eq
 800b680:	782c      	ldrbeq	r4, [r5, #0]
 800b682:	1c95      	addeq	r5, r2, #2
 800b684:	e7cf      	b.n	800b626 <_strtol_l.constprop.0+0x3a>
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1da      	bne.n	800b640 <_strtol_l.constprop.0+0x54>
 800b68a:	2c30      	cmp	r4, #48	@ 0x30
 800b68c:	bf0c      	ite	eq
 800b68e:	2308      	moveq	r3, #8
 800b690:	230a      	movne	r3, #10
 800b692:	e7d5      	b.n	800b640 <_strtol_l.constprop.0+0x54>
 800b694:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b698:	2f19      	cmp	r7, #25
 800b69a:	d801      	bhi.n	800b6a0 <_strtol_l.constprop.0+0xb4>
 800b69c:	3c37      	subs	r4, #55	@ 0x37
 800b69e:	e7de      	b.n	800b65e <_strtol_l.constprop.0+0x72>
 800b6a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b6a4:	2f19      	cmp	r7, #25
 800b6a6:	d804      	bhi.n	800b6b2 <_strtol_l.constprop.0+0xc6>
 800b6a8:	3c57      	subs	r4, #87	@ 0x57
 800b6aa:	e7d8      	b.n	800b65e <_strtol_l.constprop.0+0x72>
 800b6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b0:	e7e1      	b.n	800b676 <_strtol_l.constprop.0+0x8a>
 800b6b2:	1c53      	adds	r3, r2, #1
 800b6b4:	d108      	bne.n	800b6c8 <_strtol_l.constprop.0+0xdc>
 800b6b6:	2322      	movs	r3, #34	@ 0x22
 800b6b8:	f8ce 3000 	str.w	r3, [lr]
 800b6bc:	4660      	mov	r0, ip
 800b6be:	f1b8 0f00 	cmp.w	r8, #0
 800b6c2:	d0a0      	beq.n	800b606 <_strtol_l.constprop.0+0x1a>
 800b6c4:	1e69      	subs	r1, r5, #1
 800b6c6:	e006      	b.n	800b6d6 <_strtol_l.constprop.0+0xea>
 800b6c8:	b106      	cbz	r6, 800b6cc <_strtol_l.constprop.0+0xe0>
 800b6ca:	4240      	negs	r0, r0
 800b6cc:	f1b8 0f00 	cmp.w	r8, #0
 800b6d0:	d099      	beq.n	800b606 <_strtol_l.constprop.0+0x1a>
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	d1f6      	bne.n	800b6c4 <_strtol_l.constprop.0+0xd8>
 800b6d6:	f8c8 1000 	str.w	r1, [r8]
 800b6da:	e794      	b.n	800b606 <_strtol_l.constprop.0+0x1a>
 800b6dc:	08011361 	.word	0x08011361

0800b6e0 <_strtol_r>:
 800b6e0:	f7ff bf84 	b.w	800b5ec <_strtol_l.constprop.0>

0800b6e4 <strtol>:
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	460a      	mov	r2, r1
 800b6e8:	4601      	mov	r1, r0
 800b6ea:	4802      	ldr	r0, [pc, #8]	@ (800b6f4 <strtol+0x10>)
 800b6ec:	6800      	ldr	r0, [r0, #0]
 800b6ee:	f7ff bf7d 	b.w	800b5ec <_strtol_l.constprop.0>
 800b6f2:	bf00      	nop
 800b6f4:	20000250 	.word	0x20000250

0800b6f8 <__cvt>:
 800b6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	ec57 6b10 	vmov	r6, r7, d0
 800b700:	2f00      	cmp	r7, #0
 800b702:	460c      	mov	r4, r1
 800b704:	4619      	mov	r1, r3
 800b706:	463b      	mov	r3, r7
 800b708:	bfbb      	ittet	lt
 800b70a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b70e:	461f      	movlt	r7, r3
 800b710:	2300      	movge	r3, #0
 800b712:	232d      	movlt	r3, #45	@ 0x2d
 800b714:	700b      	strb	r3, [r1, #0]
 800b716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b718:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b71c:	4691      	mov	r9, r2
 800b71e:	f023 0820 	bic.w	r8, r3, #32
 800b722:	bfbc      	itt	lt
 800b724:	4632      	movlt	r2, r6
 800b726:	4616      	movlt	r6, r2
 800b728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b72c:	d005      	beq.n	800b73a <__cvt+0x42>
 800b72e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b732:	d100      	bne.n	800b736 <__cvt+0x3e>
 800b734:	3401      	adds	r4, #1
 800b736:	2102      	movs	r1, #2
 800b738:	e000      	b.n	800b73c <__cvt+0x44>
 800b73a:	2103      	movs	r1, #3
 800b73c:	ab03      	add	r3, sp, #12
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	ab02      	add	r3, sp, #8
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	ec47 6b10 	vmov	d0, r6, r7
 800b748:	4653      	mov	r3, sl
 800b74a:	4622      	mov	r2, r4
 800b74c:	f001 f918 	bl	800c980 <_dtoa_r>
 800b750:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b754:	4605      	mov	r5, r0
 800b756:	d119      	bne.n	800b78c <__cvt+0x94>
 800b758:	f019 0f01 	tst.w	r9, #1
 800b75c:	d00e      	beq.n	800b77c <__cvt+0x84>
 800b75e:	eb00 0904 	add.w	r9, r0, r4
 800b762:	2200      	movs	r2, #0
 800b764:	2300      	movs	r3, #0
 800b766:	4630      	mov	r0, r6
 800b768:	4639      	mov	r1, r7
 800b76a:	f7f5 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800b76e:	b108      	cbz	r0, 800b774 <__cvt+0x7c>
 800b770:	f8cd 900c 	str.w	r9, [sp, #12]
 800b774:	2230      	movs	r2, #48	@ 0x30
 800b776:	9b03      	ldr	r3, [sp, #12]
 800b778:	454b      	cmp	r3, r9
 800b77a:	d31e      	bcc.n	800b7ba <__cvt+0xc2>
 800b77c:	9b03      	ldr	r3, [sp, #12]
 800b77e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b780:	1b5b      	subs	r3, r3, r5
 800b782:	4628      	mov	r0, r5
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	b004      	add	sp, #16
 800b788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b790:	eb00 0904 	add.w	r9, r0, r4
 800b794:	d1e5      	bne.n	800b762 <__cvt+0x6a>
 800b796:	7803      	ldrb	r3, [r0, #0]
 800b798:	2b30      	cmp	r3, #48	@ 0x30
 800b79a:	d10a      	bne.n	800b7b2 <__cvt+0xba>
 800b79c:	2200      	movs	r2, #0
 800b79e:	2300      	movs	r3, #0
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	f7f5 f990 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a8:	b918      	cbnz	r0, 800b7b2 <__cvt+0xba>
 800b7aa:	f1c4 0401 	rsb	r4, r4, #1
 800b7ae:	f8ca 4000 	str.w	r4, [sl]
 800b7b2:	f8da 3000 	ldr.w	r3, [sl]
 800b7b6:	4499      	add	r9, r3
 800b7b8:	e7d3      	b.n	800b762 <__cvt+0x6a>
 800b7ba:	1c59      	adds	r1, r3, #1
 800b7bc:	9103      	str	r1, [sp, #12]
 800b7be:	701a      	strb	r2, [r3, #0]
 800b7c0:	e7d9      	b.n	800b776 <__cvt+0x7e>

0800b7c2 <__exponent>:
 800b7c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	bfba      	itte	lt
 800b7c8:	4249      	neglt	r1, r1
 800b7ca:	232d      	movlt	r3, #45	@ 0x2d
 800b7cc:	232b      	movge	r3, #43	@ 0x2b
 800b7ce:	2909      	cmp	r1, #9
 800b7d0:	7002      	strb	r2, [r0, #0]
 800b7d2:	7043      	strb	r3, [r0, #1]
 800b7d4:	dd29      	ble.n	800b82a <__exponent+0x68>
 800b7d6:	f10d 0307 	add.w	r3, sp, #7
 800b7da:	461d      	mov	r5, r3
 800b7dc:	270a      	movs	r7, #10
 800b7de:	461a      	mov	r2, r3
 800b7e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7e4:	fb07 1416 	mls	r4, r7, r6, r1
 800b7e8:	3430      	adds	r4, #48	@ 0x30
 800b7ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	2c63      	cmp	r4, #99	@ 0x63
 800b7f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	dcf1      	bgt.n	800b7de <__exponent+0x1c>
 800b7fa:	3130      	adds	r1, #48	@ 0x30
 800b7fc:	1e94      	subs	r4, r2, #2
 800b7fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b802:	1c41      	adds	r1, r0, #1
 800b804:	4623      	mov	r3, r4
 800b806:	42ab      	cmp	r3, r5
 800b808:	d30a      	bcc.n	800b820 <__exponent+0x5e>
 800b80a:	f10d 0309 	add.w	r3, sp, #9
 800b80e:	1a9b      	subs	r3, r3, r2
 800b810:	42ac      	cmp	r4, r5
 800b812:	bf88      	it	hi
 800b814:	2300      	movhi	r3, #0
 800b816:	3302      	adds	r3, #2
 800b818:	4403      	add	r3, r0
 800b81a:	1a18      	subs	r0, r3, r0
 800b81c:	b003      	add	sp, #12
 800b81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b820:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b824:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b828:	e7ed      	b.n	800b806 <__exponent+0x44>
 800b82a:	2330      	movs	r3, #48	@ 0x30
 800b82c:	3130      	adds	r1, #48	@ 0x30
 800b82e:	7083      	strb	r3, [r0, #2]
 800b830:	70c1      	strb	r1, [r0, #3]
 800b832:	1d03      	adds	r3, r0, #4
 800b834:	e7f1      	b.n	800b81a <__exponent+0x58>
	...

0800b838 <_printf_float>:
 800b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83c:	b08d      	sub	sp, #52	@ 0x34
 800b83e:	460c      	mov	r4, r1
 800b840:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b844:	4616      	mov	r6, r2
 800b846:	461f      	mov	r7, r3
 800b848:	4605      	mov	r5, r0
 800b84a:	f000 ff5d 	bl	800c708 <_localeconv_r>
 800b84e:	6803      	ldr	r3, [r0, #0]
 800b850:	9304      	str	r3, [sp, #16]
 800b852:	4618      	mov	r0, r3
 800b854:	f7f4 fd0c 	bl	8000270 <strlen>
 800b858:	2300      	movs	r3, #0
 800b85a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b85c:	f8d8 3000 	ldr.w	r3, [r8]
 800b860:	9005      	str	r0, [sp, #20]
 800b862:	3307      	adds	r3, #7
 800b864:	f023 0307 	bic.w	r3, r3, #7
 800b868:	f103 0208 	add.w	r2, r3, #8
 800b86c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b870:	f8d4 b000 	ldr.w	fp, [r4]
 800b874:	f8c8 2000 	str.w	r2, [r8]
 800b878:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b87c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b880:	9307      	str	r3, [sp, #28]
 800b882:	f8cd 8018 	str.w	r8, [sp, #24]
 800b886:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b88a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b88e:	4b9c      	ldr	r3, [pc, #624]	@ (800bb00 <_printf_float+0x2c8>)
 800b890:	f04f 32ff 	mov.w	r2, #4294967295
 800b894:	f7f5 f94a 	bl	8000b2c <__aeabi_dcmpun>
 800b898:	bb70      	cbnz	r0, 800b8f8 <_printf_float+0xc0>
 800b89a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b89e:	4b98      	ldr	r3, [pc, #608]	@ (800bb00 <_printf_float+0x2c8>)
 800b8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a4:	f7f5 f924 	bl	8000af0 <__aeabi_dcmple>
 800b8a8:	bb30      	cbnz	r0, 800b8f8 <_printf_float+0xc0>
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	f7f5 f913 	bl	8000adc <__aeabi_dcmplt>
 800b8b6:	b110      	cbz	r0, 800b8be <_printf_float+0x86>
 800b8b8:	232d      	movs	r3, #45	@ 0x2d
 800b8ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8be:	4a91      	ldr	r2, [pc, #580]	@ (800bb04 <_printf_float+0x2cc>)
 800b8c0:	4b91      	ldr	r3, [pc, #580]	@ (800bb08 <_printf_float+0x2d0>)
 800b8c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b8c6:	bf94      	ite	ls
 800b8c8:	4690      	movls	r8, r2
 800b8ca:	4698      	movhi	r8, r3
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	6123      	str	r3, [r4, #16]
 800b8d0:	f02b 0304 	bic.w	r3, fp, #4
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	f04f 0900 	mov.w	r9, #0
 800b8da:	9700      	str	r7, [sp, #0]
 800b8dc:	4633      	mov	r3, r6
 800b8de:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f000 f9d2 	bl	800bc8c <_printf_common>
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	f040 808d 	bne.w	800ba08 <_printf_float+0x1d0>
 800b8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f2:	b00d      	add	sp, #52	@ 0x34
 800b8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f8:	4642      	mov	r2, r8
 800b8fa:	464b      	mov	r3, r9
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	4649      	mov	r1, r9
 800b900:	f7f5 f914 	bl	8000b2c <__aeabi_dcmpun>
 800b904:	b140      	cbz	r0, 800b918 <_printf_float+0xe0>
 800b906:	464b      	mov	r3, r9
 800b908:	2b00      	cmp	r3, #0
 800b90a:	bfbc      	itt	lt
 800b90c:	232d      	movlt	r3, #45	@ 0x2d
 800b90e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b912:	4a7e      	ldr	r2, [pc, #504]	@ (800bb0c <_printf_float+0x2d4>)
 800b914:	4b7e      	ldr	r3, [pc, #504]	@ (800bb10 <_printf_float+0x2d8>)
 800b916:	e7d4      	b.n	800b8c2 <_printf_float+0x8a>
 800b918:	6863      	ldr	r3, [r4, #4]
 800b91a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b91e:	9206      	str	r2, [sp, #24]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	d13b      	bne.n	800b99c <_printf_float+0x164>
 800b924:	2306      	movs	r3, #6
 800b926:	6063      	str	r3, [r4, #4]
 800b928:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b92c:	2300      	movs	r3, #0
 800b92e:	6022      	str	r2, [r4, #0]
 800b930:	9303      	str	r3, [sp, #12]
 800b932:	ab0a      	add	r3, sp, #40	@ 0x28
 800b934:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b938:	ab09      	add	r3, sp, #36	@ 0x24
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	6861      	ldr	r1, [r4, #4]
 800b93e:	ec49 8b10 	vmov	d0, r8, r9
 800b942:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b946:	4628      	mov	r0, r5
 800b948:	f7ff fed6 	bl	800b6f8 <__cvt>
 800b94c:	9b06      	ldr	r3, [sp, #24]
 800b94e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b950:	2b47      	cmp	r3, #71	@ 0x47
 800b952:	4680      	mov	r8, r0
 800b954:	d129      	bne.n	800b9aa <_printf_float+0x172>
 800b956:	1cc8      	adds	r0, r1, #3
 800b958:	db02      	blt.n	800b960 <_printf_float+0x128>
 800b95a:	6863      	ldr	r3, [r4, #4]
 800b95c:	4299      	cmp	r1, r3
 800b95e:	dd41      	ble.n	800b9e4 <_printf_float+0x1ac>
 800b960:	f1aa 0a02 	sub.w	sl, sl, #2
 800b964:	fa5f fa8a 	uxtb.w	sl, sl
 800b968:	3901      	subs	r1, #1
 800b96a:	4652      	mov	r2, sl
 800b96c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b970:	9109      	str	r1, [sp, #36]	@ 0x24
 800b972:	f7ff ff26 	bl	800b7c2 <__exponent>
 800b976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b978:	1813      	adds	r3, r2, r0
 800b97a:	2a01      	cmp	r2, #1
 800b97c:	4681      	mov	r9, r0
 800b97e:	6123      	str	r3, [r4, #16]
 800b980:	dc02      	bgt.n	800b988 <_printf_float+0x150>
 800b982:	6822      	ldr	r2, [r4, #0]
 800b984:	07d2      	lsls	r2, r2, #31
 800b986:	d501      	bpl.n	800b98c <_printf_float+0x154>
 800b988:	3301      	adds	r3, #1
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0a2      	beq.n	800b8da <_printf_float+0xa2>
 800b994:	232d      	movs	r3, #45	@ 0x2d
 800b996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b99a:	e79e      	b.n	800b8da <_printf_float+0xa2>
 800b99c:	9a06      	ldr	r2, [sp, #24]
 800b99e:	2a47      	cmp	r2, #71	@ 0x47
 800b9a0:	d1c2      	bne.n	800b928 <_printf_float+0xf0>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1c0      	bne.n	800b928 <_printf_float+0xf0>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e7bd      	b.n	800b926 <_printf_float+0xee>
 800b9aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9ae:	d9db      	bls.n	800b968 <_printf_float+0x130>
 800b9b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b9b4:	d118      	bne.n	800b9e8 <_printf_float+0x1b0>
 800b9b6:	2900      	cmp	r1, #0
 800b9b8:	6863      	ldr	r3, [r4, #4]
 800b9ba:	dd0b      	ble.n	800b9d4 <_printf_float+0x19c>
 800b9bc:	6121      	str	r1, [r4, #16]
 800b9be:	b913      	cbnz	r3, 800b9c6 <_printf_float+0x18e>
 800b9c0:	6822      	ldr	r2, [r4, #0]
 800b9c2:	07d0      	lsls	r0, r2, #31
 800b9c4:	d502      	bpl.n	800b9cc <_printf_float+0x194>
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	440b      	add	r3, r1
 800b9ca:	6123      	str	r3, [r4, #16]
 800b9cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b9ce:	f04f 0900 	mov.w	r9, #0
 800b9d2:	e7db      	b.n	800b98c <_printf_float+0x154>
 800b9d4:	b913      	cbnz	r3, 800b9dc <_printf_float+0x1a4>
 800b9d6:	6822      	ldr	r2, [r4, #0]
 800b9d8:	07d2      	lsls	r2, r2, #31
 800b9da:	d501      	bpl.n	800b9e0 <_printf_float+0x1a8>
 800b9dc:	3302      	adds	r3, #2
 800b9de:	e7f4      	b.n	800b9ca <_printf_float+0x192>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e7f2      	b.n	800b9ca <_printf_float+0x192>
 800b9e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ea:	4299      	cmp	r1, r3
 800b9ec:	db05      	blt.n	800b9fa <_printf_float+0x1c2>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	6121      	str	r1, [r4, #16]
 800b9f2:	07d8      	lsls	r0, r3, #31
 800b9f4:	d5ea      	bpl.n	800b9cc <_printf_float+0x194>
 800b9f6:	1c4b      	adds	r3, r1, #1
 800b9f8:	e7e7      	b.n	800b9ca <_printf_float+0x192>
 800b9fa:	2900      	cmp	r1, #0
 800b9fc:	bfd4      	ite	le
 800b9fe:	f1c1 0202 	rsble	r2, r1, #2
 800ba02:	2201      	movgt	r2, #1
 800ba04:	4413      	add	r3, r2
 800ba06:	e7e0      	b.n	800b9ca <_printf_float+0x192>
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	055a      	lsls	r2, r3, #21
 800ba0c:	d407      	bmi.n	800ba1e <_printf_float+0x1e6>
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	4642      	mov	r2, r8
 800ba12:	4631      	mov	r1, r6
 800ba14:	4628      	mov	r0, r5
 800ba16:	47b8      	blx	r7
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d12b      	bne.n	800ba74 <_printf_float+0x23c>
 800ba1c:	e767      	b.n	800b8ee <_printf_float+0xb6>
 800ba1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba22:	f240 80dd 	bls.w	800bbe0 <_printf_float+0x3a8>
 800ba26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f7f5 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d033      	beq.n	800ba9e <_printf_float+0x266>
 800ba36:	4a37      	ldr	r2, [pc, #220]	@ (800bb14 <_printf_float+0x2dc>)
 800ba38:	2301      	movs	r3, #1
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	47b8      	blx	r7
 800ba40:	3001      	adds	r0, #1
 800ba42:	f43f af54 	beq.w	800b8ee <_printf_float+0xb6>
 800ba46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ba4a:	4543      	cmp	r3, r8
 800ba4c:	db02      	blt.n	800ba54 <_printf_float+0x21c>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	07d8      	lsls	r0, r3, #31
 800ba52:	d50f      	bpl.n	800ba74 <_printf_float+0x23c>
 800ba54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba58:	4631      	mov	r1, r6
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	47b8      	blx	r7
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f43f af45 	beq.w	800b8ee <_printf_float+0xb6>
 800ba64:	f04f 0900 	mov.w	r9, #0
 800ba68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba6c:	f104 0a1a 	add.w	sl, r4, #26
 800ba70:	45c8      	cmp	r8, r9
 800ba72:	dc09      	bgt.n	800ba88 <_printf_float+0x250>
 800ba74:	6823      	ldr	r3, [r4, #0]
 800ba76:	079b      	lsls	r3, r3, #30
 800ba78:	f100 8103 	bmi.w	800bc82 <_printf_float+0x44a>
 800ba7c:	68e0      	ldr	r0, [r4, #12]
 800ba7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba80:	4298      	cmp	r0, r3
 800ba82:	bfb8      	it	lt
 800ba84:	4618      	movlt	r0, r3
 800ba86:	e734      	b.n	800b8f2 <_printf_float+0xba>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	4652      	mov	r2, sl
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4628      	mov	r0, r5
 800ba90:	47b8      	blx	r7
 800ba92:	3001      	adds	r0, #1
 800ba94:	f43f af2b 	beq.w	800b8ee <_printf_float+0xb6>
 800ba98:	f109 0901 	add.w	r9, r9, #1
 800ba9c:	e7e8      	b.n	800ba70 <_printf_float+0x238>
 800ba9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	dc39      	bgt.n	800bb18 <_printf_float+0x2e0>
 800baa4:	4a1b      	ldr	r2, [pc, #108]	@ (800bb14 <_printf_float+0x2dc>)
 800baa6:	2301      	movs	r3, #1
 800baa8:	4631      	mov	r1, r6
 800baaa:	4628      	mov	r0, r5
 800baac:	47b8      	blx	r7
 800baae:	3001      	adds	r0, #1
 800bab0:	f43f af1d 	beq.w	800b8ee <_printf_float+0xb6>
 800bab4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bab8:	ea59 0303 	orrs.w	r3, r9, r3
 800babc:	d102      	bne.n	800bac4 <_printf_float+0x28c>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	07d9      	lsls	r1, r3, #31
 800bac2:	d5d7      	bpl.n	800ba74 <_printf_float+0x23c>
 800bac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bac8:	4631      	mov	r1, r6
 800baca:	4628      	mov	r0, r5
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	f43f af0d 	beq.w	800b8ee <_printf_float+0xb6>
 800bad4:	f04f 0a00 	mov.w	sl, #0
 800bad8:	f104 0b1a 	add.w	fp, r4, #26
 800badc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bade:	425b      	negs	r3, r3
 800bae0:	4553      	cmp	r3, sl
 800bae2:	dc01      	bgt.n	800bae8 <_printf_float+0x2b0>
 800bae4:	464b      	mov	r3, r9
 800bae6:	e793      	b.n	800ba10 <_printf_float+0x1d8>
 800bae8:	2301      	movs	r3, #1
 800baea:	465a      	mov	r2, fp
 800baec:	4631      	mov	r1, r6
 800baee:	4628      	mov	r0, r5
 800baf0:	47b8      	blx	r7
 800baf2:	3001      	adds	r0, #1
 800baf4:	f43f aefb 	beq.w	800b8ee <_printf_float+0xb6>
 800baf8:	f10a 0a01 	add.w	sl, sl, #1
 800bafc:	e7ee      	b.n	800badc <_printf_float+0x2a4>
 800bafe:	bf00      	nop
 800bb00:	7fefffff 	.word	0x7fefffff
 800bb04:	08011461 	.word	0x08011461
 800bb08:	08011465 	.word	0x08011465
 800bb0c:	08011469 	.word	0x08011469
 800bb10:	0801146d 	.word	0x0801146d
 800bb14:	08011471 	.word	0x08011471
 800bb18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb1e:	4553      	cmp	r3, sl
 800bb20:	bfa8      	it	ge
 800bb22:	4653      	movge	r3, sl
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	4699      	mov	r9, r3
 800bb28:	dc36      	bgt.n	800bb98 <_printf_float+0x360>
 800bb2a:	f04f 0b00 	mov.w	fp, #0
 800bb2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb32:	f104 021a 	add.w	r2, r4, #26
 800bb36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb38:	9306      	str	r3, [sp, #24]
 800bb3a:	eba3 0309 	sub.w	r3, r3, r9
 800bb3e:	455b      	cmp	r3, fp
 800bb40:	dc31      	bgt.n	800bba6 <_printf_float+0x36e>
 800bb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb44:	459a      	cmp	sl, r3
 800bb46:	dc3a      	bgt.n	800bbbe <_printf_float+0x386>
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	07da      	lsls	r2, r3, #31
 800bb4c:	d437      	bmi.n	800bbbe <_printf_float+0x386>
 800bb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb50:	ebaa 0903 	sub.w	r9, sl, r3
 800bb54:	9b06      	ldr	r3, [sp, #24]
 800bb56:	ebaa 0303 	sub.w	r3, sl, r3
 800bb5a:	4599      	cmp	r9, r3
 800bb5c:	bfa8      	it	ge
 800bb5e:	4699      	movge	r9, r3
 800bb60:	f1b9 0f00 	cmp.w	r9, #0
 800bb64:	dc33      	bgt.n	800bbce <_printf_float+0x396>
 800bb66:	f04f 0800 	mov.w	r8, #0
 800bb6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb6e:	f104 0b1a 	add.w	fp, r4, #26
 800bb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb74:	ebaa 0303 	sub.w	r3, sl, r3
 800bb78:	eba3 0309 	sub.w	r3, r3, r9
 800bb7c:	4543      	cmp	r3, r8
 800bb7e:	f77f af79 	ble.w	800ba74 <_printf_float+0x23c>
 800bb82:	2301      	movs	r3, #1
 800bb84:	465a      	mov	r2, fp
 800bb86:	4631      	mov	r1, r6
 800bb88:	4628      	mov	r0, r5
 800bb8a:	47b8      	blx	r7
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	f43f aeae 	beq.w	800b8ee <_printf_float+0xb6>
 800bb92:	f108 0801 	add.w	r8, r8, #1
 800bb96:	e7ec      	b.n	800bb72 <_printf_float+0x33a>
 800bb98:	4642      	mov	r2, r8
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	47b8      	blx	r7
 800bba0:	3001      	adds	r0, #1
 800bba2:	d1c2      	bne.n	800bb2a <_printf_float+0x2f2>
 800bba4:	e6a3      	b.n	800b8ee <_printf_float+0xb6>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4628      	mov	r0, r5
 800bbac:	9206      	str	r2, [sp, #24]
 800bbae:	47b8      	blx	r7
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	f43f ae9c 	beq.w	800b8ee <_printf_float+0xb6>
 800bbb6:	9a06      	ldr	r2, [sp, #24]
 800bbb8:	f10b 0b01 	add.w	fp, fp, #1
 800bbbc:	e7bb      	b.n	800bb36 <_printf_float+0x2fe>
 800bbbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b8      	blx	r7
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d1c0      	bne.n	800bb4e <_printf_float+0x316>
 800bbcc:	e68f      	b.n	800b8ee <_printf_float+0xb6>
 800bbce:	9a06      	ldr	r2, [sp, #24]
 800bbd0:	464b      	mov	r3, r9
 800bbd2:	4442      	add	r2, r8
 800bbd4:	4631      	mov	r1, r6
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	47b8      	blx	r7
 800bbda:	3001      	adds	r0, #1
 800bbdc:	d1c3      	bne.n	800bb66 <_printf_float+0x32e>
 800bbde:	e686      	b.n	800b8ee <_printf_float+0xb6>
 800bbe0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbe4:	f1ba 0f01 	cmp.w	sl, #1
 800bbe8:	dc01      	bgt.n	800bbee <_printf_float+0x3b6>
 800bbea:	07db      	lsls	r3, r3, #31
 800bbec:	d536      	bpl.n	800bc5c <_printf_float+0x424>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	4642      	mov	r2, r8
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b8      	blx	r7
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f43f ae78 	beq.w	800b8ee <_printf_float+0xb6>
 800bbfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc02:	4631      	mov	r1, r6
 800bc04:	4628      	mov	r0, r5
 800bc06:	47b8      	blx	r7
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f43f ae70 	beq.w	800b8ee <_printf_float+0xb6>
 800bc0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc12:	2200      	movs	r2, #0
 800bc14:	2300      	movs	r3, #0
 800bc16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc1a:	f7f4 ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc1e:	b9c0      	cbnz	r0, 800bc52 <_printf_float+0x41a>
 800bc20:	4653      	mov	r3, sl
 800bc22:	f108 0201 	add.w	r2, r8, #1
 800bc26:	4631      	mov	r1, r6
 800bc28:	4628      	mov	r0, r5
 800bc2a:	47b8      	blx	r7
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	d10c      	bne.n	800bc4a <_printf_float+0x412>
 800bc30:	e65d      	b.n	800b8ee <_printf_float+0xb6>
 800bc32:	2301      	movs	r3, #1
 800bc34:	465a      	mov	r2, fp
 800bc36:	4631      	mov	r1, r6
 800bc38:	4628      	mov	r0, r5
 800bc3a:	47b8      	blx	r7
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	f43f ae56 	beq.w	800b8ee <_printf_float+0xb6>
 800bc42:	f108 0801 	add.w	r8, r8, #1
 800bc46:	45d0      	cmp	r8, sl
 800bc48:	dbf3      	blt.n	800bc32 <_printf_float+0x3fa>
 800bc4a:	464b      	mov	r3, r9
 800bc4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc50:	e6df      	b.n	800ba12 <_printf_float+0x1da>
 800bc52:	f04f 0800 	mov.w	r8, #0
 800bc56:	f104 0b1a 	add.w	fp, r4, #26
 800bc5a:	e7f4      	b.n	800bc46 <_printf_float+0x40e>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	4642      	mov	r2, r8
 800bc60:	e7e1      	b.n	800bc26 <_printf_float+0x3ee>
 800bc62:	2301      	movs	r3, #1
 800bc64:	464a      	mov	r2, r9
 800bc66:	4631      	mov	r1, r6
 800bc68:	4628      	mov	r0, r5
 800bc6a:	47b8      	blx	r7
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	f43f ae3e 	beq.w	800b8ee <_printf_float+0xb6>
 800bc72:	f108 0801 	add.w	r8, r8, #1
 800bc76:	68e3      	ldr	r3, [r4, #12]
 800bc78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc7a:	1a5b      	subs	r3, r3, r1
 800bc7c:	4543      	cmp	r3, r8
 800bc7e:	dcf0      	bgt.n	800bc62 <_printf_float+0x42a>
 800bc80:	e6fc      	b.n	800ba7c <_printf_float+0x244>
 800bc82:	f04f 0800 	mov.w	r8, #0
 800bc86:	f104 0919 	add.w	r9, r4, #25
 800bc8a:	e7f4      	b.n	800bc76 <_printf_float+0x43e>

0800bc8c <_printf_common>:
 800bc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc90:	4616      	mov	r6, r2
 800bc92:	4698      	mov	r8, r3
 800bc94:	688a      	ldr	r2, [r1, #8]
 800bc96:	690b      	ldr	r3, [r1, #16]
 800bc98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	bfb8      	it	lt
 800bca0:	4613      	movlt	r3, r2
 800bca2:	6033      	str	r3, [r6, #0]
 800bca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bca8:	4607      	mov	r7, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	b10a      	cbz	r2, 800bcb2 <_printf_common+0x26>
 800bcae:	3301      	adds	r3, #1
 800bcb0:	6033      	str	r3, [r6, #0]
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	0699      	lsls	r1, r3, #26
 800bcb6:	bf42      	ittt	mi
 800bcb8:	6833      	ldrmi	r3, [r6, #0]
 800bcba:	3302      	addmi	r3, #2
 800bcbc:	6033      	strmi	r3, [r6, #0]
 800bcbe:	6825      	ldr	r5, [r4, #0]
 800bcc0:	f015 0506 	ands.w	r5, r5, #6
 800bcc4:	d106      	bne.n	800bcd4 <_printf_common+0x48>
 800bcc6:	f104 0a19 	add.w	sl, r4, #25
 800bcca:	68e3      	ldr	r3, [r4, #12]
 800bccc:	6832      	ldr	r2, [r6, #0]
 800bcce:	1a9b      	subs	r3, r3, r2
 800bcd0:	42ab      	cmp	r3, r5
 800bcd2:	dc26      	bgt.n	800bd22 <_printf_common+0x96>
 800bcd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcd8:	6822      	ldr	r2, [r4, #0]
 800bcda:	3b00      	subs	r3, #0
 800bcdc:	bf18      	it	ne
 800bcde:	2301      	movne	r3, #1
 800bce0:	0692      	lsls	r2, r2, #26
 800bce2:	d42b      	bmi.n	800bd3c <_printf_common+0xb0>
 800bce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bce8:	4641      	mov	r1, r8
 800bcea:	4638      	mov	r0, r7
 800bcec:	47c8      	blx	r9
 800bcee:	3001      	adds	r0, #1
 800bcf0:	d01e      	beq.n	800bd30 <_printf_common+0xa4>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	6922      	ldr	r2, [r4, #16]
 800bcf6:	f003 0306 	and.w	r3, r3, #6
 800bcfa:	2b04      	cmp	r3, #4
 800bcfc:	bf02      	ittt	eq
 800bcfe:	68e5      	ldreq	r5, [r4, #12]
 800bd00:	6833      	ldreq	r3, [r6, #0]
 800bd02:	1aed      	subeq	r5, r5, r3
 800bd04:	68a3      	ldr	r3, [r4, #8]
 800bd06:	bf0c      	ite	eq
 800bd08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd0c:	2500      	movne	r5, #0
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	bfc4      	itt	gt
 800bd12:	1a9b      	subgt	r3, r3, r2
 800bd14:	18ed      	addgt	r5, r5, r3
 800bd16:	2600      	movs	r6, #0
 800bd18:	341a      	adds	r4, #26
 800bd1a:	42b5      	cmp	r5, r6
 800bd1c:	d11a      	bne.n	800bd54 <_printf_common+0xc8>
 800bd1e:	2000      	movs	r0, #0
 800bd20:	e008      	b.n	800bd34 <_printf_common+0xa8>
 800bd22:	2301      	movs	r3, #1
 800bd24:	4652      	mov	r2, sl
 800bd26:	4641      	mov	r1, r8
 800bd28:	4638      	mov	r0, r7
 800bd2a:	47c8      	blx	r9
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d103      	bne.n	800bd38 <_printf_common+0xac>
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd38:	3501      	adds	r5, #1
 800bd3a:	e7c6      	b.n	800bcca <_printf_common+0x3e>
 800bd3c:	18e1      	adds	r1, r4, r3
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	2030      	movs	r0, #48	@ 0x30
 800bd42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd46:	4422      	add	r2, r4
 800bd48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd50:	3302      	adds	r3, #2
 800bd52:	e7c7      	b.n	800bce4 <_printf_common+0x58>
 800bd54:	2301      	movs	r3, #1
 800bd56:	4622      	mov	r2, r4
 800bd58:	4641      	mov	r1, r8
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	47c8      	blx	r9
 800bd5e:	3001      	adds	r0, #1
 800bd60:	d0e6      	beq.n	800bd30 <_printf_common+0xa4>
 800bd62:	3601      	adds	r6, #1
 800bd64:	e7d9      	b.n	800bd1a <_printf_common+0x8e>
	...

0800bd68 <_printf_i>:
 800bd68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd6c:	7e0f      	ldrb	r7, [r1, #24]
 800bd6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd70:	2f78      	cmp	r7, #120	@ 0x78
 800bd72:	4691      	mov	r9, r2
 800bd74:	4680      	mov	r8, r0
 800bd76:	460c      	mov	r4, r1
 800bd78:	469a      	mov	sl, r3
 800bd7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd7e:	d807      	bhi.n	800bd90 <_printf_i+0x28>
 800bd80:	2f62      	cmp	r7, #98	@ 0x62
 800bd82:	d80a      	bhi.n	800bd9a <_printf_i+0x32>
 800bd84:	2f00      	cmp	r7, #0
 800bd86:	f000 80d2 	beq.w	800bf2e <_printf_i+0x1c6>
 800bd8a:	2f58      	cmp	r7, #88	@ 0x58
 800bd8c:	f000 80b9 	beq.w	800bf02 <_printf_i+0x19a>
 800bd90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd98:	e03a      	b.n	800be10 <_printf_i+0xa8>
 800bd9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd9e:	2b15      	cmp	r3, #21
 800bda0:	d8f6      	bhi.n	800bd90 <_printf_i+0x28>
 800bda2:	a101      	add	r1, pc, #4	@ (adr r1, 800bda8 <_printf_i+0x40>)
 800bda4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bda8:	0800be01 	.word	0x0800be01
 800bdac:	0800be15 	.word	0x0800be15
 800bdb0:	0800bd91 	.word	0x0800bd91
 800bdb4:	0800bd91 	.word	0x0800bd91
 800bdb8:	0800bd91 	.word	0x0800bd91
 800bdbc:	0800bd91 	.word	0x0800bd91
 800bdc0:	0800be15 	.word	0x0800be15
 800bdc4:	0800bd91 	.word	0x0800bd91
 800bdc8:	0800bd91 	.word	0x0800bd91
 800bdcc:	0800bd91 	.word	0x0800bd91
 800bdd0:	0800bd91 	.word	0x0800bd91
 800bdd4:	0800bf15 	.word	0x0800bf15
 800bdd8:	0800be3f 	.word	0x0800be3f
 800bddc:	0800becf 	.word	0x0800becf
 800bde0:	0800bd91 	.word	0x0800bd91
 800bde4:	0800bd91 	.word	0x0800bd91
 800bde8:	0800bf37 	.word	0x0800bf37
 800bdec:	0800bd91 	.word	0x0800bd91
 800bdf0:	0800be3f 	.word	0x0800be3f
 800bdf4:	0800bd91 	.word	0x0800bd91
 800bdf8:	0800bd91 	.word	0x0800bd91
 800bdfc:	0800bed7 	.word	0x0800bed7
 800be00:	6833      	ldr	r3, [r6, #0]
 800be02:	1d1a      	adds	r2, r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6032      	str	r2, [r6, #0]
 800be08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be10:	2301      	movs	r3, #1
 800be12:	e09d      	b.n	800bf50 <_printf_i+0x1e8>
 800be14:	6833      	ldr	r3, [r6, #0]
 800be16:	6820      	ldr	r0, [r4, #0]
 800be18:	1d19      	adds	r1, r3, #4
 800be1a:	6031      	str	r1, [r6, #0]
 800be1c:	0606      	lsls	r6, r0, #24
 800be1e:	d501      	bpl.n	800be24 <_printf_i+0xbc>
 800be20:	681d      	ldr	r5, [r3, #0]
 800be22:	e003      	b.n	800be2c <_printf_i+0xc4>
 800be24:	0645      	lsls	r5, r0, #25
 800be26:	d5fb      	bpl.n	800be20 <_printf_i+0xb8>
 800be28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be2c:	2d00      	cmp	r5, #0
 800be2e:	da03      	bge.n	800be38 <_printf_i+0xd0>
 800be30:	232d      	movs	r3, #45	@ 0x2d
 800be32:	426d      	negs	r5, r5
 800be34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be38:	4859      	ldr	r0, [pc, #356]	@ (800bfa0 <_printf_i+0x238>)
 800be3a:	230a      	movs	r3, #10
 800be3c:	e011      	b.n	800be62 <_printf_i+0xfa>
 800be3e:	6821      	ldr	r1, [r4, #0]
 800be40:	6833      	ldr	r3, [r6, #0]
 800be42:	0608      	lsls	r0, r1, #24
 800be44:	f853 5b04 	ldr.w	r5, [r3], #4
 800be48:	d402      	bmi.n	800be50 <_printf_i+0xe8>
 800be4a:	0649      	lsls	r1, r1, #25
 800be4c:	bf48      	it	mi
 800be4e:	b2ad      	uxthmi	r5, r5
 800be50:	2f6f      	cmp	r7, #111	@ 0x6f
 800be52:	4853      	ldr	r0, [pc, #332]	@ (800bfa0 <_printf_i+0x238>)
 800be54:	6033      	str	r3, [r6, #0]
 800be56:	bf14      	ite	ne
 800be58:	230a      	movne	r3, #10
 800be5a:	2308      	moveq	r3, #8
 800be5c:	2100      	movs	r1, #0
 800be5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be62:	6866      	ldr	r6, [r4, #4]
 800be64:	60a6      	str	r6, [r4, #8]
 800be66:	2e00      	cmp	r6, #0
 800be68:	bfa2      	ittt	ge
 800be6a:	6821      	ldrge	r1, [r4, #0]
 800be6c:	f021 0104 	bicge.w	r1, r1, #4
 800be70:	6021      	strge	r1, [r4, #0]
 800be72:	b90d      	cbnz	r5, 800be78 <_printf_i+0x110>
 800be74:	2e00      	cmp	r6, #0
 800be76:	d04b      	beq.n	800bf10 <_printf_i+0x1a8>
 800be78:	4616      	mov	r6, r2
 800be7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800be7e:	fb03 5711 	mls	r7, r3, r1, r5
 800be82:	5dc7      	ldrb	r7, [r0, r7]
 800be84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be88:	462f      	mov	r7, r5
 800be8a:	42bb      	cmp	r3, r7
 800be8c:	460d      	mov	r5, r1
 800be8e:	d9f4      	bls.n	800be7a <_printf_i+0x112>
 800be90:	2b08      	cmp	r3, #8
 800be92:	d10b      	bne.n	800beac <_printf_i+0x144>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	07df      	lsls	r7, r3, #31
 800be98:	d508      	bpl.n	800beac <_printf_i+0x144>
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	6861      	ldr	r1, [r4, #4]
 800be9e:	4299      	cmp	r1, r3
 800bea0:	bfde      	ittt	le
 800bea2:	2330      	movle	r3, #48	@ 0x30
 800bea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800beac:	1b92      	subs	r2, r2, r6
 800beae:	6122      	str	r2, [r4, #16]
 800beb0:	f8cd a000 	str.w	sl, [sp]
 800beb4:	464b      	mov	r3, r9
 800beb6:	aa03      	add	r2, sp, #12
 800beb8:	4621      	mov	r1, r4
 800beba:	4640      	mov	r0, r8
 800bebc:	f7ff fee6 	bl	800bc8c <_printf_common>
 800bec0:	3001      	adds	r0, #1
 800bec2:	d14a      	bne.n	800bf5a <_printf_i+0x1f2>
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	b004      	add	sp, #16
 800beca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	f043 0320 	orr.w	r3, r3, #32
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	4833      	ldr	r0, [pc, #204]	@ (800bfa4 <_printf_i+0x23c>)
 800bed8:	2778      	movs	r7, #120	@ 0x78
 800beda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	6831      	ldr	r1, [r6, #0]
 800bee2:	061f      	lsls	r7, r3, #24
 800bee4:	f851 5b04 	ldr.w	r5, [r1], #4
 800bee8:	d402      	bmi.n	800bef0 <_printf_i+0x188>
 800beea:	065f      	lsls	r7, r3, #25
 800beec:	bf48      	it	mi
 800beee:	b2ad      	uxthmi	r5, r5
 800bef0:	6031      	str	r1, [r6, #0]
 800bef2:	07d9      	lsls	r1, r3, #31
 800bef4:	bf44      	itt	mi
 800bef6:	f043 0320 	orrmi.w	r3, r3, #32
 800befa:	6023      	strmi	r3, [r4, #0]
 800befc:	b11d      	cbz	r5, 800bf06 <_printf_i+0x19e>
 800befe:	2310      	movs	r3, #16
 800bf00:	e7ac      	b.n	800be5c <_printf_i+0xf4>
 800bf02:	4827      	ldr	r0, [pc, #156]	@ (800bfa0 <_printf_i+0x238>)
 800bf04:	e7e9      	b.n	800beda <_printf_i+0x172>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	f023 0320 	bic.w	r3, r3, #32
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	e7f6      	b.n	800befe <_printf_i+0x196>
 800bf10:	4616      	mov	r6, r2
 800bf12:	e7bd      	b.n	800be90 <_printf_i+0x128>
 800bf14:	6833      	ldr	r3, [r6, #0]
 800bf16:	6825      	ldr	r5, [r4, #0]
 800bf18:	6961      	ldr	r1, [r4, #20]
 800bf1a:	1d18      	adds	r0, r3, #4
 800bf1c:	6030      	str	r0, [r6, #0]
 800bf1e:	062e      	lsls	r6, r5, #24
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	d501      	bpl.n	800bf28 <_printf_i+0x1c0>
 800bf24:	6019      	str	r1, [r3, #0]
 800bf26:	e002      	b.n	800bf2e <_printf_i+0x1c6>
 800bf28:	0668      	lsls	r0, r5, #25
 800bf2a:	d5fb      	bpl.n	800bf24 <_printf_i+0x1bc>
 800bf2c:	8019      	strh	r1, [r3, #0]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	6123      	str	r3, [r4, #16]
 800bf32:	4616      	mov	r6, r2
 800bf34:	e7bc      	b.n	800beb0 <_printf_i+0x148>
 800bf36:	6833      	ldr	r3, [r6, #0]
 800bf38:	1d1a      	adds	r2, r3, #4
 800bf3a:	6032      	str	r2, [r6, #0]
 800bf3c:	681e      	ldr	r6, [r3, #0]
 800bf3e:	6862      	ldr	r2, [r4, #4]
 800bf40:	2100      	movs	r1, #0
 800bf42:	4630      	mov	r0, r6
 800bf44:	f7f4 f944 	bl	80001d0 <memchr>
 800bf48:	b108      	cbz	r0, 800bf4e <_printf_i+0x1e6>
 800bf4a:	1b80      	subs	r0, r0, r6
 800bf4c:	6060      	str	r0, [r4, #4]
 800bf4e:	6863      	ldr	r3, [r4, #4]
 800bf50:	6123      	str	r3, [r4, #16]
 800bf52:	2300      	movs	r3, #0
 800bf54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf58:	e7aa      	b.n	800beb0 <_printf_i+0x148>
 800bf5a:	6923      	ldr	r3, [r4, #16]
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	4649      	mov	r1, r9
 800bf60:	4640      	mov	r0, r8
 800bf62:	47d0      	blx	sl
 800bf64:	3001      	adds	r0, #1
 800bf66:	d0ad      	beq.n	800bec4 <_printf_i+0x15c>
 800bf68:	6823      	ldr	r3, [r4, #0]
 800bf6a:	079b      	lsls	r3, r3, #30
 800bf6c:	d413      	bmi.n	800bf96 <_printf_i+0x22e>
 800bf6e:	68e0      	ldr	r0, [r4, #12]
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	4298      	cmp	r0, r3
 800bf74:	bfb8      	it	lt
 800bf76:	4618      	movlt	r0, r3
 800bf78:	e7a6      	b.n	800bec8 <_printf_i+0x160>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	4632      	mov	r2, r6
 800bf7e:	4649      	mov	r1, r9
 800bf80:	4640      	mov	r0, r8
 800bf82:	47d0      	blx	sl
 800bf84:	3001      	adds	r0, #1
 800bf86:	d09d      	beq.n	800bec4 <_printf_i+0x15c>
 800bf88:	3501      	adds	r5, #1
 800bf8a:	68e3      	ldr	r3, [r4, #12]
 800bf8c:	9903      	ldr	r1, [sp, #12]
 800bf8e:	1a5b      	subs	r3, r3, r1
 800bf90:	42ab      	cmp	r3, r5
 800bf92:	dcf2      	bgt.n	800bf7a <_printf_i+0x212>
 800bf94:	e7eb      	b.n	800bf6e <_printf_i+0x206>
 800bf96:	2500      	movs	r5, #0
 800bf98:	f104 0619 	add.w	r6, r4, #25
 800bf9c:	e7f5      	b.n	800bf8a <_printf_i+0x222>
 800bf9e:	bf00      	nop
 800bfa0:	08011473 	.word	0x08011473
 800bfa4:	08011484 	.word	0x08011484

0800bfa8 <_scanf_float>:
 800bfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfac:	b087      	sub	sp, #28
 800bfae:	4617      	mov	r7, r2
 800bfb0:	9303      	str	r3, [sp, #12]
 800bfb2:	688b      	ldr	r3, [r1, #8]
 800bfb4:	1e5a      	subs	r2, r3, #1
 800bfb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bfba:	bf81      	itttt	hi
 800bfbc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bfc0:	eb03 0b05 	addhi.w	fp, r3, r5
 800bfc4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bfc8:	608b      	strhi	r3, [r1, #8]
 800bfca:	680b      	ldr	r3, [r1, #0]
 800bfcc:	460a      	mov	r2, r1
 800bfce:	f04f 0500 	mov.w	r5, #0
 800bfd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bfd6:	f842 3b1c 	str.w	r3, [r2], #28
 800bfda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bfde:	4680      	mov	r8, r0
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	bf98      	it	ls
 800bfe4:	f04f 0b00 	movls.w	fp, #0
 800bfe8:	9201      	str	r2, [sp, #4]
 800bfea:	4616      	mov	r6, r2
 800bfec:	46aa      	mov	sl, r5
 800bfee:	46a9      	mov	r9, r5
 800bff0:	9502      	str	r5, [sp, #8]
 800bff2:	68a2      	ldr	r2, [r4, #8]
 800bff4:	b152      	cbz	r2, 800c00c <_scanf_float+0x64>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	2b4e      	cmp	r3, #78	@ 0x4e
 800bffc:	d864      	bhi.n	800c0c8 <_scanf_float+0x120>
 800bffe:	2b40      	cmp	r3, #64	@ 0x40
 800c000:	d83c      	bhi.n	800c07c <_scanf_float+0xd4>
 800c002:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c006:	b2c8      	uxtb	r0, r1
 800c008:	280e      	cmp	r0, #14
 800c00a:	d93a      	bls.n	800c082 <_scanf_float+0xda>
 800c00c:	f1b9 0f00 	cmp.w	r9, #0
 800c010:	d003      	beq.n	800c01a <_scanf_float+0x72>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c01e:	f1ba 0f01 	cmp.w	sl, #1
 800c022:	f200 8117 	bhi.w	800c254 <_scanf_float+0x2ac>
 800c026:	9b01      	ldr	r3, [sp, #4]
 800c028:	429e      	cmp	r6, r3
 800c02a:	f200 8108 	bhi.w	800c23e <_scanf_float+0x296>
 800c02e:	2001      	movs	r0, #1
 800c030:	b007      	add	sp, #28
 800c032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c036:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c03a:	2a0d      	cmp	r2, #13
 800c03c:	d8e6      	bhi.n	800c00c <_scanf_float+0x64>
 800c03e:	a101      	add	r1, pc, #4	@ (adr r1, 800c044 <_scanf_float+0x9c>)
 800c040:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c044:	0800c18b 	.word	0x0800c18b
 800c048:	0800c00d 	.word	0x0800c00d
 800c04c:	0800c00d 	.word	0x0800c00d
 800c050:	0800c00d 	.word	0x0800c00d
 800c054:	0800c1eb 	.word	0x0800c1eb
 800c058:	0800c1c3 	.word	0x0800c1c3
 800c05c:	0800c00d 	.word	0x0800c00d
 800c060:	0800c00d 	.word	0x0800c00d
 800c064:	0800c199 	.word	0x0800c199
 800c068:	0800c00d 	.word	0x0800c00d
 800c06c:	0800c00d 	.word	0x0800c00d
 800c070:	0800c00d 	.word	0x0800c00d
 800c074:	0800c00d 	.word	0x0800c00d
 800c078:	0800c151 	.word	0x0800c151
 800c07c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c080:	e7db      	b.n	800c03a <_scanf_float+0x92>
 800c082:	290e      	cmp	r1, #14
 800c084:	d8c2      	bhi.n	800c00c <_scanf_float+0x64>
 800c086:	a001      	add	r0, pc, #4	@ (adr r0, 800c08c <_scanf_float+0xe4>)
 800c088:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c08c:	0800c141 	.word	0x0800c141
 800c090:	0800c00d 	.word	0x0800c00d
 800c094:	0800c141 	.word	0x0800c141
 800c098:	0800c1d7 	.word	0x0800c1d7
 800c09c:	0800c00d 	.word	0x0800c00d
 800c0a0:	0800c0e9 	.word	0x0800c0e9
 800c0a4:	0800c127 	.word	0x0800c127
 800c0a8:	0800c127 	.word	0x0800c127
 800c0ac:	0800c127 	.word	0x0800c127
 800c0b0:	0800c127 	.word	0x0800c127
 800c0b4:	0800c127 	.word	0x0800c127
 800c0b8:	0800c127 	.word	0x0800c127
 800c0bc:	0800c127 	.word	0x0800c127
 800c0c0:	0800c127 	.word	0x0800c127
 800c0c4:	0800c127 	.word	0x0800c127
 800c0c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800c0ca:	d809      	bhi.n	800c0e0 <_scanf_float+0x138>
 800c0cc:	2b60      	cmp	r3, #96	@ 0x60
 800c0ce:	d8b2      	bhi.n	800c036 <_scanf_float+0x8e>
 800c0d0:	2b54      	cmp	r3, #84	@ 0x54
 800c0d2:	d07b      	beq.n	800c1cc <_scanf_float+0x224>
 800c0d4:	2b59      	cmp	r3, #89	@ 0x59
 800c0d6:	d199      	bne.n	800c00c <_scanf_float+0x64>
 800c0d8:	2d07      	cmp	r5, #7
 800c0da:	d197      	bne.n	800c00c <_scanf_float+0x64>
 800c0dc:	2508      	movs	r5, #8
 800c0de:	e02c      	b.n	800c13a <_scanf_float+0x192>
 800c0e0:	2b74      	cmp	r3, #116	@ 0x74
 800c0e2:	d073      	beq.n	800c1cc <_scanf_float+0x224>
 800c0e4:	2b79      	cmp	r3, #121	@ 0x79
 800c0e6:	e7f6      	b.n	800c0d6 <_scanf_float+0x12e>
 800c0e8:	6821      	ldr	r1, [r4, #0]
 800c0ea:	05c8      	lsls	r0, r1, #23
 800c0ec:	d51b      	bpl.n	800c126 <_scanf_float+0x17e>
 800c0ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c0f2:	6021      	str	r1, [r4, #0]
 800c0f4:	f109 0901 	add.w	r9, r9, #1
 800c0f8:	f1bb 0f00 	cmp.w	fp, #0
 800c0fc:	d003      	beq.n	800c106 <_scanf_float+0x15e>
 800c0fe:	3201      	adds	r2, #1
 800c100:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c104:	60a2      	str	r2, [r4, #8]
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	3b01      	subs	r3, #1
 800c10a:	60a3      	str	r3, [r4, #8]
 800c10c:	6923      	ldr	r3, [r4, #16]
 800c10e:	3301      	adds	r3, #1
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	3b01      	subs	r3, #1
 800c116:	2b00      	cmp	r3, #0
 800c118:	607b      	str	r3, [r7, #4]
 800c11a:	f340 8087 	ble.w	800c22c <_scanf_float+0x284>
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	3301      	adds	r3, #1
 800c122:	603b      	str	r3, [r7, #0]
 800c124:	e765      	b.n	800bff2 <_scanf_float+0x4a>
 800c126:	eb1a 0105 	adds.w	r1, sl, r5
 800c12a:	f47f af6f 	bne.w	800c00c <_scanf_float+0x64>
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c134:	6022      	str	r2, [r4, #0]
 800c136:	460d      	mov	r5, r1
 800c138:	468a      	mov	sl, r1
 800c13a:	f806 3b01 	strb.w	r3, [r6], #1
 800c13e:	e7e2      	b.n	800c106 <_scanf_float+0x15e>
 800c140:	6822      	ldr	r2, [r4, #0]
 800c142:	0610      	lsls	r0, r2, #24
 800c144:	f57f af62 	bpl.w	800c00c <_scanf_float+0x64>
 800c148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c14c:	6022      	str	r2, [r4, #0]
 800c14e:	e7f4      	b.n	800c13a <_scanf_float+0x192>
 800c150:	f1ba 0f00 	cmp.w	sl, #0
 800c154:	d10e      	bne.n	800c174 <_scanf_float+0x1cc>
 800c156:	f1b9 0f00 	cmp.w	r9, #0
 800c15a:	d10e      	bne.n	800c17a <_scanf_float+0x1d2>
 800c15c:	6822      	ldr	r2, [r4, #0]
 800c15e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c162:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c166:	d108      	bne.n	800c17a <_scanf_float+0x1d2>
 800c168:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c16c:	6022      	str	r2, [r4, #0]
 800c16e:	f04f 0a01 	mov.w	sl, #1
 800c172:	e7e2      	b.n	800c13a <_scanf_float+0x192>
 800c174:	f1ba 0f02 	cmp.w	sl, #2
 800c178:	d055      	beq.n	800c226 <_scanf_float+0x27e>
 800c17a:	2d01      	cmp	r5, #1
 800c17c:	d002      	beq.n	800c184 <_scanf_float+0x1dc>
 800c17e:	2d04      	cmp	r5, #4
 800c180:	f47f af44 	bne.w	800c00c <_scanf_float+0x64>
 800c184:	3501      	adds	r5, #1
 800c186:	b2ed      	uxtb	r5, r5
 800c188:	e7d7      	b.n	800c13a <_scanf_float+0x192>
 800c18a:	f1ba 0f01 	cmp.w	sl, #1
 800c18e:	f47f af3d 	bne.w	800c00c <_scanf_float+0x64>
 800c192:	f04f 0a02 	mov.w	sl, #2
 800c196:	e7d0      	b.n	800c13a <_scanf_float+0x192>
 800c198:	b97d      	cbnz	r5, 800c1ba <_scanf_float+0x212>
 800c19a:	f1b9 0f00 	cmp.w	r9, #0
 800c19e:	f47f af38 	bne.w	800c012 <_scanf_float+0x6a>
 800c1a2:	6822      	ldr	r2, [r4, #0]
 800c1a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c1a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c1ac:	f040 8108 	bne.w	800c3c0 <_scanf_float+0x418>
 800c1b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c1b4:	6022      	str	r2, [r4, #0]
 800c1b6:	2501      	movs	r5, #1
 800c1b8:	e7bf      	b.n	800c13a <_scanf_float+0x192>
 800c1ba:	2d03      	cmp	r5, #3
 800c1bc:	d0e2      	beq.n	800c184 <_scanf_float+0x1dc>
 800c1be:	2d05      	cmp	r5, #5
 800c1c0:	e7de      	b.n	800c180 <_scanf_float+0x1d8>
 800c1c2:	2d02      	cmp	r5, #2
 800c1c4:	f47f af22 	bne.w	800c00c <_scanf_float+0x64>
 800c1c8:	2503      	movs	r5, #3
 800c1ca:	e7b6      	b.n	800c13a <_scanf_float+0x192>
 800c1cc:	2d06      	cmp	r5, #6
 800c1ce:	f47f af1d 	bne.w	800c00c <_scanf_float+0x64>
 800c1d2:	2507      	movs	r5, #7
 800c1d4:	e7b1      	b.n	800c13a <_scanf_float+0x192>
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	0591      	lsls	r1, r2, #22
 800c1da:	f57f af17 	bpl.w	800c00c <_scanf_float+0x64>
 800c1de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c1e2:	6022      	str	r2, [r4, #0]
 800c1e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800c1e8:	e7a7      	b.n	800c13a <_scanf_float+0x192>
 800c1ea:	6822      	ldr	r2, [r4, #0]
 800c1ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c1f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c1f4:	d006      	beq.n	800c204 <_scanf_float+0x25c>
 800c1f6:	0550      	lsls	r0, r2, #21
 800c1f8:	f57f af08 	bpl.w	800c00c <_scanf_float+0x64>
 800c1fc:	f1b9 0f00 	cmp.w	r9, #0
 800c200:	f000 80de 	beq.w	800c3c0 <_scanf_float+0x418>
 800c204:	0591      	lsls	r1, r2, #22
 800c206:	bf58      	it	pl
 800c208:	9902      	ldrpl	r1, [sp, #8]
 800c20a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c20e:	bf58      	it	pl
 800c210:	eba9 0101 	subpl.w	r1, r9, r1
 800c214:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c218:	bf58      	it	pl
 800c21a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c21e:	6022      	str	r2, [r4, #0]
 800c220:	f04f 0900 	mov.w	r9, #0
 800c224:	e789      	b.n	800c13a <_scanf_float+0x192>
 800c226:	f04f 0a03 	mov.w	sl, #3
 800c22a:	e786      	b.n	800c13a <_scanf_float+0x192>
 800c22c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c230:	4639      	mov	r1, r7
 800c232:	4640      	mov	r0, r8
 800c234:	4798      	blx	r3
 800c236:	2800      	cmp	r0, #0
 800c238:	f43f aedb 	beq.w	800bff2 <_scanf_float+0x4a>
 800c23c:	e6e6      	b.n	800c00c <_scanf_float+0x64>
 800c23e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c246:	463a      	mov	r2, r7
 800c248:	4640      	mov	r0, r8
 800c24a:	4798      	blx	r3
 800c24c:	6923      	ldr	r3, [r4, #16]
 800c24e:	3b01      	subs	r3, #1
 800c250:	6123      	str	r3, [r4, #16]
 800c252:	e6e8      	b.n	800c026 <_scanf_float+0x7e>
 800c254:	1e6b      	subs	r3, r5, #1
 800c256:	2b06      	cmp	r3, #6
 800c258:	d824      	bhi.n	800c2a4 <_scanf_float+0x2fc>
 800c25a:	2d02      	cmp	r5, #2
 800c25c:	d836      	bhi.n	800c2cc <_scanf_float+0x324>
 800c25e:	9b01      	ldr	r3, [sp, #4]
 800c260:	429e      	cmp	r6, r3
 800c262:	f67f aee4 	bls.w	800c02e <_scanf_float+0x86>
 800c266:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c26a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c26e:	463a      	mov	r2, r7
 800c270:	4640      	mov	r0, r8
 800c272:	4798      	blx	r3
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	3b01      	subs	r3, #1
 800c278:	6123      	str	r3, [r4, #16]
 800c27a:	e7f0      	b.n	800c25e <_scanf_float+0x2b6>
 800c27c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c280:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c284:	463a      	mov	r2, r7
 800c286:	4640      	mov	r0, r8
 800c288:	4798      	blx	r3
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	6123      	str	r3, [r4, #16]
 800c290:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c294:	fa5f fa8a 	uxtb.w	sl, sl
 800c298:	f1ba 0f02 	cmp.w	sl, #2
 800c29c:	d1ee      	bne.n	800c27c <_scanf_float+0x2d4>
 800c29e:	3d03      	subs	r5, #3
 800c2a0:	b2ed      	uxtb	r5, r5
 800c2a2:	1b76      	subs	r6, r6, r5
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	05da      	lsls	r2, r3, #23
 800c2a8:	d530      	bpl.n	800c30c <_scanf_float+0x364>
 800c2aa:	055b      	lsls	r3, r3, #21
 800c2ac:	d511      	bpl.n	800c2d2 <_scanf_float+0x32a>
 800c2ae:	9b01      	ldr	r3, [sp, #4]
 800c2b0:	429e      	cmp	r6, r3
 800c2b2:	f67f aebc 	bls.w	800c02e <_scanf_float+0x86>
 800c2b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2be:	463a      	mov	r2, r7
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	4798      	blx	r3
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	6123      	str	r3, [r4, #16]
 800c2ca:	e7f0      	b.n	800c2ae <_scanf_float+0x306>
 800c2cc:	46aa      	mov	sl, r5
 800c2ce:	46b3      	mov	fp, r6
 800c2d0:	e7de      	b.n	800c290 <_scanf_float+0x2e8>
 800c2d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c2d6:	6923      	ldr	r3, [r4, #16]
 800c2d8:	2965      	cmp	r1, #101	@ 0x65
 800c2da:	f103 33ff 	add.w	r3, r3, #4294967295
 800c2de:	f106 35ff 	add.w	r5, r6, #4294967295
 800c2e2:	6123      	str	r3, [r4, #16]
 800c2e4:	d00c      	beq.n	800c300 <_scanf_float+0x358>
 800c2e6:	2945      	cmp	r1, #69	@ 0x45
 800c2e8:	d00a      	beq.n	800c300 <_scanf_float+0x358>
 800c2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2ee:	463a      	mov	r2, r7
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4798      	blx	r3
 800c2f4:	6923      	ldr	r3, [r4, #16]
 800c2f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	1eb5      	subs	r5, r6, #2
 800c2fe:	6123      	str	r3, [r4, #16]
 800c300:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c304:	463a      	mov	r2, r7
 800c306:	4640      	mov	r0, r8
 800c308:	4798      	blx	r3
 800c30a:	462e      	mov	r6, r5
 800c30c:	6822      	ldr	r2, [r4, #0]
 800c30e:	f012 0210 	ands.w	r2, r2, #16
 800c312:	d001      	beq.n	800c318 <_scanf_float+0x370>
 800c314:	2000      	movs	r0, #0
 800c316:	e68b      	b.n	800c030 <_scanf_float+0x88>
 800c318:	7032      	strb	r2, [r6, #0]
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c324:	d11c      	bne.n	800c360 <_scanf_float+0x3b8>
 800c326:	9b02      	ldr	r3, [sp, #8]
 800c328:	454b      	cmp	r3, r9
 800c32a:	eba3 0209 	sub.w	r2, r3, r9
 800c32e:	d123      	bne.n	800c378 <_scanf_float+0x3d0>
 800c330:	9901      	ldr	r1, [sp, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	4640      	mov	r0, r8
 800c336:	f7ff f947 	bl	800b5c8 <_strtod_r>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	6821      	ldr	r1, [r4, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f011 0f02 	tst.w	r1, #2
 800c344:	ec57 6b10 	vmov	r6, r7, d0
 800c348:	f103 0204 	add.w	r2, r3, #4
 800c34c:	d01f      	beq.n	800c38e <_scanf_float+0x3e6>
 800c34e:	9903      	ldr	r1, [sp, #12]
 800c350:	600a      	str	r2, [r1, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	e9c3 6700 	strd	r6, r7, [r3]
 800c358:	68e3      	ldr	r3, [r4, #12]
 800c35a:	3301      	adds	r3, #1
 800c35c:	60e3      	str	r3, [r4, #12]
 800c35e:	e7d9      	b.n	800c314 <_scanf_float+0x36c>
 800c360:	9b04      	ldr	r3, [sp, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0e4      	beq.n	800c330 <_scanf_float+0x388>
 800c366:	9905      	ldr	r1, [sp, #20]
 800c368:	230a      	movs	r3, #10
 800c36a:	3101      	adds	r1, #1
 800c36c:	4640      	mov	r0, r8
 800c36e:	f7ff f9b7 	bl	800b6e0 <_strtol_r>
 800c372:	9b04      	ldr	r3, [sp, #16]
 800c374:	9e05      	ldr	r6, [sp, #20]
 800c376:	1ac2      	subs	r2, r0, r3
 800c378:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c37c:	429e      	cmp	r6, r3
 800c37e:	bf28      	it	cs
 800c380:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c384:	4910      	ldr	r1, [pc, #64]	@ (800c3c8 <_scanf_float+0x420>)
 800c386:	4630      	mov	r0, r6
 800c388:	f000 f8e4 	bl	800c554 <siprintf>
 800c38c:	e7d0      	b.n	800c330 <_scanf_float+0x388>
 800c38e:	f011 0f04 	tst.w	r1, #4
 800c392:	9903      	ldr	r1, [sp, #12]
 800c394:	600a      	str	r2, [r1, #0]
 800c396:	d1dc      	bne.n	800c352 <_scanf_float+0x3aa>
 800c398:	681d      	ldr	r5, [r3, #0]
 800c39a:	4632      	mov	r2, r6
 800c39c:	463b      	mov	r3, r7
 800c39e:	4630      	mov	r0, r6
 800c3a0:	4639      	mov	r1, r7
 800c3a2:	f7f4 fbc3 	bl	8000b2c <__aeabi_dcmpun>
 800c3a6:	b128      	cbz	r0, 800c3b4 <_scanf_float+0x40c>
 800c3a8:	4808      	ldr	r0, [pc, #32]	@ (800c3cc <_scanf_float+0x424>)
 800c3aa:	f000 fa3d 	bl	800c828 <nanf>
 800c3ae:	ed85 0a00 	vstr	s0, [r5]
 800c3b2:	e7d1      	b.n	800c358 <_scanf_float+0x3b0>
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	4639      	mov	r1, r7
 800c3b8:	f7f4 fc16 	bl	8000be8 <__aeabi_d2f>
 800c3bc:	6028      	str	r0, [r5, #0]
 800c3be:	e7cb      	b.n	800c358 <_scanf_float+0x3b0>
 800c3c0:	f04f 0900 	mov.w	r9, #0
 800c3c4:	e629      	b.n	800c01a <_scanf_float+0x72>
 800c3c6:	bf00      	nop
 800c3c8:	08011495 	.word	0x08011495
 800c3cc:	0801154e 	.word	0x0801154e

0800c3d0 <std>:
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	b510      	push	{r4, lr}
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c3da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3de:	6083      	str	r3, [r0, #8]
 800c3e0:	8181      	strh	r1, [r0, #12]
 800c3e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3e4:	81c2      	strh	r2, [r0, #14]
 800c3e6:	6183      	str	r3, [r0, #24]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	2208      	movs	r2, #8
 800c3ec:	305c      	adds	r0, #92	@ 0x5c
 800c3ee:	f000 f914 	bl	800c61a <memset>
 800c3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c428 <std+0x58>)
 800c3f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c42c <std+0x5c>)
 800c3f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c430 <std+0x60>)
 800c3fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c434 <std+0x64>)
 800c400:	6323      	str	r3, [r4, #48]	@ 0x30
 800c402:	4b0d      	ldr	r3, [pc, #52]	@ (800c438 <std+0x68>)
 800c404:	6224      	str	r4, [r4, #32]
 800c406:	429c      	cmp	r4, r3
 800c408:	d006      	beq.n	800c418 <std+0x48>
 800c40a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c40e:	4294      	cmp	r4, r2
 800c410:	d002      	beq.n	800c418 <std+0x48>
 800c412:	33d0      	adds	r3, #208	@ 0xd0
 800c414:	429c      	cmp	r4, r3
 800c416:	d105      	bne.n	800c424 <std+0x54>
 800c418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c420:	f000 b9e6 	b.w	800c7f0 <__retarget_lock_init_recursive>
 800c424:	bd10      	pop	{r4, pc}
 800c426:	bf00      	nop
 800c428:	0800c595 	.word	0x0800c595
 800c42c:	0800c5b7 	.word	0x0800c5b7
 800c430:	0800c5ef 	.word	0x0800c5ef
 800c434:	0800c613 	.word	0x0800c613
 800c438:	20000718 	.word	0x20000718

0800c43c <stdio_exit_handler>:
 800c43c:	4a02      	ldr	r2, [pc, #8]	@ (800c448 <stdio_exit_handler+0xc>)
 800c43e:	4903      	ldr	r1, [pc, #12]	@ (800c44c <stdio_exit_handler+0x10>)
 800c440:	4803      	ldr	r0, [pc, #12]	@ (800c450 <stdio_exit_handler+0x14>)
 800c442:	f000 b869 	b.w	800c518 <_fwalk_sglue>
 800c446:	bf00      	nop
 800c448:	200000d8 	.word	0x200000d8
 800c44c:	0800ead5 	.word	0x0800ead5
 800c450:	20000254 	.word	0x20000254

0800c454 <cleanup_stdio>:
 800c454:	6841      	ldr	r1, [r0, #4]
 800c456:	4b0c      	ldr	r3, [pc, #48]	@ (800c488 <cleanup_stdio+0x34>)
 800c458:	4299      	cmp	r1, r3
 800c45a:	b510      	push	{r4, lr}
 800c45c:	4604      	mov	r4, r0
 800c45e:	d001      	beq.n	800c464 <cleanup_stdio+0x10>
 800c460:	f002 fb38 	bl	800ead4 <_fflush_r>
 800c464:	68a1      	ldr	r1, [r4, #8]
 800c466:	4b09      	ldr	r3, [pc, #36]	@ (800c48c <cleanup_stdio+0x38>)
 800c468:	4299      	cmp	r1, r3
 800c46a:	d002      	beq.n	800c472 <cleanup_stdio+0x1e>
 800c46c:	4620      	mov	r0, r4
 800c46e:	f002 fb31 	bl	800ead4 <_fflush_r>
 800c472:	68e1      	ldr	r1, [r4, #12]
 800c474:	4b06      	ldr	r3, [pc, #24]	@ (800c490 <cleanup_stdio+0x3c>)
 800c476:	4299      	cmp	r1, r3
 800c478:	d004      	beq.n	800c484 <cleanup_stdio+0x30>
 800c47a:	4620      	mov	r0, r4
 800c47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c480:	f002 bb28 	b.w	800ead4 <_fflush_r>
 800c484:	bd10      	pop	{r4, pc}
 800c486:	bf00      	nop
 800c488:	20000718 	.word	0x20000718
 800c48c:	20000780 	.word	0x20000780
 800c490:	200007e8 	.word	0x200007e8

0800c494 <global_stdio_init.part.0>:
 800c494:	b510      	push	{r4, lr}
 800c496:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c4 <global_stdio_init.part.0+0x30>)
 800c498:	4c0b      	ldr	r4, [pc, #44]	@ (800c4c8 <global_stdio_init.part.0+0x34>)
 800c49a:	4a0c      	ldr	r2, [pc, #48]	@ (800c4cc <global_stdio_init.part.0+0x38>)
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2104      	movs	r1, #4
 800c4a4:	f7ff ff94 	bl	800c3d0 <std>
 800c4a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	2109      	movs	r1, #9
 800c4b0:	f7ff ff8e 	bl	800c3d0 <std>
 800c4b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c4b8:	2202      	movs	r2, #2
 800c4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4be:	2112      	movs	r1, #18
 800c4c0:	f7ff bf86 	b.w	800c3d0 <std>
 800c4c4:	20000850 	.word	0x20000850
 800c4c8:	20000718 	.word	0x20000718
 800c4cc:	0800c43d 	.word	0x0800c43d

0800c4d0 <__sfp_lock_acquire>:
 800c4d0:	4801      	ldr	r0, [pc, #4]	@ (800c4d8 <__sfp_lock_acquire+0x8>)
 800c4d2:	f000 b98e 	b.w	800c7f2 <__retarget_lock_acquire_recursive>
 800c4d6:	bf00      	nop
 800c4d8:	20000859 	.word	0x20000859

0800c4dc <__sfp_lock_release>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	@ (800c4e4 <__sfp_lock_release+0x8>)
 800c4de:	f000 b989 	b.w	800c7f4 <__retarget_lock_release_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	20000859 	.word	0x20000859

0800c4e8 <__sinit>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	f7ff fff0 	bl	800c4d0 <__sfp_lock_acquire>
 800c4f0:	6a23      	ldr	r3, [r4, #32]
 800c4f2:	b11b      	cbz	r3, 800c4fc <__sinit+0x14>
 800c4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f8:	f7ff bff0 	b.w	800c4dc <__sfp_lock_release>
 800c4fc:	4b04      	ldr	r3, [pc, #16]	@ (800c510 <__sinit+0x28>)
 800c4fe:	6223      	str	r3, [r4, #32]
 800c500:	4b04      	ldr	r3, [pc, #16]	@ (800c514 <__sinit+0x2c>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1f5      	bne.n	800c4f4 <__sinit+0xc>
 800c508:	f7ff ffc4 	bl	800c494 <global_stdio_init.part.0>
 800c50c:	e7f2      	b.n	800c4f4 <__sinit+0xc>
 800c50e:	bf00      	nop
 800c510:	0800c455 	.word	0x0800c455
 800c514:	20000850 	.word	0x20000850

0800c518 <_fwalk_sglue>:
 800c518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c51c:	4607      	mov	r7, r0
 800c51e:	4688      	mov	r8, r1
 800c520:	4614      	mov	r4, r2
 800c522:	2600      	movs	r6, #0
 800c524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c528:	f1b9 0901 	subs.w	r9, r9, #1
 800c52c:	d505      	bpl.n	800c53a <_fwalk_sglue+0x22>
 800c52e:	6824      	ldr	r4, [r4, #0]
 800c530:	2c00      	cmp	r4, #0
 800c532:	d1f7      	bne.n	800c524 <_fwalk_sglue+0xc>
 800c534:	4630      	mov	r0, r6
 800c536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c53a:	89ab      	ldrh	r3, [r5, #12]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d907      	bls.n	800c550 <_fwalk_sglue+0x38>
 800c540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c544:	3301      	adds	r3, #1
 800c546:	d003      	beq.n	800c550 <_fwalk_sglue+0x38>
 800c548:	4629      	mov	r1, r5
 800c54a:	4638      	mov	r0, r7
 800c54c:	47c0      	blx	r8
 800c54e:	4306      	orrs	r6, r0
 800c550:	3568      	adds	r5, #104	@ 0x68
 800c552:	e7e9      	b.n	800c528 <_fwalk_sglue+0x10>

0800c554 <siprintf>:
 800c554:	b40e      	push	{r1, r2, r3}
 800c556:	b500      	push	{lr}
 800c558:	b09c      	sub	sp, #112	@ 0x70
 800c55a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c55c:	9002      	str	r0, [sp, #8]
 800c55e:	9006      	str	r0, [sp, #24]
 800c560:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c564:	4809      	ldr	r0, [pc, #36]	@ (800c58c <siprintf+0x38>)
 800c566:	9107      	str	r1, [sp, #28]
 800c568:	9104      	str	r1, [sp, #16]
 800c56a:	4909      	ldr	r1, [pc, #36]	@ (800c590 <siprintf+0x3c>)
 800c56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c570:	9105      	str	r1, [sp, #20]
 800c572:	6800      	ldr	r0, [r0, #0]
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	a902      	add	r1, sp, #8
 800c578:	f002 f92c 	bl	800e7d4 <_svfiprintf_r>
 800c57c:	9b02      	ldr	r3, [sp, #8]
 800c57e:	2200      	movs	r2, #0
 800c580:	701a      	strb	r2, [r3, #0]
 800c582:	b01c      	add	sp, #112	@ 0x70
 800c584:	f85d eb04 	ldr.w	lr, [sp], #4
 800c588:	b003      	add	sp, #12
 800c58a:	4770      	bx	lr
 800c58c:	20000250 	.word	0x20000250
 800c590:	ffff0208 	.word	0xffff0208

0800c594 <__sread>:
 800c594:	b510      	push	{r4, lr}
 800c596:	460c      	mov	r4, r1
 800c598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59c:	f000 f8da 	bl	800c754 <_read_r>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	bfab      	itete	ge
 800c5a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c5a8:	181b      	addge	r3, r3, r0
 800c5aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c5ae:	bfac      	ite	ge
 800c5b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c5b2:	81a3      	strhlt	r3, [r4, #12]
 800c5b4:	bd10      	pop	{r4, pc}

0800c5b6 <__swrite>:
 800c5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ba:	461f      	mov	r7, r3
 800c5bc:	898b      	ldrh	r3, [r1, #12]
 800c5be:	05db      	lsls	r3, r3, #23
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	4616      	mov	r6, r2
 800c5c6:	d505      	bpl.n	800c5d4 <__swrite+0x1e>
 800c5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f000 f8ae 	bl	800c730 <_lseek_r>
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5de:	81a3      	strh	r3, [r4, #12]
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	463b      	mov	r3, r7
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ea:	f000 b8c5 	b.w	800c778 <_write_r>

0800c5ee <__sseek>:
 800c5ee:	b510      	push	{r4, lr}
 800c5f0:	460c      	mov	r4, r1
 800c5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f6:	f000 f89b 	bl	800c730 <_lseek_r>
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	bf15      	itete	ne
 800c600:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c60a:	81a3      	strheq	r3, [r4, #12]
 800c60c:	bf18      	it	ne
 800c60e:	81a3      	strhne	r3, [r4, #12]
 800c610:	bd10      	pop	{r4, pc}

0800c612 <__sclose>:
 800c612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c616:	f000 b87b 	b.w	800c710 <_close_r>

0800c61a <memset>:
 800c61a:	4402      	add	r2, r0
 800c61c:	4603      	mov	r3, r0
 800c61e:	4293      	cmp	r3, r2
 800c620:	d100      	bne.n	800c624 <memset+0xa>
 800c622:	4770      	bx	lr
 800c624:	f803 1b01 	strb.w	r1, [r3], #1
 800c628:	e7f9      	b.n	800c61e <memset+0x4>

0800c62a <strncmp>:
 800c62a:	b510      	push	{r4, lr}
 800c62c:	b16a      	cbz	r2, 800c64a <strncmp+0x20>
 800c62e:	3901      	subs	r1, #1
 800c630:	1884      	adds	r4, r0, r2
 800c632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c636:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d103      	bne.n	800c646 <strncmp+0x1c>
 800c63e:	42a0      	cmp	r0, r4
 800c640:	d001      	beq.n	800c646 <strncmp+0x1c>
 800c642:	2a00      	cmp	r2, #0
 800c644:	d1f5      	bne.n	800c632 <strncmp+0x8>
 800c646:	1ad0      	subs	r0, r2, r3
 800c648:	bd10      	pop	{r4, pc}
 800c64a:	4610      	mov	r0, r2
 800c64c:	e7fc      	b.n	800c648 <strncmp+0x1e>
	...

0800c650 <strtok>:
 800c650:	4b16      	ldr	r3, [pc, #88]	@ (800c6ac <strtok+0x5c>)
 800c652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c656:	681f      	ldr	r7, [r3, #0]
 800c658:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c65a:	4605      	mov	r5, r0
 800c65c:	460e      	mov	r6, r1
 800c65e:	b9ec      	cbnz	r4, 800c69c <strtok+0x4c>
 800c660:	2050      	movs	r0, #80	@ 0x50
 800c662:	f001 fad5 	bl	800dc10 <malloc>
 800c666:	4602      	mov	r2, r0
 800c668:	6478      	str	r0, [r7, #68]	@ 0x44
 800c66a:	b920      	cbnz	r0, 800c676 <strtok+0x26>
 800c66c:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <strtok+0x60>)
 800c66e:	4811      	ldr	r0, [pc, #68]	@ (800c6b4 <strtok+0x64>)
 800c670:	215b      	movs	r1, #91	@ 0x5b
 800c672:	f000 f8df 	bl	800c834 <__assert_func>
 800c676:	e9c0 4400 	strd	r4, r4, [r0]
 800c67a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c67e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c682:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c686:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c68a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c68e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c692:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c696:	6184      	str	r4, [r0, #24]
 800c698:	7704      	strb	r4, [r0, #28]
 800c69a:	6244      	str	r4, [r0, #36]	@ 0x24
 800c69c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c69e:	4631      	mov	r1, r6
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a8:	f000 b806 	b.w	800c6b8 <__strtok_r>
 800c6ac:	20000250 	.word	0x20000250
 800c6b0:	0801149a 	.word	0x0801149a
 800c6b4:	080114b1 	.word	0x080114b1

0800c6b8 <__strtok_r>:
 800c6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	b908      	cbnz	r0, 800c6c2 <__strtok_r+0xa>
 800c6be:	6814      	ldr	r4, [r2, #0]
 800c6c0:	b144      	cbz	r4, 800c6d4 <__strtok_r+0x1c>
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c6c8:	460f      	mov	r7, r1
 800c6ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c6ce:	b91e      	cbnz	r6, 800c6d8 <__strtok_r+0x20>
 800c6d0:	b965      	cbnz	r5, 800c6ec <__strtok_r+0x34>
 800c6d2:	6015      	str	r5, [r2, #0]
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e005      	b.n	800c6e4 <__strtok_r+0x2c>
 800c6d8:	42b5      	cmp	r5, r6
 800c6da:	d1f6      	bne.n	800c6ca <__strtok_r+0x12>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1f0      	bne.n	800c6c2 <__strtok_r+0xa>
 800c6e0:	6014      	str	r4, [r2, #0]
 800c6e2:	7003      	strb	r3, [r0, #0]
 800c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e6:	461c      	mov	r4, r3
 800c6e8:	e00c      	b.n	800c704 <__strtok_r+0x4c>
 800c6ea:	b915      	cbnz	r5, 800c6f2 <__strtok_r+0x3a>
 800c6ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6f0:	460e      	mov	r6, r1
 800c6f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c6f6:	42ab      	cmp	r3, r5
 800c6f8:	d1f7      	bne.n	800c6ea <__strtok_r+0x32>
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0f3      	beq.n	800c6e6 <__strtok_r+0x2e>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c704:	6014      	str	r4, [r2, #0]
 800c706:	e7ed      	b.n	800c6e4 <__strtok_r+0x2c>

0800c708 <_localeconv_r>:
 800c708:	4800      	ldr	r0, [pc, #0]	@ (800c70c <_localeconv_r+0x4>)
 800c70a:	4770      	bx	lr
 800c70c:	200001d4 	.word	0x200001d4

0800c710 <_close_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d06      	ldr	r5, [pc, #24]	@ (800c72c <_close_r+0x1c>)
 800c714:	2300      	movs	r3, #0
 800c716:	4604      	mov	r4, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	602b      	str	r3, [r5, #0]
 800c71c:	f7fa fb72 	bl	8006e04 <_close>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_close_r+0x1a>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_close_r+0x1a>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20000854 	.word	0x20000854

0800c730 <_lseek_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4d07      	ldr	r5, [pc, #28]	@ (800c750 <_lseek_r+0x20>)
 800c734:	4604      	mov	r4, r0
 800c736:	4608      	mov	r0, r1
 800c738:	4611      	mov	r1, r2
 800c73a:	2200      	movs	r2, #0
 800c73c:	602a      	str	r2, [r5, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	f7fa fb87 	bl	8006e52 <_lseek>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_lseek_r+0x1e>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_lseek_r+0x1e>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	20000854 	.word	0x20000854

0800c754 <_read_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d07      	ldr	r5, [pc, #28]	@ (800c774 <_read_r+0x20>)
 800c758:	4604      	mov	r4, r0
 800c75a:	4608      	mov	r0, r1
 800c75c:	4611      	mov	r1, r2
 800c75e:	2200      	movs	r2, #0
 800c760:	602a      	str	r2, [r5, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	f7fa fb15 	bl	8006d92 <_read>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_read_r+0x1e>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_read_r+0x1e>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	20000854 	.word	0x20000854

0800c778 <_write_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4d07      	ldr	r5, [pc, #28]	@ (800c798 <_write_r+0x20>)
 800c77c:	4604      	mov	r4, r0
 800c77e:	4608      	mov	r0, r1
 800c780:	4611      	mov	r1, r2
 800c782:	2200      	movs	r2, #0
 800c784:	602a      	str	r2, [r5, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	f7fa fb20 	bl	8006dcc <_write>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_write_r+0x1e>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_write_r+0x1e>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	20000854 	.word	0x20000854

0800c79c <__errno>:
 800c79c:	4b01      	ldr	r3, [pc, #4]	@ (800c7a4 <__errno+0x8>)
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	20000250 	.word	0x20000250

0800c7a8 <__libc_init_array>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	4d0d      	ldr	r5, [pc, #52]	@ (800c7e0 <__libc_init_array+0x38>)
 800c7ac:	4c0d      	ldr	r4, [pc, #52]	@ (800c7e4 <__libc_init_array+0x3c>)
 800c7ae:	1b64      	subs	r4, r4, r5
 800c7b0:	10a4      	asrs	r4, r4, #2
 800c7b2:	2600      	movs	r6, #0
 800c7b4:	42a6      	cmp	r6, r4
 800c7b6:	d109      	bne.n	800c7cc <__libc_init_array+0x24>
 800c7b8:	4d0b      	ldr	r5, [pc, #44]	@ (800c7e8 <__libc_init_array+0x40>)
 800c7ba:	4c0c      	ldr	r4, [pc, #48]	@ (800c7ec <__libc_init_array+0x44>)
 800c7bc:	f004 fa70 	bl	8010ca0 <_init>
 800c7c0:	1b64      	subs	r4, r4, r5
 800c7c2:	10a4      	asrs	r4, r4, #2
 800c7c4:	2600      	movs	r6, #0
 800c7c6:	42a6      	cmp	r6, r4
 800c7c8:	d105      	bne.n	800c7d6 <__libc_init_array+0x2e>
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d0:	4798      	blx	r3
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	e7ee      	b.n	800c7b4 <__libc_init_array+0xc>
 800c7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7da:	4798      	blx	r3
 800c7dc:	3601      	adds	r6, #1
 800c7de:	e7f2      	b.n	800c7c6 <__libc_init_array+0x1e>
 800c7e0:	080119e8 	.word	0x080119e8
 800c7e4:	080119e8 	.word	0x080119e8
 800c7e8:	080119e8 	.word	0x080119e8
 800c7ec:	080119ec 	.word	0x080119ec

0800c7f0 <__retarget_lock_init_recursive>:
 800c7f0:	4770      	bx	lr

0800c7f2 <__retarget_lock_acquire_recursive>:
 800c7f2:	4770      	bx	lr

0800c7f4 <__retarget_lock_release_recursive>:
 800c7f4:	4770      	bx	lr

0800c7f6 <memcpy>:
 800c7f6:	440a      	add	r2, r1
 800c7f8:	4291      	cmp	r1, r2
 800c7fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7fe:	d100      	bne.n	800c802 <memcpy+0xc>
 800c800:	4770      	bx	lr
 800c802:	b510      	push	{r4, lr}
 800c804:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c80c:	4291      	cmp	r1, r2
 800c80e:	d1f9      	bne.n	800c804 <memcpy+0xe>
 800c810:	bd10      	pop	{r4, pc}
 800c812:	0000      	movs	r0, r0
 800c814:	0000      	movs	r0, r0
	...

0800c818 <nan>:
 800c818:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c820 <nan+0x8>
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	00000000 	.word	0x00000000
 800c824:	7ff80000 	.word	0x7ff80000

0800c828 <nanf>:
 800c828:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c830 <nanf+0x8>
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	7fc00000 	.word	0x7fc00000

0800c834 <__assert_func>:
 800c834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c836:	4614      	mov	r4, r2
 800c838:	461a      	mov	r2, r3
 800c83a:	4b09      	ldr	r3, [pc, #36]	@ (800c860 <__assert_func+0x2c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4605      	mov	r5, r0
 800c840:	68d8      	ldr	r0, [r3, #12]
 800c842:	b954      	cbnz	r4, 800c85a <__assert_func+0x26>
 800c844:	4b07      	ldr	r3, [pc, #28]	@ (800c864 <__assert_func+0x30>)
 800c846:	461c      	mov	r4, r3
 800c848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c84c:	9100      	str	r1, [sp, #0]
 800c84e:	462b      	mov	r3, r5
 800c850:	4905      	ldr	r1, [pc, #20]	@ (800c868 <__assert_func+0x34>)
 800c852:	f002 f967 	bl	800eb24 <fiprintf>
 800c856:	f002 f9a1 	bl	800eb9c <abort>
 800c85a:	4b04      	ldr	r3, [pc, #16]	@ (800c86c <__assert_func+0x38>)
 800c85c:	e7f4      	b.n	800c848 <__assert_func+0x14>
 800c85e:	bf00      	nop
 800c860:	20000250 	.word	0x20000250
 800c864:	0801154e 	.word	0x0801154e
 800c868:	08011520 	.word	0x08011520
 800c86c:	08011513 	.word	0x08011513

0800c870 <quorem>:
 800c870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	6903      	ldr	r3, [r0, #16]
 800c876:	690c      	ldr	r4, [r1, #16]
 800c878:	42a3      	cmp	r3, r4
 800c87a:	4607      	mov	r7, r0
 800c87c:	db7e      	blt.n	800c97c <quorem+0x10c>
 800c87e:	3c01      	subs	r4, #1
 800c880:	f101 0814 	add.w	r8, r1, #20
 800c884:	00a3      	lsls	r3, r4, #2
 800c886:	f100 0514 	add.w	r5, r0, #20
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c89a:	3301      	adds	r3, #1
 800c89c:	429a      	cmp	r2, r3
 800c89e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8a6:	d32e      	bcc.n	800c906 <quorem+0x96>
 800c8a8:	f04f 0a00 	mov.w	sl, #0
 800c8ac:	46c4      	mov	ip, r8
 800c8ae:	46ae      	mov	lr, r5
 800c8b0:	46d3      	mov	fp, sl
 800c8b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8b6:	b298      	uxth	r0, r3
 800c8b8:	fb06 a000 	mla	r0, r6, r0, sl
 800c8bc:	0c02      	lsrs	r2, r0, #16
 800c8be:	0c1b      	lsrs	r3, r3, #16
 800c8c0:	fb06 2303 	mla	r3, r6, r3, r2
 800c8c4:	f8de 2000 	ldr.w	r2, [lr]
 800c8c8:	b280      	uxth	r0, r0
 800c8ca:	b292      	uxth	r2, r2
 800c8cc:	1a12      	subs	r2, r2, r0
 800c8ce:	445a      	add	r2, fp
 800c8d0:	f8de 0000 	ldr.w	r0, [lr]
 800c8d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c8de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c8e2:	b292      	uxth	r2, r2
 800c8e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c8e8:	45e1      	cmp	r9, ip
 800c8ea:	f84e 2b04 	str.w	r2, [lr], #4
 800c8ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c8f2:	d2de      	bcs.n	800c8b2 <quorem+0x42>
 800c8f4:	9b00      	ldr	r3, [sp, #0]
 800c8f6:	58eb      	ldr	r3, [r5, r3]
 800c8f8:	b92b      	cbnz	r3, 800c906 <quorem+0x96>
 800c8fa:	9b01      	ldr	r3, [sp, #4]
 800c8fc:	3b04      	subs	r3, #4
 800c8fe:	429d      	cmp	r5, r3
 800c900:	461a      	mov	r2, r3
 800c902:	d32f      	bcc.n	800c964 <quorem+0xf4>
 800c904:	613c      	str	r4, [r7, #16]
 800c906:	4638      	mov	r0, r7
 800c908:	f001 fd0e 	bl	800e328 <__mcmp>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	db25      	blt.n	800c95c <quorem+0xec>
 800c910:	4629      	mov	r1, r5
 800c912:	2000      	movs	r0, #0
 800c914:	f858 2b04 	ldr.w	r2, [r8], #4
 800c918:	f8d1 c000 	ldr.w	ip, [r1]
 800c91c:	fa1f fe82 	uxth.w	lr, r2
 800c920:	fa1f f38c 	uxth.w	r3, ip
 800c924:	eba3 030e 	sub.w	r3, r3, lr
 800c928:	4403      	add	r3, r0
 800c92a:	0c12      	lsrs	r2, r2, #16
 800c92c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c930:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c934:	b29b      	uxth	r3, r3
 800c936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c93a:	45c1      	cmp	r9, r8
 800c93c:	f841 3b04 	str.w	r3, [r1], #4
 800c940:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c944:	d2e6      	bcs.n	800c914 <quorem+0xa4>
 800c946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c94a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c94e:	b922      	cbnz	r2, 800c95a <quorem+0xea>
 800c950:	3b04      	subs	r3, #4
 800c952:	429d      	cmp	r5, r3
 800c954:	461a      	mov	r2, r3
 800c956:	d30b      	bcc.n	800c970 <quorem+0x100>
 800c958:	613c      	str	r4, [r7, #16]
 800c95a:	3601      	adds	r6, #1
 800c95c:	4630      	mov	r0, r6
 800c95e:	b003      	add	sp, #12
 800c960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c964:	6812      	ldr	r2, [r2, #0]
 800c966:	3b04      	subs	r3, #4
 800c968:	2a00      	cmp	r2, #0
 800c96a:	d1cb      	bne.n	800c904 <quorem+0x94>
 800c96c:	3c01      	subs	r4, #1
 800c96e:	e7c6      	b.n	800c8fe <quorem+0x8e>
 800c970:	6812      	ldr	r2, [r2, #0]
 800c972:	3b04      	subs	r3, #4
 800c974:	2a00      	cmp	r2, #0
 800c976:	d1ef      	bne.n	800c958 <quorem+0xe8>
 800c978:	3c01      	subs	r4, #1
 800c97a:	e7ea      	b.n	800c952 <quorem+0xe2>
 800c97c:	2000      	movs	r0, #0
 800c97e:	e7ee      	b.n	800c95e <quorem+0xee>

0800c980 <_dtoa_r>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	69c7      	ldr	r7, [r0, #28]
 800c986:	b099      	sub	sp, #100	@ 0x64
 800c988:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c98c:	ec55 4b10 	vmov	r4, r5, d0
 800c990:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c992:	9109      	str	r1, [sp, #36]	@ 0x24
 800c994:	4683      	mov	fp, r0
 800c996:	920e      	str	r2, [sp, #56]	@ 0x38
 800c998:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c99a:	b97f      	cbnz	r7, 800c9bc <_dtoa_r+0x3c>
 800c99c:	2010      	movs	r0, #16
 800c99e:	f001 f937 	bl	800dc10 <malloc>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c9a8:	b920      	cbnz	r0, 800c9b4 <_dtoa_r+0x34>
 800c9aa:	4ba7      	ldr	r3, [pc, #668]	@ (800cc48 <_dtoa_r+0x2c8>)
 800c9ac:	21ef      	movs	r1, #239	@ 0xef
 800c9ae:	48a7      	ldr	r0, [pc, #668]	@ (800cc4c <_dtoa_r+0x2cc>)
 800c9b0:	f7ff ff40 	bl	800c834 <__assert_func>
 800c9b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c9b8:	6007      	str	r7, [r0, #0]
 800c9ba:	60c7      	str	r7, [r0, #12]
 800c9bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9c0:	6819      	ldr	r1, [r3, #0]
 800c9c2:	b159      	cbz	r1, 800c9dc <_dtoa_r+0x5c>
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	604a      	str	r2, [r1, #4]
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	4093      	lsls	r3, r2
 800c9cc:	608b      	str	r3, [r1, #8]
 800c9ce:	4658      	mov	r0, fp
 800c9d0:	f001 fa26 	bl	800de20 <_Bfree>
 800c9d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	1e2b      	subs	r3, r5, #0
 800c9de:	bfb9      	ittee	lt
 800c9e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c9e4:	9303      	strlt	r3, [sp, #12]
 800c9e6:	2300      	movge	r3, #0
 800c9e8:	6033      	strge	r3, [r6, #0]
 800c9ea:	9f03      	ldr	r7, [sp, #12]
 800c9ec:	4b98      	ldr	r3, [pc, #608]	@ (800cc50 <_dtoa_r+0x2d0>)
 800c9ee:	bfbc      	itt	lt
 800c9f0:	2201      	movlt	r2, #1
 800c9f2:	6032      	strlt	r2, [r6, #0]
 800c9f4:	43bb      	bics	r3, r7
 800c9f6:	d112      	bne.n	800ca1e <_dtoa_r+0x9e>
 800c9f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c9fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca04:	4323      	orrs	r3, r4
 800ca06:	f000 854d 	beq.w	800d4a4 <_dtoa_r+0xb24>
 800ca0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cc64 <_dtoa_r+0x2e4>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 854f 	beq.w	800d4b4 <_dtoa_r+0xb34>
 800ca16:	f10a 0303 	add.w	r3, sl, #3
 800ca1a:	f000 bd49 	b.w	800d4b0 <_dtoa_r+0xb30>
 800ca1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca22:	2200      	movs	r2, #0
 800ca24:	ec51 0b17 	vmov	r0, r1, d7
 800ca28:	2300      	movs	r3, #0
 800ca2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ca2e:	f7f4 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca32:	4680      	mov	r8, r0
 800ca34:	b158      	cbz	r0, 800ca4e <_dtoa_r+0xce>
 800ca36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ca38:	2301      	movs	r3, #1
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca3e:	b113      	cbz	r3, 800ca46 <_dtoa_r+0xc6>
 800ca40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ca42:	4b84      	ldr	r3, [pc, #528]	@ (800cc54 <_dtoa_r+0x2d4>)
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cc68 <_dtoa_r+0x2e8>
 800ca4a:	f000 bd33 	b.w	800d4b4 <_dtoa_r+0xb34>
 800ca4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ca52:	aa16      	add	r2, sp, #88	@ 0x58
 800ca54:	a917      	add	r1, sp, #92	@ 0x5c
 800ca56:	4658      	mov	r0, fp
 800ca58:	f001 fd86 	bl	800e568 <__d2b>
 800ca5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca60:	4681      	mov	r9, r0
 800ca62:	2e00      	cmp	r6, #0
 800ca64:	d077      	beq.n	800cb56 <_dtoa_r+0x1d6>
 800ca66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ca6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ca7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ca80:	4619      	mov	r1, r3
 800ca82:	2200      	movs	r2, #0
 800ca84:	4b74      	ldr	r3, [pc, #464]	@ (800cc58 <_dtoa_r+0x2d8>)
 800ca86:	f7f3 fbff 	bl	8000288 <__aeabi_dsub>
 800ca8a:	a369      	add	r3, pc, #420	@ (adr r3, 800cc30 <_dtoa_r+0x2b0>)
 800ca8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca90:	f7f3 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ca94:	a368      	add	r3, pc, #416	@ (adr r3, 800cc38 <_dtoa_r+0x2b8>)
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	f7f3 fbf7 	bl	800028c <__adddf3>
 800ca9e:	4604      	mov	r4, r0
 800caa0:	4630      	mov	r0, r6
 800caa2:	460d      	mov	r5, r1
 800caa4:	f7f3 fd3e 	bl	8000524 <__aeabi_i2d>
 800caa8:	a365      	add	r3, pc, #404	@ (adr r3, 800cc40 <_dtoa_r+0x2c0>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	f7f3 fda3 	bl	80005f8 <__aeabi_dmul>
 800cab2:	4602      	mov	r2, r0
 800cab4:	460b      	mov	r3, r1
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f3 fbe7 	bl	800028c <__adddf3>
 800cabe:	4604      	mov	r4, r0
 800cac0:	460d      	mov	r5, r1
 800cac2:	f7f4 f849 	bl	8000b58 <__aeabi_d2iz>
 800cac6:	2200      	movs	r2, #0
 800cac8:	4607      	mov	r7, r0
 800caca:	2300      	movs	r3, #0
 800cacc:	4620      	mov	r0, r4
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f4 f804 	bl	8000adc <__aeabi_dcmplt>
 800cad4:	b140      	cbz	r0, 800cae8 <_dtoa_r+0x168>
 800cad6:	4638      	mov	r0, r7
 800cad8:	f7f3 fd24 	bl	8000524 <__aeabi_i2d>
 800cadc:	4622      	mov	r2, r4
 800cade:	462b      	mov	r3, r5
 800cae0:	f7f3 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cae4:	b900      	cbnz	r0, 800cae8 <_dtoa_r+0x168>
 800cae6:	3f01      	subs	r7, #1
 800cae8:	2f16      	cmp	r7, #22
 800caea:	d851      	bhi.n	800cb90 <_dtoa_r+0x210>
 800caec:	4b5b      	ldr	r3, [pc, #364]	@ (800cc5c <_dtoa_r+0x2dc>)
 800caee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cafa:	f7f3 ffef 	bl	8000adc <__aeabi_dcmplt>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d048      	beq.n	800cb94 <_dtoa_r+0x214>
 800cb02:	3f01      	subs	r7, #1
 800cb04:	2300      	movs	r3, #0
 800cb06:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb0a:	1b9b      	subs	r3, r3, r6
 800cb0c:	1e5a      	subs	r2, r3, #1
 800cb0e:	bf44      	itt	mi
 800cb10:	f1c3 0801 	rsbmi	r8, r3, #1
 800cb14:	2300      	movmi	r3, #0
 800cb16:	9208      	str	r2, [sp, #32]
 800cb18:	bf54      	ite	pl
 800cb1a:	f04f 0800 	movpl.w	r8, #0
 800cb1e:	9308      	strmi	r3, [sp, #32]
 800cb20:	2f00      	cmp	r7, #0
 800cb22:	db39      	blt.n	800cb98 <_dtoa_r+0x218>
 800cb24:	9b08      	ldr	r3, [sp, #32]
 800cb26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cb28:	443b      	add	r3, r7
 800cb2a:	9308      	str	r3, [sp, #32]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb32:	2b09      	cmp	r3, #9
 800cb34:	d864      	bhi.n	800cc00 <_dtoa_r+0x280>
 800cb36:	2b05      	cmp	r3, #5
 800cb38:	bfc4      	itt	gt
 800cb3a:	3b04      	subgt	r3, #4
 800cb3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb40:	f1a3 0302 	sub.w	r3, r3, #2
 800cb44:	bfcc      	ite	gt
 800cb46:	2400      	movgt	r4, #0
 800cb48:	2401      	movle	r4, #1
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d863      	bhi.n	800cc16 <_dtoa_r+0x296>
 800cb4e:	e8df f003 	tbb	[pc, r3]
 800cb52:	372a      	.short	0x372a
 800cb54:	5535      	.short	0x5535
 800cb56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cb5a:	441e      	add	r6, r3
 800cb5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cb60:	2b20      	cmp	r3, #32
 800cb62:	bfc1      	itttt	gt
 800cb64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cb68:	409f      	lslgt	r7, r3
 800cb6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cb6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cb72:	bfd6      	itet	le
 800cb74:	f1c3 0320 	rsble	r3, r3, #32
 800cb78:	ea47 0003 	orrgt.w	r0, r7, r3
 800cb7c:	fa04 f003 	lslle.w	r0, r4, r3
 800cb80:	f7f3 fcc0 	bl	8000504 <__aeabi_ui2d>
 800cb84:	2201      	movs	r2, #1
 800cb86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cb8a:	3e01      	subs	r6, #1
 800cb8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cb8e:	e777      	b.n	800ca80 <_dtoa_r+0x100>
 800cb90:	2301      	movs	r3, #1
 800cb92:	e7b8      	b.n	800cb06 <_dtoa_r+0x186>
 800cb94:	9012      	str	r0, [sp, #72]	@ 0x48
 800cb96:	e7b7      	b.n	800cb08 <_dtoa_r+0x188>
 800cb98:	427b      	negs	r3, r7
 800cb9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	eba8 0807 	sub.w	r8, r8, r7
 800cba2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cba4:	e7c4      	b.n	800cb30 <_dtoa_r+0x1b0>
 800cba6:	2300      	movs	r3, #0
 800cba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	dc35      	bgt.n	800cc1c <_dtoa_r+0x29c>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	9307      	str	r3, [sp, #28]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbba:	e00b      	b.n	800cbd4 <_dtoa_r+0x254>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e7f3      	b.n	800cba8 <_dtoa_r+0x228>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbc6:	18fb      	adds	r3, r7, r3
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	9307      	str	r3, [sp, #28]
 800cbd0:	bfb8      	it	lt
 800cbd2:	2301      	movlt	r3, #1
 800cbd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cbd8:	2100      	movs	r1, #0
 800cbda:	2204      	movs	r2, #4
 800cbdc:	f102 0514 	add.w	r5, r2, #20
 800cbe0:	429d      	cmp	r5, r3
 800cbe2:	d91f      	bls.n	800cc24 <_dtoa_r+0x2a4>
 800cbe4:	6041      	str	r1, [r0, #4]
 800cbe6:	4658      	mov	r0, fp
 800cbe8:	f001 f8da 	bl	800dda0 <_Balloc>
 800cbec:	4682      	mov	sl, r0
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d13c      	bne.n	800cc6c <_dtoa_r+0x2ec>
 800cbf2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc60 <_dtoa_r+0x2e0>)
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	f240 11af 	movw	r1, #431	@ 0x1af
 800cbfa:	e6d8      	b.n	800c9ae <_dtoa_r+0x2e>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e7e0      	b.n	800cbc2 <_dtoa_r+0x242>
 800cc00:	2401      	movs	r4, #1
 800cc02:	2300      	movs	r3, #0
 800cc04:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cc08:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	9307      	str	r3, [sp, #28]
 800cc10:	2200      	movs	r2, #0
 800cc12:	2312      	movs	r3, #18
 800cc14:	e7d0      	b.n	800cbb8 <_dtoa_r+0x238>
 800cc16:	2301      	movs	r3, #1
 800cc18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc1a:	e7f5      	b.n	800cc08 <_dtoa_r+0x288>
 800cc1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	9307      	str	r3, [sp, #28]
 800cc22:	e7d7      	b.n	800cbd4 <_dtoa_r+0x254>
 800cc24:	3101      	adds	r1, #1
 800cc26:	0052      	lsls	r2, r2, #1
 800cc28:	e7d8      	b.n	800cbdc <_dtoa_r+0x25c>
 800cc2a:	bf00      	nop
 800cc2c:	f3af 8000 	nop.w
 800cc30:	636f4361 	.word	0x636f4361
 800cc34:	3fd287a7 	.word	0x3fd287a7
 800cc38:	8b60c8b3 	.word	0x8b60c8b3
 800cc3c:	3fc68a28 	.word	0x3fc68a28
 800cc40:	509f79fb 	.word	0x509f79fb
 800cc44:	3fd34413 	.word	0x3fd34413
 800cc48:	0801149a 	.word	0x0801149a
 800cc4c:	0801155c 	.word	0x0801155c
 800cc50:	7ff00000 	.word	0x7ff00000
 800cc54:	08011472 	.word	0x08011472
 800cc58:	3ff80000 	.word	0x3ff80000
 800cc5c:	080116b8 	.word	0x080116b8
 800cc60:	080115b4 	.word	0x080115b4
 800cc64:	08011558 	.word	0x08011558
 800cc68:	08011471 	.word	0x08011471
 800cc6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc70:	6018      	str	r0, [r3, #0]
 800cc72:	9b07      	ldr	r3, [sp, #28]
 800cc74:	2b0e      	cmp	r3, #14
 800cc76:	f200 80a4 	bhi.w	800cdc2 <_dtoa_r+0x442>
 800cc7a:	2c00      	cmp	r4, #0
 800cc7c:	f000 80a1 	beq.w	800cdc2 <_dtoa_r+0x442>
 800cc80:	2f00      	cmp	r7, #0
 800cc82:	dd33      	ble.n	800ccec <_dtoa_r+0x36c>
 800cc84:	4bad      	ldr	r3, [pc, #692]	@ (800cf3c <_dtoa_r+0x5bc>)
 800cc86:	f007 020f 	and.w	r2, r7, #15
 800cc8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc8e:	ed93 7b00 	vldr	d7, [r3]
 800cc92:	05f8      	lsls	r0, r7, #23
 800cc94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cc98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cc9c:	d516      	bpl.n	800cccc <_dtoa_r+0x34c>
 800cc9e:	4ba8      	ldr	r3, [pc, #672]	@ (800cf40 <_dtoa_r+0x5c0>)
 800cca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cca8:	f7f3 fdd0 	bl	800084c <__aeabi_ddiv>
 800ccac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccb0:	f004 040f 	and.w	r4, r4, #15
 800ccb4:	2603      	movs	r6, #3
 800ccb6:	4da2      	ldr	r5, [pc, #648]	@ (800cf40 <_dtoa_r+0x5c0>)
 800ccb8:	b954      	cbnz	r4, 800ccd0 <_dtoa_r+0x350>
 800ccba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccc2:	f7f3 fdc3 	bl	800084c <__aeabi_ddiv>
 800ccc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccca:	e028      	b.n	800cd1e <_dtoa_r+0x39e>
 800cccc:	2602      	movs	r6, #2
 800ccce:	e7f2      	b.n	800ccb6 <_dtoa_r+0x336>
 800ccd0:	07e1      	lsls	r1, r4, #31
 800ccd2:	d508      	bpl.n	800cce6 <_dtoa_r+0x366>
 800ccd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccdc:	f7f3 fc8c 	bl	80005f8 <__aeabi_dmul>
 800cce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cce4:	3601      	adds	r6, #1
 800cce6:	1064      	asrs	r4, r4, #1
 800cce8:	3508      	adds	r5, #8
 800ccea:	e7e5      	b.n	800ccb8 <_dtoa_r+0x338>
 800ccec:	f000 80d2 	beq.w	800ce94 <_dtoa_r+0x514>
 800ccf0:	427c      	negs	r4, r7
 800ccf2:	4b92      	ldr	r3, [pc, #584]	@ (800cf3c <_dtoa_r+0x5bc>)
 800ccf4:	4d92      	ldr	r5, [pc, #584]	@ (800cf40 <_dtoa_r+0x5c0>)
 800ccf6:	f004 020f 	and.w	r2, r4, #15
 800ccfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd06:	f7f3 fc77 	bl	80005f8 <__aeabi_dmul>
 800cd0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd0e:	1124      	asrs	r4, r4, #4
 800cd10:	2300      	movs	r3, #0
 800cd12:	2602      	movs	r6, #2
 800cd14:	2c00      	cmp	r4, #0
 800cd16:	f040 80b2 	bne.w	800ce7e <_dtoa_r+0x4fe>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1d3      	bne.n	800ccc6 <_dtoa_r+0x346>
 800cd1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 80b7 	beq.w	800ce98 <_dtoa_r+0x518>
 800cd2a:	4b86      	ldr	r3, [pc, #536]	@ (800cf44 <_dtoa_r+0x5c4>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7f3 fed3 	bl	8000adc <__aeabi_dcmplt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f000 80ae 	beq.w	800ce98 <_dtoa_r+0x518>
 800cd3c:	9b07      	ldr	r3, [sp, #28]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f000 80aa 	beq.w	800ce98 <_dtoa_r+0x518>
 800cd44:	9b00      	ldr	r3, [sp, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dd37      	ble.n	800cdba <_dtoa_r+0x43a>
 800cd4a:	1e7b      	subs	r3, r7, #1
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	4b7d      	ldr	r3, [pc, #500]	@ (800cf48 <_dtoa_r+0x5c8>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	4629      	mov	r1, r5
 800cd56:	f7f3 fc4f 	bl	80005f8 <__aeabi_dmul>
 800cd5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd5e:	9c00      	ldr	r4, [sp, #0]
 800cd60:	3601      	adds	r6, #1
 800cd62:	4630      	mov	r0, r6
 800cd64:	f7f3 fbde 	bl	8000524 <__aeabi_i2d>
 800cd68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd6c:	f7f3 fc44 	bl	80005f8 <__aeabi_dmul>
 800cd70:	4b76      	ldr	r3, [pc, #472]	@ (800cf4c <_dtoa_r+0x5cc>)
 800cd72:	2200      	movs	r2, #0
 800cd74:	f7f3 fa8a 	bl	800028c <__adddf3>
 800cd78:	4605      	mov	r5, r0
 800cd7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cd7e:	2c00      	cmp	r4, #0
 800cd80:	f040 808d 	bne.w	800ce9e <_dtoa_r+0x51e>
 800cd84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd88:	4b71      	ldr	r3, [pc, #452]	@ (800cf50 <_dtoa_r+0x5d0>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f7f3 fa7c 	bl	8000288 <__aeabi_dsub>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd98:	462a      	mov	r2, r5
 800cd9a:	4633      	mov	r3, r6
 800cd9c:	f7f3 febc 	bl	8000b18 <__aeabi_dcmpgt>
 800cda0:	2800      	cmp	r0, #0
 800cda2:	f040 828b 	bne.w	800d2bc <_dtoa_r+0x93c>
 800cda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdaa:	462a      	mov	r2, r5
 800cdac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cdb0:	f7f3 fe94 	bl	8000adc <__aeabi_dcmplt>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	f040 8128 	bne.w	800d00a <_dtoa_r+0x68a>
 800cdba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cdbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cdc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f2c0 815a 	blt.w	800d07e <_dtoa_r+0x6fe>
 800cdca:	2f0e      	cmp	r7, #14
 800cdcc:	f300 8157 	bgt.w	800d07e <_dtoa_r+0x6fe>
 800cdd0:	4b5a      	ldr	r3, [pc, #360]	@ (800cf3c <_dtoa_r+0x5bc>)
 800cdd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdd6:	ed93 7b00 	vldr	d7, [r3]
 800cdda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	ed8d 7b00 	vstr	d7, [sp]
 800cde2:	da03      	bge.n	800cdec <_dtoa_r+0x46c>
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f340 8101 	ble.w	800cfee <_dtoa_r+0x66e>
 800cdec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cdf0:	4656      	mov	r6, sl
 800cdf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f7f3 fd27 	bl	800084c <__aeabi_ddiv>
 800cdfe:	f7f3 feab 	bl	8000b58 <__aeabi_d2iz>
 800ce02:	4680      	mov	r8, r0
 800ce04:	f7f3 fb8e 	bl	8000524 <__aeabi_i2d>
 800ce08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce0c:	f7f3 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ce10:	4602      	mov	r2, r0
 800ce12:	460b      	mov	r3, r1
 800ce14:	4620      	mov	r0, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ce1c:	f7f3 fa34 	bl	8000288 <__aeabi_dsub>
 800ce20:	f806 4b01 	strb.w	r4, [r6], #1
 800ce24:	9d07      	ldr	r5, [sp, #28]
 800ce26:	eba6 040a 	sub.w	r4, r6, sl
 800ce2a:	42a5      	cmp	r5, r4
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	f040 8117 	bne.w	800d062 <_dtoa_r+0x6e2>
 800ce34:	f7f3 fa2a 	bl	800028c <__adddf3>
 800ce38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	460d      	mov	r5, r1
 800ce40:	f7f3 fe6a 	bl	8000b18 <__aeabi_dcmpgt>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f040 80f9 	bne.w	800d03c <_dtoa_r+0x6bc>
 800ce4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	4629      	mov	r1, r5
 800ce52:	f7f3 fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce56:	b118      	cbz	r0, 800ce60 <_dtoa_r+0x4e0>
 800ce58:	f018 0f01 	tst.w	r8, #1
 800ce5c:	f040 80ee 	bne.w	800d03c <_dtoa_r+0x6bc>
 800ce60:	4649      	mov	r1, r9
 800ce62:	4658      	mov	r0, fp
 800ce64:	f000 ffdc 	bl	800de20 <_Bfree>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	7033      	strb	r3, [r6, #0]
 800ce6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce6e:	3701      	adds	r7, #1
 800ce70:	601f      	str	r7, [r3, #0]
 800ce72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 831d 	beq.w	800d4b4 <_dtoa_r+0xb34>
 800ce7a:	601e      	str	r6, [r3, #0]
 800ce7c:	e31a      	b.n	800d4b4 <_dtoa_r+0xb34>
 800ce7e:	07e2      	lsls	r2, r4, #31
 800ce80:	d505      	bpl.n	800ce8e <_dtoa_r+0x50e>
 800ce82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce86:	f7f3 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ce8a:	3601      	adds	r6, #1
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	1064      	asrs	r4, r4, #1
 800ce90:	3508      	adds	r5, #8
 800ce92:	e73f      	b.n	800cd14 <_dtoa_r+0x394>
 800ce94:	2602      	movs	r6, #2
 800ce96:	e742      	b.n	800cd1e <_dtoa_r+0x39e>
 800ce98:	9c07      	ldr	r4, [sp, #28]
 800ce9a:	9704      	str	r7, [sp, #16]
 800ce9c:	e761      	b.n	800cd62 <_dtoa_r+0x3e2>
 800ce9e:	4b27      	ldr	r3, [pc, #156]	@ (800cf3c <_dtoa_r+0x5bc>)
 800cea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cea6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ceaa:	4454      	add	r4, sl
 800ceac:	2900      	cmp	r1, #0
 800ceae:	d053      	beq.n	800cf58 <_dtoa_r+0x5d8>
 800ceb0:	4928      	ldr	r1, [pc, #160]	@ (800cf54 <_dtoa_r+0x5d4>)
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	f7f3 fcca 	bl	800084c <__aeabi_ddiv>
 800ceb8:	4633      	mov	r3, r6
 800ceba:	462a      	mov	r2, r5
 800cebc:	f7f3 f9e4 	bl	8000288 <__aeabi_dsub>
 800cec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cec4:	4656      	mov	r6, sl
 800cec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceca:	f7f3 fe45 	bl	8000b58 <__aeabi_d2iz>
 800cece:	4605      	mov	r5, r0
 800ced0:	f7f3 fb28 	bl	8000524 <__aeabi_i2d>
 800ced4:	4602      	mov	r2, r0
 800ced6:	460b      	mov	r3, r1
 800ced8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cedc:	f7f3 f9d4 	bl	8000288 <__aeabi_dsub>
 800cee0:	3530      	adds	r5, #48	@ 0x30
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ceea:	f806 5b01 	strb.w	r5, [r6], #1
 800ceee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cef2:	f7f3 fdf3 	bl	8000adc <__aeabi_dcmplt>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d171      	bne.n	800cfde <_dtoa_r+0x65e>
 800cefa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cefe:	4911      	ldr	r1, [pc, #68]	@ (800cf44 <_dtoa_r+0x5c4>)
 800cf00:	2000      	movs	r0, #0
 800cf02:	f7f3 f9c1 	bl	8000288 <__aeabi_dsub>
 800cf06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf0a:	f7f3 fde7 	bl	8000adc <__aeabi_dcmplt>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	f040 8095 	bne.w	800d03e <_dtoa_r+0x6be>
 800cf14:	42a6      	cmp	r6, r4
 800cf16:	f43f af50 	beq.w	800cdba <_dtoa_r+0x43a>
 800cf1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf1e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf48 <_dtoa_r+0x5c8>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	f7f3 fb69 	bl	80005f8 <__aeabi_dmul>
 800cf26:	4b08      	ldr	r3, [pc, #32]	@ (800cf48 <_dtoa_r+0x5c8>)
 800cf28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf32:	f7f3 fb61 	bl	80005f8 <__aeabi_dmul>
 800cf36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf3a:	e7c4      	b.n	800cec6 <_dtoa_r+0x546>
 800cf3c:	080116b8 	.word	0x080116b8
 800cf40:	08011690 	.word	0x08011690
 800cf44:	3ff00000 	.word	0x3ff00000
 800cf48:	40240000 	.word	0x40240000
 800cf4c:	401c0000 	.word	0x401c0000
 800cf50:	40140000 	.word	0x40140000
 800cf54:	3fe00000 	.word	0x3fe00000
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	f7f3 fb4c 	bl	80005f8 <__aeabi_dmul>
 800cf60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf64:	9415      	str	r4, [sp, #84]	@ 0x54
 800cf66:	4656      	mov	r6, sl
 800cf68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf6c:	f7f3 fdf4 	bl	8000b58 <__aeabi_d2iz>
 800cf70:	4605      	mov	r5, r0
 800cf72:	f7f3 fad7 	bl	8000524 <__aeabi_i2d>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf7e:	f7f3 f983 	bl	8000288 <__aeabi_dsub>
 800cf82:	3530      	adds	r5, #48	@ 0x30
 800cf84:	f806 5b01 	strb.w	r5, [r6], #1
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	42a6      	cmp	r6, r4
 800cf8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf92:	f04f 0200 	mov.w	r2, #0
 800cf96:	d124      	bne.n	800cfe2 <_dtoa_r+0x662>
 800cf98:	4bac      	ldr	r3, [pc, #688]	@ (800d24c <_dtoa_r+0x8cc>)
 800cf9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf9e:	f7f3 f975 	bl	800028c <__adddf3>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfaa:	f7f3 fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d145      	bne.n	800d03e <_dtoa_r+0x6be>
 800cfb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cfb6:	49a5      	ldr	r1, [pc, #660]	@ (800d24c <_dtoa_r+0x8cc>)
 800cfb8:	2000      	movs	r0, #0
 800cfba:	f7f3 f965 	bl	8000288 <__aeabi_dsub>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfc6:	f7f3 fd89 	bl	8000adc <__aeabi_dcmplt>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	f43f aef5 	beq.w	800cdba <_dtoa_r+0x43a>
 800cfd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cfd2:	1e73      	subs	r3, r6, #1
 800cfd4:	9315      	str	r3, [sp, #84]	@ 0x54
 800cfd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cfda:	2b30      	cmp	r3, #48	@ 0x30
 800cfdc:	d0f8      	beq.n	800cfd0 <_dtoa_r+0x650>
 800cfde:	9f04      	ldr	r7, [sp, #16]
 800cfe0:	e73e      	b.n	800ce60 <_dtoa_r+0x4e0>
 800cfe2:	4b9b      	ldr	r3, [pc, #620]	@ (800d250 <_dtoa_r+0x8d0>)
 800cfe4:	f7f3 fb08 	bl	80005f8 <__aeabi_dmul>
 800cfe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfec:	e7bc      	b.n	800cf68 <_dtoa_r+0x5e8>
 800cfee:	d10c      	bne.n	800d00a <_dtoa_r+0x68a>
 800cff0:	4b98      	ldr	r3, [pc, #608]	@ (800d254 <_dtoa_r+0x8d4>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cff8:	f7f3 fafe 	bl	80005f8 <__aeabi_dmul>
 800cffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d000:	f7f3 fd80 	bl	8000b04 <__aeabi_dcmpge>
 800d004:	2800      	cmp	r0, #0
 800d006:	f000 8157 	beq.w	800d2b8 <_dtoa_r+0x938>
 800d00a:	2400      	movs	r4, #0
 800d00c:	4625      	mov	r5, r4
 800d00e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d010:	43db      	mvns	r3, r3
 800d012:	9304      	str	r3, [sp, #16]
 800d014:	4656      	mov	r6, sl
 800d016:	2700      	movs	r7, #0
 800d018:	4621      	mov	r1, r4
 800d01a:	4658      	mov	r0, fp
 800d01c:	f000 ff00 	bl	800de20 <_Bfree>
 800d020:	2d00      	cmp	r5, #0
 800d022:	d0dc      	beq.n	800cfde <_dtoa_r+0x65e>
 800d024:	b12f      	cbz	r7, 800d032 <_dtoa_r+0x6b2>
 800d026:	42af      	cmp	r7, r5
 800d028:	d003      	beq.n	800d032 <_dtoa_r+0x6b2>
 800d02a:	4639      	mov	r1, r7
 800d02c:	4658      	mov	r0, fp
 800d02e:	f000 fef7 	bl	800de20 <_Bfree>
 800d032:	4629      	mov	r1, r5
 800d034:	4658      	mov	r0, fp
 800d036:	f000 fef3 	bl	800de20 <_Bfree>
 800d03a:	e7d0      	b.n	800cfde <_dtoa_r+0x65e>
 800d03c:	9704      	str	r7, [sp, #16]
 800d03e:	4633      	mov	r3, r6
 800d040:	461e      	mov	r6, r3
 800d042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d046:	2a39      	cmp	r2, #57	@ 0x39
 800d048:	d107      	bne.n	800d05a <_dtoa_r+0x6da>
 800d04a:	459a      	cmp	sl, r3
 800d04c:	d1f8      	bne.n	800d040 <_dtoa_r+0x6c0>
 800d04e:	9a04      	ldr	r2, [sp, #16]
 800d050:	3201      	adds	r2, #1
 800d052:	9204      	str	r2, [sp, #16]
 800d054:	2230      	movs	r2, #48	@ 0x30
 800d056:	f88a 2000 	strb.w	r2, [sl]
 800d05a:	781a      	ldrb	r2, [r3, #0]
 800d05c:	3201      	adds	r2, #1
 800d05e:	701a      	strb	r2, [r3, #0]
 800d060:	e7bd      	b.n	800cfde <_dtoa_r+0x65e>
 800d062:	4b7b      	ldr	r3, [pc, #492]	@ (800d250 <_dtoa_r+0x8d0>)
 800d064:	2200      	movs	r2, #0
 800d066:	f7f3 fac7 	bl	80005f8 <__aeabi_dmul>
 800d06a:	2200      	movs	r2, #0
 800d06c:	2300      	movs	r3, #0
 800d06e:	4604      	mov	r4, r0
 800d070:	460d      	mov	r5, r1
 800d072:	f7f3 fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 800d076:	2800      	cmp	r0, #0
 800d078:	f43f aebb 	beq.w	800cdf2 <_dtoa_r+0x472>
 800d07c:	e6f0      	b.n	800ce60 <_dtoa_r+0x4e0>
 800d07e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d080:	2a00      	cmp	r2, #0
 800d082:	f000 80db 	beq.w	800d23c <_dtoa_r+0x8bc>
 800d086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d088:	2a01      	cmp	r2, #1
 800d08a:	f300 80bf 	bgt.w	800d20c <_dtoa_r+0x88c>
 800d08e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d090:	2a00      	cmp	r2, #0
 800d092:	f000 80b7 	beq.w	800d204 <_dtoa_r+0x884>
 800d096:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d09a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d09c:	4646      	mov	r6, r8
 800d09e:	9a08      	ldr	r2, [sp, #32]
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	441a      	add	r2, r3
 800d0a4:	4658      	mov	r0, fp
 800d0a6:	4498      	add	r8, r3
 800d0a8:	9208      	str	r2, [sp, #32]
 800d0aa:	f000 ffb7 	bl	800e01c <__i2b>
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	b15e      	cbz	r6, 800d0ca <_dtoa_r+0x74a>
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	dd08      	ble.n	800d0ca <_dtoa_r+0x74a>
 800d0b8:	42b3      	cmp	r3, r6
 800d0ba:	9a08      	ldr	r2, [sp, #32]
 800d0bc:	bfa8      	it	ge
 800d0be:	4633      	movge	r3, r6
 800d0c0:	eba8 0803 	sub.w	r8, r8, r3
 800d0c4:	1af6      	subs	r6, r6, r3
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	9308      	str	r3, [sp, #32]
 800d0ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0cc:	b1f3      	cbz	r3, 800d10c <_dtoa_r+0x78c>
 800d0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 80b7 	beq.w	800d244 <_dtoa_r+0x8c4>
 800d0d6:	b18c      	cbz	r4, 800d0fc <_dtoa_r+0x77c>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4622      	mov	r2, r4
 800d0dc:	4658      	mov	r0, fp
 800d0de:	f001 f85d 	bl	800e19c <__pow5mult>
 800d0e2:	464a      	mov	r2, r9
 800d0e4:	4601      	mov	r1, r0
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	4658      	mov	r0, fp
 800d0ea:	f000 ffad 	bl	800e048 <__multiply>
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	9004      	str	r0, [sp, #16]
 800d0f2:	4658      	mov	r0, fp
 800d0f4:	f000 fe94 	bl	800de20 <_Bfree>
 800d0f8:	9b04      	ldr	r3, [sp, #16]
 800d0fa:	4699      	mov	r9, r3
 800d0fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0fe:	1b1a      	subs	r2, r3, r4
 800d100:	d004      	beq.n	800d10c <_dtoa_r+0x78c>
 800d102:	4649      	mov	r1, r9
 800d104:	4658      	mov	r0, fp
 800d106:	f001 f849 	bl	800e19c <__pow5mult>
 800d10a:	4681      	mov	r9, r0
 800d10c:	2101      	movs	r1, #1
 800d10e:	4658      	mov	r0, fp
 800d110:	f000 ff84 	bl	800e01c <__i2b>
 800d114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d116:	4604      	mov	r4, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f000 81cf 	beq.w	800d4bc <_dtoa_r+0xb3c>
 800d11e:	461a      	mov	r2, r3
 800d120:	4601      	mov	r1, r0
 800d122:	4658      	mov	r0, fp
 800d124:	f001 f83a 	bl	800e19c <__pow5mult>
 800d128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	4604      	mov	r4, r0
 800d12e:	f300 8095 	bgt.w	800d25c <_dtoa_r+0x8dc>
 800d132:	9b02      	ldr	r3, [sp, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f040 8087 	bne.w	800d248 <_dtoa_r+0x8c8>
 800d13a:	9b03      	ldr	r3, [sp, #12]
 800d13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d140:	2b00      	cmp	r3, #0
 800d142:	f040 8089 	bne.w	800d258 <_dtoa_r+0x8d8>
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d14c:	0d1b      	lsrs	r3, r3, #20
 800d14e:	051b      	lsls	r3, r3, #20
 800d150:	b12b      	cbz	r3, 800d15e <_dtoa_r+0x7de>
 800d152:	9b08      	ldr	r3, [sp, #32]
 800d154:	3301      	adds	r3, #1
 800d156:	9308      	str	r3, [sp, #32]
 800d158:	f108 0801 	add.w	r8, r8, #1
 800d15c:	2301      	movs	r3, #1
 800d15e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 81b0 	beq.w	800d4c8 <_dtoa_r+0xb48>
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d16e:	6918      	ldr	r0, [r3, #16]
 800d170:	f000 ff08 	bl	800df84 <__hi0bits>
 800d174:	f1c0 0020 	rsb	r0, r0, #32
 800d178:	9b08      	ldr	r3, [sp, #32]
 800d17a:	4418      	add	r0, r3
 800d17c:	f010 001f 	ands.w	r0, r0, #31
 800d180:	d077      	beq.n	800d272 <_dtoa_r+0x8f2>
 800d182:	f1c0 0320 	rsb	r3, r0, #32
 800d186:	2b04      	cmp	r3, #4
 800d188:	dd6b      	ble.n	800d262 <_dtoa_r+0x8e2>
 800d18a:	9b08      	ldr	r3, [sp, #32]
 800d18c:	f1c0 001c 	rsb	r0, r0, #28
 800d190:	4403      	add	r3, r0
 800d192:	4480      	add	r8, r0
 800d194:	4406      	add	r6, r0
 800d196:	9308      	str	r3, [sp, #32]
 800d198:	f1b8 0f00 	cmp.w	r8, #0
 800d19c:	dd05      	ble.n	800d1aa <_dtoa_r+0x82a>
 800d19e:	4649      	mov	r1, r9
 800d1a0:	4642      	mov	r2, r8
 800d1a2:	4658      	mov	r0, fp
 800d1a4:	f001 f854 	bl	800e250 <__lshift>
 800d1a8:	4681      	mov	r9, r0
 800d1aa:	9b08      	ldr	r3, [sp, #32]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dd05      	ble.n	800d1bc <_dtoa_r+0x83c>
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	4658      	mov	r0, fp
 800d1b6:	f001 f84b 	bl	800e250 <__lshift>
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d059      	beq.n	800d276 <_dtoa_r+0x8f6>
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4648      	mov	r0, r9
 800d1c6:	f001 f8af 	bl	800e328 <__mcmp>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	da53      	bge.n	800d276 <_dtoa_r+0x8f6>
 800d1ce:	1e7b      	subs	r3, r7, #1
 800d1d0:	9304      	str	r3, [sp, #16]
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	220a      	movs	r2, #10
 800d1d8:	4658      	mov	r0, fp
 800d1da:	f000 fe43 	bl	800de64 <__multadd>
 800d1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1e0:	4681      	mov	r9, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f000 8172 	beq.w	800d4cc <_dtoa_r+0xb4c>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	220a      	movs	r2, #10
 800d1ee:	4658      	mov	r0, fp
 800d1f0:	f000 fe38 	bl	800de64 <__multadd>
 800d1f4:	9b00      	ldr	r3, [sp, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	4605      	mov	r5, r0
 800d1fa:	dc67      	bgt.n	800d2cc <_dtoa_r+0x94c>
 800d1fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	dc41      	bgt.n	800d286 <_dtoa_r+0x906>
 800d202:	e063      	b.n	800d2cc <_dtoa_r+0x94c>
 800d204:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d206:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d20a:	e746      	b.n	800d09a <_dtoa_r+0x71a>
 800d20c:	9b07      	ldr	r3, [sp, #28]
 800d20e:	1e5c      	subs	r4, r3, #1
 800d210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d212:	42a3      	cmp	r3, r4
 800d214:	bfbf      	itttt	lt
 800d216:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d218:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d21a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d21c:	1ae3      	sublt	r3, r4, r3
 800d21e:	bfb4      	ite	lt
 800d220:	18d2      	addlt	r2, r2, r3
 800d222:	1b1c      	subge	r4, r3, r4
 800d224:	9b07      	ldr	r3, [sp, #28]
 800d226:	bfbc      	itt	lt
 800d228:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d22a:	2400      	movlt	r4, #0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfb5      	itete	lt
 800d230:	eba8 0603 	sublt.w	r6, r8, r3
 800d234:	9b07      	ldrge	r3, [sp, #28]
 800d236:	2300      	movlt	r3, #0
 800d238:	4646      	movge	r6, r8
 800d23a:	e730      	b.n	800d09e <_dtoa_r+0x71e>
 800d23c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d23e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d240:	4646      	mov	r6, r8
 800d242:	e735      	b.n	800d0b0 <_dtoa_r+0x730>
 800d244:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d246:	e75c      	b.n	800d102 <_dtoa_r+0x782>
 800d248:	2300      	movs	r3, #0
 800d24a:	e788      	b.n	800d15e <_dtoa_r+0x7de>
 800d24c:	3fe00000 	.word	0x3fe00000
 800d250:	40240000 	.word	0x40240000
 800d254:	40140000 	.word	0x40140000
 800d258:	9b02      	ldr	r3, [sp, #8]
 800d25a:	e780      	b.n	800d15e <_dtoa_r+0x7de>
 800d25c:	2300      	movs	r3, #0
 800d25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d260:	e782      	b.n	800d168 <_dtoa_r+0x7e8>
 800d262:	d099      	beq.n	800d198 <_dtoa_r+0x818>
 800d264:	9a08      	ldr	r2, [sp, #32]
 800d266:	331c      	adds	r3, #28
 800d268:	441a      	add	r2, r3
 800d26a:	4498      	add	r8, r3
 800d26c:	441e      	add	r6, r3
 800d26e:	9208      	str	r2, [sp, #32]
 800d270:	e792      	b.n	800d198 <_dtoa_r+0x818>
 800d272:	4603      	mov	r3, r0
 800d274:	e7f6      	b.n	800d264 <_dtoa_r+0x8e4>
 800d276:	9b07      	ldr	r3, [sp, #28]
 800d278:	9704      	str	r7, [sp, #16]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	dc20      	bgt.n	800d2c0 <_dtoa_r+0x940>
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d282:	2b02      	cmp	r3, #2
 800d284:	dd1e      	ble.n	800d2c4 <_dtoa_r+0x944>
 800d286:	9b00      	ldr	r3, [sp, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f47f aec0 	bne.w	800d00e <_dtoa_r+0x68e>
 800d28e:	4621      	mov	r1, r4
 800d290:	2205      	movs	r2, #5
 800d292:	4658      	mov	r0, fp
 800d294:	f000 fde6 	bl	800de64 <__multadd>
 800d298:	4601      	mov	r1, r0
 800d29a:	4604      	mov	r4, r0
 800d29c:	4648      	mov	r0, r9
 800d29e:	f001 f843 	bl	800e328 <__mcmp>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	f77f aeb3 	ble.w	800d00e <_dtoa_r+0x68e>
 800d2a8:	4656      	mov	r6, sl
 800d2aa:	2331      	movs	r3, #49	@ 0x31
 800d2ac:	f806 3b01 	strb.w	r3, [r6], #1
 800d2b0:	9b04      	ldr	r3, [sp, #16]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	9304      	str	r3, [sp, #16]
 800d2b6:	e6ae      	b.n	800d016 <_dtoa_r+0x696>
 800d2b8:	9c07      	ldr	r4, [sp, #28]
 800d2ba:	9704      	str	r7, [sp, #16]
 800d2bc:	4625      	mov	r5, r4
 800d2be:	e7f3      	b.n	800d2a8 <_dtoa_r+0x928>
 800d2c0:	9b07      	ldr	r3, [sp, #28]
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f000 8104 	beq.w	800d4d4 <_dtoa_r+0xb54>
 800d2cc:	2e00      	cmp	r6, #0
 800d2ce:	dd05      	ble.n	800d2dc <_dtoa_r+0x95c>
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4632      	mov	r2, r6
 800d2d4:	4658      	mov	r0, fp
 800d2d6:	f000 ffbb 	bl	800e250 <__lshift>
 800d2da:	4605      	mov	r5, r0
 800d2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d05a      	beq.n	800d398 <_dtoa_r+0xa18>
 800d2e2:	6869      	ldr	r1, [r5, #4]
 800d2e4:	4658      	mov	r0, fp
 800d2e6:	f000 fd5b 	bl	800dda0 <_Balloc>
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	b928      	cbnz	r0, 800d2fa <_dtoa_r+0x97a>
 800d2ee:	4b84      	ldr	r3, [pc, #528]	@ (800d500 <_dtoa_r+0xb80>)
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2f6:	f7ff bb5a 	b.w	800c9ae <_dtoa_r+0x2e>
 800d2fa:	692a      	ldr	r2, [r5, #16]
 800d2fc:	3202      	adds	r2, #2
 800d2fe:	0092      	lsls	r2, r2, #2
 800d300:	f105 010c 	add.w	r1, r5, #12
 800d304:	300c      	adds	r0, #12
 800d306:	f7ff fa76 	bl	800c7f6 <memcpy>
 800d30a:	2201      	movs	r2, #1
 800d30c:	4631      	mov	r1, r6
 800d30e:	4658      	mov	r0, fp
 800d310:	f000 ff9e 	bl	800e250 <__lshift>
 800d314:	f10a 0301 	add.w	r3, sl, #1
 800d318:	9307      	str	r3, [sp, #28]
 800d31a:	9b00      	ldr	r3, [sp, #0]
 800d31c:	4453      	add	r3, sl
 800d31e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d320:	9b02      	ldr	r3, [sp, #8]
 800d322:	f003 0301 	and.w	r3, r3, #1
 800d326:	462f      	mov	r7, r5
 800d328:	930a      	str	r3, [sp, #40]	@ 0x28
 800d32a:	4605      	mov	r5, r0
 800d32c:	9b07      	ldr	r3, [sp, #28]
 800d32e:	4621      	mov	r1, r4
 800d330:	3b01      	subs	r3, #1
 800d332:	4648      	mov	r0, r9
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	f7ff fa9b 	bl	800c870 <quorem>
 800d33a:	4639      	mov	r1, r7
 800d33c:	9002      	str	r0, [sp, #8]
 800d33e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d342:	4648      	mov	r0, r9
 800d344:	f000 fff0 	bl	800e328 <__mcmp>
 800d348:	462a      	mov	r2, r5
 800d34a:	9008      	str	r0, [sp, #32]
 800d34c:	4621      	mov	r1, r4
 800d34e:	4658      	mov	r0, fp
 800d350:	f001 f806 	bl	800e360 <__mdiff>
 800d354:	68c2      	ldr	r2, [r0, #12]
 800d356:	4606      	mov	r6, r0
 800d358:	bb02      	cbnz	r2, 800d39c <_dtoa_r+0xa1c>
 800d35a:	4601      	mov	r1, r0
 800d35c:	4648      	mov	r0, r9
 800d35e:	f000 ffe3 	bl	800e328 <__mcmp>
 800d362:	4602      	mov	r2, r0
 800d364:	4631      	mov	r1, r6
 800d366:	4658      	mov	r0, fp
 800d368:	920e      	str	r2, [sp, #56]	@ 0x38
 800d36a:	f000 fd59 	bl	800de20 <_Bfree>
 800d36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d370:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d372:	9e07      	ldr	r6, [sp, #28]
 800d374:	ea43 0102 	orr.w	r1, r3, r2
 800d378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d37a:	4319      	orrs	r1, r3
 800d37c:	d110      	bne.n	800d3a0 <_dtoa_r+0xa20>
 800d37e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d382:	d029      	beq.n	800d3d8 <_dtoa_r+0xa58>
 800d384:	9b08      	ldr	r3, [sp, #32]
 800d386:	2b00      	cmp	r3, #0
 800d388:	dd02      	ble.n	800d390 <_dtoa_r+0xa10>
 800d38a:	9b02      	ldr	r3, [sp, #8]
 800d38c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d390:	9b00      	ldr	r3, [sp, #0]
 800d392:	f883 8000 	strb.w	r8, [r3]
 800d396:	e63f      	b.n	800d018 <_dtoa_r+0x698>
 800d398:	4628      	mov	r0, r5
 800d39a:	e7bb      	b.n	800d314 <_dtoa_r+0x994>
 800d39c:	2201      	movs	r2, #1
 800d39e:	e7e1      	b.n	800d364 <_dtoa_r+0x9e4>
 800d3a0:	9b08      	ldr	r3, [sp, #32]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	db04      	blt.n	800d3b0 <_dtoa_r+0xa30>
 800d3a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3a8:	430b      	orrs	r3, r1
 800d3aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3ac:	430b      	orrs	r3, r1
 800d3ae:	d120      	bne.n	800d3f2 <_dtoa_r+0xa72>
 800d3b0:	2a00      	cmp	r2, #0
 800d3b2:	dded      	ble.n	800d390 <_dtoa_r+0xa10>
 800d3b4:	4649      	mov	r1, r9
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	4658      	mov	r0, fp
 800d3ba:	f000 ff49 	bl	800e250 <__lshift>
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4681      	mov	r9, r0
 800d3c2:	f000 ffb1 	bl	800e328 <__mcmp>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	dc03      	bgt.n	800d3d2 <_dtoa_r+0xa52>
 800d3ca:	d1e1      	bne.n	800d390 <_dtoa_r+0xa10>
 800d3cc:	f018 0f01 	tst.w	r8, #1
 800d3d0:	d0de      	beq.n	800d390 <_dtoa_r+0xa10>
 800d3d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3d6:	d1d8      	bne.n	800d38a <_dtoa_r+0xa0a>
 800d3d8:	9a00      	ldr	r2, [sp, #0]
 800d3da:	2339      	movs	r3, #57	@ 0x39
 800d3dc:	7013      	strb	r3, [r2, #0]
 800d3de:	4633      	mov	r3, r6
 800d3e0:	461e      	mov	r6, r3
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3e8:	2a39      	cmp	r2, #57	@ 0x39
 800d3ea:	d052      	beq.n	800d492 <_dtoa_r+0xb12>
 800d3ec:	3201      	adds	r2, #1
 800d3ee:	701a      	strb	r2, [r3, #0]
 800d3f0:	e612      	b.n	800d018 <_dtoa_r+0x698>
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	dd07      	ble.n	800d406 <_dtoa_r+0xa86>
 800d3f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3fa:	d0ed      	beq.n	800d3d8 <_dtoa_r+0xa58>
 800d3fc:	9a00      	ldr	r2, [sp, #0]
 800d3fe:	f108 0301 	add.w	r3, r8, #1
 800d402:	7013      	strb	r3, [r2, #0]
 800d404:	e608      	b.n	800d018 <_dtoa_r+0x698>
 800d406:	9b07      	ldr	r3, [sp, #28]
 800d408:	9a07      	ldr	r2, [sp, #28]
 800d40a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d40e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d410:	4293      	cmp	r3, r2
 800d412:	d028      	beq.n	800d466 <_dtoa_r+0xae6>
 800d414:	4649      	mov	r1, r9
 800d416:	2300      	movs	r3, #0
 800d418:	220a      	movs	r2, #10
 800d41a:	4658      	mov	r0, fp
 800d41c:	f000 fd22 	bl	800de64 <__multadd>
 800d420:	42af      	cmp	r7, r5
 800d422:	4681      	mov	r9, r0
 800d424:	f04f 0300 	mov.w	r3, #0
 800d428:	f04f 020a 	mov.w	r2, #10
 800d42c:	4639      	mov	r1, r7
 800d42e:	4658      	mov	r0, fp
 800d430:	d107      	bne.n	800d442 <_dtoa_r+0xac2>
 800d432:	f000 fd17 	bl	800de64 <__multadd>
 800d436:	4607      	mov	r7, r0
 800d438:	4605      	mov	r5, r0
 800d43a:	9b07      	ldr	r3, [sp, #28]
 800d43c:	3301      	adds	r3, #1
 800d43e:	9307      	str	r3, [sp, #28]
 800d440:	e774      	b.n	800d32c <_dtoa_r+0x9ac>
 800d442:	f000 fd0f 	bl	800de64 <__multadd>
 800d446:	4629      	mov	r1, r5
 800d448:	4607      	mov	r7, r0
 800d44a:	2300      	movs	r3, #0
 800d44c:	220a      	movs	r2, #10
 800d44e:	4658      	mov	r0, fp
 800d450:	f000 fd08 	bl	800de64 <__multadd>
 800d454:	4605      	mov	r5, r0
 800d456:	e7f0      	b.n	800d43a <_dtoa_r+0xaba>
 800d458:	9b00      	ldr	r3, [sp, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	bfcc      	ite	gt
 800d45e:	461e      	movgt	r6, r3
 800d460:	2601      	movle	r6, #1
 800d462:	4456      	add	r6, sl
 800d464:	2700      	movs	r7, #0
 800d466:	4649      	mov	r1, r9
 800d468:	2201      	movs	r2, #1
 800d46a:	4658      	mov	r0, fp
 800d46c:	f000 fef0 	bl	800e250 <__lshift>
 800d470:	4621      	mov	r1, r4
 800d472:	4681      	mov	r9, r0
 800d474:	f000 ff58 	bl	800e328 <__mcmp>
 800d478:	2800      	cmp	r0, #0
 800d47a:	dcb0      	bgt.n	800d3de <_dtoa_r+0xa5e>
 800d47c:	d102      	bne.n	800d484 <_dtoa_r+0xb04>
 800d47e:	f018 0f01 	tst.w	r8, #1
 800d482:	d1ac      	bne.n	800d3de <_dtoa_r+0xa5e>
 800d484:	4633      	mov	r3, r6
 800d486:	461e      	mov	r6, r3
 800d488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d48c:	2a30      	cmp	r2, #48	@ 0x30
 800d48e:	d0fa      	beq.n	800d486 <_dtoa_r+0xb06>
 800d490:	e5c2      	b.n	800d018 <_dtoa_r+0x698>
 800d492:	459a      	cmp	sl, r3
 800d494:	d1a4      	bne.n	800d3e0 <_dtoa_r+0xa60>
 800d496:	9b04      	ldr	r3, [sp, #16]
 800d498:	3301      	adds	r3, #1
 800d49a:	9304      	str	r3, [sp, #16]
 800d49c:	2331      	movs	r3, #49	@ 0x31
 800d49e:	f88a 3000 	strb.w	r3, [sl]
 800d4a2:	e5b9      	b.n	800d018 <_dtoa_r+0x698>
 800d4a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d504 <_dtoa_r+0xb84>
 800d4aa:	b11b      	cbz	r3, 800d4b4 <_dtoa_r+0xb34>
 800d4ac:	f10a 0308 	add.w	r3, sl, #8
 800d4b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d4b2:	6013      	str	r3, [r2, #0]
 800d4b4:	4650      	mov	r0, sl
 800d4b6:	b019      	add	sp, #100	@ 0x64
 800d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	f77f ae37 	ble.w	800d132 <_dtoa_r+0x7b2>
 800d4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4c8:	2001      	movs	r0, #1
 800d4ca:	e655      	b.n	800d178 <_dtoa_r+0x7f8>
 800d4cc:	9b00      	ldr	r3, [sp, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f77f aed6 	ble.w	800d280 <_dtoa_r+0x900>
 800d4d4:	4656      	mov	r6, sl
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	4648      	mov	r0, r9
 800d4da:	f7ff f9c9 	bl	800c870 <quorem>
 800d4de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4e2:	f806 8b01 	strb.w	r8, [r6], #1
 800d4e6:	9b00      	ldr	r3, [sp, #0]
 800d4e8:	eba6 020a 	sub.w	r2, r6, sl
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	ddb3      	ble.n	800d458 <_dtoa_r+0xad8>
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	220a      	movs	r2, #10
 800d4f6:	4658      	mov	r0, fp
 800d4f8:	f000 fcb4 	bl	800de64 <__multadd>
 800d4fc:	4681      	mov	r9, r0
 800d4fe:	e7ea      	b.n	800d4d6 <_dtoa_r+0xb56>
 800d500:	080115b4 	.word	0x080115b4
 800d504:	0801154f 	.word	0x0801154f

0800d508 <_free_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4605      	mov	r5, r0
 800d50c:	2900      	cmp	r1, #0
 800d50e:	d041      	beq.n	800d594 <_free_r+0x8c>
 800d510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d514:	1f0c      	subs	r4, r1, #4
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfb8      	it	lt
 800d51a:	18e4      	addlt	r4, r4, r3
 800d51c:	f000 fc34 	bl	800dd88 <__malloc_lock>
 800d520:	4a1d      	ldr	r2, [pc, #116]	@ (800d598 <_free_r+0x90>)
 800d522:	6813      	ldr	r3, [r2, #0]
 800d524:	b933      	cbnz	r3, 800d534 <_free_r+0x2c>
 800d526:	6063      	str	r3, [r4, #4]
 800d528:	6014      	str	r4, [r2, #0]
 800d52a:	4628      	mov	r0, r5
 800d52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d530:	f000 bc30 	b.w	800dd94 <__malloc_unlock>
 800d534:	42a3      	cmp	r3, r4
 800d536:	d908      	bls.n	800d54a <_free_r+0x42>
 800d538:	6820      	ldr	r0, [r4, #0]
 800d53a:	1821      	adds	r1, r4, r0
 800d53c:	428b      	cmp	r3, r1
 800d53e:	bf01      	itttt	eq
 800d540:	6819      	ldreq	r1, [r3, #0]
 800d542:	685b      	ldreq	r3, [r3, #4]
 800d544:	1809      	addeq	r1, r1, r0
 800d546:	6021      	streq	r1, [r4, #0]
 800d548:	e7ed      	b.n	800d526 <_free_r+0x1e>
 800d54a:	461a      	mov	r2, r3
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	b10b      	cbz	r3, 800d554 <_free_r+0x4c>
 800d550:	42a3      	cmp	r3, r4
 800d552:	d9fa      	bls.n	800d54a <_free_r+0x42>
 800d554:	6811      	ldr	r1, [r2, #0]
 800d556:	1850      	adds	r0, r2, r1
 800d558:	42a0      	cmp	r0, r4
 800d55a:	d10b      	bne.n	800d574 <_free_r+0x6c>
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	4401      	add	r1, r0
 800d560:	1850      	adds	r0, r2, r1
 800d562:	4283      	cmp	r3, r0
 800d564:	6011      	str	r1, [r2, #0]
 800d566:	d1e0      	bne.n	800d52a <_free_r+0x22>
 800d568:	6818      	ldr	r0, [r3, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	6053      	str	r3, [r2, #4]
 800d56e:	4408      	add	r0, r1
 800d570:	6010      	str	r0, [r2, #0]
 800d572:	e7da      	b.n	800d52a <_free_r+0x22>
 800d574:	d902      	bls.n	800d57c <_free_r+0x74>
 800d576:	230c      	movs	r3, #12
 800d578:	602b      	str	r3, [r5, #0]
 800d57a:	e7d6      	b.n	800d52a <_free_r+0x22>
 800d57c:	6820      	ldr	r0, [r4, #0]
 800d57e:	1821      	adds	r1, r4, r0
 800d580:	428b      	cmp	r3, r1
 800d582:	bf04      	itt	eq
 800d584:	6819      	ldreq	r1, [r3, #0]
 800d586:	685b      	ldreq	r3, [r3, #4]
 800d588:	6063      	str	r3, [r4, #4]
 800d58a:	bf04      	itt	eq
 800d58c:	1809      	addeq	r1, r1, r0
 800d58e:	6021      	streq	r1, [r4, #0]
 800d590:	6054      	str	r4, [r2, #4]
 800d592:	e7ca      	b.n	800d52a <_free_r+0x22>
 800d594:	bd38      	pop	{r3, r4, r5, pc}
 800d596:	bf00      	nop
 800d598:	20000860 	.word	0x20000860

0800d59c <rshift>:
 800d59c:	6903      	ldr	r3, [r0, #16]
 800d59e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d5aa:	f100 0414 	add.w	r4, r0, #20
 800d5ae:	dd45      	ble.n	800d63c <rshift+0xa0>
 800d5b0:	f011 011f 	ands.w	r1, r1, #31
 800d5b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d5b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d5bc:	d10c      	bne.n	800d5d8 <rshift+0x3c>
 800d5be:	f100 0710 	add.w	r7, r0, #16
 800d5c2:	4629      	mov	r1, r5
 800d5c4:	42b1      	cmp	r1, r6
 800d5c6:	d334      	bcc.n	800d632 <rshift+0x96>
 800d5c8:	1a9b      	subs	r3, r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	1eea      	subs	r2, r5, #3
 800d5ce:	4296      	cmp	r6, r2
 800d5d0:	bf38      	it	cc
 800d5d2:	2300      	movcc	r3, #0
 800d5d4:	4423      	add	r3, r4
 800d5d6:	e015      	b.n	800d604 <rshift+0x68>
 800d5d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d5dc:	f1c1 0820 	rsb	r8, r1, #32
 800d5e0:	40cf      	lsrs	r7, r1
 800d5e2:	f105 0e04 	add.w	lr, r5, #4
 800d5e6:	46a1      	mov	r9, r4
 800d5e8:	4576      	cmp	r6, lr
 800d5ea:	46f4      	mov	ip, lr
 800d5ec:	d815      	bhi.n	800d61a <rshift+0x7e>
 800d5ee:	1a9a      	subs	r2, r3, r2
 800d5f0:	0092      	lsls	r2, r2, #2
 800d5f2:	3a04      	subs	r2, #4
 800d5f4:	3501      	adds	r5, #1
 800d5f6:	42ae      	cmp	r6, r5
 800d5f8:	bf38      	it	cc
 800d5fa:	2200      	movcc	r2, #0
 800d5fc:	18a3      	adds	r3, r4, r2
 800d5fe:	50a7      	str	r7, [r4, r2]
 800d600:	b107      	cbz	r7, 800d604 <rshift+0x68>
 800d602:	3304      	adds	r3, #4
 800d604:	1b1a      	subs	r2, r3, r4
 800d606:	42a3      	cmp	r3, r4
 800d608:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d60c:	bf08      	it	eq
 800d60e:	2300      	moveq	r3, #0
 800d610:	6102      	str	r2, [r0, #16]
 800d612:	bf08      	it	eq
 800d614:	6143      	streq	r3, [r0, #20]
 800d616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d61a:	f8dc c000 	ldr.w	ip, [ip]
 800d61e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d622:	ea4c 0707 	orr.w	r7, ip, r7
 800d626:	f849 7b04 	str.w	r7, [r9], #4
 800d62a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d62e:	40cf      	lsrs	r7, r1
 800d630:	e7da      	b.n	800d5e8 <rshift+0x4c>
 800d632:	f851 cb04 	ldr.w	ip, [r1], #4
 800d636:	f847 cf04 	str.w	ip, [r7, #4]!
 800d63a:	e7c3      	b.n	800d5c4 <rshift+0x28>
 800d63c:	4623      	mov	r3, r4
 800d63e:	e7e1      	b.n	800d604 <rshift+0x68>

0800d640 <__hexdig_fun>:
 800d640:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d644:	2b09      	cmp	r3, #9
 800d646:	d802      	bhi.n	800d64e <__hexdig_fun+0xe>
 800d648:	3820      	subs	r0, #32
 800d64a:	b2c0      	uxtb	r0, r0
 800d64c:	4770      	bx	lr
 800d64e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d652:	2b05      	cmp	r3, #5
 800d654:	d801      	bhi.n	800d65a <__hexdig_fun+0x1a>
 800d656:	3847      	subs	r0, #71	@ 0x47
 800d658:	e7f7      	b.n	800d64a <__hexdig_fun+0xa>
 800d65a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d65e:	2b05      	cmp	r3, #5
 800d660:	d801      	bhi.n	800d666 <__hexdig_fun+0x26>
 800d662:	3827      	subs	r0, #39	@ 0x27
 800d664:	e7f1      	b.n	800d64a <__hexdig_fun+0xa>
 800d666:	2000      	movs	r0, #0
 800d668:	4770      	bx	lr
	...

0800d66c <__gethex>:
 800d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d670:	b085      	sub	sp, #20
 800d672:	468a      	mov	sl, r1
 800d674:	9302      	str	r3, [sp, #8]
 800d676:	680b      	ldr	r3, [r1, #0]
 800d678:	9001      	str	r0, [sp, #4]
 800d67a:	4690      	mov	r8, r2
 800d67c:	1c9c      	adds	r4, r3, #2
 800d67e:	46a1      	mov	r9, r4
 800d680:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d684:	2830      	cmp	r0, #48	@ 0x30
 800d686:	d0fa      	beq.n	800d67e <__gethex+0x12>
 800d688:	eba9 0303 	sub.w	r3, r9, r3
 800d68c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d690:	f7ff ffd6 	bl	800d640 <__hexdig_fun>
 800d694:	4605      	mov	r5, r0
 800d696:	2800      	cmp	r0, #0
 800d698:	d168      	bne.n	800d76c <__gethex+0x100>
 800d69a:	49a0      	ldr	r1, [pc, #640]	@ (800d91c <__gethex+0x2b0>)
 800d69c:	2201      	movs	r2, #1
 800d69e:	4648      	mov	r0, r9
 800d6a0:	f7fe ffc3 	bl	800c62a <strncmp>
 800d6a4:	4607      	mov	r7, r0
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d167      	bne.n	800d77a <__gethex+0x10e>
 800d6aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d6ae:	4626      	mov	r6, r4
 800d6b0:	f7ff ffc6 	bl	800d640 <__hexdig_fun>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d062      	beq.n	800d77e <__gethex+0x112>
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	7818      	ldrb	r0, [r3, #0]
 800d6bc:	2830      	cmp	r0, #48	@ 0x30
 800d6be:	4699      	mov	r9, r3
 800d6c0:	f103 0301 	add.w	r3, r3, #1
 800d6c4:	d0f9      	beq.n	800d6ba <__gethex+0x4e>
 800d6c6:	f7ff ffbb 	bl	800d640 <__hexdig_fun>
 800d6ca:	fab0 f580 	clz	r5, r0
 800d6ce:	096d      	lsrs	r5, r5, #5
 800d6d0:	f04f 0b01 	mov.w	fp, #1
 800d6d4:	464a      	mov	r2, r9
 800d6d6:	4616      	mov	r6, r2
 800d6d8:	3201      	adds	r2, #1
 800d6da:	7830      	ldrb	r0, [r6, #0]
 800d6dc:	f7ff ffb0 	bl	800d640 <__hexdig_fun>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d1f8      	bne.n	800d6d6 <__gethex+0x6a>
 800d6e4:	498d      	ldr	r1, [pc, #564]	@ (800d91c <__gethex+0x2b0>)
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f7fe ff9e 	bl	800c62a <strncmp>
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d13f      	bne.n	800d772 <__gethex+0x106>
 800d6f2:	b944      	cbnz	r4, 800d706 <__gethex+0x9a>
 800d6f4:	1c74      	adds	r4, r6, #1
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4616      	mov	r6, r2
 800d6fa:	3201      	adds	r2, #1
 800d6fc:	7830      	ldrb	r0, [r6, #0]
 800d6fe:	f7ff ff9f 	bl	800d640 <__hexdig_fun>
 800d702:	2800      	cmp	r0, #0
 800d704:	d1f8      	bne.n	800d6f8 <__gethex+0x8c>
 800d706:	1ba4      	subs	r4, r4, r6
 800d708:	00a7      	lsls	r7, r4, #2
 800d70a:	7833      	ldrb	r3, [r6, #0]
 800d70c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d710:	2b50      	cmp	r3, #80	@ 0x50
 800d712:	d13e      	bne.n	800d792 <__gethex+0x126>
 800d714:	7873      	ldrb	r3, [r6, #1]
 800d716:	2b2b      	cmp	r3, #43	@ 0x2b
 800d718:	d033      	beq.n	800d782 <__gethex+0x116>
 800d71a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d71c:	d034      	beq.n	800d788 <__gethex+0x11c>
 800d71e:	1c71      	adds	r1, r6, #1
 800d720:	2400      	movs	r4, #0
 800d722:	7808      	ldrb	r0, [r1, #0]
 800d724:	f7ff ff8c 	bl	800d640 <__hexdig_fun>
 800d728:	1e43      	subs	r3, r0, #1
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	2b18      	cmp	r3, #24
 800d72e:	d830      	bhi.n	800d792 <__gethex+0x126>
 800d730:	f1a0 0210 	sub.w	r2, r0, #16
 800d734:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d738:	f7ff ff82 	bl	800d640 <__hexdig_fun>
 800d73c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d740:	fa5f fc8c 	uxtb.w	ip, ip
 800d744:	f1bc 0f18 	cmp.w	ip, #24
 800d748:	f04f 030a 	mov.w	r3, #10
 800d74c:	d91e      	bls.n	800d78c <__gethex+0x120>
 800d74e:	b104      	cbz	r4, 800d752 <__gethex+0xe6>
 800d750:	4252      	negs	r2, r2
 800d752:	4417      	add	r7, r2
 800d754:	f8ca 1000 	str.w	r1, [sl]
 800d758:	b1ed      	cbz	r5, 800d796 <__gethex+0x12a>
 800d75a:	f1bb 0f00 	cmp.w	fp, #0
 800d75e:	bf0c      	ite	eq
 800d760:	2506      	moveq	r5, #6
 800d762:	2500      	movne	r5, #0
 800d764:	4628      	mov	r0, r5
 800d766:	b005      	add	sp, #20
 800d768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76c:	2500      	movs	r5, #0
 800d76e:	462c      	mov	r4, r5
 800d770:	e7b0      	b.n	800d6d4 <__gethex+0x68>
 800d772:	2c00      	cmp	r4, #0
 800d774:	d1c7      	bne.n	800d706 <__gethex+0x9a>
 800d776:	4627      	mov	r7, r4
 800d778:	e7c7      	b.n	800d70a <__gethex+0x9e>
 800d77a:	464e      	mov	r6, r9
 800d77c:	462f      	mov	r7, r5
 800d77e:	2501      	movs	r5, #1
 800d780:	e7c3      	b.n	800d70a <__gethex+0x9e>
 800d782:	2400      	movs	r4, #0
 800d784:	1cb1      	adds	r1, r6, #2
 800d786:	e7cc      	b.n	800d722 <__gethex+0xb6>
 800d788:	2401      	movs	r4, #1
 800d78a:	e7fb      	b.n	800d784 <__gethex+0x118>
 800d78c:	fb03 0002 	mla	r0, r3, r2, r0
 800d790:	e7ce      	b.n	800d730 <__gethex+0xc4>
 800d792:	4631      	mov	r1, r6
 800d794:	e7de      	b.n	800d754 <__gethex+0xe8>
 800d796:	eba6 0309 	sub.w	r3, r6, r9
 800d79a:	3b01      	subs	r3, #1
 800d79c:	4629      	mov	r1, r5
 800d79e:	2b07      	cmp	r3, #7
 800d7a0:	dc0a      	bgt.n	800d7b8 <__gethex+0x14c>
 800d7a2:	9801      	ldr	r0, [sp, #4]
 800d7a4:	f000 fafc 	bl	800dda0 <_Balloc>
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	b940      	cbnz	r0, 800d7be <__gethex+0x152>
 800d7ac:	4b5c      	ldr	r3, [pc, #368]	@ (800d920 <__gethex+0x2b4>)
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	21e4      	movs	r1, #228	@ 0xe4
 800d7b2:	485c      	ldr	r0, [pc, #368]	@ (800d924 <__gethex+0x2b8>)
 800d7b4:	f7ff f83e 	bl	800c834 <__assert_func>
 800d7b8:	3101      	adds	r1, #1
 800d7ba:	105b      	asrs	r3, r3, #1
 800d7bc:	e7ef      	b.n	800d79e <__gethex+0x132>
 800d7be:	f100 0a14 	add.w	sl, r0, #20
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4655      	mov	r5, sl
 800d7c6:	469b      	mov	fp, r3
 800d7c8:	45b1      	cmp	r9, r6
 800d7ca:	d337      	bcc.n	800d83c <__gethex+0x1d0>
 800d7cc:	f845 bb04 	str.w	fp, [r5], #4
 800d7d0:	eba5 050a 	sub.w	r5, r5, sl
 800d7d4:	10ad      	asrs	r5, r5, #2
 800d7d6:	6125      	str	r5, [r4, #16]
 800d7d8:	4658      	mov	r0, fp
 800d7da:	f000 fbd3 	bl	800df84 <__hi0bits>
 800d7de:	016d      	lsls	r5, r5, #5
 800d7e0:	f8d8 6000 	ldr.w	r6, [r8]
 800d7e4:	1a2d      	subs	r5, r5, r0
 800d7e6:	42b5      	cmp	r5, r6
 800d7e8:	dd54      	ble.n	800d894 <__gethex+0x228>
 800d7ea:	1bad      	subs	r5, r5, r6
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f000 ff67 	bl	800e6c2 <__any_on>
 800d7f4:	4681      	mov	r9, r0
 800d7f6:	b178      	cbz	r0, 800d818 <__gethex+0x1ac>
 800d7f8:	1e6b      	subs	r3, r5, #1
 800d7fa:	1159      	asrs	r1, r3, #5
 800d7fc:	f003 021f 	and.w	r2, r3, #31
 800d800:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d804:	f04f 0901 	mov.w	r9, #1
 800d808:	fa09 f202 	lsl.w	r2, r9, r2
 800d80c:	420a      	tst	r2, r1
 800d80e:	d003      	beq.n	800d818 <__gethex+0x1ac>
 800d810:	454b      	cmp	r3, r9
 800d812:	dc36      	bgt.n	800d882 <__gethex+0x216>
 800d814:	f04f 0902 	mov.w	r9, #2
 800d818:	4629      	mov	r1, r5
 800d81a:	4620      	mov	r0, r4
 800d81c:	f7ff febe 	bl	800d59c <rshift>
 800d820:	442f      	add	r7, r5
 800d822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d826:	42bb      	cmp	r3, r7
 800d828:	da42      	bge.n	800d8b0 <__gethex+0x244>
 800d82a:	9801      	ldr	r0, [sp, #4]
 800d82c:	4621      	mov	r1, r4
 800d82e:	f000 faf7 	bl	800de20 <_Bfree>
 800d832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d834:	2300      	movs	r3, #0
 800d836:	6013      	str	r3, [r2, #0]
 800d838:	25a3      	movs	r5, #163	@ 0xa3
 800d83a:	e793      	b.n	800d764 <__gethex+0xf8>
 800d83c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d840:	2a2e      	cmp	r2, #46	@ 0x2e
 800d842:	d012      	beq.n	800d86a <__gethex+0x1fe>
 800d844:	2b20      	cmp	r3, #32
 800d846:	d104      	bne.n	800d852 <__gethex+0x1e6>
 800d848:	f845 bb04 	str.w	fp, [r5], #4
 800d84c:	f04f 0b00 	mov.w	fp, #0
 800d850:	465b      	mov	r3, fp
 800d852:	7830      	ldrb	r0, [r6, #0]
 800d854:	9303      	str	r3, [sp, #12]
 800d856:	f7ff fef3 	bl	800d640 <__hexdig_fun>
 800d85a:	9b03      	ldr	r3, [sp, #12]
 800d85c:	f000 000f 	and.w	r0, r0, #15
 800d860:	4098      	lsls	r0, r3
 800d862:	ea4b 0b00 	orr.w	fp, fp, r0
 800d866:	3304      	adds	r3, #4
 800d868:	e7ae      	b.n	800d7c8 <__gethex+0x15c>
 800d86a:	45b1      	cmp	r9, r6
 800d86c:	d8ea      	bhi.n	800d844 <__gethex+0x1d8>
 800d86e:	492b      	ldr	r1, [pc, #172]	@ (800d91c <__gethex+0x2b0>)
 800d870:	9303      	str	r3, [sp, #12]
 800d872:	2201      	movs	r2, #1
 800d874:	4630      	mov	r0, r6
 800d876:	f7fe fed8 	bl	800c62a <strncmp>
 800d87a:	9b03      	ldr	r3, [sp, #12]
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d1e1      	bne.n	800d844 <__gethex+0x1d8>
 800d880:	e7a2      	b.n	800d7c8 <__gethex+0x15c>
 800d882:	1ea9      	subs	r1, r5, #2
 800d884:	4620      	mov	r0, r4
 800d886:	f000 ff1c 	bl	800e6c2 <__any_on>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d0c2      	beq.n	800d814 <__gethex+0x1a8>
 800d88e:	f04f 0903 	mov.w	r9, #3
 800d892:	e7c1      	b.n	800d818 <__gethex+0x1ac>
 800d894:	da09      	bge.n	800d8aa <__gethex+0x23e>
 800d896:	1b75      	subs	r5, r6, r5
 800d898:	4621      	mov	r1, r4
 800d89a:	9801      	ldr	r0, [sp, #4]
 800d89c:	462a      	mov	r2, r5
 800d89e:	f000 fcd7 	bl	800e250 <__lshift>
 800d8a2:	1b7f      	subs	r7, r7, r5
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	f100 0a14 	add.w	sl, r0, #20
 800d8aa:	f04f 0900 	mov.w	r9, #0
 800d8ae:	e7b8      	b.n	800d822 <__gethex+0x1b6>
 800d8b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d8b4:	42bd      	cmp	r5, r7
 800d8b6:	dd6f      	ble.n	800d998 <__gethex+0x32c>
 800d8b8:	1bed      	subs	r5, r5, r7
 800d8ba:	42ae      	cmp	r6, r5
 800d8bc:	dc34      	bgt.n	800d928 <__gethex+0x2bc>
 800d8be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d022      	beq.n	800d90c <__gethex+0x2a0>
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	d024      	beq.n	800d914 <__gethex+0x2a8>
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d115      	bne.n	800d8fa <__gethex+0x28e>
 800d8ce:	42ae      	cmp	r6, r5
 800d8d0:	d113      	bne.n	800d8fa <__gethex+0x28e>
 800d8d2:	2e01      	cmp	r6, #1
 800d8d4:	d10b      	bne.n	800d8ee <__gethex+0x282>
 800d8d6:	9a02      	ldr	r2, [sp, #8]
 800d8d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	2301      	movs	r3, #1
 800d8e0:	6123      	str	r3, [r4, #16]
 800d8e2:	f8ca 3000 	str.w	r3, [sl]
 800d8e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8e8:	2562      	movs	r5, #98	@ 0x62
 800d8ea:	601c      	str	r4, [r3, #0]
 800d8ec:	e73a      	b.n	800d764 <__gethex+0xf8>
 800d8ee:	1e71      	subs	r1, r6, #1
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f000 fee6 	bl	800e6c2 <__any_on>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d1ed      	bne.n	800d8d6 <__gethex+0x26a>
 800d8fa:	9801      	ldr	r0, [sp, #4]
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	f000 fa8f 	bl	800de20 <_Bfree>
 800d902:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d904:	2300      	movs	r3, #0
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	2550      	movs	r5, #80	@ 0x50
 800d90a:	e72b      	b.n	800d764 <__gethex+0xf8>
 800d90c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1f3      	bne.n	800d8fa <__gethex+0x28e>
 800d912:	e7e0      	b.n	800d8d6 <__gethex+0x26a>
 800d914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1dd      	bne.n	800d8d6 <__gethex+0x26a>
 800d91a:	e7ee      	b.n	800d8fa <__gethex+0x28e>
 800d91c:	0801130c 	.word	0x0801130c
 800d920:	080115b4 	.word	0x080115b4
 800d924:	080115c5 	.word	0x080115c5
 800d928:	1e6f      	subs	r7, r5, #1
 800d92a:	f1b9 0f00 	cmp.w	r9, #0
 800d92e:	d130      	bne.n	800d992 <__gethex+0x326>
 800d930:	b127      	cbz	r7, 800d93c <__gethex+0x2d0>
 800d932:	4639      	mov	r1, r7
 800d934:	4620      	mov	r0, r4
 800d936:	f000 fec4 	bl	800e6c2 <__any_on>
 800d93a:	4681      	mov	r9, r0
 800d93c:	117a      	asrs	r2, r7, #5
 800d93e:	2301      	movs	r3, #1
 800d940:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d944:	f007 071f 	and.w	r7, r7, #31
 800d948:	40bb      	lsls	r3, r7
 800d94a:	4213      	tst	r3, r2
 800d94c:	4629      	mov	r1, r5
 800d94e:	4620      	mov	r0, r4
 800d950:	bf18      	it	ne
 800d952:	f049 0902 	orrne.w	r9, r9, #2
 800d956:	f7ff fe21 	bl	800d59c <rshift>
 800d95a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d95e:	1b76      	subs	r6, r6, r5
 800d960:	2502      	movs	r5, #2
 800d962:	f1b9 0f00 	cmp.w	r9, #0
 800d966:	d047      	beq.n	800d9f8 <__gethex+0x38c>
 800d968:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d015      	beq.n	800d99c <__gethex+0x330>
 800d970:	2b03      	cmp	r3, #3
 800d972:	d017      	beq.n	800d9a4 <__gethex+0x338>
 800d974:	2b01      	cmp	r3, #1
 800d976:	d109      	bne.n	800d98c <__gethex+0x320>
 800d978:	f019 0f02 	tst.w	r9, #2
 800d97c:	d006      	beq.n	800d98c <__gethex+0x320>
 800d97e:	f8da 3000 	ldr.w	r3, [sl]
 800d982:	ea49 0903 	orr.w	r9, r9, r3
 800d986:	f019 0f01 	tst.w	r9, #1
 800d98a:	d10e      	bne.n	800d9aa <__gethex+0x33e>
 800d98c:	f045 0510 	orr.w	r5, r5, #16
 800d990:	e032      	b.n	800d9f8 <__gethex+0x38c>
 800d992:	f04f 0901 	mov.w	r9, #1
 800d996:	e7d1      	b.n	800d93c <__gethex+0x2d0>
 800d998:	2501      	movs	r5, #1
 800d99a:	e7e2      	b.n	800d962 <__gethex+0x2f6>
 800d99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d99e:	f1c3 0301 	rsb	r3, r3, #1
 800d9a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d0f0      	beq.n	800d98c <__gethex+0x320>
 800d9aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d9ae:	f104 0314 	add.w	r3, r4, #20
 800d9b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d9b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d9ba:	f04f 0c00 	mov.w	ip, #0
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d9c8:	d01b      	beq.n	800da02 <__gethex+0x396>
 800d9ca:	3201      	adds	r2, #1
 800d9cc:	6002      	str	r2, [r0, #0]
 800d9ce:	2d02      	cmp	r5, #2
 800d9d0:	f104 0314 	add.w	r3, r4, #20
 800d9d4:	d13c      	bne.n	800da50 <__gethex+0x3e4>
 800d9d6:	f8d8 2000 	ldr.w	r2, [r8]
 800d9da:	3a01      	subs	r2, #1
 800d9dc:	42b2      	cmp	r2, r6
 800d9de:	d109      	bne.n	800d9f4 <__gethex+0x388>
 800d9e0:	1171      	asrs	r1, r6, #5
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d9e8:	f006 061f 	and.w	r6, r6, #31
 800d9ec:	fa02 f606 	lsl.w	r6, r2, r6
 800d9f0:	421e      	tst	r6, r3
 800d9f2:	d13a      	bne.n	800da6a <__gethex+0x3fe>
 800d9f4:	f045 0520 	orr.w	r5, r5, #32
 800d9f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9fa:	601c      	str	r4, [r3, #0]
 800d9fc:	9b02      	ldr	r3, [sp, #8]
 800d9fe:	601f      	str	r7, [r3, #0]
 800da00:	e6b0      	b.n	800d764 <__gethex+0xf8>
 800da02:	4299      	cmp	r1, r3
 800da04:	f843 cc04 	str.w	ip, [r3, #-4]
 800da08:	d8d9      	bhi.n	800d9be <__gethex+0x352>
 800da0a:	68a3      	ldr	r3, [r4, #8]
 800da0c:	459b      	cmp	fp, r3
 800da0e:	db17      	blt.n	800da40 <__gethex+0x3d4>
 800da10:	6861      	ldr	r1, [r4, #4]
 800da12:	9801      	ldr	r0, [sp, #4]
 800da14:	3101      	adds	r1, #1
 800da16:	f000 f9c3 	bl	800dda0 <_Balloc>
 800da1a:	4681      	mov	r9, r0
 800da1c:	b918      	cbnz	r0, 800da26 <__gethex+0x3ba>
 800da1e:	4b1a      	ldr	r3, [pc, #104]	@ (800da88 <__gethex+0x41c>)
 800da20:	4602      	mov	r2, r0
 800da22:	2184      	movs	r1, #132	@ 0x84
 800da24:	e6c5      	b.n	800d7b2 <__gethex+0x146>
 800da26:	6922      	ldr	r2, [r4, #16]
 800da28:	3202      	adds	r2, #2
 800da2a:	f104 010c 	add.w	r1, r4, #12
 800da2e:	0092      	lsls	r2, r2, #2
 800da30:	300c      	adds	r0, #12
 800da32:	f7fe fee0 	bl	800c7f6 <memcpy>
 800da36:	4621      	mov	r1, r4
 800da38:	9801      	ldr	r0, [sp, #4]
 800da3a:	f000 f9f1 	bl	800de20 <_Bfree>
 800da3e:	464c      	mov	r4, r9
 800da40:	6923      	ldr	r3, [r4, #16]
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da48:	6122      	str	r2, [r4, #16]
 800da4a:	2201      	movs	r2, #1
 800da4c:	615a      	str	r2, [r3, #20]
 800da4e:	e7be      	b.n	800d9ce <__gethex+0x362>
 800da50:	6922      	ldr	r2, [r4, #16]
 800da52:	455a      	cmp	r2, fp
 800da54:	dd0b      	ble.n	800da6e <__gethex+0x402>
 800da56:	2101      	movs	r1, #1
 800da58:	4620      	mov	r0, r4
 800da5a:	f7ff fd9f 	bl	800d59c <rshift>
 800da5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da62:	3701      	adds	r7, #1
 800da64:	42bb      	cmp	r3, r7
 800da66:	f6ff aee0 	blt.w	800d82a <__gethex+0x1be>
 800da6a:	2501      	movs	r5, #1
 800da6c:	e7c2      	b.n	800d9f4 <__gethex+0x388>
 800da6e:	f016 061f 	ands.w	r6, r6, #31
 800da72:	d0fa      	beq.n	800da6a <__gethex+0x3fe>
 800da74:	4453      	add	r3, sl
 800da76:	f1c6 0620 	rsb	r6, r6, #32
 800da7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800da7e:	f000 fa81 	bl	800df84 <__hi0bits>
 800da82:	42b0      	cmp	r0, r6
 800da84:	dbe7      	blt.n	800da56 <__gethex+0x3ea>
 800da86:	e7f0      	b.n	800da6a <__gethex+0x3fe>
 800da88:	080115b4 	.word	0x080115b4

0800da8c <L_shift>:
 800da8c:	f1c2 0208 	rsb	r2, r2, #8
 800da90:	0092      	lsls	r2, r2, #2
 800da92:	b570      	push	{r4, r5, r6, lr}
 800da94:	f1c2 0620 	rsb	r6, r2, #32
 800da98:	6843      	ldr	r3, [r0, #4]
 800da9a:	6804      	ldr	r4, [r0, #0]
 800da9c:	fa03 f506 	lsl.w	r5, r3, r6
 800daa0:	432c      	orrs	r4, r5
 800daa2:	40d3      	lsrs	r3, r2
 800daa4:	6004      	str	r4, [r0, #0]
 800daa6:	f840 3f04 	str.w	r3, [r0, #4]!
 800daaa:	4288      	cmp	r0, r1
 800daac:	d3f4      	bcc.n	800da98 <L_shift+0xc>
 800daae:	bd70      	pop	{r4, r5, r6, pc}

0800dab0 <__match>:
 800dab0:	b530      	push	{r4, r5, lr}
 800dab2:	6803      	ldr	r3, [r0, #0]
 800dab4:	3301      	adds	r3, #1
 800dab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daba:	b914      	cbnz	r4, 800dac2 <__match+0x12>
 800dabc:	6003      	str	r3, [r0, #0]
 800dabe:	2001      	movs	r0, #1
 800dac0:	bd30      	pop	{r4, r5, pc}
 800dac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dac6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800daca:	2d19      	cmp	r5, #25
 800dacc:	bf98      	it	ls
 800dace:	3220      	addls	r2, #32
 800dad0:	42a2      	cmp	r2, r4
 800dad2:	d0f0      	beq.n	800dab6 <__match+0x6>
 800dad4:	2000      	movs	r0, #0
 800dad6:	e7f3      	b.n	800dac0 <__match+0x10>

0800dad8 <__hexnan>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	680b      	ldr	r3, [r1, #0]
 800dade:	6801      	ldr	r1, [r0, #0]
 800dae0:	115e      	asrs	r6, r3, #5
 800dae2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dae6:	f013 031f 	ands.w	r3, r3, #31
 800daea:	b087      	sub	sp, #28
 800daec:	bf18      	it	ne
 800daee:	3604      	addne	r6, #4
 800daf0:	2500      	movs	r5, #0
 800daf2:	1f37      	subs	r7, r6, #4
 800daf4:	4682      	mov	sl, r0
 800daf6:	4690      	mov	r8, r2
 800daf8:	9301      	str	r3, [sp, #4]
 800dafa:	f846 5c04 	str.w	r5, [r6, #-4]
 800dafe:	46b9      	mov	r9, r7
 800db00:	463c      	mov	r4, r7
 800db02:	9502      	str	r5, [sp, #8]
 800db04:	46ab      	mov	fp, r5
 800db06:	784a      	ldrb	r2, [r1, #1]
 800db08:	1c4b      	adds	r3, r1, #1
 800db0a:	9303      	str	r3, [sp, #12]
 800db0c:	b342      	cbz	r2, 800db60 <__hexnan+0x88>
 800db0e:	4610      	mov	r0, r2
 800db10:	9105      	str	r1, [sp, #20]
 800db12:	9204      	str	r2, [sp, #16]
 800db14:	f7ff fd94 	bl	800d640 <__hexdig_fun>
 800db18:	2800      	cmp	r0, #0
 800db1a:	d151      	bne.n	800dbc0 <__hexnan+0xe8>
 800db1c:	9a04      	ldr	r2, [sp, #16]
 800db1e:	9905      	ldr	r1, [sp, #20]
 800db20:	2a20      	cmp	r2, #32
 800db22:	d818      	bhi.n	800db56 <__hexnan+0x7e>
 800db24:	9b02      	ldr	r3, [sp, #8]
 800db26:	459b      	cmp	fp, r3
 800db28:	dd13      	ble.n	800db52 <__hexnan+0x7a>
 800db2a:	454c      	cmp	r4, r9
 800db2c:	d206      	bcs.n	800db3c <__hexnan+0x64>
 800db2e:	2d07      	cmp	r5, #7
 800db30:	dc04      	bgt.n	800db3c <__hexnan+0x64>
 800db32:	462a      	mov	r2, r5
 800db34:	4649      	mov	r1, r9
 800db36:	4620      	mov	r0, r4
 800db38:	f7ff ffa8 	bl	800da8c <L_shift>
 800db3c:	4544      	cmp	r4, r8
 800db3e:	d952      	bls.n	800dbe6 <__hexnan+0x10e>
 800db40:	2300      	movs	r3, #0
 800db42:	f1a4 0904 	sub.w	r9, r4, #4
 800db46:	f844 3c04 	str.w	r3, [r4, #-4]
 800db4a:	f8cd b008 	str.w	fp, [sp, #8]
 800db4e:	464c      	mov	r4, r9
 800db50:	461d      	mov	r5, r3
 800db52:	9903      	ldr	r1, [sp, #12]
 800db54:	e7d7      	b.n	800db06 <__hexnan+0x2e>
 800db56:	2a29      	cmp	r2, #41	@ 0x29
 800db58:	d157      	bne.n	800dc0a <__hexnan+0x132>
 800db5a:	3102      	adds	r1, #2
 800db5c:	f8ca 1000 	str.w	r1, [sl]
 800db60:	f1bb 0f00 	cmp.w	fp, #0
 800db64:	d051      	beq.n	800dc0a <__hexnan+0x132>
 800db66:	454c      	cmp	r4, r9
 800db68:	d206      	bcs.n	800db78 <__hexnan+0xa0>
 800db6a:	2d07      	cmp	r5, #7
 800db6c:	dc04      	bgt.n	800db78 <__hexnan+0xa0>
 800db6e:	462a      	mov	r2, r5
 800db70:	4649      	mov	r1, r9
 800db72:	4620      	mov	r0, r4
 800db74:	f7ff ff8a 	bl	800da8c <L_shift>
 800db78:	4544      	cmp	r4, r8
 800db7a:	d936      	bls.n	800dbea <__hexnan+0x112>
 800db7c:	f1a8 0204 	sub.w	r2, r8, #4
 800db80:	4623      	mov	r3, r4
 800db82:	f853 1b04 	ldr.w	r1, [r3], #4
 800db86:	f842 1f04 	str.w	r1, [r2, #4]!
 800db8a:	429f      	cmp	r7, r3
 800db8c:	d2f9      	bcs.n	800db82 <__hexnan+0xaa>
 800db8e:	1b3b      	subs	r3, r7, r4
 800db90:	f023 0303 	bic.w	r3, r3, #3
 800db94:	3304      	adds	r3, #4
 800db96:	3401      	adds	r4, #1
 800db98:	3e03      	subs	r6, #3
 800db9a:	42b4      	cmp	r4, r6
 800db9c:	bf88      	it	hi
 800db9e:	2304      	movhi	r3, #4
 800dba0:	4443      	add	r3, r8
 800dba2:	2200      	movs	r2, #0
 800dba4:	f843 2b04 	str.w	r2, [r3], #4
 800dba8:	429f      	cmp	r7, r3
 800dbaa:	d2fb      	bcs.n	800dba4 <__hexnan+0xcc>
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	b91b      	cbnz	r3, 800dbb8 <__hexnan+0xe0>
 800dbb0:	4547      	cmp	r7, r8
 800dbb2:	d128      	bne.n	800dc06 <__hexnan+0x12e>
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	603b      	str	r3, [r7, #0]
 800dbb8:	2005      	movs	r0, #5
 800dbba:	b007      	add	sp, #28
 800dbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc0:	3501      	adds	r5, #1
 800dbc2:	2d08      	cmp	r5, #8
 800dbc4:	f10b 0b01 	add.w	fp, fp, #1
 800dbc8:	dd06      	ble.n	800dbd8 <__hexnan+0x100>
 800dbca:	4544      	cmp	r4, r8
 800dbcc:	d9c1      	bls.n	800db52 <__hexnan+0x7a>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbd4:	2501      	movs	r5, #1
 800dbd6:	3c04      	subs	r4, #4
 800dbd8:	6822      	ldr	r2, [r4, #0]
 800dbda:	f000 000f 	and.w	r0, r0, #15
 800dbde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dbe2:	6020      	str	r0, [r4, #0]
 800dbe4:	e7b5      	b.n	800db52 <__hexnan+0x7a>
 800dbe6:	2508      	movs	r5, #8
 800dbe8:	e7b3      	b.n	800db52 <__hexnan+0x7a>
 800dbea:	9b01      	ldr	r3, [sp, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d0dd      	beq.n	800dbac <__hexnan+0xd4>
 800dbf0:	f1c3 0320 	rsb	r3, r3, #32
 800dbf4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf8:	40da      	lsrs	r2, r3
 800dbfa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc04:	e7d2      	b.n	800dbac <__hexnan+0xd4>
 800dc06:	3f04      	subs	r7, #4
 800dc08:	e7d0      	b.n	800dbac <__hexnan+0xd4>
 800dc0a:	2004      	movs	r0, #4
 800dc0c:	e7d5      	b.n	800dbba <__hexnan+0xe2>
	...

0800dc10 <malloc>:
 800dc10:	4b02      	ldr	r3, [pc, #8]	@ (800dc1c <malloc+0xc>)
 800dc12:	4601      	mov	r1, r0
 800dc14:	6818      	ldr	r0, [r3, #0]
 800dc16:	f000 b825 	b.w	800dc64 <_malloc_r>
 800dc1a:	bf00      	nop
 800dc1c:	20000250 	.word	0x20000250

0800dc20 <sbrk_aligned>:
 800dc20:	b570      	push	{r4, r5, r6, lr}
 800dc22:	4e0f      	ldr	r6, [pc, #60]	@ (800dc60 <sbrk_aligned+0x40>)
 800dc24:	460c      	mov	r4, r1
 800dc26:	6831      	ldr	r1, [r6, #0]
 800dc28:	4605      	mov	r5, r0
 800dc2a:	b911      	cbnz	r1, 800dc32 <sbrk_aligned+0x12>
 800dc2c:	f000 ffa6 	bl	800eb7c <_sbrk_r>
 800dc30:	6030      	str	r0, [r6, #0]
 800dc32:	4621      	mov	r1, r4
 800dc34:	4628      	mov	r0, r5
 800dc36:	f000 ffa1 	bl	800eb7c <_sbrk_r>
 800dc3a:	1c43      	adds	r3, r0, #1
 800dc3c:	d103      	bne.n	800dc46 <sbrk_aligned+0x26>
 800dc3e:	f04f 34ff 	mov.w	r4, #4294967295
 800dc42:	4620      	mov	r0, r4
 800dc44:	bd70      	pop	{r4, r5, r6, pc}
 800dc46:	1cc4      	adds	r4, r0, #3
 800dc48:	f024 0403 	bic.w	r4, r4, #3
 800dc4c:	42a0      	cmp	r0, r4
 800dc4e:	d0f8      	beq.n	800dc42 <sbrk_aligned+0x22>
 800dc50:	1a21      	subs	r1, r4, r0
 800dc52:	4628      	mov	r0, r5
 800dc54:	f000 ff92 	bl	800eb7c <_sbrk_r>
 800dc58:	3001      	adds	r0, #1
 800dc5a:	d1f2      	bne.n	800dc42 <sbrk_aligned+0x22>
 800dc5c:	e7ef      	b.n	800dc3e <sbrk_aligned+0x1e>
 800dc5e:	bf00      	nop
 800dc60:	2000085c 	.word	0x2000085c

0800dc64 <_malloc_r>:
 800dc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc68:	1ccd      	adds	r5, r1, #3
 800dc6a:	f025 0503 	bic.w	r5, r5, #3
 800dc6e:	3508      	adds	r5, #8
 800dc70:	2d0c      	cmp	r5, #12
 800dc72:	bf38      	it	cc
 800dc74:	250c      	movcc	r5, #12
 800dc76:	2d00      	cmp	r5, #0
 800dc78:	4606      	mov	r6, r0
 800dc7a:	db01      	blt.n	800dc80 <_malloc_r+0x1c>
 800dc7c:	42a9      	cmp	r1, r5
 800dc7e:	d904      	bls.n	800dc8a <_malloc_r+0x26>
 800dc80:	230c      	movs	r3, #12
 800dc82:	6033      	str	r3, [r6, #0]
 800dc84:	2000      	movs	r0, #0
 800dc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd60 <_malloc_r+0xfc>
 800dc8e:	f000 f87b 	bl	800dd88 <__malloc_lock>
 800dc92:	f8d8 3000 	ldr.w	r3, [r8]
 800dc96:	461c      	mov	r4, r3
 800dc98:	bb44      	cbnz	r4, 800dcec <_malloc_r+0x88>
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f7ff ffbf 	bl	800dc20 <sbrk_aligned>
 800dca2:	1c43      	adds	r3, r0, #1
 800dca4:	4604      	mov	r4, r0
 800dca6:	d158      	bne.n	800dd5a <_malloc_r+0xf6>
 800dca8:	f8d8 4000 	ldr.w	r4, [r8]
 800dcac:	4627      	mov	r7, r4
 800dcae:	2f00      	cmp	r7, #0
 800dcb0:	d143      	bne.n	800dd3a <_malloc_r+0xd6>
 800dcb2:	2c00      	cmp	r4, #0
 800dcb4:	d04b      	beq.n	800dd4e <_malloc_r+0xea>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	4639      	mov	r1, r7
 800dcba:	4630      	mov	r0, r6
 800dcbc:	eb04 0903 	add.w	r9, r4, r3
 800dcc0:	f000 ff5c 	bl	800eb7c <_sbrk_r>
 800dcc4:	4581      	cmp	r9, r0
 800dcc6:	d142      	bne.n	800dd4e <_malloc_r+0xea>
 800dcc8:	6821      	ldr	r1, [r4, #0]
 800dcca:	1a6d      	subs	r5, r5, r1
 800dccc:	4629      	mov	r1, r5
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f7ff ffa6 	bl	800dc20 <sbrk_aligned>
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	d03a      	beq.n	800dd4e <_malloc_r+0xea>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	442b      	add	r3, r5
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	f8d8 3000 	ldr.w	r3, [r8]
 800dce2:	685a      	ldr	r2, [r3, #4]
 800dce4:	bb62      	cbnz	r2, 800dd40 <_malloc_r+0xdc>
 800dce6:	f8c8 7000 	str.w	r7, [r8]
 800dcea:	e00f      	b.n	800dd0c <_malloc_r+0xa8>
 800dcec:	6822      	ldr	r2, [r4, #0]
 800dcee:	1b52      	subs	r2, r2, r5
 800dcf0:	d420      	bmi.n	800dd34 <_malloc_r+0xd0>
 800dcf2:	2a0b      	cmp	r2, #11
 800dcf4:	d917      	bls.n	800dd26 <_malloc_r+0xc2>
 800dcf6:	1961      	adds	r1, r4, r5
 800dcf8:	42a3      	cmp	r3, r4
 800dcfa:	6025      	str	r5, [r4, #0]
 800dcfc:	bf18      	it	ne
 800dcfe:	6059      	strne	r1, [r3, #4]
 800dd00:	6863      	ldr	r3, [r4, #4]
 800dd02:	bf08      	it	eq
 800dd04:	f8c8 1000 	streq.w	r1, [r8]
 800dd08:	5162      	str	r2, [r4, r5]
 800dd0a:	604b      	str	r3, [r1, #4]
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	f000 f841 	bl	800dd94 <__malloc_unlock>
 800dd12:	f104 000b 	add.w	r0, r4, #11
 800dd16:	1d23      	adds	r3, r4, #4
 800dd18:	f020 0007 	bic.w	r0, r0, #7
 800dd1c:	1ac2      	subs	r2, r0, r3
 800dd1e:	bf1c      	itt	ne
 800dd20:	1a1b      	subne	r3, r3, r0
 800dd22:	50a3      	strne	r3, [r4, r2]
 800dd24:	e7af      	b.n	800dc86 <_malloc_r+0x22>
 800dd26:	6862      	ldr	r2, [r4, #4]
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	bf0c      	ite	eq
 800dd2c:	f8c8 2000 	streq.w	r2, [r8]
 800dd30:	605a      	strne	r2, [r3, #4]
 800dd32:	e7eb      	b.n	800dd0c <_malloc_r+0xa8>
 800dd34:	4623      	mov	r3, r4
 800dd36:	6864      	ldr	r4, [r4, #4]
 800dd38:	e7ae      	b.n	800dc98 <_malloc_r+0x34>
 800dd3a:	463c      	mov	r4, r7
 800dd3c:	687f      	ldr	r7, [r7, #4]
 800dd3e:	e7b6      	b.n	800dcae <_malloc_r+0x4a>
 800dd40:	461a      	mov	r2, r3
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	42a3      	cmp	r3, r4
 800dd46:	d1fb      	bne.n	800dd40 <_malloc_r+0xdc>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	6053      	str	r3, [r2, #4]
 800dd4c:	e7de      	b.n	800dd0c <_malloc_r+0xa8>
 800dd4e:	230c      	movs	r3, #12
 800dd50:	6033      	str	r3, [r6, #0]
 800dd52:	4630      	mov	r0, r6
 800dd54:	f000 f81e 	bl	800dd94 <__malloc_unlock>
 800dd58:	e794      	b.n	800dc84 <_malloc_r+0x20>
 800dd5a:	6005      	str	r5, [r0, #0]
 800dd5c:	e7d6      	b.n	800dd0c <_malloc_r+0xa8>
 800dd5e:	bf00      	nop
 800dd60:	20000860 	.word	0x20000860

0800dd64 <__ascii_mbtowc>:
 800dd64:	b082      	sub	sp, #8
 800dd66:	b901      	cbnz	r1, 800dd6a <__ascii_mbtowc+0x6>
 800dd68:	a901      	add	r1, sp, #4
 800dd6a:	b142      	cbz	r2, 800dd7e <__ascii_mbtowc+0x1a>
 800dd6c:	b14b      	cbz	r3, 800dd82 <__ascii_mbtowc+0x1e>
 800dd6e:	7813      	ldrb	r3, [r2, #0]
 800dd70:	600b      	str	r3, [r1, #0]
 800dd72:	7812      	ldrb	r2, [r2, #0]
 800dd74:	1e10      	subs	r0, r2, #0
 800dd76:	bf18      	it	ne
 800dd78:	2001      	movne	r0, #1
 800dd7a:	b002      	add	sp, #8
 800dd7c:	4770      	bx	lr
 800dd7e:	4610      	mov	r0, r2
 800dd80:	e7fb      	b.n	800dd7a <__ascii_mbtowc+0x16>
 800dd82:	f06f 0001 	mvn.w	r0, #1
 800dd86:	e7f8      	b.n	800dd7a <__ascii_mbtowc+0x16>

0800dd88 <__malloc_lock>:
 800dd88:	4801      	ldr	r0, [pc, #4]	@ (800dd90 <__malloc_lock+0x8>)
 800dd8a:	f7fe bd32 	b.w	800c7f2 <__retarget_lock_acquire_recursive>
 800dd8e:	bf00      	nop
 800dd90:	20000858 	.word	0x20000858

0800dd94 <__malloc_unlock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	@ (800dd9c <__malloc_unlock+0x8>)
 800dd96:	f7fe bd2d 	b.w	800c7f4 <__retarget_lock_release_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	20000858 	.word	0x20000858

0800dda0 <_Balloc>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	69c6      	ldr	r6, [r0, #28]
 800dda4:	4604      	mov	r4, r0
 800dda6:	460d      	mov	r5, r1
 800dda8:	b976      	cbnz	r6, 800ddc8 <_Balloc+0x28>
 800ddaa:	2010      	movs	r0, #16
 800ddac:	f7ff ff30 	bl	800dc10 <malloc>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	61e0      	str	r0, [r4, #28]
 800ddb4:	b920      	cbnz	r0, 800ddc0 <_Balloc+0x20>
 800ddb6:	4b18      	ldr	r3, [pc, #96]	@ (800de18 <_Balloc+0x78>)
 800ddb8:	4818      	ldr	r0, [pc, #96]	@ (800de1c <_Balloc+0x7c>)
 800ddba:	216b      	movs	r1, #107	@ 0x6b
 800ddbc:	f7fe fd3a 	bl	800c834 <__assert_func>
 800ddc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddc4:	6006      	str	r6, [r0, #0]
 800ddc6:	60c6      	str	r6, [r0, #12]
 800ddc8:	69e6      	ldr	r6, [r4, #28]
 800ddca:	68f3      	ldr	r3, [r6, #12]
 800ddcc:	b183      	cbz	r3, 800ddf0 <_Balloc+0x50>
 800ddce:	69e3      	ldr	r3, [r4, #28]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddd6:	b9b8      	cbnz	r0, 800de08 <_Balloc+0x68>
 800ddd8:	2101      	movs	r1, #1
 800ddda:	fa01 f605 	lsl.w	r6, r1, r5
 800ddde:	1d72      	adds	r2, r6, #5
 800dde0:	0092      	lsls	r2, r2, #2
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 fee1 	bl	800ebaa <_calloc_r>
 800dde8:	b160      	cbz	r0, 800de04 <_Balloc+0x64>
 800ddea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddee:	e00e      	b.n	800de0e <_Balloc+0x6e>
 800ddf0:	2221      	movs	r2, #33	@ 0x21
 800ddf2:	2104      	movs	r1, #4
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f000 fed8 	bl	800ebaa <_calloc_r>
 800ddfa:	69e3      	ldr	r3, [r4, #28]
 800ddfc:	60f0      	str	r0, [r6, #12]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1e4      	bne.n	800ddce <_Balloc+0x2e>
 800de04:	2000      	movs	r0, #0
 800de06:	bd70      	pop	{r4, r5, r6, pc}
 800de08:	6802      	ldr	r2, [r0, #0]
 800de0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de0e:	2300      	movs	r3, #0
 800de10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de14:	e7f7      	b.n	800de06 <_Balloc+0x66>
 800de16:	bf00      	nop
 800de18:	0801149a 	.word	0x0801149a
 800de1c:	08011625 	.word	0x08011625

0800de20 <_Bfree>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	69c6      	ldr	r6, [r0, #28]
 800de24:	4605      	mov	r5, r0
 800de26:	460c      	mov	r4, r1
 800de28:	b976      	cbnz	r6, 800de48 <_Bfree+0x28>
 800de2a:	2010      	movs	r0, #16
 800de2c:	f7ff fef0 	bl	800dc10 <malloc>
 800de30:	4602      	mov	r2, r0
 800de32:	61e8      	str	r0, [r5, #28]
 800de34:	b920      	cbnz	r0, 800de40 <_Bfree+0x20>
 800de36:	4b09      	ldr	r3, [pc, #36]	@ (800de5c <_Bfree+0x3c>)
 800de38:	4809      	ldr	r0, [pc, #36]	@ (800de60 <_Bfree+0x40>)
 800de3a:	218f      	movs	r1, #143	@ 0x8f
 800de3c:	f7fe fcfa 	bl	800c834 <__assert_func>
 800de40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de44:	6006      	str	r6, [r0, #0]
 800de46:	60c6      	str	r6, [r0, #12]
 800de48:	b13c      	cbz	r4, 800de5a <_Bfree+0x3a>
 800de4a:	69eb      	ldr	r3, [r5, #28]
 800de4c:	6862      	ldr	r2, [r4, #4]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de54:	6021      	str	r1, [r4, #0]
 800de56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de5a:	bd70      	pop	{r4, r5, r6, pc}
 800de5c:	0801149a 	.word	0x0801149a
 800de60:	08011625 	.word	0x08011625

0800de64 <__multadd>:
 800de64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de68:	690d      	ldr	r5, [r1, #16]
 800de6a:	4607      	mov	r7, r0
 800de6c:	460c      	mov	r4, r1
 800de6e:	461e      	mov	r6, r3
 800de70:	f101 0c14 	add.w	ip, r1, #20
 800de74:	2000      	movs	r0, #0
 800de76:	f8dc 3000 	ldr.w	r3, [ip]
 800de7a:	b299      	uxth	r1, r3
 800de7c:	fb02 6101 	mla	r1, r2, r1, r6
 800de80:	0c1e      	lsrs	r6, r3, #16
 800de82:	0c0b      	lsrs	r3, r1, #16
 800de84:	fb02 3306 	mla	r3, r2, r6, r3
 800de88:	b289      	uxth	r1, r1
 800de8a:	3001      	adds	r0, #1
 800de8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de90:	4285      	cmp	r5, r0
 800de92:	f84c 1b04 	str.w	r1, [ip], #4
 800de96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de9a:	dcec      	bgt.n	800de76 <__multadd+0x12>
 800de9c:	b30e      	cbz	r6, 800dee2 <__multadd+0x7e>
 800de9e:	68a3      	ldr	r3, [r4, #8]
 800dea0:	42ab      	cmp	r3, r5
 800dea2:	dc19      	bgt.n	800ded8 <__multadd+0x74>
 800dea4:	6861      	ldr	r1, [r4, #4]
 800dea6:	4638      	mov	r0, r7
 800dea8:	3101      	adds	r1, #1
 800deaa:	f7ff ff79 	bl	800dda0 <_Balloc>
 800deae:	4680      	mov	r8, r0
 800deb0:	b928      	cbnz	r0, 800debe <__multadd+0x5a>
 800deb2:	4602      	mov	r2, r0
 800deb4:	4b0c      	ldr	r3, [pc, #48]	@ (800dee8 <__multadd+0x84>)
 800deb6:	480d      	ldr	r0, [pc, #52]	@ (800deec <__multadd+0x88>)
 800deb8:	21ba      	movs	r1, #186	@ 0xba
 800deba:	f7fe fcbb 	bl	800c834 <__assert_func>
 800debe:	6922      	ldr	r2, [r4, #16]
 800dec0:	3202      	adds	r2, #2
 800dec2:	f104 010c 	add.w	r1, r4, #12
 800dec6:	0092      	lsls	r2, r2, #2
 800dec8:	300c      	adds	r0, #12
 800deca:	f7fe fc94 	bl	800c7f6 <memcpy>
 800dece:	4621      	mov	r1, r4
 800ded0:	4638      	mov	r0, r7
 800ded2:	f7ff ffa5 	bl	800de20 <_Bfree>
 800ded6:	4644      	mov	r4, r8
 800ded8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dedc:	3501      	adds	r5, #1
 800dede:	615e      	str	r6, [r3, #20]
 800dee0:	6125      	str	r5, [r4, #16]
 800dee2:	4620      	mov	r0, r4
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	080115b4 	.word	0x080115b4
 800deec:	08011625 	.word	0x08011625

0800def0 <__s2b>:
 800def0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800def4:	460c      	mov	r4, r1
 800def6:	4615      	mov	r5, r2
 800def8:	461f      	mov	r7, r3
 800defa:	2209      	movs	r2, #9
 800defc:	3308      	adds	r3, #8
 800defe:	4606      	mov	r6, r0
 800df00:	fb93 f3f2 	sdiv	r3, r3, r2
 800df04:	2100      	movs	r1, #0
 800df06:	2201      	movs	r2, #1
 800df08:	429a      	cmp	r2, r3
 800df0a:	db09      	blt.n	800df20 <__s2b+0x30>
 800df0c:	4630      	mov	r0, r6
 800df0e:	f7ff ff47 	bl	800dda0 <_Balloc>
 800df12:	b940      	cbnz	r0, 800df26 <__s2b+0x36>
 800df14:	4602      	mov	r2, r0
 800df16:	4b19      	ldr	r3, [pc, #100]	@ (800df7c <__s2b+0x8c>)
 800df18:	4819      	ldr	r0, [pc, #100]	@ (800df80 <__s2b+0x90>)
 800df1a:	21d3      	movs	r1, #211	@ 0xd3
 800df1c:	f7fe fc8a 	bl	800c834 <__assert_func>
 800df20:	0052      	lsls	r2, r2, #1
 800df22:	3101      	adds	r1, #1
 800df24:	e7f0      	b.n	800df08 <__s2b+0x18>
 800df26:	9b08      	ldr	r3, [sp, #32]
 800df28:	6143      	str	r3, [r0, #20]
 800df2a:	2d09      	cmp	r5, #9
 800df2c:	f04f 0301 	mov.w	r3, #1
 800df30:	6103      	str	r3, [r0, #16]
 800df32:	dd16      	ble.n	800df62 <__s2b+0x72>
 800df34:	f104 0909 	add.w	r9, r4, #9
 800df38:	46c8      	mov	r8, r9
 800df3a:	442c      	add	r4, r5
 800df3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df40:	4601      	mov	r1, r0
 800df42:	3b30      	subs	r3, #48	@ 0x30
 800df44:	220a      	movs	r2, #10
 800df46:	4630      	mov	r0, r6
 800df48:	f7ff ff8c 	bl	800de64 <__multadd>
 800df4c:	45a0      	cmp	r8, r4
 800df4e:	d1f5      	bne.n	800df3c <__s2b+0x4c>
 800df50:	f1a5 0408 	sub.w	r4, r5, #8
 800df54:	444c      	add	r4, r9
 800df56:	1b2d      	subs	r5, r5, r4
 800df58:	1963      	adds	r3, r4, r5
 800df5a:	42bb      	cmp	r3, r7
 800df5c:	db04      	blt.n	800df68 <__s2b+0x78>
 800df5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df62:	340a      	adds	r4, #10
 800df64:	2509      	movs	r5, #9
 800df66:	e7f6      	b.n	800df56 <__s2b+0x66>
 800df68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df6c:	4601      	mov	r1, r0
 800df6e:	3b30      	subs	r3, #48	@ 0x30
 800df70:	220a      	movs	r2, #10
 800df72:	4630      	mov	r0, r6
 800df74:	f7ff ff76 	bl	800de64 <__multadd>
 800df78:	e7ee      	b.n	800df58 <__s2b+0x68>
 800df7a:	bf00      	nop
 800df7c:	080115b4 	.word	0x080115b4
 800df80:	08011625 	.word	0x08011625

0800df84 <__hi0bits>:
 800df84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df88:	4603      	mov	r3, r0
 800df8a:	bf36      	itet	cc
 800df8c:	0403      	lslcc	r3, r0, #16
 800df8e:	2000      	movcs	r0, #0
 800df90:	2010      	movcc	r0, #16
 800df92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df96:	bf3c      	itt	cc
 800df98:	021b      	lslcc	r3, r3, #8
 800df9a:	3008      	addcc	r0, #8
 800df9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfa0:	bf3c      	itt	cc
 800dfa2:	011b      	lslcc	r3, r3, #4
 800dfa4:	3004      	addcc	r0, #4
 800dfa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfaa:	bf3c      	itt	cc
 800dfac:	009b      	lslcc	r3, r3, #2
 800dfae:	3002      	addcc	r0, #2
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	db05      	blt.n	800dfc0 <__hi0bits+0x3c>
 800dfb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dfb8:	f100 0001 	add.w	r0, r0, #1
 800dfbc:	bf08      	it	eq
 800dfbe:	2020      	moveq	r0, #32
 800dfc0:	4770      	bx	lr

0800dfc2 <__lo0bits>:
 800dfc2:	6803      	ldr	r3, [r0, #0]
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	f013 0007 	ands.w	r0, r3, #7
 800dfca:	d00b      	beq.n	800dfe4 <__lo0bits+0x22>
 800dfcc:	07d9      	lsls	r1, r3, #31
 800dfce:	d421      	bmi.n	800e014 <__lo0bits+0x52>
 800dfd0:	0798      	lsls	r0, r3, #30
 800dfd2:	bf49      	itett	mi
 800dfd4:	085b      	lsrmi	r3, r3, #1
 800dfd6:	089b      	lsrpl	r3, r3, #2
 800dfd8:	2001      	movmi	r0, #1
 800dfda:	6013      	strmi	r3, [r2, #0]
 800dfdc:	bf5c      	itt	pl
 800dfde:	6013      	strpl	r3, [r2, #0]
 800dfe0:	2002      	movpl	r0, #2
 800dfe2:	4770      	bx	lr
 800dfe4:	b299      	uxth	r1, r3
 800dfe6:	b909      	cbnz	r1, 800dfec <__lo0bits+0x2a>
 800dfe8:	0c1b      	lsrs	r3, r3, #16
 800dfea:	2010      	movs	r0, #16
 800dfec:	b2d9      	uxtb	r1, r3
 800dfee:	b909      	cbnz	r1, 800dff4 <__lo0bits+0x32>
 800dff0:	3008      	adds	r0, #8
 800dff2:	0a1b      	lsrs	r3, r3, #8
 800dff4:	0719      	lsls	r1, r3, #28
 800dff6:	bf04      	itt	eq
 800dff8:	091b      	lsreq	r3, r3, #4
 800dffa:	3004      	addeq	r0, #4
 800dffc:	0799      	lsls	r1, r3, #30
 800dffe:	bf04      	itt	eq
 800e000:	089b      	lsreq	r3, r3, #2
 800e002:	3002      	addeq	r0, #2
 800e004:	07d9      	lsls	r1, r3, #31
 800e006:	d403      	bmi.n	800e010 <__lo0bits+0x4e>
 800e008:	085b      	lsrs	r3, r3, #1
 800e00a:	f100 0001 	add.w	r0, r0, #1
 800e00e:	d003      	beq.n	800e018 <__lo0bits+0x56>
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	4770      	bx	lr
 800e014:	2000      	movs	r0, #0
 800e016:	4770      	bx	lr
 800e018:	2020      	movs	r0, #32
 800e01a:	4770      	bx	lr

0800e01c <__i2b>:
 800e01c:	b510      	push	{r4, lr}
 800e01e:	460c      	mov	r4, r1
 800e020:	2101      	movs	r1, #1
 800e022:	f7ff febd 	bl	800dda0 <_Balloc>
 800e026:	4602      	mov	r2, r0
 800e028:	b928      	cbnz	r0, 800e036 <__i2b+0x1a>
 800e02a:	4b05      	ldr	r3, [pc, #20]	@ (800e040 <__i2b+0x24>)
 800e02c:	4805      	ldr	r0, [pc, #20]	@ (800e044 <__i2b+0x28>)
 800e02e:	f240 1145 	movw	r1, #325	@ 0x145
 800e032:	f7fe fbff 	bl	800c834 <__assert_func>
 800e036:	2301      	movs	r3, #1
 800e038:	6144      	str	r4, [r0, #20]
 800e03a:	6103      	str	r3, [r0, #16]
 800e03c:	bd10      	pop	{r4, pc}
 800e03e:	bf00      	nop
 800e040:	080115b4 	.word	0x080115b4
 800e044:	08011625 	.word	0x08011625

0800e048 <__multiply>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	4614      	mov	r4, r2
 800e04e:	690a      	ldr	r2, [r1, #16]
 800e050:	6923      	ldr	r3, [r4, #16]
 800e052:	429a      	cmp	r2, r3
 800e054:	bfa8      	it	ge
 800e056:	4623      	movge	r3, r4
 800e058:	460f      	mov	r7, r1
 800e05a:	bfa4      	itt	ge
 800e05c:	460c      	movge	r4, r1
 800e05e:	461f      	movge	r7, r3
 800e060:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e064:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e068:	68a3      	ldr	r3, [r4, #8]
 800e06a:	6861      	ldr	r1, [r4, #4]
 800e06c:	eb0a 0609 	add.w	r6, sl, r9
 800e070:	42b3      	cmp	r3, r6
 800e072:	b085      	sub	sp, #20
 800e074:	bfb8      	it	lt
 800e076:	3101      	addlt	r1, #1
 800e078:	f7ff fe92 	bl	800dda0 <_Balloc>
 800e07c:	b930      	cbnz	r0, 800e08c <__multiply+0x44>
 800e07e:	4602      	mov	r2, r0
 800e080:	4b44      	ldr	r3, [pc, #272]	@ (800e194 <__multiply+0x14c>)
 800e082:	4845      	ldr	r0, [pc, #276]	@ (800e198 <__multiply+0x150>)
 800e084:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e088:	f7fe fbd4 	bl	800c834 <__assert_func>
 800e08c:	f100 0514 	add.w	r5, r0, #20
 800e090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e094:	462b      	mov	r3, r5
 800e096:	2200      	movs	r2, #0
 800e098:	4543      	cmp	r3, r8
 800e09a:	d321      	bcc.n	800e0e0 <__multiply+0x98>
 800e09c:	f107 0114 	add.w	r1, r7, #20
 800e0a0:	f104 0214 	add.w	r2, r4, #20
 800e0a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e0a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e0ac:	9302      	str	r3, [sp, #8]
 800e0ae:	1b13      	subs	r3, r2, r4
 800e0b0:	3b15      	subs	r3, #21
 800e0b2:	f023 0303 	bic.w	r3, r3, #3
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	f104 0715 	add.w	r7, r4, #21
 800e0bc:	42ba      	cmp	r2, r7
 800e0be:	bf38      	it	cc
 800e0c0:	2304      	movcc	r3, #4
 800e0c2:	9301      	str	r3, [sp, #4]
 800e0c4:	9b02      	ldr	r3, [sp, #8]
 800e0c6:	9103      	str	r1, [sp, #12]
 800e0c8:	428b      	cmp	r3, r1
 800e0ca:	d80c      	bhi.n	800e0e6 <__multiply+0x9e>
 800e0cc:	2e00      	cmp	r6, #0
 800e0ce:	dd03      	ble.n	800e0d8 <__multiply+0x90>
 800e0d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d05b      	beq.n	800e190 <__multiply+0x148>
 800e0d8:	6106      	str	r6, [r0, #16]
 800e0da:	b005      	add	sp, #20
 800e0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e0:	f843 2b04 	str.w	r2, [r3], #4
 800e0e4:	e7d8      	b.n	800e098 <__multiply+0x50>
 800e0e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e0ea:	f1ba 0f00 	cmp.w	sl, #0
 800e0ee:	d024      	beq.n	800e13a <__multiply+0xf2>
 800e0f0:	f104 0e14 	add.w	lr, r4, #20
 800e0f4:	46a9      	mov	r9, r5
 800e0f6:	f04f 0c00 	mov.w	ip, #0
 800e0fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0fe:	f8d9 3000 	ldr.w	r3, [r9]
 800e102:	fa1f fb87 	uxth.w	fp, r7
 800e106:	b29b      	uxth	r3, r3
 800e108:	fb0a 330b 	mla	r3, sl, fp, r3
 800e10c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e110:	f8d9 7000 	ldr.w	r7, [r9]
 800e114:	4463      	add	r3, ip
 800e116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e11a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e11e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e122:	b29b      	uxth	r3, r3
 800e124:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e128:	4572      	cmp	r2, lr
 800e12a:	f849 3b04 	str.w	r3, [r9], #4
 800e12e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e132:	d8e2      	bhi.n	800e0fa <__multiply+0xb2>
 800e134:	9b01      	ldr	r3, [sp, #4]
 800e136:	f845 c003 	str.w	ip, [r5, r3]
 800e13a:	9b03      	ldr	r3, [sp, #12]
 800e13c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e140:	3104      	adds	r1, #4
 800e142:	f1b9 0f00 	cmp.w	r9, #0
 800e146:	d021      	beq.n	800e18c <__multiply+0x144>
 800e148:	682b      	ldr	r3, [r5, #0]
 800e14a:	f104 0c14 	add.w	ip, r4, #20
 800e14e:	46ae      	mov	lr, r5
 800e150:	f04f 0a00 	mov.w	sl, #0
 800e154:	f8bc b000 	ldrh.w	fp, [ip]
 800e158:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e15c:	fb09 770b 	mla	r7, r9, fp, r7
 800e160:	4457      	add	r7, sl
 800e162:	b29b      	uxth	r3, r3
 800e164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e168:	f84e 3b04 	str.w	r3, [lr], #4
 800e16c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e174:	f8be 3000 	ldrh.w	r3, [lr]
 800e178:	fb09 330a 	mla	r3, r9, sl, r3
 800e17c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e180:	4562      	cmp	r2, ip
 800e182:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e186:	d8e5      	bhi.n	800e154 <__multiply+0x10c>
 800e188:	9f01      	ldr	r7, [sp, #4]
 800e18a:	51eb      	str	r3, [r5, r7]
 800e18c:	3504      	adds	r5, #4
 800e18e:	e799      	b.n	800e0c4 <__multiply+0x7c>
 800e190:	3e01      	subs	r6, #1
 800e192:	e79b      	b.n	800e0cc <__multiply+0x84>
 800e194:	080115b4 	.word	0x080115b4
 800e198:	08011625 	.word	0x08011625

0800e19c <__pow5mult>:
 800e19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1a0:	4615      	mov	r5, r2
 800e1a2:	f012 0203 	ands.w	r2, r2, #3
 800e1a6:	4607      	mov	r7, r0
 800e1a8:	460e      	mov	r6, r1
 800e1aa:	d007      	beq.n	800e1bc <__pow5mult+0x20>
 800e1ac:	4c25      	ldr	r4, [pc, #148]	@ (800e244 <__pow5mult+0xa8>)
 800e1ae:	3a01      	subs	r2, #1
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1b6:	f7ff fe55 	bl	800de64 <__multadd>
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	10ad      	asrs	r5, r5, #2
 800e1be:	d03d      	beq.n	800e23c <__pow5mult+0xa0>
 800e1c0:	69fc      	ldr	r4, [r7, #28]
 800e1c2:	b97c      	cbnz	r4, 800e1e4 <__pow5mult+0x48>
 800e1c4:	2010      	movs	r0, #16
 800e1c6:	f7ff fd23 	bl	800dc10 <malloc>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	61f8      	str	r0, [r7, #28]
 800e1ce:	b928      	cbnz	r0, 800e1dc <__pow5mult+0x40>
 800e1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e248 <__pow5mult+0xac>)
 800e1d2:	481e      	ldr	r0, [pc, #120]	@ (800e24c <__pow5mult+0xb0>)
 800e1d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e1d8:	f7fe fb2c 	bl	800c834 <__assert_func>
 800e1dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1e0:	6004      	str	r4, [r0, #0]
 800e1e2:	60c4      	str	r4, [r0, #12]
 800e1e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e1e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1ec:	b94c      	cbnz	r4, 800e202 <__pow5mult+0x66>
 800e1ee:	f240 2171 	movw	r1, #625	@ 0x271
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	f7ff ff12 	bl	800e01c <__i2b>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1fe:	4604      	mov	r4, r0
 800e200:	6003      	str	r3, [r0, #0]
 800e202:	f04f 0900 	mov.w	r9, #0
 800e206:	07eb      	lsls	r3, r5, #31
 800e208:	d50a      	bpl.n	800e220 <__pow5mult+0x84>
 800e20a:	4631      	mov	r1, r6
 800e20c:	4622      	mov	r2, r4
 800e20e:	4638      	mov	r0, r7
 800e210:	f7ff ff1a 	bl	800e048 <__multiply>
 800e214:	4631      	mov	r1, r6
 800e216:	4680      	mov	r8, r0
 800e218:	4638      	mov	r0, r7
 800e21a:	f7ff fe01 	bl	800de20 <_Bfree>
 800e21e:	4646      	mov	r6, r8
 800e220:	106d      	asrs	r5, r5, #1
 800e222:	d00b      	beq.n	800e23c <__pow5mult+0xa0>
 800e224:	6820      	ldr	r0, [r4, #0]
 800e226:	b938      	cbnz	r0, 800e238 <__pow5mult+0x9c>
 800e228:	4622      	mov	r2, r4
 800e22a:	4621      	mov	r1, r4
 800e22c:	4638      	mov	r0, r7
 800e22e:	f7ff ff0b 	bl	800e048 <__multiply>
 800e232:	6020      	str	r0, [r4, #0]
 800e234:	f8c0 9000 	str.w	r9, [r0]
 800e238:	4604      	mov	r4, r0
 800e23a:	e7e4      	b.n	800e206 <__pow5mult+0x6a>
 800e23c:	4630      	mov	r0, r6
 800e23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e242:	bf00      	nop
 800e244:	08011680 	.word	0x08011680
 800e248:	0801149a 	.word	0x0801149a
 800e24c:	08011625 	.word	0x08011625

0800e250 <__lshift>:
 800e250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e254:	460c      	mov	r4, r1
 800e256:	6849      	ldr	r1, [r1, #4]
 800e258:	6923      	ldr	r3, [r4, #16]
 800e25a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	4607      	mov	r7, r0
 800e262:	4691      	mov	r9, r2
 800e264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e268:	f108 0601 	add.w	r6, r8, #1
 800e26c:	42b3      	cmp	r3, r6
 800e26e:	db0b      	blt.n	800e288 <__lshift+0x38>
 800e270:	4638      	mov	r0, r7
 800e272:	f7ff fd95 	bl	800dda0 <_Balloc>
 800e276:	4605      	mov	r5, r0
 800e278:	b948      	cbnz	r0, 800e28e <__lshift+0x3e>
 800e27a:	4602      	mov	r2, r0
 800e27c:	4b28      	ldr	r3, [pc, #160]	@ (800e320 <__lshift+0xd0>)
 800e27e:	4829      	ldr	r0, [pc, #164]	@ (800e324 <__lshift+0xd4>)
 800e280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e284:	f7fe fad6 	bl	800c834 <__assert_func>
 800e288:	3101      	adds	r1, #1
 800e28a:	005b      	lsls	r3, r3, #1
 800e28c:	e7ee      	b.n	800e26c <__lshift+0x1c>
 800e28e:	2300      	movs	r3, #0
 800e290:	f100 0114 	add.w	r1, r0, #20
 800e294:	f100 0210 	add.w	r2, r0, #16
 800e298:	4618      	mov	r0, r3
 800e29a:	4553      	cmp	r3, sl
 800e29c:	db33      	blt.n	800e306 <__lshift+0xb6>
 800e29e:	6920      	ldr	r0, [r4, #16]
 800e2a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2a4:	f104 0314 	add.w	r3, r4, #20
 800e2a8:	f019 091f 	ands.w	r9, r9, #31
 800e2ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2b4:	d02b      	beq.n	800e30e <__lshift+0xbe>
 800e2b6:	f1c9 0e20 	rsb	lr, r9, #32
 800e2ba:	468a      	mov	sl, r1
 800e2bc:	2200      	movs	r2, #0
 800e2be:	6818      	ldr	r0, [r3, #0]
 800e2c0:	fa00 f009 	lsl.w	r0, r0, r9
 800e2c4:	4310      	orrs	r0, r2
 800e2c6:	f84a 0b04 	str.w	r0, [sl], #4
 800e2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ce:	459c      	cmp	ip, r3
 800e2d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2d4:	d8f3      	bhi.n	800e2be <__lshift+0x6e>
 800e2d6:	ebac 0304 	sub.w	r3, ip, r4
 800e2da:	3b15      	subs	r3, #21
 800e2dc:	f023 0303 	bic.w	r3, r3, #3
 800e2e0:	3304      	adds	r3, #4
 800e2e2:	f104 0015 	add.w	r0, r4, #21
 800e2e6:	4584      	cmp	ip, r0
 800e2e8:	bf38      	it	cc
 800e2ea:	2304      	movcc	r3, #4
 800e2ec:	50ca      	str	r2, [r1, r3]
 800e2ee:	b10a      	cbz	r2, 800e2f4 <__lshift+0xa4>
 800e2f0:	f108 0602 	add.w	r6, r8, #2
 800e2f4:	3e01      	subs	r6, #1
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	612e      	str	r6, [r5, #16]
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	f7ff fd90 	bl	800de20 <_Bfree>
 800e300:	4628      	mov	r0, r5
 800e302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e306:	f842 0f04 	str.w	r0, [r2, #4]!
 800e30a:	3301      	adds	r3, #1
 800e30c:	e7c5      	b.n	800e29a <__lshift+0x4a>
 800e30e:	3904      	subs	r1, #4
 800e310:	f853 2b04 	ldr.w	r2, [r3], #4
 800e314:	f841 2f04 	str.w	r2, [r1, #4]!
 800e318:	459c      	cmp	ip, r3
 800e31a:	d8f9      	bhi.n	800e310 <__lshift+0xc0>
 800e31c:	e7ea      	b.n	800e2f4 <__lshift+0xa4>
 800e31e:	bf00      	nop
 800e320:	080115b4 	.word	0x080115b4
 800e324:	08011625 	.word	0x08011625

0800e328 <__mcmp>:
 800e328:	690a      	ldr	r2, [r1, #16]
 800e32a:	4603      	mov	r3, r0
 800e32c:	6900      	ldr	r0, [r0, #16]
 800e32e:	1a80      	subs	r0, r0, r2
 800e330:	b530      	push	{r4, r5, lr}
 800e332:	d10e      	bne.n	800e352 <__mcmp+0x2a>
 800e334:	3314      	adds	r3, #20
 800e336:	3114      	adds	r1, #20
 800e338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e33c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e348:	4295      	cmp	r5, r2
 800e34a:	d003      	beq.n	800e354 <__mcmp+0x2c>
 800e34c:	d205      	bcs.n	800e35a <__mcmp+0x32>
 800e34e:	f04f 30ff 	mov.w	r0, #4294967295
 800e352:	bd30      	pop	{r4, r5, pc}
 800e354:	42a3      	cmp	r3, r4
 800e356:	d3f3      	bcc.n	800e340 <__mcmp+0x18>
 800e358:	e7fb      	b.n	800e352 <__mcmp+0x2a>
 800e35a:	2001      	movs	r0, #1
 800e35c:	e7f9      	b.n	800e352 <__mcmp+0x2a>
	...

0800e360 <__mdiff>:
 800e360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	4689      	mov	r9, r1
 800e366:	4606      	mov	r6, r0
 800e368:	4611      	mov	r1, r2
 800e36a:	4648      	mov	r0, r9
 800e36c:	4614      	mov	r4, r2
 800e36e:	f7ff ffdb 	bl	800e328 <__mcmp>
 800e372:	1e05      	subs	r5, r0, #0
 800e374:	d112      	bne.n	800e39c <__mdiff+0x3c>
 800e376:	4629      	mov	r1, r5
 800e378:	4630      	mov	r0, r6
 800e37a:	f7ff fd11 	bl	800dda0 <_Balloc>
 800e37e:	4602      	mov	r2, r0
 800e380:	b928      	cbnz	r0, 800e38e <__mdiff+0x2e>
 800e382:	4b3f      	ldr	r3, [pc, #252]	@ (800e480 <__mdiff+0x120>)
 800e384:	f240 2137 	movw	r1, #567	@ 0x237
 800e388:	483e      	ldr	r0, [pc, #248]	@ (800e484 <__mdiff+0x124>)
 800e38a:	f7fe fa53 	bl	800c834 <__assert_func>
 800e38e:	2301      	movs	r3, #1
 800e390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e394:	4610      	mov	r0, r2
 800e396:	b003      	add	sp, #12
 800e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39c:	bfbc      	itt	lt
 800e39e:	464b      	movlt	r3, r9
 800e3a0:	46a1      	movlt	r9, r4
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e3a8:	bfba      	itte	lt
 800e3aa:	461c      	movlt	r4, r3
 800e3ac:	2501      	movlt	r5, #1
 800e3ae:	2500      	movge	r5, #0
 800e3b0:	f7ff fcf6 	bl	800dda0 <_Balloc>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	b918      	cbnz	r0, 800e3c0 <__mdiff+0x60>
 800e3b8:	4b31      	ldr	r3, [pc, #196]	@ (800e480 <__mdiff+0x120>)
 800e3ba:	f240 2145 	movw	r1, #581	@ 0x245
 800e3be:	e7e3      	b.n	800e388 <__mdiff+0x28>
 800e3c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3c4:	6926      	ldr	r6, [r4, #16]
 800e3c6:	60c5      	str	r5, [r0, #12]
 800e3c8:	f109 0310 	add.w	r3, r9, #16
 800e3cc:	f109 0514 	add.w	r5, r9, #20
 800e3d0:	f104 0e14 	add.w	lr, r4, #20
 800e3d4:	f100 0b14 	add.w	fp, r0, #20
 800e3d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e3dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	46d9      	mov	r9, fp
 800e3e4:	f04f 0c00 	mov.w	ip, #0
 800e3e8:	9b01      	ldr	r3, [sp, #4]
 800e3ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e3ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e3f2:	9301      	str	r3, [sp, #4]
 800e3f4:	fa1f f38a 	uxth.w	r3, sl
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	b283      	uxth	r3, r0
 800e3fc:	1acb      	subs	r3, r1, r3
 800e3fe:	0c00      	lsrs	r0, r0, #16
 800e400:	4463      	add	r3, ip
 800e402:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e406:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e410:	4576      	cmp	r6, lr
 800e412:	f849 3b04 	str.w	r3, [r9], #4
 800e416:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e41a:	d8e5      	bhi.n	800e3e8 <__mdiff+0x88>
 800e41c:	1b33      	subs	r3, r6, r4
 800e41e:	3b15      	subs	r3, #21
 800e420:	f023 0303 	bic.w	r3, r3, #3
 800e424:	3415      	adds	r4, #21
 800e426:	3304      	adds	r3, #4
 800e428:	42a6      	cmp	r6, r4
 800e42a:	bf38      	it	cc
 800e42c:	2304      	movcc	r3, #4
 800e42e:	441d      	add	r5, r3
 800e430:	445b      	add	r3, fp
 800e432:	461e      	mov	r6, r3
 800e434:	462c      	mov	r4, r5
 800e436:	4544      	cmp	r4, r8
 800e438:	d30e      	bcc.n	800e458 <__mdiff+0xf8>
 800e43a:	f108 0103 	add.w	r1, r8, #3
 800e43e:	1b49      	subs	r1, r1, r5
 800e440:	f021 0103 	bic.w	r1, r1, #3
 800e444:	3d03      	subs	r5, #3
 800e446:	45a8      	cmp	r8, r5
 800e448:	bf38      	it	cc
 800e44a:	2100      	movcc	r1, #0
 800e44c:	440b      	add	r3, r1
 800e44e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e452:	b191      	cbz	r1, 800e47a <__mdiff+0x11a>
 800e454:	6117      	str	r7, [r2, #16]
 800e456:	e79d      	b.n	800e394 <__mdiff+0x34>
 800e458:	f854 1b04 	ldr.w	r1, [r4], #4
 800e45c:	46e6      	mov	lr, ip
 800e45e:	0c08      	lsrs	r0, r1, #16
 800e460:	fa1c fc81 	uxtah	ip, ip, r1
 800e464:	4471      	add	r1, lr
 800e466:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e46a:	b289      	uxth	r1, r1
 800e46c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e470:	f846 1b04 	str.w	r1, [r6], #4
 800e474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e478:	e7dd      	b.n	800e436 <__mdiff+0xd6>
 800e47a:	3f01      	subs	r7, #1
 800e47c:	e7e7      	b.n	800e44e <__mdiff+0xee>
 800e47e:	bf00      	nop
 800e480:	080115b4 	.word	0x080115b4
 800e484:	08011625 	.word	0x08011625

0800e488 <__ulp>:
 800e488:	b082      	sub	sp, #8
 800e48a:	ed8d 0b00 	vstr	d0, [sp]
 800e48e:	9a01      	ldr	r2, [sp, #4]
 800e490:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d0 <__ulp+0x48>)
 800e492:	4013      	ands	r3, r2
 800e494:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	dc08      	bgt.n	800e4ae <__ulp+0x26>
 800e49c:	425b      	negs	r3, r3
 800e49e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e4a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4a6:	da04      	bge.n	800e4b2 <__ulp+0x2a>
 800e4a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e4ac:	4113      	asrs	r3, r2
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	e008      	b.n	800e4c4 <__ulp+0x3c>
 800e4b2:	f1a2 0314 	sub.w	r3, r2, #20
 800e4b6:	2b1e      	cmp	r3, #30
 800e4b8:	bfda      	itte	le
 800e4ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e4be:	40da      	lsrle	r2, r3
 800e4c0:	2201      	movgt	r2, #1
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	ec41 0b10 	vmov	d0, r0, r1
 800e4cc:	b002      	add	sp, #8
 800e4ce:	4770      	bx	lr
 800e4d0:	7ff00000 	.word	0x7ff00000

0800e4d4 <__b2d>:
 800e4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d8:	6906      	ldr	r6, [r0, #16]
 800e4da:	f100 0814 	add.w	r8, r0, #20
 800e4de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e4e2:	1f37      	subs	r7, r6, #4
 800e4e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e4e8:	4610      	mov	r0, r2
 800e4ea:	f7ff fd4b 	bl	800df84 <__hi0bits>
 800e4ee:	f1c0 0320 	rsb	r3, r0, #32
 800e4f2:	280a      	cmp	r0, #10
 800e4f4:	600b      	str	r3, [r1, #0]
 800e4f6:	491b      	ldr	r1, [pc, #108]	@ (800e564 <__b2d+0x90>)
 800e4f8:	dc15      	bgt.n	800e526 <__b2d+0x52>
 800e4fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800e4fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800e502:	45b8      	cmp	r8, r7
 800e504:	ea43 0501 	orr.w	r5, r3, r1
 800e508:	bf34      	ite	cc
 800e50a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e50e:	2300      	movcs	r3, #0
 800e510:	3015      	adds	r0, #21
 800e512:	fa02 f000 	lsl.w	r0, r2, r0
 800e516:	fa23 f30c 	lsr.w	r3, r3, ip
 800e51a:	4303      	orrs	r3, r0
 800e51c:	461c      	mov	r4, r3
 800e51e:	ec45 4b10 	vmov	d0, r4, r5
 800e522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e526:	45b8      	cmp	r8, r7
 800e528:	bf3a      	itte	cc
 800e52a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e52e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e532:	2300      	movcs	r3, #0
 800e534:	380b      	subs	r0, #11
 800e536:	d012      	beq.n	800e55e <__b2d+0x8a>
 800e538:	f1c0 0120 	rsb	r1, r0, #32
 800e53c:	fa23 f401 	lsr.w	r4, r3, r1
 800e540:	4082      	lsls	r2, r0
 800e542:	4322      	orrs	r2, r4
 800e544:	4547      	cmp	r7, r8
 800e546:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e54a:	bf8c      	ite	hi
 800e54c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e550:	2200      	movls	r2, #0
 800e552:	4083      	lsls	r3, r0
 800e554:	40ca      	lsrs	r2, r1
 800e556:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e55a:	4313      	orrs	r3, r2
 800e55c:	e7de      	b.n	800e51c <__b2d+0x48>
 800e55e:	ea42 0501 	orr.w	r5, r2, r1
 800e562:	e7db      	b.n	800e51c <__b2d+0x48>
 800e564:	3ff00000 	.word	0x3ff00000

0800e568 <__d2b>:
 800e568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e56c:	460f      	mov	r7, r1
 800e56e:	2101      	movs	r1, #1
 800e570:	ec59 8b10 	vmov	r8, r9, d0
 800e574:	4616      	mov	r6, r2
 800e576:	f7ff fc13 	bl	800dda0 <_Balloc>
 800e57a:	4604      	mov	r4, r0
 800e57c:	b930      	cbnz	r0, 800e58c <__d2b+0x24>
 800e57e:	4602      	mov	r2, r0
 800e580:	4b23      	ldr	r3, [pc, #140]	@ (800e610 <__d2b+0xa8>)
 800e582:	4824      	ldr	r0, [pc, #144]	@ (800e614 <__d2b+0xac>)
 800e584:	f240 310f 	movw	r1, #783	@ 0x30f
 800e588:	f7fe f954 	bl	800c834 <__assert_func>
 800e58c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e594:	b10d      	cbz	r5, 800e59a <__d2b+0x32>
 800e596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	f1b8 0300 	subs.w	r3, r8, #0
 800e5a0:	d023      	beq.n	800e5ea <__d2b+0x82>
 800e5a2:	4668      	mov	r0, sp
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	f7ff fd0c 	bl	800dfc2 <__lo0bits>
 800e5aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5ae:	b1d0      	cbz	r0, 800e5e6 <__d2b+0x7e>
 800e5b0:	f1c0 0320 	rsb	r3, r0, #32
 800e5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b8:	430b      	orrs	r3, r1
 800e5ba:	40c2      	lsrs	r2, r0
 800e5bc:	6163      	str	r3, [r4, #20]
 800e5be:	9201      	str	r2, [sp, #4]
 800e5c0:	9b01      	ldr	r3, [sp, #4]
 800e5c2:	61a3      	str	r3, [r4, #24]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	bf0c      	ite	eq
 800e5c8:	2201      	moveq	r2, #1
 800e5ca:	2202      	movne	r2, #2
 800e5cc:	6122      	str	r2, [r4, #16]
 800e5ce:	b1a5      	cbz	r5, 800e5fa <__d2b+0x92>
 800e5d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e5d4:	4405      	add	r5, r0
 800e5d6:	603d      	str	r5, [r7, #0]
 800e5d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e5dc:	6030      	str	r0, [r6, #0]
 800e5de:	4620      	mov	r0, r4
 800e5e0:	b003      	add	sp, #12
 800e5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5e6:	6161      	str	r1, [r4, #20]
 800e5e8:	e7ea      	b.n	800e5c0 <__d2b+0x58>
 800e5ea:	a801      	add	r0, sp, #4
 800e5ec:	f7ff fce9 	bl	800dfc2 <__lo0bits>
 800e5f0:	9b01      	ldr	r3, [sp, #4]
 800e5f2:	6163      	str	r3, [r4, #20]
 800e5f4:	3020      	adds	r0, #32
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	e7e8      	b.n	800e5cc <__d2b+0x64>
 800e5fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e602:	6038      	str	r0, [r7, #0]
 800e604:	6918      	ldr	r0, [r3, #16]
 800e606:	f7ff fcbd 	bl	800df84 <__hi0bits>
 800e60a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e60e:	e7e5      	b.n	800e5dc <__d2b+0x74>
 800e610:	080115b4 	.word	0x080115b4
 800e614:	08011625 	.word	0x08011625

0800e618 <__ratio>:
 800e618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61c:	b085      	sub	sp, #20
 800e61e:	e9cd 1000 	strd	r1, r0, [sp]
 800e622:	a902      	add	r1, sp, #8
 800e624:	f7ff ff56 	bl	800e4d4 <__b2d>
 800e628:	9800      	ldr	r0, [sp, #0]
 800e62a:	a903      	add	r1, sp, #12
 800e62c:	ec55 4b10 	vmov	r4, r5, d0
 800e630:	f7ff ff50 	bl	800e4d4 <__b2d>
 800e634:	9b01      	ldr	r3, [sp, #4]
 800e636:	6919      	ldr	r1, [r3, #16]
 800e638:	9b00      	ldr	r3, [sp, #0]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	1ac9      	subs	r1, r1, r3
 800e63e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e642:	1a9b      	subs	r3, r3, r2
 800e644:	ec5b ab10 	vmov	sl, fp, d0
 800e648:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	bfce      	itee	gt
 800e650:	462a      	movgt	r2, r5
 800e652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e656:	465a      	movle	r2, fp
 800e658:	462f      	mov	r7, r5
 800e65a:	46d9      	mov	r9, fp
 800e65c:	bfcc      	ite	gt
 800e65e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e662:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e666:	464b      	mov	r3, r9
 800e668:	4652      	mov	r2, sl
 800e66a:	4620      	mov	r0, r4
 800e66c:	4639      	mov	r1, r7
 800e66e:	f7f2 f8ed 	bl	800084c <__aeabi_ddiv>
 800e672:	ec41 0b10 	vmov	d0, r0, r1
 800e676:	b005      	add	sp, #20
 800e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e67c <__copybits>:
 800e67c:	3901      	subs	r1, #1
 800e67e:	b570      	push	{r4, r5, r6, lr}
 800e680:	1149      	asrs	r1, r1, #5
 800e682:	6914      	ldr	r4, [r2, #16]
 800e684:	3101      	adds	r1, #1
 800e686:	f102 0314 	add.w	r3, r2, #20
 800e68a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e68e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e692:	1f05      	subs	r5, r0, #4
 800e694:	42a3      	cmp	r3, r4
 800e696:	d30c      	bcc.n	800e6b2 <__copybits+0x36>
 800e698:	1aa3      	subs	r3, r4, r2
 800e69a:	3b11      	subs	r3, #17
 800e69c:	f023 0303 	bic.w	r3, r3, #3
 800e6a0:	3211      	adds	r2, #17
 800e6a2:	42a2      	cmp	r2, r4
 800e6a4:	bf88      	it	hi
 800e6a6:	2300      	movhi	r3, #0
 800e6a8:	4418      	add	r0, r3
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	4288      	cmp	r0, r1
 800e6ae:	d305      	bcc.n	800e6bc <__copybits+0x40>
 800e6b0:	bd70      	pop	{r4, r5, r6, pc}
 800e6b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6ba:	e7eb      	b.n	800e694 <__copybits+0x18>
 800e6bc:	f840 3b04 	str.w	r3, [r0], #4
 800e6c0:	e7f4      	b.n	800e6ac <__copybits+0x30>

0800e6c2 <__any_on>:
 800e6c2:	f100 0214 	add.w	r2, r0, #20
 800e6c6:	6900      	ldr	r0, [r0, #16]
 800e6c8:	114b      	asrs	r3, r1, #5
 800e6ca:	4298      	cmp	r0, r3
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	db11      	blt.n	800e6f4 <__any_on+0x32>
 800e6d0:	dd0a      	ble.n	800e6e8 <__any_on+0x26>
 800e6d2:	f011 011f 	ands.w	r1, r1, #31
 800e6d6:	d007      	beq.n	800e6e8 <__any_on+0x26>
 800e6d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6dc:	fa24 f001 	lsr.w	r0, r4, r1
 800e6e0:	fa00 f101 	lsl.w	r1, r0, r1
 800e6e4:	428c      	cmp	r4, r1
 800e6e6:	d10b      	bne.n	800e700 <__any_on+0x3e>
 800e6e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d803      	bhi.n	800e6f8 <__any_on+0x36>
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	bd10      	pop	{r4, pc}
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	e7f7      	b.n	800e6e8 <__any_on+0x26>
 800e6f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6fc:	2900      	cmp	r1, #0
 800e6fe:	d0f5      	beq.n	800e6ec <__any_on+0x2a>
 800e700:	2001      	movs	r0, #1
 800e702:	e7f6      	b.n	800e6f2 <__any_on+0x30>

0800e704 <__ascii_wctomb>:
 800e704:	4603      	mov	r3, r0
 800e706:	4608      	mov	r0, r1
 800e708:	b141      	cbz	r1, 800e71c <__ascii_wctomb+0x18>
 800e70a:	2aff      	cmp	r2, #255	@ 0xff
 800e70c:	d904      	bls.n	800e718 <__ascii_wctomb+0x14>
 800e70e:	228a      	movs	r2, #138	@ 0x8a
 800e710:	601a      	str	r2, [r3, #0]
 800e712:	f04f 30ff 	mov.w	r0, #4294967295
 800e716:	4770      	bx	lr
 800e718:	700a      	strb	r2, [r1, #0]
 800e71a:	2001      	movs	r0, #1
 800e71c:	4770      	bx	lr

0800e71e <__ssputs_r>:
 800e71e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e722:	688e      	ldr	r6, [r1, #8]
 800e724:	461f      	mov	r7, r3
 800e726:	42be      	cmp	r6, r7
 800e728:	680b      	ldr	r3, [r1, #0]
 800e72a:	4682      	mov	sl, r0
 800e72c:	460c      	mov	r4, r1
 800e72e:	4690      	mov	r8, r2
 800e730:	d82d      	bhi.n	800e78e <__ssputs_r+0x70>
 800e732:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e736:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e73a:	d026      	beq.n	800e78a <__ssputs_r+0x6c>
 800e73c:	6965      	ldr	r5, [r4, #20]
 800e73e:	6909      	ldr	r1, [r1, #16]
 800e740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e744:	eba3 0901 	sub.w	r9, r3, r1
 800e748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e74c:	1c7b      	adds	r3, r7, #1
 800e74e:	444b      	add	r3, r9
 800e750:	106d      	asrs	r5, r5, #1
 800e752:	429d      	cmp	r5, r3
 800e754:	bf38      	it	cc
 800e756:	461d      	movcc	r5, r3
 800e758:	0553      	lsls	r3, r2, #21
 800e75a:	d527      	bpl.n	800e7ac <__ssputs_r+0x8e>
 800e75c:	4629      	mov	r1, r5
 800e75e:	f7ff fa81 	bl	800dc64 <_malloc_r>
 800e762:	4606      	mov	r6, r0
 800e764:	b360      	cbz	r0, 800e7c0 <__ssputs_r+0xa2>
 800e766:	6921      	ldr	r1, [r4, #16]
 800e768:	464a      	mov	r2, r9
 800e76a:	f7fe f844 	bl	800c7f6 <memcpy>
 800e76e:	89a3      	ldrh	r3, [r4, #12]
 800e770:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e778:	81a3      	strh	r3, [r4, #12]
 800e77a:	6126      	str	r6, [r4, #16]
 800e77c:	6165      	str	r5, [r4, #20]
 800e77e:	444e      	add	r6, r9
 800e780:	eba5 0509 	sub.w	r5, r5, r9
 800e784:	6026      	str	r6, [r4, #0]
 800e786:	60a5      	str	r5, [r4, #8]
 800e788:	463e      	mov	r6, r7
 800e78a:	42be      	cmp	r6, r7
 800e78c:	d900      	bls.n	800e790 <__ssputs_r+0x72>
 800e78e:	463e      	mov	r6, r7
 800e790:	6820      	ldr	r0, [r4, #0]
 800e792:	4632      	mov	r2, r6
 800e794:	4641      	mov	r1, r8
 800e796:	f000 f9d7 	bl	800eb48 <memmove>
 800e79a:	68a3      	ldr	r3, [r4, #8]
 800e79c:	1b9b      	subs	r3, r3, r6
 800e79e:	60a3      	str	r3, [r4, #8]
 800e7a0:	6823      	ldr	r3, [r4, #0]
 800e7a2:	4433      	add	r3, r6
 800e7a4:	6023      	str	r3, [r4, #0]
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ac:	462a      	mov	r2, r5
 800e7ae:	f000 fa10 	bl	800ebd2 <_realloc_r>
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d1e0      	bne.n	800e77a <__ssputs_r+0x5c>
 800e7b8:	6921      	ldr	r1, [r4, #16]
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	f7fe fea4 	bl	800d508 <_free_r>
 800e7c0:	230c      	movs	r3, #12
 800e7c2:	f8ca 3000 	str.w	r3, [sl]
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7cc:	81a3      	strh	r3, [r4, #12]
 800e7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d2:	e7e9      	b.n	800e7a8 <__ssputs_r+0x8a>

0800e7d4 <_svfiprintf_r>:
 800e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d8:	4698      	mov	r8, r3
 800e7da:	898b      	ldrh	r3, [r1, #12]
 800e7dc:	061b      	lsls	r3, r3, #24
 800e7de:	b09d      	sub	sp, #116	@ 0x74
 800e7e0:	4607      	mov	r7, r0
 800e7e2:	460d      	mov	r5, r1
 800e7e4:	4614      	mov	r4, r2
 800e7e6:	d510      	bpl.n	800e80a <_svfiprintf_r+0x36>
 800e7e8:	690b      	ldr	r3, [r1, #16]
 800e7ea:	b973      	cbnz	r3, 800e80a <_svfiprintf_r+0x36>
 800e7ec:	2140      	movs	r1, #64	@ 0x40
 800e7ee:	f7ff fa39 	bl	800dc64 <_malloc_r>
 800e7f2:	6028      	str	r0, [r5, #0]
 800e7f4:	6128      	str	r0, [r5, #16]
 800e7f6:	b930      	cbnz	r0, 800e806 <_svfiprintf_r+0x32>
 800e7f8:	230c      	movs	r3, #12
 800e7fa:	603b      	str	r3, [r7, #0]
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e800:	b01d      	add	sp, #116	@ 0x74
 800e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e806:	2340      	movs	r3, #64	@ 0x40
 800e808:	616b      	str	r3, [r5, #20]
 800e80a:	2300      	movs	r3, #0
 800e80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80e:	2320      	movs	r3, #32
 800e810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e814:	f8cd 800c 	str.w	r8, [sp, #12]
 800e818:	2330      	movs	r3, #48	@ 0x30
 800e81a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e9b8 <_svfiprintf_r+0x1e4>
 800e81e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e822:	f04f 0901 	mov.w	r9, #1
 800e826:	4623      	mov	r3, r4
 800e828:	469a      	mov	sl, r3
 800e82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e82e:	b10a      	cbz	r2, 800e834 <_svfiprintf_r+0x60>
 800e830:	2a25      	cmp	r2, #37	@ 0x25
 800e832:	d1f9      	bne.n	800e828 <_svfiprintf_r+0x54>
 800e834:	ebba 0b04 	subs.w	fp, sl, r4
 800e838:	d00b      	beq.n	800e852 <_svfiprintf_r+0x7e>
 800e83a:	465b      	mov	r3, fp
 800e83c:	4622      	mov	r2, r4
 800e83e:	4629      	mov	r1, r5
 800e840:	4638      	mov	r0, r7
 800e842:	f7ff ff6c 	bl	800e71e <__ssputs_r>
 800e846:	3001      	adds	r0, #1
 800e848:	f000 80a7 	beq.w	800e99a <_svfiprintf_r+0x1c6>
 800e84c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e84e:	445a      	add	r2, fp
 800e850:	9209      	str	r2, [sp, #36]	@ 0x24
 800e852:	f89a 3000 	ldrb.w	r3, [sl]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 809f 	beq.w	800e99a <_svfiprintf_r+0x1c6>
 800e85c:	2300      	movs	r3, #0
 800e85e:	f04f 32ff 	mov.w	r2, #4294967295
 800e862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e866:	f10a 0a01 	add.w	sl, sl, #1
 800e86a:	9304      	str	r3, [sp, #16]
 800e86c:	9307      	str	r3, [sp, #28]
 800e86e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e872:	931a      	str	r3, [sp, #104]	@ 0x68
 800e874:	4654      	mov	r4, sl
 800e876:	2205      	movs	r2, #5
 800e878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87c:	484e      	ldr	r0, [pc, #312]	@ (800e9b8 <_svfiprintf_r+0x1e4>)
 800e87e:	f7f1 fca7 	bl	80001d0 <memchr>
 800e882:	9a04      	ldr	r2, [sp, #16]
 800e884:	b9d8      	cbnz	r0, 800e8be <_svfiprintf_r+0xea>
 800e886:	06d0      	lsls	r0, r2, #27
 800e888:	bf44      	itt	mi
 800e88a:	2320      	movmi	r3, #32
 800e88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e890:	0711      	lsls	r1, r2, #28
 800e892:	bf44      	itt	mi
 800e894:	232b      	movmi	r3, #43	@ 0x2b
 800e896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e89a:	f89a 3000 	ldrb.w	r3, [sl]
 800e89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8a0:	d015      	beq.n	800e8ce <_svfiprintf_r+0xfa>
 800e8a2:	9a07      	ldr	r2, [sp, #28]
 800e8a4:	4654      	mov	r4, sl
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	f04f 0c0a 	mov.w	ip, #10
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b2:	3b30      	subs	r3, #48	@ 0x30
 800e8b4:	2b09      	cmp	r3, #9
 800e8b6:	d94b      	bls.n	800e950 <_svfiprintf_r+0x17c>
 800e8b8:	b1b0      	cbz	r0, 800e8e8 <_svfiprintf_r+0x114>
 800e8ba:	9207      	str	r2, [sp, #28]
 800e8bc:	e014      	b.n	800e8e8 <_svfiprintf_r+0x114>
 800e8be:	eba0 0308 	sub.w	r3, r0, r8
 800e8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	46a2      	mov	sl, r4
 800e8cc:	e7d2      	b.n	800e874 <_svfiprintf_r+0xa0>
 800e8ce:	9b03      	ldr	r3, [sp, #12]
 800e8d0:	1d19      	adds	r1, r3, #4
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	9103      	str	r1, [sp, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfbb      	ittet	lt
 800e8da:	425b      	neglt	r3, r3
 800e8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e8e0:	9307      	strge	r3, [sp, #28]
 800e8e2:	9307      	strlt	r3, [sp, #28]
 800e8e4:	bfb8      	it	lt
 800e8e6:	9204      	strlt	r2, [sp, #16]
 800e8e8:	7823      	ldrb	r3, [r4, #0]
 800e8ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ec:	d10a      	bne.n	800e904 <_svfiprintf_r+0x130>
 800e8ee:	7863      	ldrb	r3, [r4, #1]
 800e8f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f2:	d132      	bne.n	800e95a <_svfiprintf_r+0x186>
 800e8f4:	9b03      	ldr	r3, [sp, #12]
 800e8f6:	1d1a      	adds	r2, r3, #4
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	9203      	str	r2, [sp, #12]
 800e8fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e900:	3402      	adds	r4, #2
 800e902:	9305      	str	r3, [sp, #20]
 800e904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9c8 <_svfiprintf_r+0x1f4>
 800e908:	7821      	ldrb	r1, [r4, #0]
 800e90a:	2203      	movs	r2, #3
 800e90c:	4650      	mov	r0, sl
 800e90e:	f7f1 fc5f 	bl	80001d0 <memchr>
 800e912:	b138      	cbz	r0, 800e924 <_svfiprintf_r+0x150>
 800e914:	9b04      	ldr	r3, [sp, #16]
 800e916:	eba0 000a 	sub.w	r0, r0, sl
 800e91a:	2240      	movs	r2, #64	@ 0x40
 800e91c:	4082      	lsls	r2, r0
 800e91e:	4313      	orrs	r3, r2
 800e920:	3401      	adds	r4, #1
 800e922:	9304      	str	r3, [sp, #16]
 800e924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e928:	4824      	ldr	r0, [pc, #144]	@ (800e9bc <_svfiprintf_r+0x1e8>)
 800e92a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e92e:	2206      	movs	r2, #6
 800e930:	f7f1 fc4e 	bl	80001d0 <memchr>
 800e934:	2800      	cmp	r0, #0
 800e936:	d036      	beq.n	800e9a6 <_svfiprintf_r+0x1d2>
 800e938:	4b21      	ldr	r3, [pc, #132]	@ (800e9c0 <_svfiprintf_r+0x1ec>)
 800e93a:	bb1b      	cbnz	r3, 800e984 <_svfiprintf_r+0x1b0>
 800e93c:	9b03      	ldr	r3, [sp, #12]
 800e93e:	3307      	adds	r3, #7
 800e940:	f023 0307 	bic.w	r3, r3, #7
 800e944:	3308      	adds	r3, #8
 800e946:	9303      	str	r3, [sp, #12]
 800e948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94a:	4433      	add	r3, r6
 800e94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e94e:	e76a      	b.n	800e826 <_svfiprintf_r+0x52>
 800e950:	fb0c 3202 	mla	r2, ip, r2, r3
 800e954:	460c      	mov	r4, r1
 800e956:	2001      	movs	r0, #1
 800e958:	e7a8      	b.n	800e8ac <_svfiprintf_r+0xd8>
 800e95a:	2300      	movs	r3, #0
 800e95c:	3401      	adds	r4, #1
 800e95e:	9305      	str	r3, [sp, #20]
 800e960:	4619      	mov	r1, r3
 800e962:	f04f 0c0a 	mov.w	ip, #10
 800e966:	4620      	mov	r0, r4
 800e968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e96c:	3a30      	subs	r2, #48	@ 0x30
 800e96e:	2a09      	cmp	r2, #9
 800e970:	d903      	bls.n	800e97a <_svfiprintf_r+0x1a6>
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0c6      	beq.n	800e904 <_svfiprintf_r+0x130>
 800e976:	9105      	str	r1, [sp, #20]
 800e978:	e7c4      	b.n	800e904 <_svfiprintf_r+0x130>
 800e97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e97e:	4604      	mov	r4, r0
 800e980:	2301      	movs	r3, #1
 800e982:	e7f0      	b.n	800e966 <_svfiprintf_r+0x192>
 800e984:	ab03      	add	r3, sp, #12
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	462a      	mov	r2, r5
 800e98a:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c4 <_svfiprintf_r+0x1f0>)
 800e98c:	a904      	add	r1, sp, #16
 800e98e:	4638      	mov	r0, r7
 800e990:	f7fc ff52 	bl	800b838 <_printf_float>
 800e994:	1c42      	adds	r2, r0, #1
 800e996:	4606      	mov	r6, r0
 800e998:	d1d6      	bne.n	800e948 <_svfiprintf_r+0x174>
 800e99a:	89ab      	ldrh	r3, [r5, #12]
 800e99c:	065b      	lsls	r3, r3, #25
 800e99e:	f53f af2d 	bmi.w	800e7fc <_svfiprintf_r+0x28>
 800e9a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9a4:	e72c      	b.n	800e800 <_svfiprintf_r+0x2c>
 800e9a6:	ab03      	add	r3, sp, #12
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	4b05      	ldr	r3, [pc, #20]	@ (800e9c4 <_svfiprintf_r+0x1f0>)
 800e9ae:	a904      	add	r1, sp, #16
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f7fd f9d9 	bl	800bd68 <_printf_i>
 800e9b6:	e7ed      	b.n	800e994 <_svfiprintf_r+0x1c0>
 800e9b8:	08011780 	.word	0x08011780
 800e9bc:	0801178a 	.word	0x0801178a
 800e9c0:	0800b839 	.word	0x0800b839
 800e9c4:	0800e71f 	.word	0x0800e71f
 800e9c8:	08011786 	.word	0x08011786

0800e9cc <__sflush_r>:
 800e9cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d4:	0716      	lsls	r6, r2, #28
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	460c      	mov	r4, r1
 800e9da:	d454      	bmi.n	800ea86 <__sflush_r+0xba>
 800e9dc:	684b      	ldr	r3, [r1, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	dc02      	bgt.n	800e9e8 <__sflush_r+0x1c>
 800e9e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dd48      	ble.n	800ea7a <__sflush_r+0xae>
 800e9e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9ea:	2e00      	cmp	r6, #0
 800e9ec:	d045      	beq.n	800ea7a <__sflush_r+0xae>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9f4:	682f      	ldr	r7, [r5, #0]
 800e9f6:	6a21      	ldr	r1, [r4, #32]
 800e9f8:	602b      	str	r3, [r5, #0]
 800e9fa:	d030      	beq.n	800ea5e <__sflush_r+0x92>
 800e9fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9fe:	89a3      	ldrh	r3, [r4, #12]
 800ea00:	0759      	lsls	r1, r3, #29
 800ea02:	d505      	bpl.n	800ea10 <__sflush_r+0x44>
 800ea04:	6863      	ldr	r3, [r4, #4]
 800ea06:	1ad2      	subs	r2, r2, r3
 800ea08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea0a:	b10b      	cbz	r3, 800ea10 <__sflush_r+0x44>
 800ea0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea0e:	1ad2      	subs	r2, r2, r3
 800ea10:	2300      	movs	r3, #0
 800ea12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea14:	6a21      	ldr	r1, [r4, #32]
 800ea16:	4628      	mov	r0, r5
 800ea18:	47b0      	blx	r6
 800ea1a:	1c43      	adds	r3, r0, #1
 800ea1c:	89a3      	ldrh	r3, [r4, #12]
 800ea1e:	d106      	bne.n	800ea2e <__sflush_r+0x62>
 800ea20:	6829      	ldr	r1, [r5, #0]
 800ea22:	291d      	cmp	r1, #29
 800ea24:	d82b      	bhi.n	800ea7e <__sflush_r+0xb2>
 800ea26:	4a2a      	ldr	r2, [pc, #168]	@ (800ead0 <__sflush_r+0x104>)
 800ea28:	410a      	asrs	r2, r1
 800ea2a:	07d6      	lsls	r6, r2, #31
 800ea2c:	d427      	bmi.n	800ea7e <__sflush_r+0xb2>
 800ea2e:	2200      	movs	r2, #0
 800ea30:	6062      	str	r2, [r4, #4]
 800ea32:	04d9      	lsls	r1, r3, #19
 800ea34:	6922      	ldr	r2, [r4, #16]
 800ea36:	6022      	str	r2, [r4, #0]
 800ea38:	d504      	bpl.n	800ea44 <__sflush_r+0x78>
 800ea3a:	1c42      	adds	r2, r0, #1
 800ea3c:	d101      	bne.n	800ea42 <__sflush_r+0x76>
 800ea3e:	682b      	ldr	r3, [r5, #0]
 800ea40:	b903      	cbnz	r3, 800ea44 <__sflush_r+0x78>
 800ea42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea46:	602f      	str	r7, [r5, #0]
 800ea48:	b1b9      	cbz	r1, 800ea7a <__sflush_r+0xae>
 800ea4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	d002      	beq.n	800ea58 <__sflush_r+0x8c>
 800ea52:	4628      	mov	r0, r5
 800ea54:	f7fe fd58 	bl	800d508 <_free_r>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea5c:	e00d      	b.n	800ea7a <__sflush_r+0xae>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	4628      	mov	r0, r5
 800ea62:	47b0      	blx	r6
 800ea64:	4602      	mov	r2, r0
 800ea66:	1c50      	adds	r0, r2, #1
 800ea68:	d1c9      	bne.n	800e9fe <__sflush_r+0x32>
 800ea6a:	682b      	ldr	r3, [r5, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d0c6      	beq.n	800e9fe <__sflush_r+0x32>
 800ea70:	2b1d      	cmp	r3, #29
 800ea72:	d001      	beq.n	800ea78 <__sflush_r+0xac>
 800ea74:	2b16      	cmp	r3, #22
 800ea76:	d11e      	bne.n	800eab6 <__sflush_r+0xea>
 800ea78:	602f      	str	r7, [r5, #0]
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	e022      	b.n	800eac4 <__sflush_r+0xf8>
 800ea7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea82:	b21b      	sxth	r3, r3
 800ea84:	e01b      	b.n	800eabe <__sflush_r+0xf2>
 800ea86:	690f      	ldr	r7, [r1, #16]
 800ea88:	2f00      	cmp	r7, #0
 800ea8a:	d0f6      	beq.n	800ea7a <__sflush_r+0xae>
 800ea8c:	0793      	lsls	r3, r2, #30
 800ea8e:	680e      	ldr	r6, [r1, #0]
 800ea90:	bf08      	it	eq
 800ea92:	694b      	ldreq	r3, [r1, #20]
 800ea94:	600f      	str	r7, [r1, #0]
 800ea96:	bf18      	it	ne
 800ea98:	2300      	movne	r3, #0
 800ea9a:	eba6 0807 	sub.w	r8, r6, r7
 800ea9e:	608b      	str	r3, [r1, #8]
 800eaa0:	f1b8 0f00 	cmp.w	r8, #0
 800eaa4:	dde9      	ble.n	800ea7a <__sflush_r+0xae>
 800eaa6:	6a21      	ldr	r1, [r4, #32]
 800eaa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eaaa:	4643      	mov	r3, r8
 800eaac:	463a      	mov	r2, r7
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b0      	blx	r6
 800eab2:	2800      	cmp	r0, #0
 800eab4:	dc08      	bgt.n	800eac8 <__sflush_r+0xfc>
 800eab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eabe:	81a3      	strh	r3, [r4, #12]
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295
 800eac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac8:	4407      	add	r7, r0
 800eaca:	eba8 0800 	sub.w	r8, r8, r0
 800eace:	e7e7      	b.n	800eaa0 <__sflush_r+0xd4>
 800ead0:	dfbffffe 	.word	0xdfbffffe

0800ead4 <_fflush_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	690b      	ldr	r3, [r1, #16]
 800ead8:	4605      	mov	r5, r0
 800eada:	460c      	mov	r4, r1
 800eadc:	b913      	cbnz	r3, 800eae4 <_fflush_r+0x10>
 800eade:	2500      	movs	r5, #0
 800eae0:	4628      	mov	r0, r5
 800eae2:	bd38      	pop	{r3, r4, r5, pc}
 800eae4:	b118      	cbz	r0, 800eaee <_fflush_r+0x1a>
 800eae6:	6a03      	ldr	r3, [r0, #32]
 800eae8:	b90b      	cbnz	r3, 800eaee <_fflush_r+0x1a>
 800eaea:	f7fd fcfd 	bl	800c4e8 <__sinit>
 800eaee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d0f3      	beq.n	800eade <_fflush_r+0xa>
 800eaf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eaf8:	07d0      	lsls	r0, r2, #31
 800eafa:	d404      	bmi.n	800eb06 <_fflush_r+0x32>
 800eafc:	0599      	lsls	r1, r3, #22
 800eafe:	d402      	bmi.n	800eb06 <_fflush_r+0x32>
 800eb00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb02:	f7fd fe76 	bl	800c7f2 <__retarget_lock_acquire_recursive>
 800eb06:	4628      	mov	r0, r5
 800eb08:	4621      	mov	r1, r4
 800eb0a:	f7ff ff5f 	bl	800e9cc <__sflush_r>
 800eb0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb10:	07da      	lsls	r2, r3, #31
 800eb12:	4605      	mov	r5, r0
 800eb14:	d4e4      	bmi.n	800eae0 <_fflush_r+0xc>
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	059b      	lsls	r3, r3, #22
 800eb1a:	d4e1      	bmi.n	800eae0 <_fflush_r+0xc>
 800eb1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb1e:	f7fd fe69 	bl	800c7f4 <__retarget_lock_release_recursive>
 800eb22:	e7dd      	b.n	800eae0 <_fflush_r+0xc>

0800eb24 <fiprintf>:
 800eb24:	b40e      	push	{r1, r2, r3}
 800eb26:	b503      	push	{r0, r1, lr}
 800eb28:	4601      	mov	r1, r0
 800eb2a:	ab03      	add	r3, sp, #12
 800eb2c:	4805      	ldr	r0, [pc, #20]	@ (800eb44 <fiprintf+0x20>)
 800eb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb32:	6800      	ldr	r0, [r0, #0]
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	f000 f8a3 	bl	800ec80 <_vfiprintf_r>
 800eb3a:	b002      	add	sp, #8
 800eb3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb40:	b003      	add	sp, #12
 800eb42:	4770      	bx	lr
 800eb44:	20000250 	.word	0x20000250

0800eb48 <memmove>:
 800eb48:	4288      	cmp	r0, r1
 800eb4a:	b510      	push	{r4, lr}
 800eb4c:	eb01 0402 	add.w	r4, r1, r2
 800eb50:	d902      	bls.n	800eb58 <memmove+0x10>
 800eb52:	4284      	cmp	r4, r0
 800eb54:	4623      	mov	r3, r4
 800eb56:	d807      	bhi.n	800eb68 <memmove+0x20>
 800eb58:	1e43      	subs	r3, r0, #1
 800eb5a:	42a1      	cmp	r1, r4
 800eb5c:	d008      	beq.n	800eb70 <memmove+0x28>
 800eb5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb66:	e7f8      	b.n	800eb5a <memmove+0x12>
 800eb68:	4402      	add	r2, r0
 800eb6a:	4601      	mov	r1, r0
 800eb6c:	428a      	cmp	r2, r1
 800eb6e:	d100      	bne.n	800eb72 <memmove+0x2a>
 800eb70:	bd10      	pop	{r4, pc}
 800eb72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb7a:	e7f7      	b.n	800eb6c <memmove+0x24>

0800eb7c <_sbrk_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4d06      	ldr	r5, [pc, #24]	@ (800eb98 <_sbrk_r+0x1c>)
 800eb80:	2300      	movs	r3, #0
 800eb82:	4604      	mov	r4, r0
 800eb84:	4608      	mov	r0, r1
 800eb86:	602b      	str	r3, [r5, #0]
 800eb88:	f7f8 f970 	bl	8006e6c <_sbrk>
 800eb8c:	1c43      	adds	r3, r0, #1
 800eb8e:	d102      	bne.n	800eb96 <_sbrk_r+0x1a>
 800eb90:	682b      	ldr	r3, [r5, #0]
 800eb92:	b103      	cbz	r3, 800eb96 <_sbrk_r+0x1a>
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	bd38      	pop	{r3, r4, r5, pc}
 800eb98:	20000854 	.word	0x20000854

0800eb9c <abort>:
 800eb9c:	b508      	push	{r3, lr}
 800eb9e:	2006      	movs	r0, #6
 800eba0:	f000 fa42 	bl	800f028 <raise>
 800eba4:	2001      	movs	r0, #1
 800eba6:	f7f8 f8e9 	bl	8006d7c <_exit>

0800ebaa <_calloc_r>:
 800ebaa:	b570      	push	{r4, r5, r6, lr}
 800ebac:	fba1 5402 	umull	r5, r4, r1, r2
 800ebb0:	b93c      	cbnz	r4, 800ebc2 <_calloc_r+0x18>
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	f7ff f856 	bl	800dc64 <_malloc_r>
 800ebb8:	4606      	mov	r6, r0
 800ebba:	b928      	cbnz	r0, 800ebc8 <_calloc_r+0x1e>
 800ebbc:	2600      	movs	r6, #0
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	bd70      	pop	{r4, r5, r6, pc}
 800ebc2:	220c      	movs	r2, #12
 800ebc4:	6002      	str	r2, [r0, #0]
 800ebc6:	e7f9      	b.n	800ebbc <_calloc_r+0x12>
 800ebc8:	462a      	mov	r2, r5
 800ebca:	4621      	mov	r1, r4
 800ebcc:	f7fd fd25 	bl	800c61a <memset>
 800ebd0:	e7f5      	b.n	800ebbe <_calloc_r+0x14>

0800ebd2 <_realloc_r>:
 800ebd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	4615      	mov	r5, r2
 800ebda:	460c      	mov	r4, r1
 800ebdc:	b921      	cbnz	r1, 800ebe8 <_realloc_r+0x16>
 800ebde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	f7ff b83e 	b.w	800dc64 <_malloc_r>
 800ebe8:	b92a      	cbnz	r2, 800ebf6 <_realloc_r+0x24>
 800ebea:	f7fe fc8d 	bl	800d508 <_free_r>
 800ebee:	2400      	movs	r4, #0
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf6:	f000 fa33 	bl	800f060 <_malloc_usable_size_r>
 800ebfa:	4285      	cmp	r5, r0
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	d802      	bhi.n	800ec06 <_realloc_r+0x34>
 800ec00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec04:	d8f4      	bhi.n	800ebf0 <_realloc_r+0x1e>
 800ec06:	4629      	mov	r1, r5
 800ec08:	4640      	mov	r0, r8
 800ec0a:	f7ff f82b 	bl	800dc64 <_malloc_r>
 800ec0e:	4607      	mov	r7, r0
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d0ec      	beq.n	800ebee <_realloc_r+0x1c>
 800ec14:	42b5      	cmp	r5, r6
 800ec16:	462a      	mov	r2, r5
 800ec18:	4621      	mov	r1, r4
 800ec1a:	bf28      	it	cs
 800ec1c:	4632      	movcs	r2, r6
 800ec1e:	f7fd fdea 	bl	800c7f6 <memcpy>
 800ec22:	4621      	mov	r1, r4
 800ec24:	4640      	mov	r0, r8
 800ec26:	f7fe fc6f 	bl	800d508 <_free_r>
 800ec2a:	463c      	mov	r4, r7
 800ec2c:	e7e0      	b.n	800ebf0 <_realloc_r+0x1e>

0800ec2e <__sfputc_r>:
 800ec2e:	6893      	ldr	r3, [r2, #8]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	b410      	push	{r4}
 800ec36:	6093      	str	r3, [r2, #8]
 800ec38:	da08      	bge.n	800ec4c <__sfputc_r+0x1e>
 800ec3a:	6994      	ldr	r4, [r2, #24]
 800ec3c:	42a3      	cmp	r3, r4
 800ec3e:	db01      	blt.n	800ec44 <__sfputc_r+0x16>
 800ec40:	290a      	cmp	r1, #10
 800ec42:	d103      	bne.n	800ec4c <__sfputc_r+0x1e>
 800ec44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec48:	f000 b932 	b.w	800eeb0 <__swbuf_r>
 800ec4c:	6813      	ldr	r3, [r2, #0]
 800ec4e:	1c58      	adds	r0, r3, #1
 800ec50:	6010      	str	r0, [r2, #0]
 800ec52:	7019      	strb	r1, [r3, #0]
 800ec54:	4608      	mov	r0, r1
 800ec56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <__sfputs_r>:
 800ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5e:	4606      	mov	r6, r0
 800ec60:	460f      	mov	r7, r1
 800ec62:	4614      	mov	r4, r2
 800ec64:	18d5      	adds	r5, r2, r3
 800ec66:	42ac      	cmp	r4, r5
 800ec68:	d101      	bne.n	800ec6e <__sfputs_r+0x12>
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	e007      	b.n	800ec7e <__sfputs_r+0x22>
 800ec6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec72:	463a      	mov	r2, r7
 800ec74:	4630      	mov	r0, r6
 800ec76:	f7ff ffda 	bl	800ec2e <__sfputc_r>
 800ec7a:	1c43      	adds	r3, r0, #1
 800ec7c:	d1f3      	bne.n	800ec66 <__sfputs_r+0xa>
 800ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec80 <_vfiprintf_r>:
 800ec80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	460d      	mov	r5, r1
 800ec86:	b09d      	sub	sp, #116	@ 0x74
 800ec88:	4614      	mov	r4, r2
 800ec8a:	4698      	mov	r8, r3
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	b118      	cbz	r0, 800ec98 <_vfiprintf_r+0x18>
 800ec90:	6a03      	ldr	r3, [r0, #32]
 800ec92:	b90b      	cbnz	r3, 800ec98 <_vfiprintf_r+0x18>
 800ec94:	f7fd fc28 	bl	800c4e8 <__sinit>
 800ec98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec9a:	07d9      	lsls	r1, r3, #31
 800ec9c:	d405      	bmi.n	800ecaa <_vfiprintf_r+0x2a>
 800ec9e:	89ab      	ldrh	r3, [r5, #12]
 800eca0:	059a      	lsls	r2, r3, #22
 800eca2:	d402      	bmi.n	800ecaa <_vfiprintf_r+0x2a>
 800eca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eca6:	f7fd fda4 	bl	800c7f2 <__retarget_lock_acquire_recursive>
 800ecaa:	89ab      	ldrh	r3, [r5, #12]
 800ecac:	071b      	lsls	r3, r3, #28
 800ecae:	d501      	bpl.n	800ecb4 <_vfiprintf_r+0x34>
 800ecb0:	692b      	ldr	r3, [r5, #16]
 800ecb2:	b99b      	cbnz	r3, 800ecdc <_vfiprintf_r+0x5c>
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f000 f938 	bl	800ef2c <__swsetup_r>
 800ecbc:	b170      	cbz	r0, 800ecdc <_vfiprintf_r+0x5c>
 800ecbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecc0:	07dc      	lsls	r4, r3, #31
 800ecc2:	d504      	bpl.n	800ecce <_vfiprintf_r+0x4e>
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc8:	b01d      	add	sp, #116	@ 0x74
 800ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecce:	89ab      	ldrh	r3, [r5, #12]
 800ecd0:	0598      	lsls	r0, r3, #22
 800ecd2:	d4f7      	bmi.n	800ecc4 <_vfiprintf_r+0x44>
 800ecd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecd6:	f7fd fd8d 	bl	800c7f4 <__retarget_lock_release_recursive>
 800ecda:	e7f3      	b.n	800ecc4 <_vfiprintf_r+0x44>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9309      	str	r3, [sp, #36]	@ 0x24
 800ece0:	2320      	movs	r3, #32
 800ece2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ece6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecea:	2330      	movs	r3, #48	@ 0x30
 800ecec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee9c <_vfiprintf_r+0x21c>
 800ecf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecf4:	f04f 0901 	mov.w	r9, #1
 800ecf8:	4623      	mov	r3, r4
 800ecfa:	469a      	mov	sl, r3
 800ecfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed00:	b10a      	cbz	r2, 800ed06 <_vfiprintf_r+0x86>
 800ed02:	2a25      	cmp	r2, #37	@ 0x25
 800ed04:	d1f9      	bne.n	800ecfa <_vfiprintf_r+0x7a>
 800ed06:	ebba 0b04 	subs.w	fp, sl, r4
 800ed0a:	d00b      	beq.n	800ed24 <_vfiprintf_r+0xa4>
 800ed0c:	465b      	mov	r3, fp
 800ed0e:	4622      	mov	r2, r4
 800ed10:	4629      	mov	r1, r5
 800ed12:	4630      	mov	r0, r6
 800ed14:	f7ff ffa2 	bl	800ec5c <__sfputs_r>
 800ed18:	3001      	adds	r0, #1
 800ed1a:	f000 80a7 	beq.w	800ee6c <_vfiprintf_r+0x1ec>
 800ed1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed20:	445a      	add	r2, fp
 800ed22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed24:	f89a 3000 	ldrb.w	r3, [sl]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 809f 	beq.w	800ee6c <_vfiprintf_r+0x1ec>
 800ed2e:	2300      	movs	r3, #0
 800ed30:	f04f 32ff 	mov.w	r2, #4294967295
 800ed34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed38:	f10a 0a01 	add.w	sl, sl, #1
 800ed3c:	9304      	str	r3, [sp, #16]
 800ed3e:	9307      	str	r3, [sp, #28]
 800ed40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed44:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed46:	4654      	mov	r4, sl
 800ed48:	2205      	movs	r2, #5
 800ed4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed4e:	4853      	ldr	r0, [pc, #332]	@ (800ee9c <_vfiprintf_r+0x21c>)
 800ed50:	f7f1 fa3e 	bl	80001d0 <memchr>
 800ed54:	9a04      	ldr	r2, [sp, #16]
 800ed56:	b9d8      	cbnz	r0, 800ed90 <_vfiprintf_r+0x110>
 800ed58:	06d1      	lsls	r1, r2, #27
 800ed5a:	bf44      	itt	mi
 800ed5c:	2320      	movmi	r3, #32
 800ed5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed62:	0713      	lsls	r3, r2, #28
 800ed64:	bf44      	itt	mi
 800ed66:	232b      	movmi	r3, #43	@ 0x2b
 800ed68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed72:	d015      	beq.n	800eda0 <_vfiprintf_r+0x120>
 800ed74:	9a07      	ldr	r2, [sp, #28]
 800ed76:	4654      	mov	r4, sl
 800ed78:	2000      	movs	r0, #0
 800ed7a:	f04f 0c0a 	mov.w	ip, #10
 800ed7e:	4621      	mov	r1, r4
 800ed80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed84:	3b30      	subs	r3, #48	@ 0x30
 800ed86:	2b09      	cmp	r3, #9
 800ed88:	d94b      	bls.n	800ee22 <_vfiprintf_r+0x1a2>
 800ed8a:	b1b0      	cbz	r0, 800edba <_vfiprintf_r+0x13a>
 800ed8c:	9207      	str	r2, [sp, #28]
 800ed8e:	e014      	b.n	800edba <_vfiprintf_r+0x13a>
 800ed90:	eba0 0308 	sub.w	r3, r0, r8
 800ed94:	fa09 f303 	lsl.w	r3, r9, r3
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	9304      	str	r3, [sp, #16]
 800ed9c:	46a2      	mov	sl, r4
 800ed9e:	e7d2      	b.n	800ed46 <_vfiprintf_r+0xc6>
 800eda0:	9b03      	ldr	r3, [sp, #12]
 800eda2:	1d19      	adds	r1, r3, #4
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	9103      	str	r1, [sp, #12]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	bfbb      	ittet	lt
 800edac:	425b      	neglt	r3, r3
 800edae:	f042 0202 	orrlt.w	r2, r2, #2
 800edb2:	9307      	strge	r3, [sp, #28]
 800edb4:	9307      	strlt	r3, [sp, #28]
 800edb6:	bfb8      	it	lt
 800edb8:	9204      	strlt	r2, [sp, #16]
 800edba:	7823      	ldrb	r3, [r4, #0]
 800edbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800edbe:	d10a      	bne.n	800edd6 <_vfiprintf_r+0x156>
 800edc0:	7863      	ldrb	r3, [r4, #1]
 800edc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800edc4:	d132      	bne.n	800ee2c <_vfiprintf_r+0x1ac>
 800edc6:	9b03      	ldr	r3, [sp, #12]
 800edc8:	1d1a      	adds	r2, r3, #4
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	9203      	str	r2, [sp, #12]
 800edce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800edd2:	3402      	adds	r4, #2
 800edd4:	9305      	str	r3, [sp, #20]
 800edd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eeac <_vfiprintf_r+0x22c>
 800edda:	7821      	ldrb	r1, [r4, #0]
 800eddc:	2203      	movs	r2, #3
 800edde:	4650      	mov	r0, sl
 800ede0:	f7f1 f9f6 	bl	80001d0 <memchr>
 800ede4:	b138      	cbz	r0, 800edf6 <_vfiprintf_r+0x176>
 800ede6:	9b04      	ldr	r3, [sp, #16]
 800ede8:	eba0 000a 	sub.w	r0, r0, sl
 800edec:	2240      	movs	r2, #64	@ 0x40
 800edee:	4082      	lsls	r2, r0
 800edf0:	4313      	orrs	r3, r2
 800edf2:	3401      	adds	r4, #1
 800edf4:	9304      	str	r3, [sp, #16]
 800edf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfa:	4829      	ldr	r0, [pc, #164]	@ (800eea0 <_vfiprintf_r+0x220>)
 800edfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee00:	2206      	movs	r2, #6
 800ee02:	f7f1 f9e5 	bl	80001d0 <memchr>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d03f      	beq.n	800ee8a <_vfiprintf_r+0x20a>
 800ee0a:	4b26      	ldr	r3, [pc, #152]	@ (800eea4 <_vfiprintf_r+0x224>)
 800ee0c:	bb1b      	cbnz	r3, 800ee56 <_vfiprintf_r+0x1d6>
 800ee0e:	9b03      	ldr	r3, [sp, #12]
 800ee10:	3307      	adds	r3, #7
 800ee12:	f023 0307 	bic.w	r3, r3, #7
 800ee16:	3308      	adds	r3, #8
 800ee18:	9303      	str	r3, [sp, #12]
 800ee1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee1c:	443b      	add	r3, r7
 800ee1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee20:	e76a      	b.n	800ecf8 <_vfiprintf_r+0x78>
 800ee22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee26:	460c      	mov	r4, r1
 800ee28:	2001      	movs	r0, #1
 800ee2a:	e7a8      	b.n	800ed7e <_vfiprintf_r+0xfe>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	3401      	adds	r4, #1
 800ee30:	9305      	str	r3, [sp, #20]
 800ee32:	4619      	mov	r1, r3
 800ee34:	f04f 0c0a 	mov.w	ip, #10
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee3e:	3a30      	subs	r2, #48	@ 0x30
 800ee40:	2a09      	cmp	r2, #9
 800ee42:	d903      	bls.n	800ee4c <_vfiprintf_r+0x1cc>
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d0c6      	beq.n	800edd6 <_vfiprintf_r+0x156>
 800ee48:	9105      	str	r1, [sp, #20]
 800ee4a:	e7c4      	b.n	800edd6 <_vfiprintf_r+0x156>
 800ee4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee50:	4604      	mov	r4, r0
 800ee52:	2301      	movs	r3, #1
 800ee54:	e7f0      	b.n	800ee38 <_vfiprintf_r+0x1b8>
 800ee56:	ab03      	add	r3, sp, #12
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	462a      	mov	r2, r5
 800ee5c:	4b12      	ldr	r3, [pc, #72]	@ (800eea8 <_vfiprintf_r+0x228>)
 800ee5e:	a904      	add	r1, sp, #16
 800ee60:	4630      	mov	r0, r6
 800ee62:	f7fc fce9 	bl	800b838 <_printf_float>
 800ee66:	4607      	mov	r7, r0
 800ee68:	1c78      	adds	r0, r7, #1
 800ee6a:	d1d6      	bne.n	800ee1a <_vfiprintf_r+0x19a>
 800ee6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee6e:	07d9      	lsls	r1, r3, #31
 800ee70:	d405      	bmi.n	800ee7e <_vfiprintf_r+0x1fe>
 800ee72:	89ab      	ldrh	r3, [r5, #12]
 800ee74:	059a      	lsls	r2, r3, #22
 800ee76:	d402      	bmi.n	800ee7e <_vfiprintf_r+0x1fe>
 800ee78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee7a:	f7fd fcbb 	bl	800c7f4 <__retarget_lock_release_recursive>
 800ee7e:	89ab      	ldrh	r3, [r5, #12]
 800ee80:	065b      	lsls	r3, r3, #25
 800ee82:	f53f af1f 	bmi.w	800ecc4 <_vfiprintf_r+0x44>
 800ee86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee88:	e71e      	b.n	800ecc8 <_vfiprintf_r+0x48>
 800ee8a:	ab03      	add	r3, sp, #12
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	462a      	mov	r2, r5
 800ee90:	4b05      	ldr	r3, [pc, #20]	@ (800eea8 <_vfiprintf_r+0x228>)
 800ee92:	a904      	add	r1, sp, #16
 800ee94:	4630      	mov	r0, r6
 800ee96:	f7fc ff67 	bl	800bd68 <_printf_i>
 800ee9a:	e7e4      	b.n	800ee66 <_vfiprintf_r+0x1e6>
 800ee9c:	08011780 	.word	0x08011780
 800eea0:	0801178a 	.word	0x0801178a
 800eea4:	0800b839 	.word	0x0800b839
 800eea8:	0800ec5d 	.word	0x0800ec5d
 800eeac:	08011786 	.word	0x08011786

0800eeb0 <__swbuf_r>:
 800eeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb2:	460e      	mov	r6, r1
 800eeb4:	4614      	mov	r4, r2
 800eeb6:	4605      	mov	r5, r0
 800eeb8:	b118      	cbz	r0, 800eec2 <__swbuf_r+0x12>
 800eeba:	6a03      	ldr	r3, [r0, #32]
 800eebc:	b90b      	cbnz	r3, 800eec2 <__swbuf_r+0x12>
 800eebe:	f7fd fb13 	bl	800c4e8 <__sinit>
 800eec2:	69a3      	ldr	r3, [r4, #24]
 800eec4:	60a3      	str	r3, [r4, #8]
 800eec6:	89a3      	ldrh	r3, [r4, #12]
 800eec8:	071a      	lsls	r2, r3, #28
 800eeca:	d501      	bpl.n	800eed0 <__swbuf_r+0x20>
 800eecc:	6923      	ldr	r3, [r4, #16]
 800eece:	b943      	cbnz	r3, 800eee2 <__swbuf_r+0x32>
 800eed0:	4621      	mov	r1, r4
 800eed2:	4628      	mov	r0, r5
 800eed4:	f000 f82a 	bl	800ef2c <__swsetup_r>
 800eed8:	b118      	cbz	r0, 800eee2 <__swbuf_r+0x32>
 800eeda:	f04f 37ff 	mov.w	r7, #4294967295
 800eede:	4638      	mov	r0, r7
 800eee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee2:	6823      	ldr	r3, [r4, #0]
 800eee4:	6922      	ldr	r2, [r4, #16]
 800eee6:	1a98      	subs	r0, r3, r2
 800eee8:	6963      	ldr	r3, [r4, #20]
 800eeea:	b2f6      	uxtb	r6, r6
 800eeec:	4283      	cmp	r3, r0
 800eeee:	4637      	mov	r7, r6
 800eef0:	dc05      	bgt.n	800eefe <__swbuf_r+0x4e>
 800eef2:	4621      	mov	r1, r4
 800eef4:	4628      	mov	r0, r5
 800eef6:	f7ff fded 	bl	800ead4 <_fflush_r>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d1ed      	bne.n	800eeda <__swbuf_r+0x2a>
 800eefe:	68a3      	ldr	r3, [r4, #8]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	60a3      	str	r3, [r4, #8]
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	6022      	str	r2, [r4, #0]
 800ef0a:	701e      	strb	r6, [r3, #0]
 800ef0c:	6962      	ldr	r2, [r4, #20]
 800ef0e:	1c43      	adds	r3, r0, #1
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d004      	beq.n	800ef1e <__swbuf_r+0x6e>
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	07db      	lsls	r3, r3, #31
 800ef18:	d5e1      	bpl.n	800eede <__swbuf_r+0x2e>
 800ef1a:	2e0a      	cmp	r6, #10
 800ef1c:	d1df      	bne.n	800eede <__swbuf_r+0x2e>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7ff fdd7 	bl	800ead4 <_fflush_r>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d0d9      	beq.n	800eede <__swbuf_r+0x2e>
 800ef2a:	e7d6      	b.n	800eeda <__swbuf_r+0x2a>

0800ef2c <__swsetup_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4b29      	ldr	r3, [pc, #164]	@ (800efd4 <__swsetup_r+0xa8>)
 800ef30:	4605      	mov	r5, r0
 800ef32:	6818      	ldr	r0, [r3, #0]
 800ef34:	460c      	mov	r4, r1
 800ef36:	b118      	cbz	r0, 800ef40 <__swsetup_r+0x14>
 800ef38:	6a03      	ldr	r3, [r0, #32]
 800ef3a:	b90b      	cbnz	r3, 800ef40 <__swsetup_r+0x14>
 800ef3c:	f7fd fad4 	bl	800c4e8 <__sinit>
 800ef40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef44:	0719      	lsls	r1, r3, #28
 800ef46:	d422      	bmi.n	800ef8e <__swsetup_r+0x62>
 800ef48:	06da      	lsls	r2, r3, #27
 800ef4a:	d407      	bmi.n	800ef5c <__swsetup_r+0x30>
 800ef4c:	2209      	movs	r2, #9
 800ef4e:	602a      	str	r2, [r5, #0]
 800ef50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef54:	81a3      	strh	r3, [r4, #12]
 800ef56:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5a:	e033      	b.n	800efc4 <__swsetup_r+0x98>
 800ef5c:	0758      	lsls	r0, r3, #29
 800ef5e:	d512      	bpl.n	800ef86 <__swsetup_r+0x5a>
 800ef60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef62:	b141      	cbz	r1, 800ef76 <__swsetup_r+0x4a>
 800ef64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef68:	4299      	cmp	r1, r3
 800ef6a:	d002      	beq.n	800ef72 <__swsetup_r+0x46>
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f7fe facb 	bl	800d508 <_free_r>
 800ef72:	2300      	movs	r3, #0
 800ef74:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef7c:	81a3      	strh	r3, [r4, #12]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	6063      	str	r3, [r4, #4]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	6023      	str	r3, [r4, #0]
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f043 0308 	orr.w	r3, r3, #8
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	b94b      	cbnz	r3, 800efa6 <__swsetup_r+0x7a>
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef9c:	d003      	beq.n	800efa6 <__swsetup_r+0x7a>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4628      	mov	r0, r5
 800efa2:	f000 f88b 	bl	800f0bc <__smakebuf_r>
 800efa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efaa:	f013 0201 	ands.w	r2, r3, #1
 800efae:	d00a      	beq.n	800efc6 <__swsetup_r+0x9a>
 800efb0:	2200      	movs	r2, #0
 800efb2:	60a2      	str	r2, [r4, #8]
 800efb4:	6962      	ldr	r2, [r4, #20]
 800efb6:	4252      	negs	r2, r2
 800efb8:	61a2      	str	r2, [r4, #24]
 800efba:	6922      	ldr	r2, [r4, #16]
 800efbc:	b942      	cbnz	r2, 800efd0 <__swsetup_r+0xa4>
 800efbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800efc2:	d1c5      	bne.n	800ef50 <__swsetup_r+0x24>
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
 800efc6:	0799      	lsls	r1, r3, #30
 800efc8:	bf58      	it	pl
 800efca:	6962      	ldrpl	r2, [r4, #20]
 800efcc:	60a2      	str	r2, [r4, #8]
 800efce:	e7f4      	b.n	800efba <__swsetup_r+0x8e>
 800efd0:	2000      	movs	r0, #0
 800efd2:	e7f7      	b.n	800efc4 <__swsetup_r+0x98>
 800efd4:	20000250 	.word	0x20000250

0800efd8 <_raise_r>:
 800efd8:	291f      	cmp	r1, #31
 800efda:	b538      	push	{r3, r4, r5, lr}
 800efdc:	4605      	mov	r5, r0
 800efde:	460c      	mov	r4, r1
 800efe0:	d904      	bls.n	800efec <_raise_r+0x14>
 800efe2:	2316      	movs	r3, #22
 800efe4:	6003      	str	r3, [r0, #0]
 800efe6:	f04f 30ff 	mov.w	r0, #4294967295
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efee:	b112      	cbz	r2, 800eff6 <_raise_r+0x1e>
 800eff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eff4:	b94b      	cbnz	r3, 800f00a <_raise_r+0x32>
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 f830 	bl	800f05c <_getpid_r>
 800effc:	4622      	mov	r2, r4
 800effe:	4601      	mov	r1, r0
 800f000:	4628      	mov	r0, r5
 800f002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f006:	f000 b817 	b.w	800f038 <_kill_r>
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d00a      	beq.n	800f024 <_raise_r+0x4c>
 800f00e:	1c59      	adds	r1, r3, #1
 800f010:	d103      	bne.n	800f01a <_raise_r+0x42>
 800f012:	2316      	movs	r3, #22
 800f014:	6003      	str	r3, [r0, #0]
 800f016:	2001      	movs	r0, #1
 800f018:	e7e7      	b.n	800efea <_raise_r+0x12>
 800f01a:	2100      	movs	r1, #0
 800f01c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f020:	4620      	mov	r0, r4
 800f022:	4798      	blx	r3
 800f024:	2000      	movs	r0, #0
 800f026:	e7e0      	b.n	800efea <_raise_r+0x12>

0800f028 <raise>:
 800f028:	4b02      	ldr	r3, [pc, #8]	@ (800f034 <raise+0xc>)
 800f02a:	4601      	mov	r1, r0
 800f02c:	6818      	ldr	r0, [r3, #0]
 800f02e:	f7ff bfd3 	b.w	800efd8 <_raise_r>
 800f032:	bf00      	nop
 800f034:	20000250 	.word	0x20000250

0800f038 <_kill_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	4d07      	ldr	r5, [pc, #28]	@ (800f058 <_kill_r+0x20>)
 800f03c:	2300      	movs	r3, #0
 800f03e:	4604      	mov	r4, r0
 800f040:	4608      	mov	r0, r1
 800f042:	4611      	mov	r1, r2
 800f044:	602b      	str	r3, [r5, #0]
 800f046:	f7f7 fe89 	bl	8006d5c <_kill>
 800f04a:	1c43      	adds	r3, r0, #1
 800f04c:	d102      	bne.n	800f054 <_kill_r+0x1c>
 800f04e:	682b      	ldr	r3, [r5, #0]
 800f050:	b103      	cbz	r3, 800f054 <_kill_r+0x1c>
 800f052:	6023      	str	r3, [r4, #0]
 800f054:	bd38      	pop	{r3, r4, r5, pc}
 800f056:	bf00      	nop
 800f058:	20000854 	.word	0x20000854

0800f05c <_getpid_r>:
 800f05c:	f7f7 be76 	b.w	8006d4c <_getpid>

0800f060 <_malloc_usable_size_r>:
 800f060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f064:	1f18      	subs	r0, r3, #4
 800f066:	2b00      	cmp	r3, #0
 800f068:	bfbc      	itt	lt
 800f06a:	580b      	ldrlt	r3, [r1, r0]
 800f06c:	18c0      	addlt	r0, r0, r3
 800f06e:	4770      	bx	lr

0800f070 <__swhatbuf_r>:
 800f070:	b570      	push	{r4, r5, r6, lr}
 800f072:	460c      	mov	r4, r1
 800f074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f078:	2900      	cmp	r1, #0
 800f07a:	b096      	sub	sp, #88	@ 0x58
 800f07c:	4615      	mov	r5, r2
 800f07e:	461e      	mov	r6, r3
 800f080:	da0d      	bge.n	800f09e <__swhatbuf_r+0x2e>
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f088:	f04f 0100 	mov.w	r1, #0
 800f08c:	bf14      	ite	ne
 800f08e:	2340      	movne	r3, #64	@ 0x40
 800f090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f094:	2000      	movs	r0, #0
 800f096:	6031      	str	r1, [r6, #0]
 800f098:	602b      	str	r3, [r5, #0]
 800f09a:	b016      	add	sp, #88	@ 0x58
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
 800f09e:	466a      	mov	r2, sp
 800f0a0:	f000 f848 	bl	800f134 <_fstat_r>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	dbec      	blt.n	800f082 <__swhatbuf_r+0x12>
 800f0a8:	9901      	ldr	r1, [sp, #4]
 800f0aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0b2:	4259      	negs	r1, r3
 800f0b4:	4159      	adcs	r1, r3
 800f0b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0ba:	e7eb      	b.n	800f094 <__swhatbuf_r+0x24>

0800f0bc <__smakebuf_r>:
 800f0bc:	898b      	ldrh	r3, [r1, #12]
 800f0be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0c0:	079d      	lsls	r5, r3, #30
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	d507      	bpl.n	800f0d8 <__smakebuf_r+0x1c>
 800f0c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	6123      	str	r3, [r4, #16]
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	6163      	str	r3, [r4, #20]
 800f0d4:	b003      	add	sp, #12
 800f0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d8:	ab01      	add	r3, sp, #4
 800f0da:	466a      	mov	r2, sp
 800f0dc:	f7ff ffc8 	bl	800f070 <__swhatbuf_r>
 800f0e0:	9f00      	ldr	r7, [sp, #0]
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	f7fe fdbc 	bl	800dc64 <_malloc_r>
 800f0ec:	b948      	cbnz	r0, 800f102 <__smakebuf_r+0x46>
 800f0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f2:	059a      	lsls	r2, r3, #22
 800f0f4:	d4ee      	bmi.n	800f0d4 <__smakebuf_r+0x18>
 800f0f6:	f023 0303 	bic.w	r3, r3, #3
 800f0fa:	f043 0302 	orr.w	r3, r3, #2
 800f0fe:	81a3      	strh	r3, [r4, #12]
 800f100:	e7e2      	b.n	800f0c8 <__smakebuf_r+0xc>
 800f102:	89a3      	ldrh	r3, [r4, #12]
 800f104:	6020      	str	r0, [r4, #0]
 800f106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f10a:	81a3      	strh	r3, [r4, #12]
 800f10c:	9b01      	ldr	r3, [sp, #4]
 800f10e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f112:	b15b      	cbz	r3, 800f12c <__smakebuf_r+0x70>
 800f114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f118:	4630      	mov	r0, r6
 800f11a:	f000 f81d 	bl	800f158 <_isatty_r>
 800f11e:	b128      	cbz	r0, 800f12c <__smakebuf_r+0x70>
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	f023 0303 	bic.w	r3, r3, #3
 800f126:	f043 0301 	orr.w	r3, r3, #1
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	89a3      	ldrh	r3, [r4, #12]
 800f12e:	431d      	orrs	r5, r3
 800f130:	81a5      	strh	r5, [r4, #12]
 800f132:	e7cf      	b.n	800f0d4 <__smakebuf_r+0x18>

0800f134 <_fstat_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d07      	ldr	r5, [pc, #28]	@ (800f154 <_fstat_r+0x20>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	4611      	mov	r1, r2
 800f140:	602b      	str	r3, [r5, #0]
 800f142:	f7f7 fe6b 	bl	8006e1c <_fstat>
 800f146:	1c43      	adds	r3, r0, #1
 800f148:	d102      	bne.n	800f150 <_fstat_r+0x1c>
 800f14a:	682b      	ldr	r3, [r5, #0]
 800f14c:	b103      	cbz	r3, 800f150 <_fstat_r+0x1c>
 800f14e:	6023      	str	r3, [r4, #0]
 800f150:	bd38      	pop	{r3, r4, r5, pc}
 800f152:	bf00      	nop
 800f154:	20000854 	.word	0x20000854

0800f158 <_isatty_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d06      	ldr	r5, [pc, #24]	@ (800f174 <_isatty_r+0x1c>)
 800f15c:	2300      	movs	r3, #0
 800f15e:	4604      	mov	r4, r0
 800f160:	4608      	mov	r0, r1
 800f162:	602b      	str	r3, [r5, #0]
 800f164:	f7f7 fe6a 	bl	8006e3c <_isatty>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	d102      	bne.n	800f172 <_isatty_r+0x1a>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	b103      	cbz	r3, 800f172 <_isatty_r+0x1a>
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	20000854 	.word	0x20000854

0800f178 <atan2>:
 800f178:	f000 bbc6 	b.w	800f908 <__ieee754_atan2>
 800f17c:	0000      	movs	r0, r0
	...

0800f180 <hypot>:
 800f180:	b508      	push	{r3, lr}
 800f182:	ed2d 8b06 	vpush	{d8-d10}
 800f186:	eeb0 aa40 	vmov.f32	s20, s0
 800f18a:	eef0 aa60 	vmov.f32	s21, s1
 800f18e:	eeb0 9a41 	vmov.f32	s18, s2
 800f192:	eef0 9a61 	vmov.f32	s19, s3
 800f196:	f000 fc7d 	bl	800fa94 <__ieee754_hypot>
 800f19a:	eeb0 8a40 	vmov.f32	s16, s0
 800f19e:	eef0 8a60 	vmov.f32	s17, s1
 800f1a2:	f000 f8c9 	bl	800f338 <finite>
 800f1a6:	b998      	cbnz	r0, 800f1d0 <hypot+0x50>
 800f1a8:	eeb0 0a4a 	vmov.f32	s0, s20
 800f1ac:	eef0 0a6a 	vmov.f32	s1, s21
 800f1b0:	f000 f8c2 	bl	800f338 <finite>
 800f1b4:	b160      	cbz	r0, 800f1d0 <hypot+0x50>
 800f1b6:	eeb0 0a49 	vmov.f32	s0, s18
 800f1ba:	eef0 0a69 	vmov.f32	s1, s19
 800f1be:	f000 f8bb 	bl	800f338 <finite>
 800f1c2:	b128      	cbz	r0, 800f1d0 <hypot+0x50>
 800f1c4:	f7fd faea 	bl	800c79c <__errno>
 800f1c8:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800f1e0 <hypot+0x60>
 800f1cc:	2322      	movs	r3, #34	@ 0x22
 800f1ce:	6003      	str	r3, [r0, #0]
 800f1d0:	eeb0 0a48 	vmov.f32	s0, s16
 800f1d4:	eef0 0a68 	vmov.f32	s1, s17
 800f1d8:	ecbd 8b06 	vpop	{d8-d10}
 800f1dc:	bd08      	pop	{r3, pc}
 800f1de:	bf00      	nop
 800f1e0:	00000000 	.word	0x00000000
 800f1e4:	7ff00000 	.word	0x7ff00000

0800f1e8 <cos>:
 800f1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1ea:	ec53 2b10 	vmov	r2, r3, d0
 800f1ee:	4826      	ldr	r0, [pc, #152]	@ (800f288 <cos+0xa0>)
 800f1f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f1f4:	4281      	cmp	r1, r0
 800f1f6:	d806      	bhi.n	800f206 <cos+0x1e>
 800f1f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f280 <cos+0x98>
 800f1fc:	b005      	add	sp, #20
 800f1fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800f202:	f000 b9fd 	b.w	800f600 <__kernel_cos>
 800f206:	4821      	ldr	r0, [pc, #132]	@ (800f28c <cos+0xa4>)
 800f208:	4281      	cmp	r1, r0
 800f20a:	d908      	bls.n	800f21e <cos+0x36>
 800f20c:	4610      	mov	r0, r2
 800f20e:	4619      	mov	r1, r3
 800f210:	f7f1 f83a 	bl	8000288 <__aeabi_dsub>
 800f214:	ec41 0b10 	vmov	d0, r0, r1
 800f218:	b005      	add	sp, #20
 800f21a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f21e:	4668      	mov	r0, sp
 800f220:	f000 fd4e 	bl	800fcc0 <__ieee754_rem_pio2>
 800f224:	f000 0003 	and.w	r0, r0, #3
 800f228:	2801      	cmp	r0, #1
 800f22a:	d00b      	beq.n	800f244 <cos+0x5c>
 800f22c:	2802      	cmp	r0, #2
 800f22e:	d015      	beq.n	800f25c <cos+0x74>
 800f230:	b9d8      	cbnz	r0, 800f26a <cos+0x82>
 800f232:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f236:	ed9d 0b00 	vldr	d0, [sp]
 800f23a:	f000 f9e1 	bl	800f600 <__kernel_cos>
 800f23e:	ec51 0b10 	vmov	r0, r1, d0
 800f242:	e7e7      	b.n	800f214 <cos+0x2c>
 800f244:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f248:	ed9d 0b00 	vldr	d0, [sp]
 800f24c:	f000 faa0 	bl	800f790 <__kernel_sin>
 800f250:	ec53 2b10 	vmov	r2, r3, d0
 800f254:	4610      	mov	r0, r2
 800f256:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f25a:	e7db      	b.n	800f214 <cos+0x2c>
 800f25c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f260:	ed9d 0b00 	vldr	d0, [sp]
 800f264:	f000 f9cc 	bl	800f600 <__kernel_cos>
 800f268:	e7f2      	b.n	800f250 <cos+0x68>
 800f26a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f26e:	ed9d 0b00 	vldr	d0, [sp]
 800f272:	2001      	movs	r0, #1
 800f274:	f000 fa8c 	bl	800f790 <__kernel_sin>
 800f278:	e7e1      	b.n	800f23e <cos+0x56>
 800f27a:	bf00      	nop
 800f27c:	f3af 8000 	nop.w
	...
 800f288:	3fe921fb 	.word	0x3fe921fb
 800f28c:	7fefffff 	.word	0x7fefffff

0800f290 <sin>:
 800f290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f292:	ec53 2b10 	vmov	r2, r3, d0
 800f296:	4826      	ldr	r0, [pc, #152]	@ (800f330 <sin+0xa0>)
 800f298:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f29c:	4281      	cmp	r1, r0
 800f29e:	d807      	bhi.n	800f2b0 <sin+0x20>
 800f2a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f328 <sin+0x98>
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	b005      	add	sp, #20
 800f2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2ac:	f000 ba70 	b.w	800f790 <__kernel_sin>
 800f2b0:	4820      	ldr	r0, [pc, #128]	@ (800f334 <sin+0xa4>)
 800f2b2:	4281      	cmp	r1, r0
 800f2b4:	d908      	bls.n	800f2c8 <sin+0x38>
 800f2b6:	4610      	mov	r0, r2
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	f7f0 ffe5 	bl	8000288 <__aeabi_dsub>
 800f2be:	ec41 0b10 	vmov	d0, r0, r1
 800f2c2:	b005      	add	sp, #20
 800f2c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2c8:	4668      	mov	r0, sp
 800f2ca:	f000 fcf9 	bl	800fcc0 <__ieee754_rem_pio2>
 800f2ce:	f000 0003 	and.w	r0, r0, #3
 800f2d2:	2801      	cmp	r0, #1
 800f2d4:	d00c      	beq.n	800f2f0 <sin+0x60>
 800f2d6:	2802      	cmp	r0, #2
 800f2d8:	d011      	beq.n	800f2fe <sin+0x6e>
 800f2da:	b9e8      	cbnz	r0, 800f318 <sin+0x88>
 800f2dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2e0:	ed9d 0b00 	vldr	d0, [sp]
 800f2e4:	2001      	movs	r0, #1
 800f2e6:	f000 fa53 	bl	800f790 <__kernel_sin>
 800f2ea:	ec51 0b10 	vmov	r0, r1, d0
 800f2ee:	e7e6      	b.n	800f2be <sin+0x2e>
 800f2f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2f4:	ed9d 0b00 	vldr	d0, [sp]
 800f2f8:	f000 f982 	bl	800f600 <__kernel_cos>
 800f2fc:	e7f5      	b.n	800f2ea <sin+0x5a>
 800f2fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f302:	ed9d 0b00 	vldr	d0, [sp]
 800f306:	2001      	movs	r0, #1
 800f308:	f000 fa42 	bl	800f790 <__kernel_sin>
 800f30c:	ec53 2b10 	vmov	r2, r3, d0
 800f310:	4610      	mov	r0, r2
 800f312:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f316:	e7d2      	b.n	800f2be <sin+0x2e>
 800f318:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f31c:	ed9d 0b00 	vldr	d0, [sp]
 800f320:	f000 f96e 	bl	800f600 <__kernel_cos>
 800f324:	e7f2      	b.n	800f30c <sin+0x7c>
 800f326:	bf00      	nop
	...
 800f330:	3fe921fb 	.word	0x3fe921fb
 800f334:	7fefffff 	.word	0x7fefffff

0800f338 <finite>:
 800f338:	b082      	sub	sp, #8
 800f33a:	ed8d 0b00 	vstr	d0, [sp]
 800f33e:	9801      	ldr	r0, [sp, #4]
 800f340:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f344:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f348:	0fc0      	lsrs	r0, r0, #31
 800f34a:	b002      	add	sp, #8
 800f34c:	4770      	bx	lr

0800f34e <fmax>:
 800f34e:	b508      	push	{r3, lr}
 800f350:	ed2d 8b04 	vpush	{d8-d9}
 800f354:	eeb0 8a40 	vmov.f32	s16, s0
 800f358:	eef0 8a60 	vmov.f32	s17, s1
 800f35c:	eeb0 9a41 	vmov.f32	s18, s2
 800f360:	eef0 9a61 	vmov.f32	s19, s3
 800f364:	f000 f848 	bl	800f3f8 <__fpclassifyd>
 800f368:	b950      	cbnz	r0, 800f380 <fmax+0x32>
 800f36a:	eeb0 8a49 	vmov.f32	s16, s18
 800f36e:	eef0 8a69 	vmov.f32	s17, s19
 800f372:	eeb0 0a48 	vmov.f32	s0, s16
 800f376:	eef0 0a68 	vmov.f32	s1, s17
 800f37a:	ecbd 8b04 	vpop	{d8-d9}
 800f37e:	bd08      	pop	{r3, pc}
 800f380:	eeb0 0a49 	vmov.f32	s0, s18
 800f384:	eef0 0a69 	vmov.f32	s1, s19
 800f388:	f000 f836 	bl	800f3f8 <__fpclassifyd>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0f0      	beq.n	800f372 <fmax+0x24>
 800f390:	ec53 2b19 	vmov	r2, r3, d9
 800f394:	ec51 0b18 	vmov	r0, r1, d8
 800f398:	f7f1 fbbe 	bl	8000b18 <__aeabi_dcmpgt>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d0e4      	beq.n	800f36a <fmax+0x1c>
 800f3a0:	e7e7      	b.n	800f372 <fmax+0x24>

0800f3a2 <fmin>:
 800f3a2:	b508      	push	{r3, lr}
 800f3a4:	ed2d 8b04 	vpush	{d8-d9}
 800f3a8:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ac:	eef0 8a60 	vmov.f32	s17, s1
 800f3b0:	eeb0 9a41 	vmov.f32	s18, s2
 800f3b4:	eef0 9a61 	vmov.f32	s19, s3
 800f3b8:	f000 f81e 	bl	800f3f8 <__fpclassifyd>
 800f3bc:	b950      	cbnz	r0, 800f3d4 <fmin+0x32>
 800f3be:	eeb0 8a49 	vmov.f32	s16, s18
 800f3c2:	eef0 8a69 	vmov.f32	s17, s19
 800f3c6:	eeb0 0a48 	vmov.f32	s0, s16
 800f3ca:	eef0 0a68 	vmov.f32	s1, s17
 800f3ce:	ecbd 8b04 	vpop	{d8-d9}
 800f3d2:	bd08      	pop	{r3, pc}
 800f3d4:	eeb0 0a49 	vmov.f32	s0, s18
 800f3d8:	eef0 0a69 	vmov.f32	s1, s19
 800f3dc:	f000 f80c 	bl	800f3f8 <__fpclassifyd>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d0f0      	beq.n	800f3c6 <fmin+0x24>
 800f3e4:	ec53 2b19 	vmov	r2, r3, d9
 800f3e8:	ec51 0b18 	vmov	r0, r1, d8
 800f3ec:	f7f1 fb76 	bl	8000adc <__aeabi_dcmplt>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d0e4      	beq.n	800f3be <fmin+0x1c>
 800f3f4:	e7e7      	b.n	800f3c6 <fmin+0x24>
	...

0800f3f8 <__fpclassifyd>:
 800f3f8:	ec51 0b10 	vmov	r0, r1, d0
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800f402:	460b      	mov	r3, r1
 800f404:	d019      	beq.n	800f43a <__fpclassifyd+0x42>
 800f406:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800f40a:	490e      	ldr	r1, [pc, #56]	@ (800f444 <__fpclassifyd+0x4c>)
 800f40c:	428a      	cmp	r2, r1
 800f40e:	d90e      	bls.n	800f42e <__fpclassifyd+0x36>
 800f410:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800f414:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800f418:	428a      	cmp	r2, r1
 800f41a:	d908      	bls.n	800f42e <__fpclassifyd+0x36>
 800f41c:	4a0a      	ldr	r2, [pc, #40]	@ (800f448 <__fpclassifyd+0x50>)
 800f41e:	4213      	tst	r3, r2
 800f420:	d007      	beq.n	800f432 <__fpclassifyd+0x3a>
 800f422:	4294      	cmp	r4, r2
 800f424:	d107      	bne.n	800f436 <__fpclassifyd+0x3e>
 800f426:	fab0 f080 	clz	r0, r0
 800f42a:	0940      	lsrs	r0, r0, #5
 800f42c:	bd10      	pop	{r4, pc}
 800f42e:	2004      	movs	r0, #4
 800f430:	e7fc      	b.n	800f42c <__fpclassifyd+0x34>
 800f432:	2003      	movs	r0, #3
 800f434:	e7fa      	b.n	800f42c <__fpclassifyd+0x34>
 800f436:	2000      	movs	r0, #0
 800f438:	e7f8      	b.n	800f42c <__fpclassifyd+0x34>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d1ee      	bne.n	800f41c <__fpclassifyd+0x24>
 800f43e:	2002      	movs	r0, #2
 800f440:	e7f4      	b.n	800f42c <__fpclassifyd+0x34>
 800f442:	bf00      	nop
 800f444:	7fdfffff 	.word	0x7fdfffff
 800f448:	7ff00000 	.word	0x7ff00000

0800f44c <__ieee754_sqrt>:
 800f44c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	4a68      	ldr	r2, [pc, #416]	@ (800f5f4 <__ieee754_sqrt+0x1a8>)
 800f452:	ec55 4b10 	vmov	r4, r5, d0
 800f456:	43aa      	bics	r2, r5
 800f458:	462b      	mov	r3, r5
 800f45a:	4621      	mov	r1, r4
 800f45c:	d110      	bne.n	800f480 <__ieee754_sqrt+0x34>
 800f45e:	4622      	mov	r2, r4
 800f460:	4620      	mov	r0, r4
 800f462:	4629      	mov	r1, r5
 800f464:	f7f1 f8c8 	bl	80005f8 <__aeabi_dmul>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4620      	mov	r0, r4
 800f46e:	4629      	mov	r1, r5
 800f470:	f7f0 ff0c 	bl	800028c <__adddf3>
 800f474:	4604      	mov	r4, r0
 800f476:	460d      	mov	r5, r1
 800f478:	ec45 4b10 	vmov	d0, r4, r5
 800f47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f480:	2d00      	cmp	r5, #0
 800f482:	dc0e      	bgt.n	800f4a2 <__ieee754_sqrt+0x56>
 800f484:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f488:	4322      	orrs	r2, r4
 800f48a:	d0f5      	beq.n	800f478 <__ieee754_sqrt+0x2c>
 800f48c:	b19d      	cbz	r5, 800f4b6 <__ieee754_sqrt+0x6a>
 800f48e:	4622      	mov	r2, r4
 800f490:	4620      	mov	r0, r4
 800f492:	4629      	mov	r1, r5
 800f494:	f7f0 fef8 	bl	8000288 <__aeabi_dsub>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	f7f1 f9d6 	bl	800084c <__aeabi_ddiv>
 800f4a0:	e7e8      	b.n	800f474 <__ieee754_sqrt+0x28>
 800f4a2:	152a      	asrs	r2, r5, #20
 800f4a4:	d115      	bne.n	800f4d2 <__ieee754_sqrt+0x86>
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	e009      	b.n	800f4be <__ieee754_sqrt+0x72>
 800f4aa:	0acb      	lsrs	r3, r1, #11
 800f4ac:	3a15      	subs	r2, #21
 800f4ae:	0549      	lsls	r1, r1, #21
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d0fa      	beq.n	800f4aa <__ieee754_sqrt+0x5e>
 800f4b4:	e7f7      	b.n	800f4a6 <__ieee754_sqrt+0x5a>
 800f4b6:	462a      	mov	r2, r5
 800f4b8:	e7fa      	b.n	800f4b0 <__ieee754_sqrt+0x64>
 800f4ba:	005b      	lsls	r3, r3, #1
 800f4bc:	3001      	adds	r0, #1
 800f4be:	02dc      	lsls	r4, r3, #11
 800f4c0:	d5fb      	bpl.n	800f4ba <__ieee754_sqrt+0x6e>
 800f4c2:	1e44      	subs	r4, r0, #1
 800f4c4:	1b12      	subs	r2, r2, r4
 800f4c6:	f1c0 0420 	rsb	r4, r0, #32
 800f4ca:	fa21 f404 	lsr.w	r4, r1, r4
 800f4ce:	4323      	orrs	r3, r4
 800f4d0:	4081      	lsls	r1, r0
 800f4d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4d6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f4da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4de:	07d2      	lsls	r2, r2, #31
 800f4e0:	bf5c      	itt	pl
 800f4e2:	005b      	lslpl	r3, r3, #1
 800f4e4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f4e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4ec:	bf58      	it	pl
 800f4ee:	0049      	lslpl	r1, r1, #1
 800f4f0:	2600      	movs	r6, #0
 800f4f2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f4f6:	106d      	asrs	r5, r5, #1
 800f4f8:	0049      	lsls	r1, r1, #1
 800f4fa:	2016      	movs	r0, #22
 800f4fc:	4632      	mov	r2, r6
 800f4fe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f502:	1917      	adds	r7, r2, r4
 800f504:	429f      	cmp	r7, r3
 800f506:	bfde      	ittt	le
 800f508:	193a      	addle	r2, r7, r4
 800f50a:	1bdb      	suble	r3, r3, r7
 800f50c:	1936      	addle	r6, r6, r4
 800f50e:	0fcf      	lsrs	r7, r1, #31
 800f510:	3801      	subs	r0, #1
 800f512:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f516:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f51a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f51e:	d1f0      	bne.n	800f502 <__ieee754_sqrt+0xb6>
 800f520:	4604      	mov	r4, r0
 800f522:	2720      	movs	r7, #32
 800f524:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f528:	429a      	cmp	r2, r3
 800f52a:	eb00 0e0c 	add.w	lr, r0, ip
 800f52e:	db02      	blt.n	800f536 <__ieee754_sqrt+0xea>
 800f530:	d113      	bne.n	800f55a <__ieee754_sqrt+0x10e>
 800f532:	458e      	cmp	lr, r1
 800f534:	d811      	bhi.n	800f55a <__ieee754_sqrt+0x10e>
 800f536:	f1be 0f00 	cmp.w	lr, #0
 800f53a:	eb0e 000c 	add.w	r0, lr, ip
 800f53e:	da42      	bge.n	800f5c6 <__ieee754_sqrt+0x17a>
 800f540:	2800      	cmp	r0, #0
 800f542:	db40      	blt.n	800f5c6 <__ieee754_sqrt+0x17a>
 800f544:	f102 0801 	add.w	r8, r2, #1
 800f548:	1a9b      	subs	r3, r3, r2
 800f54a:	458e      	cmp	lr, r1
 800f54c:	bf88      	it	hi
 800f54e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f552:	eba1 010e 	sub.w	r1, r1, lr
 800f556:	4464      	add	r4, ip
 800f558:	4642      	mov	r2, r8
 800f55a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f55e:	3f01      	subs	r7, #1
 800f560:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f564:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f568:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f56c:	d1dc      	bne.n	800f528 <__ieee754_sqrt+0xdc>
 800f56e:	4319      	orrs	r1, r3
 800f570:	d01b      	beq.n	800f5aa <__ieee754_sqrt+0x15e>
 800f572:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f5f8 <__ieee754_sqrt+0x1ac>
 800f576:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f5fc <__ieee754_sqrt+0x1b0>
 800f57a:	e9da 0100 	ldrd	r0, r1, [sl]
 800f57e:	e9db 2300 	ldrd	r2, r3, [fp]
 800f582:	f7f0 fe81 	bl	8000288 <__aeabi_dsub>
 800f586:	e9da 8900 	ldrd	r8, r9, [sl]
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	4640      	mov	r0, r8
 800f590:	4649      	mov	r1, r9
 800f592:	f7f1 faad 	bl	8000af0 <__aeabi_dcmple>
 800f596:	b140      	cbz	r0, 800f5aa <__ieee754_sqrt+0x15e>
 800f598:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f59c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f5a0:	e9db 2300 	ldrd	r2, r3, [fp]
 800f5a4:	d111      	bne.n	800f5ca <__ieee754_sqrt+0x17e>
 800f5a6:	3601      	adds	r6, #1
 800f5a8:	463c      	mov	r4, r7
 800f5aa:	1072      	asrs	r2, r6, #1
 800f5ac:	0863      	lsrs	r3, r4, #1
 800f5ae:	07f1      	lsls	r1, r6, #31
 800f5b0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f5b4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f5b8:	bf48      	it	mi
 800f5ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f5be:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	e756      	b.n	800f474 <__ieee754_sqrt+0x28>
 800f5c6:	4690      	mov	r8, r2
 800f5c8:	e7be      	b.n	800f548 <__ieee754_sqrt+0xfc>
 800f5ca:	f7f0 fe5f 	bl	800028c <__adddf3>
 800f5ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	4640      	mov	r0, r8
 800f5d8:	4649      	mov	r1, r9
 800f5da:	f7f1 fa7f 	bl	8000adc <__aeabi_dcmplt>
 800f5de:	b120      	cbz	r0, 800f5ea <__ieee754_sqrt+0x19e>
 800f5e0:	1ca0      	adds	r0, r4, #2
 800f5e2:	bf08      	it	eq
 800f5e4:	3601      	addeq	r6, #1
 800f5e6:	3402      	adds	r4, #2
 800f5e8:	e7df      	b.n	800f5aa <__ieee754_sqrt+0x15e>
 800f5ea:	1c63      	adds	r3, r4, #1
 800f5ec:	f023 0401 	bic.w	r4, r3, #1
 800f5f0:	e7db      	b.n	800f5aa <__ieee754_sqrt+0x15e>
 800f5f2:	bf00      	nop
 800f5f4:	7ff00000 	.word	0x7ff00000
 800f5f8:	200002a8 	.word	0x200002a8
 800f5fc:	200002a0 	.word	0x200002a0

0800f600 <__kernel_cos>:
 800f600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	ec57 6b10 	vmov	r6, r7, d0
 800f608:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f60c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f610:	ed8d 1b00 	vstr	d1, [sp]
 800f614:	d206      	bcs.n	800f624 <__kernel_cos+0x24>
 800f616:	4630      	mov	r0, r6
 800f618:	4639      	mov	r1, r7
 800f61a:	f7f1 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800f61e:	2800      	cmp	r0, #0
 800f620:	f000 8088 	beq.w	800f734 <__kernel_cos+0x134>
 800f624:	4632      	mov	r2, r6
 800f626:	463b      	mov	r3, r7
 800f628:	4630      	mov	r0, r6
 800f62a:	4639      	mov	r1, r7
 800f62c:	f7f0 ffe4 	bl	80005f8 <__aeabi_dmul>
 800f630:	4b51      	ldr	r3, [pc, #324]	@ (800f778 <__kernel_cos+0x178>)
 800f632:	2200      	movs	r2, #0
 800f634:	4604      	mov	r4, r0
 800f636:	460d      	mov	r5, r1
 800f638:	f7f0 ffde 	bl	80005f8 <__aeabi_dmul>
 800f63c:	a340      	add	r3, pc, #256	@ (adr r3, 800f740 <__kernel_cos+0x140>)
 800f63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f642:	4682      	mov	sl, r0
 800f644:	468b      	mov	fp, r1
 800f646:	4620      	mov	r0, r4
 800f648:	4629      	mov	r1, r5
 800f64a:	f7f0 ffd5 	bl	80005f8 <__aeabi_dmul>
 800f64e:	a33e      	add	r3, pc, #248	@ (adr r3, 800f748 <__kernel_cos+0x148>)
 800f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f654:	f7f0 fe1a 	bl	800028c <__adddf3>
 800f658:	4622      	mov	r2, r4
 800f65a:	462b      	mov	r3, r5
 800f65c:	f7f0 ffcc 	bl	80005f8 <__aeabi_dmul>
 800f660:	a33b      	add	r3, pc, #236	@ (adr r3, 800f750 <__kernel_cos+0x150>)
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	f7f0 fe0f 	bl	8000288 <__aeabi_dsub>
 800f66a:	4622      	mov	r2, r4
 800f66c:	462b      	mov	r3, r5
 800f66e:	f7f0 ffc3 	bl	80005f8 <__aeabi_dmul>
 800f672:	a339      	add	r3, pc, #228	@ (adr r3, 800f758 <__kernel_cos+0x158>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f7f0 fe08 	bl	800028c <__adddf3>
 800f67c:	4622      	mov	r2, r4
 800f67e:	462b      	mov	r3, r5
 800f680:	f7f0 ffba 	bl	80005f8 <__aeabi_dmul>
 800f684:	a336      	add	r3, pc, #216	@ (adr r3, 800f760 <__kernel_cos+0x160>)
 800f686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68a:	f7f0 fdfd 	bl	8000288 <__aeabi_dsub>
 800f68e:	4622      	mov	r2, r4
 800f690:	462b      	mov	r3, r5
 800f692:	f7f0 ffb1 	bl	80005f8 <__aeabi_dmul>
 800f696:	a334      	add	r3, pc, #208	@ (adr r3, 800f768 <__kernel_cos+0x168>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	f7f0 fdf6 	bl	800028c <__adddf3>
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	462b      	mov	r3, r5
 800f6a4:	f7f0 ffa8 	bl	80005f8 <__aeabi_dmul>
 800f6a8:	4622      	mov	r2, r4
 800f6aa:	462b      	mov	r3, r5
 800f6ac:	f7f0 ffa4 	bl	80005f8 <__aeabi_dmul>
 800f6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	460d      	mov	r5, r1
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	f7f0 ff9c 	bl	80005f8 <__aeabi_dmul>
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f7f0 fdde 	bl	8000288 <__aeabi_dsub>
 800f6cc:	4b2b      	ldr	r3, [pc, #172]	@ (800f77c <__kernel_cos+0x17c>)
 800f6ce:	4598      	cmp	r8, r3
 800f6d0:	4606      	mov	r6, r0
 800f6d2:	460f      	mov	r7, r1
 800f6d4:	d810      	bhi.n	800f6f8 <__kernel_cos+0xf8>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	460b      	mov	r3, r1
 800f6da:	4650      	mov	r0, sl
 800f6dc:	4659      	mov	r1, fp
 800f6de:	f7f0 fdd3 	bl	8000288 <__aeabi_dsub>
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4926      	ldr	r1, [pc, #152]	@ (800f780 <__kernel_cos+0x180>)
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	f7f0 fdcd 	bl	8000288 <__aeabi_dsub>
 800f6ee:	ec41 0b10 	vmov	d0, r0, r1
 800f6f2:	b003      	add	sp, #12
 800f6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f8:	4b22      	ldr	r3, [pc, #136]	@ (800f784 <__kernel_cos+0x184>)
 800f6fa:	4921      	ldr	r1, [pc, #132]	@ (800f780 <__kernel_cos+0x180>)
 800f6fc:	4598      	cmp	r8, r3
 800f6fe:	bf8c      	ite	hi
 800f700:	4d21      	ldrhi	r5, [pc, #132]	@ (800f788 <__kernel_cos+0x188>)
 800f702:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f706:	2400      	movs	r4, #0
 800f708:	4622      	mov	r2, r4
 800f70a:	462b      	mov	r3, r5
 800f70c:	2000      	movs	r0, #0
 800f70e:	f7f0 fdbb 	bl	8000288 <__aeabi_dsub>
 800f712:	4622      	mov	r2, r4
 800f714:	4680      	mov	r8, r0
 800f716:	4689      	mov	r9, r1
 800f718:	462b      	mov	r3, r5
 800f71a:	4650      	mov	r0, sl
 800f71c:	4659      	mov	r1, fp
 800f71e:	f7f0 fdb3 	bl	8000288 <__aeabi_dsub>
 800f722:	4632      	mov	r2, r6
 800f724:	463b      	mov	r3, r7
 800f726:	f7f0 fdaf 	bl	8000288 <__aeabi_dsub>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	4640      	mov	r0, r8
 800f730:	4649      	mov	r1, r9
 800f732:	e7da      	b.n	800f6ea <__kernel_cos+0xea>
 800f734:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f770 <__kernel_cos+0x170>
 800f738:	e7db      	b.n	800f6f2 <__kernel_cos+0xf2>
 800f73a:	bf00      	nop
 800f73c:	f3af 8000 	nop.w
 800f740:	be8838d4 	.word	0xbe8838d4
 800f744:	bda8fae9 	.word	0xbda8fae9
 800f748:	bdb4b1c4 	.word	0xbdb4b1c4
 800f74c:	3e21ee9e 	.word	0x3e21ee9e
 800f750:	809c52ad 	.word	0x809c52ad
 800f754:	3e927e4f 	.word	0x3e927e4f
 800f758:	19cb1590 	.word	0x19cb1590
 800f75c:	3efa01a0 	.word	0x3efa01a0
 800f760:	16c15177 	.word	0x16c15177
 800f764:	3f56c16c 	.word	0x3f56c16c
 800f768:	5555554c 	.word	0x5555554c
 800f76c:	3fa55555 	.word	0x3fa55555
 800f770:	00000000 	.word	0x00000000
 800f774:	3ff00000 	.word	0x3ff00000
 800f778:	3fe00000 	.word	0x3fe00000
 800f77c:	3fd33332 	.word	0x3fd33332
 800f780:	3ff00000 	.word	0x3ff00000
 800f784:	3fe90000 	.word	0x3fe90000
 800f788:	3fd20000 	.word	0x3fd20000
 800f78c:	00000000 	.word	0x00000000

0800f790 <__kernel_sin>:
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	ec55 4b10 	vmov	r4, r5, d0
 800f798:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f79c:	b085      	sub	sp, #20
 800f79e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f7a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f7a6:	4680      	mov	r8, r0
 800f7a8:	d205      	bcs.n	800f7b6 <__kernel_sin+0x26>
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	f7f1 f9d3 	bl	8000b58 <__aeabi_d2iz>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d052      	beq.n	800f85c <__kernel_sin+0xcc>
 800f7b6:	4622      	mov	r2, r4
 800f7b8:	462b      	mov	r3, r5
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	4629      	mov	r1, r5
 800f7be:	f7f0 ff1b 	bl	80005f8 <__aeabi_dmul>
 800f7c2:	4682      	mov	sl, r0
 800f7c4:	468b      	mov	fp, r1
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	f7f0 ff13 	bl	80005f8 <__aeabi_dmul>
 800f7d2:	a342      	add	r3, pc, #264	@ (adr r3, 800f8dc <__kernel_sin+0x14c>)
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	e9cd 0100 	strd	r0, r1, [sp]
 800f7dc:	4650      	mov	r0, sl
 800f7de:	4659      	mov	r1, fp
 800f7e0:	f7f0 ff0a 	bl	80005f8 <__aeabi_dmul>
 800f7e4:	a33f      	add	r3, pc, #252	@ (adr r3, 800f8e4 <__kernel_sin+0x154>)
 800f7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ea:	f7f0 fd4d 	bl	8000288 <__aeabi_dsub>
 800f7ee:	4652      	mov	r2, sl
 800f7f0:	465b      	mov	r3, fp
 800f7f2:	f7f0 ff01 	bl	80005f8 <__aeabi_dmul>
 800f7f6:	a33d      	add	r3, pc, #244	@ (adr r3, 800f8ec <__kernel_sin+0x15c>)
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	f7f0 fd46 	bl	800028c <__adddf3>
 800f800:	4652      	mov	r2, sl
 800f802:	465b      	mov	r3, fp
 800f804:	f7f0 fef8 	bl	80005f8 <__aeabi_dmul>
 800f808:	a33a      	add	r3, pc, #232	@ (adr r3, 800f8f4 <__kernel_sin+0x164>)
 800f80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80e:	f7f0 fd3b 	bl	8000288 <__aeabi_dsub>
 800f812:	4652      	mov	r2, sl
 800f814:	465b      	mov	r3, fp
 800f816:	f7f0 feef 	bl	80005f8 <__aeabi_dmul>
 800f81a:	a338      	add	r3, pc, #224	@ (adr r3, 800f8fc <__kernel_sin+0x16c>)
 800f81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f820:	f7f0 fd34 	bl	800028c <__adddf3>
 800f824:	4606      	mov	r6, r0
 800f826:	460f      	mov	r7, r1
 800f828:	f1b8 0f00 	cmp.w	r8, #0
 800f82c:	d11b      	bne.n	800f866 <__kernel_sin+0xd6>
 800f82e:	4602      	mov	r2, r0
 800f830:	460b      	mov	r3, r1
 800f832:	4650      	mov	r0, sl
 800f834:	4659      	mov	r1, fp
 800f836:	f7f0 fedf 	bl	80005f8 <__aeabi_dmul>
 800f83a:	a325      	add	r3, pc, #148	@ (adr r3, 800f8d0 <__kernel_sin+0x140>)
 800f83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f840:	f7f0 fd22 	bl	8000288 <__aeabi_dsub>
 800f844:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f848:	f7f0 fed6 	bl	80005f8 <__aeabi_dmul>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	4620      	mov	r0, r4
 800f852:	4629      	mov	r1, r5
 800f854:	f7f0 fd1a 	bl	800028c <__adddf3>
 800f858:	4604      	mov	r4, r0
 800f85a:	460d      	mov	r5, r1
 800f85c:	ec45 4b10 	vmov	d0, r4, r5
 800f860:	b005      	add	sp, #20
 800f862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f86a:	4b1b      	ldr	r3, [pc, #108]	@ (800f8d8 <__kernel_sin+0x148>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	f7f0 fec3 	bl	80005f8 <__aeabi_dmul>
 800f872:	4632      	mov	r2, r6
 800f874:	4680      	mov	r8, r0
 800f876:	4689      	mov	r9, r1
 800f878:	463b      	mov	r3, r7
 800f87a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f87e:	f7f0 febb 	bl	80005f8 <__aeabi_dmul>
 800f882:	4602      	mov	r2, r0
 800f884:	460b      	mov	r3, r1
 800f886:	4640      	mov	r0, r8
 800f888:	4649      	mov	r1, r9
 800f88a:	f7f0 fcfd 	bl	8000288 <__aeabi_dsub>
 800f88e:	4652      	mov	r2, sl
 800f890:	465b      	mov	r3, fp
 800f892:	f7f0 feb1 	bl	80005f8 <__aeabi_dmul>
 800f896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f89a:	f7f0 fcf5 	bl	8000288 <__aeabi_dsub>
 800f89e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f8d0 <__kernel_sin+0x140>)
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	4606      	mov	r6, r0
 800f8a6:	460f      	mov	r7, r1
 800f8a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8ac:	f7f0 fea4 	bl	80005f8 <__aeabi_dmul>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	4639      	mov	r1, r7
 800f8b8:	f7f0 fce8 	bl	800028c <__adddf3>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	f7f0 fce0 	bl	8000288 <__aeabi_dsub>
 800f8c8:	e7c6      	b.n	800f858 <__kernel_sin+0xc8>
 800f8ca:	bf00      	nop
 800f8cc:	f3af 8000 	nop.w
 800f8d0:	55555549 	.word	0x55555549
 800f8d4:	3fc55555 	.word	0x3fc55555
 800f8d8:	3fe00000 	.word	0x3fe00000
 800f8dc:	5acfd57c 	.word	0x5acfd57c
 800f8e0:	3de5d93a 	.word	0x3de5d93a
 800f8e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f8e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f8ec:	57b1fe7d 	.word	0x57b1fe7d
 800f8f0:	3ec71de3 	.word	0x3ec71de3
 800f8f4:	19c161d5 	.word	0x19c161d5
 800f8f8:	3f2a01a0 	.word	0x3f2a01a0
 800f8fc:	1110f8a6 	.word	0x1110f8a6
 800f900:	3f811111 	.word	0x3f811111
 800f904:	00000000 	.word	0x00000000

0800f908 <__ieee754_atan2>:
 800f908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f90c:	ec57 6b11 	vmov	r6, r7, d1
 800f910:	4273      	negs	r3, r6
 800f912:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800fa90 <__ieee754_atan2+0x188>
 800f916:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f91a:	4333      	orrs	r3, r6
 800f91c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f920:	4543      	cmp	r3, r8
 800f922:	ec51 0b10 	vmov	r0, r1, d0
 800f926:	4635      	mov	r5, r6
 800f928:	d809      	bhi.n	800f93e <__ieee754_atan2+0x36>
 800f92a:	4244      	negs	r4, r0
 800f92c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f930:	4304      	orrs	r4, r0
 800f932:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f936:	4544      	cmp	r4, r8
 800f938:	468e      	mov	lr, r1
 800f93a:	4681      	mov	r9, r0
 800f93c:	d907      	bls.n	800f94e <__ieee754_atan2+0x46>
 800f93e:	4632      	mov	r2, r6
 800f940:	463b      	mov	r3, r7
 800f942:	f7f0 fca3 	bl	800028c <__adddf3>
 800f946:	ec41 0b10 	vmov	d0, r0, r1
 800f94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f94e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f952:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f956:	4334      	orrs	r4, r6
 800f958:	d103      	bne.n	800f962 <__ieee754_atan2+0x5a>
 800f95a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f95e:	f000 bbab 	b.w	80100b8 <atan>
 800f962:	17bc      	asrs	r4, r7, #30
 800f964:	f004 0402 	and.w	r4, r4, #2
 800f968:	ea53 0909 	orrs.w	r9, r3, r9
 800f96c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f970:	d107      	bne.n	800f982 <__ieee754_atan2+0x7a>
 800f972:	2c02      	cmp	r4, #2
 800f974:	d05f      	beq.n	800fa36 <__ieee754_atan2+0x12e>
 800f976:	2c03      	cmp	r4, #3
 800f978:	d1e5      	bne.n	800f946 <__ieee754_atan2+0x3e>
 800f97a:	a141      	add	r1, pc, #260	@ (adr r1, 800fa80 <__ieee754_atan2+0x178>)
 800f97c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f980:	e7e1      	b.n	800f946 <__ieee754_atan2+0x3e>
 800f982:	4315      	orrs	r5, r2
 800f984:	d106      	bne.n	800f994 <__ieee754_atan2+0x8c>
 800f986:	f1be 0f00 	cmp.w	lr, #0
 800f98a:	da5f      	bge.n	800fa4c <__ieee754_atan2+0x144>
 800f98c:	a13e      	add	r1, pc, #248	@ (adr r1, 800fa88 <__ieee754_atan2+0x180>)
 800f98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f992:	e7d8      	b.n	800f946 <__ieee754_atan2+0x3e>
 800f994:	4542      	cmp	r2, r8
 800f996:	d10f      	bne.n	800f9b8 <__ieee754_atan2+0xb0>
 800f998:	4293      	cmp	r3, r2
 800f99a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f99e:	d107      	bne.n	800f9b0 <__ieee754_atan2+0xa8>
 800f9a0:	2c02      	cmp	r4, #2
 800f9a2:	d84c      	bhi.n	800fa3e <__ieee754_atan2+0x136>
 800f9a4:	4b34      	ldr	r3, [pc, #208]	@ (800fa78 <__ieee754_atan2+0x170>)
 800f9a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f9aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9ae:	e7ca      	b.n	800f946 <__ieee754_atan2+0x3e>
 800f9b0:	2c02      	cmp	r4, #2
 800f9b2:	d848      	bhi.n	800fa46 <__ieee754_atan2+0x13e>
 800f9b4:	4b31      	ldr	r3, [pc, #196]	@ (800fa7c <__ieee754_atan2+0x174>)
 800f9b6:	e7f6      	b.n	800f9a6 <__ieee754_atan2+0x9e>
 800f9b8:	4543      	cmp	r3, r8
 800f9ba:	d0e4      	beq.n	800f986 <__ieee754_atan2+0x7e>
 800f9bc:	1a9b      	subs	r3, r3, r2
 800f9be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f9c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9c6:	da1e      	bge.n	800fa06 <__ieee754_atan2+0xfe>
 800f9c8:	2f00      	cmp	r7, #0
 800f9ca:	da01      	bge.n	800f9d0 <__ieee754_atan2+0xc8>
 800f9cc:	323c      	adds	r2, #60	@ 0x3c
 800f9ce:	db1e      	blt.n	800fa0e <__ieee754_atan2+0x106>
 800f9d0:	4632      	mov	r2, r6
 800f9d2:	463b      	mov	r3, r7
 800f9d4:	f7f0 ff3a 	bl	800084c <__aeabi_ddiv>
 800f9d8:	ec41 0b10 	vmov	d0, r0, r1
 800f9dc:	f000 fd04 	bl	80103e8 <fabs>
 800f9e0:	f000 fb6a 	bl	80100b8 <atan>
 800f9e4:	ec51 0b10 	vmov	r0, r1, d0
 800f9e8:	2c01      	cmp	r4, #1
 800f9ea:	d013      	beq.n	800fa14 <__ieee754_atan2+0x10c>
 800f9ec:	2c02      	cmp	r4, #2
 800f9ee:	d015      	beq.n	800fa1c <__ieee754_atan2+0x114>
 800f9f0:	2c00      	cmp	r4, #0
 800f9f2:	d0a8      	beq.n	800f946 <__ieee754_atan2+0x3e>
 800f9f4:	a318      	add	r3, pc, #96	@ (adr r3, 800fa58 <__ieee754_atan2+0x150>)
 800f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fa:	f7f0 fc45 	bl	8000288 <__aeabi_dsub>
 800f9fe:	a318      	add	r3, pc, #96	@ (adr r3, 800fa60 <__ieee754_atan2+0x158>)
 800fa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa04:	e014      	b.n	800fa30 <__ieee754_atan2+0x128>
 800fa06:	a118      	add	r1, pc, #96	@ (adr r1, 800fa68 <__ieee754_atan2+0x160>)
 800fa08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa0c:	e7ec      	b.n	800f9e8 <__ieee754_atan2+0xe0>
 800fa0e:	2000      	movs	r0, #0
 800fa10:	2100      	movs	r1, #0
 800fa12:	e7e9      	b.n	800f9e8 <__ieee754_atan2+0xe0>
 800fa14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa18:	4619      	mov	r1, r3
 800fa1a:	e794      	b.n	800f946 <__ieee754_atan2+0x3e>
 800fa1c:	a30e      	add	r3, pc, #56	@ (adr r3, 800fa58 <__ieee754_atan2+0x150>)
 800fa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa22:	f7f0 fc31 	bl	8000288 <__aeabi_dsub>
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	a10d      	add	r1, pc, #52	@ (adr r1, 800fa60 <__ieee754_atan2+0x158>)
 800fa2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa30:	f7f0 fc2a 	bl	8000288 <__aeabi_dsub>
 800fa34:	e787      	b.n	800f946 <__ieee754_atan2+0x3e>
 800fa36:	a10a      	add	r1, pc, #40	@ (adr r1, 800fa60 <__ieee754_atan2+0x158>)
 800fa38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa3c:	e783      	b.n	800f946 <__ieee754_atan2+0x3e>
 800fa3e:	a10c      	add	r1, pc, #48	@ (adr r1, 800fa70 <__ieee754_atan2+0x168>)
 800fa40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa44:	e77f      	b.n	800f946 <__ieee754_atan2+0x3e>
 800fa46:	2000      	movs	r0, #0
 800fa48:	2100      	movs	r1, #0
 800fa4a:	e77c      	b.n	800f946 <__ieee754_atan2+0x3e>
 800fa4c:	a106      	add	r1, pc, #24	@ (adr r1, 800fa68 <__ieee754_atan2+0x160>)
 800fa4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa52:	e778      	b.n	800f946 <__ieee754_atan2+0x3e>
 800fa54:	f3af 8000 	nop.w
 800fa58:	33145c07 	.word	0x33145c07
 800fa5c:	3ca1a626 	.word	0x3ca1a626
 800fa60:	54442d18 	.word	0x54442d18
 800fa64:	400921fb 	.word	0x400921fb
 800fa68:	54442d18 	.word	0x54442d18
 800fa6c:	3ff921fb 	.word	0x3ff921fb
 800fa70:	54442d18 	.word	0x54442d18
 800fa74:	3fe921fb 	.word	0x3fe921fb
 800fa78:	080117b0 	.word	0x080117b0
 800fa7c:	08011798 	.word	0x08011798
 800fa80:	54442d18 	.word	0x54442d18
 800fa84:	c00921fb 	.word	0xc00921fb
 800fa88:	54442d18 	.word	0x54442d18
 800fa8c:	bff921fb 	.word	0xbff921fb
 800fa90:	7ff00000 	.word	0x7ff00000

0800fa94 <__ieee754_hypot>:
 800fa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa98:	ec51 0b10 	vmov	r0, r1, d0
 800fa9c:	ec53 2b11 	vmov	r2, r3, d1
 800faa0:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800faa4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800faa8:	42a5      	cmp	r5, r4
 800faaa:	b087      	sub	sp, #28
 800faac:	da05      	bge.n	800faba <__ieee754_hypot+0x26>
 800faae:	462e      	mov	r6, r5
 800fab0:	4625      	mov	r5, r4
 800fab2:	4634      	mov	r4, r6
 800fab4:	4606      	mov	r6, r0
 800fab6:	4610      	mov	r0, r2
 800fab8:	4632      	mov	r2, r6
 800faba:	1b2b      	subs	r3, r5, r4
 800fabc:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800fac0:	4629      	mov	r1, r5
 800fac2:	4682      	mov	sl, r0
 800fac4:	46ab      	mov	fp, r5
 800fac6:	4616      	mov	r6, r2
 800fac8:	4627      	mov	r7, r4
 800faca:	dd05      	ble.n	800fad8 <__ieee754_hypot+0x44>
 800facc:	4623      	mov	r3, r4
 800face:	f7f0 fbdd 	bl	800028c <__adddf3>
 800fad2:	4682      	mov	sl, r0
 800fad4:	468b      	mov	fp, r1
 800fad6:	e016      	b.n	800fb06 <__ieee754_hypot+0x72>
 800fad8:	4b75      	ldr	r3, [pc, #468]	@ (800fcb0 <__ieee754_hypot+0x21c>)
 800fada:	429d      	cmp	r5, r3
 800fadc:	f340 8096 	ble.w	800fc0c <__ieee754_hypot+0x178>
 800fae0:	4b74      	ldr	r3, [pc, #464]	@ (800fcb4 <__ieee754_hypot+0x220>)
 800fae2:	429d      	cmp	r5, r3
 800fae4:	dd14      	ble.n	800fb10 <__ieee754_hypot+0x7c>
 800fae6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800faea:	4305      	orrs	r5, r0
 800faec:	d004      	beq.n	800faf8 <__ieee754_hypot+0x64>
 800faee:	4623      	mov	r3, r4
 800faf0:	f7f0 fbcc 	bl	800028c <__adddf3>
 800faf4:	4682      	mov	sl, r0
 800faf6:	468b      	mov	fp, r1
 800faf8:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800fafc:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800fb00:	4334      	orrs	r4, r6
 800fb02:	f000 80d2 	beq.w	800fcaa <__ieee754_hypot+0x216>
 800fb06:	ec4b ab10 	vmov	d0, sl, fp
 800fb0a:	b007      	add	sp, #28
 800fb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb10:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800fb14:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800fb18:	46ab      	mov	fp, r5
 800fb1a:	4627      	mov	r7, r4
 800fb1c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800fb20:	9301      	str	r3, [sp, #4]
 800fb22:	4b65      	ldr	r3, [pc, #404]	@ (800fcb8 <__ieee754_hypot+0x224>)
 800fb24:	429c      	cmp	r4, r3
 800fb26:	dc19      	bgt.n	800fb5c <__ieee754_hypot+0xc8>
 800fb28:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800fb2c:	da70      	bge.n	800fc10 <__ieee754_hypot+0x17c>
 800fb2e:	4633      	mov	r3, r6
 800fb30:	4323      	orrs	r3, r4
 800fb32:	d0e8      	beq.n	800fb06 <__ieee754_hypot+0x72>
 800fb34:	4b61      	ldr	r3, [pc, #388]	@ (800fcbc <__ieee754_hypot+0x228>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	4630      	mov	r0, r6
 800fb3a:	4639      	mov	r1, r7
 800fb3c:	f7f0 fd5c 	bl	80005f8 <__aeabi_dmul>
 800fb40:	4b5e      	ldr	r3, [pc, #376]	@ (800fcbc <__ieee754_hypot+0x228>)
 800fb42:	4606      	mov	r6, r0
 800fb44:	460f      	mov	r7, r1
 800fb46:	4650      	mov	r0, sl
 800fb48:	4659      	mov	r1, fp
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f7f0 fd54 	bl	80005f8 <__aeabi_dmul>
 800fb50:	9b01      	ldr	r3, [sp, #4]
 800fb52:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800fb56:	4682      	mov	sl, r0
 800fb58:	468b      	mov	fp, r1
 800fb5a:	9301      	str	r3, [sp, #4]
 800fb5c:	4632      	mov	r2, r6
 800fb5e:	463b      	mov	r3, r7
 800fb60:	4650      	mov	r0, sl
 800fb62:	4659      	mov	r1, fp
 800fb64:	f7f0 fb90 	bl	8000288 <__aeabi_dsub>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4680      	mov	r8, r0
 800fb6e:	4689      	mov	r9, r1
 800fb70:	4630      	mov	r0, r6
 800fb72:	4639      	mov	r1, r7
 800fb74:	f7f0 ffb2 	bl	8000adc <__aeabi_dcmplt>
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	d053      	beq.n	800fc26 <__ieee754_hypot+0x192>
 800fb7e:	462b      	mov	r3, r5
 800fb80:	4610      	mov	r0, r2
 800fb82:	4629      	mov	r1, r5
 800fb84:	4614      	mov	r4, r2
 800fb86:	f7f0 fd37 	bl	80005f8 <__aeabi_dmul>
 800fb8a:	4632      	mov	r2, r6
 800fb8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb90:	463b      	mov	r3, r7
 800fb92:	4630      	mov	r0, r6
 800fb94:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800fb98:	f7f0 fd2e 	bl	80005f8 <__aeabi_dmul>
 800fb9c:	4622      	mov	r2, r4
 800fb9e:	4606      	mov	r6, r0
 800fba0:	460f      	mov	r7, r1
 800fba2:	462b      	mov	r3, r5
 800fba4:	4650      	mov	r0, sl
 800fba6:	4659      	mov	r1, fp
 800fba8:	f7f0 fb70 	bl	800028c <__adddf3>
 800fbac:	4622      	mov	r2, r4
 800fbae:	4680      	mov	r8, r0
 800fbb0:	4689      	mov	r9, r1
 800fbb2:	462b      	mov	r3, r5
 800fbb4:	4650      	mov	r0, sl
 800fbb6:	4659      	mov	r1, fp
 800fbb8:	f7f0 fb66 	bl	8000288 <__aeabi_dsub>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	4640      	mov	r0, r8
 800fbc2:	4649      	mov	r1, r9
 800fbc4:	f7f0 fd18 	bl	80005f8 <__aeabi_dmul>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	460b      	mov	r3, r1
 800fbcc:	4630      	mov	r0, r6
 800fbce:	4639      	mov	r1, r7
 800fbd0:	f7f0 fb5a 	bl	8000288 <__aeabi_dsub>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbdc:	f7f0 fb54 	bl	8000288 <__aeabi_dsub>
 800fbe0:	ec41 0b10 	vmov	d0, r0, r1
 800fbe4:	f7ff fc32 	bl	800f44c <__ieee754_sqrt>
 800fbe8:	9b01      	ldr	r3, [sp, #4]
 800fbea:	ec5b ab10 	vmov	sl, fp, d0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d089      	beq.n	800fb06 <__ieee754_hypot+0x72>
 800fbf2:	051b      	lsls	r3, r3, #20
 800fbf4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800fbfe:	4602      	mov	r2, r0
 800fc00:	460b      	mov	r3, r1
 800fc02:	4650      	mov	r0, sl
 800fc04:	4659      	mov	r1, fp
 800fc06:	f7f0 fcf7 	bl	80005f8 <__aeabi_dmul>
 800fc0a:	e762      	b.n	800fad2 <__ieee754_hypot+0x3e>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	e787      	b.n	800fb20 <__ieee754_hypot+0x8c>
 800fc10:	9b01      	ldr	r3, [sp, #4]
 800fc12:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800fc16:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800fc1a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	46ab      	mov	fp, r5
 800fc22:	4627      	mov	r7, r4
 800fc24:	e79a      	b.n	800fb5c <__ieee754_hypot+0xc8>
 800fc26:	4623      	mov	r3, r4
 800fc28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fc2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800fc36:	4614      	mov	r4, r2
 800fc38:	461d      	mov	r5, r3
 800fc3a:	f7f0 fcdd 	bl	80005f8 <__aeabi_dmul>
 800fc3e:	4642      	mov	r2, r8
 800fc40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc44:	464b      	mov	r3, r9
 800fc46:	4640      	mov	r0, r8
 800fc48:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800fc4c:	f7f0 fcd4 	bl	80005f8 <__aeabi_dmul>
 800fc50:	4652      	mov	r2, sl
 800fc52:	465b      	mov	r3, fp
 800fc54:	4680      	mov	r8, r0
 800fc56:	4689      	mov	r9, r1
 800fc58:	4650      	mov	r0, sl
 800fc5a:	4659      	mov	r1, fp
 800fc5c:	f7f0 fb16 	bl	800028c <__adddf3>
 800fc60:	4622      	mov	r2, r4
 800fc62:	462b      	mov	r3, r5
 800fc64:	f7f0 fb10 	bl	8000288 <__aeabi_dsub>
 800fc68:	4632      	mov	r2, r6
 800fc6a:	463b      	mov	r3, r7
 800fc6c:	f7f0 fcc4 	bl	80005f8 <__aeabi_dmul>
 800fc70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc74:	4682      	mov	sl, r0
 800fc76:	468b      	mov	fp, r1
 800fc78:	4630      	mov	r0, r6
 800fc7a:	4639      	mov	r1, r7
 800fc7c:	f7f0 fb04 	bl	8000288 <__aeabi_dsub>
 800fc80:	4622      	mov	r2, r4
 800fc82:	462b      	mov	r3, r5
 800fc84:	f7f0 fcb8 	bl	80005f8 <__aeabi_dmul>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4650      	mov	r0, sl
 800fc8e:	4659      	mov	r1, fp
 800fc90:	f7f0 fafc 	bl	800028c <__adddf3>
 800fc94:	4602      	mov	r2, r0
 800fc96:	460b      	mov	r3, r1
 800fc98:	4640      	mov	r0, r8
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	f7f0 faf4 	bl	8000288 <__aeabi_dsub>
 800fca0:	4602      	mov	r2, r0
 800fca2:	460b      	mov	r3, r1
 800fca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fca8:	e798      	b.n	800fbdc <__ieee754_hypot+0x148>
 800fcaa:	46b2      	mov	sl, r6
 800fcac:	46bb      	mov	fp, r7
 800fcae:	e72a      	b.n	800fb06 <__ieee754_hypot+0x72>
 800fcb0:	5f300000 	.word	0x5f300000
 800fcb4:	7fefffff 	.word	0x7fefffff
 800fcb8:	20afffff 	.word	0x20afffff
 800fcbc:	7fd00000 	.word	0x7fd00000

0800fcc0 <__ieee754_rem_pio2>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	ec57 6b10 	vmov	r6, r7, d0
 800fcc8:	4bc5      	ldr	r3, [pc, #788]	@ (800ffe0 <__ieee754_rem_pio2+0x320>)
 800fcca:	b08d      	sub	sp, #52	@ 0x34
 800fccc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fcd0:	4598      	cmp	r8, r3
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	9704      	str	r7, [sp, #16]
 800fcd6:	d807      	bhi.n	800fce8 <__ieee754_rem_pio2+0x28>
 800fcd8:	2200      	movs	r2, #0
 800fcda:	2300      	movs	r3, #0
 800fcdc:	ed80 0b00 	vstr	d0, [r0]
 800fce0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fce4:	2500      	movs	r5, #0
 800fce6:	e028      	b.n	800fd3a <__ieee754_rem_pio2+0x7a>
 800fce8:	4bbe      	ldr	r3, [pc, #760]	@ (800ffe4 <__ieee754_rem_pio2+0x324>)
 800fcea:	4598      	cmp	r8, r3
 800fcec:	d878      	bhi.n	800fde0 <__ieee754_rem_pio2+0x120>
 800fcee:	9b04      	ldr	r3, [sp, #16]
 800fcf0:	4dbd      	ldr	r5, [pc, #756]	@ (800ffe8 <__ieee754_rem_pio2+0x328>)
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	4630      	mov	r0, r6
 800fcf6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ffa8 <__ieee754_rem_pio2+0x2e8>)
 800fcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	dd38      	ble.n	800fd72 <__ieee754_rem_pio2+0xb2>
 800fd00:	f7f0 fac2 	bl	8000288 <__aeabi_dsub>
 800fd04:	45a8      	cmp	r8, r5
 800fd06:	4606      	mov	r6, r0
 800fd08:	460f      	mov	r7, r1
 800fd0a:	d01a      	beq.n	800fd42 <__ieee754_rem_pio2+0x82>
 800fd0c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ffb0 <__ieee754_rem_pio2+0x2f0>)
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	f7f0 fab9 	bl	8000288 <__aeabi_dsub>
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	4680      	mov	r8, r0
 800fd1c:	4689      	mov	r9, r1
 800fd1e:	4630      	mov	r0, r6
 800fd20:	4639      	mov	r1, r7
 800fd22:	f7f0 fab1 	bl	8000288 <__aeabi_dsub>
 800fd26:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ffb0 <__ieee754_rem_pio2+0x2f0>)
 800fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2c:	f7f0 faac 	bl	8000288 <__aeabi_dsub>
 800fd30:	e9c4 8900 	strd	r8, r9, [r4]
 800fd34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd38:	2501      	movs	r5, #1
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	b00d      	add	sp, #52	@ 0x34
 800fd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd42:	a39d      	add	r3, pc, #628	@ (adr r3, 800ffb8 <__ieee754_rem_pio2+0x2f8>)
 800fd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd48:	f7f0 fa9e 	bl	8000288 <__aeabi_dsub>
 800fd4c:	a39c      	add	r3, pc, #624	@ (adr r3, 800ffc0 <__ieee754_rem_pio2+0x300>)
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	4606      	mov	r6, r0
 800fd54:	460f      	mov	r7, r1
 800fd56:	f7f0 fa97 	bl	8000288 <__aeabi_dsub>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	4680      	mov	r8, r0
 800fd60:	4689      	mov	r9, r1
 800fd62:	4630      	mov	r0, r6
 800fd64:	4639      	mov	r1, r7
 800fd66:	f7f0 fa8f 	bl	8000288 <__aeabi_dsub>
 800fd6a:	a395      	add	r3, pc, #596	@ (adr r3, 800ffc0 <__ieee754_rem_pio2+0x300>)
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	e7dc      	b.n	800fd2c <__ieee754_rem_pio2+0x6c>
 800fd72:	f7f0 fa8b 	bl	800028c <__adddf3>
 800fd76:	45a8      	cmp	r8, r5
 800fd78:	4606      	mov	r6, r0
 800fd7a:	460f      	mov	r7, r1
 800fd7c:	d018      	beq.n	800fdb0 <__ieee754_rem_pio2+0xf0>
 800fd7e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ffb0 <__ieee754_rem_pio2+0x2f0>)
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	f7f0 fa82 	bl	800028c <__adddf3>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	4689      	mov	r9, r1
 800fd90:	4630      	mov	r0, r6
 800fd92:	4639      	mov	r1, r7
 800fd94:	f7f0 fa78 	bl	8000288 <__aeabi_dsub>
 800fd98:	a385      	add	r3, pc, #532	@ (adr r3, 800ffb0 <__ieee754_rem_pio2+0x2f0>)
 800fd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9e:	f7f0 fa75 	bl	800028c <__adddf3>
 800fda2:	f04f 35ff 	mov.w	r5, #4294967295
 800fda6:	e9c4 8900 	strd	r8, r9, [r4]
 800fdaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fdae:	e7c4      	b.n	800fd3a <__ieee754_rem_pio2+0x7a>
 800fdb0:	a381      	add	r3, pc, #516	@ (adr r3, 800ffb8 <__ieee754_rem_pio2+0x2f8>)
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	f7f0 fa69 	bl	800028c <__adddf3>
 800fdba:	a381      	add	r3, pc, #516	@ (adr r3, 800ffc0 <__ieee754_rem_pio2+0x300>)
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	f7f0 fa62 	bl	800028c <__adddf3>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	460b      	mov	r3, r1
 800fdcc:	4680      	mov	r8, r0
 800fdce:	4689      	mov	r9, r1
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	4639      	mov	r1, r7
 800fdd4:	f7f0 fa58 	bl	8000288 <__aeabi_dsub>
 800fdd8:	a379      	add	r3, pc, #484	@ (adr r3, 800ffc0 <__ieee754_rem_pio2+0x300>)
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	e7de      	b.n	800fd9e <__ieee754_rem_pio2+0xde>
 800fde0:	4b82      	ldr	r3, [pc, #520]	@ (800ffec <__ieee754_rem_pio2+0x32c>)
 800fde2:	4598      	cmp	r8, r3
 800fde4:	f200 80d1 	bhi.w	800ff8a <__ieee754_rem_pio2+0x2ca>
 800fde8:	f000 fafe 	bl	80103e8 <fabs>
 800fdec:	ec57 6b10 	vmov	r6, r7, d0
 800fdf0:	a375      	add	r3, pc, #468	@ (adr r3, 800ffc8 <__ieee754_rem_pio2+0x308>)
 800fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	4639      	mov	r1, r7
 800fdfa:	f7f0 fbfd 	bl	80005f8 <__aeabi_dmul>
 800fdfe:	4b7c      	ldr	r3, [pc, #496]	@ (800fff0 <__ieee754_rem_pio2+0x330>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	f7f0 fa43 	bl	800028c <__adddf3>
 800fe06:	f7f0 fea7 	bl	8000b58 <__aeabi_d2iz>
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	f7f0 fb8a 	bl	8000524 <__aeabi_i2d>
 800fe10:	4602      	mov	r2, r0
 800fe12:	460b      	mov	r3, r1
 800fe14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe18:	a363      	add	r3, pc, #396	@ (adr r3, 800ffa8 <__ieee754_rem_pio2+0x2e8>)
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	f7f0 fbeb 	bl	80005f8 <__aeabi_dmul>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	4630      	mov	r0, r6
 800fe28:	4639      	mov	r1, r7
 800fe2a:	f7f0 fa2d 	bl	8000288 <__aeabi_dsub>
 800fe2e:	a360      	add	r3, pc, #384	@ (adr r3, 800ffb0 <__ieee754_rem_pio2+0x2f0>)
 800fe30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe34:	4682      	mov	sl, r0
 800fe36:	468b      	mov	fp, r1
 800fe38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe3c:	f7f0 fbdc 	bl	80005f8 <__aeabi_dmul>
 800fe40:	2d1f      	cmp	r5, #31
 800fe42:	4606      	mov	r6, r0
 800fe44:	460f      	mov	r7, r1
 800fe46:	dc0c      	bgt.n	800fe62 <__ieee754_rem_pio2+0x1a2>
 800fe48:	4b6a      	ldr	r3, [pc, #424]	@ (800fff4 <__ieee754_rem_pio2+0x334>)
 800fe4a:	1e6a      	subs	r2, r5, #1
 800fe4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe50:	4543      	cmp	r3, r8
 800fe52:	d006      	beq.n	800fe62 <__ieee754_rem_pio2+0x1a2>
 800fe54:	4632      	mov	r2, r6
 800fe56:	463b      	mov	r3, r7
 800fe58:	4650      	mov	r0, sl
 800fe5a:	4659      	mov	r1, fp
 800fe5c:	f7f0 fa14 	bl	8000288 <__aeabi_dsub>
 800fe60:	e00e      	b.n	800fe80 <__ieee754_rem_pio2+0x1c0>
 800fe62:	463b      	mov	r3, r7
 800fe64:	4632      	mov	r2, r6
 800fe66:	4650      	mov	r0, sl
 800fe68:	4659      	mov	r1, fp
 800fe6a:	f7f0 fa0d 	bl	8000288 <__aeabi_dsub>
 800fe6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fe72:	9305      	str	r3, [sp, #20]
 800fe74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe78:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fe7c:	2b10      	cmp	r3, #16
 800fe7e:	dc02      	bgt.n	800fe86 <__ieee754_rem_pio2+0x1c6>
 800fe80:	e9c4 0100 	strd	r0, r1, [r4]
 800fe84:	e039      	b.n	800fefa <__ieee754_rem_pio2+0x23a>
 800fe86:	a34c      	add	r3, pc, #304	@ (adr r3, 800ffb8 <__ieee754_rem_pio2+0x2f8>)
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe90:	f7f0 fbb2 	bl	80005f8 <__aeabi_dmul>
 800fe94:	4606      	mov	r6, r0
 800fe96:	460f      	mov	r7, r1
 800fe98:	4602      	mov	r2, r0
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	4650      	mov	r0, sl
 800fe9e:	4659      	mov	r1, fp
 800fea0:	f7f0 f9f2 	bl	8000288 <__aeabi_dsub>
 800fea4:	4602      	mov	r2, r0
 800fea6:	460b      	mov	r3, r1
 800fea8:	4680      	mov	r8, r0
 800feaa:	4689      	mov	r9, r1
 800feac:	4650      	mov	r0, sl
 800feae:	4659      	mov	r1, fp
 800feb0:	f7f0 f9ea 	bl	8000288 <__aeabi_dsub>
 800feb4:	4632      	mov	r2, r6
 800feb6:	463b      	mov	r3, r7
 800feb8:	f7f0 f9e6 	bl	8000288 <__aeabi_dsub>
 800febc:	a340      	add	r3, pc, #256	@ (adr r3, 800ffc0 <__ieee754_rem_pio2+0x300>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	4606      	mov	r6, r0
 800fec4:	460f      	mov	r7, r1
 800fec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feca:	f7f0 fb95 	bl	80005f8 <__aeabi_dmul>
 800fece:	4632      	mov	r2, r6
 800fed0:	463b      	mov	r3, r7
 800fed2:	f7f0 f9d9 	bl	8000288 <__aeabi_dsub>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4606      	mov	r6, r0
 800fedc:	460f      	mov	r7, r1
 800fede:	4640      	mov	r0, r8
 800fee0:	4649      	mov	r1, r9
 800fee2:	f7f0 f9d1 	bl	8000288 <__aeabi_dsub>
 800fee6:	9a05      	ldr	r2, [sp, #20]
 800fee8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800feec:	1ad3      	subs	r3, r2, r3
 800feee:	2b31      	cmp	r3, #49	@ 0x31
 800fef0:	dc20      	bgt.n	800ff34 <__ieee754_rem_pio2+0x274>
 800fef2:	e9c4 0100 	strd	r0, r1, [r4]
 800fef6:	46c2      	mov	sl, r8
 800fef8:	46cb      	mov	fp, r9
 800fefa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fefe:	4650      	mov	r0, sl
 800ff00:	4642      	mov	r2, r8
 800ff02:	464b      	mov	r3, r9
 800ff04:	4659      	mov	r1, fp
 800ff06:	f7f0 f9bf 	bl	8000288 <__aeabi_dsub>
 800ff0a:	463b      	mov	r3, r7
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	f7f0 f9bb 	bl	8000288 <__aeabi_dsub>
 800ff12:	9b04      	ldr	r3, [sp, #16]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff1a:	f6bf af0e 	bge.w	800fd3a <__ieee754_rem_pio2+0x7a>
 800ff1e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ff22:	6063      	str	r3, [r4, #4]
 800ff24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff28:	f8c4 8000 	str.w	r8, [r4]
 800ff2c:	60a0      	str	r0, [r4, #8]
 800ff2e:	60e3      	str	r3, [r4, #12]
 800ff30:	426d      	negs	r5, r5
 800ff32:	e702      	b.n	800fd3a <__ieee754_rem_pio2+0x7a>
 800ff34:	a326      	add	r3, pc, #152	@ (adr r3, 800ffd0 <__ieee754_rem_pio2+0x310>)
 800ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff3e:	f7f0 fb5b 	bl	80005f8 <__aeabi_dmul>
 800ff42:	4606      	mov	r6, r0
 800ff44:	460f      	mov	r7, r1
 800ff46:	4602      	mov	r2, r0
 800ff48:	460b      	mov	r3, r1
 800ff4a:	4640      	mov	r0, r8
 800ff4c:	4649      	mov	r1, r9
 800ff4e:	f7f0 f99b 	bl	8000288 <__aeabi_dsub>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4682      	mov	sl, r0
 800ff58:	468b      	mov	fp, r1
 800ff5a:	4640      	mov	r0, r8
 800ff5c:	4649      	mov	r1, r9
 800ff5e:	f7f0 f993 	bl	8000288 <__aeabi_dsub>
 800ff62:	4632      	mov	r2, r6
 800ff64:	463b      	mov	r3, r7
 800ff66:	f7f0 f98f 	bl	8000288 <__aeabi_dsub>
 800ff6a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ffd8 <__ieee754_rem_pio2+0x318>)
 800ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff70:	4606      	mov	r6, r0
 800ff72:	460f      	mov	r7, r1
 800ff74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff78:	f7f0 fb3e 	bl	80005f8 <__aeabi_dmul>
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	463b      	mov	r3, r7
 800ff80:	f7f0 f982 	bl	8000288 <__aeabi_dsub>
 800ff84:	4606      	mov	r6, r0
 800ff86:	460f      	mov	r7, r1
 800ff88:	e764      	b.n	800fe54 <__ieee754_rem_pio2+0x194>
 800ff8a:	4b1b      	ldr	r3, [pc, #108]	@ (800fff8 <__ieee754_rem_pio2+0x338>)
 800ff8c:	4598      	cmp	r8, r3
 800ff8e:	d935      	bls.n	800fffc <__ieee754_rem_pio2+0x33c>
 800ff90:	4632      	mov	r2, r6
 800ff92:	463b      	mov	r3, r7
 800ff94:	4630      	mov	r0, r6
 800ff96:	4639      	mov	r1, r7
 800ff98:	f7f0 f976 	bl	8000288 <__aeabi_dsub>
 800ff9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ffa0:	e9c4 0100 	strd	r0, r1, [r4]
 800ffa4:	e69e      	b.n	800fce4 <__ieee754_rem_pio2+0x24>
 800ffa6:	bf00      	nop
 800ffa8:	54400000 	.word	0x54400000
 800ffac:	3ff921fb 	.word	0x3ff921fb
 800ffb0:	1a626331 	.word	0x1a626331
 800ffb4:	3dd0b461 	.word	0x3dd0b461
 800ffb8:	1a600000 	.word	0x1a600000
 800ffbc:	3dd0b461 	.word	0x3dd0b461
 800ffc0:	2e037073 	.word	0x2e037073
 800ffc4:	3ba3198a 	.word	0x3ba3198a
 800ffc8:	6dc9c883 	.word	0x6dc9c883
 800ffcc:	3fe45f30 	.word	0x3fe45f30
 800ffd0:	2e000000 	.word	0x2e000000
 800ffd4:	3ba3198a 	.word	0x3ba3198a
 800ffd8:	252049c1 	.word	0x252049c1
 800ffdc:	397b839a 	.word	0x397b839a
 800ffe0:	3fe921fb 	.word	0x3fe921fb
 800ffe4:	4002d97b 	.word	0x4002d97b
 800ffe8:	3ff921fb 	.word	0x3ff921fb
 800ffec:	413921fb 	.word	0x413921fb
 800fff0:	3fe00000 	.word	0x3fe00000
 800fff4:	080117c8 	.word	0x080117c8
 800fff8:	7fefffff 	.word	0x7fefffff
 800fffc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010000:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010004:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010008:	4630      	mov	r0, r6
 801000a:	460f      	mov	r7, r1
 801000c:	f7f0 fda4 	bl	8000b58 <__aeabi_d2iz>
 8010010:	f7f0 fa88 	bl	8000524 <__aeabi_i2d>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4630      	mov	r0, r6
 801001a:	4639      	mov	r1, r7
 801001c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010020:	f7f0 f932 	bl	8000288 <__aeabi_dsub>
 8010024:	4b22      	ldr	r3, [pc, #136]	@ (80100b0 <__ieee754_rem_pio2+0x3f0>)
 8010026:	2200      	movs	r2, #0
 8010028:	f7f0 fae6 	bl	80005f8 <__aeabi_dmul>
 801002c:	460f      	mov	r7, r1
 801002e:	4606      	mov	r6, r0
 8010030:	f7f0 fd92 	bl	8000b58 <__aeabi_d2iz>
 8010034:	f7f0 fa76 	bl	8000524 <__aeabi_i2d>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4630      	mov	r0, r6
 801003e:	4639      	mov	r1, r7
 8010040:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010044:	f7f0 f920 	bl	8000288 <__aeabi_dsub>
 8010048:	4b19      	ldr	r3, [pc, #100]	@ (80100b0 <__ieee754_rem_pio2+0x3f0>)
 801004a:	2200      	movs	r2, #0
 801004c:	f7f0 fad4 	bl	80005f8 <__aeabi_dmul>
 8010050:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010054:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010058:	f04f 0803 	mov.w	r8, #3
 801005c:	2600      	movs	r6, #0
 801005e:	2700      	movs	r7, #0
 8010060:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010064:	4632      	mov	r2, r6
 8010066:	463b      	mov	r3, r7
 8010068:	46c2      	mov	sl, r8
 801006a:	f108 38ff 	add.w	r8, r8, #4294967295
 801006e:	f7f0 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010072:	2800      	cmp	r0, #0
 8010074:	d1f4      	bne.n	8010060 <__ieee754_rem_pio2+0x3a0>
 8010076:	4b0f      	ldr	r3, [pc, #60]	@ (80100b4 <__ieee754_rem_pio2+0x3f4>)
 8010078:	9301      	str	r3, [sp, #4]
 801007a:	2302      	movs	r3, #2
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	462a      	mov	r2, r5
 8010080:	4653      	mov	r3, sl
 8010082:	4621      	mov	r1, r4
 8010084:	a806      	add	r0, sp, #24
 8010086:	f000 f9b7 	bl	80103f8 <__kernel_rem_pio2>
 801008a:	9b04      	ldr	r3, [sp, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	4605      	mov	r5, r0
 8010090:	f6bf ae53 	bge.w	800fd3a <__ieee754_rem_pio2+0x7a>
 8010094:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010098:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801009c:	e9c4 2300 	strd	r2, r3, [r4]
 80100a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80100a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80100ac:	e740      	b.n	800ff30 <__ieee754_rem_pio2+0x270>
 80100ae:	bf00      	nop
 80100b0:	41700000 	.word	0x41700000
 80100b4:	08011848 	.word	0x08011848

080100b8 <atan>:
 80100b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100bc:	ec55 4b10 	vmov	r4, r5, d0
 80100c0:	4bbf      	ldr	r3, [pc, #764]	@ (80103c0 <atan+0x308>)
 80100c2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80100c6:	429e      	cmp	r6, r3
 80100c8:	46ab      	mov	fp, r5
 80100ca:	d918      	bls.n	80100fe <atan+0x46>
 80100cc:	4bbd      	ldr	r3, [pc, #756]	@ (80103c4 <atan+0x30c>)
 80100ce:	429e      	cmp	r6, r3
 80100d0:	d801      	bhi.n	80100d6 <atan+0x1e>
 80100d2:	d109      	bne.n	80100e8 <atan+0x30>
 80100d4:	b144      	cbz	r4, 80100e8 <atan+0x30>
 80100d6:	4622      	mov	r2, r4
 80100d8:	462b      	mov	r3, r5
 80100da:	4620      	mov	r0, r4
 80100dc:	4629      	mov	r1, r5
 80100de:	f7f0 f8d5 	bl	800028c <__adddf3>
 80100e2:	4604      	mov	r4, r0
 80100e4:	460d      	mov	r5, r1
 80100e6:	e006      	b.n	80100f6 <atan+0x3e>
 80100e8:	f1bb 0f00 	cmp.w	fp, #0
 80100ec:	f340 812b 	ble.w	8010346 <atan+0x28e>
 80100f0:	a597      	add	r5, pc, #604	@ (adr r5, 8010350 <atan+0x298>)
 80100f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80100f6:	ec45 4b10 	vmov	d0, r4, r5
 80100fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100fe:	4bb2      	ldr	r3, [pc, #712]	@ (80103c8 <atan+0x310>)
 8010100:	429e      	cmp	r6, r3
 8010102:	d813      	bhi.n	801012c <atan+0x74>
 8010104:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010108:	429e      	cmp	r6, r3
 801010a:	d80c      	bhi.n	8010126 <atan+0x6e>
 801010c:	a392      	add	r3, pc, #584	@ (adr r3, 8010358 <atan+0x2a0>)
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	4620      	mov	r0, r4
 8010114:	4629      	mov	r1, r5
 8010116:	f7f0 f8b9 	bl	800028c <__adddf3>
 801011a:	4bac      	ldr	r3, [pc, #688]	@ (80103cc <atan+0x314>)
 801011c:	2200      	movs	r2, #0
 801011e:	f7f0 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8010122:	2800      	cmp	r0, #0
 8010124:	d1e7      	bne.n	80100f6 <atan+0x3e>
 8010126:	f04f 3aff 	mov.w	sl, #4294967295
 801012a:	e029      	b.n	8010180 <atan+0xc8>
 801012c:	f000 f95c 	bl	80103e8 <fabs>
 8010130:	4ba7      	ldr	r3, [pc, #668]	@ (80103d0 <atan+0x318>)
 8010132:	429e      	cmp	r6, r3
 8010134:	ec55 4b10 	vmov	r4, r5, d0
 8010138:	f200 80bc 	bhi.w	80102b4 <atan+0x1fc>
 801013c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010140:	429e      	cmp	r6, r3
 8010142:	f200 809e 	bhi.w	8010282 <atan+0x1ca>
 8010146:	4622      	mov	r2, r4
 8010148:	462b      	mov	r3, r5
 801014a:	4620      	mov	r0, r4
 801014c:	4629      	mov	r1, r5
 801014e:	f7f0 f89d 	bl	800028c <__adddf3>
 8010152:	4b9e      	ldr	r3, [pc, #632]	@ (80103cc <atan+0x314>)
 8010154:	2200      	movs	r2, #0
 8010156:	f7f0 f897 	bl	8000288 <__aeabi_dsub>
 801015a:	2200      	movs	r2, #0
 801015c:	4606      	mov	r6, r0
 801015e:	460f      	mov	r7, r1
 8010160:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010164:	4620      	mov	r0, r4
 8010166:	4629      	mov	r1, r5
 8010168:	f7f0 f890 	bl	800028c <__adddf3>
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	4630      	mov	r0, r6
 8010172:	4639      	mov	r1, r7
 8010174:	f7f0 fb6a 	bl	800084c <__aeabi_ddiv>
 8010178:	f04f 0a00 	mov.w	sl, #0
 801017c:	4604      	mov	r4, r0
 801017e:	460d      	mov	r5, r1
 8010180:	4622      	mov	r2, r4
 8010182:	462b      	mov	r3, r5
 8010184:	4620      	mov	r0, r4
 8010186:	4629      	mov	r1, r5
 8010188:	f7f0 fa36 	bl	80005f8 <__aeabi_dmul>
 801018c:	4602      	mov	r2, r0
 801018e:	460b      	mov	r3, r1
 8010190:	4680      	mov	r8, r0
 8010192:	4689      	mov	r9, r1
 8010194:	f7f0 fa30 	bl	80005f8 <__aeabi_dmul>
 8010198:	a371      	add	r3, pc, #452	@ (adr r3, 8010360 <atan+0x2a8>)
 801019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019e:	4606      	mov	r6, r0
 80101a0:	460f      	mov	r7, r1
 80101a2:	f7f0 fa29 	bl	80005f8 <__aeabi_dmul>
 80101a6:	a370      	add	r3, pc, #448	@ (adr r3, 8010368 <atan+0x2b0>)
 80101a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ac:	f7f0 f86e 	bl	800028c <__adddf3>
 80101b0:	4632      	mov	r2, r6
 80101b2:	463b      	mov	r3, r7
 80101b4:	f7f0 fa20 	bl	80005f8 <__aeabi_dmul>
 80101b8:	a36d      	add	r3, pc, #436	@ (adr r3, 8010370 <atan+0x2b8>)
 80101ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101be:	f7f0 f865 	bl	800028c <__adddf3>
 80101c2:	4632      	mov	r2, r6
 80101c4:	463b      	mov	r3, r7
 80101c6:	f7f0 fa17 	bl	80005f8 <__aeabi_dmul>
 80101ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8010378 <atan+0x2c0>)
 80101cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d0:	f7f0 f85c 	bl	800028c <__adddf3>
 80101d4:	4632      	mov	r2, r6
 80101d6:	463b      	mov	r3, r7
 80101d8:	f7f0 fa0e 	bl	80005f8 <__aeabi_dmul>
 80101dc:	a368      	add	r3, pc, #416	@ (adr r3, 8010380 <atan+0x2c8>)
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	f7f0 f853 	bl	800028c <__adddf3>
 80101e6:	4632      	mov	r2, r6
 80101e8:	463b      	mov	r3, r7
 80101ea:	f7f0 fa05 	bl	80005f8 <__aeabi_dmul>
 80101ee:	a366      	add	r3, pc, #408	@ (adr r3, 8010388 <atan+0x2d0>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	f7f0 f84a 	bl	800028c <__adddf3>
 80101f8:	4642      	mov	r2, r8
 80101fa:	464b      	mov	r3, r9
 80101fc:	f7f0 f9fc 	bl	80005f8 <__aeabi_dmul>
 8010200:	a363      	add	r3, pc, #396	@ (adr r3, 8010390 <atan+0x2d8>)
 8010202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010206:	4680      	mov	r8, r0
 8010208:	4689      	mov	r9, r1
 801020a:	4630      	mov	r0, r6
 801020c:	4639      	mov	r1, r7
 801020e:	f7f0 f9f3 	bl	80005f8 <__aeabi_dmul>
 8010212:	a361      	add	r3, pc, #388	@ (adr r3, 8010398 <atan+0x2e0>)
 8010214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010218:	f7f0 f836 	bl	8000288 <__aeabi_dsub>
 801021c:	4632      	mov	r2, r6
 801021e:	463b      	mov	r3, r7
 8010220:	f7f0 f9ea 	bl	80005f8 <__aeabi_dmul>
 8010224:	a35e      	add	r3, pc, #376	@ (adr r3, 80103a0 <atan+0x2e8>)
 8010226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022a:	f7f0 f82d 	bl	8000288 <__aeabi_dsub>
 801022e:	4632      	mov	r2, r6
 8010230:	463b      	mov	r3, r7
 8010232:	f7f0 f9e1 	bl	80005f8 <__aeabi_dmul>
 8010236:	a35c      	add	r3, pc, #368	@ (adr r3, 80103a8 <atan+0x2f0>)
 8010238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023c:	f7f0 f824 	bl	8000288 <__aeabi_dsub>
 8010240:	4632      	mov	r2, r6
 8010242:	463b      	mov	r3, r7
 8010244:	f7f0 f9d8 	bl	80005f8 <__aeabi_dmul>
 8010248:	a359      	add	r3, pc, #356	@ (adr r3, 80103b0 <atan+0x2f8>)
 801024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024e:	f7f0 f81b 	bl	8000288 <__aeabi_dsub>
 8010252:	4632      	mov	r2, r6
 8010254:	463b      	mov	r3, r7
 8010256:	f7f0 f9cf 	bl	80005f8 <__aeabi_dmul>
 801025a:	4602      	mov	r2, r0
 801025c:	460b      	mov	r3, r1
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 f813 	bl	800028c <__adddf3>
 8010266:	4622      	mov	r2, r4
 8010268:	462b      	mov	r3, r5
 801026a:	f7f0 f9c5 	bl	80005f8 <__aeabi_dmul>
 801026e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010272:	4602      	mov	r2, r0
 8010274:	460b      	mov	r3, r1
 8010276:	d148      	bne.n	801030a <atan+0x252>
 8010278:	4620      	mov	r0, r4
 801027a:	4629      	mov	r1, r5
 801027c:	f7f0 f804 	bl	8000288 <__aeabi_dsub>
 8010280:	e72f      	b.n	80100e2 <atan+0x2a>
 8010282:	4b52      	ldr	r3, [pc, #328]	@ (80103cc <atan+0x314>)
 8010284:	2200      	movs	r2, #0
 8010286:	4620      	mov	r0, r4
 8010288:	4629      	mov	r1, r5
 801028a:	f7ef fffd 	bl	8000288 <__aeabi_dsub>
 801028e:	4b4f      	ldr	r3, [pc, #316]	@ (80103cc <atan+0x314>)
 8010290:	4606      	mov	r6, r0
 8010292:	460f      	mov	r7, r1
 8010294:	2200      	movs	r2, #0
 8010296:	4620      	mov	r0, r4
 8010298:	4629      	mov	r1, r5
 801029a:	f7ef fff7 	bl	800028c <__adddf3>
 801029e:	4602      	mov	r2, r0
 80102a0:	460b      	mov	r3, r1
 80102a2:	4630      	mov	r0, r6
 80102a4:	4639      	mov	r1, r7
 80102a6:	f7f0 fad1 	bl	800084c <__aeabi_ddiv>
 80102aa:	f04f 0a01 	mov.w	sl, #1
 80102ae:	4604      	mov	r4, r0
 80102b0:	460d      	mov	r5, r1
 80102b2:	e765      	b.n	8010180 <atan+0xc8>
 80102b4:	4b47      	ldr	r3, [pc, #284]	@ (80103d4 <atan+0x31c>)
 80102b6:	429e      	cmp	r6, r3
 80102b8:	d21c      	bcs.n	80102f4 <atan+0x23c>
 80102ba:	4b47      	ldr	r3, [pc, #284]	@ (80103d8 <atan+0x320>)
 80102bc:	2200      	movs	r2, #0
 80102be:	4620      	mov	r0, r4
 80102c0:	4629      	mov	r1, r5
 80102c2:	f7ef ffe1 	bl	8000288 <__aeabi_dsub>
 80102c6:	4b44      	ldr	r3, [pc, #272]	@ (80103d8 <atan+0x320>)
 80102c8:	4606      	mov	r6, r0
 80102ca:	460f      	mov	r7, r1
 80102cc:	2200      	movs	r2, #0
 80102ce:	4620      	mov	r0, r4
 80102d0:	4629      	mov	r1, r5
 80102d2:	f7f0 f991 	bl	80005f8 <__aeabi_dmul>
 80102d6:	4b3d      	ldr	r3, [pc, #244]	@ (80103cc <atan+0x314>)
 80102d8:	2200      	movs	r2, #0
 80102da:	f7ef ffd7 	bl	800028c <__adddf3>
 80102de:	4602      	mov	r2, r0
 80102e0:	460b      	mov	r3, r1
 80102e2:	4630      	mov	r0, r6
 80102e4:	4639      	mov	r1, r7
 80102e6:	f7f0 fab1 	bl	800084c <__aeabi_ddiv>
 80102ea:	f04f 0a02 	mov.w	sl, #2
 80102ee:	4604      	mov	r4, r0
 80102f0:	460d      	mov	r5, r1
 80102f2:	e745      	b.n	8010180 <atan+0xc8>
 80102f4:	4622      	mov	r2, r4
 80102f6:	462b      	mov	r3, r5
 80102f8:	4938      	ldr	r1, [pc, #224]	@ (80103dc <atan+0x324>)
 80102fa:	2000      	movs	r0, #0
 80102fc:	f7f0 faa6 	bl	800084c <__aeabi_ddiv>
 8010300:	f04f 0a03 	mov.w	sl, #3
 8010304:	4604      	mov	r4, r0
 8010306:	460d      	mov	r5, r1
 8010308:	e73a      	b.n	8010180 <atan+0xc8>
 801030a:	4b35      	ldr	r3, [pc, #212]	@ (80103e0 <atan+0x328>)
 801030c:	4e35      	ldr	r6, [pc, #212]	@ (80103e4 <atan+0x32c>)
 801030e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010316:	f7ef ffb7 	bl	8000288 <__aeabi_dsub>
 801031a:	4622      	mov	r2, r4
 801031c:	462b      	mov	r3, r5
 801031e:	f7ef ffb3 	bl	8000288 <__aeabi_dsub>
 8010322:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010326:	4602      	mov	r2, r0
 8010328:	460b      	mov	r3, r1
 801032a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801032e:	f7ef ffab 	bl	8000288 <__aeabi_dsub>
 8010332:	f1bb 0f00 	cmp.w	fp, #0
 8010336:	4604      	mov	r4, r0
 8010338:	460d      	mov	r5, r1
 801033a:	f6bf aedc 	bge.w	80100f6 <atan+0x3e>
 801033e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010342:	461d      	mov	r5, r3
 8010344:	e6d7      	b.n	80100f6 <atan+0x3e>
 8010346:	a51c      	add	r5, pc, #112	@ (adr r5, 80103b8 <atan+0x300>)
 8010348:	e9d5 4500 	ldrd	r4, r5, [r5]
 801034c:	e6d3      	b.n	80100f6 <atan+0x3e>
 801034e:	bf00      	nop
 8010350:	54442d18 	.word	0x54442d18
 8010354:	3ff921fb 	.word	0x3ff921fb
 8010358:	8800759c 	.word	0x8800759c
 801035c:	7e37e43c 	.word	0x7e37e43c
 8010360:	e322da11 	.word	0xe322da11
 8010364:	3f90ad3a 	.word	0x3f90ad3a
 8010368:	24760deb 	.word	0x24760deb
 801036c:	3fa97b4b 	.word	0x3fa97b4b
 8010370:	a0d03d51 	.word	0xa0d03d51
 8010374:	3fb10d66 	.word	0x3fb10d66
 8010378:	c54c206e 	.word	0xc54c206e
 801037c:	3fb745cd 	.word	0x3fb745cd
 8010380:	920083ff 	.word	0x920083ff
 8010384:	3fc24924 	.word	0x3fc24924
 8010388:	5555550d 	.word	0x5555550d
 801038c:	3fd55555 	.word	0x3fd55555
 8010390:	2c6a6c2f 	.word	0x2c6a6c2f
 8010394:	bfa2b444 	.word	0xbfa2b444
 8010398:	52defd9a 	.word	0x52defd9a
 801039c:	3fadde2d 	.word	0x3fadde2d
 80103a0:	af749a6d 	.word	0xaf749a6d
 80103a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80103a8:	fe231671 	.word	0xfe231671
 80103ac:	3fbc71c6 	.word	0x3fbc71c6
 80103b0:	9998ebc4 	.word	0x9998ebc4
 80103b4:	3fc99999 	.word	0x3fc99999
 80103b8:	54442d18 	.word	0x54442d18
 80103bc:	bff921fb 	.word	0xbff921fb
 80103c0:	440fffff 	.word	0x440fffff
 80103c4:	7ff00000 	.word	0x7ff00000
 80103c8:	3fdbffff 	.word	0x3fdbffff
 80103cc:	3ff00000 	.word	0x3ff00000
 80103d0:	3ff2ffff 	.word	0x3ff2ffff
 80103d4:	40038000 	.word	0x40038000
 80103d8:	3ff80000 	.word	0x3ff80000
 80103dc:	bff00000 	.word	0xbff00000
 80103e0:	08011950 	.word	0x08011950
 80103e4:	08011970 	.word	0x08011970

080103e8 <fabs>:
 80103e8:	ec51 0b10 	vmov	r0, r1, d0
 80103ec:	4602      	mov	r2, r0
 80103ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80103f2:	ec43 2b10 	vmov	d0, r2, r3
 80103f6:	4770      	bx	lr

080103f8 <__kernel_rem_pio2>:
 80103f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fc:	ed2d 8b02 	vpush	{d8}
 8010400:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010404:	f112 0f14 	cmn.w	r2, #20
 8010408:	9306      	str	r3, [sp, #24]
 801040a:	9104      	str	r1, [sp, #16]
 801040c:	4bbe      	ldr	r3, [pc, #760]	@ (8010708 <__kernel_rem_pio2+0x310>)
 801040e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010410:	9008      	str	r0, [sp, #32]
 8010412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	9b06      	ldr	r3, [sp, #24]
 801041a:	f103 33ff 	add.w	r3, r3, #4294967295
 801041e:	bfa8      	it	ge
 8010420:	1ed4      	subge	r4, r2, #3
 8010422:	9305      	str	r3, [sp, #20]
 8010424:	bfb2      	itee	lt
 8010426:	2400      	movlt	r4, #0
 8010428:	2318      	movge	r3, #24
 801042a:	fb94 f4f3 	sdivge	r4, r4, r3
 801042e:	f06f 0317 	mvn.w	r3, #23
 8010432:	fb04 3303 	mla	r3, r4, r3, r3
 8010436:	eb03 0b02 	add.w	fp, r3, r2
 801043a:	9b00      	ldr	r3, [sp, #0]
 801043c:	9a05      	ldr	r2, [sp, #20]
 801043e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80106f8 <__kernel_rem_pio2+0x300>
 8010442:	eb03 0802 	add.w	r8, r3, r2
 8010446:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010448:	1aa7      	subs	r7, r4, r2
 801044a:	ae20      	add	r6, sp, #128	@ 0x80
 801044c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010450:	2500      	movs	r5, #0
 8010452:	4545      	cmp	r5, r8
 8010454:	dd13      	ble.n	801047e <__kernel_rem_pio2+0x86>
 8010456:	9b06      	ldr	r3, [sp, #24]
 8010458:	aa20      	add	r2, sp, #128	@ 0x80
 801045a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801045e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010462:	f04f 0800 	mov.w	r8, #0
 8010466:	9b00      	ldr	r3, [sp, #0]
 8010468:	4598      	cmp	r8, r3
 801046a:	dc31      	bgt.n	80104d0 <__kernel_rem_pio2+0xd8>
 801046c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80106f8 <__kernel_rem_pio2+0x300>
 8010470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010478:	462f      	mov	r7, r5
 801047a:	2600      	movs	r6, #0
 801047c:	e01b      	b.n	80104b6 <__kernel_rem_pio2+0xbe>
 801047e:	42ef      	cmn	r7, r5
 8010480:	d407      	bmi.n	8010492 <__kernel_rem_pio2+0x9a>
 8010482:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010486:	f7f0 f84d 	bl	8000524 <__aeabi_i2d>
 801048a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801048e:	3501      	adds	r5, #1
 8010490:	e7df      	b.n	8010452 <__kernel_rem_pio2+0x5a>
 8010492:	ec51 0b18 	vmov	r0, r1, d8
 8010496:	e7f8      	b.n	801048a <__kernel_rem_pio2+0x92>
 8010498:	e9d7 2300 	ldrd	r2, r3, [r7]
 801049c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80104a0:	f7f0 f8aa 	bl	80005f8 <__aeabi_dmul>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104ac:	f7ef feee 	bl	800028c <__adddf3>
 80104b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104b4:	3601      	adds	r6, #1
 80104b6:	9b05      	ldr	r3, [sp, #20]
 80104b8:	429e      	cmp	r6, r3
 80104ba:	f1a7 0708 	sub.w	r7, r7, #8
 80104be:	ddeb      	ble.n	8010498 <__kernel_rem_pio2+0xa0>
 80104c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104c4:	f108 0801 	add.w	r8, r8, #1
 80104c8:	ecaa 7b02 	vstmia	sl!, {d7}
 80104cc:	3508      	adds	r5, #8
 80104ce:	e7ca      	b.n	8010466 <__kernel_rem_pio2+0x6e>
 80104d0:	9b00      	ldr	r3, [sp, #0]
 80104d2:	f8dd 8000 	ldr.w	r8, [sp]
 80104d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80104d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80104de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80104e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80104e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80104e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80104ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104ec:	ab98      	add	r3, sp, #608	@ 0x260
 80104ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80104f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80104f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80104fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80104fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010502:	46a1      	mov	r9, r4
 8010504:	46c2      	mov	sl, r8
 8010506:	f1ba 0f00 	cmp.w	sl, #0
 801050a:	f1a5 0508 	sub.w	r5, r5, #8
 801050e:	dc77      	bgt.n	8010600 <__kernel_rem_pio2+0x208>
 8010510:	4658      	mov	r0, fp
 8010512:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010516:	f000 fac7 	bl	8010aa8 <scalbn>
 801051a:	ec57 6b10 	vmov	r6, r7, d0
 801051e:	2200      	movs	r2, #0
 8010520:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010524:	4630      	mov	r0, r6
 8010526:	4639      	mov	r1, r7
 8010528:	f7f0 f866 	bl	80005f8 <__aeabi_dmul>
 801052c:	ec41 0b10 	vmov	d0, r0, r1
 8010530:	f000 fb3a 	bl	8010ba8 <floor>
 8010534:	4b75      	ldr	r3, [pc, #468]	@ (801070c <__kernel_rem_pio2+0x314>)
 8010536:	ec51 0b10 	vmov	r0, r1, d0
 801053a:	2200      	movs	r2, #0
 801053c:	f7f0 f85c 	bl	80005f8 <__aeabi_dmul>
 8010540:	4602      	mov	r2, r0
 8010542:	460b      	mov	r3, r1
 8010544:	4630      	mov	r0, r6
 8010546:	4639      	mov	r1, r7
 8010548:	f7ef fe9e 	bl	8000288 <__aeabi_dsub>
 801054c:	460f      	mov	r7, r1
 801054e:	4606      	mov	r6, r0
 8010550:	f7f0 fb02 	bl	8000b58 <__aeabi_d2iz>
 8010554:	9002      	str	r0, [sp, #8]
 8010556:	f7ef ffe5 	bl	8000524 <__aeabi_i2d>
 801055a:	4602      	mov	r2, r0
 801055c:	460b      	mov	r3, r1
 801055e:	4630      	mov	r0, r6
 8010560:	4639      	mov	r1, r7
 8010562:	f7ef fe91 	bl	8000288 <__aeabi_dsub>
 8010566:	f1bb 0f00 	cmp.w	fp, #0
 801056a:	4606      	mov	r6, r0
 801056c:	460f      	mov	r7, r1
 801056e:	dd6c      	ble.n	801064a <__kernel_rem_pio2+0x252>
 8010570:	f108 31ff 	add.w	r1, r8, #4294967295
 8010574:	ab0c      	add	r3, sp, #48	@ 0x30
 8010576:	9d02      	ldr	r5, [sp, #8]
 8010578:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801057c:	f1cb 0018 	rsb	r0, fp, #24
 8010580:	fa43 f200 	asr.w	r2, r3, r0
 8010584:	4415      	add	r5, r2
 8010586:	4082      	lsls	r2, r0
 8010588:	1a9b      	subs	r3, r3, r2
 801058a:	aa0c      	add	r2, sp, #48	@ 0x30
 801058c:	9502      	str	r5, [sp, #8]
 801058e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010592:	f1cb 0217 	rsb	r2, fp, #23
 8010596:	fa43 f902 	asr.w	r9, r3, r2
 801059a:	f1b9 0f00 	cmp.w	r9, #0
 801059e:	dd64      	ble.n	801066a <__kernel_rem_pio2+0x272>
 80105a0:	9b02      	ldr	r3, [sp, #8]
 80105a2:	2200      	movs	r2, #0
 80105a4:	3301      	adds	r3, #1
 80105a6:	9302      	str	r3, [sp, #8]
 80105a8:	4615      	mov	r5, r2
 80105aa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80105ae:	4590      	cmp	r8, r2
 80105b0:	f300 80b8 	bgt.w	8010724 <__kernel_rem_pio2+0x32c>
 80105b4:	f1bb 0f00 	cmp.w	fp, #0
 80105b8:	dd07      	ble.n	80105ca <__kernel_rem_pio2+0x1d2>
 80105ba:	f1bb 0f01 	cmp.w	fp, #1
 80105be:	f000 80bf 	beq.w	8010740 <__kernel_rem_pio2+0x348>
 80105c2:	f1bb 0f02 	cmp.w	fp, #2
 80105c6:	f000 80c6 	beq.w	8010756 <__kernel_rem_pio2+0x35e>
 80105ca:	f1b9 0f02 	cmp.w	r9, #2
 80105ce:	d14c      	bne.n	801066a <__kernel_rem_pio2+0x272>
 80105d0:	4632      	mov	r2, r6
 80105d2:	463b      	mov	r3, r7
 80105d4:	494e      	ldr	r1, [pc, #312]	@ (8010710 <__kernel_rem_pio2+0x318>)
 80105d6:	2000      	movs	r0, #0
 80105d8:	f7ef fe56 	bl	8000288 <__aeabi_dsub>
 80105dc:	4606      	mov	r6, r0
 80105de:	460f      	mov	r7, r1
 80105e0:	2d00      	cmp	r5, #0
 80105e2:	d042      	beq.n	801066a <__kernel_rem_pio2+0x272>
 80105e4:	4658      	mov	r0, fp
 80105e6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8010700 <__kernel_rem_pio2+0x308>
 80105ea:	f000 fa5d 	bl	8010aa8 <scalbn>
 80105ee:	4630      	mov	r0, r6
 80105f0:	4639      	mov	r1, r7
 80105f2:	ec53 2b10 	vmov	r2, r3, d0
 80105f6:	f7ef fe47 	bl	8000288 <__aeabi_dsub>
 80105fa:	4606      	mov	r6, r0
 80105fc:	460f      	mov	r7, r1
 80105fe:	e034      	b.n	801066a <__kernel_rem_pio2+0x272>
 8010600:	4b44      	ldr	r3, [pc, #272]	@ (8010714 <__kernel_rem_pio2+0x31c>)
 8010602:	2200      	movs	r2, #0
 8010604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010608:	f7ef fff6 	bl	80005f8 <__aeabi_dmul>
 801060c:	f7f0 faa4 	bl	8000b58 <__aeabi_d2iz>
 8010610:	f7ef ff88 	bl	8000524 <__aeabi_i2d>
 8010614:	4b40      	ldr	r3, [pc, #256]	@ (8010718 <__kernel_rem_pio2+0x320>)
 8010616:	2200      	movs	r2, #0
 8010618:	4606      	mov	r6, r0
 801061a:	460f      	mov	r7, r1
 801061c:	f7ef ffec 	bl	80005f8 <__aeabi_dmul>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010628:	f7ef fe2e 	bl	8000288 <__aeabi_dsub>
 801062c:	f7f0 fa94 	bl	8000b58 <__aeabi_d2iz>
 8010630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010634:	f849 0b04 	str.w	r0, [r9], #4
 8010638:	4639      	mov	r1, r7
 801063a:	4630      	mov	r0, r6
 801063c:	f7ef fe26 	bl	800028c <__adddf3>
 8010640:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010648:	e75d      	b.n	8010506 <__kernel_rem_pio2+0x10e>
 801064a:	d107      	bne.n	801065c <__kernel_rem_pio2+0x264>
 801064c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010650:	aa0c      	add	r2, sp, #48	@ 0x30
 8010652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010656:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801065a:	e79e      	b.n	801059a <__kernel_rem_pio2+0x1a2>
 801065c:	4b2f      	ldr	r3, [pc, #188]	@ (801071c <__kernel_rem_pio2+0x324>)
 801065e:	2200      	movs	r2, #0
 8010660:	f7f0 fa50 	bl	8000b04 <__aeabi_dcmpge>
 8010664:	2800      	cmp	r0, #0
 8010666:	d143      	bne.n	80106f0 <__kernel_rem_pio2+0x2f8>
 8010668:	4681      	mov	r9, r0
 801066a:	2200      	movs	r2, #0
 801066c:	2300      	movs	r3, #0
 801066e:	4630      	mov	r0, r6
 8010670:	4639      	mov	r1, r7
 8010672:	f7f0 fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 8010676:	2800      	cmp	r0, #0
 8010678:	f000 80bf 	beq.w	80107fa <__kernel_rem_pio2+0x402>
 801067c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010680:	2200      	movs	r2, #0
 8010682:	9900      	ldr	r1, [sp, #0]
 8010684:	428b      	cmp	r3, r1
 8010686:	da6e      	bge.n	8010766 <__kernel_rem_pio2+0x36e>
 8010688:	2a00      	cmp	r2, #0
 801068a:	f000 8089 	beq.w	80107a0 <__kernel_rem_pio2+0x3a8>
 801068e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010692:	ab0c      	add	r3, sp, #48	@ 0x30
 8010694:	f1ab 0b18 	sub.w	fp, fp, #24
 8010698:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d0f6      	beq.n	801068e <__kernel_rem_pio2+0x296>
 80106a0:	4658      	mov	r0, fp
 80106a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8010700 <__kernel_rem_pio2+0x308>
 80106a6:	f000 f9ff 	bl	8010aa8 <scalbn>
 80106aa:	f108 0301 	add.w	r3, r8, #1
 80106ae:	00da      	lsls	r2, r3, #3
 80106b0:	9205      	str	r2, [sp, #20]
 80106b2:	ec55 4b10 	vmov	r4, r5, d0
 80106b6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80106b8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8010714 <__kernel_rem_pio2+0x31c>
 80106bc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80106c0:	4646      	mov	r6, r8
 80106c2:	f04f 0a00 	mov.w	sl, #0
 80106c6:	2e00      	cmp	r6, #0
 80106c8:	f280 80cf 	bge.w	801086a <__kernel_rem_pio2+0x472>
 80106cc:	4644      	mov	r4, r8
 80106ce:	2c00      	cmp	r4, #0
 80106d0:	f2c0 80fd 	blt.w	80108ce <__kernel_rem_pio2+0x4d6>
 80106d4:	4b12      	ldr	r3, [pc, #72]	@ (8010720 <__kernel_rem_pio2+0x328>)
 80106d6:	461f      	mov	r7, r3
 80106d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80106da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106de:	9306      	str	r3, [sp, #24]
 80106e0:	f04f 0a00 	mov.w	sl, #0
 80106e4:	f04f 0b00 	mov.w	fp, #0
 80106e8:	2600      	movs	r6, #0
 80106ea:	eba8 0504 	sub.w	r5, r8, r4
 80106ee:	e0e2      	b.n	80108b6 <__kernel_rem_pio2+0x4be>
 80106f0:	f04f 0902 	mov.w	r9, #2
 80106f4:	e754      	b.n	80105a0 <__kernel_rem_pio2+0x1a8>
 80106f6:	bf00      	nop
	...
 8010704:	3ff00000 	.word	0x3ff00000
 8010708:	080119d0 	.word	0x080119d0
 801070c:	40200000 	.word	0x40200000
 8010710:	3ff00000 	.word	0x3ff00000
 8010714:	3e700000 	.word	0x3e700000
 8010718:	41700000 	.word	0x41700000
 801071c:	3fe00000 	.word	0x3fe00000
 8010720:	08011990 	.word	0x08011990
 8010724:	f854 3b04 	ldr.w	r3, [r4], #4
 8010728:	b945      	cbnz	r5, 801073c <__kernel_rem_pio2+0x344>
 801072a:	b123      	cbz	r3, 8010736 <__kernel_rem_pio2+0x33e>
 801072c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010730:	f844 3c04 	str.w	r3, [r4, #-4]
 8010734:	2301      	movs	r3, #1
 8010736:	3201      	adds	r2, #1
 8010738:	461d      	mov	r5, r3
 801073a:	e738      	b.n	80105ae <__kernel_rem_pio2+0x1b6>
 801073c:	1acb      	subs	r3, r1, r3
 801073e:	e7f7      	b.n	8010730 <__kernel_rem_pio2+0x338>
 8010740:	f108 32ff 	add.w	r2, r8, #4294967295
 8010744:	ab0c      	add	r3, sp, #48	@ 0x30
 8010746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801074a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801074e:	a90c      	add	r1, sp, #48	@ 0x30
 8010750:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010754:	e739      	b.n	80105ca <__kernel_rem_pio2+0x1d2>
 8010756:	f108 32ff 	add.w	r2, r8, #4294967295
 801075a:	ab0c      	add	r3, sp, #48	@ 0x30
 801075c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010760:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010764:	e7f3      	b.n	801074e <__kernel_rem_pio2+0x356>
 8010766:	a90c      	add	r1, sp, #48	@ 0x30
 8010768:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801076c:	3b01      	subs	r3, #1
 801076e:	430a      	orrs	r2, r1
 8010770:	e787      	b.n	8010682 <__kernel_rem_pio2+0x28a>
 8010772:	3401      	adds	r4, #1
 8010774:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010778:	2a00      	cmp	r2, #0
 801077a:	d0fa      	beq.n	8010772 <__kernel_rem_pio2+0x37a>
 801077c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801077e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010782:	eb0d 0503 	add.w	r5, sp, r3
 8010786:	9b06      	ldr	r3, [sp, #24]
 8010788:	aa20      	add	r2, sp, #128	@ 0x80
 801078a:	4443      	add	r3, r8
 801078c:	f108 0701 	add.w	r7, r8, #1
 8010790:	3d98      	subs	r5, #152	@ 0x98
 8010792:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010796:	4444      	add	r4, r8
 8010798:	42bc      	cmp	r4, r7
 801079a:	da04      	bge.n	80107a6 <__kernel_rem_pio2+0x3ae>
 801079c:	46a0      	mov	r8, r4
 801079e:	e6a2      	b.n	80104e6 <__kernel_rem_pio2+0xee>
 80107a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107a2:	2401      	movs	r4, #1
 80107a4:	e7e6      	b.n	8010774 <__kernel_rem_pio2+0x37c>
 80107a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107a8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80107ac:	f7ef feba 	bl	8000524 <__aeabi_i2d>
 80107b0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8010a78 <__kernel_rem_pio2+0x680>
 80107b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80107b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80107bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107c0:	46b2      	mov	sl, r6
 80107c2:	f04f 0800 	mov.w	r8, #0
 80107c6:	9b05      	ldr	r3, [sp, #20]
 80107c8:	4598      	cmp	r8, r3
 80107ca:	dd05      	ble.n	80107d8 <__kernel_rem_pio2+0x3e0>
 80107cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107d0:	3701      	adds	r7, #1
 80107d2:	eca5 7b02 	vstmia	r5!, {d7}
 80107d6:	e7df      	b.n	8010798 <__kernel_rem_pio2+0x3a0>
 80107d8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80107dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80107e0:	f7ef ff0a 	bl	80005f8 <__aeabi_dmul>
 80107e4:	4602      	mov	r2, r0
 80107e6:	460b      	mov	r3, r1
 80107e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107ec:	f7ef fd4e 	bl	800028c <__adddf3>
 80107f0:	f108 0801 	add.w	r8, r8, #1
 80107f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107f8:	e7e5      	b.n	80107c6 <__kernel_rem_pio2+0x3ce>
 80107fa:	f1cb 0000 	rsb	r0, fp, #0
 80107fe:	ec47 6b10 	vmov	d0, r6, r7
 8010802:	f000 f951 	bl	8010aa8 <scalbn>
 8010806:	ec55 4b10 	vmov	r4, r5, d0
 801080a:	4b9d      	ldr	r3, [pc, #628]	@ (8010a80 <__kernel_rem_pio2+0x688>)
 801080c:	2200      	movs	r2, #0
 801080e:	4620      	mov	r0, r4
 8010810:	4629      	mov	r1, r5
 8010812:	f7f0 f977 	bl	8000b04 <__aeabi_dcmpge>
 8010816:	b300      	cbz	r0, 801085a <__kernel_rem_pio2+0x462>
 8010818:	4b9a      	ldr	r3, [pc, #616]	@ (8010a84 <__kernel_rem_pio2+0x68c>)
 801081a:	2200      	movs	r2, #0
 801081c:	4620      	mov	r0, r4
 801081e:	4629      	mov	r1, r5
 8010820:	f7ef feea 	bl	80005f8 <__aeabi_dmul>
 8010824:	f7f0 f998 	bl	8000b58 <__aeabi_d2iz>
 8010828:	4606      	mov	r6, r0
 801082a:	f7ef fe7b 	bl	8000524 <__aeabi_i2d>
 801082e:	4b94      	ldr	r3, [pc, #592]	@ (8010a80 <__kernel_rem_pio2+0x688>)
 8010830:	2200      	movs	r2, #0
 8010832:	f7ef fee1 	bl	80005f8 <__aeabi_dmul>
 8010836:	460b      	mov	r3, r1
 8010838:	4602      	mov	r2, r0
 801083a:	4629      	mov	r1, r5
 801083c:	4620      	mov	r0, r4
 801083e:	f7ef fd23 	bl	8000288 <__aeabi_dsub>
 8010842:	f7f0 f989 	bl	8000b58 <__aeabi_d2iz>
 8010846:	ab0c      	add	r3, sp, #48	@ 0x30
 8010848:	f10b 0b18 	add.w	fp, fp, #24
 801084c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010850:	f108 0801 	add.w	r8, r8, #1
 8010854:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010858:	e722      	b.n	80106a0 <__kernel_rem_pio2+0x2a8>
 801085a:	4620      	mov	r0, r4
 801085c:	4629      	mov	r1, r5
 801085e:	f7f0 f97b 	bl	8000b58 <__aeabi_d2iz>
 8010862:	ab0c      	add	r3, sp, #48	@ 0x30
 8010864:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010868:	e71a      	b.n	80106a0 <__kernel_rem_pio2+0x2a8>
 801086a:	ab0c      	add	r3, sp, #48	@ 0x30
 801086c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010870:	f7ef fe58 	bl	8000524 <__aeabi_i2d>
 8010874:	4622      	mov	r2, r4
 8010876:	462b      	mov	r3, r5
 8010878:	f7ef febe 	bl	80005f8 <__aeabi_dmul>
 801087c:	4652      	mov	r2, sl
 801087e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010882:	465b      	mov	r3, fp
 8010884:	4620      	mov	r0, r4
 8010886:	4629      	mov	r1, r5
 8010888:	f7ef feb6 	bl	80005f8 <__aeabi_dmul>
 801088c:	3e01      	subs	r6, #1
 801088e:	4604      	mov	r4, r0
 8010890:	460d      	mov	r5, r1
 8010892:	e718      	b.n	80106c6 <__kernel_rem_pio2+0x2ce>
 8010894:	9906      	ldr	r1, [sp, #24]
 8010896:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801089a:	9106      	str	r1, [sp, #24]
 801089c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80108a0:	f7ef feaa 	bl	80005f8 <__aeabi_dmul>
 80108a4:	4602      	mov	r2, r0
 80108a6:	460b      	mov	r3, r1
 80108a8:	4650      	mov	r0, sl
 80108aa:	4659      	mov	r1, fp
 80108ac:	f7ef fcee 	bl	800028c <__adddf3>
 80108b0:	3601      	adds	r6, #1
 80108b2:	4682      	mov	sl, r0
 80108b4:	468b      	mov	fp, r1
 80108b6:	9b00      	ldr	r3, [sp, #0]
 80108b8:	429e      	cmp	r6, r3
 80108ba:	dc01      	bgt.n	80108c0 <__kernel_rem_pio2+0x4c8>
 80108bc:	42b5      	cmp	r5, r6
 80108be:	dae9      	bge.n	8010894 <__kernel_rem_pio2+0x49c>
 80108c0:	ab48      	add	r3, sp, #288	@ 0x120
 80108c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80108c6:	e9c5 ab00 	strd	sl, fp, [r5]
 80108ca:	3c01      	subs	r4, #1
 80108cc:	e6ff      	b.n	80106ce <__kernel_rem_pio2+0x2d6>
 80108ce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	dc0b      	bgt.n	80108ec <__kernel_rem_pio2+0x4f4>
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	dc39      	bgt.n	801094c <__kernel_rem_pio2+0x554>
 80108d8:	d05d      	beq.n	8010996 <__kernel_rem_pio2+0x59e>
 80108da:	9b02      	ldr	r3, [sp, #8]
 80108dc:	f003 0007 	and.w	r0, r3, #7
 80108e0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80108e4:	ecbd 8b02 	vpop	{d8}
 80108e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80108ee:	2b03      	cmp	r3, #3
 80108f0:	d1f3      	bne.n	80108da <__kernel_rem_pio2+0x4e2>
 80108f2:	9b05      	ldr	r3, [sp, #20]
 80108f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80108f8:	eb0d 0403 	add.w	r4, sp, r3
 80108fc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010900:	4625      	mov	r5, r4
 8010902:	46c2      	mov	sl, r8
 8010904:	f1ba 0f00 	cmp.w	sl, #0
 8010908:	f1a5 0508 	sub.w	r5, r5, #8
 801090c:	dc6b      	bgt.n	80109e6 <__kernel_rem_pio2+0x5ee>
 801090e:	4645      	mov	r5, r8
 8010910:	2d01      	cmp	r5, #1
 8010912:	f1a4 0408 	sub.w	r4, r4, #8
 8010916:	f300 8087 	bgt.w	8010a28 <__kernel_rem_pio2+0x630>
 801091a:	9c05      	ldr	r4, [sp, #20]
 801091c:	ab48      	add	r3, sp, #288	@ 0x120
 801091e:	441c      	add	r4, r3
 8010920:	2000      	movs	r0, #0
 8010922:	2100      	movs	r1, #0
 8010924:	f1b8 0f01 	cmp.w	r8, #1
 8010928:	f300 809c 	bgt.w	8010a64 <__kernel_rem_pio2+0x66c>
 801092c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8010930:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8010934:	f1b9 0f00 	cmp.w	r9, #0
 8010938:	f040 80a6 	bne.w	8010a88 <__kernel_rem_pio2+0x690>
 801093c:	9b04      	ldr	r3, [sp, #16]
 801093e:	e9c3 7800 	strd	r7, r8, [r3]
 8010942:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010946:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801094a:	e7c6      	b.n	80108da <__kernel_rem_pio2+0x4e2>
 801094c:	9d05      	ldr	r5, [sp, #20]
 801094e:	ab48      	add	r3, sp, #288	@ 0x120
 8010950:	441d      	add	r5, r3
 8010952:	4644      	mov	r4, r8
 8010954:	2000      	movs	r0, #0
 8010956:	2100      	movs	r1, #0
 8010958:	2c00      	cmp	r4, #0
 801095a:	da35      	bge.n	80109c8 <__kernel_rem_pio2+0x5d0>
 801095c:	f1b9 0f00 	cmp.w	r9, #0
 8010960:	d038      	beq.n	80109d4 <__kernel_rem_pio2+0x5dc>
 8010962:	4602      	mov	r2, r0
 8010964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010968:	9c04      	ldr	r4, [sp, #16]
 801096a:	e9c4 2300 	strd	r2, r3, [r4]
 801096e:	4602      	mov	r2, r0
 8010970:	460b      	mov	r3, r1
 8010972:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8010976:	f7ef fc87 	bl	8000288 <__aeabi_dsub>
 801097a:	ad4a      	add	r5, sp, #296	@ 0x128
 801097c:	2401      	movs	r4, #1
 801097e:	45a0      	cmp	r8, r4
 8010980:	da2b      	bge.n	80109da <__kernel_rem_pio2+0x5e2>
 8010982:	f1b9 0f00 	cmp.w	r9, #0
 8010986:	d002      	beq.n	801098e <__kernel_rem_pio2+0x596>
 8010988:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801098c:	4619      	mov	r1, r3
 801098e:	9b04      	ldr	r3, [sp, #16]
 8010990:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010994:	e7a1      	b.n	80108da <__kernel_rem_pio2+0x4e2>
 8010996:	9c05      	ldr	r4, [sp, #20]
 8010998:	ab48      	add	r3, sp, #288	@ 0x120
 801099a:	441c      	add	r4, r3
 801099c:	2000      	movs	r0, #0
 801099e:	2100      	movs	r1, #0
 80109a0:	f1b8 0f00 	cmp.w	r8, #0
 80109a4:	da09      	bge.n	80109ba <__kernel_rem_pio2+0x5c2>
 80109a6:	f1b9 0f00 	cmp.w	r9, #0
 80109aa:	d002      	beq.n	80109b2 <__kernel_rem_pio2+0x5ba>
 80109ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80109b0:	4619      	mov	r1, r3
 80109b2:	9b04      	ldr	r3, [sp, #16]
 80109b4:	e9c3 0100 	strd	r0, r1, [r3]
 80109b8:	e78f      	b.n	80108da <__kernel_rem_pio2+0x4e2>
 80109ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80109be:	f7ef fc65 	bl	800028c <__adddf3>
 80109c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80109c6:	e7eb      	b.n	80109a0 <__kernel_rem_pio2+0x5a8>
 80109c8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80109cc:	f7ef fc5e 	bl	800028c <__adddf3>
 80109d0:	3c01      	subs	r4, #1
 80109d2:	e7c1      	b.n	8010958 <__kernel_rem_pio2+0x560>
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	e7c6      	b.n	8010968 <__kernel_rem_pio2+0x570>
 80109da:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80109de:	f7ef fc55 	bl	800028c <__adddf3>
 80109e2:	3401      	adds	r4, #1
 80109e4:	e7cb      	b.n	801097e <__kernel_rem_pio2+0x586>
 80109e6:	ed95 7b00 	vldr	d7, [r5]
 80109ea:	ed8d 7b00 	vstr	d7, [sp]
 80109ee:	ed95 7b02 	vldr	d7, [r5, #8]
 80109f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109f6:	ec53 2b17 	vmov	r2, r3, d7
 80109fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80109fe:	f7ef fc45 	bl	800028c <__adddf3>
 8010a02:	4602      	mov	r2, r0
 8010a04:	460b      	mov	r3, r1
 8010a06:	4606      	mov	r6, r0
 8010a08:	460f      	mov	r7, r1
 8010a0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a0e:	f7ef fc3b 	bl	8000288 <__aeabi_dsub>
 8010a12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a16:	f7ef fc39 	bl	800028c <__adddf3>
 8010a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a1e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010a22:	e9c5 6700 	strd	r6, r7, [r5]
 8010a26:	e76d      	b.n	8010904 <__kernel_rem_pio2+0x50c>
 8010a28:	ed94 7b00 	vldr	d7, [r4]
 8010a2c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010a30:	ec51 0b17 	vmov	r0, r1, d7
 8010a34:	4652      	mov	r2, sl
 8010a36:	465b      	mov	r3, fp
 8010a38:	ed8d 7b00 	vstr	d7, [sp]
 8010a3c:	f7ef fc26 	bl	800028c <__adddf3>
 8010a40:	4602      	mov	r2, r0
 8010a42:	460b      	mov	r3, r1
 8010a44:	4606      	mov	r6, r0
 8010a46:	460f      	mov	r7, r1
 8010a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a4c:	f7ef fc1c 	bl	8000288 <__aeabi_dsub>
 8010a50:	4652      	mov	r2, sl
 8010a52:	465b      	mov	r3, fp
 8010a54:	f7ef fc1a 	bl	800028c <__adddf3>
 8010a58:	3d01      	subs	r5, #1
 8010a5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010a5e:	e9c4 6700 	strd	r6, r7, [r4]
 8010a62:	e755      	b.n	8010910 <__kernel_rem_pio2+0x518>
 8010a64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010a68:	f7ef fc10 	bl	800028c <__adddf3>
 8010a6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a70:	e758      	b.n	8010924 <__kernel_rem_pio2+0x52c>
 8010a72:	bf00      	nop
 8010a74:	f3af 8000 	nop.w
	...
 8010a80:	41700000 	.word	0x41700000
 8010a84:	3e700000 	.word	0x3e700000
 8010a88:	9b04      	ldr	r3, [sp, #16]
 8010a8a:	9a04      	ldr	r2, [sp, #16]
 8010a8c:	601f      	str	r7, [r3, #0]
 8010a8e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8010a92:	605c      	str	r4, [r3, #4]
 8010a94:	609d      	str	r5, [r3, #8]
 8010a96:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010a9a:	60d3      	str	r3, [r2, #12]
 8010a9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010aa0:	6110      	str	r0, [r2, #16]
 8010aa2:	6153      	str	r3, [r2, #20]
 8010aa4:	e719      	b.n	80108da <__kernel_rem_pio2+0x4e2>
 8010aa6:	bf00      	nop

08010aa8 <scalbn>:
 8010aa8:	b570      	push	{r4, r5, r6, lr}
 8010aaa:	ec55 4b10 	vmov	r4, r5, d0
 8010aae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	462b      	mov	r3, r5
 8010ab6:	b991      	cbnz	r1, 8010ade <scalbn+0x36>
 8010ab8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010abc:	4323      	orrs	r3, r4
 8010abe:	d03d      	beq.n	8010b3c <scalbn+0x94>
 8010ac0:	4b35      	ldr	r3, [pc, #212]	@ (8010b98 <scalbn+0xf0>)
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	4629      	mov	r1, r5
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f7ef fd96 	bl	80005f8 <__aeabi_dmul>
 8010acc:	4b33      	ldr	r3, [pc, #204]	@ (8010b9c <scalbn+0xf4>)
 8010ace:	429e      	cmp	r6, r3
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	460d      	mov	r5, r1
 8010ad4:	da0f      	bge.n	8010af6 <scalbn+0x4e>
 8010ad6:	a328      	add	r3, pc, #160	@ (adr r3, 8010b78 <scalbn+0xd0>)
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	e01e      	b.n	8010b1c <scalbn+0x74>
 8010ade:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010ae2:	4291      	cmp	r1, r2
 8010ae4:	d10b      	bne.n	8010afe <scalbn+0x56>
 8010ae6:	4622      	mov	r2, r4
 8010ae8:	4620      	mov	r0, r4
 8010aea:	4629      	mov	r1, r5
 8010aec:	f7ef fbce 	bl	800028c <__adddf3>
 8010af0:	4604      	mov	r4, r0
 8010af2:	460d      	mov	r5, r1
 8010af4:	e022      	b.n	8010b3c <scalbn+0x94>
 8010af6:	460b      	mov	r3, r1
 8010af8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010afc:	3936      	subs	r1, #54	@ 0x36
 8010afe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010b02:	4296      	cmp	r6, r2
 8010b04:	dd0d      	ble.n	8010b22 <scalbn+0x7a>
 8010b06:	2d00      	cmp	r5, #0
 8010b08:	a11d      	add	r1, pc, #116	@ (adr r1, 8010b80 <scalbn+0xd8>)
 8010b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b0e:	da02      	bge.n	8010b16 <scalbn+0x6e>
 8010b10:	a11d      	add	r1, pc, #116	@ (adr r1, 8010b88 <scalbn+0xe0>)
 8010b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b16:	a31a      	add	r3, pc, #104	@ (adr r3, 8010b80 <scalbn+0xd8>)
 8010b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1c:	f7ef fd6c 	bl	80005f8 <__aeabi_dmul>
 8010b20:	e7e6      	b.n	8010af0 <scalbn+0x48>
 8010b22:	1872      	adds	r2, r6, r1
 8010b24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010b28:	428a      	cmp	r2, r1
 8010b2a:	dcec      	bgt.n	8010b06 <scalbn+0x5e>
 8010b2c:	2a00      	cmp	r2, #0
 8010b2e:	dd08      	ble.n	8010b42 <scalbn+0x9a>
 8010b30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010b34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010b38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010b3c:	ec45 4b10 	vmov	d0, r4, r5
 8010b40:	bd70      	pop	{r4, r5, r6, pc}
 8010b42:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010b46:	da08      	bge.n	8010b5a <scalbn+0xb2>
 8010b48:	2d00      	cmp	r5, #0
 8010b4a:	a10b      	add	r1, pc, #44	@ (adr r1, 8010b78 <scalbn+0xd0>)
 8010b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b50:	dac1      	bge.n	8010ad6 <scalbn+0x2e>
 8010b52:	a10f      	add	r1, pc, #60	@ (adr r1, 8010b90 <scalbn+0xe8>)
 8010b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b58:	e7bd      	b.n	8010ad6 <scalbn+0x2e>
 8010b5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010b5e:	3236      	adds	r2, #54	@ 0x36
 8010b60:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010b64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010b68:	4620      	mov	r0, r4
 8010b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ba0 <scalbn+0xf8>)
 8010b6c:	4629      	mov	r1, r5
 8010b6e:	2200      	movs	r2, #0
 8010b70:	e7d4      	b.n	8010b1c <scalbn+0x74>
 8010b72:	bf00      	nop
 8010b74:	f3af 8000 	nop.w
 8010b78:	c2f8f359 	.word	0xc2f8f359
 8010b7c:	01a56e1f 	.word	0x01a56e1f
 8010b80:	8800759c 	.word	0x8800759c
 8010b84:	7e37e43c 	.word	0x7e37e43c
 8010b88:	8800759c 	.word	0x8800759c
 8010b8c:	fe37e43c 	.word	0xfe37e43c
 8010b90:	c2f8f359 	.word	0xc2f8f359
 8010b94:	81a56e1f 	.word	0x81a56e1f
 8010b98:	43500000 	.word	0x43500000
 8010b9c:	ffff3cb0 	.word	0xffff3cb0
 8010ba0:	3c900000 	.word	0x3c900000
 8010ba4:	00000000 	.word	0x00000000

08010ba8 <floor>:
 8010ba8:	ec51 0b10 	vmov	r0, r1, d0
 8010bac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010bb8:	2e13      	cmp	r6, #19
 8010bba:	460c      	mov	r4, r1
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	4680      	mov	r8, r0
 8010bc0:	dc34      	bgt.n	8010c2c <floor+0x84>
 8010bc2:	2e00      	cmp	r6, #0
 8010bc4:	da17      	bge.n	8010bf6 <floor+0x4e>
 8010bc6:	a332      	add	r3, pc, #200	@ (adr r3, 8010c90 <floor+0xe8>)
 8010bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bcc:	f7ef fb5e 	bl	800028c <__adddf3>
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	f7ef ffa0 	bl	8000b18 <__aeabi_dcmpgt>
 8010bd8:	b150      	cbz	r0, 8010bf0 <floor+0x48>
 8010bda:	2c00      	cmp	r4, #0
 8010bdc:	da55      	bge.n	8010c8a <floor+0xe2>
 8010bde:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010be2:	432c      	orrs	r4, r5
 8010be4:	2500      	movs	r5, #0
 8010be6:	42ac      	cmp	r4, r5
 8010be8:	4c2b      	ldr	r4, [pc, #172]	@ (8010c98 <floor+0xf0>)
 8010bea:	bf08      	it	eq
 8010bec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	e023      	b.n	8010c3e <floor+0x96>
 8010bf6:	4f29      	ldr	r7, [pc, #164]	@ (8010c9c <floor+0xf4>)
 8010bf8:	4137      	asrs	r7, r6
 8010bfa:	ea01 0307 	and.w	r3, r1, r7
 8010bfe:	4303      	orrs	r3, r0
 8010c00:	d01d      	beq.n	8010c3e <floor+0x96>
 8010c02:	a323      	add	r3, pc, #140	@ (adr r3, 8010c90 <floor+0xe8>)
 8010c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c08:	f7ef fb40 	bl	800028c <__adddf3>
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	2300      	movs	r3, #0
 8010c10:	f7ef ff82 	bl	8000b18 <__aeabi_dcmpgt>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d0eb      	beq.n	8010bf0 <floor+0x48>
 8010c18:	2c00      	cmp	r4, #0
 8010c1a:	bfbe      	ittt	lt
 8010c1c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010c20:	4133      	asrlt	r3, r6
 8010c22:	18e4      	addlt	r4, r4, r3
 8010c24:	ea24 0407 	bic.w	r4, r4, r7
 8010c28:	2500      	movs	r5, #0
 8010c2a:	e7e1      	b.n	8010bf0 <floor+0x48>
 8010c2c:	2e33      	cmp	r6, #51	@ 0x33
 8010c2e:	dd0a      	ble.n	8010c46 <floor+0x9e>
 8010c30:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010c34:	d103      	bne.n	8010c3e <floor+0x96>
 8010c36:	4602      	mov	r2, r0
 8010c38:	460b      	mov	r3, r1
 8010c3a:	f7ef fb27 	bl	800028c <__adddf3>
 8010c3e:	ec41 0b10 	vmov	d0, r0, r1
 8010c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c46:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010c4a:	f04f 37ff 	mov.w	r7, #4294967295
 8010c4e:	40df      	lsrs	r7, r3
 8010c50:	4207      	tst	r7, r0
 8010c52:	d0f4      	beq.n	8010c3e <floor+0x96>
 8010c54:	a30e      	add	r3, pc, #56	@ (adr r3, 8010c90 <floor+0xe8>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	f7ef fb17 	bl	800028c <__adddf3>
 8010c5e:	2200      	movs	r2, #0
 8010c60:	2300      	movs	r3, #0
 8010c62:	f7ef ff59 	bl	8000b18 <__aeabi_dcmpgt>
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d0c2      	beq.n	8010bf0 <floor+0x48>
 8010c6a:	2c00      	cmp	r4, #0
 8010c6c:	da0a      	bge.n	8010c84 <floor+0xdc>
 8010c6e:	2e14      	cmp	r6, #20
 8010c70:	d101      	bne.n	8010c76 <floor+0xce>
 8010c72:	3401      	adds	r4, #1
 8010c74:	e006      	b.n	8010c84 <floor+0xdc>
 8010c76:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	40b3      	lsls	r3, r6
 8010c7e:	441d      	add	r5, r3
 8010c80:	4545      	cmp	r5, r8
 8010c82:	d3f6      	bcc.n	8010c72 <floor+0xca>
 8010c84:	ea25 0507 	bic.w	r5, r5, r7
 8010c88:	e7b2      	b.n	8010bf0 <floor+0x48>
 8010c8a:	2500      	movs	r5, #0
 8010c8c:	462c      	mov	r4, r5
 8010c8e:	e7af      	b.n	8010bf0 <floor+0x48>
 8010c90:	8800759c 	.word	0x8800759c
 8010c94:	7e37e43c 	.word	0x7e37e43c
 8010c98:	bff00000 	.word	0xbff00000
 8010c9c:	000fffff 	.word	0x000fffff

08010ca0 <_init>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	bf00      	nop
 8010ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ca6:	bc08      	pop	{r3}
 8010ca8:	469e      	mov	lr, r3
 8010caa:	4770      	bx	lr

08010cac <_fini>:
 8010cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cae:	bf00      	nop
 8010cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cb2:	bc08      	pop	{r3}
 8010cb4:	469e      	mov	lr, r3
 8010cb6:	4770      	bx	lr
