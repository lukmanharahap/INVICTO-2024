
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ec0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08011050  08011050  00012050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118e8  080118e8  000132c8  2**0
                  CONTENTS
  4 .ARM          00000008  080118e8  080118e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118f0  080118f0  000132c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118f0  080118f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080118f4  080118f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  080118f8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132c8  2**0
                  CONTENTS
 10 .bss          000004b8  200002c8  200002c8  000132c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000780  20000780  000132c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135ea  00000000  00000000  000132f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd1  00000000  00000000  000268e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  000294b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e13  00000000  00000000  0002a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120bb  00000000  00000000  0002b4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000053f7  00000000  00000000  0003d55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00042955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065fc  00000000  00000000  00042998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00048f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011038 	.word	0x08011038

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	08011038 	.word	0x08011038

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f006 fd3f 	bl	8007abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f006 fd37 	bl	8007abc <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(int Vx, int Vy, int W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001154:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff f9df 	bl	8000524 <__aeabi_i2d>
 8001166:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff f9d2 	bl	8000524 <__aeabi_i2d>
 8001180:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_i2d>
 80011a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f867 	bl	8000288 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff f9ae 	bl	8000524 <__aeabi_i2d>
 80011c8:	a3f8      	add	r3, pc, #992	@ (adr r3, 80015ac <Inverse_Kinematics+0x464>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa13 	bl	80005f8 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	a3ee      	add	r3, pc, #952	@ (adr r3, 800159c <Inverse_Kinematics+0x454>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa07 	bl	80005f8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff f84b 	bl	800028c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f990 	bl	8000524 <__aeabi_i2d>
 8001204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001208:	f7ff f9f6 	bl	80005f8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7ff f838 	bl	8000288 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	a3e3      	add	r3, pc, #908	@ (adr r3, 80015b4 <Inverse_Kinematics+0x46c>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9e4 	bl	80005f8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4614      	mov	r4, r2
 8001236:	461d      	mov	r5, r3
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	a3df      	add	r3, pc, #892	@ (adr r3, 80015bc <Inverse_Kinematics+0x474>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f809 	bl	8000288 <__aeabi_dsub>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff f950 	bl	8000524 <__aeabi_i2d>
 8001284:	a3cf      	add	r3, pc, #828	@ (adr r3, 80015c4 <Inverse_Kinematics+0x47c>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9b5 	bl	80005f8 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	461d      	mov	r5, r3
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff f944 	bl	8000524 <__aeabi_i2d>
 800129c:	a3cb      	add	r3, pc, #812	@ (adr r3, 80015cc <Inverse_Kinematics+0x484>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9a9 	bl	80005f8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7fe ffed 	bl	800028c <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f932 	bl	8000524 <__aeabi_i2d>
 80012c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffda 	bl	8000288 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 550 || M1 < -550) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -550 : ((M1 > 0) ? 550 : 0));
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4bab      	ldr	r3, [pc, #684]	@ (8001590 <Inverse_Kinematics+0x448>)
 80012e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012e6:	f7ff fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <Inverse_Kinematics+0x1bc>
 80012f0:	a39d      	add	r3, pc, #628	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012fa:	f7ff fbef 	bl	8000adc <__aeabi_dcmplt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d016      	beq.n	8001332 <Inverse_Kinematics+0x1ea>
 8001304:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8001570 <Inverse_Kinematics+0x428>
 8001308:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800130c:	f00e f9e7 	bl	800f6de <fmax>
 8001310:	eeb0 7a40 	vmov.f32	s14, s0
 8001314:	eef0 7a60 	vmov.f32	s15, s1
 8001318:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8001578 <Inverse_Kinematics+0x430>
 800131c:	eeb0 0a47 	vmov.f32	s0, s14
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	f00e fa05 	bl	800f732 <fmin>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	eef0 7a60 	vmov.f32	s15, s1
 8001330:	e01d      	b.n	800136e <Inverse_Kinematics+0x226>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800133e:	f7ff fbcd 	bl	8000adc <__aeabi_dcmplt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <Inverse_Kinematics+0x206>
 8001348:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001568 <Inverse_Kinematics+0x420>
 800134c:	e00f      	b.n	800136e <Inverse_Kinematics+0x226>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800135a:	f7ff fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <Inverse_Kinematics+0x222>
 8001364:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001580 <Inverse_Kinematics+0x438>
 8001368:	e001      	b.n	800136e <Inverse_Kinematics+0x226>
 800136a:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001588 <Inverse_Kinematics+0x440>
 800136e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 550 || M2 < -550) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -550 : ((M2 > 0) ? 550 : 0));
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b86      	ldr	r3, [pc, #536]	@ (8001590 <Inverse_Kinematics+0x448>)
 8001378:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800137c:	f7ff fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <Inverse_Kinematics+0x252>
 8001386:	a378      	add	r3, pc, #480	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001390:	f7ff fba4 	bl	8000adc <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <Inverse_Kinematics+0x280>
 800139a:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001570 <Inverse_Kinematics+0x428>
 800139e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80013a2:	f00e f99c 	bl	800f6de <fmax>
 80013a6:	eeb0 7a40 	vmov.f32	s14, s0
 80013aa:	eef0 7a60 	vmov.f32	s15, s1
 80013ae:	ed9f 1b72 	vldr	d1, [pc, #456]	@ 8001578 <Inverse_Kinematics+0x430>
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	f00e f9ba 	bl	800f732 <fmin>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	eef0 7a60 	vmov.f32	s15, s1
 80013c6:	e01d      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013d4:	f7ff fb82 	bl	8000adc <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <Inverse_Kinematics+0x29c>
 80013de:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8001568 <Inverse_Kinematics+0x420>
 80013e2:	e00f      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013f0:	f7ff fb92 	bl	8000b18 <__aeabi_dcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <Inverse_Kinematics+0x2b8>
 80013fa:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001580 <Inverse_Kinematics+0x438>
 80013fe:	e001      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 8001400:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001588 <Inverse_Kinematics+0x440>
 8001404:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 550 || M3 < -550) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -550 : ((M3 > 0) ? 550 : 0));
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <Inverse_Kinematics+0x448>)
 800140e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001412:	f7ff fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <Inverse_Kinematics+0x2e8>
 800141c:	a352      	add	r3, pc, #328	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001426:	f7ff fb59 	bl	8000adc <__aeabi_dcmplt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <Inverse_Kinematics+0x316>
 8001430:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001570 <Inverse_Kinematics+0x428>
 8001434:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001438:	f00e f951 	bl	800f6de <fmax>
 800143c:	eeb0 7a40 	vmov.f32	s14, s0
 8001440:	eef0 7a60 	vmov.f32	s15, s1
 8001444:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8001578 <Inverse_Kinematics+0x430>
 8001448:	eeb0 0a47 	vmov.f32	s0, s14
 800144c:	eef0 0a67 	vmov.f32	s1, s15
 8001450:	f00e f96f 	bl	800f732 <fmin>
 8001454:	eeb0 7a40 	vmov.f32	s14, s0
 8001458:	eef0 7a60 	vmov.f32	s15, s1
 800145c:	e01d      	b.n	800149a <Inverse_Kinematics+0x352>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800146a:	f7ff fb37 	bl	8000adc <__aeabi_dcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <Inverse_Kinematics+0x332>
 8001474:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001568 <Inverse_Kinematics+0x420>
 8001478:	e00f      	b.n	800149a <Inverse_Kinematics+0x352>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001486:	f7ff fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <Inverse_Kinematics+0x34e>
 8001490:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001580 <Inverse_Kinematics+0x438>
 8001494:	e001      	b.n	800149a <Inverse_Kinematics+0x352>
 8001496:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001588 <Inverse_Kinematics+0x440>
 800149a:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 550 || M4 < -550) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -550 : ((M4 > 0) ? 550 : 0));
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <Inverse_Kinematics+0x448>)
 80014a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014a8:	f7ff fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <Inverse_Kinematics+0x37e>
 80014b2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014bc:	f7ff fb0e 	bl	8000adc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <Inverse_Kinematics+0x3ac>
 80014c6:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001570 <Inverse_Kinematics+0x428>
 80014ca:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80014ce:	f00e f906 	bl	800f6de <fmax>
 80014d2:	eeb0 7a40 	vmov.f32	s14, s0
 80014d6:	eef0 7a60 	vmov.f32	s15, s1
 80014da:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001578 <Inverse_Kinematics+0x430>
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	f00e f924 	bl	800f732 <fmin>
 80014ea:	eeb0 7a40 	vmov.f32	s14, s0
 80014ee:	eef0 7a60 	vmov.f32	s15, s1
 80014f2:	e01d      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001500:	f7ff faec 	bl	8000adc <__aeabi_dcmplt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <Inverse_Kinematics+0x3c8>
 800150a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001568 <Inverse_Kinematics+0x420>
 800150e:	e00f      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800151c:	f7ff fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <Inverse_Kinematics+0x3e4>
 8001526:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001580 <Inverse_Kinematics+0x438>
 800152a:	e001      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 800152c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001588 <Inverse_Kinematics+0x440>
 8001530:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 8001534:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001538:	2006      	movs	r0, #6
 800153a:	f7ff fd8f 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 800153e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001542:	2008      	movs	r0, #8
 8001544:	f7ff fd8a 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8001548:	ed97 0b06 	vldr	d0, [r7, #24]
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fd85 	bl	800105c <setMotorSpeed>
     setMotorSpeed(7, V4);
 8001552:	ed97 0b04 	vldr	d0, [r7, #16]
 8001556:	2007      	movs	r0, #7
 8001558:	f7ff fd80 	bl	800105c <setMotorSpeed>
}
 800155c:	bf00      	nop
 800155e:	3758      	adds	r7, #88	@ 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	00000000 	.word	0x00000000
 800156c:	c0813000 	.word	0xc0813000
 8001570:	00000000 	.word	0x00000000
 8001574:	c0a45000 	.word	0xc0a45000
 8001578:	00000000 	.word	0x00000000
 800157c:	40a45000 	.word	0x40a45000
 8001580:	00000000 	.word	0x00000000
 8001584:	40813000 	.word	0x40813000
	...
 8001590:	40813000 	.word	0x40813000
 8001594:	66666666 	.word	0x66666666
 8001598:	401e6666 	.word	0x401e6666
 800159c:	667f3bcc 	.word	0x667f3bcc
 80015a0:	bfe6a09e 	.word	0xbfe6a09e
 80015a4:	667f3bcd 	.word	0x667f3bcd
 80015a8:	3fe6a09e 	.word	0x3fe6a09e
 80015ac:	667f3bcd 	.word	0x667f3bcd
 80015b0:	bfe6a09e 	.word	0xbfe6a09e
 80015b4:	667f3bcc 	.word	0x667f3bcc
 80015b8:	3fe6a09e 	.word	0x3fe6a09e
 80015bc:	667f3bce 	.word	0x667f3bce
 80015c0:	bfe6a09e 	.word	0xbfe6a09e
 80015c4:	667f3bce 	.word	0x667f3bce
 80015c8:	3fe6a09e 	.word	0x3fe6a09e
 80015cc:	667f3bcb 	.word	0x667f3bcb
 80015d0:	3fe6a09e 	.word	0x3fe6a09e
 80015d4:	00000000 	.word	0x00000000

080015d8 <putar>:
     setMotorSpeed(4, V3);
     setMotorSpeed(7, V4);
}

void putar(int Vx, int Vy, int W)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b096      	sub	sp, #88	@ 0x58
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 80015e4:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7fe ff97 	bl	8000524 <__aeabi_i2d>
 80015f6:	f20f 4330 	addw	r3, pc, #1072	@ 0x430
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe fffb 	bl	80005f8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	68b8      	ldr	r0, [r7, #8]
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f20f 431c 	addw	r3, pc, #1052	@ 0x41c
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800163a:	f7fe ffdd 	bl	80005f8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4620      	mov	r0, r4
 8001644:	4629      	mov	r1, r5
 8001646:	f7fe fe1f 	bl	8000288 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	a3f7      	add	r3, pc, #988	@ (adr r3, 8001a38 <putar+0x460>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffcb 	bl	80005f8 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4614      	mov	r4, r2
 8001668:	461d      	mov	r5, r3
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f7fe ff5a 	bl	8000524 <__aeabi_i2d>
 8001670:	a3ed      	add	r3, pc, #948	@ (adr r3, 8001a28 <putar+0x450>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ffbf 	bl	80005f8 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f7fe fe03 	bl	800028c <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4614      	mov	r4, r2
 800168c:	461d      	mov	r5, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001698:	f7fe ffae 	bl	80005f8 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fdf0 	bl	8000288 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7fe ff37 	bl	8000524 <__aeabi_i2d>
 80016b6:	a3e2      	add	r3, pc, #904	@ (adr r3, 8001a40 <putar+0x468>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ff9c 	bl	80005f8 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4614      	mov	r4, r2
 80016c6:	461d      	mov	r5, r3
 80016c8:	68b8      	ldr	r0, [r7, #8]
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	a3de      	add	r3, pc, #888	@ (adr r3, 8001a48 <putar+0x470>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ff90 	bl	80005f8 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fdd4 	bl	800028c <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016f6:	f7fe ff7f 	bl	80005f8 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f7fe fdc1 	bl	8000288 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	a3ce      	add	r3, pc, #824	@ (adr r3, 8001a50 <putar+0x478>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4614      	mov	r4, r2
 8001724:	461d      	mov	r5, r3
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f7fe fefc 	bl	8000524 <__aeabi_i2d>
 800172c:	a3ca      	add	r3, pc, #808	@ (adr r3, 8001a58 <putar+0x480>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff61 	bl	80005f8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fda5 	bl	800028c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe feea 	bl	8000524 <__aeabi_i2d>
 8001750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001754:	f7fe ff50 	bl	80005f8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd92 	bl	8000288 <__aeabi_dsub>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 450 || M1 < -450) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -450 : ((M1 > 0) ? 450 : 0));
 800176c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001a10 <putar+0x438>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001776:	f7ff f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <putar+0x1bc>
 8001780:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001a08 <putar+0x430>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800178a:	f7ff f9a7 	bl	8000adc <__aeabi_dcmplt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d016      	beq.n	80017c2 <putar+0x1ea>
 8001794:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 80019f8 <putar+0x420>
 8001798:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800179c:	f00d ff9f 	bl	800f6de <fmax>
 80017a0:	eeb0 7a40 	vmov.f32	s14, s0
 80017a4:	eef0 7a60 	vmov.f32	s15, s1
 80017a8:	ed9f 1b95 	vldr	d1, [pc, #596]	@ 8001a00 <putar+0x428>
 80017ac:	eeb0 0a47 	vmov.f32	s0, s14
 80017b0:	eef0 0a67 	vmov.f32	s1, s15
 80017b4:	f00d ffbd 	bl	800f732 <fmin>
 80017b8:	eeb0 7a40 	vmov.f32	s14, s0
 80017bc:	eef0 7a60 	vmov.f32	s15, s1
 80017c0:	e01d      	b.n	80017fe <putar+0x226>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017ce:	f7ff f985 	bl	8000adc <__aeabi_dcmplt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <putar+0x206>
 80017d8:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8001a08 <putar+0x430>
 80017dc:	e00f      	b.n	80017fe <putar+0x226>
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017ea:	f7ff f995 	bl	8000b18 <__aeabi_dcmpgt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <putar+0x222>
 80017f4:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001a10 <putar+0x438>
 80017f8:	e001      	b.n	80017fe <putar+0x226>
 80017fa:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001a18 <putar+0x440>
 80017fe:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 450 || M2 < -450) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -450 : ((M2 > 0) ? 450 : 0));
 8001802:	a383      	add	r3, pc, #524	@ (adr r3, 8001a10 <putar+0x438>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800180c:	f7ff f984 	bl	8000b18 <__aeabi_dcmpgt>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <putar+0x252>
 8001816:	a37c      	add	r3, pc, #496	@ (adr r3, 8001a08 <putar+0x430>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001820:	f7ff f95c 	bl	8000adc <__aeabi_dcmplt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <putar+0x280>
 800182a:	ed9f 1b73 	vldr	d1, [pc, #460]	@ 80019f8 <putar+0x420>
 800182e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001832:	f00d ff54 	bl	800f6de <fmax>
 8001836:	eeb0 7a40 	vmov.f32	s14, s0
 800183a:	eef0 7a60 	vmov.f32	s15, s1
 800183e:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8001a00 <putar+0x428>
 8001842:	eeb0 0a47 	vmov.f32	s0, s14
 8001846:	eef0 0a67 	vmov.f32	s1, s15
 800184a:	f00d ff72 	bl	800f732 <fmin>
 800184e:	eeb0 7a40 	vmov.f32	s14, s0
 8001852:	eef0 7a60 	vmov.f32	s15, s1
 8001856:	e01d      	b.n	8001894 <putar+0x2bc>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001864:	f7ff f93a 	bl	8000adc <__aeabi_dcmplt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <putar+0x29c>
 800186e:	ed9f 7b66 	vldr	d7, [pc, #408]	@ 8001a08 <putar+0x430>
 8001872:	e00f      	b.n	8001894 <putar+0x2bc>
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001880:	f7ff f94a 	bl	8000b18 <__aeabi_dcmpgt>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <putar+0x2b8>
 800188a:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001a10 <putar+0x438>
 800188e:	e001      	b.n	8001894 <putar+0x2bc>
 8001890:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001a18 <putar+0x440>
 8001894:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 450 || M3 < -450) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -450 : ((M3 > 0) ? 450 : 0));
 8001898:	a35d      	add	r3, pc, #372	@ (adr r3, 8001a10 <putar+0x438>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018a2:	f7ff f939 	bl	8000b18 <__aeabi_dcmpgt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <putar+0x2e8>
 80018ac:	a356      	add	r3, pc, #344	@ (adr r3, 8001a08 <putar+0x430>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018b6:	f7ff f911 	bl	8000adc <__aeabi_dcmplt>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d016      	beq.n	80018ee <putar+0x316>
 80018c0:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 80019f8 <putar+0x420>
 80018c4:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80018c8:	f00d ff09 	bl	800f6de <fmax>
 80018cc:	eeb0 7a40 	vmov.f32	s14, s0
 80018d0:	eef0 7a60 	vmov.f32	s15, s1
 80018d4:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 8001a00 <putar+0x428>
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	f00d ff27 	bl	800f732 <fmin>
 80018e4:	eeb0 7a40 	vmov.f32	s14, s0
 80018e8:	eef0 7a60 	vmov.f32	s15, s1
 80018ec:	e01d      	b.n	800192a <putar+0x352>
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018fa:	f7ff f8ef 	bl	8000adc <__aeabi_dcmplt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <putar+0x332>
 8001904:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 8001a08 <putar+0x430>
 8001908:	e00f      	b.n	800192a <putar+0x352>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001916:	f7ff f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <putar+0x34e>
 8001920:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001a10 <putar+0x438>
 8001924:	e001      	b.n	800192a <putar+0x352>
 8001926:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001a18 <putar+0x440>
 800192a:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 450 || M4 < -450) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -450 : ((M4 > 0) ? 450 : 0));
 800192e:	a338      	add	r3, pc, #224	@ (adr r3, 8001a10 <putar+0x438>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001938:	f7ff f8ee 	bl	8000b18 <__aeabi_dcmpgt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <putar+0x37e>
 8001942:	a331      	add	r3, pc, #196	@ (adr r3, 8001a08 <putar+0x430>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800194c:	f7ff f8c6 	bl	8000adc <__aeabi_dcmplt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d016      	beq.n	8001984 <putar+0x3ac>
 8001956:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 80019f8 <putar+0x420>
 800195a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800195e:	f00d febe 	bl	800f6de <fmax>
 8001962:	eeb0 7a40 	vmov.f32	s14, s0
 8001966:	eef0 7a60 	vmov.f32	s15, s1
 800196a:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8001a00 <putar+0x428>
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	eef0 0a67 	vmov.f32	s1, s15
 8001976:	f00d fedc 	bl	800f732 <fmin>
 800197a:	eeb0 7a40 	vmov.f32	s14, s0
 800197e:	eef0 7a60 	vmov.f32	s15, s1
 8001982:	e01d      	b.n	80019c0 <putar+0x3e8>
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001990:	f7ff f8a4 	bl	8000adc <__aeabi_dcmplt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <putar+0x3c8>
 800199a:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8001a08 <putar+0x430>
 800199e:	e00f      	b.n	80019c0 <putar+0x3e8>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019ac:	f7ff f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <putar+0x3e4>
 80019b6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001a10 <putar+0x438>
 80019ba:	e001      	b.n	80019c0 <putar+0x3e8>
 80019bc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001a18 <putar+0x440>
 80019c0:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 80019c4:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80019c8:	2006      	movs	r0, #6
 80019ca:	f7ff fb47 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 80019ce:	ed97 0b08 	vldr	d0, [r7, #32]
 80019d2:	2008      	movs	r0, #8
 80019d4:	f7ff fb42 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 80019d8:	ed97 0b06 	vldr	d0, [r7, #24]
 80019dc:	2004      	movs	r0, #4
 80019de:	f7ff fb3d 	bl	800105c <setMotorSpeed>
     setMotorSpeed(7, V4);
 80019e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80019e6:	2007      	movs	r0, #7
 80019e8:	f7ff fb38 	bl	800105c <setMotorSpeed>
}
 80019ec:	bf00      	nop
 80019ee:	3758      	adds	r7, #88	@ 0x58
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	f3af 8000 	nop.w
 80019f8:	00000000 	.word	0x00000000
 80019fc:	c0a45000 	.word	0xc0a45000
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40a45000 	.word	0x40a45000
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	c07c2000 	.word	0xc07c2000
 8001a10:	00000000 	.word	0x00000000
 8001a14:	407c2000 	.word	0x407c2000
	...
 8001a20:	66666666 	.word	0x66666666
 8001a24:	401e6666 	.word	0x401e6666
 8001a28:	667f3bcc 	.word	0x667f3bcc
 8001a2c:	bfe6a09e 	.word	0xbfe6a09e
 8001a30:	667f3bcd 	.word	0x667f3bcd
 8001a34:	3fe6a09e 	.word	0x3fe6a09e
 8001a38:	667f3bcd 	.word	0x667f3bcd
 8001a3c:	bfe6a09e 	.word	0xbfe6a09e
 8001a40:	667f3bcc 	.word	0x667f3bcc
 8001a44:	3fe6a09e 	.word	0x3fe6a09e
 8001a48:	667f3bce 	.word	0x667f3bce
 8001a4c:	bfe6a09e 	.word	0xbfe6a09e
 8001a50:	667f3bce 	.word	0x667f3bce
 8001a54:	3fe6a09e 	.word	0x3fe6a09e
 8001a58:	667f3bcb 	.word	0x667f3bcb
 8001a5c:	3fe6a09e 	.word	0x3fe6a09e

08001a60 <start>:

void start(int Vx, int Vy, int W, uint8_t battery)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b096      	sub	sp, #88	@ 0x58
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	70fb      	strb	r3, [r7, #3]
    double R = 7.6;
 8001a6e:	f60f 43bc 	addw	r3, pc, #3260	@ 0xcbc
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double M1, M2, M3, M4;

    switch (battery)
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	f200 84f9 	bhi.w	8002476 <start+0xa16>
 8001a84:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <start+0x2c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001ab9 	.word	0x08001ab9
 8001a90:	08001c45 	.word	0x08001c45
 8001a94:	08001df7 	.word	0x08001df7
 8001a98:	08001f95 	.word	0x08001f95
 8001a9c:	08002147 	.word	0x08002147
 8001aa0:	08002477 	.word	0x08002477
 8001aa4:	08002477 	.word	0x08002477
 8001aa8:	08002477 	.word	0x08002477
 8001aac:	08002477 	.word	0x08002477
 8001ab0:	08002477 	.word	0x08002477
 8001ab4:	080022f9 	.word	0x080022f9
    {
		case 1: // > 24.5
			M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7fe fd33 	bl	8000524 <__aeabi_i2d>
 8001abe:	f60f 4374 	addw	r3, pc, #3188	@ 0xc74
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	68b8      	ldr	r0, [r7, #8]
 8001ad4:	f7fe fd26 	bl	8000524 <__aeabi_i2d>
 8001ad8:	f60f 4360 	addw	r3, pc, #3168	@ 0xc60
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fd8a 	bl	80005f8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4620      	mov	r0, r4
 8001aea:	4629      	mov	r1, r5
 8001aec:	f7fe fbce 	bl	800028c <__adddf3>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	461d      	mov	r5, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7fe fd13 	bl	8000524 <__aeabi_i2d>
 8001afe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b02:	f7fe fd79 	bl	80005f8 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbbb 	bl	8000288 <__aeabi_dsub>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7fe fd02 	bl	8000524 <__aeabi_i2d>
 8001b20:	f60f 4320 	addw	r3, pc, #3104	@ 0xc20
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd66 	bl	80005f8 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
 8001b34:	68b8      	ldr	r0, [r7, #8]
 8001b36:	f7fe fcf5 	bl	8000524 <__aeabi_i2d>
 8001b3a:	f60f 33f8 	addw	r3, pc, #3064	@ 0xbf8
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fd59 	bl	80005f8 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f7fe fb9d 	bl	800028c <__adddf3>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fce2 	bl	8000524 <__aeabi_i2d>
 8001b60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b64:	f7fe fd48 	bl	80005f8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb8a 	bl	8000288 <__aeabi_dsub>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7fe fcd1 	bl	8000524 <__aeabi_i2d>
 8001b82:	f60f 33c8 	addw	r3, pc, #3016	@ 0xbc8
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fd35 	bl	80005f8 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4614      	mov	r4, r2
 8001b94:	461d      	mov	r5, r3
 8001b96:	68b8      	ldr	r0, [r7, #8]
 8001b98:	f7fe fcc4 	bl	8000524 <__aeabi_i2d>
 8001b9c:	f60f 33b4 	addw	r3, pc, #2996	@ 0xbb4
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd28 	bl	80005f8 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb6c 	bl	800028c <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7fe fcb1 	bl	8000524 <__aeabi_i2d>
 8001bc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bc6:	f7fe fd17 	bl	80005f8 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	f7fe fb59 	bl	8000288 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7fe fca0 	bl	8000524 <__aeabi_i2d>
 8001be4:	f60f 3374 	addw	r3, pc, #2932	@ 0xb74
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fd04 	bl	80005f8 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	f7fe fc93 	bl	8000524 <__aeabi_i2d>
 8001bfe:	f60f 3364 	addw	r3, pc, #2916	@ 0xb64
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fb3b 	bl	800028c <__adddf3>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe fc80 	bl	8000524 <__aeabi_i2d>
 8001c24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c28:	f7fe fce6 	bl	80005f8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fb28 	bl	8000288 <__aeabi_dsub>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 8001c40:	f000 bc19 	b.w	8002476 <start+0xa16>
    	case 2: // > 24.3
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7fe fc6d 	bl	8000524 <__aeabi_i2d>
 8001c4a:	f60f 23e8 	addw	r3, pc, #2792	@ 0xae8
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fcd1 	bl	80005f8 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	68b8      	ldr	r0, [r7, #8]
 8001c60:	f7fe fc60 	bl	8000524 <__aeabi_i2d>
 8001c64:	f60f 23d4 	addw	r3, pc, #2772	@ 0xad4
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe fcc4 	bl	80005f8 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fb08 	bl	800028c <__adddf3>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4614      	mov	r4, r2
 8001c82:	461d      	mov	r5, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe fc4d 	bl	8000524 <__aeabi_i2d>
 8001c8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c8e:	f7fe fcb3 	bl	80005f8 <__aeabi_dmul>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe faf5 	bl	8000288 <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.04;
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7fe fc3c 	bl	8000524 <__aeabi_i2d>
 8001cac:	f60f 2394 	addw	r3, pc, #2708	@ 0xa94
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fca0 	bl	80005f8 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	68b8      	ldr	r0, [r7, #8]
 8001cc2:	f7fe fc2f 	bl	8000524 <__aeabi_i2d>
 8001cc6:	f60f 236c 	addw	r3, pc, #2668	@ 0xa6c
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc93 	bl	80005f8 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe fad7 	bl	800028c <__adddf3>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fc1c 	bl	8000524 <__aeabi_i2d>
 8001cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cf0:	f7fe fc82 	bl	80005f8 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	f7fe fac4 	bl	8000288 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f60f 2360 	addw	r3, pc, #2656	@ 0xa60
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fc72 	bl	80005f8 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.04;
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7fe fc01 	bl	8000524 <__aeabi_i2d>
 8001d22:	f60f 2328 	addw	r3, pc, #2600	@ 0xa28
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fc65 	bl	80005f8 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4614      	mov	r4, r2
 8001d34:	461d      	mov	r5, r3
 8001d36:	68b8      	ldr	r0, [r7, #8]
 8001d38:	f7fe fbf4 	bl	8000524 <__aeabi_i2d>
 8001d3c:	f60f 2314 	addw	r3, pc, #2580	@ 0xa14
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fc58 	bl	80005f8 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fa9c 	bl	800028c <__adddf3>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4614      	mov	r4, r2
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7fe fbe1 	bl	8000524 <__aeabi_i2d>
 8001d62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d66:	f7fe fc47 	bl	80005f8 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f7fe fa89 	bl	8000288 <__aeabi_dsub>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f60f 13ec 	addw	r3, pc, #2540	@ 0x9ec
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fc37 	bl	80005f8 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7fe fbc6 	bl	8000524 <__aeabi_i2d>
 8001d98:	f60f 13c0 	addw	r3, pc, #2496	@ 0x9c0
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc2a 	bl	80005f8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	461d      	mov	r5, r3
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f7fe fbb9 	bl	8000524 <__aeabi_i2d>
 8001db2:	f60f 13b0 	addw	r3, pc, #2480	@ 0x9b0
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fc1d 	bl	80005f8 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	f7fe fa61 	bl	800028c <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4614      	mov	r4, r2
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fba6 	bl	8000524 <__aeabi_i2d>
 8001dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ddc:	f7fe fc0c 	bl	80005f8 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fa4e 	bl	8000288 <__aeabi_dsub>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    		break;
 8001df4:	e33f      	b.n	8002476 <start+0xa16>
		case 3: // 23.8 < x < 24.3
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f7fe fb94 	bl	8000524 <__aeabi_i2d>
 8001dfc:	f60f 1334 	addw	r3, pc, #2356	@ 0x934
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fbf8 	bl	80005f8 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	461d      	mov	r5, r3
 8001e10:	68b8      	ldr	r0, [r7, #8]
 8001e12:	f7fe fb87 	bl	8000524 <__aeabi_i2d>
 8001e16:	f60f 1324 	addw	r3, pc, #2340	@ 0x924
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbeb 	bl	80005f8 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fa2f 	bl	800028c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4614      	mov	r4, r2
 8001e34:	461d      	mov	r5, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fb74 	bl	8000524 <__aeabi_i2d>
 8001e3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e40:	f7fe fbda 	bl	80005f8 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe fa1c 	bl	8000288 <__aeabi_dsub>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.062;
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fb63 	bl	8000524 <__aeabi_i2d>
 8001e5e:	f60f 03e4 	addw	r3, pc, #2276	@ 0x8e4
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fbc7 	bl	80005f8 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4614      	mov	r4, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	68b8      	ldr	r0, [r7, #8]
 8001e74:	f7fe fb56 	bl	8000524 <__aeabi_i2d>
 8001e78:	f60f 03b8 	addw	r3, pc, #2232	@ 0x8b8
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fbba 	bl	80005f8 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4620      	mov	r0, r4
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	f7fe f9fe 	bl	800028c <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7fe fb43 	bl	8000524 <__aeabi_i2d>
 8001e9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ea2:	f7fe fba9 	bl	80005f8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe f9eb 	bl	8000288 <__aeabi_dsub>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f60f 03b8 	addw	r3, pc, #2232	@ 0x8b8
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fb99 	bl	80005f8 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fb28 	bl	8000524 <__aeabi_i2d>
 8001ed4:	f60f 0374 	addw	r3, pc, #2164	@ 0x874
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb8c 	bl	80005f8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	68b8      	ldr	r0, [r7, #8]
 8001eea:	f7fe fb1b 	bl	8000524 <__aeabi_i2d>
 8001eee:	f60f 0364 	addw	r3, pc, #2148	@ 0x864
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fb7f 	bl	80005f8 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe f9c3 	bl	800028c <__adddf3>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fb08 	bl	8000524 <__aeabi_i2d>
 8001f14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f18:	f7fe fb6e 	bl	80005f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe f9b0 	bl	8000288 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7fe faf7 	bl	8000524 <__aeabi_i2d>
 8001f36:	f60f 0324 	addw	r3, pc, #2084	@ 0x824
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb5b 	bl	80005f8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4614      	mov	r4, r2
 8001f48:	461d      	mov	r5, r3
 8001f4a:	68b8      	ldr	r0, [r7, #8]
 8001f4c:	f7fe faea 	bl	8000524 <__aeabi_i2d>
 8001f50:	f60f 0310 	addw	r3, pc, #2064	@ 0x810
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb4e 	bl	80005f8 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4620      	mov	r0, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	f7fe f992 	bl	800028c <__adddf3>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4614      	mov	r4, r2
 8001f6e:	461d      	mov	r5, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe fad7 	bl	8000524 <__aeabi_i2d>
 8001f76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f7a:	f7fe fb3d 	bl	80005f8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe f97f 	bl	8000288 <__aeabi_dsub>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 8001f92:	e270      	b.n	8002476 <start+0xa16>
		case 4: // 23.4 < x < 23.8
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7fe fac5 	bl	8000524 <__aeabi_i2d>
 8001f9a:	f20f 7398 	addw	r3, pc, #1944	@ 0x798
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fb29 	bl	80005f8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4614      	mov	r4, r2
 8001fac:	461d      	mov	r5, r3
 8001fae:	68b8      	ldr	r0, [r7, #8]
 8001fb0:	f7fe fab8 	bl	8000524 <__aeabi_i2d>
 8001fb4:	f20f 7384 	addw	r3, pc, #1924	@ 0x784
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb1c 	bl	80005f8 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	f7fe f960 	bl	800028c <__adddf3>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7fe faa5 	bl	8000524 <__aeabi_i2d>
 8001fda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001fde:	f7fe fb0b 	bl	80005f8 <__aeabi_dmul>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe f94d 	bl	8000288 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.06;
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7fe fa94 	bl	8000524 <__aeabi_i2d>
 8001ffc:	f20f 7344 	addw	r3, pc, #1860	@ 0x744
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe faf8 	bl	80005f8 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4614      	mov	r4, r2
 800200e:	461d      	mov	r5, r3
 8002010:	68b8      	ldr	r0, [r7, #8]
 8002012:	f7fe fa87 	bl	8000524 <__aeabi_i2d>
 8002016:	f20f 731c 	addw	r3, pc, #1820	@ 0x71c
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe faeb 	bl	80005f8 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe f92f 	bl	800028c <__adddf3>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4614      	mov	r4, r2
 8002034:	461d      	mov	r5, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fa74 	bl	8000524 <__aeabi_i2d>
 800203c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002040:	f7fe fada 	bl	80005f8 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe f91c 	bl	8000288 <__aeabi_dsub>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f20f 7320 	addw	r3, pc, #1824	@ 0x720
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe faca 	bl	80005f8 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.03;
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7fe fa59 	bl	8000524 <__aeabi_i2d>
 8002072:	f20f 63d8 	addw	r3, pc, #1752	@ 0x6d8
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe fabd 	bl	80005f8 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	461d      	mov	r5, r3
 8002086:	68b8      	ldr	r0, [r7, #8]
 8002088:	f7fe fa4c 	bl	8000524 <__aeabi_i2d>
 800208c:	f20f 63c4 	addw	r3, pc, #1732	@ 0x6c4
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fab0 	bl	80005f8 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe f8f4 	bl	800028c <__adddf3>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7fe fa39 	bl	8000524 <__aeabi_i2d>
 80020b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020b6:	f7fe fa9f 	bl	80005f8 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe f8e1 	bl	8000288 <__aeabi_dsub>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f20f 63b4 	addw	r3, pc, #1716	@ 0x6b4
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fa8f 	bl	80005f8 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7fe fa1e 	bl	8000524 <__aeabi_i2d>
 80020e8:	f20f 6370 	addw	r3, pc, #1648	@ 0x670
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fa82 	bl	80005f8 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	68b8      	ldr	r0, [r7, #8]
 80020fe:	f7fe fa11 	bl	8000524 <__aeabi_i2d>
 8002102:	f20f 6360 	addw	r3, pc, #1632	@ 0x660
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe fa75 	bl	80005f8 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4620      	mov	r0, r4
 8002114:	4629      	mov	r1, r5
 8002116:	f7fe f8b9 	bl	800028c <__adddf3>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4614      	mov	r4, r2
 8002120:	461d      	mov	r5, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe f9fe 	bl	8000524 <__aeabi_i2d>
 8002128:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800212c:	f7fe fa64 	bl	80005f8 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4620      	mov	r0, r4
 8002136:	4629      	mov	r1, r5
 8002138:	f7fe f8a6 	bl	8000288 <__aeabi_dsub>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		    break;
 8002144:	e197      	b.n	8002476 <start+0xa16>
		case 5: // 23.5 < x < 23.8
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7fe f9ec 	bl	8000524 <__aeabi_i2d>
 800214c:	f20f 53e4 	addw	r3, pc, #1508	@ 0x5e4
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fa50 	bl	80005f8 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4614      	mov	r4, r2
 800215e:	461d      	mov	r5, r3
 8002160:	68b8      	ldr	r0, [r7, #8]
 8002162:	f7fe f9df 	bl	8000524 <__aeabi_i2d>
 8002166:	f20f 53d4 	addw	r3, pc, #1492	@ 0x5d4
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa43 	bl	80005f8 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4620      	mov	r0, r4
 8002178:	4629      	mov	r1, r5
 800217a:	f7fe f887 	bl	800028c <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	461d      	mov	r5, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe f9cc 	bl	8000524 <__aeabi_i2d>
 800218c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002190:	f7fe fa32 	bl	80005f8 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe f874 	bl	8000288 <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.02;
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7fe f9bb 	bl	8000524 <__aeabi_i2d>
 80021ae:	f20f 5394 	addw	r3, pc, #1428	@ 0x594
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe fa1f 	bl	80005f8 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4614      	mov	r4, r2
 80021c0:	461d      	mov	r5, r3
 80021c2:	68b8      	ldr	r0, [r7, #8]
 80021c4:	f7fe f9ae 	bl	8000524 <__aeabi_i2d>
 80021c8:	f20f 5368 	addw	r3, pc, #1384	@ 0x568
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fa12 	bl	80005f8 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fe f856 	bl	800028c <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4614      	mov	r4, r2
 80021e6:	461d      	mov	r5, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fe f99b 	bl	8000524 <__aeabi_i2d>
 80021ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021f2:	f7fe fa01 	bl	80005f8 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4620      	mov	r0, r4
 80021fc:	4629      	mov	r1, r5
 80021fe:	f7fe f843 	bl	8000288 <__aeabi_dsub>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f20f 5380 	addw	r3, pc, #1408	@ 0x580
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe f9f1 	bl	80005f8 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.04;
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7fe f980 	bl	8000524 <__aeabi_i2d>
 8002224:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f9e4 	bl	80005f8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4614      	mov	r4, r2
 8002236:	461d      	mov	r5, r3
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f7fe f973 	bl	8000524 <__aeabi_i2d>
 800223e:	f20f 5314 	addw	r3, pc, #1300	@ 0x514
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe f9d7 	bl	80005f8 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fe f81b 	bl	800028c <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4614      	mov	r4, r2
 800225c:	461d      	mov	r5, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe f960 	bl	8000524 <__aeabi_i2d>
 8002264:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002268:	f7fe f9c6 	bl	80005f8 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4620      	mov	r0, r4
 8002272:	4629      	mov	r1, r5
 8002274:	f7fe f808 	bl	8000288 <__aeabi_dsub>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f20f 43e8 	addw	r3, pc, #1256	@ 0x4e8
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe f9b6 	bl	80005f8 <__aeabi_dmul>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7fe f945 	bl	8000524 <__aeabi_i2d>
 800229a:	f20f 43c0 	addw	r3, pc, #1216	@ 0x4c0
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fe f9a9 	bl	80005f8 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4614      	mov	r4, r2
 80022ac:	461d      	mov	r5, r3
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f7fe f938 	bl	8000524 <__aeabi_i2d>
 80022b4:	f20f 43ac 	addw	r3, pc, #1196	@ 0x4ac
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe f99c 	bl	80005f8 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fd ffe0 	bl	800028c <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	461d      	mov	r5, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe f925 	bl	8000524 <__aeabi_i2d>
 80022da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022de:	f7fe f98b 	bl	80005f8 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4620      	mov	r0, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	f7fd ffcd 	bl	8000288 <__aeabi_dsub>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		    break;
 80022f6:	e0be      	b.n	8002476 <start+0xa16>
		case 11:
			M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7fe f913 	bl	8000524 <__aeabi_i2d>
 80022fe:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe f977 	bl	80005f8 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4614      	mov	r4, r2
 8002310:	461d      	mov	r5, r3
 8002312:	68b8      	ldr	r0, [r7, #8]
 8002314:	f7fe f906 	bl	8000524 <__aeabi_i2d>
 8002318:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f96a 	bl	80005f8 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ffae 	bl	800028c <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4614      	mov	r4, r2
 8002336:	461d      	mov	r5, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe f8f3 	bl	8000524 <__aeabi_i2d>
 800233e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002342:	f7fe f959 	bl	80005f8 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fd ff9b 	bl	8000288 <__aeabi_dsub>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7fe f8e2 	bl	8000524 <__aeabi_i2d>
 8002360:	a3f8      	add	r3, pc, #992	@ (adr r3, 8002744 <start+0xce4>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe f947 	bl	80005f8 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4614      	mov	r4, r2
 8002370:	461d      	mov	r5, r3
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f7fe f8d6 	bl	8000524 <__aeabi_i2d>
 8002378:	a3ee      	add	r3, pc, #952	@ (adr r3, 8002734 <start+0xcd4>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe f93b 	bl	80005f8 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4620      	mov	r0, r4
 8002388:	4629      	mov	r1, r5
 800238a:	f7fd ff7f 	bl	800028c <__adddf3>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4614      	mov	r4, r2
 8002394:	461d      	mov	r5, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe f8c4 	bl	8000524 <__aeabi_i2d>
 800239c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023a0:	f7fe f92a 	bl	80005f8 <__aeabi_dmul>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7fd ff6c 	bl	8000288 <__aeabi_dsub>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7fe f8b3 	bl	8000524 <__aeabi_i2d>
 80023be:	a3e3      	add	r3, pc, #908	@ (adr r3, 800274c <start+0xcec>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe f918 	bl	80005f8 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4614      	mov	r4, r2
 80023ce:	461d      	mov	r5, r3
 80023d0:	68b8      	ldr	r0, [r7, #8]
 80023d2:	f7fe f8a7 	bl	8000524 <__aeabi_i2d>
 80023d6:	a3df      	add	r3, pc, #892	@ (adr r3, 8002754 <start+0xcf4>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fe f90c 	bl	80005f8 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fd ff50 	bl	800028c <__adddf3>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4614      	mov	r4, r2
 80023f2:	461d      	mov	r5, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7fe f895 	bl	8000524 <__aeabi_i2d>
 80023fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023fe:	f7fe f8fb 	bl	80005f8 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	f7fd ff3d 	bl	8000288 <__aeabi_dsub>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7fe f884 	bl	8000524 <__aeabi_i2d>
 800241c:	a3cf      	add	r3, pc, #828	@ (adr r3, 800275c <start+0xcfc>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f7fe f8e9 	bl	80005f8 <__aeabi_dmul>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4614      	mov	r4, r2
 800242c:	461d      	mov	r5, r3
 800242e:	68b8      	ldr	r0, [r7, #8]
 8002430:	f7fe f878 	bl	8000524 <__aeabi_i2d>
 8002434:	a3cb      	add	r3, pc, #812	@ (adr r3, 8002764 <start+0xd04>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fe f8dd 	bl	80005f8 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd ff21 	bl	800028c <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4614      	mov	r4, r2
 8002450:	461d      	mov	r5, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe f866 	bl	8000524 <__aeabi_i2d>
 8002458:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800245c:	f7fe f8cc 	bl	80005f8 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4620      	mov	r0, r4
 8002466:	4629      	mov	r1, r5
 8002468:	f7fd ff0e 	bl	8000288 <__aeabi_dsub>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 8002474:	bf00      	nop
	}

    double V1 = (M1 > 500 || M1 < -500) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -500 : ((M1 > 0) ? 500 : 0));
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4bab      	ldr	r3, [pc, #684]	@ (8002728 <start+0xcc8>)
 800247c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002480:	f7fe fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <start+0xa3e>
 800248a:	a39d      	add	r3, pc, #628	@ (adr r3, 8002700 <start+0xca0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002494:	f7fe fb22 	bl	8000adc <__aeabi_dcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <start+0xa6c>
 800249e:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8002708 <start+0xca8>
 80024a2:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80024a6:	f00d f91a 	bl	800f6de <fmax>
 80024aa:	eeb0 7a40 	vmov.f32	s14, s0
 80024ae:	eef0 7a60 	vmov.f32	s15, s1
 80024b2:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8002710 <start+0xcb0>
 80024b6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ba:	eef0 0a67 	vmov.f32	s1, s15
 80024be:	f00d f938 	bl	800f732 <fmin>
 80024c2:	eeb0 7a40 	vmov.f32	s14, s0
 80024c6:	eef0 7a60 	vmov.f32	s15, s1
 80024ca:	e01d      	b.n	8002508 <start+0xaa8>
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80024d8:	f7fe fb00 	bl	8000adc <__aeabi_dcmplt>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <start+0xa88>
 80024e2:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8002700 <start+0xca0>
 80024e6:	e00f      	b.n	8002508 <start+0xaa8>
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80024f4:	f7fe fb10 	bl	8000b18 <__aeabi_dcmpgt>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <start+0xaa4>
 80024fe:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8002718 <start+0xcb8>
 8002502:	e001      	b.n	8002508 <start+0xaa8>
 8002504:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8002720 <start+0xcc0>
 8002508:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    double V2 = (M2 > 500 || M2 < -500) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -500 : ((M2 > 0) ? 500 : 0));
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <start+0xcc8>)
 8002512:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002516:	f7fe faff 	bl	8000b18 <__aeabi_dcmpgt>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <start+0xad4>
 8002520:	a377      	add	r3, pc, #476	@ (adr r3, 8002700 <start+0xca0>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800252a:	f7fe fad7 	bl	8000adc <__aeabi_dcmplt>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d016      	beq.n	8002562 <start+0xb02>
 8002534:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8002708 <start+0xca8>
 8002538:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800253c:	f00d f8cf 	bl	800f6de <fmax>
 8002540:	eeb0 7a40 	vmov.f32	s14, s0
 8002544:	eef0 7a60 	vmov.f32	s15, s1
 8002548:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 8002710 <start+0xcb0>
 800254c:	eeb0 0a47 	vmov.f32	s0, s14
 8002550:	eef0 0a67 	vmov.f32	s1, s15
 8002554:	f00d f8ed 	bl	800f732 <fmin>
 8002558:	eeb0 7a40 	vmov.f32	s14, s0
 800255c:	eef0 7a60 	vmov.f32	s15, s1
 8002560:	e01d      	b.n	800259e <start+0xb3e>
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800256e:	f7fe fab5 	bl	8000adc <__aeabi_dcmplt>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <start+0xb1e>
 8002578:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002700 <start+0xca0>
 800257c:	e00f      	b.n	800259e <start+0xb3e>
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800258a:	f7fe fac5 	bl	8000b18 <__aeabi_dcmpgt>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <start+0xb3a>
 8002594:	ed9f 7b60 	vldr	d7, [pc, #384]	@ 8002718 <start+0xcb8>
 8002598:	e001      	b.n	800259e <start+0xb3e>
 800259a:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002720 <start+0xcc0>
 800259e:	ed87 7b08 	vstr	d7, [r7, #32]
    double V3 = (M3 > 500 || M3 < -500) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -500 : ((M3 > 0) ? 500 : 0));
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b60      	ldr	r3, [pc, #384]	@ (8002728 <start+0xcc8>)
 80025a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025ac:	f7fe fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <start+0xb6a>
 80025b6:	a352      	add	r3, pc, #328	@ (adr r3, 8002700 <start+0xca0>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025c0:	f7fe fa8c 	bl	8000adc <__aeabi_dcmplt>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <start+0xb98>
 80025ca:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8002708 <start+0xca8>
 80025ce:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80025d2:	f00d f884 	bl	800f6de <fmax>
 80025d6:	eeb0 7a40 	vmov.f32	s14, s0
 80025da:	eef0 7a60 	vmov.f32	s15, s1
 80025de:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8002710 <start+0xcb0>
 80025e2:	eeb0 0a47 	vmov.f32	s0, s14
 80025e6:	eef0 0a67 	vmov.f32	s1, s15
 80025ea:	f00d f8a2 	bl	800f732 <fmin>
 80025ee:	eeb0 7a40 	vmov.f32	s14, s0
 80025f2:	eef0 7a60 	vmov.f32	s15, s1
 80025f6:	e01d      	b.n	8002634 <start+0xbd4>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002604:	f7fe fa6a 	bl	8000adc <__aeabi_dcmplt>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <start+0xbb4>
 800260e:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8002700 <start+0xca0>
 8002612:	e00f      	b.n	8002634 <start+0xbd4>
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002620:	f7fe fa7a 	bl	8000b18 <__aeabi_dcmpgt>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <start+0xbd0>
 800262a:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8002718 <start+0xcb8>
 800262e:	e001      	b.n	8002634 <start+0xbd4>
 8002630:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8002720 <start+0xcc0>
 8002634:	ed87 7b06 	vstr	d7, [r7, #24]
    double V4 = (M4 > 500 || M4 < -500) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -500 : ((M4 > 0) ? 500 : 0));
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <start+0xcc8>)
 800263e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002642:	f7fe fa69 	bl	8000b18 <__aeabi_dcmpgt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <start+0xc00>
 800264c:	a32c      	add	r3, pc, #176	@ (adr r3, 8002700 <start+0xca0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002656:	f7fe fa41 	bl	8000adc <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d016      	beq.n	800268e <start+0xc2e>
 8002660:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8002708 <start+0xca8>
 8002664:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8002668:	f00d f839 	bl	800f6de <fmax>
 800266c:	eeb0 7a40 	vmov.f32	s14, s0
 8002670:	eef0 7a60 	vmov.f32	s15, s1
 8002674:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8002710 <start+0xcb0>
 8002678:	eeb0 0a47 	vmov.f32	s0, s14
 800267c:	eef0 0a67 	vmov.f32	s1, s15
 8002680:	f00d f857 	bl	800f732 <fmin>
 8002684:	eeb0 7a40 	vmov.f32	s14, s0
 8002688:	eef0 7a60 	vmov.f32	s15, s1
 800268c:	e01d      	b.n	80026ca <start+0xc6a>
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800269a:	f7fe fa1f 	bl	8000adc <__aeabi_dcmplt>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <start+0xc4a>
 80026a4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002700 <start+0xca0>
 80026a8:	e00f      	b.n	80026ca <start+0xc6a>
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80026b6:	f7fe fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <start+0xc66>
 80026c0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8002718 <start+0xcb8>
 80026c4:	e001      	b.n	80026ca <start+0xc6a>
 80026c6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002720 <start+0xcc0>
 80026ca:	ed87 7b04 	vstr	d7, [r7, #16]

    setMotorSpeed(6, V1);
 80026ce:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80026d2:	2006      	movs	r0, #6
 80026d4:	f7fe fcc2 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, V2);
 80026d8:	ed97 0b08 	vldr	d0, [r7, #32]
 80026dc:	2008      	movs	r0, #8
 80026de:	f7fe fcbd 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, V3);
 80026e2:	ed97 0b06 	vldr	d0, [r7, #24]
 80026e6:	2004      	movs	r0, #4
 80026e8:	f7fe fcb8 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, V4);
 80026ec:	ed97 0b04 	vldr	d0, [r7, #16]
 80026f0:	2007      	movs	r0, #7
 80026f2:	f7fe fcb3 	bl	800105c <setMotorSpeed>
}
 80026f6:	bf00      	nop
 80026f8:	3758      	adds	r7, #88	@ 0x58
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bdb0      	pop	{r4, r5, r7, pc}
 80026fe:	bf00      	nop
 8002700:	00000000 	.word	0x00000000
 8002704:	c07f4000 	.word	0xc07f4000
 8002708:	00000000 	.word	0x00000000
 800270c:	c0a45000 	.word	0xc0a45000
 8002710:	00000000 	.word	0x00000000
 8002714:	40a45000 	.word	0x40a45000
 8002718:	00000000 	.word	0x00000000
 800271c:	407f4000 	.word	0x407f4000
	...
 8002728:	407f4000 	.word	0x407f4000
 800272c:	66666666 	.word	0x66666666
 8002730:	401e6666 	.word	0x401e6666
 8002734:	667f3bcc 	.word	0x667f3bcc
 8002738:	bfe6a09e 	.word	0xbfe6a09e
 800273c:	667f3bcd 	.word	0x667f3bcd
 8002740:	3fe6a09e 	.word	0x3fe6a09e
 8002744:	667f3bcd 	.word	0x667f3bcd
 8002748:	bfe6a09e 	.word	0xbfe6a09e
 800274c:	667f3bcc 	.word	0x667f3bcc
 8002750:	3fe6a09e 	.word	0x3fe6a09e
 8002754:	667f3bce 	.word	0x667f3bce
 8002758:	bfe6a09e 	.word	0xbfe6a09e
 800275c:	667f3bce 	.word	0x667f3bce
 8002760:	3fe6a09e 	.word	0x3fe6a09e
 8002764:	667f3bcb 	.word	0x667f3bcb
 8002768:	3fe6a09e 	.word	0x3fe6a09e
 800276c:	0a3d70a4 	.word	0x0a3d70a4
 8002770:	3ff0a3d7 	.word	0x3ff0a3d7
 8002774:	b645a1cb 	.word	0xb645a1cb
 8002778:	3ff0fdf3 	.word	0x3ff0fdf3
 800277c:	8f5c28f6 	.word	0x8f5c28f6
 8002780:	3ff0f5c2 	.word	0x3ff0f5c2
 8002784:	47ae147b 	.word	0x47ae147b
 8002788:	3ff07ae1 	.word	0x3ff07ae1
 800278c:	851eb852 	.word	0x851eb852
 8002790:	3ff051eb 	.word	0x3ff051eb
 8002794:	00000000 	.word	0x00000000

08002798 <nanjak>:

void nanjak(int Vx, int Vy, int W)
{
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b096      	sub	sp, #88	@ 0x58
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
    double R = 7.6;
 80027a4:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    double M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7fd feb7 	bl	8000524 <__aeabi_i2d>
 80027b6:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd ff1b 	bl	80005f8 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	461d      	mov	r5, r3
 80027ca:	68b8      	ldr	r0, [r7, #8]
 80027cc:	f7fd feaa 	bl	8000524 <__aeabi_i2d>
 80027d0:	f20f 435c 	addw	r3, pc, #1116	@ 0x45c
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	f7fd ff0e 	bl	80005f8 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd52 	bl	800028c <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4614      	mov	r4, r2
 80027ee:	461d      	mov	r5, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fd fe97 	bl	8000524 <__aeabi_i2d>
 80027f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027fa:	f7fd fefd 	bl	80005f8 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fd3f 	bl	8000288 <__aeabi_dsub>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.1;
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7fd fe86 	bl	8000524 <__aeabi_i2d>
 8002818:	f20f 431c 	addw	r3, pc, #1052	@ 0x41c
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd feea 	bl	80005f8 <__aeabi_dmul>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	68b8      	ldr	r0, [r7, #8]
 800282e:	f7fd fe79 	bl	8000524 <__aeabi_i2d>
 8002832:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8002c28 <nanjak+0x490>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd fede 	bl	80005f8 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4620      	mov	r0, r4
 8002842:	4629      	mov	r1, r5
 8002844:	f7fd fd22 	bl	800028c <__adddf3>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4614      	mov	r4, r2
 800284e:	461d      	mov	r5, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fd fe67 	bl	8000524 <__aeabi_i2d>
 8002856:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800285a:	f7fd fecd 	bl	80005f8 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4620      	mov	r0, r4
 8002864:	4629      	mov	r1, r5
 8002866:	f7fd fd0f 	bl	8000288 <__aeabi_dsub>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	a3f3      	add	r3, pc, #972	@ (adr r3, 8002c40 <nanjak+0x4a8>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd febe 	bl	80005f8 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.2;
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7fd fe4d 	bl	8000524 <__aeabi_i2d>
 800288a:	a3ef      	add	r3, pc, #956	@ (adr r3, 8002c48 <nanjak+0x4b0>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd feb2 	bl	80005f8 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f7fd fe41 	bl	8000524 <__aeabi_i2d>
 80028a2:	a3eb      	add	r3, pc, #940	@ (adr r3, 8002c50 <nanjak+0x4b8>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd fea6 	bl	80005f8 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4620      	mov	r0, r4
 80028b2:	4629      	mov	r1, r5
 80028b4:	f7fd fcea 	bl	800028c <__adddf3>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4614      	mov	r4, r2
 80028be:	461d      	mov	r5, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7fd fe2f 	bl	8000524 <__aeabi_i2d>
 80028c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028ca:	f7fd fe95 	bl	80005f8 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd fcd7 	bl	8000288 <__aeabi_dsub>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80028e6:	4bcc      	ldr	r3, [pc, #816]	@ (8002c18 <nanjak+0x480>)
 80028e8:	f7fd fe86 	bl	80005f8 <__aeabi_dmul>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7fd fe15 	bl	8000524 <__aeabi_i2d>
 80028fa:	a3b9      	add	r3, pc, #740	@ (adr r3, 8002be0 <nanjak+0x448>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fe7a 	bl	80005f8 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	68b8      	ldr	r0, [r7, #8]
 800290e:	f7fd fe09 	bl	8000524 <__aeabi_i2d>
 8002912:	a3b5      	add	r3, pc, #724	@ (adr r3, 8002be8 <nanjak+0x450>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fe6e 	bl	80005f8 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fcb2 	bl	800028c <__adddf3>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4614      	mov	r4, r2
 800292e:	461d      	mov	r5, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7fd fdf7 	bl	8000524 <__aeabi_i2d>
 8002936:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800293a:	f7fd fe5d 	bl	80005f8 <__aeabi_dmul>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7fd fc9f 	bl	8000288 <__aeabi_dsub>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double V1 = (M1 > 500 || M1 < -500) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -500 : ((M1 > 0) ? 500 : 0));
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	4bb1      	ldr	r3, [pc, #708]	@ (8002c1c <nanjak+0x484>)
 8002958:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800295c:	f7fe f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <nanjak+0x1e2>
 8002966:	a3a2      	add	r3, pc, #648	@ (adr r3, 8002bf0 <nanjak+0x458>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002970:	f7fe f8b4 	bl	8000adc <__aeabi_dcmplt>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <nanjak+0x210>
 800297a:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8002bf8 <nanjak+0x460>
 800297e:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8002982:	f00c feac 	bl	800f6de <fmax>
 8002986:	eeb0 7a40 	vmov.f32	s14, s0
 800298a:	eef0 7a60 	vmov.f32	s15, s1
 800298e:	ed9f 1b9c 	vldr	d1, [pc, #624]	@ 8002c00 <nanjak+0x468>
 8002992:	eeb0 0a47 	vmov.f32	s0, s14
 8002996:	eef0 0a67 	vmov.f32	s1, s15
 800299a:	f00c feca 	bl	800f732 <fmin>
 800299e:	eeb0 7a40 	vmov.f32	s14, s0
 80029a2:	eef0 7a60 	vmov.f32	s15, s1
 80029a6:	e01d      	b.n	80029e4 <nanjak+0x24c>
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80029b4:	f7fe f892 	bl	8000adc <__aeabi_dcmplt>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <nanjak+0x22c>
 80029be:	ed9f 7b8c 	vldr	d7, [pc, #560]	@ 8002bf0 <nanjak+0x458>
 80029c2:	e00f      	b.n	80029e4 <nanjak+0x24c>
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80029d0:	f7fe f8a2 	bl	8000b18 <__aeabi_dcmpgt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <nanjak+0x248>
 80029da:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8002c08 <nanjak+0x470>
 80029de:	e001      	b.n	80029e4 <nanjak+0x24c>
 80029e0:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8002c10 <nanjak+0x478>
 80029e4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    double V2 = (M2 > 500 || M2 < -500) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -500 : ((M2 > 0) ? 500 : 0));
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	4b8b      	ldr	r3, [pc, #556]	@ (8002c1c <nanjak+0x484>)
 80029ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029f2:	f7fe f891 	bl	8000b18 <__aeabi_dcmpgt>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <nanjak+0x278>
 80029fc:	a37c      	add	r3, pc, #496	@ (adr r3, 8002bf0 <nanjak+0x458>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002a06:	f7fe f869 	bl	8000adc <__aeabi_dcmplt>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d016      	beq.n	8002a3e <nanjak+0x2a6>
 8002a10:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8002bf8 <nanjak+0x460>
 8002a14:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8002a18:	f00c fe61 	bl	800f6de <fmax>
 8002a1c:	eeb0 7a40 	vmov.f32	s14, s0
 8002a20:	eef0 7a60 	vmov.f32	s15, s1
 8002a24:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 8002c00 <nanjak+0x468>
 8002a28:	eeb0 0a47 	vmov.f32	s0, s14
 8002a2c:	eef0 0a67 	vmov.f32	s1, s15
 8002a30:	f00c fe7f 	bl	800f732 <fmin>
 8002a34:	eeb0 7a40 	vmov.f32	s14, s0
 8002a38:	eef0 7a60 	vmov.f32	s15, s1
 8002a3c:	e01d      	b.n	8002a7a <nanjak+0x2e2>
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002a4a:	f7fe f847 	bl	8000adc <__aeabi_dcmplt>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <nanjak+0x2c2>
 8002a54:	ed9f 7b66 	vldr	d7, [pc, #408]	@ 8002bf0 <nanjak+0x458>
 8002a58:	e00f      	b.n	8002a7a <nanjak+0x2e2>
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002a66:	f7fe f857 	bl	8000b18 <__aeabi_dcmpgt>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <nanjak+0x2de>
 8002a70:	ed9f 7b65 	vldr	d7, [pc, #404]	@ 8002c08 <nanjak+0x470>
 8002a74:	e001      	b.n	8002a7a <nanjak+0x2e2>
 8002a76:	ed9f 7b66 	vldr	d7, [pc, #408]	@ 8002c10 <nanjak+0x478>
 8002a7a:	ed87 7b08 	vstr	d7, [r7, #32]
    double V3 = (M3 > 500 || M3 < -500) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -500 : ((M3 > 0) ? 500 : 0));
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	4b66      	ldr	r3, [pc, #408]	@ (8002c1c <nanjak+0x484>)
 8002a84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002a88:	f7fe f846 	bl	8000b18 <__aeabi_dcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <nanjak+0x30e>
 8002a92:	a357      	add	r3, pc, #348	@ (adr r3, 8002bf0 <nanjak+0x458>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002a9c:	f7fe f81e 	bl	8000adc <__aeabi_dcmplt>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <nanjak+0x33c>
 8002aa6:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8002bf8 <nanjak+0x460>
 8002aaa:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8002aae:	f00c fe16 	bl	800f6de <fmax>
 8002ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ab6:	eef0 7a60 	vmov.f32	s15, s1
 8002aba:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8002c00 <nanjak+0x468>
 8002abe:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac2:	eef0 0a67 	vmov.f32	s1, s15
 8002ac6:	f00c fe34 	bl	800f732 <fmin>
 8002aca:	eeb0 7a40 	vmov.f32	s14, s0
 8002ace:	eef0 7a60 	vmov.f32	s15, s1
 8002ad2:	e01d      	b.n	8002b10 <nanjak+0x378>
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ae0:	f7fd fffc 	bl	8000adc <__aeabi_dcmplt>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <nanjak+0x358>
 8002aea:	ed9f 7b41 	vldr	d7, [pc, #260]	@ 8002bf0 <nanjak+0x458>
 8002aee:	e00f      	b.n	8002b10 <nanjak+0x378>
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002afc:	f7fe f80c 	bl	8000b18 <__aeabi_dcmpgt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <nanjak+0x374>
 8002b06:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 8002c08 <nanjak+0x470>
 8002b0a:	e001      	b.n	8002b10 <nanjak+0x378>
 8002b0c:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 8002c10 <nanjak+0x478>
 8002b10:	ed87 7b06 	vstr	d7, [r7, #24]
    double V4 = (M4 > 500 || M4 < -500) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -500 : ((M4 > 0) ? 500 : 0));
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	4b40      	ldr	r3, [pc, #256]	@ (8002c1c <nanjak+0x484>)
 8002b1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b1e:	f7fd fffb 	bl	8000b18 <__aeabi_dcmpgt>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <nanjak+0x3a4>
 8002b28:	a331      	add	r3, pc, #196	@ (adr r3, 8002bf0 <nanjak+0x458>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b32:	f7fd ffd3 	bl	8000adc <__aeabi_dcmplt>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d016      	beq.n	8002b6a <nanjak+0x3d2>
 8002b3c:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8002bf8 <nanjak+0x460>
 8002b40:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8002b44:	f00c fdcb 	bl	800f6de <fmax>
 8002b48:	eeb0 7a40 	vmov.f32	s14, s0
 8002b4c:	eef0 7a60 	vmov.f32	s15, s1
 8002b50:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8002c00 <nanjak+0x468>
 8002b54:	eeb0 0a47 	vmov.f32	s0, s14
 8002b58:	eef0 0a67 	vmov.f32	s1, s15
 8002b5c:	f00c fde9 	bl	800f732 <fmin>
 8002b60:	eeb0 7a40 	vmov.f32	s14, s0
 8002b64:	eef0 7a60 	vmov.f32	s15, s1
 8002b68:	e01d      	b.n	8002ba6 <nanjak+0x40e>
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b76:	f7fd ffb1 	bl	8000adc <__aeabi_dcmplt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <nanjak+0x3ee>
 8002b80:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8002bf0 <nanjak+0x458>
 8002b84:	e00f      	b.n	8002ba6 <nanjak+0x40e>
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b92:	f7fd ffc1 	bl	8000b18 <__aeabi_dcmpgt>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <nanjak+0x40a>
 8002b9c:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8002c08 <nanjak+0x470>
 8002ba0:	e001      	b.n	8002ba6 <nanjak+0x40e>
 8002ba2:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8002c10 <nanjak+0x478>
 8002ba6:	ed87 7b04 	vstr	d7, [r7, #16]

    setMotorSpeed(6, V1);
 8002baa:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8002bae:	2006      	movs	r0, #6
 8002bb0:	f7fe fa54 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, V2);
 8002bb4:	ed97 0b08 	vldr	d0, [r7, #32]
 8002bb8:	2008      	movs	r0, #8
 8002bba:	f7fe fa4f 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, V3);
 8002bbe:	ed97 0b06 	vldr	d0, [r7, #24]
 8002bc2:	2004      	movs	r0, #4
 8002bc4:	f7fe fa4a 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, V4);
 8002bc8:	ed97 0b04 	vldr	d0, [r7, #16]
 8002bcc:	2007      	movs	r0, #7
 8002bce:	f7fe fa45 	bl	800105c <setMotorSpeed>
}
 8002bd2:	bf00      	nop
 8002bd4:	3758      	adds	r7, #88	@ 0x58
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
 8002be0:	667f3bce 	.word	0x667f3bce
 8002be4:	3fe6a09e 	.word	0x3fe6a09e
 8002be8:	667f3bcb 	.word	0x667f3bcb
 8002bec:	3fe6a09e 	.word	0x3fe6a09e
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	c07f4000 	.word	0xc07f4000
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	c0a45000 	.word	0xc0a45000
 8002c00:	00000000 	.word	0x00000000
 8002c04:	40a45000 	.word	0x40a45000
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	407f4000 	.word	0x407f4000
	...
 8002c18:	3ff33333 	.word	0x3ff33333
 8002c1c:	407f4000 	.word	0x407f4000
 8002c20:	66666666 	.word	0x66666666
 8002c24:	401e6666 	.word	0x401e6666
 8002c28:	667f3bcc 	.word	0x667f3bcc
 8002c2c:	bfe6a09e 	.word	0xbfe6a09e
 8002c30:	667f3bcd 	.word	0x667f3bcd
 8002c34:	3fe6a09e 	.word	0x3fe6a09e
 8002c38:	667f3bcd 	.word	0x667f3bcd
 8002c3c:	bfe6a09e 	.word	0xbfe6a09e
 8002c40:	9999999a 	.word	0x9999999a
 8002c44:	3ff19999 	.word	0x3ff19999
 8002c48:	667f3bcc 	.word	0x667f3bcc
 8002c4c:	3fe6a09e 	.word	0x3fe6a09e
 8002c50:	667f3bce 	.word	0x667f3bce
 8002c54:	bfe6a09e 	.word	0xbfe6a09e

08002c58 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460a      	mov	r2, r1
 8002c62:	71fb      	strb	r3, [r7, #7]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	79bb      	ldrb	r3, [r7, #6]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8002c7a:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <lcd_write_nibble+0x7c>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002c98:	f107 020f 	add.w	r2, r7, #15
 8002c9c:	2364      	movs	r3, #100	@ 0x64
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	214e      	movs	r1, #78	@ 0x4e
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <lcd_write_nibble+0x80>)
 8002ca6:	f005 f87f 	bl	8007da8 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f004 fb8a 	bl	80073c4 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002cba:	f107 020f 	add.w	r2, r7, #15
 8002cbe:	2364      	movs	r3, #100	@ 0x64
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	214e      	movs	r1, #78	@ 0x4e
 8002cc6:	4804      	ldr	r0, [pc, #16]	@ (8002cd8 <lcd_write_nibble+0x80>)
 8002cc8:	f005 f86e 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	200000c8 	.word	0x200000c8
 8002cd8:	200002e4 	.word	0x200002e4

08002cdc <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ffad 	bl	8002c58 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8002cfe:	7bbb      	ldrb	r3, [r7, #14]
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ffa8 	bl	8002c58 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d002      	beq.n	8002d14 <lcd_send_cmd+0x38>
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d102      	bne.n	8002d1a <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 8002d14:	2002      	movs	r0, #2
 8002d16:	f004 fb55 	bl	80073c4 <HAL_Delay>
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff8a 	bl	8002c58 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff85 	bl	8002c58 <lcd_write_nibble>
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <lcd_init>:

void lcd_init()
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8002d5a:	2032      	movs	r0, #50	@ 0x32
 8002d5c:	f004 fb32 	bl	80073c4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002d60:	2100      	movs	r1, #0
 8002d62:	2003      	movs	r0, #3
 8002d64:	f7ff ff78 	bl	8002c58 <lcd_write_nibble>
  HAL_Delay(5);
 8002d68:	2005      	movs	r0, #5
 8002d6a:	f004 fb2b 	bl	80073c4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2003      	movs	r0, #3
 8002d72:	f7ff ff71 	bl	8002c58 <lcd_write_nibble>
  HAL_Delay(1);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f004 fb24 	bl	80073c4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2003      	movs	r0, #3
 8002d80:	f7ff ff6a 	bl	8002c58 <lcd_write_nibble>
  HAL_Delay(1);
 8002d84:	2001      	movs	r0, #1
 8002d86:	f004 fb1d 	bl	80073c4 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	f7ff ff63 	bl	8002c58 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8002d92:	2028      	movs	r0, #40	@ 0x28
 8002d94:	f7ff ffa2 	bl	8002cdc <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8002d98:	200c      	movs	r0, #12
 8002d9a:	f7ff ff9f 	bl	8002cdc <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8002d9e:	2006      	movs	r0, #6
 8002da0:	f7ff ff9c 	bl	8002cdc <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8002da4:	2001      	movs	r0, #1
 8002da6:	f7ff ff99 	bl	8002cdc <lcd_send_cmd>
  HAL_Delay(2);
 8002daa:	2002      	movs	r0, #2
 8002dac:	f004 fb0a 	bl	80073c4 <HAL_Delay>
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  while (*str)
 8002dbc:	e006      	b.n	8002dcc <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ffab 	bl	8002d22 <lcd_send_data>
  while (*str)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f4      	bne.n	8002dbe <lcd_write_string+0xa>
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	460a      	mov	r2, r1
 8002dea:	71fb      	strb	r3, [r7, #7]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d816      	bhi.n	8002e24 <lcd_set_cursor+0x44>
 8002df6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dfc <lcd_set_cursor+0x1c>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e13 	.word	0x08002e13
 8002e04:	08002e19 	.word	0x08002e19
 8002e08:	08002e1f 	.word	0x08002e1f
  {
  case 0:
    address = 0x00;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8002e10:	e00a      	b.n	8002e28 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 8002e12:	2340      	movs	r3, #64	@ 0x40
 8002e14:	73fb      	strb	r3, [r7, #15]
    break;
 8002e16:	e007      	b.n	8002e28 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 8002e18:	2314      	movs	r3, #20
 8002e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8002e1c:	e004      	b.n	8002e28 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 8002e1e:	2354      	movs	r3, #84	@ 0x54
 8002e20:	73fb      	strb	r3, [r7, #15]
    break;
 8002e22:	e001      	b.n	8002e28 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	79bb      	ldrb	r3, [r7, #6]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff4f 	bl	8002cdc <lcd_send_cmd>
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop

08002e48 <lcd_clear>:

void lcd_clear(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7ff ff45 	bl	8002cdc <lcd_send_cmd>
  HAL_Delay(2);
 8002e52:	2002      	movs	r0, #2
 8002e54:	f004 fab6 	bl	80073c4 <HAL_Delay>
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_GPIO_EXTI_Callback>:
uint32_t lastDebounceTime4 = 0;

uint8_t mode = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d11d      	bne.n	8002ea8 <HAL_GPIO_EXTI_Callback+0x4c>
 8002e6c:	2108      	movs	r1, #8
 8002e6e:	4890      	ldr	r0, [pc, #576]	@ (80030b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002e70:	f004 fe0c 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d116      	bne.n	8002ea8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 8002e7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e7e:	488d      	ldr	r0, [pc, #564]	@ (80030b4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002e80:	f004 fe04 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_GPIO_EXTI_Callback+0x3a>
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80030b8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	4a89      	ldr	r2, [pc, #548]	@ (80030b8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_EXTI_Callback+0x44>
 8002e96:	4b88      	ldr	r3, [pc, #544]	@ (80030b8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a86      	ldr	r2, [pc, #536]	@ (80030b8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002e9e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8002ea0:	4b86      	ldr	r3, [pc, #536]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	615a      	str	r2, [r3, #20]
 8002ea6:	e15b      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d11c      	bne.n	8002ee8 <HAL_GPIO_EXTI_Callback+0x8c>
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4883      	ldr	r0, [pc, #524]	@ (80030c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002eb2:	f004 fdeb 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d115      	bne.n	8002ee8 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4880      	ldr	r0, [pc, #512]	@ (80030c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002ec0:	f004 fde4 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_GPIO_EXTI_Callback+0x7a>
 8002eca:	4b7e      	ldr	r3, [pc, #504]	@ (80030c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	4a7c      	ldr	r2, [pc, #496]	@ (80030c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_EXTI_Callback+0x84>
 8002ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80030c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	4a79      	ldr	r2, [pc, #484]	@ (80030c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8002ede:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8002ee0:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	615a      	str	r2, [r3, #20]
 8002ee6:	e13b      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d11c      	bne.n	8002f28 <HAL_GPIO_EXTI_Callback+0xcc>
 8002eee:	2120      	movs	r1, #32
 8002ef0:	486f      	ldr	r0, [pc, #444]	@ (80030b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002ef2:	f004 fdcb 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d115      	bne.n	8002f28 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 8002efc:	2110      	movs	r1, #16
 8002efe:	486c      	ldr	r0, [pc, #432]	@ (80030b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002f00:	f004 fdc4 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_GPIO_EXTI_Callback+0xba>
 8002f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80030c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	4a6d      	ldr	r2, [pc, #436]	@ (80030c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e004      	b.n	8002f20 <HAL_GPIO_EXTI_Callback+0xc4>
 8002f16:	4b6c      	ldr	r3, [pc, #432]	@ (80030c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80030c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002f1e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002f22:	2220      	movs	r2, #32
 8002f24:	615a      	str	r2, [r3, #20]
 8002f26:	e11b      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d11c      	bne.n	8002f68 <HAL_GPIO_EXTI_Callback+0x10c>
 8002f2e:	2104      	movs	r1, #4
 8002f30:	4863      	ldr	r0, [pc, #396]	@ (80030c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002f32:	f004 fdab 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d115      	bne.n	8002f68 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 8002f3c:	2108      	movs	r1, #8
 8002f3e:	4860      	ldr	r0, [pc, #384]	@ (80030c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002f40:	f004 fda4 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_GPIO_EXTI_Callback+0xfa>
 8002f4a:	4b60      	ldr	r3, [pc, #384]	@ (80030cc <HAL_GPIO_EXTI_Callback+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a5e      	ldr	r2, [pc, #376]	@ (80030cc <HAL_GPIO_EXTI_Callback+0x270>)
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_EXTI_Callback+0x104>
 8002f56:	4b5d      	ldr	r3, [pc, #372]	@ (80030cc <HAL_GPIO_EXTI_Callback+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	4a5b      	ldr	r2, [pc, #364]	@ (80030cc <HAL_GPIO_EXTI_Callback+0x270>)
 8002f5e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8002f60:	4b56      	ldr	r3, [pc, #344]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002f62:	2204      	movs	r2, #4
 8002f64:	615a      	str	r2, [r3, #20]
 8002f66:	e0fb      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_GPIO_EXTI_Callback+0x14c>
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4850      	ldr	r0, [pc, #320]	@ (80030b4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002f72:	f004 fd8b 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d115      	bne.n	8002fa8 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	484d      	ldr	r0, [pc, #308]	@ (80030b4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002f80:	f004 fd84 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_GPIO_EXTI_Callback+0x13a>
 8002f8a:	4b51      	ldr	r3, [pc, #324]	@ (80030d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	4a4f      	ldr	r2, [pc, #316]	@ (80030d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e004      	b.n	8002fa0 <HAL_GPIO_EXTI_Callback+0x144>
 8002f96:	4b4e      	ldr	r3, [pc, #312]	@ (80030d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80030d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8002f9e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8002fa0:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	615a      	str	r2, [r3, #20]
 8002fa6:	e0db      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fae:	d11f      	bne.n	8002ff0 <HAL_GPIO_EXTI_Callback+0x194>
 8002fb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fb4:	4847      	ldr	r0, [pc, #284]	@ (80030d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8002fb6:	f004 fd69 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d117      	bne.n	8002ff0 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8002fc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fc4:	4843      	ldr	r0, [pc, #268]	@ (80030d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8002fc6:	f004 fd61 	bl	8007a8c <HAL_GPIO_ReadPin>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_GPIO_EXTI_Callback+0x180>
 8002fd0:	4b41      	ldr	r3, [pc, #260]	@ (80030d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a40      	ldr	r2, [pc, #256]	@ (80030d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e004      	b.n	8002fe6 <HAL_GPIO_EXTI_Callback+0x18a>
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80030d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80030d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002fe4:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8002fe6:	4b35      	ldr	r3, [pc, #212]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fec:	615a      	str	r2, [r3, #20]
 8002fee:	e0b7      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff6:	d11f      	bne.n	8003038 <HAL_GPIO_EXTI_Callback+0x1dc>
 8002ff8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ffc:	482d      	ldr	r0, [pc, #180]	@ (80030b4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002ffe:	f004 fd45 	bl	8007a8c <HAL_GPIO_ReadPin>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d117      	bne.n	8003038 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 8003008:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800300c:	4829      	ldr	r0, [pc, #164]	@ (80030b4 <HAL_GPIO_EXTI_Callback+0x258>)
 800300e:	f004 fd3d 	bl	8007a8c <HAL_GPIO_ReadPin>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_GPIO_EXTI_Callback+0x1c8>
 8003018:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <HAL_GPIO_EXTI_Callback+0x280>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3b01      	subs	r3, #1
 800301e:	4a2f      	ldr	r2, [pc, #188]	@ (80030dc <HAL_GPIO_EXTI_Callback+0x280>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e004      	b.n	800302e <HAL_GPIO_EXTI_Callback+0x1d2>
 8003024:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_GPIO_EXTI_Callback+0x280>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a2c      	ldr	r2, [pc, #176]	@ (80030dc <HAL_GPIO_EXTI_Callback+0x280>)
 800302c:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 800302e:	4b23      	ldr	r3, [pc, #140]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 8003030:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003034:	615a      	str	r2, [r3, #20]
 8003036:	e093      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303e:	d119      	bne.n	8003074 <HAL_GPIO_EXTI_Callback+0x218>
 8003040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003044:	4826      	ldr	r0, [pc, #152]	@ (80030e0 <HAL_GPIO_EXTI_Callback+0x284>)
 8003046:	f004 fd21 	bl	8007a8c <HAL_GPIO_ReadPin>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + 1;
 8003050:	4b24      	ldr	r3, [pc, #144]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b22      	ldr	r3, [pc, #136]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 800305a:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 800305c:	4b21      	ldr	r3, [pc, #132]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d902      	bls.n	800306a <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = 0;
 8003064:	4b1f      	ldr	r3, [pc, #124]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 800306a:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 800306c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003070:	615a      	str	r2, [r3, #20]
 8003072:	e075      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800307a:	d135      	bne.n	80030e8 <HAL_GPIO_EXTI_Callback+0x28c>
 800307c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003080:	4817      	ldr	r0, [pc, #92]	@ (80030e0 <HAL_GPIO_EXTI_Callback+0x284>)
 8003082:	f004 fd03 	bl	8007a8c <HAL_GPIO_ReadPin>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d12d      	bne.n	80030e8 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + 2;
 800308c:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	3302      	adds	r3, #2
 8003092:	b2da      	uxtb	r2, r3
 8003094:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 8003096:	701a      	strb	r2, [r3, #0]
		if(mode > 2)
 8003098:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d902      	bls.n	80030a6 <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = 0;
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x288>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 80030a6:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_GPIO_EXTI_Callback+0x260>)
 80030a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ac:	615a      	str	r2, [r3, #20]
 80030ae:	e057      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
 80030b0:	40020400 	.word	0x40020400
 80030b4:	40020000 	.word	0x40020000
 80030b8:	200004a0 	.word	0x200004a0
 80030bc:	40013c00 	.word	0x40013c00
 80030c0:	40020800 	.word	0x40020800
 80030c4:	200004a4 	.word	0x200004a4
 80030c8:	200004a8 	.word	0x200004a8
 80030cc:	200004ac 	.word	0x200004ac
 80030d0:	200004b0 	.word	0x200004b0
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	200004b4 	.word	0x200004b4
 80030dc:	200004b8 	.word	0x200004b8
 80030e0:	40021000 	.word	0x40021000
 80030e4:	20000558 	.word	0x20000558
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ee:	d119      	bne.n	8003124 <HAL_GPIO_EXTI_Callback+0x2c8>
 80030f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030f4:	481c      	ldr	r0, [pc, #112]	@ (8003168 <HAL_GPIO_EXTI_Callback+0x30c>)
 80030f6:	f004 fcc9 	bl	8007a8c <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d111      	bne.n	8003124 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + 1;
 8003100:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b18      	ldr	r3, [pc, #96]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 800310a:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d902      	bls.n	800311a <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = 0;
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_GPIO_EXTI_Callback+0x314>)
 800311c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003120:	615a      	str	r2, [r3, #20]
 8003122:	e01d      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800312a:	d119      	bne.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
 800312c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003130:	4810      	ldr	r0, [pc, #64]	@ (8003174 <HAL_GPIO_EXTI_Callback+0x318>)
 8003132:	f004 fcab 	bl	8007a8c <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d111      	bne.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + 1;
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 8003146:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 8003148:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d902      	bls.n	8003156 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = 0;
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_GPIO_EXTI_Callback+0x310>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_GPIO_EXTI_Callback+0x314>)
 8003158:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800315c:	615a      	str	r2, [r3, #20]
	}
}
 800315e:	e7ff      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x304>
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000
 800316c:	20000558 	.word	0x20000558
 8003170:	40013c00 	.word	0x40013c00
 8003174:	40020c00 	.word	0x40020c00

08003178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b0e0      	sub	sp, #384	@ 0x180
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003180:	f004 f8ae 	bl	80072e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003184:	f000 fb9a 	bl	80038bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003188:	f000 fe8c 	bl	8003ea4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800318c:	f000 fc00 	bl	8003990 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003190:	f000 fc2c 	bl	80039ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8003194:	f000 fcee 	bl	8003b74 <MX_TIM2_Init>
  MX_TIM8_Init();
 8003198:	f000 fd6c 	bl	8003c74 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800319c:	f000 fe2e 	bl	8003dfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031a0:	f000 fe56 	bl	8003e50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80031a4:	f7ff fdd7 	bl	8002d56 <lcd_init>

  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80031a8:	2104      	movs	r1, #4
 80031aa:	489f      	ldr	r0, [pc, #636]	@ (8003428 <main+0x2b0>)
 80031ac:	f005 fe96 	bl	8008edc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 80031b0:	210c      	movs	r1, #12
 80031b2:	489d      	ldr	r0, [pc, #628]	@ (8003428 <main+0x2b0>)
 80031b4:	f005 fe92 	bl	8008edc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 80031b8:	2108      	movs	r1, #8
 80031ba:	489c      	ldr	r0, [pc, #624]	@ (800342c <main+0x2b4>)
 80031bc:	f005 fe8e 	bl	8008edc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);
 80031c0:	210c      	movs	r1, #12
 80031c2:	489a      	ldr	r0, [pc, #616]	@ (800342c <main+0x2b4>)
 80031c4:	f005 fe8a 	bl	8008edc <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_IT(&huart1, receive, 1);
 80031c8:	2201      	movs	r2, #1
 80031ca:	4999      	ldr	r1, [pc, #612]	@ (8003430 <main+0x2b8>)
 80031cc:	4899      	ldr	r0, [pc, #612]	@ (8003434 <main+0x2bc>)
 80031ce:	f006 fe95 	bl	8009efc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 80031d2:	2201      	movs	r2, #1
 80031d4:	4998      	ldr	r1, [pc, #608]	@ (8003438 <main+0x2c0>)
 80031d6:	4899      	ldr	r0, [pc, #612]	@ (800343c <main+0x2c4>)
 80031d8:	f006 fe90 	bl	8009efc <HAL_UART_Receive_IT>

//  EKF first = {0.0, 6700.0, 0.0};
  EKF second = {4300.0, 6640.0, 0.0};
 80031dc:	4b98      	ldr	r3, [pc, #608]	@ (8003440 <main+0x2c8>)
 80031de:	f507 75ac 	add.w	r5, r7, #344	@ 0x158
 80031e2:	461c      	mov	r4, r3
 80031e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ec:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF third = {4300.0, 6400.0, 0.0};
 80031f0:	4b94      	ldr	r3, [pc, #592]	@ (8003444 <main+0x2cc>)
 80031f2:	f507 75a0 	add.w	r5, r7, #320	@ 0x140
 80031f6:	461c      	mov	r4, r3
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003200:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fourth = {4300.0, 10000.0, 0.0};
 8003204:	4b90      	ldr	r3, [pc, #576]	@ (8003448 <main+0x2d0>)
 8003206:	f507 7594 	add.w	r5, r7, #296	@ 0x128
 800320a:	461c      	mov	r4, r3
 800320c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003210:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003214:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fifth = {4300.0, 10000.0, -90.0};
 8003218:	4b8c      	ldr	r3, [pc, #560]	@ (800344c <main+0x2d4>)
 800321a:	f507 7588 	add.w	r5, r7, #272	@ 0x110
 800321e:	461c      	mov	r4, r3
 8003220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003224:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003228:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF sixth = {4300.0, 14000.0, -90.0};
 800322c:	4b88      	ldr	r3, [pc, #544]	@ (8003450 <main+0x2d8>)
 800322e:	f107 05f8 	add.w	r5, r7, #248	@ 0xf8
 8003232:	461c      	mov	r4, r3
 8003234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003238:	e894 0003 	ldmia.w	r4, {r0, r1}
 800323c:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF tuning = {0.0, 1000.0, 0.0};
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	4b80      	ldr	r3, [pc, #512]	@ (8003454 <main+0x2dc>)
 8003252:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

  EKF waypoint[4] = {
 8003262:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003266:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800326a:	4a7b      	ldr	r2, [pc, #492]	@ (8003458 <main+0x2e0>)
 800326c:	4618      	mov	r0, r3
 800326e:	4611      	mov	r1, r2
 8003270:	2360      	movs	r3, #96	@ 0x60
 8003272:	461a      	mov	r2, r3
 8003274:	f009 fc87 	bl	800cb86 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EKF position = extendedKalmanFilter();
 8003278:	f001 fc86 	bl	8004b88 <extendedKalmanFilter>
 800327c:	eeb0 5a40 	vmov.f32	s10, s0
 8003280:	eef0 5a60 	vmov.f32	s11, s1
 8003284:	eeb0 6a41 	vmov.f32	s12, s2
 8003288:	eef0 6a61 	vmov.f32	s13, s3
 800328c:	eeb0 7a42 	vmov.f32	s14, s4
 8003290:	eef0 7a62 	vmov.f32	s15, s5
 8003294:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003298:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800329c:	ed83 5b00 	vstr	d5, [r3]
 80032a0:	ed83 6b02 	vstr	d6, [r3, #8]
 80032a4:	ed83 7b04 	vstr	d7, [r3, #16]
//	  cek2(tuning, position);
	  cek(position);
 80032a8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80032ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032b0:	ed93 5b00 	vldr	d5, [r3]
 80032b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80032b8:	ed93 7b04 	vldr	d7, [r3, #16]
 80032bc:	eeb0 0a45 	vmov.f32	s0, s10
 80032c0:	eef0 0a65 	vmov.f32	s1, s11
 80032c4:	eeb0 1a46 	vmov.f32	s2, s12
 80032c8:	eef0 1a66 	vmov.f32	s3, s13
 80032cc:	eeb0 2a47 	vmov.f32	s4, s14
 80032d0:	eef0 2a67 	vmov.f32	s5, s15
 80032d4:	f002 fbe8 	bl	8005aa8 <cek>
//	  displayKalman(position);
//	  displayCounter();

//	  bool firstStep = fabs(first.x - position.x) < 10 && fabs(first.y - position.y) < 10 && fabs(first.h - position.h) < 0.5;
	  bool secondStep = fabs(second.x - position.x) < 10 && fabs(second.y - position.y) < 10 && fabs(second.h - position.h) < 0.5;
 80032d8:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80032dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80032e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fc ffce 	bl	8000288 <__aeabi_dsub>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4690      	mov	r8, r2
 80032f2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	4b58      	ldr	r3, [pc, #352]	@ (800345c <main+0x2e4>)
 80032fc:	4640      	mov	r0, r8
 80032fe:	4649      	mov	r1, r9
 8003300:	f7fd fbec 	bl	8000adc <__aeabi_dcmplt>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d034      	beq.n	8003374 <main+0x1fc>
 800330a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800330e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003312:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003316:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800331a:	f7fc ffb5 	bl	8000288 <__aeabi_dsub>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4692      	mov	sl, r2
 8003324:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <main+0x2e4>)
 800332e:	4650      	mov	r0, sl
 8003330:	4659      	mov	r1, fp
 8003332:	f7fd fbd3 	bl	8000adc <__aeabi_dcmplt>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <main+0x1fc>
 800333c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003340:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003344:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003348:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800334c:	f7fc ff9c 	bl	8000288 <__aeabi_dsub>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	663a      	str	r2, [r7, #96]	@ 0x60
 8003356:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800335a:	667b      	str	r3, [r7, #100]	@ 0x64
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4b3f      	ldr	r3, [pc, #252]	@ (8003460 <main+0x2e8>)
 8003362:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003366:	f7fd fbb9 	bl	8000adc <__aeabi_dcmplt>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <main+0x1fc>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <main+0x1fe>
 8003374:	2300      	movs	r3, #0
 8003376:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 800337a:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
	  bool thirdStep = fabs(third.x - position.x) < 10 && fabs(third.y - position.y) < 10 && fabs(third.h - position.h) < 0.5;
 8003386:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800338a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800338e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fc ff77 	bl	8000288 <__aeabi_dsub>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b2c      	ldr	r3, [pc, #176]	@ (800345c <main+0x2e4>)
 80033ac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80033b0:	f7fd fb94 	bl	8000adc <__aeabi_dcmplt>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d054      	beq.n	8003464 <main+0x2ec>
 80033ba:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80033be:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80033c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033ca:	f7fc ff5d 	bl	8000288 <__aeabi_dsub>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	653a      	str	r2, [r7, #80]	@ 0x50
 80033d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <main+0x2e4>)
 80033e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80033e4:	f7fd fb7a 	bl	8000adc <__aeabi_dcmplt>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03a      	beq.n	8003464 <main+0x2ec>
 80033ee:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80033f2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80033f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033fe:	f7fc ff43 	bl	8000288 <__aeabi_dsub>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800340c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <main+0x2e8>)
 8003414:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003418:	f7fd fb60 	bl	8000adc <__aeabi_dcmplt>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d020      	beq.n	8003464 <main+0x2ec>
 8003422:	2301      	movs	r3, #1
 8003424:	e01f      	b.n	8003466 <main+0x2ee>
 8003426:	bf00      	nop
 8003428:	20000338 	.word	0x20000338
 800342c:	200003c8 	.word	0x200003c8
 8003430:	200004bc 	.word	0x200004bc
 8003434:	20000410 	.word	0x20000410
 8003438:	20000508 	.word	0x20000508
 800343c:	20000458 	.word	0x20000458
 8003440:	08011050 	.word	0x08011050
 8003444:	08011068 	.word	0x08011068
 8003448:	08011080 	.word	0x08011080
 800344c:	08011098 	.word	0x08011098
 8003450:	080110b0 	.word	0x080110b0
 8003454:	408f4000 	.word	0x408f4000
 8003458:	080110c8 	.word	0x080110c8
 800345c:	40240000 	.word	0x40240000
 8003460:	3fe00000 	.word	0x3fe00000
 8003464:	2300      	movs	r3, #0
 8003466:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
 800346a:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
	  bool fourthStep = fabs(fourth.x - position.x) < 10 && fabs(fourth.y - position.y) < 10 && fabs(fourth.h - position.h) < 0.5;
 8003476:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800347a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800347e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fc feff 	bl	8000288 <__aeabi_dsub>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003494:	647b      	str	r3, [r7, #68]	@ 0x44
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	4ba5      	ldr	r3, [pc, #660]	@ (8003730 <main+0x5b8>)
 800349c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80034a0:	f7fd fb1c 	bl	8000adc <__aeabi_dcmplt>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d035      	beq.n	8003516 <main+0x39e>
 80034aa:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80034ae:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80034b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034ba:	f7fc fee5 	bl	8000288 <__aeabi_dsub>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	4b98      	ldr	r3, [pc, #608]	@ (8003730 <main+0x5b8>)
 80034d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80034d4:	f7fd fb02 	bl	8000adc <__aeabi_dcmplt>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01b      	beq.n	8003516 <main+0x39e>
 80034de:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 80034e2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80034e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034ee:	f7fc fecb 	bl	8000288 <__aeabi_dsub>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80034f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	4b8c      	ldr	r3, [pc, #560]	@ (8003734 <main+0x5bc>)
 8003504:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003508:	f7fd fae8 	bl	8000adc <__aeabi_dcmplt>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <main+0x39e>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <main+0x3a0>
 8003516:	2300      	movs	r3, #0
 8003518:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
 800351c:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
	  bool fifthStep = fabs(fifth.x - position.x) < 10 && fabs(fifth.y - position.y) < 10 && fabs(fifth.h - position.h) < 0.5;
 8003528:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800352c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003530:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fc fea6 	bl	8000288 <__aeabi_dsub>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003542:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	4b78      	ldr	r3, [pc, #480]	@ (8003730 <main+0x5b8>)
 800354e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003552:	f7fd fac3 	bl	8000adc <__aeabi_dcmplt>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d035      	beq.n	80035c8 <main+0x450>
 800355c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8003560:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003564:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003568:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800356c:	f7fc fe8c 	bl	8000288 <__aeabi_dsub>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	623a      	str	r2, [r7, #32]
 8003576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	4b6b      	ldr	r3, [pc, #428]	@ (8003730 <main+0x5b8>)
 8003582:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003586:	f7fd faa9 	bl	8000adc <__aeabi_dcmplt>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <main+0x450>
 8003590:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003594:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003598:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800359c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035a0:	f7fc fe72 	bl	8000288 <__aeabi_dsub>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	61ba      	str	r2, [r7, #24]
 80035aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003734 <main+0x5bc>)
 80035b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ba:	f7fd fa8f 	bl	8000adc <__aeabi_dcmplt>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <main+0x450>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <main+0x452>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 80035ce:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
	  bool sixthStep = fabs(sixth.x - position.x) < 10 && fabs(sixth.y - position.y) < 10 && fabs(sixth.h - position.h) < 0.5;
 80035da:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80035de:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80035e2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f7fc fe4d 	bl	8000288 <__aeabi_dsub>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	613a      	str	r2, [r7, #16]
 80035f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003730 <main+0x5b8>)
 8003600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003604:	f7fd fa6a 	bl	8000adc <__aeabi_dcmplt>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d035      	beq.n	800367a <main+0x502>
 800360e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8003612:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003616:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800361a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800361e:	f7fc fe33 	bl	8000288 <__aeabi_dsub>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	60ba      	str	r2, [r7, #8]
 8003628:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	4b3f      	ldr	r3, [pc, #252]	@ (8003730 <main+0x5b8>)
 8003634:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003638:	f7fd fa50 	bl	8000adc <__aeabi_dcmplt>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <main+0x502>
 8003642:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8003646:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800364a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800364e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003652:	f7fc fe19 	bl	8000288 <__aeabi_dsub>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	603a      	str	r2, [r7, #0]
 800365c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	4b33      	ldr	r3, [pc, #204]	@ (8003734 <main+0x5bc>)
 8003668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800366c:	f7fd fa36 	bl	8000adc <__aeabi_dcmplt>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <main+0x502>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <main+0x504>
 800367a:	2300      	movs	r3, #0
 800367c:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
 8003680:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b

	  switch(mode)
 800368c:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <main+0x5c0>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	3b01      	subs	r3, #1
 8003692:	2b05      	cmp	r3, #5
 8003694:	f200 80eb 	bhi.w	800386e <main+0x6f6>
 8003698:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <main+0x528>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b9 	.word	0x080036b9
 80036a4:	080036cb 	.word	0x080036cb
 80036a8:	080036e7 	.word	0x080036e7
 80036ac:	08003741 	.word	0x08003741
 80036b0:	080037e3 	.word	0x080037e3
 80036b4:	08003829 	.word	0x08003829
	  {
		  case 1:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036be:	481f      	ldr	r0, [pc, #124]	@ (800373c <main+0x5c4>)
 80036c0:	f004 f9fc 	bl	8007abc <HAL_GPIO_WritePin>
			  findSilo();
 80036c4:	f003 f894 	bl	80067f0 <findSilo>
//				  if(firstStep)
//				  {
//					  mode = 2;
//				  }
//			  }
			  break;
 80036c8:	e0e4      	b.n	8003894 <main+0x71c>
		  case 2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80036ca:	2200      	movs	r2, #0
 80036cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036d0:	481a      	ldr	r0, [pc, #104]	@ (800373c <main+0x5c4>)
 80036d2:	f004 f9f3 	bl	8007abc <HAL_GPIO_WritePin>
			  start(0, 2000, 0, 4);
 80036d6:	2304      	movs	r3, #4
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80036de:	2000      	movs	r0, #0
 80036e0:	f7fe f9be 	bl	8001a60 <start>
//			  PID_Kalman(second, 2);
//			  if(secondStep)
//			  {
//				  mode = 3;
//			  }
			  break;
 80036e4:	e0d6      	b.n	8003894 <main+0x71c>
		  case 3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80036e6:	2201      	movs	r2, #1
 80036e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036ec:	4813      	ldr	r0, [pc, #76]	@ (800373c <main+0x5c4>)
 80036ee:	f004 f9e5 	bl	8007abc <HAL_GPIO_WritePin>
			  PID_Kalman(third, 4);
 80036f2:	ed97 5b50 	vldr	d5, [r7, #320]	@ 0x140
 80036f6:	ed97 6b52 	vldr	d6, [r7, #328]	@ 0x148
 80036fa:	ed97 7b54 	vldr	d7, [r7, #336]	@ 0x150
 80036fe:	2004      	movs	r0, #4
 8003700:	eeb0 0a45 	vmov.f32	s0, s10
 8003704:	eef0 0a65 	vmov.f32	s1, s11
 8003708:	eeb0 1a46 	vmov.f32	s2, s12
 800370c:	eef0 1a66 	vmov.f32	s3, s13
 8003710:	eeb0 2a47 	vmov.f32	s4, s14
 8003714:	eef0 2a67 	vmov.f32	s5, s15
 8003718:	f002 ffbe 	bl	8006698 <PID_Kalman>
			  if(thirdStep)
 800371c:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80b0 	beq.w	8003886 <main+0x70e>
			  {
				  mode = 4;
 8003726:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <main+0x5c0>)
 8003728:	2304      	movs	r3, #4
 800372a:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800372c:	e0ab      	b.n	8003886 <main+0x70e>
 800372e:	bf00      	nop
 8003730:	40240000 	.word	0x40240000
 8003734:	3fe00000 	.word	0x3fe00000
 8003738:	20000558 	.word	0x20000558
 800373c:	40020c00 	.word	0x40020c00
		  case 4:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003746:	4858      	ldr	r0, [pc, #352]	@ (80038a8 <main+0x730>)
 8003748:	f004 f9b8 	bl	8007abc <HAL_GPIO_WritePin>
			  if(position.y < 9000)
 800374c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8003750:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003754:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003758:	a351      	add	r3, pc, #324	@ (adr r3, 80038a0 <main+0x728>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f7fd f9bd 	bl	8000adc <__aeabi_dcmplt>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01f      	beq.n	80037a8 <main+0x630>
			  {
				  double gain = sensorData[1] * 200;
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <main+0x734>)
 800376a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	4b4f      	ldr	r3, [pc, #316]	@ (80038b0 <main+0x738>)
 8003774:	f7fc ff40 	bl	80005f8 <__aeabi_dmul>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
				  nanjak(0, 2000 + gain, 0);
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <main+0x73c>)
 8003786:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800378a:	f7fc fd7f 	bl	800028c <__adddf3>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f7fd f9df 	bl	8000b58 <__aeabi_d2iz>
 800379a:	4603      	mov	r3, r0
 800379c:	2200      	movs	r2, #0
 800379e:	4619      	mov	r1, r3
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7fe fff9 	bl	8002798 <nanjak>
				  if(fourthStep)
				  {
					  mode = 5;
				  }
			  }
			  break;
 80037a6:	e070      	b.n	800388a <main+0x712>
				  PID_Kalman(fourth, 3);
 80037a8:	ed97 5b4a 	vldr	d5, [r7, #296]	@ 0x128
 80037ac:	ed97 6b4c 	vldr	d6, [r7, #304]	@ 0x130
 80037b0:	ed97 7b4e 	vldr	d7, [r7, #312]	@ 0x138
 80037b4:	2003      	movs	r0, #3
 80037b6:	eeb0 0a45 	vmov.f32	s0, s10
 80037ba:	eef0 0a65 	vmov.f32	s1, s11
 80037be:	eeb0 1a46 	vmov.f32	s2, s12
 80037c2:	eef0 1a66 	vmov.f32	s3, s13
 80037c6:	eeb0 2a47 	vmov.f32	s4, s14
 80037ca:	eef0 2a67 	vmov.f32	s5, s15
 80037ce:	f002 ff63 	bl	8006698 <PID_Kalman>
				  if(fourthStep)
 80037d2:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d057      	beq.n	800388a <main+0x712>
					  mode = 5;
 80037da:	4a37      	ldr	r2, [pc, #220]	@ (80038b8 <main+0x740>)
 80037dc:	2305      	movs	r3, #5
 80037de:	7013      	strb	r3, [r2, #0]
			  break;
 80037e0:	e053      	b.n	800388a <main+0x712>
		  case 5:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80037e2:	2201      	movs	r2, #1
 80037e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037e8:	482f      	ldr	r0, [pc, #188]	@ (80038a8 <main+0x730>)
 80037ea:	f004 f967 	bl	8007abc <HAL_GPIO_WritePin>
			  PID_Kalman(fifth, 3);
 80037ee:	ed97 5b44 	vldr	d5, [r7, #272]	@ 0x110
 80037f2:	ed97 6b46 	vldr	d6, [r7, #280]	@ 0x118
 80037f6:	ed97 7b48 	vldr	d7, [r7, #288]	@ 0x120
 80037fa:	2003      	movs	r0, #3
 80037fc:	eeb0 0a45 	vmov.f32	s0, s10
 8003800:	eef0 0a65 	vmov.f32	s1, s11
 8003804:	eeb0 1a46 	vmov.f32	s2, s12
 8003808:	eef0 1a66 	vmov.f32	s3, s13
 800380c:	eeb0 2a47 	vmov.f32	s4, s14
 8003810:	eef0 2a67 	vmov.f32	s5, s15
 8003814:	f002 ff40 	bl	8006698 <PID_Kalman>
			  if(fifthStep)
 8003818:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d036      	beq.n	800388e <main+0x716>
			  {
				  mode = 6;
 8003820:	4a25      	ldr	r2, [pc, #148]	@ (80038b8 <main+0x740>)
 8003822:	2306      	movs	r3, #6
 8003824:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8003826:	e032      	b.n	800388e <main+0x716>
		  case 6:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003828:	2200      	movs	r2, #0
 800382a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800382e:	481e      	ldr	r0, [pc, #120]	@ (80038a8 <main+0x730>)
 8003830:	f004 f944 	bl	8007abc <HAL_GPIO_WritePin>
			  PID_Kalman(sixth, 3);
 8003834:	ed97 5b3e 	vldr	d5, [r7, #248]	@ 0xf8
 8003838:	ed97 6b40 	vldr	d6, [r7, #256]	@ 0x100
 800383c:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 8003840:	2003      	movs	r0, #3
 8003842:	eeb0 0a45 	vmov.f32	s0, s10
 8003846:	eef0 0a65 	vmov.f32	s1, s11
 800384a:	eeb0 1a46 	vmov.f32	s2, s12
 800384e:	eef0 1a66 	vmov.f32	s3, s13
 8003852:	eeb0 2a47 	vmov.f32	s4, s14
 8003856:	eef0 2a67 	vmov.f32	s5, s15
 800385a:	f002 ff1d 	bl	8006698 <PID_Kalman>
			  if(sixthStep)
 800385e:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8003862:	2b00      	cmp	r3, #0
 8003864:	d015      	beq.n	8003892 <main+0x71a>
			  {
				  mode = 0;
 8003866:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <main+0x740>)
 8003868:	2300      	movs	r3, #0
 800386a:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800386c:	e011      	b.n	8003892 <main+0x71a>
		  default:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003874:	480c      	ldr	r0, [pc, #48]	@ (80038a8 <main+0x730>)
 8003876:	f004 f921 	bl	8007abc <HAL_GPIO_WritePin>
			  Inverse_Kinematics(0, 0, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	2000      	movs	r0, #0
 8003880:	f7fd fc62 	bl	8001148 <Inverse_Kinematics>
			  break;
 8003884:	e006      	b.n	8003894 <main+0x71c>
			  break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <main+0x71c>
			  break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <main+0x71c>
			  break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <main+0x71c>
			  break;
 8003892:	bf00      	nop
	  }
	  lcd_clear();
 8003894:	f7ff fad8 	bl	8002e48 <lcd_clear>
  {
 8003898:	e4ee      	b.n	8003278 <main+0x100>
 800389a:	bf00      	nop
 800389c:	f3af 8000 	nop.w
 80038a0:	00000000 	.word	0x00000000
 80038a4:	40c19400 	.word	0x40c19400
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	200004f8 	.word	0x200004f8
 80038b0:	40690000 	.word	0x40690000
 80038b4:	409f4000 	.word	0x409f4000
 80038b8:	20000558 	.word	0x20000558

080038bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b094      	sub	sp, #80	@ 0x50
 80038c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038c2:	f107 0320 	add.w	r3, r7, #32
 80038c6:	2230      	movs	r2, #48	@ 0x30
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f009 f86d 	bl	800c9aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <SystemClock_Config+0xcc>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	4a27      	ldr	r2, [pc, #156]	@ (8003988 <SystemClock_Config+0xcc>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f0:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <SystemClock_Config+0xcc>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038fc:	2300      	movs	r3, #0
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	4b22      	ldr	r3, [pc, #136]	@ (800398c <SystemClock_Config+0xd0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a21      	ldr	r2, [pc, #132]	@ (800398c <SystemClock_Config+0xd0>)
 8003906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <SystemClock_Config+0xd0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003918:	2301      	movs	r3, #1
 800391a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800391c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003922:	2302      	movs	r3, #2
 8003924:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003926:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800392c:	2308      	movs	r3, #8
 800392e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003930:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003934:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003936:	2302      	movs	r3, #2
 8003938:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800393a:	2307      	movs	r3, #7
 800393c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800393e:	f107 0320 	add.w	r3, r7, #32
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fd8a 	bl	800845c <HAL_RCC_OscConfig>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800394e:	f000 fcfd 	bl	800434c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003952:	230f      	movs	r3, #15
 8003954:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003956:	2302      	movs	r3, #2
 8003958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800395e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	2105      	movs	r1, #5
 8003970:	4618      	mov	r0, r3
 8003972:	f004 ffeb 	bl	800894c <HAL_RCC_ClockConfig>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800397c:	f000 fce6 	bl	800434c <Error_Handler>
  }
}
 8003980:	bf00      	nop
 8003982:	3750      	adds	r7, #80	@ 0x50
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000

08003990 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003994:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <MX_I2C2_Init+0x50>)
 8003996:	4a13      	ldr	r2, [pc, #76]	@ (80039e4 <MX_I2C2_Init+0x54>)
 8003998:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800399a:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <MX_I2C2_Init+0x50>)
 800399c:	4a12      	ldr	r2, [pc, #72]	@ (80039e8 <MX_I2C2_Init+0x58>)
 800399e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039b4:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039bc:	2200      	movs	r2, #0
 80039be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039c0:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80039cc:	4804      	ldr	r0, [pc, #16]	@ (80039e0 <MX_I2C2_Init+0x50>)
 80039ce:	f004 f8a7 	bl	8007b20 <HAL_I2C_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80039d8:	f000 fcb8 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	200002e4 	.word	0x200002e4
 80039e4:	40005800 	.word	0x40005800
 80039e8:	000186a0 	.word	0x000186a0

080039ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b096      	sub	sp, #88	@ 0x58
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	611a      	str	r2, [r3, #16]
 8003a1a:	615a      	str	r2, [r3, #20]
 8003a1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2220      	movs	r2, #32
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f008 ffc0 	bl	800c9aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a2a:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a2c:	4a50      	ldr	r2, [pc, #320]	@ (8003b70 <MX_TIM1_Init+0x184>)
 8003a2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8003a30:	4b4e      	ldr	r3, [pc, #312]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a32:	2205      	movs	r2, #5
 8003a34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a36:	4b4d      	ldr	r3, [pc, #308]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a3e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a44:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a4a:	4b48      	ldr	r3, [pc, #288]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a50:	4b46      	ldr	r3, [pc, #280]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a56:	4845      	ldr	r0, [pc, #276]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a58:	f005 f998 	bl	8008d8c <HAL_TIM_Base_Init>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a62:	f000 fc73 	bl	800434c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a70:	4619      	mov	r1, r3
 8003a72:	483e      	ldr	r0, [pc, #248]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a74:	f005 fcfa 	bl	800946c <HAL_TIM_ConfigClockSource>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003a7e:	f000 fc65 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a82:	483a      	ldr	r0, [pc, #232]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003a84:	f005 f9d1 	bl	8008e2a <HAL_TIM_PWM_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003a8e:	f000 fc5d 	bl	800434c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4832      	ldr	r0, [pc, #200]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003aa2:	f006 f8f9 	bl	8009c98 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003aac:	f000 fc4e 	bl	800434c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ab0:	2360      	movs	r3, #96	@ 0x60
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003abc:	2300      	movs	r3, #0
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4825      	ldr	r0, [pc, #148]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003ad6:	f005 fc07 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003ae0:	f000 fc34 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	481f      	ldr	r0, [pc, #124]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003aee:	f005 fbfb 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003af8:	f000 fc28 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b00:	2208      	movs	r2, #8
 8003b02:	4619      	mov	r1, r3
 8003b04:	4819      	ldr	r0, [pc, #100]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003b06:	f005 fbef 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003b10:	f000 fc1c 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b18:	220c      	movs	r2, #12
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4813      	ldr	r0, [pc, #76]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003b1e:	f005 fbe3 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003b28:	f000 fc10 	bl	800434c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4807      	ldr	r0, [pc, #28]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003b50:	f006 f91e 	bl	8009d90 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003b5a:	f000 fbf7 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b5e:	4803      	ldr	r0, [pc, #12]	@ (8003b6c <MX_TIM1_Init+0x180>)
 8003b60:	f003 f904 	bl	8006d6c <HAL_TIM_MspPostInit>

}
 8003b64:	bf00      	nop
 8003b66:	3758      	adds	r7, #88	@ 0x58
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000338 	.word	0x20000338
 8003b70:	40010000 	.word	0x40010000

08003b74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	@ 0x38
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b88:	f107 0320 	add.w	r3, r7, #32
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
 8003ba0:	615a      	str	r2, [r3, #20]
 8003ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ba4:	4b32      	ldr	r3, [pc, #200]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003baa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8003bac:	4b30      	ldr	r3, [pc, #192]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bae:	2205      	movs	r2, #5
 8003bb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bba:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003bbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bcc:	4828      	ldr	r0, [pc, #160]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bce:	f005 f8dd 	bl	8008d8c <HAL_TIM_Base_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003bd8:	f000 fbb8 	bl	800434c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003be6:	4619      	mov	r1, r3
 8003be8:	4821      	ldr	r0, [pc, #132]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bea:	f005 fc3f 	bl	800946c <HAL_TIM_ConfigClockSource>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003bf4:	f000 fbaa 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003bf8:	481d      	ldr	r0, [pc, #116]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003bfa:	f005 f916 	bl	8008e2a <HAL_TIM_PWM_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003c04:	f000 fba2 	bl	800434c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c10:	f107 0320 	add.w	r3, r7, #32
 8003c14:	4619      	mov	r1, r3
 8003c16:	4816      	ldr	r0, [pc, #88]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003c18:	f006 f83e 	bl	8009c98 <HAL_TIMEx_MasterConfigSynchronization>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003c22:	f000 fb93 	bl	800434c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c26:	2360      	movs	r3, #96	@ 0x60
 8003c28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	2208      	movs	r2, #8
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003c3e:	f005 fb53 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003c48:	f000 fb80 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	220c      	movs	r2, #12
 8003c50:	4619      	mov	r1, r3
 8003c52:	4807      	ldr	r0, [pc, #28]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003c54:	f005 fb48 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003c5e:	f000 fb75 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003c62:	4803      	ldr	r0, [pc, #12]	@ (8003c70 <MX_TIM2_Init+0xfc>)
 8003c64:	f003 f882 	bl	8006d6c <HAL_TIM_MspPostInit>

}
 8003c68:	bf00      	nop
 8003c6a:	3738      	adds	r7, #56	@ 0x38
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000380 	.word	0x20000380

08003c74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b096      	sub	sp, #88	@ 0x58
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	611a      	str	r2, [r3, #16]
 8003ca2:	615a      	str	r2, [r3, #20]
 8003ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	2220      	movs	r2, #32
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f008 fe7c 	bl	800c9aa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003cb2:	4b50      	ldr	r3, [pc, #320]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cb4:	4a50      	ldr	r2, [pc, #320]	@ (8003df8 <MX_TIM8_Init+0x184>)
 8003cb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 8003cb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cba:	2205      	movs	r2, #5
 8003cbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cc6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003cca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ccc:	4b49      	ldr	r3, [pc, #292]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003cd2:	4b48      	ldr	r3, [pc, #288]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd8:	4b46      	ldr	r3, [pc, #280]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003cde:	4845      	ldr	r0, [pc, #276]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003ce0:	f005 f854 	bl	8008d8c <HAL_TIM_Base_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003cea:	f000 fb2f 	bl	800434c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003cf4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	483e      	ldr	r0, [pc, #248]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003cfc:	f005 fbb6 	bl	800946c <HAL_TIM_ConfigClockSource>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003d06:	f000 fb21 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003d0a:	483a      	ldr	r0, [pc, #232]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003d0c:	f005 f88d 	bl	8008e2a <HAL_TIM_PWM_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003d16:	f000 fb19 	bl	800434c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003d26:	4619      	mov	r1, r3
 8003d28:	4832      	ldr	r0, [pc, #200]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003d2a:	f005 ffb5 	bl	8009c98 <HAL_TIMEx_MasterConfigSynchronization>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003d34:	f000 fb0a 	bl	800434c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d38:	2360      	movs	r3, #96	@ 0x60
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d44:	2300      	movs	r3, #0
 8003d46:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4825      	ldr	r0, [pc, #148]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003d5e:	f005 fac3 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003d68:	f000 faf0 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d70:	2204      	movs	r2, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	481f      	ldr	r0, [pc, #124]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003d76:	f005 fab7 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003d80:	f000 fae4 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d88:	2208      	movs	r2, #8
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4819      	ldr	r0, [pc, #100]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003d8e:	f005 faab 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003d98:	f000 fad8 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003da0:	220c      	movs	r2, #12
 8003da2:	4619      	mov	r1, r3
 8003da4:	4813      	ldr	r0, [pc, #76]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003da6:	f005 fa9f 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8003db0:	f000 facc 	bl	800434c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4807      	ldr	r0, [pc, #28]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003dd8:	f005 ffda 	bl	8009d90 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8003de2:	f000 fab3 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003de6:	4803      	ldr	r0, [pc, #12]	@ (8003df4 <MX_TIM8_Init+0x180>)
 8003de8:	f002 ffc0 	bl	8006d6c <HAL_TIM_MspPostInit>

}
 8003dec:	bf00      	nop
 8003dee:	3758      	adds	r7, #88	@ 0x58
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	200003c8 	.word	0x200003c8
 8003df8:	40010400 	.word	0x40010400

08003dfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e00:	4b11      	ldr	r3, [pc, #68]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e02:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <MX_USART1_UART_Init+0x50>)
 8003e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e08:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e22:	220c      	movs	r2, #12
 8003e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e32:	4805      	ldr	r0, [pc, #20]	@ (8003e48 <MX_USART1_UART_Init+0x4c>)
 8003e34:	f006 f812 	bl	8009e5c <HAL_UART_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e3e:	f000 fa85 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000410 	.word	0x20000410
 8003e4c:	40011000 	.word	0x40011000

08003e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e56:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <MX_USART2_UART_Init+0x50>)
 8003e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e5a:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e68:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e74:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e76:	220c      	movs	r2, #12
 8003e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e7a:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e86:	4805      	ldr	r0, [pc, #20]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e88:	f005 ffe8 	bl	8009e5c <HAL_UART_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e92:	f000 fa5b 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000458 	.word	0x20000458
 8003ea0:	40004400 	.word	0x40004400

08003ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	@ 0x30
 8003ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eaa:	f107 031c 	add.w	r3, r7, #28
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	60da      	str	r2, [r3, #12]
 8003eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	4bb9      	ldr	r3, [pc, #740]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	4ab8      	ldr	r2, [pc, #736]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003ec4:	f043 0310 	orr.w	r3, r3, #16
 8003ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eca:	4bb6      	ldr	r3, [pc, #728]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	4bb2      	ldr	r3, [pc, #712]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	4ab1      	ldr	r2, [pc, #708]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee6:	4baf      	ldr	r3, [pc, #700]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	4bab      	ldr	r3, [pc, #684]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	4aaa      	ldr	r2, [pc, #680]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f02:	4ba8      	ldr	r3, [pc, #672]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4ba4      	ldr	r3, [pc, #656]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	4aa3      	ldr	r2, [pc, #652]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f1e:	4ba1      	ldr	r3, [pc, #644]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b9d      	ldr	r3, [pc, #628]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	4a9c      	ldr	r2, [pc, #624]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f34:	f043 0302 	orr.w	r3, r3, #2
 8003f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3a:	4b9a      	ldr	r3, [pc, #616]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	4b96      	ldr	r3, [pc, #600]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	4a95      	ldr	r2, [pc, #596]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f56:	4b93      	ldr	r3, [pc, #588]	@ (80041a4 <MX_GPIO_Init+0x300>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003f62:	2200      	movs	r2, #0
 8003f64:	217f      	movs	r1, #127	@ 0x7f
 8003f66:	4890      	ldr	r0, [pc, #576]	@ (80041a8 <MX_GPIO_Init+0x304>)
 8003f68:	f003 fda8 	bl	8007abc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f243 0130 	movw	r1, #12336	@ 0x3030
 8003f72:	488e      	ldr	r0, [pc, #568]	@ (80041ac <MX_GPIO_Init+0x308>)
 8003f74:	f003 fda2 	bl	8007abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f244 0107 	movw	r1, #16391	@ 0x4007
 8003f7e:	488c      	ldr	r0, [pc, #560]	@ (80041b0 <MX_GPIO_Init+0x30c>)
 8003f80:	f003 fd9c 	bl	8007abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003f84:	233f      	movs	r3, #63	@ 0x3f
 8003f86:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f88:	2311      	movs	r3, #17
 8003f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f90:	2303      	movs	r3, #3
 8003f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f94:	f107 031c 	add.w	r3, r7, #28
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4883      	ldr	r0, [pc, #524]	@ (80041a8 <MX_GPIO_Init+0x304>)
 8003f9c:	f003 fbda 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fa0:	2340      	movs	r3, #64	@ 0x40
 8003fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003fa4:	2311      	movs	r3, #17
 8003fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fac:	2300      	movs	r3, #0
 8003fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fb0:	f107 031c 	add.w	r3, r7, #28
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	487c      	ldr	r0, [pc, #496]	@ (80041a8 <MX_GPIO_Init+0x304>)
 8003fb8:	f003 fbcc 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003fbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003fc2:	2311      	movs	r3, #17
 8003fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fce:	f107 031c 	add.w	r3, r7, #28
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4875      	ldr	r0, [pc, #468]	@ (80041ac <MX_GPIO_Init+0x308>)
 8003fd6:	f003 fbbd 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 8003fda:	2309      	movs	r3, #9
 8003fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe6:	f107 031c 	add.w	r3, r7, #28
 8003fea:	4619      	mov	r1, r3
 8003fec:	486f      	ldr	r0, [pc, #444]	@ (80041ac <MX_GPIO_Init+0x308>)
 8003fee:	f003 fbb1 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ff6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004000:	f107 031c 	add.w	r3, r7, #28
 8004004:	4619      	mov	r1, r3
 8004006:	4869      	ldr	r0, [pc, #420]	@ (80041ac <MX_GPIO_Init+0x308>)
 8004008:	f003 fba4 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 800400c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8004010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004012:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004018:	2301      	movs	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	4619      	mov	r1, r3
 8004022:	4864      	ldr	r0, [pc, #400]	@ (80041b4 <MX_GPIO_Init+0x310>)
 8004024:	f003 fb96 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8004028:	f248 4302 	movw	r3, #33794	@ 0x8402
 800402c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004032:	2301      	movs	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004036:	f107 031c 	add.w	r3, r7, #28
 800403a:	4619      	mov	r1, r3
 800403c:	485d      	ldr	r0, [pc, #372]	@ (80041b4 <MX_GPIO_Init+0x310>)
 800403e:	f003 fb89 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8004042:	f241 0330 	movw	r3, #4144	@ 0x1030
 8004046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004048:	2311      	movs	r3, #17
 800404a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004050:	2303      	movs	r3, #3
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4619      	mov	r1, r3
 800405a:	4854      	ldr	r0, [pc, #336]	@ (80041ac <MX_GPIO_Init+0x308>)
 800405c:	f003 fb7a 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8004060:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8004064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004066:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800406a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004070:	f107 031c 	add.w	r3, r7, #28
 8004074:	4619      	mov	r1, r3
 8004076:	484c      	ldr	r0, [pc, #304]	@ (80041a8 <MX_GPIO_Init+0x304>)
 8004078:	f003 fb6c 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 800407c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004086:	2301      	movs	r3, #1
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 800408a:	f107 031c 	add.w	r3, r7, #28
 800408e:	4619      	mov	r1, r3
 8004090:	4847      	ldr	r0, [pc, #284]	@ (80041b0 <MX_GPIO_Init+0x30c>)
 8004092:	f003 fb5f 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 8004096:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800409a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800409c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80040a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 80040a6:	f107 031c 	add.w	r3, r7, #28
 80040aa:	4619      	mov	r1, r3
 80040ac:	4840      	ldr	r0, [pc, #256]	@ (80041b0 <MX_GPIO_Init+0x30c>)
 80040ae:	f003 fb51 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80040b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040b8:	2301      	movs	r3, #1
 80040ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040bc:	2302      	movs	r3, #2
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c4:	f107 031c 	add.w	r3, r7, #28
 80040c8:	4619      	mov	r1, r3
 80040ca:	4839      	ldr	r0, [pc, #228]	@ (80041b0 <MX_GPIO_Init+0x30c>)
 80040cc:	f003 fb42 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 80040d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80040da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040dc:	2301      	movs	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 80040e0:	f107 031c 	add.w	r3, r7, #28
 80040e4:	4619      	mov	r1, r3
 80040e6:	4832      	ldr	r0, [pc, #200]	@ (80041b0 <MX_GPIO_Init+0x30c>)
 80040e8:	f003 fb34 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80040ec:	2307      	movs	r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80040f0:	2311      	movs	r3, #17
 80040f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f8:	2303      	movs	r3, #3
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040fc:	f107 031c 	add.w	r3, r7, #28
 8004100:	4619      	mov	r1, r3
 8004102:	482b      	ldr	r0, [pc, #172]	@ (80041b0 <MX_GPIO_Init+0x30c>)
 8004104:	f003 fb26 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 8004108:	2328      	movs	r3, #40	@ 0x28
 800410a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800410c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004112:	2301      	movs	r3, #1
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	4619      	mov	r1, r3
 800411c:	4826      	ldr	r0, [pc, #152]	@ (80041b8 <MX_GPIO_Init+0x314>)
 800411e:	f003 fb19 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8004122:	2310      	movs	r3, #16
 8004124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004126:	2300      	movs	r3, #0
 8004128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800412a:	2301      	movs	r3, #1
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 800412e:	f107 031c 	add.w	r3, r7, #28
 8004132:	4619      	mov	r1, r3
 8004134:	4820      	ldr	r0, [pc, #128]	@ (80041b8 <MX_GPIO_Init+0x314>)
 8004136:	f003 fb0d 	bl	8007754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	2100      	movs	r1, #0
 800413e:	2006      	movs	r0, #6
 8004140:	f003 fa3f 	bl	80075c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004144:	2006      	movs	r0, #6
 8004146:	f003 fa58 	bl	80075fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800414a:	2200      	movs	r2, #0
 800414c:	2100      	movs	r1, #0
 800414e:	2007      	movs	r0, #7
 8004150:	f003 fa37 	bl	80075c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004154:	2007      	movs	r0, #7
 8004156:	f003 fa50 	bl	80075fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800415a:	2200      	movs	r2, #0
 800415c:	2100      	movs	r1, #0
 800415e:	2008      	movs	r0, #8
 8004160:	f003 fa2f 	bl	80075c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004164:	2008      	movs	r0, #8
 8004166:	f003 fa48 	bl	80075fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	2009      	movs	r0, #9
 8004170:	f003 fa27 	bl	80075c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004174:	2009      	movs	r0, #9
 8004176:	f003 fa40 	bl	80075fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	2017      	movs	r0, #23
 8004180:	f003 fa1f 	bl	80075c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004184:	2017      	movs	r0, #23
 8004186:	f003 fa38 	bl	80075fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2100      	movs	r1, #0
 800418e:	2028      	movs	r0, #40	@ 0x28
 8004190:	f003 fa17 	bl	80075c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004194:	2028      	movs	r0, #40	@ 0x28
 8004196:	f003 fa30 	bl	80075fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800419a:	bf00      	nop
 800419c:	3730      	adds	r7, #48	@ 0x30
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40020800 	.word	0x40020800
 80041b0:	40020c00 	.word	0x40020c00
 80041b4:	40020000 	.word	0x40020000
 80041b8:	40020400 	.word	0x40020400

080041bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a53      	ldr	r2, [pc, #332]	@ (8004318 <HAL_UART_RxCpltCallback+0x15c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d14f      	bne.n	800426e <HAL_UART_RxCpltCallback+0xb2>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 80041ce:	4b53      	ldr	r3, [pc, #332]	@ (800431c <HAL_UART_RxCpltCallback+0x160>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a53      	ldr	r2, [pc, #332]	@ (8004320 <HAL_UART_RxCpltCallback+0x164>)
 80041d4:	5cd3      	ldrb	r3, [r2, r3]
 80041d6:	2b0d      	cmp	r3, #13
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_RxCpltCallback+0x2a>
 80041da:	4b50      	ldr	r3, [pc, #320]	@ (800431c <HAL_UART_RxCpltCallback+0x160>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a50      	ldr	r2, [pc, #320]	@ (8004320 <HAL_UART_RxCpltCallback+0x164>)
 80041e0:	5cd3      	ldrb	r3, [r2, r3]
 80041e2:	2b0a      	cmp	r3, #10
 80041e4:	d134      	bne.n	8004250 <HAL_UART_RxCpltCallback+0x94>
		{
			receive[rxIndex] = '\0';
 80041e6:	4b4d      	ldr	r3, [pc, #308]	@ (800431c <HAL_UART_RxCpltCallback+0x160>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004320 <HAL_UART_RxCpltCallback+0x164>)
 80041ec:	2100      	movs	r1, #0
 80041ee:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 80041f0:	494c      	ldr	r1, [pc, #304]	@ (8004324 <HAL_UART_RxCpltCallback+0x168>)
 80041f2:	484b      	ldr	r0, [pc, #300]	@ (8004320 <HAL_UART_RxCpltCallback+0x164>)
 80041f4:	f008 fbf4 	bl	800c9e0 <strtok>
 80041f8:	60f8      	str	r0, [r7, #12]
			dataIndex = 0;
 80041fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004328 <HAL_UART_RxCpltCallback+0x16c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004200:	e015      	b.n	800422e <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8004202:	4b49      	ldr	r3, [pc, #292]	@ (8004328 <HAL_UART_RxCpltCallback+0x16c>)
 8004204:	681c      	ldr	r4, [r3, #0]
 8004206:	1c63      	adds	r3, r4, #1
 8004208:	4a47      	ldr	r2, [pc, #284]	@ (8004328 <HAL_UART_RxCpltCallback+0x16c>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f006 fd99 	bl	800ad44 <atof>
 8004212:	eeb0 7a40 	vmov.f32	s14, s0
 8004216:	eef0 7a60 	vmov.f32	s15, s1
 800421a:	4a44      	ldr	r2, [pc, #272]	@ (800432c <HAL_UART_RxCpltCallback+0x170>)
 800421c:	00e3      	lsls	r3, r4, #3
 800421e:	4413      	add	r3, r2
 8004220:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8004224:	493f      	ldr	r1, [pc, #252]	@ (8004324 <HAL_UART_RxCpltCallback+0x168>)
 8004226:	2000      	movs	r0, #0
 8004228:	f008 fbda 	bl	800c9e0 <strtok>
 800422c:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8004234:	2232      	movs	r2, #50	@ 0x32
 8004236:	2100      	movs	r1, #0
 8004238:	4839      	ldr	r0, [pc, #228]	@ (8004320 <HAL_UART_RxCpltCallback+0x164>)
 800423a:	f008 fbb6 	bl	800c9aa <memset>
			rxIndex = 0;
 800423e:	4b37      	ldr	r3, [pc, #220]	@ (800431c <HAL_UART_RxCpltCallback+0x160>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, receive, 1);
 8004244:	2201      	movs	r2, #1
 8004246:	4936      	ldr	r1, [pc, #216]	@ (8004320 <HAL_UART_RxCpltCallback+0x164>)
 8004248:	4839      	ldr	r0, [pc, #228]	@ (8004330 <HAL_UART_RxCpltCallback+0x174>)
 800424a:	f005 fe57 	bl	8009efc <HAL_UART_Receive_IT>
		{
 800424e:	e05e      	b.n	800430e <HAL_UART_RxCpltCallback+0x152>
		}
		else
		{
			rxIndex++;
 8004250:	4b32      	ldr	r3, [pc, #200]	@ (800431c <HAL_UART_RxCpltCallback+0x160>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a31      	ldr	r2, [pc, #196]	@ (800431c <HAL_UART_RxCpltCallback+0x160>)
 8004258:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1);
 800425a:	4b30      	ldr	r3, [pc, #192]	@ (800431c <HAL_UART_RxCpltCallback+0x160>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a30      	ldr	r2, [pc, #192]	@ (8004320 <HAL_UART_RxCpltCallback+0x164>)
 8004260:	4413      	add	r3, r2
 8004262:	2201      	movs	r2, #1
 8004264:	4619      	mov	r1, r3
 8004266:	4832      	ldr	r0, [pc, #200]	@ (8004330 <HAL_UART_RxCpltCallback+0x174>)
 8004268:	f005 fe48 	bl	8009efc <HAL_UART_Receive_IT>
		{
			indexCAM++;
			HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1);
		}
	}
}
 800426c:	e04f      	b.n	800430e <HAL_UART_RxCpltCallback+0x152>
	else if(huart->Instance == USART2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a30      	ldr	r2, [pc, #192]	@ (8004334 <HAL_UART_RxCpltCallback+0x178>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d14a      	bne.n	800430e <HAL_UART_RxCpltCallback+0x152>
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 8004278:	4b2f      	ldr	r3, [pc, #188]	@ (8004338 <HAL_UART_RxCpltCallback+0x17c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2f      	ldr	r2, [pc, #188]	@ (800433c <HAL_UART_RxCpltCallback+0x180>)
 800427e:	5cd3      	ldrb	r3, [r2, r3]
 8004280:	2b0d      	cmp	r3, #13
 8004282:	d005      	beq.n	8004290 <HAL_UART_RxCpltCallback+0xd4>
 8004284:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <HAL_UART_RxCpltCallback+0x17c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2c      	ldr	r2, [pc, #176]	@ (800433c <HAL_UART_RxCpltCallback+0x180>)
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	2b0a      	cmp	r3, #10
 800428e:	d12f      	bne.n	80042f0 <HAL_UART_RxCpltCallback+0x134>
			receiveCAM[indexCAM] = '\0';
 8004290:	4b29      	ldr	r3, [pc, #164]	@ (8004338 <HAL_UART_RxCpltCallback+0x17c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a29      	ldr	r2, [pc, #164]	@ (800433c <HAL_UART_RxCpltCallback+0x180>)
 8004296:	2100      	movs	r1, #0
 8004298:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 800429a:	4922      	ldr	r1, [pc, #136]	@ (8004324 <HAL_UART_RxCpltCallback+0x168>)
 800429c:	4827      	ldr	r0, [pc, #156]	@ (800433c <HAL_UART_RxCpltCallback+0x180>)
 800429e:	f008 fb9f 	bl	800c9e0 <strtok>
 80042a2:	60b8      	str	r0, [r7, #8]
			dataindexCAM = 0;
 80042a4:	4b26      	ldr	r3, [pc, #152]	@ (8004340 <HAL_UART_RxCpltCallback+0x184>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 80042aa:	e010      	b.n	80042ce <HAL_UART_RxCpltCallback+0x112>
				camera[dataindexCAM++] = atoi(token);
 80042ac:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <HAL_UART_RxCpltCallback+0x184>)
 80042ae:	681c      	ldr	r4, [r3, #0]
 80042b0:	1c63      	adds	r3, r4, #1
 80042b2:	4a23      	ldr	r2, [pc, #140]	@ (8004340 <HAL_UART_RxCpltCallback+0x184>)
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	f006 fd47 	bl	800ad4a <atoi>
 80042bc:	4603      	mov	r3, r0
 80042be:	4a21      	ldr	r2, [pc, #132]	@ (8004344 <HAL_UART_RxCpltCallback+0x188>)
 80042c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 80042c4:	4917      	ldr	r1, [pc, #92]	@ (8004324 <HAL_UART_RxCpltCallback+0x168>)
 80042c6:	2000      	movs	r0, #0
 80042c8:	f008 fb8a 	bl	800c9e0 <strtok>
 80042cc:	60b8      	str	r0, [r7, #8]
			while(token != NULL)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1eb      	bne.n	80042ac <HAL_UART_RxCpltCallback+0xf0>
			memset(receiveCAM, 0, sizeof(receiveCAM));
 80042d4:	2232      	movs	r2, #50	@ 0x32
 80042d6:	2100      	movs	r1, #0
 80042d8:	4818      	ldr	r0, [pc, #96]	@ (800433c <HAL_UART_RxCpltCallback+0x180>)
 80042da:	f008 fb66 	bl	800c9aa <memset>
			indexCAM = 0;
 80042de:	4b16      	ldr	r3, [pc, #88]	@ (8004338 <HAL_UART_RxCpltCallback+0x17c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 80042e4:	2201      	movs	r2, #1
 80042e6:	4915      	ldr	r1, [pc, #84]	@ (800433c <HAL_UART_RxCpltCallback+0x180>)
 80042e8:	4817      	ldr	r0, [pc, #92]	@ (8004348 <HAL_UART_RxCpltCallback+0x18c>)
 80042ea:	f005 fe07 	bl	8009efc <HAL_UART_Receive_IT>
		{
 80042ee:	e00e      	b.n	800430e <HAL_UART_RxCpltCallback+0x152>
			indexCAM++;
 80042f0:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <HAL_UART_RxCpltCallback+0x17c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	4a10      	ldr	r2, [pc, #64]	@ (8004338 <HAL_UART_RxCpltCallback+0x17c>)
 80042f8:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1);
 80042fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004338 <HAL_UART_RxCpltCallback+0x17c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a0f      	ldr	r2, [pc, #60]	@ (800433c <HAL_UART_RxCpltCallback+0x180>)
 8004300:	4413      	add	r3, r2
 8004302:	2201      	movs	r2, #1
 8004304:	4619      	mov	r1, r3
 8004306:	4810      	ldr	r0, [pc, #64]	@ (8004348 <HAL_UART_RxCpltCallback+0x18c>)
 8004308:	f005 fdf8 	bl	8009efc <HAL_UART_Receive_IT>
}
 800430c:	e7ff      	b.n	800430e <HAL_UART_RxCpltCallback+0x152>
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	bf00      	nop
 8004318:	40011000 	.word	0x40011000
 800431c:	200004f0 	.word	0x200004f0
 8004320:	200004bc 	.word	0x200004bc
 8004324:	08011128 	.word	0x08011128
 8004328:	200004f4 	.word	0x200004f4
 800432c:	200004f8 	.word	0x200004f8
 8004330:	20000410 	.word	0x20000410
 8004334:	40004400 	.word	0x40004400
 8004338:	2000053c 	.word	0x2000053c
 800433c:	20000508 	.word	0x20000508
 8004340:	20000540 	.word	0x20000540
 8004344:	20000544 	.word	0x20000544
 8004348:	20000458 	.word	0x20000458

0800434c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004350:	b672      	cpsid	i
}
 8004352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <Error_Handler+0x8>

08004358 <odometry>:
/* END */

extern int camera[5];

robotPosition odometry()
{
 8004358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800435c:	b0bc      	sub	sp, #240	@ 0xf0
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
    robotPosition currentPosition;

    /* ENCODER INTERNAL */
    int dn1_in = counterIN1 - oldEncIN1;
 8004362:	4bc5      	ldr	r3, [pc, #788]	@ (8004678 <odometry+0x320>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4bc5      	ldr	r3, [pc, #788]	@ (800467c <odometry+0x324>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int dn2_in = counterIN2 - oldEncIN2;
 8004370:	4bc3      	ldr	r3, [pc, #780]	@ (8004680 <odometry+0x328>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4bc3      	ldr	r3, [pc, #780]	@ (8004684 <odometry+0x32c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int dn3_in = counterIN3 - oldEncIN3;
 800437e:	4bc2      	ldr	r3, [pc, #776]	@ (8004688 <odometry+0x330>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4bc2      	ldr	r3, [pc, #776]	@ (800468c <odometry+0x334>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int dn4_in = counterIN4 - oldEncIN4;
 800438c:	4bc0      	ldr	r3, [pc, #768]	@ (8004690 <odometry+0x338>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4bc0      	ldr	r3, [pc, #768]	@ (8004694 <odometry+0x33c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    oldEncIN1 = counterIN1;
 800439a:	4bb7      	ldr	r3, [pc, #732]	@ (8004678 <odometry+0x320>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4ab7      	ldr	r2, [pc, #732]	@ (800467c <odometry+0x324>)
 80043a0:	6013      	str	r3, [r2, #0]
    oldEncIN2 = counterIN2;
 80043a2:	4bb7      	ldr	r3, [pc, #732]	@ (8004680 <odometry+0x328>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4ab7      	ldr	r2, [pc, #732]	@ (8004684 <odometry+0x32c>)
 80043a8:	6013      	str	r3, [r2, #0]
    oldEncIN3 = counterIN3;
 80043aa:	4bb7      	ldr	r3, [pc, #732]	@ (8004688 <odometry+0x330>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4ab7      	ldr	r2, [pc, #732]	@ (800468c <odometry+0x334>)
 80043b0:	6013      	str	r3, [r2, #0]
    oldEncIN4 = counterIN4;
 80043b2:	4bb7      	ldr	r3, [pc, #732]	@ (8004690 <odometry+0x338>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4ab7      	ldr	r2, [pc, #732]	@ (8004694 <odometry+0x33c>)
 80043b8:	6013      	str	r3, [r2, #0]

    double dthetaIN = mm_per_tick_IN * ((-dn1_in + dn3_in) + (dn2_in - dn4_in))/(m1_m3 * 4);
 80043ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80043be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80043c2:	1ad2      	subs	r2, r2, r3
 80043c4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043cc:	1acb      	subs	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc f8a7 	bl	8000524 <__aeabi_i2d>
 80043d6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004658 <odometry+0x300>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f7fc f90c 	bl	80005f8 <__aeabi_dmul>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	a39d      	add	r3, pc, #628	@ (adr r3, 8004660 <odometry+0x308>)
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f7fc fa2d 	bl	800084c <__aeabi_ddiv>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double dxIN = mm_per_tick_IN * (-dn1_in + dn2_in - dn3_in + dn4_in)/4 * cos(M_PI_4);
 80043fa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80043fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004408:	1ad2      	subs	r2, r2, r3
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440e:	4413      	add	r3, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc f887 	bl	8000524 <__aeabi_i2d>
 8004416:	a390      	add	r3, pc, #576	@ (adr r3, 8004658 <odometry+0x300>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc f8ec 	bl	80005f8 <__aeabi_dmul>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	4b9a      	ldr	r3, [pc, #616]	@ (8004698 <odometry+0x340>)
 800442e:	f7fc fa0d 	bl	800084c <__aeabi_ddiv>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	a38b      	add	r3, pc, #556	@ (adr r3, 8004668 <odometry+0x310>)
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f7fc f8da 	bl	80005f8 <__aeabi_dmul>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double dyIN = mm_per_tick_IN * (dn1_in + dn2_in + dn3_in + dn4_in)/4 * sin(M_PI_4);
 800444c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004450:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004454:	441a      	add	r2, r3
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445a:	441a      	add	r2, r3
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004460:	4413      	add	r3, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc f85e 	bl	8000524 <__aeabi_i2d>
 8004468:	a37b      	add	r3, pc, #492	@ (adr r3, 8004658 <odometry+0x300>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f7fc f8c3 	bl	80005f8 <__aeabi_dmul>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	4b86      	ldr	r3, [pc, #536]	@ (8004698 <odometry+0x340>)
 8004480:	f7fc f9e4 	bl	800084c <__aeabi_ddiv>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	a378      	add	r3, pc, #480	@ (adr r3, 8004670 <odometry+0x318>)
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f7fc f8b1 	bl	80005f8 <__aeabi_dmul>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

    double distanceIN = hypot(dxIN, dyIN);
 800449e:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 80044a2:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 80044a6:	f00b f833 	bl	800f510 <hypot>
 80044aa:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double directionIN = atan2(dyIN, dxIN);
 80044ae:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 80044b2:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 80044b6:	f00b f827 	bl	800f508 <atan2>
 80044ba:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	double theta_localIN = directionIN - dthetaIN;
 80044be:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80044c2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80044c6:	f7fb fedf 	bl	8000288 <__aeabi_dsub>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

	xLocalIN += distanceIN * cos(theta_localIN);
 80044d2:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 80044d6:	f00b f84f 	bl	800f578 <cos>
 80044da:	ec51 0b10 	vmov	r0, r1, d0
 80044de:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80044e2:	f7fc f889 	bl	80005f8 <__aeabi_dmul>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4b6b      	ldr	r3, [pc, #428]	@ (800469c <odometry+0x344>)
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f7fb feca 	bl	800028c <__adddf3>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4967      	ldr	r1, [pc, #412]	@ (800469c <odometry+0x344>)
 80044fe:	e9c1 2300 	strd	r2, r3, [r1]
	yLocalIN += distanceIN * sin(theta_localIN);
 8004502:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8004506:	f00b f88b 	bl	800f620 <sin>
 800450a:	ec51 0b10 	vmov	r0, r1, d0
 800450e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004512:	f7fc f871 	bl	80005f8 <__aeabi_dmul>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	4b60      	ldr	r3, [pc, #384]	@ (80046a0 <odometry+0x348>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f7fb feb2 	bl	800028c <__adddf3>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	495c      	ldr	r1, [pc, #368]	@ (80046a0 <odometry+0x348>)
 800452e:	e9c1 2300 	strd	r2, r3, [r1]

    double thetaIN = headingIN + (dthetaIN / 2.0);
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800453a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800453e:	f7fc f985 	bl	800084c <__aeabi_ddiv>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	4b56      	ldr	r3, [pc, #344]	@ (80046a4 <odometry+0x34c>)
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f7fb fe9c 	bl	800028c <__adddf3>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    xGlobalIN += dxIN * cos(thetaIN) + dyIN * sin(thetaIN);
 800455c:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8004560:	f00b f80a 	bl	800f578 <cos>
 8004564:	ec51 0b10 	vmov	r0, r1, d0
 8004568:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800456c:	f7fc f844 	bl	80005f8 <__aeabi_dmul>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4690      	mov	r8, r2
 8004576:	4699      	mov	r9, r3
 8004578:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800457c:	f00b f850 	bl	800f620 <sin>
 8004580:	ec51 0b10 	vmov	r0, r1, d0
 8004584:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8004588:	f7fc f836 	bl	80005f8 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4640      	mov	r0, r8
 8004592:	4649      	mov	r1, r9
 8004594:	f7fb fe7a 	bl	800028c <__adddf3>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	4b41      	ldr	r3, [pc, #260]	@ (80046a8 <odometry+0x350>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f7fb fe71 	bl	800028c <__adddf3>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	493e      	ldr	r1, [pc, #248]	@ (80046a8 <odometry+0x350>)
 80045b0:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobalIN += -dxIN * sin(thetaIN) + dyIN * cos(thetaIN);
 80045b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80045c8:	f00b f82a 	bl	800f620 <sin>
 80045cc:	ec53 2b10 	vmov	r2, r3, d0
 80045d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045d4:	f7fc f810 	bl	80005f8 <__aeabi_dmul>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4690      	mov	r8, r2
 80045de:	4699      	mov	r9, r3
 80045e0:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80045e4:	f00a ffc8 	bl	800f578 <cos>
 80045e8:	ec51 0b10 	vmov	r0, r1, d0
 80045ec:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80045f0:	f7fc f802 	bl	80005f8 <__aeabi_dmul>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4640      	mov	r0, r8
 80045fa:	4649      	mov	r1, r9
 80045fc:	f7fb fe46 	bl	800028c <__adddf3>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <odometry+0x354>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fb fe3d 	bl	800028c <__adddf3>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4925      	ldr	r1, [pc, #148]	@ (80046ac <odometry+0x354>)
 8004618:	e9c1 2300 	strd	r2, r3, [r1]
    headingIN += dthetaIN;
 800461c:	4b21      	ldr	r3, [pc, #132]	@ (80046a4 <odometry+0x34c>)
 800461e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004622:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8004626:	f7fb fe31 	bl	800028c <__adddf3>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	491d      	ldr	r1, [pc, #116]	@ (80046a4 <odometry+0x34c>)
 8004630:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 8004634:	4b1e      	ldr	r3, [pc, #120]	@ (80046b0 <odometry+0x358>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b1e      	ldr	r3, [pc, #120]	@ (80046b4 <odometry+0x35c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int dn2 = counter2 - oldEnc2;
 8004642:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <odometry+0x360>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <odometry+0x364>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004650:	e036      	b.n	80046c0 <odometry+0x368>
 8004652:	bf00      	nop
 8004654:	f3af 8000 	nop.w
 8004658:	458bd930 	.word	0x458bd930
 800465c:	401b4977 	.word	0x401b4977
 8004660:	00000000 	.word	0x00000000
 8004664:	40a45000 	.word	0x40a45000
 8004668:	667f3bcd 	.word	0x667f3bcd
 800466c:	3fe6a09e 	.word	0x3fe6a09e
 8004670:	667f3bcc 	.word	0x667f3bcc
 8004674:	3fe6a09e 	.word	0x3fe6a09e
 8004678:	200004ac 	.word	0x200004ac
 800467c:	200005a0 	.word	0x200005a0
 8004680:	200004b0 	.word	0x200004b0
 8004684:	200005a4 	.word	0x200005a4
 8004688:	200004b4 	.word	0x200004b4
 800468c:	200005a8 	.word	0x200005a8
 8004690:	200004b8 	.word	0x200004b8
 8004694:	200005ac 	.word	0x200005ac
 8004698:	40100000 	.word	0x40100000
 800469c:	200005c0 	.word	0x200005c0
 80046a0:	200005c8 	.word	0x200005c8
 80046a4:	200005d0 	.word	0x200005d0
 80046a8:	200005b0 	.word	0x200005b0
 80046ac:	200005b8 	.word	0x200005b8
 80046b0:	200004a0 	.word	0x200004a0
 80046b4:	20000588 	.word	0x20000588
 80046b8:	200004a4 	.word	0x200004a4
 80046bc:	2000058c 	.word	0x2000058c
    int dn3 = counter3 - oldEnc3;
 80046c0:	4bbb      	ldr	r3, [pc, #748]	@ (80049b0 <odometry+0x658>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4bbb      	ldr	r3, [pc, #748]	@ (80049b4 <odometry+0x65c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    oldEnc1 = counter1;
 80046ce:	4bba      	ldr	r3, [pc, #744]	@ (80049b8 <odometry+0x660>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4aba      	ldr	r2, [pc, #744]	@ (80049bc <odometry+0x664>)
 80046d4:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 80046d6:	4bba      	ldr	r3, [pc, #744]	@ (80049c0 <odometry+0x668>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4aba      	ldr	r2, [pc, #744]	@ (80049c4 <odometry+0x66c>)
 80046dc:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 80046de:	4bb4      	ldr	r3, [pc, #720]	@ (80049b0 <odometry+0x658>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4ab4      	ldr	r2, [pc, #720]	@ (80049b4 <odometry+0x65c>)
 80046e4:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 80046e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80046ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fb ff17 	bl	8000524 <__aeabi_i2d>
 80046f6:	a3aa      	add	r3, pc, #680	@ (adr r3, 80049a0 <odometry+0x648>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fb ff7c 	bl	80005f8 <__aeabi_dmul>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	a3a7      	add	r3, pc, #668	@ (adr r3, 80049a8 <odometry+0x650>)
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f7fc f89d 	bl	800084c <__aeabi_ddiv>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 800471a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800471e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	22e6      	movs	r2, #230	@ 0xe6
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	4aa7      	ldr	r2, [pc, #668]	@ (80049c8 <odometry+0x670>)
 800472c:	fb82 1203 	smull	r1, r2, r2, r3
 8004730:	441a      	add	r2, r3
 8004732:	1212      	asrs	r2, r2, #8
 8004734:	17db      	asrs	r3, r3, #31
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800473c:	4413      	add	r3, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb fef0 	bl	8000524 <__aeabi_i2d>
 8004744:	a396      	add	r3, pc, #600	@ (adr r3, 80049a0 <odometry+0x648>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f7fb ff55 	bl	80005f8 <__aeabi_dmul>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 8004756:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800475a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800475e:	4413      	add	r3, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f7fb fedf 	bl	8000524 <__aeabi_i2d>
 8004766:	a38e      	add	r3, pc, #568	@ (adr r3, 80049a0 <odometry+0x648>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fb ff44 	bl	80005f8 <__aeabi_dmul>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004780:	f7fc f864 	bl	800084c <__aeabi_ddiv>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double distance = hypot(dx, dy);
 800478c:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8004790:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8004794:	f00a febc 	bl	800f510 <hypot>
 8004798:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	double direction = atan2(dy, dx);
 800479c:	ed97 1b22 	vldr	d1, [r7, #136]	@ 0x88
 80047a0:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 80047a4:	f00a feb0 	bl	800f508 <atan2>
 80047a8:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	double theta_local = direction - dtheta;
 80047ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80047b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80047b4:	f7fb fd68 	bl	8000288 <__aeabi_dsub>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	xLocal += distance * cos(theta_local);
 80047c0:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80047c4:	f00a fed8 	bl	800f578 <cos>
 80047c8:	ec51 0b10 	vmov	r0, r1, d0
 80047cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80047d0:	f7fb ff12 	bl	80005f8 <__aeabi_dmul>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	4b7b      	ldr	r3, [pc, #492]	@ (80049cc <odometry+0x674>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb fd53 	bl	800028c <__adddf3>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4978      	ldr	r1, [pc, #480]	@ (80049cc <odometry+0x674>)
 80047ec:	e9c1 2300 	strd	r2, r3, [r1]
	yLocal += distance * sin(theta_local);
 80047f0:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80047f4:	f00a ff14 	bl	800f620 <sin>
 80047f8:	ec51 0b10 	vmov	r0, r1, d0
 80047fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004800:	f7fb fefa 	bl	80005f8 <__aeabi_dmul>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	4b70      	ldr	r3, [pc, #448]	@ (80049d0 <odometry+0x678>)
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f7fb fd3b 	bl	800028c <__adddf3>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	496d      	ldr	r1, [pc, #436]	@ (80049d0 <odometry+0x678>)
 800481c:	e9c1 2300 	strd	r2, r3, [r1]

    double theta = heading + (dtheta / 2.0);
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004828:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800482c:	f7fc f80e 	bl	800084c <__aeabi_ddiv>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	4b66      	ldr	r3, [pc, #408]	@ (80049d4 <odometry+0x67c>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fd25 	bl	800028c <__adddf3>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    xGlobal += dx * cos(theta) + dy * sin(theta);
 800484a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800484e:	f00a fe93 	bl	800f578 <cos>
 8004852:	ec51 0b10 	vmov	r0, r1, d0
 8004856:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800485a:	f7fb fecd 	bl	80005f8 <__aeabi_dmul>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4690      	mov	r8, r2
 8004864:	4699      	mov	r9, r3
 8004866:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800486a:	f00a fed9 	bl	800f620 <sin>
 800486e:	ec51 0b10 	vmov	r0, r1, d0
 8004872:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004876:	f7fb febf 	bl	80005f8 <__aeabi_dmul>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f7fb fd03 	bl	800028c <__adddf3>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	4b52      	ldr	r3, [pc, #328]	@ (80049d8 <odometry+0x680>)
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f7fb fcfa 	bl	800028c <__adddf3>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	494e      	ldr	r1, [pc, #312]	@ (80049d8 <odometry+0x680>)
 800489e:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobal += -dx * sin(theta) + dy * cos(theta);
 80048a2:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 80048a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048aa:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80048ae:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80048b2:	f00a feb5 	bl	800f620 <sin>
 80048b6:	ec53 2b10 	vmov	r2, r3, d0
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fb fe9b 	bl	80005f8 <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4614      	mov	r4, r2
 80048c8:	461d      	mov	r5, r3
 80048ca:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80048ce:	f00a fe53 	bl	800f578 <cos>
 80048d2:	ec51 0b10 	vmov	r0, r1, d0
 80048d6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80048da:	f7fb fe8d 	bl	80005f8 <__aeabi_dmul>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4620      	mov	r0, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	f7fb fcd1 	bl	800028c <__adddf3>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	4b3a      	ldr	r3, [pc, #232]	@ (80049dc <odometry+0x684>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f7fb fcc8 	bl	800028c <__adddf3>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4936      	ldr	r1, [pc, #216]	@ (80049dc <odometry+0x684>)
 8004902:	e9c1 2300 	strd	r2, r3, [r1]
    heading += dtheta;
 8004906:	4b33      	ldr	r3, [pc, #204]	@ (80049d4 <odometry+0x67c>)
 8004908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800490c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004910:	f7fb fcbc 	bl	800028c <__adddf3>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	492e      	ldr	r1, [pc, #184]	@ (80049d4 <odometry+0x67c>)
 800491a:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    currentPosition.x_global = xGlobal;
 800491e:	4b2e      	ldr	r3, [pc, #184]	@ (80049d8 <odometry+0x680>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	e9c7 2304 	strd	r2, r3, [r7, #16]
    currentPosition.y_global = yGlobal;
 8004928:	4b2c      	ldr	r3, [pc, #176]	@ (80049dc <odometry+0x684>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    currentPosition.x_local = xLocal;
 8004932:	4b26      	ldr	r3, [pc, #152]	@ (80049cc <odometry+0x674>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	e9c7 2308 	strd	r2, r3, [r7, #32]
    currentPosition.y_local = yLocal;
 800493c:	4b24      	ldr	r3, [pc, #144]	@ (80049d0 <odometry+0x678>)
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    currentPosition.x_in_global = xGlobalIN;
 8004946:	4b26      	ldr	r3, [pc, #152]	@ (80049e0 <odometry+0x688>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    currentPosition.y_in_global = yGlobalIN;
 8004950:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <odometry+0x68c>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    currentPosition.x_in_local = xLocalIN;
 800495a:	4b23      	ldr	r3, [pc, #140]	@ (80049e8 <odometry+0x690>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    currentPosition.y_in_local = yLocalIN;
 8004964:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <odometry+0x694>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    currentPosition.h_en = (heading + headingIN) * 90/M_PI;
 800496e:	4b19      	ldr	r3, [pc, #100]	@ (80049d4 <odometry+0x67c>)
 8004970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004974:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <odometry+0x698>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fb fc87 	bl	800028c <__adddf3>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <odometry+0x69c>)
 800498c:	f7fb fe34 	bl	80005f8 <__aeabi_dmul>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	e02e      	b.n	80049f8 <odometry+0x6a0>
 800499a:	bf00      	nop
 800499c:	f3af 8000 	nop.w
 80049a0:	2d6e5f19 	.word	0x2d6e5f19
 80049a4:	3fb752bc 	.word	0x3fb752bc
 80049a8:	00000000 	.word	0x00000000
 80049ac:	4077c000 	.word	0x4077c000
 80049b0:	200004a8 	.word	0x200004a8
 80049b4:	20000590 	.word	0x20000590
 80049b8:	200004a0 	.word	0x200004a0
 80049bc:	20000588 	.word	0x20000588
 80049c0:	200004a4 	.word	0x200004a4
 80049c4:	2000058c 	.word	0x2000058c
 80049c8:	ac769185 	.word	0xac769185
 80049cc:	20000570 	.word	0x20000570
 80049d0:	20000578 	.word	0x20000578
 80049d4:	20000580 	.word	0x20000580
 80049d8:	20000560 	.word	0x20000560
 80049dc:	20000568 	.word	0x20000568
 80049e0:	200005b0 	.word	0x200005b0
 80049e4:	200005b8 	.word	0x200005b8
 80049e8:	200005c0 	.word	0x200005c0
 80049ec:	200005c8 	.word	0x200005c8
 80049f0:	200005d0 	.word	0x200005d0
 80049f4:	40568000 	.word	0x40568000
 80049f8:	a30e      	add	r3, pc, #56	@ (adr r3, 8004a34 <odometry+0x6dc>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb ff25 	bl	800084c <__aeabi_ddiv>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    currentPosition.h = sensorData[0];
 8004a0a:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <odometry+0x6d8>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    return currentPosition;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	2250      	movs	r2, #80	@ 0x50
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f008 f8b1 	bl	800cb86 <memcpy>
}
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	37f0      	adds	r7, #240	@ 0xf0
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a2e:	bf00      	nop
 8004a30:	200004f8 	.word	0x200004f8
 8004a34:	54442d18 	.word	0x54442d18
 8004a38:	400921fb 	.word	0x400921fb

08004a3c <stateTransition>:
    {0, 0, 0.1}
};

// State transition function f
StateVector stateTransition(StateVector X)
{
 8004a3c:	b5b0      	push	{r4, r5, r7, lr}
 8004a3e:	b0ac      	sub	sp, #176	@ 0xb0
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	eeb0 5a40 	vmov.f32	s10, s0
 8004a46:	eef0 5a60 	vmov.f32	s11, s1
 8004a4a:	eeb0 6a41 	vmov.f32	s12, s2
 8004a4e:	eef0 6a61 	vmov.f32	s13, s3
 8004a52:	eeb0 7a42 	vmov.f32	s14, s4
 8004a56:	eef0 7a62 	vmov.f32	s15, s5
 8004a5a:	ed87 5b06 	vstr	d5, [r7, #24]
 8004a5e:	ed87 6b08 	vstr	d6, [r7, #32]
 8004a62:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    StateVector X_next;
    robotPosition position = odometry();
 8004a66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fc74 	bl	8004358 <odometry>
//    X_next.x = X.x + v * cos(X.theta) * dt + 0.5 * ax * pow(dt, 2) * cos(X.theta);
//    X_next.y = X.y + v * sin(X.theta) * dt + 0.5 * ay * pow(dt, 2) * sin(X.theta);
//    X_next.theta = X.theta + heading;
    X_next.x = X.x + position.x_local;
 8004a70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a78:	f7fb fc08 	bl	800028c <__adddf3>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    X_next.y = X.y + position.y_local;
 8004a84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a8c:	f7fb fbfe 	bl	800028c <__adddf3>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    X_next.theta = X.theta + position.h;
 8004a98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004aa0:	f7fb fbf4 	bl	800028c <__adddf3>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    return X_next;
 8004aac:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8004ab0:	f107 0580 	add.w	r5, r7, #128	@ 0x80
 8004ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ab8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004abc:	e884 0003 	stmia.w	r4, {r0, r1}
 8004ac0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004ac4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004ac8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8004acc:	ec45 4b15 	vmov	d5, r4, r5
 8004ad0:	ec41 0b16 	vmov	d6, r0, r1
 8004ad4:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ad8:	eeb0 0a45 	vmov.f32	s0, s10
 8004adc:	eef0 0a65 	vmov.f32	s1, s11
 8004ae0:	eeb0 1a46 	vmov.f32	s2, s12
 8004ae4:	eef0 1a66 	vmov.f32	s3, s13
 8004ae8:	eeb0 2a47 	vmov.f32	s4, s14
 8004aec:	eef0 2a67 	vmov.f32	s5, s15
 8004af0:	37b0      	adds	r7, #176	@ 0xb0
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bdb0      	pop	{r4, r5, r7, pc}

08004af6 <measurementFunction>:

// Measurement function h
MeasurementVector measurementFunction(StateVector X)
{
 8004af6:	b4b0      	push	{r4, r5, r7}
 8004af8:	b099      	sub	sp, #100	@ 0x64
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	eeb0 5a40 	vmov.f32	s10, s0
 8004b00:	eef0 5a60 	vmov.f32	s11, s1
 8004b04:	eeb0 6a41 	vmov.f32	s12, s2
 8004b08:	eef0 6a61 	vmov.f32	s13, s3
 8004b0c:	eeb0 7a42 	vmov.f32	s14, s4
 8004b10:	eef0 7a62 	vmov.f32	s15, s5
 8004b14:	ed87 5b06 	vstr	d5, [r7, #24]
 8004b18:	ed87 6b08 	vstr	d6, [r7, #32]
 8004b1c:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    MeasurementVector Z;
    Z.x = X.x;
 8004b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b24:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Z.y = X.y;
 8004b28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b2c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    Z.theta = X.theta;
 8004b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b34:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    return Z;
 8004b38:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8004b3c:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 8004b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b48:	e884 0003 	stmia.w	r4, {r0, r1}
 8004b4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004b50:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004b54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b58:	ec45 4b15 	vmov	d5, r4, r5
 8004b5c:	ec41 0b16 	vmov	d6, r0, r1
 8004b60:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b64:	eeb0 0a45 	vmov.f32	s0, s10
 8004b68:	eef0 0a65 	vmov.f32	s1, s11
 8004b6c:	eeb0 1a46 	vmov.f32	s2, s12
 8004b70:	eef0 1a66 	vmov.f32	s3, s13
 8004b74:	eeb0 2a47 	vmov.f32	s4, s14
 8004b78:	eef0 2a67 	vmov.f32	s5, s15
 8004b7c:	3764      	adds	r7, #100	@ 0x64
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bcb0      	pop	{r4, r5, r7}
 8004b82:	4770      	bx	lr
 8004b84:	0000      	movs	r0, r0
	...

08004b88 <extendedKalmanFilter>:

// Extended Kalman Filter
EKF extendedKalmanFilter()
{
 8004b88:	b5b0      	push	{r4, r5, r7, lr}
 8004b8a:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8004b8e:	af00      	add	r7, sp, #0
	EKF currentPosition;
	robotPosition position = odometry();
 8004b90:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fbdf 	bl	8004358 <odometry>
	double P[STATE_DIM][STATE_DIM] = {
 8004b9a:	4ac7      	ldr	r2, [pc, #796]	@ (8004eb8 <extendedKalmanFilter+0x330>)
 8004b9c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	2248      	movs	r2, #72	@ 0x48
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f007 ffee 	bl	800cb86 <memcpy>
		{1, 0, 0},
		{0, 1, 0},
		{0, 0, 1}};

    // Prediction step
	StateVector X = {position.x_local, position.y_local, 0.0};
 8004baa:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8004bae:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 8004bb2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8004bb6:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
    StateVector X_pred = stateTransition(X);
 8004bc6:	ed97 5b54 	vldr	d5, [r7, #336]	@ 0x150
 8004bca:	ed97 6b56 	vldr	d6, [r7, #344]	@ 0x158
 8004bce:	ed97 7b58 	vldr	d7, [r7, #352]	@ 0x160
 8004bd2:	eeb0 0a45 	vmov.f32	s0, s10
 8004bd6:	eef0 0a65 	vmov.f32	s1, s11
 8004bda:	eeb0 1a46 	vmov.f32	s2, s12
 8004bde:	eef0 1a66 	vmov.f32	s3, s13
 8004be2:	eeb0 2a47 	vmov.f32	s4, s14
 8004be6:	eef0 2a67 	vmov.f32	s5, s15
 8004bea:	f7ff ff27 	bl	8004a3c <stateTransition>
 8004bee:	eeb0 5a40 	vmov.f32	s10, s0
 8004bf2:	eef0 5a60 	vmov.f32	s11, s1
 8004bf6:	eeb0 6a41 	vmov.f32	s12, s2
 8004bfa:	eef0 6a61 	vmov.f32	s13, s3
 8004bfe:	eeb0 7a42 	vmov.f32	s14, s4
 8004c02:	eef0 7a62 	vmov.f32	s15, s5
 8004c06:	ed87 5b4e 	vstr	d5, [r7, #312]	@ 0x138
 8004c0a:	ed87 6b50 	vstr	d6, [r7, #320]	@ 0x140
 8004c0e:	ed87 7b52 	vstr	d7, [r7, #328]	@ 0x148
    double P_pred[STATE_DIM][STATE_DIM] = {
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8004c12:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8004c16:	a3a6      	add	r3, pc, #664	@ (adr r3, 8004eb0 <extendedKalmanFilter+0x328>)
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f7fb fb36 	bl	800028c <__adddf3>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004c24:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004c28:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004c2c:	e9c1 2300 	strd	r2, r3, [r1]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8004c30:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004c34:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004c38:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004c3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8004c40:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004c44:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004c48:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004c4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8004c50:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004c54:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004c58:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004c5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8004c60:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004c64:	a392      	add	r3, pc, #584	@ (adr r3, 8004eb0 <extendedKalmanFilter+0x328>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fb0f 	bl	800028c <__adddf3>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004c72:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004c76:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004c7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8004c7e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004c82:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004c86:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004c8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8004c8e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004c92:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004c96:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004c9a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8004c9e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004ca2:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004ca6:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004caa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8004cae:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8004cb2:	a37f      	add	r3, pc, #508	@ (adr r3, 8004eb0 <extendedKalmanFilter+0x328>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f7fb fae8 	bl	800028c <__adddf3>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004cc0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004cc4:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004cc8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update step
	MeasurementVector Z = {position.x_in_local, position.y_in_local, 0.0};
 8004ccc:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8004cd0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004cd4:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8004cd8:	e9c1 2300 	strd	r2, r3, [r1]
 8004cdc:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8004ce0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004ce4:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8004ce8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004cec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004cf0:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    MeasurementVector Z_pred = measurementFunction(X_pred);
 8004d00:	ed97 5b4e 	vldr	d5, [r7, #312]	@ 0x138
 8004d04:	ed97 6b50 	vldr	d6, [r7, #320]	@ 0x140
 8004d08:	ed97 7b52 	vldr	d7, [r7, #328]	@ 0x148
 8004d0c:	eeb0 0a45 	vmov.f32	s0, s10
 8004d10:	eef0 0a65 	vmov.f32	s1, s11
 8004d14:	eeb0 1a46 	vmov.f32	s2, s12
 8004d18:	eef0 1a66 	vmov.f32	s3, s13
 8004d1c:	eeb0 2a47 	vmov.f32	s4, s14
 8004d20:	eef0 2a67 	vmov.f32	s5, s15
 8004d24:	f7ff fee7 	bl	8004af6 <measurementFunction>
 8004d28:	eeb0 5a40 	vmov.f32	s10, s0
 8004d2c:	eef0 5a60 	vmov.f32	s11, s1
 8004d30:	eeb0 6a41 	vmov.f32	s12, s2
 8004d34:	eef0 6a61 	vmov.f32	s13, s3
 8004d38:	eeb0 7a42 	vmov.f32	s14, s4
 8004d3c:	eef0 7a62 	vmov.f32	s15, s5
 8004d40:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d44:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004d48:	ed83 5b00 	vstr	d5, [r3]
 8004d4c:	ed83 6b02 	vstr	d6, [r3, #8]
 8004d50:	ed83 7b04 	vstr	d7, [r3, #16]
    double Y[MEASUREMENT_DIM] = {Z.x - Z_pred.x, Z.y - Z_pred.y, Z.theta - Z_pred.theta};
 8004d54:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d58:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d60:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d64:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fa8c 	bl	8000288 <__aeabi_dsub>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004d78:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8004d7c:	e9c1 2300 	strd	r2, r3, [r1]
 8004d80:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d84:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004d88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d90:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004d94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d98:	f7fb fa76 	bl	8000288 <__aeabi_dsub>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004da4:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8004da8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004dac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004db0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004db4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004db8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004dbc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004dc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004dc4:	f7fb fa60 	bl	8000288 <__aeabi_dsub>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004dd0:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8004dd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8004dd8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ddc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004de0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004de4:	a332      	add	r3, pc, #200	@ (adr r3, 8004eb0 <extendedKalmanFilter+0x328>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb fa4f 	bl	800028c <__adddf3>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004df2:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004df6:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004dfa:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8004dfe:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e02:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004e0a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004e0e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004e12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8004e16:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e1a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004e22:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004e26:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004e2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8004e2e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e32:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004e3a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004e3e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004e42:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8004e46:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e4a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e4e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004e52:	a317      	add	r3, pc, #92	@ (adr r3, 8004eb0 <extendedKalmanFilter+0x328>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f7fb fa18 	bl	800028c <__adddf3>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004e60:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004e64:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004e68:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8004e6c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e74:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004e78:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004e7c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004e80:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8004e84:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e8c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004e90:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004e94:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004e98:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8004e9c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ea0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ea4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004ea8:	e008      	b.n	8004ebc <extendedKalmanFilter+0x334>
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w
 8004eb0:	9999999a 	.word	0x9999999a
 8004eb4:	3fb99999 	.word	0x3fb99999
 8004eb8:	08011130 	.word	0x08011130
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004ebc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004ec0:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004ec4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8004ec8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ecc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ed0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004ed4:	f60f 33c8 	addw	r3, pc, #3016	@ 0xbc8
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f7fb f9d6 	bl	800028c <__adddf3>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004ee4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004ee8:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004eec:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };
    double K[STATE_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8004ef0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ef4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004efc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f7fb fca0 	bl	800084c <__aeabi_ddiv>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004f10:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004f14:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004f18:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8004f1c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004f24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004f28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f2c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f34:	f7fb fc8a 	bl	800084c <__aeabi_ddiv>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004f3c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004f40:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004f44:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8004f48:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004f50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004f54:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f58:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f5c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004f60:	f7fb fc74 	bl	800084c <__aeabi_ddiv>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004f68:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004f6c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004f70:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8004f74:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004f7c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004f80:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f84:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb fc5e 	bl	800084c <__aeabi_ddiv>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004f94:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004f98:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004f9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8004fa0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fa4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fa8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004fac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fb0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fb8:	f7fb fc48 	bl	800084c <__aeabi_ddiv>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004fc0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004fc4:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004fc8:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8004fcc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fd0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fd4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004fd8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fdc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fe0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004fe4:	f7fb fc32 	bl	800084c <__aeabi_ddiv>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004fec:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004ff0:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004ff4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8004ff8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ffc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005000:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005004:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005008:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb fc1c 	bl	800084c <__aeabi_ddiv>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005018:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800501c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005020:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8005024:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005028:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800502c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005030:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005034:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800503c:	f7fb fc06 	bl	800084c <__aeabi_ddiv>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005044:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005048:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 800504c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8005050:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005054:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005058:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800505c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005060:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005064:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005068:	f7fb fbf0 	bl	800084c <__aeabi_ddiv>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005070:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005074:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005078:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update state estimate
    X.x = X_pred.x + K[0][0] * Y[0] + K[0][1] * Y[1] + K[0][2] * Y[2];
 800507c:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8005080:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005084:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800508c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005090:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb faae 	bl	80005f8 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4620      	mov	r0, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7fb f8f2 	bl	800028c <__adddf3>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4614      	mov	r4, r2
 80050ae:	461d      	mov	r5, r3
 80050b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050b4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80050bc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80050c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80050c8:	f7fb fa96 	bl	80005f8 <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4620      	mov	r0, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	f7fb f8da 	bl	800028c <__adddf3>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050e4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80050ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050f0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80050f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80050f8:	f7fb fa7e 	bl	80005f8 <__aeabi_dmul>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb f8c2 	bl	800028c <__adddf3>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
    X.y = X_pred.y + K[1][0] * Y[0] + K[1][1] * Y[1] + K[1][2] * Y[2];
 8005110:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8005114:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005118:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800511c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005120:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005124:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f7fb fa64 	bl	80005f8 <__aeabi_dmul>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4620      	mov	r0, r4
 8005136:	4629      	mov	r1, r5
 8005138:	f7fb f8a8 	bl	800028c <__adddf3>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4614      	mov	r4, r2
 8005142:	461d      	mov	r5, r3
 8005144:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005148:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800514c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005150:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005154:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005158:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800515c:	f7fb fa4c 	bl	80005f8 <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	f7fb f890 	bl	800028c <__adddf3>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4614      	mov	r4, r2
 8005172:	461d      	mov	r5, r3
 8005174:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005178:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800517c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005180:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005184:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005188:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800518c:	f7fb fa34 	bl	80005f8 <__aeabi_dmul>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4620      	mov	r0, r4
 8005196:	4629      	mov	r1, r5
 8005198:	f7fb f878 	bl	800028c <__adddf3>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
    X.theta = X_pred.theta + K[2][0] * Y[0] + K[2][1] * Y[1] + K[2][2] * Y[2];
 80051a4:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 80051a8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051ac:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80051b0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80051b4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f7fb fa1a 	bl	80005f8 <__aeabi_dmul>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4620      	mov	r0, r4
 80051ca:	4629      	mov	r1, r5
 80051cc:	f7fb f85e 	bl	800028c <__adddf3>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051dc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80051e0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80051e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80051ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80051f0:	f7fb fa02 	bl	80005f8 <__aeabi_dmul>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4620      	mov	r0, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7fb f846 	bl	800028c <__adddf3>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4614      	mov	r4, r2
 8005206:	461d      	mov	r5, r3
 8005208:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800520c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005210:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005214:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005218:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800521c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005220:	f7fb f9ea 	bl	80005f8 <__aeabi_dmul>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4620      	mov	r0, r4
 800522a:	4629      	mov	r1, r5
 800522c:	f7fb f82e 	bl	800028c <__adddf3>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

    // Update covariance matrix
    P[0][0] = P_pred[0][0] - K[0][0] * S[0][0] * K[0][0] - K[0][1] * S[1][1] * K[0][1] - K[0][2] * S[2][2] * K[0][2];
 8005238:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800523c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005240:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005244:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005248:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800524c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005250:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005254:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fb f9cc 	bl	80005f8 <__aeabi_dmul>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800526c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fb f9c0 	bl	80005f8 <__aeabi_dmul>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4620      	mov	r0, r4
 800527e:	4629      	mov	r1, r5
 8005280:	f7fb f802 	bl	8000288 <__aeabi_dsub>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4614      	mov	r4, r2
 800528a:	461d      	mov	r5, r3
 800528c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005290:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005294:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005298:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800529c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80052a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052a4:	f7fb f9a8 	bl	80005f8 <__aeabi_dmul>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4610      	mov	r0, r2
 80052ae:	4619      	mov	r1, r3
 80052b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052b4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80052b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052bc:	f7fb f99c 	bl	80005f8 <__aeabi_dmul>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4620      	mov	r0, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	f7fa ffde 	bl	8000288 <__aeabi_dsub>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4614      	mov	r4, r2
 80052d2:	461d      	mov	r5, r3
 80052d4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80052dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80052e0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80052e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80052ec:	f7fb f984 	bl	80005f8 <__aeabi_dmul>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005300:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005304:	f7fb f978 	bl	80005f8 <__aeabi_dmul>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4620      	mov	r0, r4
 800530e:	4629      	mov	r1, r5
 8005310:	f7fa ffba 	bl	8000288 <__aeabi_dsub>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
    P[0][1] = P_pred[0][1] - K[0][0] * S[0][0] * K[1][0] - K[0][1] * S[1][1] * K[1][1] - K[0][2] * S[2][2] * K[1][2];
 800531c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005320:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005324:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005328:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800532c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005334:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005338:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f95a 	bl	80005f8 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005350:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005354:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005358:	f7fb f94e 	bl	80005f8 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4620      	mov	r0, r4
 8005362:	4629      	mov	r1, r5
 8005364:	f7fa ff90 	bl	8000288 <__aeabi_dsub>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4614      	mov	r4, r2
 800536e:	461d      	mov	r5, r3
 8005370:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005374:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005378:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800537c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005380:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005388:	f7fb f936 	bl	80005f8 <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005398:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800539c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053a0:	f7fb f92a 	bl	80005f8 <__aeabi_dmul>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4620      	mov	r0, r4
 80053aa:	4629      	mov	r1, r5
 80053ac:	f7fa ff6c 	bl	8000288 <__aeabi_dsub>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4614      	mov	r4, r2
 80053b6:	461d      	mov	r5, r3
 80053b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80053bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80053c0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80053c4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80053c8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80053cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80053d0:	f7fb f912 	bl	80005f8 <__aeabi_dmul>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80053e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80053e4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80053e8:	f7fb f906 	bl	80005f8 <__aeabi_dmul>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4620      	mov	r0, r4
 80053f2:	4629      	mov	r1, r5
 80053f4:	f7fa ff48 	bl	8000288 <__aeabi_dsub>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    P[0][2] = P_pred[0][2] - K[0][0] * S[0][0] * K[2][0] - K[0][1] * S[1][1] * K[2][1] - K[0][2] * S[2][2] * K[2][2];
 8005400:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005404:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005408:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800540c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005410:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005418:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800541c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f7fb f8e8 	bl	80005f8 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005434:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005438:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800543c:	f7fb f8dc 	bl	80005f8 <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4620      	mov	r0, r4
 8005446:	4629      	mov	r1, r5
 8005448:	f7fa ff1e 	bl	8000288 <__aeabi_dsub>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4614      	mov	r4, r2
 8005452:	461d      	mov	r5, r3
 8005454:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005458:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800545c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005460:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005464:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005468:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800546c:	f7fb f8c4 	bl	80005f8 <__aeabi_dmul>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4610      	mov	r0, r2
 8005476:	4619      	mov	r1, r3
 8005478:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800547c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005480:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005484:	f7fb f8b8 	bl	80005f8 <__aeabi_dmul>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4620      	mov	r0, r4
 800548e:	4629      	mov	r1, r5
 8005490:	f7fa fefa 	bl	8000288 <__aeabi_dsub>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4614      	mov	r4, r2
 800549a:	461d      	mov	r5, r3
 800549c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80054a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80054a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80054a8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80054ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80054b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80054b4:	f7fb f8a0 	bl	80005f8 <__aeabi_dmul>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4610      	mov	r0, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80054c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80054c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80054cc:	f7fb f894 	bl	80005f8 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fa fed6 	bl	8000288 <__aeabi_dsub>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
    P[1][0] = P_pred[1][0] - K[1][0] * S[0][0] * K[0][0] - K[1][1] * S[1][1] * K[0][1] - K[1][2] * S[2][2] * K[0][2];
 80054e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80054e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80054ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80054f0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80054f4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80054f8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80054fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005500:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fb f876 	bl	80005f8 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005518:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fb f86a 	bl	80005f8 <__aeabi_dmul>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4620      	mov	r0, r4
 800552a:	4629      	mov	r1, r5
 800552c:	f7fa feac 	bl	8000288 <__aeabi_dsub>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4614      	mov	r4, r2
 8005536:	461d      	mov	r5, r3
 8005538:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800553c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005540:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005544:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005548:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800554c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005550:	f7fb f852 	bl	80005f8 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005560:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005564:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005568:	f7fb f846 	bl	80005f8 <__aeabi_dmul>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4620      	mov	r0, r4
 8005572:	4629      	mov	r1, r5
 8005574:	f7fa fe88 	bl	8000288 <__aeabi_dsub>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4614      	mov	r4, r2
 800557e:	461d      	mov	r5, r3
 8005580:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005584:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005588:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800558c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005590:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005594:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005598:	f7fb f82e 	bl	80005f8 <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80055a8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80055ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055b0:	f7fb f822 	bl	80005f8 <__aeabi_dmul>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4620      	mov	r0, r4
 80055ba:	4629      	mov	r1, r5
 80055bc:	f7fa fe64 	bl	8000288 <__aeabi_dsub>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
    P[1][1] = P_pred[1][1] - K[1][0] * S[0][0] * K[1][0] - K[1][1] * S[1][1] * K[1][1] - K[1][2] * S[2][2] * K[1][2];
 80055c8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80055cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80055d0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80055d4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80055d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80055dc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80055e0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80055e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fb f804 	bl	80005f8 <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80055fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005600:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005604:	f7fa fff8 	bl	80005f8 <__aeabi_dmul>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fa fe3a 	bl	8000288 <__aeabi_dsub>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4614      	mov	r4, r2
 800561a:	461d      	mov	r5, r3
 800561c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005620:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005624:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005628:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800562c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005634:	f7fa ffe0 	bl	80005f8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005644:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005648:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800564c:	f7fa ffd4 	bl	80005f8 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa fe16 	bl	8000288 <__aeabi_dsub>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4614      	mov	r4, r2
 8005662:	461d      	mov	r5, r3
 8005664:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005668:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800566c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005670:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005674:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005678:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800567c:	f7fa ffbc 	bl	80005f8 <__aeabi_dmul>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4610      	mov	r0, r2
 8005686:	4619      	mov	r1, r3
 8005688:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800568c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005690:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005694:	f7fa ffb0 	bl	80005f8 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fa fdf2 	bl	8000288 <__aeabi_dsub>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    P[1][2] = P_pred[1][2] - K[1][0] * S[0][0] * K[2][0] - K[1][1] * S[1][1] * K[2][1] - K[1][2] * S[2][2] * K[2][2];
 80056ac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80056b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80056b4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80056b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80056bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80056c0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80056c4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80056c8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f7fa ff92 	bl	80005f8 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80056e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80056e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80056e8:	f7fa ff86 	bl	80005f8 <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4620      	mov	r0, r4
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fdc8 	bl	8000288 <__aeabi_dsub>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	461d      	mov	r5, r3
 8005700:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005704:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005708:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800570c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005710:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005718:	f7fa ff6e 	bl	80005f8 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4610      	mov	r0, r2
 8005722:	4619      	mov	r1, r3
 8005724:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005728:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800572c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005730:	f7fa ff62 	bl	80005f8 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4620      	mov	r0, r4
 800573a:	4629      	mov	r1, r5
 800573c:	f7fa fda4 	bl	8000288 <__aeabi_dsub>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4614      	mov	r4, r2
 8005746:	461d      	mov	r5, r3
 8005748:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800574c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005750:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005754:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005758:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800575c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005760:	f7fa ff4a 	bl	80005f8 <__aeabi_dmul>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005770:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005774:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005778:	f7fa ff3e 	bl	80005f8 <__aeabi_dmul>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	f7fa fd80 	bl	8000288 <__aeabi_dsub>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    P[2][0] = P_pred[2][0] - K[2][0] * S[0][0] * K[0][0] - K[2][1] * S[1][1] * K[0][1] - K[2][2] * S[2][2] * K[0][2];
 8005790:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005794:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005798:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800579c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80057a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80057a4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80057a8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80057ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa ff20 	bl	80005f8 <__aeabi_dmul>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80057c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa ff14 	bl	80005f8 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fa fd56 	bl	8000288 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4614      	mov	r4, r2
 80057e2:	461d      	mov	r5, r3
 80057e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80057e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80057ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80057f0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80057f4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80057f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057fc:	f7fa fefc 	bl	80005f8 <__aeabi_dmul>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800580c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005810:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005814:	f7fa fef0 	bl	80005f8 <__aeabi_dmul>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fa fd32 	bl	8000288 <__aeabi_dsub>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4614      	mov	r4, r2
 800582a:	461d      	mov	r5, r3
 800582c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005830:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005834:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005838:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800583c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005840:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4610      	mov	r0, r2
 800584e:	4619      	mov	r1, r3
 8005850:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005854:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005858:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800585c:	f7fa fecc 	bl	80005f8 <__aeabi_dmul>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4620      	mov	r0, r4
 8005866:	4629      	mov	r1, r5
 8005868:	f7fa fd0e 	bl	8000288 <__aeabi_dsub>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    P[2][1] = P_pred[2][1] - K[2][0] * S[0][0] * K[1][0] - K[2][1] * S[1][1] * K[1][1] - K[2][2] * S[2][2] * K[1][2];
 8005874:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005878:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800587c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8005880:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005884:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005888:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800588c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005890:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa feae 	bl	80005f8 <__aeabi_dmul>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4610      	mov	r0, r2
 80058a2:	4619      	mov	r1, r3
 80058a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058a8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80058ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80058b0:	f7fa fea2 	bl	80005f8 <__aeabi_dmul>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4620      	mov	r0, r4
 80058ba:	4629      	mov	r1, r5
 80058bc:	f7fa fce4 	bl	8000288 <__aeabi_dsub>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	461d      	mov	r5, r3
 80058c8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058cc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80058d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80058d4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80058dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058e0:	f7fa fe8a 	bl	80005f8 <__aeabi_dmul>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058f0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80058f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058f8:	f7fa fe7e 	bl	80005f8 <__aeabi_dmul>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4620      	mov	r0, r4
 8005902:	4629      	mov	r1, r5
 8005904:	f7fa fcc0 	bl	8000288 <__aeabi_dsub>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4614      	mov	r4, r2
 800590e:	461d      	mov	r5, r3
 8005910:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005914:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005918:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800591c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005920:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005924:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005928:	f7fa fe66 	bl	80005f8 <__aeabi_dmul>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4610      	mov	r0, r2
 8005932:	4619      	mov	r1, r3
 8005934:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005938:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800593c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005940:	f7fa fe5a 	bl	80005f8 <__aeabi_dmul>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4620      	mov	r0, r4
 800594a:	4629      	mov	r1, r5
 800594c:	f7fa fc9c 	bl	8000288 <__aeabi_dsub>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    P[2][2] = P_pred[2][2] - K[2][0] * S[0][0] * K[2][0] - K[2][1] * S[1][1] * K[2][1] - K[2][2] * S[2][2] * K[2][2];
 8005958:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800595c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005960:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8005964:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005968:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800596c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005970:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005974:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fe3c 	bl	80005f8 <__aeabi_dmul>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4610      	mov	r0, r2
 8005986:	4619      	mov	r1, r3
 8005988:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800598c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005990:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005994:	f7fa fe30 	bl	80005f8 <__aeabi_dmul>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4620      	mov	r0, r4
 800599e:	4629      	mov	r1, r5
 80059a0:	f7fa fc72 	bl	8000288 <__aeabi_dsub>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	461d      	mov	r5, r3
 80059ac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80059b0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80059b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80059b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80059bc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80059c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059c4:	f7fa fe18 	bl	80005f8 <__aeabi_dmul>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4610      	mov	r0, r2
 80059ce:	4619      	mov	r1, r3
 80059d0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80059d4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80059d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80059dc:	f7fa fe0c 	bl	80005f8 <__aeabi_dmul>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4620      	mov	r0, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7fa fc4e 	bl	8000288 <__aeabi_dsub>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4614      	mov	r4, r2
 80059f2:	461d      	mov	r5, r3
 80059f4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80059f8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80059fc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005a00:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a04:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a08:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005a0c:	f7fa fdf4 	bl	80005f8 <__aeabi_dmul>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a1c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005a20:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005a24:	f7fa fde8 	bl	80005f8 <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fa fc2a 	bl	8000288 <__aeabi_dsub>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

    currentPosition.x = X.x;
 8005a3c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8005a40:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
    currentPosition.y = X.y;
 8005a44:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8005a48:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
    currentPosition.h = position.h;
 8005a4c:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8005a50:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

    return currentPosition;
 8005a54:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8005a58:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 8005a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a64:	e884 0003 	stmia.w	r4, {r0, r1}
 8005a68:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8005a6c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8005a70:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8005a74:	ec45 4b15 	vmov	d5, r4, r5
 8005a78:	ec41 0b16 	vmov	d6, r0, r1
 8005a7c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a80:	eeb0 0a45 	vmov.f32	s0, s10
 8005a84:	eef0 0a65 	vmov.f32	s1, s11
 8005a88:	eeb0 1a46 	vmov.f32	s2, s12
 8005a8c:	eef0 1a66 	vmov.f32	s3, s13
 8005a90:	eeb0 2a47 	vmov.f32	s4, s14
 8005a94:	eef0 2a67 	vmov.f32	s5, s15
 8005a98:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa0:	9999999a 	.word	0x9999999a
 8005aa4:	3fb99999 	.word	0x3fb99999

08005aa8 <cek>:
	sprintf(buffer, "EYaw:%.2f", setpoint.h - position.h);
	lcd_write_string(buffer);
}

void cek(EKF position)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	eeb0 5a40 	vmov.f32	s10, s0
 8005ab2:	eef0 5a60 	vmov.f32	s11, s1
 8005ab6:	eeb0 6a41 	vmov.f32	s12, s2
 8005aba:	eef0 6a61 	vmov.f32	s13, s3
 8005abe:	eeb0 7a42 	vmov.f32	s14, s4
 8005ac2:	eef0 7a62 	vmov.f32	s15, s5
 8005ac6:	ed87 5b00 	vstr	d5, [r7]
 8005aca:	ed87 6b02 	vstr	d6, [r7, #8]
 8005ace:	ed87 7b04 	vstr	d7, [r7, #16]
	lcd_set_cursor(0, 0);
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7fd f983 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[0]);
 8005ada:	4b36      	ldr	r3, [pc, #216]	@ (8005bb4 <cek+0x10c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4935      	ldr	r1, [pc, #212]	@ (8005bb8 <cek+0x110>)
 8005ae2:	4836      	ldr	r0, [pc, #216]	@ (8005bbc <cek+0x114>)
 8005ae4:	f006 fefe 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005ae8:	4834      	ldr	r0, [pc, #208]	@ (8005bbc <cek+0x114>)
 8005aea:	f7fd f963 	bl	8002db4 <lcd_write_string>

	lcd_set_cursor(1, 0);
 8005aee:	2100      	movs	r1, #0
 8005af0:	2001      	movs	r0, #1
 8005af2:	f7fd f975 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[1]);
 8005af6:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb4 <cek+0x10c>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	461a      	mov	r2, r3
 8005afc:	492e      	ldr	r1, [pc, #184]	@ (8005bb8 <cek+0x110>)
 8005afe:	482f      	ldr	r0, [pc, #188]	@ (8005bbc <cek+0x114>)
 8005b00:	f006 fef0 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005b04:	482d      	ldr	r0, [pc, #180]	@ (8005bbc <cek+0x114>)
 8005b06:	f7fd f955 	bl	8002db4 <lcd_write_string>

	lcd_set_cursor(2, 0);
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	2002      	movs	r0, #2
 8005b0e:	f7fd f967 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[2]);
 8005b12:	4b28      	ldr	r3, [pc, #160]	@ (8005bb4 <cek+0x10c>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	461a      	mov	r2, r3
 8005b18:	4927      	ldr	r1, [pc, #156]	@ (8005bb8 <cek+0x110>)
 8005b1a:	4828      	ldr	r0, [pc, #160]	@ (8005bbc <cek+0x114>)
 8005b1c:	f006 fee2 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005b20:	4826      	ldr	r0, [pc, #152]	@ (8005bbc <cek+0x114>)
 8005b22:	f7fd f947 	bl	8002db4 <lcd_write_string>

	lcd_set_cursor(3, 0);
 8005b26:	2100      	movs	r1, #0
 8005b28:	2003      	movs	r0, #3
 8005b2a:	f7fd f959 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[3]);
 8005b2e:	4b21      	ldr	r3, [pc, #132]	@ (8005bb4 <cek+0x10c>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	461a      	mov	r2, r3
 8005b34:	4920      	ldr	r1, [pc, #128]	@ (8005bb8 <cek+0x110>)
 8005b36:	4821      	ldr	r0, [pc, #132]	@ (8005bbc <cek+0x114>)
 8005b38:	f006 fed4 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005b3c:	481f      	ldr	r0, [pc, #124]	@ (8005bbc <cek+0x114>)
 8005b3e:	f7fd f939 	bl	8002db4 <lcd_write_string>

	lcd_set_cursor(0, 10);
 8005b42:	210a      	movs	r1, #10
 8005b44:	2000      	movs	r0, #0
 8005b46:	f7fd f94b 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[4]);
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb4 <cek+0x10c>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4919      	ldr	r1, [pc, #100]	@ (8005bb8 <cek+0x110>)
 8005b52:	481a      	ldr	r0, [pc, #104]	@ (8005bbc <cek+0x114>)
 8005b54:	f006 fec6 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005b58:	4818      	ldr	r0, [pc, #96]	@ (8005bbc <cek+0x114>)
 8005b5a:	f7fd f92b 	bl	8002db4 <lcd_write_string>

	lcd_set_cursor(1, 10);
 8005b5e:	210a      	movs	r1, #10
 8005b60:	2001      	movs	r0, #1
 8005b62:	f7fd f93d 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 8005b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6a:	4915      	ldr	r1, [pc, #84]	@ (8005bc0 <cek+0x118>)
 8005b6c:	4813      	ldr	r0, [pc, #76]	@ (8005bbc <cek+0x114>)
 8005b6e:	f006 feb9 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005b72:	4812      	ldr	r0, [pc, #72]	@ (8005bbc <cek+0x114>)
 8005b74:	f7fd f91e 	bl	8002db4 <lcd_write_string>

	lcd_set_cursor(2, 10);
 8005b78:	210a      	movs	r1, #10
 8005b7a:	2002      	movs	r0, #2
 8005b7c:	f7fd f930 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 8005b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b84:	490f      	ldr	r1, [pc, #60]	@ (8005bc4 <cek+0x11c>)
 8005b86:	480d      	ldr	r0, [pc, #52]	@ (8005bbc <cek+0x114>)
 8005b88:	f006 feac 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005b8c:	480b      	ldr	r0, [pc, #44]	@ (8005bbc <cek+0x114>)
 8005b8e:	f7fd f911 	bl	8002db4 <lcd_write_string>

	lcd_set_cursor(3, 10);
 8005b92:	210a      	movs	r1, #10
 8005b94:	2003      	movs	r0, #3
 8005b96:	f7fd f923 	bl	8002de0 <lcd_set_cursor>
	sprintf(buffer, "Yaw:%.2f", position.h);
 8005b9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b9e:	490a      	ldr	r1, [pc, #40]	@ (8005bc8 <cek+0x120>)
 8005ba0:	4806      	ldr	r0, [pc, #24]	@ (8005bbc <cek+0x114>)
 8005ba2:	f006 fe9f 	bl	800c8e4 <siprintf>
	lcd_write_string(buffer);
 8005ba6:	4805      	ldr	r0, [pc, #20]	@ (8005bbc <cek+0x114>)
 8005ba8:	f7fd f904 	bl	8002db4 <lcd_write_string>
}
 8005bac:	bf00      	nop
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000544 	.word	0x20000544
 8005bb8:	080111b0 	.word	0x080111b0
 8005bbc:	20000594 	.word	0x20000594
 8005bc0:	08011178 	.word	0x08011178
 8005bc4:	08011180 	.word	0x08011180
 8005bc8:	08011188 	.word	0x08011188
 8005bcc:	00000000 	.word	0x00000000

08005bd0 <PID_controller>:

    return output;
}

double PID_controller(double setpoint, double actual_position, uint8_t pidMode)
{
 8005bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd4:	b090      	sub	sp, #64	@ 0x40
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	ed87 0b08 	vstr	d0, [r7, #32]
 8005bdc:	ed87 1b06 	vstr	d1, [r7, #24]
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]
	switch(pidMode)
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	f200 82f4 	bhi.w	80061d6 <PID_controller+0x606>
 8005bee:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <PID_controller+0x24>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c09 	.word	0x08005c09
 8005bf8:	08005c63 	.word	0x08005c63
 8005bfc:	08005e13 	.word	0x08005e13
 8005c00:	08006023 	.word	0x08006023
 8005c04:	080061a1 	.word	0x080061a1
	{
	case 1:
		Kp = 1100/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8005c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005c10:	f7fa fb3a 	bl	8000288 <__aeabi_dsub>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	60ba      	str	r2, [r7, #8]
 8005c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c24:	a1a8      	add	r1, pc, #672	@ (adr r1, 8005ec8 <PID_controller+0x2f8>)
 8005c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c2a:	f7fa fe0f 	bl	800084c <__aeabi_ddiv>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	499b      	ldr	r1, [pc, #620]	@ (8005ea0 <PID_controller+0x2d0>)
 8005c34:	e9c1 2300 	strd	r2, r3, [r1]
 8005c38:	499a      	ldr	r1, [pc, #616]	@ (8005ea4 <PID_controller+0x2d4>)
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9c1 2300 	strd	r2, r3, [r1]
 8005c46:	4998      	ldr	r1, [pc, #608]	@ (8005ea8 <PID_controller+0x2d8>)
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 8005c54:	4995      	ldr	r1, [pc, #596]	@ (8005eac <PID_controller+0x2dc>)
 8005c56:	a388      	add	r3, pc, #544	@ (adr r3, 8005e78 <PID_controller+0x2a8>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	e9c1 2300 	strd	r2, r3, [r1]
//		else
//		{
//			Kp = 15, Ki = 0.0, Kd = 0.0;
//			tau = 0.1;
//		}
		break;
 8005c60:	e2b9      	b.n	80061d6 <PID_controller+0x606>
	case 2:
		if(setpoint > 0 && setpoint < 100)
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005c6e:	f7fa ff53 	bl	8000b18 <__aeabi_dcmpgt>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d023      	beq.n	8005cc0 <PID_controller+0xf0>
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8005eb0 <PID_controller+0x2e0>)
 8005c7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005c82:	f7fa ff2b 	bl	8000adc <__aeabi_dcmplt>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d019      	beq.n	8005cc0 <PID_controller+0xf0>
		{
			Kp = 35, Ki = 0.001, Kd = 0.0;
 8005c8c:	4984      	ldr	r1, [pc, #528]	@ (8005ea0 <PID_controller+0x2d0>)
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	4b88      	ldr	r3, [pc, #544]	@ (8005eb4 <PID_controller+0x2e4>)
 8005c94:	e9c1 2300 	strd	r2, r3, [r1]
 8005c98:	4982      	ldr	r1, [pc, #520]	@ (8005ea4 <PID_controller+0x2d4>)
 8005c9a:	a379      	add	r3, pc, #484	@ (adr r3, 8005e80 <PID_controller+0x2b0>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	e9c1 2300 	strd	r2, r3, [r1]
 8005ca4:	4980      	ldr	r1, [pc, #512]	@ (8005ea8 <PID_controller+0x2d8>)
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005cb2:	497e      	ldr	r1, [pc, #504]	@ (8005eac <PID_controller+0x2dc>)
 8005cb4:	a370      	add	r3, pc, #448	@ (adr r3, 8005e78 <PID_controller+0x2a8>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	e9c1 2300 	strd	r2, r3, [r1]
 8005cbe:	e0a7      	b.n	8005e10 <PID_controller+0x240>
		}
		else if(setpoint >= 100 && setpoint < 250)
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	4b7a      	ldr	r3, [pc, #488]	@ (8005eb0 <PID_controller+0x2e0>)
 8005cc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005cca:	f7fa ff1b 	bl	8000b04 <__aeabi_dcmpge>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d024      	beq.n	8005d1e <PID_controller+0x14e>
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	4b77      	ldr	r3, [pc, #476]	@ (8005eb8 <PID_controller+0x2e8>)
 8005cda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005cde:	f7fa fefd 	bl	8000adc <__aeabi_dcmplt>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01a      	beq.n	8005d1e <PID_controller+0x14e>
		{
			Kp = 12, Ki = 0.0, Kd = 0.0;
 8005ce8:	496d      	ldr	r1, [pc, #436]	@ (8005ea0 <PID_controller+0x2d0>)
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	4b73      	ldr	r3, [pc, #460]	@ (8005ebc <PID_controller+0x2ec>)
 8005cf0:	e9c1 2300 	strd	r2, r3, [r1]
 8005cf4:	496b      	ldr	r1, [pc, #428]	@ (8005ea4 <PID_controller+0x2d4>)
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	e9c1 2300 	strd	r2, r3, [r1]
 8005d02:	4969      	ldr	r1, [pc, #420]	@ (8005ea8 <PID_controller+0x2d8>)
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005d10:	4966      	ldr	r1, [pc, #408]	@ (8005eac <PID_controller+0x2dc>)
 8005d12:	a359      	add	r3, pc, #356	@ (adr r3, 8005e78 <PID_controller+0x2a8>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	e9c1 2300 	strd	r2, r3, [r1]
 8005d1c:	e078      	b.n	8005e10 <PID_controller+0x240>
		}
		else if(setpoint >= 250 && setpoint < 750)
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	4b65      	ldr	r3, [pc, #404]	@ (8005eb8 <PID_controller+0x2e8>)
 8005d24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d28:	f7fa feec 	bl	8000b04 <__aeabi_dcmpge>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d024      	beq.n	8005d7c <PID_controller+0x1ac>
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	4b62      	ldr	r3, [pc, #392]	@ (8005ec0 <PID_controller+0x2f0>)
 8005d38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d3c:	f7fa fece 	bl	8000adc <__aeabi_dcmplt>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01a      	beq.n	8005d7c <PID_controller+0x1ac>
		{
			Kp = 6, Ki = 0.0, Kd = 0.0;
 8005d46:	4956      	ldr	r1, [pc, #344]	@ (8005ea0 <PID_controller+0x2d0>)
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec4 <PID_controller+0x2f4>)
 8005d4e:	e9c1 2300 	strd	r2, r3, [r1]
 8005d52:	4954      	ldr	r1, [pc, #336]	@ (8005ea4 <PID_controller+0x2d4>)
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9c1 2300 	strd	r2, r3, [r1]
 8005d60:	4951      	ldr	r1, [pc, #324]	@ (8005ea8 <PID_controller+0x2d8>)
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005d6e:	494f      	ldr	r1, [pc, #316]	@ (8005eac <PID_controller+0x2dc>)
 8005d70:	a341      	add	r3, pc, #260	@ (adr r3, 8005e78 <PID_controller+0x2a8>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	e9c1 2300 	strd	r2, r3, [r1]
 8005d7a:	e049      	b.n	8005e10 <PID_controller+0x240>
		}
		else if(setpoint >= 750 && setpoint < 2500)
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec0 <PID_controller+0x2f0>)
 8005d82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d86:	f7fa febd 	bl	8000b04 <__aeabi_dcmpge>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d024      	beq.n	8005dda <PID_controller+0x20a>
 8005d90:	a33d      	add	r3, pc, #244	@ (adr r3, 8005e88 <PID_controller+0x2b8>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d9a:	f7fa fe9f 	bl	8000adc <__aeabi_dcmplt>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01a      	beq.n	8005dda <PID_controller+0x20a>
		{
			Kp = 3.2, Ki = 0.0, Kd = 0.0;
 8005da4:	493e      	ldr	r1, [pc, #248]	@ (8005ea0 <PID_controller+0x2d0>)
 8005da6:	a33a      	add	r3, pc, #232	@ (adr r3, 8005e90 <PID_controller+0x2c0>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	e9c1 2300 	strd	r2, r3, [r1]
 8005db0:	493c      	ldr	r1, [pc, #240]	@ (8005ea4 <PID_controller+0x2d4>)
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	e9c1 2300 	strd	r2, r3, [r1]
 8005dbe:	493a      	ldr	r1, [pc, #232]	@ (8005ea8 <PID_controller+0x2d8>)
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005dcc:	4937      	ldr	r1, [pc, #220]	@ (8005eac <PID_controller+0x2dc>)
 8005dce:	a32a      	add	r3, pc, #168	@ (adr r3, 8005e78 <PID_controller+0x2a8>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	e9c1 2300 	strd	r2, r3, [r1]
 8005dd8:	e01a      	b.n	8005e10 <PID_controller+0x240>
		}
		else
		{
			Kp = 0.7, Ki = 0.0, Kd = 0.0;
 8005dda:	4931      	ldr	r1, [pc, #196]	@ (8005ea0 <PID_controller+0x2d0>)
 8005ddc:	a32e      	add	r3, pc, #184	@ (adr r3, 8005e98 <PID_controller+0x2c8>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	e9c1 2300 	strd	r2, r3, [r1]
 8005de6:	492f      	ldr	r1, [pc, #188]	@ (8005ea4 <PID_controller+0x2d4>)
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	e9c1 2300 	strd	r2, r3, [r1]
 8005df4:	492c      	ldr	r1, [pc, #176]	@ (8005ea8 <PID_controller+0x2d8>)
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005e02:	492a      	ldr	r1, [pc, #168]	@ (8005eac <PID_controller+0x2dc>)
 8005e04:	a31c      	add	r3, pc, #112	@ (adr r3, 8005e78 <PID_controller+0x2a8>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 8005e0e:	e1e2      	b.n	80061d6 <PID_controller+0x606>
 8005e10:	e1e1      	b.n	80061d6 <PID_controller+0x606>
	case 3:
		if(setpoint > 0 && setpoint < 100)
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e1e:	f7fa fe7b 	bl	8000b18 <__aeabi_dcmpgt>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d053      	beq.n	8005ed0 <PID_controller+0x300>
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	4b20      	ldr	r3, [pc, #128]	@ (8005eb0 <PID_controller+0x2e0>)
 8005e2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e32:	f7fa fe53 	bl	8000adc <__aeabi_dcmplt>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d049      	beq.n	8005ed0 <PID_controller+0x300>
		{
			Kp = 35.0, Ki = 0.0, Kd = 0.0;
 8005e3c:	4918      	ldr	r1, [pc, #96]	@ (8005ea0 <PID_controller+0x2d0>)
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	4b1c      	ldr	r3, [pc, #112]	@ (8005eb4 <PID_controller+0x2e4>)
 8005e44:	e9c1 2300 	strd	r2, r3, [r1]
 8005e48:	4916      	ldr	r1, [pc, #88]	@ (8005ea4 <PID_controller+0x2d4>)
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	e9c1 2300 	strd	r2, r3, [r1]
 8005e56:	4914      	ldr	r1, [pc, #80]	@ (8005ea8 <PID_controller+0x2d8>)
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005e64:	4911      	ldr	r1, [pc, #68]	@ (8005eac <PID_controller+0x2dc>)
 8005e66:	a304      	add	r3, pc, #16	@ (adr r3, 8005e78 <PID_controller+0x2a8>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	e9c1 2300 	strd	r2, r3, [r1]
 8005e70:	e0d6      	b.n	8006020 <PID_controller+0x450>
 8005e72:	bf00      	nop
 8005e74:	f3af 8000 	nop.w
 8005e78:	9999999a 	.word	0x9999999a
 8005e7c:	3fb99999 	.word	0x3fb99999
 8005e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8005e84:	3f50624d 	.word	0x3f50624d
 8005e88:	00000000 	.word	0x00000000
 8005e8c:	40a38800 	.word	0x40a38800
 8005e90:	9999999a 	.word	0x9999999a
 8005e94:	40099999 	.word	0x40099999
 8005e98:	66666666 	.word	0x66666666
 8005e9c:	3fe66666 	.word	0x3fe66666
 8005ea0:	200005f8 	.word	0x200005f8
 8005ea4:	20000600 	.word	0x20000600
 8005ea8:	20000608 	.word	0x20000608
 8005eac:	200000d0 	.word	0x200000d0
 8005eb0:	40590000 	.word	0x40590000
 8005eb4:	40418000 	.word	0x40418000
 8005eb8:	406f4000 	.word	0x406f4000
 8005ebc:	40280000 	.word	0x40280000
 8005ec0:	40877000 	.word	0x40877000
 8005ec4:	40180000 	.word	0x40180000
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	40913000 	.word	0x40913000
		}
		else if(setpoint >= 100 && setpoint < 250)
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	4ba4      	ldr	r3, [pc, #656]	@ (8006168 <PID_controller+0x598>)
 8005ed6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005eda:	f7fa fe13 	bl	8000b04 <__aeabi_dcmpge>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d024      	beq.n	8005f2e <PID_controller+0x35e>
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	4ba0      	ldr	r3, [pc, #640]	@ (800616c <PID_controller+0x59c>)
 8005eea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005eee:	f7fa fdf5 	bl	8000adc <__aeabi_dcmplt>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01a      	beq.n	8005f2e <PID_controller+0x35e>
		{
			Kp = 10.0, Ki = 0.0, Kd = 0.0;
 8005ef8:	499d      	ldr	r1, [pc, #628]	@ (8006170 <PID_controller+0x5a0>)
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	4b9d      	ldr	r3, [pc, #628]	@ (8006174 <PID_controller+0x5a4>)
 8005f00:	e9c1 2300 	strd	r2, r3, [r1]
 8005f04:	499c      	ldr	r1, [pc, #624]	@ (8006178 <PID_controller+0x5a8>)
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9c1 2300 	strd	r2, r3, [r1]
 8005f12:	499a      	ldr	r1, [pc, #616]	@ (800617c <PID_controller+0x5ac>)
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005f20:	4997      	ldr	r1, [pc, #604]	@ (8006180 <PID_controller+0x5b0>)
 8005f22:	a38d      	add	r3, pc, #564	@ (adr r3, 8006158 <PID_controller+0x588>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	e9c1 2300 	strd	r2, r3, [r1]
 8005f2c:	e078      	b.n	8006020 <PID_controller+0x450>
		}
		else if(setpoint >= 250 && setpoint < 750)
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	4b8e      	ldr	r3, [pc, #568]	@ (800616c <PID_controller+0x59c>)
 8005f34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f38:	f7fa fde4 	bl	8000b04 <__aeabi_dcmpge>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d024      	beq.n	8005f8c <PID_controller+0x3bc>
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	4b8f      	ldr	r3, [pc, #572]	@ (8006184 <PID_controller+0x5b4>)
 8005f48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f4c:	f7fa fdc6 	bl	8000adc <__aeabi_dcmplt>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01a      	beq.n	8005f8c <PID_controller+0x3bc>
		{
			Kp = 6.0, Ki = 0.0, Kd = 0.0;
 8005f56:	4986      	ldr	r1, [pc, #536]	@ (8006170 <PID_controller+0x5a0>)
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006188 <PID_controller+0x5b8>)
 8005f5e:	e9c1 2300 	strd	r2, r3, [r1]
 8005f62:	4985      	ldr	r1, [pc, #532]	@ (8006178 <PID_controller+0x5a8>)
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9c1 2300 	strd	r2, r3, [r1]
 8005f70:	4982      	ldr	r1, [pc, #520]	@ (800617c <PID_controller+0x5ac>)
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005f7e:	4980      	ldr	r1, [pc, #512]	@ (8006180 <PID_controller+0x5b0>)
 8005f80:	a375      	add	r3, pc, #468	@ (adr r3, 8006158 <PID_controller+0x588>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	e9c1 2300 	strd	r2, r3, [r1]
 8005f8a:	e049      	b.n	8006020 <PID_controller+0x450>
		}
		else if(setpoint >= 750 && setpoint < 1200)
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	4b7c      	ldr	r3, [pc, #496]	@ (8006184 <PID_controller+0x5b4>)
 8005f92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f96:	f7fa fdb5 	bl	8000b04 <__aeabi_dcmpge>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d024      	beq.n	8005fea <PID_controller+0x41a>
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	4b79      	ldr	r3, [pc, #484]	@ (800618c <PID_controller+0x5bc>)
 8005fa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005faa:	f7fa fd97 	bl	8000adc <__aeabi_dcmplt>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01a      	beq.n	8005fea <PID_controller+0x41a>
		{
			Kp = 5.0, Ki = 0.0, Kd = 0.0;
 8005fb4:	496e      	ldr	r1, [pc, #440]	@ (8006170 <PID_controller+0x5a0>)
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	4b75      	ldr	r3, [pc, #468]	@ (8006190 <PID_controller+0x5c0>)
 8005fbc:	e9c1 2300 	strd	r2, r3, [r1]
 8005fc0:	496d      	ldr	r1, [pc, #436]	@ (8006178 <PID_controller+0x5a8>)
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	e9c1 2300 	strd	r2, r3, [r1]
 8005fce:	496b      	ldr	r1, [pc, #428]	@ (800617c <PID_controller+0x5ac>)
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8005fdc:	4968      	ldr	r1, [pc, #416]	@ (8006180 <PID_controller+0x5b0>)
 8005fde:	a35e      	add	r3, pc, #376	@ (adr r3, 8006158 <PID_controller+0x588>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	e9c1 2300 	strd	r2, r3, [r1]
 8005fe8:	e01a      	b.n	8006020 <PID_controller+0x450>
		}
		else
		{
			Kp = 1.0, Ki = 0.0, Kd = 0.0;
 8005fea:	4961      	ldr	r1, [pc, #388]	@ (8006170 <PID_controller+0x5a0>)
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	4b68      	ldr	r3, [pc, #416]	@ (8006194 <PID_controller+0x5c4>)
 8005ff2:	e9c1 2300 	strd	r2, r3, [r1]
 8005ff6:	4960      	ldr	r1, [pc, #384]	@ (8006178 <PID_controller+0x5a8>)
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	e9c1 2300 	strd	r2, r3, [r1]
 8006004:	495d      	ldr	r1, [pc, #372]	@ (800617c <PID_controller+0x5ac>)
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006012:	495b      	ldr	r1, [pc, #364]	@ (8006180 <PID_controller+0x5b0>)
 8006014:	a350      	add	r3, pc, #320	@ (adr r3, 8006158 <PID_controller+0x588>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 800601e:	e0da      	b.n	80061d6 <PID_controller+0x606>
 8006020:	e0d9      	b.n	80061d6 <PID_controller+0x606>
	case 4:
		if(setpoint < 100)
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	4b50      	ldr	r3, [pc, #320]	@ (8006168 <PID_controller+0x598>)
 8006028:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800602c:	f7fa fd56 	bl	8000adc <__aeabi_dcmplt>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02c      	beq.n	8006090 <PID_controller+0x4c0>
		{
			Kp = 500/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8006036:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800603a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800603e:	f7fa f923 	bl	8000288 <__aeabi_dsub>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	603a      	str	r2, [r7, #0]
 8006048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	4950      	ldr	r1, [pc, #320]	@ (8006198 <PID_controller+0x5c8>)
 8006058:	f7fa fbf8 	bl	800084c <__aeabi_ddiv>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4943      	ldr	r1, [pc, #268]	@ (8006170 <PID_controller+0x5a0>)
 8006062:	e9c1 2300 	strd	r2, r3, [r1]
 8006066:	4944      	ldr	r1, [pc, #272]	@ (8006178 <PID_controller+0x5a8>)
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9c1 2300 	strd	r2, r3, [r1]
 8006074:	4941      	ldr	r1, [pc, #260]	@ (800617c <PID_controller+0x5ac>)
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006082:	493f      	ldr	r1, [pc, #252]	@ (8006180 <PID_controller+0x5b0>)
 8006084:	a334      	add	r3, pc, #208	@ (adr r3, 8006158 <PID_controller+0x588>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	e9c1 2300 	strd	r2, r3, [r1]
		else
		{
			Kp = 2400/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
			tau = 0.1;
		}
		break;
 800608e:	e0a2      	b.n	80061d6 <PID_controller+0x606>
		else if(setpoint < 500)
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	4b40      	ldr	r3, [pc, #256]	@ (8006198 <PID_controller+0x5c8>)
 8006096:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800609a:	f7fa fd1f 	bl	8000adc <__aeabi_dcmplt>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d02b      	beq.n	80060fc <PID_controller+0x52c>
			Kp = 1500/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 80060a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80060ac:	f7fa f8ec 	bl	8000288 <__aeabi_dsub>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4692      	mov	sl, r2
 80060b6:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80060ba:	4652      	mov	r2, sl
 80060bc:	465b      	mov	r3, fp
 80060be:	a128      	add	r1, pc, #160	@ (adr r1, 8006160 <PID_controller+0x590>)
 80060c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c4:	f7fa fbc2 	bl	800084c <__aeabi_ddiv>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4928      	ldr	r1, [pc, #160]	@ (8006170 <PID_controller+0x5a0>)
 80060ce:	e9c1 2300 	strd	r2, r3, [r1]
 80060d2:	4929      	ldr	r1, [pc, #164]	@ (8006178 <PID_controller+0x5a8>)
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9c1 2300 	strd	r2, r3, [r1]
 80060e0:	4926      	ldr	r1, [pc, #152]	@ (800617c <PID_controller+0x5ac>)
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 80060ee:	4924      	ldr	r1, [pc, #144]	@ (8006180 <PID_controller+0x5b0>)
 80060f0:	a319      	add	r3, pc, #100	@ (adr r3, 8006158 <PID_controller+0x588>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80060fa:	e06c      	b.n	80061d6 <PID_controller+0x606>
			Kp = 2400/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 80060fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006104:	f7fa f8c0 	bl	8000288 <__aeabi_dsub>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4690      	mov	r8, r2
 800610e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8006112:	4642      	mov	r2, r8
 8006114:	464b      	mov	r3, r9
 8006116:	f04f 0000 	mov.w	r0, #0
 800611a:	4920      	ldr	r1, [pc, #128]	@ (800619c <PID_controller+0x5cc>)
 800611c:	f7fa fb96 	bl	800084c <__aeabi_ddiv>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4912      	ldr	r1, [pc, #72]	@ (8006170 <PID_controller+0x5a0>)
 8006126:	e9c1 2300 	strd	r2, r3, [r1]
 800612a:	4913      	ldr	r1, [pc, #76]	@ (8006178 <PID_controller+0x5a8>)
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	e9c1 2300 	strd	r2, r3, [r1]
 8006138:	4910      	ldr	r1, [pc, #64]	@ (800617c <PID_controller+0x5ac>)
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006146:	490e      	ldr	r1, [pc, #56]	@ (8006180 <PID_controller+0x5b0>)
 8006148:	a303      	add	r3, pc, #12	@ (adr r3, 8006158 <PID_controller+0x588>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006152:	e040      	b.n	80061d6 <PID_controller+0x606>
 8006154:	f3af 8000 	nop.w
 8006158:	9999999a 	.word	0x9999999a
 800615c:	3fb99999 	.word	0x3fb99999
 8006160:	00000000 	.word	0x00000000
 8006164:	40977000 	.word	0x40977000
 8006168:	40590000 	.word	0x40590000
 800616c:	406f4000 	.word	0x406f4000
 8006170:	200005f8 	.word	0x200005f8
 8006174:	40240000 	.word	0x40240000
 8006178:	20000600 	.word	0x20000600
 800617c:	20000608 	.word	0x20000608
 8006180:	200000d0 	.word	0x200000d0
 8006184:	40877000 	.word	0x40877000
 8006188:	40180000 	.word	0x40180000
 800618c:	4092c000 	.word	0x4092c000
 8006190:	40140000 	.word	0x40140000
 8006194:	3ff00000 	.word	0x3ff00000
 8006198:	407f4000 	.word	0x407f4000
 800619c:	40a2c000 	.word	0x40a2c000
	case 5:
		Kp = 30.0, Ki = 0.0, Kd = 0.0;
 80061a0:	4975      	ldr	r1, [pc, #468]	@ (8006378 <PID_controller+0x7a8>)
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	4b75      	ldr	r3, [pc, #468]	@ (800637c <PID_controller+0x7ac>)
 80061a8:	e9c1 2300 	strd	r2, r3, [r1]
 80061ac:	4974      	ldr	r1, [pc, #464]	@ (8006380 <PID_controller+0x7b0>)
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	e9c1 2300 	strd	r2, r3, [r1]
 80061ba:	4972      	ldr	r1, [pc, #456]	@ (8006384 <PID_controller+0x7b4>)
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 80061c8:	496f      	ldr	r1, [pc, #444]	@ (8006388 <PID_controller+0x7b8>)
 80061ca:	a369      	add	r3, pc, #420	@ (adr r3, 8006370 <PID_controller+0x7a0>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80061d4:	bf00      	nop
	}
    double error = setpoint - actual_position;
 80061d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80061de:	f7fa f853 	bl	8000288 <__aeabi_dsub>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Proportional
    double proportional = Kp * error;
 80061ea:	4b63      	ldr	r3, [pc, #396]	@ (8006378 <PID_controller+0x7a8>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80061f4:	f7fa fa00 	bl	80005f8 <__aeabi_dmul>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Integral
    integral = integral + 0.5 * Ki * T * (error + prev_error);
 8006200:	4b5f      	ldr	r3, [pc, #380]	@ (8006380 <PID_controller+0x7b0>)
 8006202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	4b60      	ldr	r3, [pc, #384]	@ (800638c <PID_controller+0x7bc>)
 800620c:	f7fa f9f4 	bl	80005f8 <__aeabi_dmul>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4610      	mov	r0, r2
 8006216:	4619      	mov	r1, r3
 8006218:	4b5d      	ldr	r3, [pc, #372]	@ (8006390 <PID_controller+0x7c0>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f7fa f9eb 	bl	80005f8 <__aeabi_dmul>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4690      	mov	r8, r2
 8006228:	4699      	mov	r9, r3
 800622a:	4b5a      	ldr	r3, [pc, #360]	@ (8006394 <PID_controller+0x7c4>)
 800622c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006234:	f7fa f82a 	bl	800028c <__adddf3>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4640      	mov	r0, r8
 800623e:	4649      	mov	r1, r9
 8006240:	f7fa f9da 	bl	80005f8 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	4b52      	ldr	r3, [pc, #328]	@ (8006398 <PID_controller+0x7c8>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f7fa f81b 	bl	800028c <__adddf3>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	494f      	ldr	r1, [pc, #316]	@ (8006398 <PID_controller+0x7c8>)
 800625c:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = -(2.0 * Kd * (actual_position - prevMeasurement) + (2.0 * tau - T) * derivative) / (2.0 * tau + T);
 8006260:	4b48      	ldr	r3, [pc, #288]	@ (8006384 <PID_controller+0x7b4>)
 8006262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	f7fa f80f 	bl	800028c <__adddf3>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4690      	mov	r8, r2
 8006274:	4699      	mov	r9, r3
 8006276:	4b49      	ldr	r3, [pc, #292]	@ (800639c <PID_controller+0x7cc>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006280:	f7fa f802 	bl	8000288 <__aeabi_dsub>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4640      	mov	r0, r8
 800628a:	4649      	mov	r1, r9
 800628c:	f7fa f9b4 	bl	80005f8 <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4690      	mov	r8, r2
 8006296:	4699      	mov	r9, r3
 8006298:	4b3b      	ldr	r3, [pc, #236]	@ (8006388 <PID_controller+0x7b8>)
 800629a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	f7f9 fff3 	bl	800028c <__adddf3>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	4b38      	ldr	r3, [pc, #224]	@ (8006390 <PID_controller+0x7c0>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7f9 ffe8 	bl	8000288 <__aeabi_dsub>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	4b37      	ldr	r3, [pc, #220]	@ (80063a0 <PID_controller+0x7d0>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7fa f997 	bl	80005f8 <__aeabi_dmul>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7f9 ffdb 	bl	800028c <__adddf3>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4614      	mov	r4, r2
 80062dc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80062e0:	4b29      	ldr	r3, [pc, #164]	@ (8006388 <PID_controller+0x7b8>)
 80062e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	f7f9 ffcf 	bl	800028c <__adddf3>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	4b26      	ldr	r3, [pc, #152]	@ (8006390 <PID_controller+0x7c0>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ffc6 	bl	800028c <__adddf3>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4620      	mov	r0, r4
 8006306:	4629      	mov	r1, r5
 8006308:	f7fa faa0 	bl	800084c <__aeabi_ddiv>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4923      	ldr	r1, [pc, #140]	@ (80063a0 <PID_controller+0x7d0>)
 8006312:	e9c1 2300 	strd	r2, r3, [r1]

    double output = proportional + integral + derivative;
 8006316:	4b20      	ldr	r3, [pc, #128]	@ (8006398 <PID_controller+0x7c8>)
 8006318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800631c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006320:	f7f9 ffb4 	bl	800028c <__adddf3>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4610      	mov	r0, r2
 800632a:	4619      	mov	r1, r3
 800632c:	4b1c      	ldr	r3, [pc, #112]	@ (80063a0 <PID_controller+0x7d0>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7f9 ffab 	bl	800028c <__adddf3>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    prev_error = error;
 800633e:	4915      	ldr	r1, [pc, #84]	@ (8006394 <PID_controller+0x7c4>)
 8006340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006344:	e9c1 2300 	strd	r2, r3, [r1]
	prevMeasurement = actual_position;
 8006348:	4914      	ldr	r1, [pc, #80]	@ (800639c <PID_controller+0x7cc>)
 800634a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800634e:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 8006352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006356:	ec43 2b17 	vmov	d7, r2, r3
}
 800635a:	eeb0 0a47 	vmov.f32	s0, s14
 800635e:	eef0 0a67 	vmov.f32	s1, s15
 8006362:	3740      	adds	r7, #64	@ 0x40
 8006364:	46bd      	mov	sp, r7
 8006366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800636a:	bf00      	nop
 800636c:	f3af 8000 	nop.w
 8006370:	9999999a 	.word	0x9999999a
 8006374:	3fb99999 	.word	0x3fb99999
 8006378:	200005f8 	.word	0x200005f8
 800637c:	403e0000 	.word	0x403e0000
 8006380:	20000600 	.word	0x20000600
 8006384:	20000608 	.word	0x20000608
 8006388:	200000d0 	.word	0x200000d0
 800638c:	3fe00000 	.word	0x3fe00000
 8006390:	200000d8 	.word	0x200000d8
 8006394:	200005e8 	.word	0x200005e8
 8006398:	200005d8 	.word	0x200005d8
 800639c:	200005f0 	.word	0x200005f0
 80063a0:	200005e0 	.word	0x200005e0
 80063a4:	00000000 	.word	0x00000000

080063a8 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position)
{
 80063a8:	b5b0      	push	{r4, r5, r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80063b2:	ed87 1b00 	vstr	d1, [r7]
	double error, P;
	if(setpoint >= 45 && setpoint < 90)
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	4b61      	ldr	r3, [pc, #388]	@ (8006540 <PID_controllerH+0x198>)
 80063bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063c0:	f7fa fba0 	bl	8000b04 <__aeabi_dcmpge>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <PID_controllerH+0x46>
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006544 <PID_controllerH+0x19c>)
 80063d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063d4:	f7fa fb82 	bl	8000adc <__aeabi_dcmplt>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <PID_controllerH+0x46>
	{
		Kp = 2.0;
 80063de:	495a      	ldr	r1, [pc, #360]	@ (8006548 <PID_controllerH+0x1a0>)
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063e8:	e9c1 2300 	strd	r2, r3, [r1]
 80063ec:	e042      	b.n	8006474 <PID_controllerH+0xcc>
	}
	else if(setpoint >= 90 && setpoint < 135)
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	4b54      	ldr	r3, [pc, #336]	@ (8006544 <PID_controllerH+0x19c>)
 80063f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063f8:	f7fa fb84 	bl	8000b04 <__aeabi_dcmpge>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d010      	beq.n	8006424 <PID_controllerH+0x7c>
 8006402:	a34b      	add	r3, pc, #300	@ (adr r3, 8006530 <PID_controllerH+0x188>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800640c:	f7fa fb66 	bl	8000adc <__aeabi_dcmplt>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d006      	beq.n	8006424 <PID_controllerH+0x7c>
	{
		Kp = 1.2;
 8006416:	494c      	ldr	r1, [pc, #304]	@ (8006548 <PID_controllerH+0x1a0>)
 8006418:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800641c:	4b4b      	ldr	r3, [pc, #300]	@ (800654c <PID_controllerH+0x1a4>)
 800641e:	e9c1 2300 	strd	r2, r3, [r1]
 8006422:	e027      	b.n	8006474 <PID_controllerH+0xcc>
	}
	else if(setpoint >= 135)
 8006424:	a342      	add	r3, pc, #264	@ (adr r3, 8006530 <PID_controllerH+0x188>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800642e:	f7fa fb69 	bl	8000b04 <__aeabi_dcmpge>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d006      	beq.n	8006446 <PID_controllerH+0x9e>
	{
		Kp = 0.8;
 8006438:	4943      	ldr	r1, [pc, #268]	@ (8006548 <PID_controllerH+0x1a0>)
 800643a:	a33f      	add	r3, pc, #252	@ (adr r3, 8006538 <PID_controllerH+0x190>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	e9c1 2300 	strd	r2, r3, [r1]
 8006444:	e016      	b.n	8006474 <PID_controllerH+0xcc>
	}
	else
	{
//		Kp = 4.5;
		Kp = 68/fabs(setpoint - actual_position);
 8006446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800644e:	f7f9 ff1b 	bl	8000288 <__aeabi_dsub>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4614      	mov	r4, r2
 8006458:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800645c:	4622      	mov	r2, r4
 800645e:	462b      	mov	r3, r5
 8006460:	f04f 0000 	mov.w	r0, #0
 8006464:	493a      	ldr	r1, [pc, #232]	@ (8006550 <PID_controllerH+0x1a8>)
 8006466:	f7fa f9f1 	bl	800084c <__aeabi_ddiv>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4936      	ldr	r1, [pc, #216]	@ (8006548 <PID_controllerH+0x1a0>)
 8006470:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if((setpoint - actual_position) > 180)
 8006474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800647c:	f7f9 ff04 	bl	8000288 <__aeabi_dsub>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4610      	mov	r0, r2
 8006486:	4619      	mov	r1, r3
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	4b31      	ldr	r3, [pc, #196]	@ (8006554 <PID_controllerH+0x1ac>)
 800648e:	f7fa fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <PID_controllerH+0x10c>
	{
	    error = -(setpoint + actual_position);
 8006498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a0:	f7f9 fef4 	bl	800028c <__adddf3>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4611      	mov	r1, r2
 80064aa:	61b9      	str	r1, [r7, #24]
 80064ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	e026      	b.n	8006502 <PID_controllerH+0x15a>
	}
	else if((setpoint - actual_position) < -180)
 80064b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064bc:	f7f9 fee4 	bl	8000288 <__aeabi_dsub>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	4b22      	ldr	r3, [pc, #136]	@ (8006558 <PID_controllerH+0x1b0>)
 80064ce:	f7fa fb05 	bl	8000adc <__aeabi_dcmplt>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <PID_controllerH+0x146>
	{
		error = setpoint + actual_position;
 80064d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064e0:	f7f9 fed4 	bl	800028c <__adddf3>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80064ec:	e009      	b.n	8006502 <PID_controllerH+0x15a>
	}
	else
	{
	    error = setpoint - actual_position;
 80064ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064f6:	f7f9 fec7 	bl	8000288 <__aeabi_dsub>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

    // Proportional
	P = Kp * error;
 8006502:	4b11      	ldr	r3, [pc, #68]	@ (8006548 <PID_controllerH+0x1a0>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800650c:	f7fa f874 	bl	80005f8 <__aeabi_dmul>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return P;
 8006518:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800651c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006520:	eeb0 0a47 	vmov.f32	s0, s14
 8006524:	eef0 0a67 	vmov.f32	s1, s15
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bdb0      	pop	{r4, r5, r7, pc}
 800652e:	bf00      	nop
 8006530:	00000000 	.word	0x00000000
 8006534:	4060e000 	.word	0x4060e000
 8006538:	9999999a 	.word	0x9999999a
 800653c:	3fe99999 	.word	0x3fe99999
 8006540:	40468000 	.word	0x40468000
 8006544:	40568000 	.word	0x40568000
 8006548:	200005f8 	.word	0x200005f8
 800654c:	3ff33333 	.word	0x3ff33333
 8006550:	40510000 	.word	0x40510000
 8006554:	40668000 	.word	0x40668000
 8006558:	c0668000 	.word	0xc0668000

0800655c <smoothVelocity>:
#include <robot_control.h>

extern int camera[5];

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 800655c:	b5b0      	push	{r4, r5, r7, lr}
 800655e:	b08c      	sub	sp, #48	@ 0x30
 8006560:	af00      	add	r7, sp, #0
 8006562:	6178      	str	r0, [r7, #20]
 8006564:	6139      	str	r1, [r7, #16]
 8006566:	60fa      	str	r2, [r7, #12]
 8006568:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 8006590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	493e      	ldr	r1, [pc, #248]	@ (8006694 <smoothVelocity+0x138>)
 800659a:	f7f9 fe75 	bl	8000288 <__aeabi_dsub>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4610      	mov	r0, r2
 80065a4:	4619      	mov	r1, r3
 80065a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065aa:	f7fa f825 	bl	80005f8 <__aeabi_dmul>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4614      	mov	r4, r2
 80065b4:	461d      	mov	r5, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c0:	f7fa f81a 	bl	80005f8 <__aeabi_dmul>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4620      	mov	r0, r4
 80065ca:	4629      	mov	r1, r5
 80065cc:	f7f9 fe5e 	bl	800028c <__adddf3>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	6979      	ldr	r1, [r7, #20]
 80065d6:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 80065da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065de:	f04f 0000 	mov.w	r0, #0
 80065e2:	492c      	ldr	r1, [pc, #176]	@ (8006694 <smoothVelocity+0x138>)
 80065e4:	f7f9 fe50 	bl	8000288 <__aeabi_dsub>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065f4:	f7fa f800 	bl	80005f8 <__aeabi_dmul>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	461d      	mov	r5, r3
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660a:	f7f9 fff5 	bl	80005f8 <__aeabi_dmul>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4620      	mov	r0, r4
 8006614:	4629      	mov	r1, r5
 8006616:	f7f9 fe39 	bl	800028c <__adddf3>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	6939      	ldr	r1, [r7, #16]
 8006620:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 8006624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006628:	f04f 0000 	mov.w	r0, #0
 800662c:	4919      	ldr	r1, [pc, #100]	@ (8006694 <smoothVelocity+0x138>)
 800662e:	f7f9 fe2b 	bl	8000288 <__aeabi_dsub>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800663e:	f7f9 ffdb 	bl	80005f8 <__aeabi_dmul>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4614      	mov	r4, r2
 8006648:	461d      	mov	r5, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006654:	f7f9 ffd0 	bl	80005f8 <__aeabi_dmul>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7f9 fe14 	bl	800028c <__adddf3>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 800668c:	bf00      	nop
 800668e:	3730      	adds	r7, #48	@ 0x30
 8006690:	46bd      	mov	sp, r7
 8006692:	bdb0      	pop	{r4, r5, r7, pc}
 8006694:	3ff00000 	.word	0x3ff00000

08006698 <PID_Kalman>:
    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
    Inverse_Kinematics(Vx, Vy, W);
}

void PID_Kalman(EKF setpoint, uint8_t pidMode)
{
 8006698:	b5b0      	push	{r4, r5, r7, lr}
 800669a:	b094      	sub	sp, #80	@ 0x50
 800669c:	af00      	add	r7, sp, #0
 800669e:	eeb0 5a40 	vmov.f32	s10, s0
 80066a2:	eef0 5a60 	vmov.f32	s11, s1
 80066a6:	eeb0 6a41 	vmov.f32	s12, s2
 80066aa:	eef0 6a61 	vmov.f32	s13, s3
 80066ae:	eeb0 7a42 	vmov.f32	s14, s4
 80066b2:	eef0 7a62 	vmov.f32	s15, s5
 80066b6:	4603      	mov	r3, r0
 80066b8:	ed87 5b02 	vstr	d5, [r7, #8]
 80066bc:	ed87 6b04 	vstr	d6, [r7, #16]
 80066c0:	ed87 7b06 	vstr	d7, [r7, #24]
 80066c4:	71fb      	strb	r3, [r7, #7]
	EKF position = extendedKalmanFilter();
 80066c6:	f7fe fa5f 	bl	8004b88 <extendedKalmanFilter>
 80066ca:	eeb0 5a40 	vmov.f32	s10, s0
 80066ce:	eef0 5a60 	vmov.f32	s11, s1
 80066d2:	eeb0 6a41 	vmov.f32	s12, s2
 80066d6:	eef0 6a61 	vmov.f32	s13, s3
 80066da:	eeb0 7a42 	vmov.f32	s14, s4
 80066de:	eef0 7a62 	vmov.f32	s15, s5
 80066e2:	ed87 5b0e 	vstr	d5, [r7, #56]	@ 0x38
 80066e6:	ed87 6b10 	vstr	d6, [r7, #64]	@ 0x40
 80066ea:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
	double Vx = 0;
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double Vy = 0;
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double W = 0;
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	e9c7 2308 	strd	r2, r3, [r7, #32]
//		Vx = PID_controller(setpoint.x, position.x, pidMode);
//		Vy = PID_controller(setpoint.y, position.y, pidMode);
//		W = PID_controllerH(setpoint.h, position.h);
//	}

	Vx = PID_controller(setpoint.x, position.x, pidMode);
 8006712:	ed97 7b02 	vldr	d7, [r7, #8]
 8006716:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	4618      	mov	r0, r3
 800671e:	eeb0 1a46 	vmov.f32	s2, s12
 8006722:	eef0 1a66 	vmov.f32	s3, s13
 8006726:	eeb0 0a47 	vmov.f32	s0, s14
 800672a:	eef0 0a67 	vmov.f32	s1, s15
 800672e:	f7ff fa4f 	bl	8005bd0 <PID_controller>
 8006732:	eeb0 7a40 	vmov.f32	s14, s0
 8006736:	eef0 7a60 	vmov.f32	s15, s1
 800673a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	Vy = PID_controller(setpoint.y, position.y, pidMode);
 800673e:	ed97 7b04 	vldr	d7, [r7, #16]
 8006742:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	4618      	mov	r0, r3
 800674a:	eeb0 1a46 	vmov.f32	s2, s12
 800674e:	eef0 1a66 	vmov.f32	s3, s13
 8006752:	eeb0 0a47 	vmov.f32	s0, s14
 8006756:	eef0 0a67 	vmov.f32	s1, s15
 800675a:	f7ff fa39 	bl	8005bd0 <PID_controller>
 800675e:	eeb0 7a40 	vmov.f32	s14, s0
 8006762:	eef0 7a60 	vmov.f32	s15, s1
 8006766:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
	W = PID_controllerH(setpoint.h, position.h);
 800676a:	ed97 7b06 	vldr	d7, [r7, #24]
 800676e:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8006772:	eeb0 1a46 	vmov.f32	s2, s12
 8006776:	eef0 1a66 	vmov.f32	s3, s13
 800677a:	eeb0 0a47 	vmov.f32	s0, s14
 800677e:	eef0 0a67 	vmov.f32	s1, s15
 8006782:	f7ff fe11 	bl	80063a8 <PID_controllerH>
 8006786:	eeb0 7a40 	vmov.f32	s14, s0
 800678a:	eef0 7a60 	vmov.f32	s15, s1
 800678e:	ed87 7b08 	vstr	d7, [r7, #32]

    smoothVelocity(&Vx, &Vy, &W, 0.5);
 8006792:	f107 0220 	add.w	r2, r7, #32
 8006796:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800679a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800679e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 80067e8 <PID_Kalman+0x150>
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff feda 	bl	800655c <smoothVelocity>
	Inverse_Kinematics(Vx, Vy, W);
 80067a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80067ac:	4610      	mov	r0, r2
 80067ae:	4619      	mov	r1, r3
 80067b0:	f7fa f9d2 	bl	8000b58 <__aeabi_d2iz>
 80067b4:	4604      	mov	r4, r0
 80067b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067ba:	4610      	mov	r0, r2
 80067bc:	4619      	mov	r1, r3
 80067be:	f7fa f9cb 	bl	8000b58 <__aeabi_d2iz>
 80067c2:	4605      	mov	r5, r0
 80067c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	f7fa f9c4 	bl	8000b58 <__aeabi_d2iz>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	f7fa fcb6 	bl	8001148 <Inverse_Kinematics>
}
 80067dc:	bf00      	nop
 80067de:	3750      	adds	r7, #80	@ 0x50
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bdb0      	pop	{r4, r5, r7, pc}
 80067e4:	f3af 8000 	nop.w
 80067e8:	00000000 	.word	0x00000000
 80067ec:	3fe00000 	.word	0x3fe00000

080067f0 <findSilo>:
        }
    }
}

void findSilo()
{
 80067f0:	b5b0      	push	{r4, r5, r7, lr}
 80067f2:	b08c      	sub	sp, #48	@ 0x30
 80067f4:	af00      	add	r7, sp, #0
     * camera[4]: silo angle (in degree)
     */

    static double lastSiloAngle = 0, lastxSilo = 0, lastySilo = 0;

    int siloDistance = camera[3] * 10; // convert to mm
 80067f6:	4bb8      	ldr	r3, [pc, #736]	@ (8006ad8 <findSilo+0x2e8>)
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int siloAngle = camera[4];
 8006804:	4bb4      	ldr	r3, [pc, #720]	@ (8006ad8 <findSilo+0x2e8>)
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
//    int siloExistence = camera[2];
    int xSILO = sin(siloAngle * M_PI / 180) * siloDistance;
 800680a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800680c:	f7f9 fe8a 	bl	8000524 <__aeabi_i2d>
 8006810:	a3ab      	add	r3, pc, #684	@ (adr r3, 8006ac0 <findSilo+0x2d0>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 feef 	bl	80005f8 <__aeabi_dmul>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	4bad      	ldr	r3, [pc, #692]	@ (8006adc <findSilo+0x2ec>)
 8006828:	f7fa f810 	bl	800084c <__aeabi_ddiv>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	ec43 2b17 	vmov	d7, r2, r3
 8006834:	eeb0 0a47 	vmov.f32	s0, s14
 8006838:	eef0 0a67 	vmov.f32	s1, s15
 800683c:	f008 fef0 	bl	800f620 <sin>
 8006840:	ec55 4b10 	vmov	r4, r5, d0
 8006844:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006846:	f7f9 fe6d 	bl	8000524 <__aeabi_i2d>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7f9 fed1 	bl	80005f8 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4610      	mov	r0, r2
 800685c:	4619      	mov	r1, r3
 800685e:	f7fa f97b 	bl	8000b58 <__aeabi_d2iz>
 8006862:	4603      	mov	r3, r0
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
    int ySILO = cos(siloAngle * M_PI / 180) * siloDistance;
 8006866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006868:	f7f9 fe5c 	bl	8000524 <__aeabi_i2d>
 800686c:	a394      	add	r3, pc, #592	@ (adr r3, 8006ac0 <findSilo+0x2d0>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fec1 	bl	80005f8 <__aeabi_dmul>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4610      	mov	r0, r2
 800687c:	4619      	mov	r1, r3
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	4b96      	ldr	r3, [pc, #600]	@ (8006adc <findSilo+0x2ec>)
 8006884:	f7f9 ffe2 	bl	800084c <__aeabi_ddiv>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	ec43 2b17 	vmov	d7, r2, r3
 8006890:	eeb0 0a47 	vmov.f32	s0, s14
 8006894:	eef0 0a67 	vmov.f32	s1, s15
 8006898:	f008 fe6e 	bl	800f578 <cos>
 800689c:	ec55 4b10 	vmov	r4, r5, d0
 80068a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068a2:	f7f9 fe3f 	bl	8000524 <__aeabi_i2d>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4620      	mov	r0, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7f9 fea3 	bl	80005f8 <__aeabi_dmul>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	f7fa f94d 	bl	8000b58 <__aeabi_d2iz>
 80068be:	4603      	mov	r3, r0
 80068c0:	623b      	str	r3, [r7, #32]
    static bool motorState = false;
    static bool motorCorrWithoutSilo = false;
    static bool motorCorrWithSilo = false;

    uint32_t timer = HAL_GetTick();
 80068c2:	f000 fd73 	bl	80073ac <HAL_GetTick>
 80068c6:	61f8      	str	r0, [r7, #28]
    uint32_t lastTime = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]

    double Vx = PID_controller(xSILO, 0, 1);
 80068cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068ce:	f7f9 fe29 	bl	8000524 <__aeabi_i2d>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	2001      	movs	r0, #1
 80068d8:	ed9f 1b7b 	vldr	d1, [pc, #492]	@ 8006ac8 <findSilo+0x2d8>
 80068dc:	ec43 2b10 	vmov	d0, r2, r3
 80068e0:	f7ff f976 	bl	8005bd0 <PID_controller>
 80068e4:	ed87 0b04 	vstr	d0, [r7, #16]
    double Vy = PID_controller(ySILO, 0, 1);
 80068e8:	6a38      	ldr	r0, [r7, #32]
 80068ea:	f7f9 fe1b 	bl	8000524 <__aeabi_i2d>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	2001      	movs	r0, #1
 80068f4:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8006ac8 <findSilo+0x2d8>
 80068f8:	ec43 2b10 	vmov	d0, r2, r3
 80068fc:	f7ff f968 	bl	8005bd0 <PID_controller>
 8006900:	ed87 0b02 	vstr	d0, [r7, #8]
    double W = PID_controllerH(siloAngle, 0);
 8006904:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006906:	f7f9 fe0d 	bl	8000524 <__aeabi_i2d>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 8006ac8 <findSilo+0x2d8>
 8006912:	ec43 2b10 	vmov	d0, r2, r3
 8006916:	f7ff fd47 	bl	80063a8 <PID_controllerH>
 800691a:	ed87 0b00 	vstr	d0, [r7]

    if (siloAngle != 0 && siloDistance != 0)
 800691e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006920:	2b00      	cmp	r3, #0
 8006922:	d069      	beq.n	80069f8 <findSilo+0x208>
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d066      	beq.n	80069f8 <findSilo+0x208>
    {
    	lastxSilo = xSILO;
 800692a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800692c:	f7f9 fdfa 	bl	8000524 <__aeabi_i2d>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	496a      	ldr	r1, [pc, #424]	@ (8006ae0 <findSilo+0x2f0>)
 8006936:	e9c1 2300 	strd	r2, r3, [r1]
    	lastySilo = ySILO;
 800693a:	6a38      	ldr	r0, [r7, #32]
 800693c:	f7f9 fdf2 	bl	8000524 <__aeabi_i2d>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4967      	ldr	r1, [pc, #412]	@ (8006ae4 <findSilo+0x2f4>)
 8006946:	e9c1 2300 	strd	r2, r3, [r1]
    	lastSiloAngle = siloAngle;
 800694a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800694c:	f7f9 fdea 	bl	8000524 <__aeabi_i2d>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4964      	ldr	r1, [pc, #400]	@ (8006ae8 <findSilo+0x2f8>)
 8006956:	e9c1 2300 	strd	r2, r3, [r1]

    	W = PID_controllerH(siloAngle, 0.0);
 800695a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800695c:	f7f9 fde2 	bl	8000524 <__aeabi_i2d>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8006ac8 <findSilo+0x2d8>
 8006968:	ec43 2b10 	vmov	d0, r2, r3
 800696c:	f7ff fd1c 	bl	80063a8 <PID_controllerH>
 8006970:	ed87 0b00 	vstr	d0, [r7]
    	setMotorSpeed(5, -500);
 8006974:	ed9f 0b56 	vldr	d0, [pc, #344]	@ 8006ad0 <findSilo+0x2e0>
 8006978:	2005      	movs	r0, #5
 800697a:	f7fa fb6f 	bl	800105c <setMotorSpeed>
        if(abs(siloAngle) < 20)
 800697e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006980:	f113 0f13 	cmn.w	r3, #19
 8006984:	db0a      	blt.n	800699c <findSilo+0x1ac>
 8006986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006988:	2b13      	cmp	r3, #19
 800698a:	dc07      	bgt.n	800699c <findSilo+0x1ac>
        {
        	start(0, 1600, 0, 4);
 800698c:	2304      	movs	r3, #4
 800698e:	2200      	movs	r2, #0
 8006990:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8006994:	2000      	movs	r0, #0
 8006996:	f7fb f863 	bl	8001a60 <start>
        if(abs(siloAngle) < 20)
 800699a:	e101      	b.n	8006ba0 <findSilo+0x3b0>
        }
        else
        {
        	if(timer - lastTime >= 1000)
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069a6:	f0c0 80fb 	bcc.w	8006ba0 <findSilo+0x3b0>
        	{
            	lastTime = timer;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	61bb      	str	r3, [r7, #24]
            	if(motorCorrWithSilo)
 80069ae:	4b4f      	ldr	r3, [pc, #316]	@ (8006aec <findSilo+0x2fc>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d012      	beq.n	80069dc <findSilo+0x1ec>
            	{
                	putar(0, 0, W);
 80069b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ba:	f7fa f8cd 	bl	8000b58 <__aeabi_d2iz>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	2100      	movs	r1, #0
 80069c4:	2000      	movs	r0, #0
 80069c6:	f7fa fe07 	bl	80015d8 <putar>
                	setMotorSpeed(5, 0);
 80069ca:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8006ac8 <findSilo+0x2d8>
 80069ce:	2005      	movs	r0, #5
 80069d0:	f7fa fb44 	bl	800105c <setMotorSpeed>
                	motorCorrWithSilo = false;
 80069d4:	4b45      	ldr	r3, [pc, #276]	@ (8006aec <findSilo+0x2fc>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
        if(abs(siloAngle) < 20)
 80069da:	e0e1      	b.n	8006ba0 <findSilo+0x3b0>
            	}
            	else
            	{
                	putar(0, 0, 0);
 80069dc:	2200      	movs	r2, #0
 80069de:	2100      	movs	r1, #0
 80069e0:	2000      	movs	r0, #0
 80069e2:	f7fa fdf9 	bl	80015d8 <putar>
                	setMotorSpeed(5, 0);
 80069e6:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8006ac8 <findSilo+0x2d8>
 80069ea:	2005      	movs	r0, #5
 80069ec:	f7fa fb36 	bl	800105c <setMotorSpeed>
                	motorCorrWithSilo = true;
 80069f0:	4b3e      	ldr	r3, [pc, #248]	@ (8006aec <findSilo+0x2fc>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
        if(abs(siloAngle) < 20)
 80069f6:	e0d3      	b.n	8006ba0 <findSilo+0x3b0>
        	}
        }
    }
    else
    {
        Vx = PID_controller(lastxSilo, 0, 1);
 80069f8:	4b39      	ldr	r3, [pc, #228]	@ (8006ae0 <findSilo+0x2f0>)
 80069fa:	ed93 7b00 	vldr	d7, [r3]
 80069fe:	2001      	movs	r0, #1
 8006a00:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 8006ac8 <findSilo+0x2d8>
 8006a04:	eeb0 0a47 	vmov.f32	s0, s14
 8006a08:	eef0 0a67 	vmov.f32	s1, s15
 8006a0c:	f7ff f8e0 	bl	8005bd0 <PID_controller>
 8006a10:	ed87 0b04 	vstr	d0, [r7, #16]
        Vy = PID_controller(lastySilo, 0, 1);
 8006a14:	4b33      	ldr	r3, [pc, #204]	@ (8006ae4 <findSilo+0x2f4>)
 8006a16:	ed93 7b00 	vldr	d7, [r3]
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8006ac8 <findSilo+0x2d8>
 8006a20:	eeb0 0a47 	vmov.f32	s0, s14
 8006a24:	eef0 0a67 	vmov.f32	s1, s15
 8006a28:	f7ff f8d2 	bl	8005bd0 <PID_controller>
 8006a2c:	ed87 0b02 	vstr	d0, [r7, #8]
        W = PID_controllerH(lastSiloAngle, 0.0);
 8006a30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ae8 <findSilo+0x2f8>)
 8006a32:	ed93 7b00 	vldr	d7, [r3]
 8006a36:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8006ac8 <findSilo+0x2d8>
 8006a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8006a3e:	eef0 0a67 	vmov.f32	s1, s15
 8006a42:	f7ff fcb1 	bl	80063a8 <PID_controllerH>
 8006a46:	ed87 0b00 	vstr	d0, [r7]

        if(abs(lastSiloAngle) >= 10)
 8006a4a:	4b27      	ldr	r3, [pc, #156]	@ (8006ae8 <findSilo+0x2f8>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	4610      	mov	r0, r2
 8006a52:	4619      	mov	r1, r3
 8006a54:	f7fa f880 	bl	8000b58 <__aeabi_d2iz>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bfb8      	it	lt
 8006a5e:	425b      	neglt	r3, r3
 8006a60:	2b09      	cmp	r3, #9
 8006a62:	dd47      	ble.n	8006af4 <findSilo+0x304>
        {
        	if(timer - lastTime >= 1000)
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a6e:	f0c0 8098 	bcc.w	8006ba2 <findSilo+0x3b2>
        	{
            	lastTime = timer;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	61bb      	str	r3, [r7, #24]
            	if(motorCorrWithoutSilo)
 8006a76:	4b1e      	ldr	r3, [pc, #120]	@ (8006af0 <findSilo+0x300>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d012      	beq.n	8006aa4 <findSilo+0x2b4>
            	{
                	setMotorSpeed(5, 0);
 8006a7e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8006ac8 <findSilo+0x2d8>
 8006a82:	2005      	movs	r0, #5
 8006a84:	f7fa faea 	bl	800105c <setMotorSpeed>
                	putar(0, 0, W);
 8006a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8c:	f7fa f864 	bl	8000b58 <__aeabi_d2iz>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	2100      	movs	r1, #0
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7fa fd9e 	bl	80015d8 <putar>
                	motorCorrWithoutSilo = false;
 8006a9c:	4b14      	ldr	r3, [pc, #80]	@ (8006af0 <findSilo+0x300>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	701a      	strb	r2, [r3, #0]
                	motorState = true;
        		}
        	}
        }
    }
}
 8006aa2:	e07e      	b.n	8006ba2 <findSilo+0x3b2>
                	setMotorSpeed(5, 0);
 8006aa4:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8006ac8 <findSilo+0x2d8>
 8006aa8:	2005      	movs	r0, #5
 8006aaa:	f7fa fad7 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 0);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f7fa fd90 	bl	80015d8 <putar>
                	motorCorrWithoutSilo = true;
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8006af0 <findSilo+0x300>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
}
 8006abe:	e070      	b.n	8006ba2 <findSilo+0x3b2>
 8006ac0:	54442d18 	.word	0x54442d18
 8006ac4:	400921fb 	.word	0x400921fb
	...
 8006ad4:	c07f4000 	.word	0xc07f4000
 8006ad8:	20000544 	.word	0x20000544
 8006adc:	40668000 	.word	0x40668000
 8006ae0:	20000610 	.word	0x20000610
 8006ae4:	20000618 	.word	0x20000618
 8006ae8:	20000620 	.word	0x20000620
 8006aec:	20000628 	.word	0x20000628
 8006af0:	20000629 	.word	0x20000629
        else if(lastSiloAngle != 0 && abs(lastSiloAngle) < 10)
 8006af4:	4b32      	ldr	r3, [pc, #200]	@ (8006bc0 <findSilo+0x3d0>)
 8006af6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	f7f9 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d121      	bne.n	8006b50 <findSilo+0x360>
 8006b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc0 <findSilo+0x3d0>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	4610      	mov	r0, r2
 8006b14:	4619      	mov	r1, r3
 8006b16:	f7fa f81f 	bl	8000b58 <__aeabi_d2iz>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f113 0f09 	cmn.w	r3, #9
 8006b20:	db16      	blt.n	8006b50 <findSilo+0x360>
 8006b22:	4b27      	ldr	r3, [pc, #156]	@ (8006bc0 <findSilo+0x3d0>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	f7fa f814 	bl	8000b58 <__aeabi_d2iz>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	dc0c      	bgt.n	8006b50 <findSilo+0x360>
        	setMotorSpeed(5, -500);
 8006b36:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8006bb0 <findSilo+0x3c0>
 8006b3a:	2005      	movs	r0, #5
 8006b3c:	f7fa fa8e 	bl	800105c <setMotorSpeed>
        	start(0, 1600, 0, 4);
 8006b40:	2304      	movs	r3, #4
 8006b42:	2200      	movs	r2, #0
 8006b44:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7fa ff89 	bl	8001a60 <start>
 8006b4e:	e028      	b.n	8006ba2 <findSilo+0x3b2>
        	if(timer - lastTime >= 1000)
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b5a:	d322      	bcc.n	8006ba2 <findSilo+0x3b2>
        		lastTime = timer;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	61bb      	str	r3, [r7, #24]
        		if(motorState)
 8006b60:	4b18      	ldr	r3, [pc, #96]	@ (8006bc4 <findSilo+0x3d4>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00d      	beq.n	8006b84 <findSilo+0x394>
                	setMotorSpeed(5, 0);
 8006b68:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8006bb8 <findSilo+0x3c8>
 8006b6c:	2005      	movs	r0, #5
 8006b6e:	f7fa fa75 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 75);
 8006b72:	224b      	movs	r2, #75	@ 0x4b
 8006b74:	2100      	movs	r1, #0
 8006b76:	2000      	movs	r0, #0
 8006b78:	f7fa fd2e 	bl	80015d8 <putar>
                	motorState = false;
 8006b7c:	4b11      	ldr	r3, [pc, #68]	@ (8006bc4 <findSilo+0x3d4>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	701a      	strb	r2, [r3, #0]
}
 8006b82:	e00e      	b.n	8006ba2 <findSilo+0x3b2>
                	setMotorSpeed(5, 0);
 8006b84:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8006bb8 <findSilo+0x3c8>
 8006b88:	2005      	movs	r0, #5
 8006b8a:	f7fa fa67 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 0);
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	2000      	movs	r0, #0
 8006b94:	f7fa fd20 	bl	80015d8 <putar>
                	motorState = true;
 8006b98:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc4 <findSilo+0x3d4>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
}
 8006b9e:	e000      	b.n	8006ba2 <findSilo+0x3b2>
        if(abs(siloAngle) < 20)
 8006ba0:	bf00      	nop
}
 8006ba2:	bf00      	nop
 8006ba4:	3730      	adds	r7, #48	@ 0x30
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	c07f4000 	.word	0xc07f4000
	...
 8006bc0:	20000620 	.word	0x20000620
 8006bc4:	2000062a 	.word	0x2000062a

08006bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	4b10      	ldr	r3, [pc, #64]	@ (8006c14 <HAL_MspInit+0x4c>)
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8006c14 <HAL_MspInit+0x4c>)
 8006bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <HAL_MspInit+0x4c>)
 8006be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006be6:	607b      	str	r3, [r7, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bea:	2300      	movs	r3, #0
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <HAL_MspInit+0x4c>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	4a08      	ldr	r2, [pc, #32]	@ (8006c14 <HAL_MspInit+0x4c>)
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bfa:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <HAL_MspInit+0x4c>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006c06:	2007      	movs	r0, #7
 8006c08:	f000 fcd0 	bl	80075ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40023800 	.word	0x40023800

08006c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	@ 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c20:	f107 0314 	add.w	r3, r7, #20
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a19      	ldr	r2, [pc, #100]	@ (8006c9c <HAL_I2C_MspInit+0x84>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d12c      	bne.n	8006c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ca0 <HAL_I2C_MspInit+0x88>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c42:	4a17      	ldr	r2, [pc, #92]	@ (8006ca0 <HAL_I2C_MspInit+0x88>)
 8006c44:	f043 0302 	orr.w	r3, r3, #2
 8006c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c4a:	4b15      	ldr	r3, [pc, #84]	@ (8006ca0 <HAL_I2C_MspInit+0x88>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006c56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c5c:	2312      	movs	r3, #18
 8006c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c64:	2303      	movs	r3, #3
 8006c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006c68:	2304      	movs	r3, #4
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c6c:	f107 0314 	add.w	r3, r7, #20
 8006c70:	4619      	mov	r1, r3
 8006c72:	480c      	ldr	r0, [pc, #48]	@ (8006ca4 <HAL_I2C_MspInit+0x8c>)
 8006c74:	f000 fd6e 	bl	8007754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ca0 <HAL_I2C_MspInit+0x88>)
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c80:	4a07      	ldr	r2, [pc, #28]	@ (8006ca0 <HAL_I2C_MspInit+0x88>)
 8006c82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c88:	4b05      	ldr	r3, [pc, #20]	@ (8006ca0 <HAL_I2C_MspInit+0x88>)
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006c94:	bf00      	nop
 8006c96:	3728      	adds	r7, #40	@ 0x28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40005800 	.word	0x40005800
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	40020400 	.word	0x40020400

08006ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d60 <HAL_TIM_Base_MspInit+0xb8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d116      	bne.n	8006ce8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	4b29      	ldr	r3, [pc, #164]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc2:	4a28      	ldr	r2, [pc, #160]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cca:	4b26      	ldr	r3, [pc, #152]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	201b      	movs	r0, #27
 8006cdc:	f000 fc71 	bl	80075c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006ce0:	201b      	movs	r0, #27
 8006ce2:	f000 fc8a 	bl	80075fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006ce6:	e036      	b.n	8006d56 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf0:	d116      	bne.n	8006d20 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d02:	4b18      	ldr	r3, [pc, #96]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2100      	movs	r1, #0
 8006d12:	201c      	movs	r0, #28
 8006d14:	f000 fc55 	bl	80075c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006d18:	201c      	movs	r0, #28
 8006d1a:	f000 fc6e 	bl	80075fa <HAL_NVIC_EnableIRQ>
}
 8006d1e:	e01a      	b.n	8006d56 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a10      	ldr	r2, [pc, #64]	@ (8006d68 <HAL_TIM_Base_MspInit+0xc0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d115      	bne.n	8006d56 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	4a0c      	ldr	r2, [pc, #48]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006d34:	f043 0302 	orr.w	r3, r3, #2
 8006d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <HAL_TIM_Base_MspInit+0xbc>)
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8006d46:	2200      	movs	r2, #0
 8006d48:	2100      	movs	r1, #0
 8006d4a:	202e      	movs	r0, #46	@ 0x2e
 8006d4c:	f000 fc39 	bl	80075c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006d50:	202e      	movs	r0, #46	@ 0x2e
 8006d52:	f000 fc52 	bl	80075fa <HAL_NVIC_EnableIRQ>
}
 8006d56:	bf00      	nop
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40023800 	.word	0x40023800
 8006d68:	40010400 	.word	0x40010400

08006d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	@ 0x28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d74:	f107 0314 	add.w	r3, r7, #20
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	605a      	str	r2, [r3, #4]
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a37      	ldr	r2, [pc, #220]	@ (8006e68 <HAL_TIM_MspPostInit+0xfc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d11f      	bne.n	8006dce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	4b36      	ldr	r3, [pc, #216]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	4a35      	ldr	r2, [pc, #212]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006d98:	f043 0310 	orr.w	r3, r3, #16
 8006d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d9e:	4b33      	ldr	r3, [pc, #204]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8006daa:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8006dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006db0:	2312      	movs	r3, #18
 8006db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006db4:	2302      	movs	r3, #2
 8006db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db8:	2303      	movs	r3, #3
 8006dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	482a      	ldr	r0, [pc, #168]	@ (8006e70 <HAL_TIM_MspPostInit+0x104>)
 8006dc8:	f000 fcc4 	bl	8007754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006dcc:	e047      	b.n	8006e5e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd6:	d11e      	bne.n	8006e16 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	4b23      	ldr	r3, [pc, #140]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de0:	4a22      	ldr	r2, [pc, #136]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006de8:	4b20      	ldr	r3, [pc, #128]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006df4:	230c      	movs	r3, #12
 8006df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006df8:	2312      	movs	r3, #18
 8006dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e00:	2303      	movs	r3, #3
 8006e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006e04:	2301      	movs	r3, #1
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e08:	f107 0314 	add.w	r3, r7, #20
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4819      	ldr	r0, [pc, #100]	@ (8006e74 <HAL_TIM_MspPostInit+0x108>)
 8006e10:	f000 fca0 	bl	8007754 <HAL_GPIO_Init>
}
 8006e14:	e023      	b.n	8006e5e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	@ (8006e78 <HAL_TIM_MspPostInit+0x10c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d11e      	bne.n	8006e5e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e20:	2300      	movs	r3, #0
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	4b11      	ldr	r3, [pc, #68]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e28:	4a10      	ldr	r2, [pc, #64]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006e2a:	f043 0304 	orr.w	r3, r3, #4
 8006e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e30:	4b0e      	ldr	r3, [pc, #56]	@ (8006e6c <HAL_TIM_MspPostInit+0x100>)
 8006e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006e3c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e42:	2312      	movs	r3, #18
 8006e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e46:	2302      	movs	r3, #2
 8006e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e52:	f107 0314 	add.w	r3, r7, #20
 8006e56:	4619      	mov	r1, r3
 8006e58:	4808      	ldr	r0, [pc, #32]	@ (8006e7c <HAL_TIM_MspPostInit+0x110>)
 8006e5a:	f000 fc7b 	bl	8007754 <HAL_GPIO_Init>
}
 8006e5e:	bf00      	nop
 8006e60:	3728      	adds	r7, #40	@ 0x28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40021000 	.word	0x40021000
 8006e74:	40020000 	.word	0x40020000
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40020800 	.word	0x40020800

08006e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08c      	sub	sp, #48	@ 0x30
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e88:	f107 031c 	add.w	r3, r7, #28
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	60da      	str	r2, [r3, #12]
 8006e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a3a      	ldr	r2, [pc, #232]	@ (8006f88 <HAL_UART_MspInit+0x108>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d134      	bne.n	8006f0c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	4b39      	ldr	r3, [pc, #228]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eaa:	4a38      	ldr	r2, [pc, #224]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006eac:	f043 0310 	orr.w	r3, r3, #16
 8006eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006eb2:	4b36      	ldr	r3, [pc, #216]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	4b32      	ldr	r3, [pc, #200]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	4a31      	ldr	r2, [pc, #196]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ece:	4b2f      	ldr	r3, [pc, #188]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006eda:	23c0      	movs	r3, #192	@ 0xc0
 8006edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006eea:	2307      	movs	r3, #7
 8006eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eee:	f107 031c 	add.w	r3, r7, #28
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4826      	ldr	r0, [pc, #152]	@ (8006f90 <HAL_UART_MspInit+0x110>)
 8006ef6:	f000 fc2d 	bl	8007754 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006efa:	2200      	movs	r2, #0
 8006efc:	2100      	movs	r1, #0
 8006efe:	2025      	movs	r0, #37	@ 0x25
 8006f00:	f000 fb5f 	bl	80075c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006f04:	2025      	movs	r0, #37	@ 0x25
 8006f06:	f000 fb78 	bl	80075fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006f0a:	e038      	b.n	8006f7e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a20      	ldr	r2, [pc, #128]	@ (8006f94 <HAL_UART_MspInit+0x114>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d133      	bne.n	8006f7e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f26:	4b19      	ldr	r3, [pc, #100]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	4b15      	ldr	r3, [pc, #84]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	4a14      	ldr	r2, [pc, #80]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006f3c:	f043 0308 	orr.w	r3, r3, #8
 8006f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f42:	4b12      	ldr	r3, [pc, #72]	@ (8006f8c <HAL_UART_MspInit+0x10c>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006f4e:	2360      	movs	r3, #96	@ 0x60
 8006f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f52:	2302      	movs	r3, #2
 8006f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f5e:	2307      	movs	r3, #7
 8006f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f62:	f107 031c 	add.w	r3, r7, #28
 8006f66:	4619      	mov	r1, r3
 8006f68:	480b      	ldr	r0, [pc, #44]	@ (8006f98 <HAL_UART_MspInit+0x118>)
 8006f6a:	f000 fbf3 	bl	8007754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2100      	movs	r1, #0
 8006f72:	2026      	movs	r0, #38	@ 0x26
 8006f74:	f000 fb25 	bl	80075c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006f78:	2026      	movs	r0, #38	@ 0x26
 8006f7a:	f000 fb3e 	bl	80075fa <HAL_NVIC_EnableIRQ>
}
 8006f7e:	bf00      	nop
 8006f80:	3730      	adds	r7, #48	@ 0x30
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40011000 	.word	0x40011000
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40020400 	.word	0x40020400
 8006f94:	40004400 	.word	0x40004400
 8006f98:	40020c00 	.word	0x40020c00

08006f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <NMI_Handler+0x4>

08006fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <HardFault_Handler+0x4>

08006fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <MemManage_Handler+0x4>

08006fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <BusFault_Handler+0x4>

08006fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <UsageFault_Handler+0x4>

08006fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fd6:	bf00      	nop
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006fe4:	bf00      	nop
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ff2:	f000 f9c7 	bl	8007384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8006ffe:	2001      	movs	r0, #1
 8007000:	f000 fd76 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007004:	bf00      	nop
 8007006:	bd80      	pop	{r7, pc}

08007008 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 800700c:	2002      	movs	r0, #2
 800700e:	f000 fd6f 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}

08007016 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 800701a:	2004      	movs	r0, #4
 800701c:	f000 fd68 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007020:	bf00      	nop
 8007022:	bd80      	pop	{r7, pc}

08007024 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8007028:	2008      	movs	r0, #8
 800702a:	f000 fd61 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800702e:	bf00      	nop
 8007030:	bd80      	pop	{r7, pc}

08007032 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 8007036:	2020      	movs	r0, #32
 8007038:	f000 fd5a 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 800703c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007040:	f000 fd56 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007044:	bf00      	nop
 8007046:	bd80      	pop	{r7, pc}

08007048 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800704c:	4802      	ldr	r0, [pc, #8]	@ (8007058 <TIM1_CC_IRQHandler+0x10>)
 800704e:	f002 f85b 	bl	8009108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8007052:	bf00      	nop
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000338 	.word	0x20000338

0800705c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007060:	4802      	ldr	r0, [pc, #8]	@ (800706c <TIM2_IRQHandler+0x10>)
 8007062:	f002 f851 	bl	8009108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007066:	bf00      	nop
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000380 	.word	0x20000380

08007070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007074:	4802      	ldr	r0, [pc, #8]	@ (8007080 <USART1_IRQHandler+0x10>)
 8007076:	f002 ff67 	bl	8009f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000410 	.word	0x20000410

08007084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007088:	4802      	ldr	r0, [pc, #8]	@ (8007094 <USART2_IRQHandler+0x10>)
 800708a:	f002 ff5d 	bl	8009f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800708e:	bf00      	nop
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000458 	.word	0x20000458

08007098 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 800709c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80070a0:	f000 fd26 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80070a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80070a8:	f000 fd22 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 80070ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80070b0:	f000 fd1e 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 80070b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80070b8:	f000 fd1a 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 80070bc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80070c0:	f000 fd16 	bl	8007af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80070c4:	bf00      	nop
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80070cc:	4802      	ldr	r0, [pc, #8]	@ (80070d8 <TIM8_CC_IRQHandler+0x10>)
 80070ce:	f002 f81b 	bl	8009108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80070d2:	bf00      	nop
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	200003c8 	.word	0x200003c8

080070dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  return 1;
 80070e0:	2301      	movs	r3, #1
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <_kill>:

int _kill(int pid, int sig)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80070f6:	f005 fd19 	bl	800cb2c <__errno>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2216      	movs	r2, #22
 80070fe:	601a      	str	r2, [r3, #0]
  return -1;
 8007100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <_exit>:

void _exit (int status)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007114:	f04f 31ff 	mov.w	r1, #4294967295
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff ffe7 	bl	80070ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <_exit+0x12>

08007122 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b086      	sub	sp, #24
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	e00a      	b.n	800714a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007134:	f3af 8000 	nop.w
 8007138:	4601      	mov	r1, r0
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	60ba      	str	r2, [r7, #8]
 8007140:	b2ca      	uxtb	r2, r1
 8007142:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	3301      	adds	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	429a      	cmp	r2, r3
 8007150:	dbf0      	blt.n	8007134 <_read+0x12>
  }

  return len;
 8007152:	687b      	ldr	r3, [r7, #4]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	e009      	b.n	8007182 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	60ba      	str	r2, [r7, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4618      	mov	r0, r3
 8007178:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	3301      	adds	r3, #1
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	dbf1      	blt.n	800716e <_write+0x12>
  }
  return len;
 800718a:	687b      	ldr	r3, [r7, #4]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <_close>:

int _close(int file)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80071bc:	605a      	str	r2, [r3, #4]
  return 0;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <_isatty>:

int _isatty(int file)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80071d4:	2301      	movs	r3, #1
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007204:	4a14      	ldr	r2, [pc, #80]	@ (8007258 <_sbrk+0x5c>)
 8007206:	4b15      	ldr	r3, [pc, #84]	@ (800725c <_sbrk+0x60>)
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007210:	4b13      	ldr	r3, [pc, #76]	@ (8007260 <_sbrk+0x64>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007218:	4b11      	ldr	r3, [pc, #68]	@ (8007260 <_sbrk+0x64>)
 800721a:	4a12      	ldr	r2, [pc, #72]	@ (8007264 <_sbrk+0x68>)
 800721c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800721e:	4b10      	ldr	r3, [pc, #64]	@ (8007260 <_sbrk+0x64>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	429a      	cmp	r2, r3
 800722a:	d207      	bcs.n	800723c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800722c:	f005 fc7e 	bl	800cb2c <__errno>
 8007230:	4603      	mov	r3, r0
 8007232:	220c      	movs	r2, #12
 8007234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
 800723a:	e009      	b.n	8007250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800723c:	4b08      	ldr	r3, [pc, #32]	@ (8007260 <_sbrk+0x64>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007242:	4b07      	ldr	r3, [pc, #28]	@ (8007260 <_sbrk+0x64>)
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4413      	add	r3, r2
 800724a:	4a05      	ldr	r2, [pc, #20]	@ (8007260 <_sbrk+0x64>)
 800724c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800724e:	68fb      	ldr	r3, [r7, #12]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20020000 	.word	0x20020000
 800725c:	00000400 	.word	0x00000400
 8007260:	2000062c 	.word	0x2000062c
 8007264:	20000780 	.word	0x20000780

08007268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800726c:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <SystemInit+0x20>)
 800726e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007272:	4a05      	ldr	r2, [pc, #20]	@ (8007288 <SystemInit+0x20>)
 8007274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	e000ed00 	.word	0xe000ed00

0800728c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800728c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80072c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007290:	f7ff ffea 	bl	8007268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007294:	480c      	ldr	r0, [pc, #48]	@ (80072c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007296:	490d      	ldr	r1, [pc, #52]	@ (80072cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007298:	4a0d      	ldr	r2, [pc, #52]	@ (80072d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800729a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800729c:	e002      	b.n	80072a4 <LoopCopyDataInit>

0800729e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800729e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072a2:	3304      	adds	r3, #4

080072a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072a8:	d3f9      	bcc.n	800729e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072aa:	4a0a      	ldr	r2, [pc, #40]	@ (80072d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80072ac:	4c0a      	ldr	r4, [pc, #40]	@ (80072d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80072ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072b0:	e001      	b.n	80072b6 <LoopFillZerobss>

080072b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072b4:	3204      	adds	r2, #4

080072b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072b8:	d3fb      	bcc.n	80072b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80072ba:	f005 fc3d 	bl	800cb38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072be:	f7fb ff5b 	bl	8003178 <main>
  bx  lr    
 80072c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80072c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80072c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072cc:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80072d0:	080118f8 	.word	0x080118f8
  ldr r2, =_sbss
 80072d4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80072d8:	20000780 	.word	0x20000780

080072dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072dc:	e7fe      	b.n	80072dc <ADC_IRQHandler>
	...

080072e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <HAL_Init+0x40>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007320 <HAL_Init+0x40>)
 80072ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <HAL_Init+0x40>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007320 <HAL_Init+0x40>)
 80072f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072fc:	4b08      	ldr	r3, [pc, #32]	@ (8007320 <HAL_Init+0x40>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a07      	ldr	r2, [pc, #28]	@ (8007320 <HAL_Init+0x40>)
 8007302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007308:	2003      	movs	r0, #3
 800730a:	f000 f94f 	bl	80075ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800730e:	2000      	movs	r0, #0
 8007310:	f000 f808 	bl	8007324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007314:	f7ff fc58 	bl	8006bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	40023c00 	.word	0x40023c00

08007324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800732c:	4b12      	ldr	r3, [pc, #72]	@ (8007378 <HAL_InitTick+0x54>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	4b12      	ldr	r3, [pc, #72]	@ (800737c <HAL_InitTick+0x58>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4619      	mov	r1, r3
 8007336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800733a:	fbb3 f3f1 	udiv	r3, r3, r1
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f967 	bl	8007616 <HAL_SYSTICK_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e00e      	b.n	8007370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b0f      	cmp	r3, #15
 8007356:	d80a      	bhi.n	800736e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007358:	2200      	movs	r2, #0
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	f000 f92f 	bl	80075c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007364:	4a06      	ldr	r2, [pc, #24]	@ (8007380 <HAL_InitTick+0x5c>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	e000      	b.n	8007370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200000e0 	.word	0x200000e0
 800737c:	200000e8 	.word	0x200000e8
 8007380:	200000e4 	.word	0x200000e4

08007384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007388:	4b06      	ldr	r3, [pc, #24]	@ (80073a4 <HAL_IncTick+0x20>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <HAL_IncTick+0x24>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4413      	add	r3, r2
 8007394:	4a04      	ldr	r2, [pc, #16]	@ (80073a8 <HAL_IncTick+0x24>)
 8007396:	6013      	str	r3, [r2, #0]
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	200000e8 	.word	0x200000e8
 80073a8:	20000630 	.word	0x20000630

080073ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return uwTick;
 80073b0:	4b03      	ldr	r3, [pc, #12]	@ (80073c0 <HAL_GetTick+0x14>)
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000630 	.word	0x20000630

080073c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073cc:	f7ff ffee 	bl	80073ac <HAL_GetTick>
 80073d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d005      	beq.n	80073ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073de:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <HAL_Delay+0x44>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80073ea:	bf00      	nop
 80073ec:	f7ff ffde 	bl	80073ac <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d8f7      	bhi.n	80073ec <HAL_Delay+0x28>
  {
  }
}
 80073fc:	bf00      	nop
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200000e8 	.word	0x200000e8

0800740c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800741c:	4b0c      	ldr	r3, [pc, #48]	@ (8007450 <__NVIC_SetPriorityGrouping+0x44>)
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007428:	4013      	ands	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800743c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800743e:	4a04      	ldr	r2, [pc, #16]	@ (8007450 <__NVIC_SetPriorityGrouping+0x44>)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	60d3      	str	r3, [r2, #12]
}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	e000ed00 	.word	0xe000ed00

08007454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007458:	4b04      	ldr	r3, [pc, #16]	@ (800746c <__NVIC_GetPriorityGrouping+0x18>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	0a1b      	lsrs	r3, r3, #8
 800745e:	f003 0307 	and.w	r3, r3, #7
}
 8007462:	4618      	mov	r0, r3
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	e000ed00 	.word	0xe000ed00

08007470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800747a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800747e:	2b00      	cmp	r3, #0
 8007480:	db0b      	blt.n	800749a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	f003 021f 	and.w	r2, r3, #31
 8007488:	4907      	ldr	r1, [pc, #28]	@ (80074a8 <__NVIC_EnableIRQ+0x38>)
 800748a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800748e:	095b      	lsrs	r3, r3, #5
 8007490:	2001      	movs	r0, #1
 8007492:	fa00 f202 	lsl.w	r2, r0, r2
 8007496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	e000e100 	.word	0xe000e100

080074ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	db0a      	blt.n	80074d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	490c      	ldr	r1, [pc, #48]	@ (80074f8 <__NVIC_SetPriority+0x4c>)
 80074c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ca:	0112      	lsls	r2, r2, #4
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	440b      	add	r3, r1
 80074d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074d4:	e00a      	b.n	80074ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4908      	ldr	r1, [pc, #32]	@ (80074fc <__NVIC_SetPriority+0x50>)
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	3b04      	subs	r3, #4
 80074e4:	0112      	lsls	r2, r2, #4
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	440b      	add	r3, r1
 80074ea:	761a      	strb	r2, [r3, #24]
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	e000e100 	.word	0xe000e100
 80074fc:	e000ed00 	.word	0xe000ed00

08007500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007500:	b480      	push	{r7}
 8007502:	b089      	sub	sp, #36	@ 0x24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f1c3 0307 	rsb	r3, r3, #7
 800751a:	2b04      	cmp	r3, #4
 800751c:	bf28      	it	cs
 800751e:	2304      	movcs	r3, #4
 8007520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	3304      	adds	r3, #4
 8007526:	2b06      	cmp	r3, #6
 8007528:	d902      	bls.n	8007530 <NVIC_EncodePriority+0x30>
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3b03      	subs	r3, #3
 800752e:	e000      	b.n	8007532 <NVIC_EncodePriority+0x32>
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007534:	f04f 32ff 	mov.w	r2, #4294967295
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43da      	mvns	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	401a      	ands	r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007548:	f04f 31ff 	mov.w	r1, #4294967295
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	fa01 f303 	lsl.w	r3, r1, r3
 8007552:	43d9      	mvns	r1, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007558:	4313      	orrs	r3, r2
         );
}
 800755a:	4618      	mov	r0, r3
 800755c:	3724      	adds	r7, #36	@ 0x24
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3b01      	subs	r3, #1
 8007574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007578:	d301      	bcc.n	800757e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800757a:	2301      	movs	r3, #1
 800757c:	e00f      	b.n	800759e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800757e:	4a0a      	ldr	r2, [pc, #40]	@ (80075a8 <SysTick_Config+0x40>)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3b01      	subs	r3, #1
 8007584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007586:	210f      	movs	r1, #15
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	f7ff ff8e 	bl	80074ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007590:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <SysTick_Config+0x40>)
 8007592:	2200      	movs	r2, #0
 8007594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007596:	4b04      	ldr	r3, [pc, #16]	@ (80075a8 <SysTick_Config+0x40>)
 8007598:	2207      	movs	r2, #7
 800759a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	e000e010 	.word	0xe000e010

080075ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ff29 	bl	800740c <__NVIC_SetPriorityGrouping>
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	4603      	mov	r3, r0
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075d4:	f7ff ff3e 	bl	8007454 <__NVIC_GetPriorityGrouping>
 80075d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	f7ff ff8e 	bl	8007500 <NVIC_EncodePriority>
 80075e4:	4602      	mov	r2, r0
 80075e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff ff5d 	bl	80074ac <__NVIC_SetPriority>
}
 80075f2:	bf00      	nop
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	4603      	mov	r3, r0
 8007602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff ff31 	bl	8007470 <__NVIC_EnableIRQ>
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff ffa2 	bl	8007568 <SysTick_Config>
 8007624:	4603      	mov	r3, r0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800763c:	f7ff feb6 	bl	80073ac <HAL_GetTick>
 8007640:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d008      	beq.n	8007660 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2280      	movs	r2, #128	@ 0x80
 8007652:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e052      	b.n	8007706 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0216 	bic.w	r2, r2, #22
 800766e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695a      	ldr	r2, [r3, #20]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800767e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	2b00      	cmp	r3, #0
 8007686:	d103      	bne.n	8007690 <HAL_DMA_Abort+0x62>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0208 	bic.w	r2, r2, #8
 800769e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0201 	bic.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076b0:	e013      	b.n	80076da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076b2:	f7ff fe7b 	bl	80073ac <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b05      	cmp	r3, #5
 80076be:	d90c      	bls.n	80076da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2203      	movs	r2, #3
 80076ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e015      	b.n	8007706 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e4      	bne.n	80076b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ec:	223f      	movs	r2, #63	@ 0x3f
 80076ee:	409a      	lsls	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d004      	beq.n	800772c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2280      	movs	r2, #128	@ 0x80
 8007726:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e00c      	b.n	8007746 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2205      	movs	r2, #5
 8007730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0201 	bic.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	@ 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007762:	2300      	movs	r3, #0
 8007764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	e16b      	b.n	8007a48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007770:	2201      	movs	r2, #1
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4013      	ands	r3, r2
 8007782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	429a      	cmp	r2, r3
 800778a:	f040 815a 	bne.w	8007a42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b01      	cmp	r3, #1
 8007798:	d005      	beq.n	80077a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d130      	bne.n	8007808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	2203      	movs	r2, #3
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	43db      	mvns	r3, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4013      	ands	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077dc:	2201      	movs	r2, #1
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	091b      	lsrs	r3, r3, #4
 80077f2:	f003 0201 	and.w	r2, r3, #1
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	2b03      	cmp	r3, #3
 8007812:	d017      	beq.n	8007844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	2203      	movs	r2, #3
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	43db      	mvns	r3, r3
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d123      	bne.n	8007898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	08da      	lsrs	r2, r3, #3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3208      	adds	r2, #8
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	220f      	movs	r2, #15
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	43db      	mvns	r3, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4013      	ands	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	4313      	orrs	r3, r2
 8007888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	08da      	lsrs	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3208      	adds	r2, #8
 8007892:	69b9      	ldr	r1, [r7, #24]
 8007894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	2203      	movs	r2, #3
 80078a4:	fa02 f303 	lsl.w	r3, r2, r3
 80078a8:	43db      	mvns	r3, r3
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	4013      	ands	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f003 0203 	and.w	r2, r3, #3
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80b4 	beq.w	8007a42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	4b60      	ldr	r3, [pc, #384]	@ (8007a60 <HAL_GPIO_Init+0x30c>)
 80078e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e2:	4a5f      	ldr	r2, [pc, #380]	@ (8007a60 <HAL_GPIO_Init+0x30c>)
 80078e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80078ea:	4b5d      	ldr	r3, [pc, #372]	@ (8007a60 <HAL_GPIO_Init+0x30c>)
 80078ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078f6:	4a5b      	ldr	r2, [pc, #364]	@ (8007a64 <HAL_GPIO_Init+0x310>)
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	3302      	adds	r3, #2
 80078fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	220f      	movs	r2, #15
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a52      	ldr	r2, [pc, #328]	@ (8007a68 <HAL_GPIO_Init+0x314>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d02b      	beq.n	800797a <HAL_GPIO_Init+0x226>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a51      	ldr	r2, [pc, #324]	@ (8007a6c <HAL_GPIO_Init+0x318>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d025      	beq.n	8007976 <HAL_GPIO_Init+0x222>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a50      	ldr	r2, [pc, #320]	@ (8007a70 <HAL_GPIO_Init+0x31c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d01f      	beq.n	8007972 <HAL_GPIO_Init+0x21e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a4f      	ldr	r2, [pc, #316]	@ (8007a74 <HAL_GPIO_Init+0x320>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d019      	beq.n	800796e <HAL_GPIO_Init+0x21a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a4e      	ldr	r2, [pc, #312]	@ (8007a78 <HAL_GPIO_Init+0x324>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <HAL_GPIO_Init+0x216>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a4d      	ldr	r2, [pc, #308]	@ (8007a7c <HAL_GPIO_Init+0x328>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00d      	beq.n	8007966 <HAL_GPIO_Init+0x212>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a4c      	ldr	r2, [pc, #304]	@ (8007a80 <HAL_GPIO_Init+0x32c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d007      	beq.n	8007962 <HAL_GPIO_Init+0x20e>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a4b      	ldr	r2, [pc, #300]	@ (8007a84 <HAL_GPIO_Init+0x330>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d101      	bne.n	800795e <HAL_GPIO_Init+0x20a>
 800795a:	2307      	movs	r3, #7
 800795c:	e00e      	b.n	800797c <HAL_GPIO_Init+0x228>
 800795e:	2308      	movs	r3, #8
 8007960:	e00c      	b.n	800797c <HAL_GPIO_Init+0x228>
 8007962:	2306      	movs	r3, #6
 8007964:	e00a      	b.n	800797c <HAL_GPIO_Init+0x228>
 8007966:	2305      	movs	r3, #5
 8007968:	e008      	b.n	800797c <HAL_GPIO_Init+0x228>
 800796a:	2304      	movs	r3, #4
 800796c:	e006      	b.n	800797c <HAL_GPIO_Init+0x228>
 800796e:	2303      	movs	r3, #3
 8007970:	e004      	b.n	800797c <HAL_GPIO_Init+0x228>
 8007972:	2302      	movs	r3, #2
 8007974:	e002      	b.n	800797c <HAL_GPIO_Init+0x228>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <HAL_GPIO_Init+0x228>
 800797a:	2300      	movs	r3, #0
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	f002 0203 	and.w	r2, r2, #3
 8007982:	0092      	lsls	r2, r2, #2
 8007984:	4093      	lsls	r3, r2
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	4313      	orrs	r3, r2
 800798a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800798c:	4935      	ldr	r1, [pc, #212]	@ (8007a64 <HAL_GPIO_Init+0x310>)
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	089b      	lsrs	r3, r3, #2
 8007992:	3302      	adds	r3, #2
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800799a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	43db      	mvns	r3, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4013      	ands	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079be:	4a32      	ldr	r2, [pc, #200]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079c4:	4b30      	ldr	r3, [pc, #192]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079e8:	4a27      	ldr	r2, [pc, #156]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80079ee:	4b26      	ldr	r3, [pc, #152]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	43db      	mvns	r3, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4013      	ands	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a12:	4a1d      	ldr	r2, [pc, #116]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a18:	4b1b      	ldr	r3, [pc, #108]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a3c:	4a12      	ldr	r2, [pc, #72]	@ (8007a88 <HAL_GPIO_Init+0x334>)
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	3301      	adds	r3, #1
 8007a46:	61fb      	str	r3, [r7, #28]
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2b0f      	cmp	r3, #15
 8007a4c:	f67f ae90 	bls.w	8007770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	3724      	adds	r7, #36	@ 0x24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40023800 	.word	0x40023800
 8007a64:	40013800 	.word	0x40013800
 8007a68:	40020000 	.word	0x40020000
 8007a6c:	40020400 	.word	0x40020400
 8007a70:	40020800 	.word	0x40020800
 8007a74:	40020c00 	.word	0x40020c00
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	40021400 	.word	0x40021400
 8007a80:	40021800 	.word	0x40021800
 8007a84:	40021c00 	.word	0x40021c00
 8007a88:	40013c00 	.word	0x40013c00

08007a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691a      	ldr	r2, [r3, #16]
 8007a9c:	887b      	ldrh	r3, [r7, #2]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	73fb      	strb	r3, [r7, #15]
 8007aa8:	e001      	b.n	8007aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007acc:	787b      	ldrb	r3, [r7, #1]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ad2:	887a      	ldrh	r2, [r7, #2]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ad8:	e003      	b.n	8007ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ada:	887b      	ldrh	r3, [r7, #2]
 8007adc:	041a      	lsls	r2, r3, #16
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	619a      	str	r2, [r3, #24]
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007afa:	4b08      	ldr	r3, [pc, #32]	@ (8007b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	4013      	ands	r3, r2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d006      	beq.n	8007b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b06:	4a05      	ldr	r2, [pc, #20]	@ (8007b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fb f9a4 	bl	8002e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40013c00 	.word	0x40013c00

08007b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e12b      	b.n	8007d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff f866 	bl	8006c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2224      	movs	r2, #36	@ 0x24
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b84:	f001 f8da 	bl	8008d3c <HAL_RCC_GetPCLK1Freq>
 8007b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	4a81      	ldr	r2, [pc, #516]	@ (8007d94 <HAL_I2C_Init+0x274>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d807      	bhi.n	8007ba4 <HAL_I2C_Init+0x84>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4a80      	ldr	r2, [pc, #512]	@ (8007d98 <HAL_I2C_Init+0x278>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	bf94      	ite	ls
 8007b9c:	2301      	movls	r3, #1
 8007b9e:	2300      	movhi	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	e006      	b.n	8007bb2 <HAL_I2C_Init+0x92>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8007d9c <HAL_I2C_Init+0x27c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	bf94      	ite	ls
 8007bac:	2301      	movls	r3, #1
 8007bae:	2300      	movhi	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e0e7      	b.n	8007d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4a78      	ldr	r2, [pc, #480]	@ (8007da0 <HAL_I2C_Init+0x280>)
 8007bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc2:	0c9b      	lsrs	r3, r3, #18
 8007bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4a6a      	ldr	r2, [pc, #424]	@ (8007d94 <HAL_I2C_Init+0x274>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d802      	bhi.n	8007bf4 <HAL_I2C_Init+0xd4>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	e009      	b.n	8007c08 <HAL_I2C_Init+0xe8>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007bfa:	fb02 f303 	mul.w	r3, r2, r3
 8007bfe:	4a69      	ldr	r2, [pc, #420]	@ (8007da4 <HAL_I2C_Init+0x284>)
 8007c00:	fba2 2303 	umull	r2, r3, r2, r3
 8007c04:	099b      	lsrs	r3, r3, #6
 8007c06:	3301      	adds	r3, #1
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	495c      	ldr	r1, [pc, #368]	@ (8007d94 <HAL_I2C_Init+0x274>)
 8007c24:	428b      	cmp	r3, r1
 8007c26:	d819      	bhi.n	8007c5c <HAL_I2C_Init+0x13c>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	1e59      	subs	r1, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c36:	1c59      	adds	r1, r3, #1
 8007c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c3c:	400b      	ands	r3, r1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <HAL_I2C_Init+0x138>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1e59      	subs	r1, r3, #1
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c50:	3301      	adds	r3, #1
 8007c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c56:	e051      	b.n	8007cfc <HAL_I2C_Init+0x1dc>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	e04f      	b.n	8007cfc <HAL_I2C_Init+0x1dc>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d111      	bne.n	8007c88 <HAL_I2C_Init+0x168>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	1e58      	subs	r0, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6859      	ldr	r1, [r3, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	440b      	add	r3, r1
 8007c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c76:	3301      	adds	r3, #1
 8007c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	e012      	b.n	8007cae <HAL_I2C_Init+0x18e>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	1e58      	subs	r0, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6859      	ldr	r1, [r3, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	0099      	lsls	r1, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bf0c      	ite	eq
 8007ca8:	2301      	moveq	r3, #1
 8007caa:	2300      	movne	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_I2C_Init+0x196>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e022      	b.n	8007cfc <HAL_I2C_Init+0x1dc>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10e      	bne.n	8007cdc <HAL_I2C_Init+0x1bc>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1e58      	subs	r0, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6859      	ldr	r1, [r3, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	440b      	add	r3, r1
 8007ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cda:	e00f      	b.n	8007cfc <HAL_I2C_Init+0x1dc>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	1e58      	subs	r0, r3, #1
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6859      	ldr	r1, [r3, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	0099      	lsls	r1, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	6809      	ldr	r1, [r1, #0]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6911      	ldr	r1, [r2, #16]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	68d2      	ldr	r2, [r2, #12]
 8007d36:	4311      	orrs	r1, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	695a      	ldr	r2, [r3, #20]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	000186a0 	.word	0x000186a0
 8007d98:	001e847f 	.word	0x001e847f
 8007d9c:	003d08ff 	.word	0x003d08ff
 8007da0:	431bde83 	.word	0x431bde83
 8007da4:	10624dd3 	.word	0x10624dd3

08007da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	461a      	mov	r2, r3
 8007db4:	460b      	mov	r3, r1
 8007db6:	817b      	strh	r3, [r7, #10]
 8007db8:	4613      	mov	r3, r2
 8007dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dbc:	f7ff faf6 	bl	80073ac <HAL_GetTick>
 8007dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	f040 80e0 	bne.w	8007f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	2319      	movs	r3, #25
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	4970      	ldr	r1, [pc, #448]	@ (8007f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f964 	bl	80080a8 <I2C_WaitOnFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0d3      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_I2C_Master_Transmit+0x50>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e0cc      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d007      	beq.n	8007e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0201 	orr.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2221      	movs	r2, #33	@ 0x21
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	893a      	ldrh	r2, [r7, #8]
 8007e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a50      	ldr	r2, [pc, #320]	@ (8007fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8007e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e60:	8979      	ldrh	r1, [r7, #10]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a3a      	ldr	r2, [r7, #32]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f89c 	bl	8007fa4 <I2C_MasterRequestWrite>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e08d      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007e8c:	e066      	b.n	8007f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	6a39      	ldr	r1, [r7, #32]
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fa22 	bl	80082dc <I2C_WaitOnTXEFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00d      	beq.n	8007eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d107      	bne.n	8007eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e06b      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	781a      	ldrb	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d11b      	bne.n	8007f30 <HAL_I2C_Master_Transmit+0x188>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d017      	beq.n	8007f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	6a39      	ldr	r1, [r7, #32]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 fa19 	bl	800836c <I2C_WaitOnBTFFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d107      	bne.n	8007f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e01a      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d194      	bne.n	8007e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e000      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	00100002 	.word	0x00100002
 8007fa0:	ffff0000 	.word	0xffff0000

08007fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d006      	beq.n	8007fce <I2C_MasterRequestWrite+0x2a>
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d003      	beq.n	8007fce <I2C_MasterRequestWrite+0x2a>
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fcc:	d108      	bne.n	8007fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e00b      	b.n	8007ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe4:	2b12      	cmp	r3, #18
 8007fe6:	d107      	bne.n	8007ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f84f 	bl	80080a8 <I2C_WaitOnFlagUntilTimeout>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00d      	beq.n	800802c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800801a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800801e:	d103      	bne.n	8008028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008026:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e035      	b.n	8008098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008034:	d108      	bne.n	8008048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008044:	611a      	str	r2, [r3, #16]
 8008046:	e01b      	b.n	8008080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008048:	897b      	ldrh	r3, [r7, #10]
 800804a:	11db      	asrs	r3, r3, #7
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f003 0306 	and.w	r3, r3, #6
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f063 030f 	orn	r3, r3, #15
 8008058:	b2da      	uxtb	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	490e      	ldr	r1, [pc, #56]	@ (80080a0 <I2C_MasterRequestWrite+0xfc>)
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f898 	bl	800819c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e010      	b.n	8008098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008076:	897b      	ldrh	r3, [r7, #10]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	4907      	ldr	r1, [pc, #28]	@ (80080a4 <I2C_MasterRequestWrite+0x100>)
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 f888 	bl	800819c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	00010008 	.word	0x00010008
 80080a4:	00010002 	.word	0x00010002

080080a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	4613      	mov	r3, r2
 80080b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080b8:	e048      	b.n	800814c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c0:	d044      	beq.n	800814c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c2:	f7ff f973 	bl	80073ac <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d302      	bcc.n	80080d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d139      	bne.n	800814c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	0c1b      	lsrs	r3, r3, #16
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d10d      	bne.n	80080fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	43da      	mvns	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4013      	ands	r3, r2
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bf0c      	ite	eq
 80080f4:	2301      	moveq	r3, #1
 80080f6:	2300      	movne	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	e00c      	b.n	8008118 <I2C_WaitOnFlagUntilTimeout+0x70>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	43da      	mvns	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4013      	ands	r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	bf0c      	ite	eq
 8008110:	2301      	moveq	r3, #1
 8008112:	2300      	movne	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	461a      	mov	r2, r3
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	429a      	cmp	r2, r3
 800811c:	d116      	bne.n	800814c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008138:	f043 0220 	orr.w	r2, r3, #32
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e023      	b.n	8008194 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10d      	bne.n	8008172 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	43da      	mvns	r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	4013      	ands	r3, r2
 8008162:	b29b      	uxth	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	bf0c      	ite	eq
 8008168:	2301      	moveq	r3, #1
 800816a:	2300      	movne	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	e00c      	b.n	800818c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	43da      	mvns	r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4013      	ands	r3, r2
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	429a      	cmp	r2, r3
 8008190:	d093      	beq.n	80080ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081aa:	e071      	b.n	8008290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ba:	d123      	bne.n	8008204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f0:	f043 0204 	orr.w	r2, r3, #4
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e067      	b.n	80082d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d041      	beq.n	8008290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820c:	f7ff f8ce 	bl	80073ac <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d302      	bcc.n	8008222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d136      	bne.n	8008290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	0c1b      	lsrs	r3, r3, #16
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	d10c      	bne.n	8008246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	43da      	mvns	r2, r3
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4013      	ands	r3, r2
 8008238:	b29b      	uxth	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	bf14      	ite	ne
 800823e:	2301      	movne	r3, #1
 8008240:	2300      	moveq	r3, #0
 8008242:	b2db      	uxtb	r3, r3
 8008244:	e00b      	b.n	800825e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	43da      	mvns	r2, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4013      	ands	r3, r2
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	bf14      	ite	ne
 8008258:	2301      	movne	r3, #1
 800825a:	2300      	moveq	r3, #0
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d016      	beq.n	8008290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827c:	f043 0220 	orr.w	r2, r3, #32
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e021      	b.n	80082d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	0c1b      	lsrs	r3, r3, #16
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b01      	cmp	r3, #1
 8008298:	d10c      	bne.n	80082b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	43da      	mvns	r2, r3
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4013      	ands	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bf14      	ite	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	2300      	moveq	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	e00b      	b.n	80082cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	43da      	mvns	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4013      	ands	r3, r2
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2300      	moveq	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f47f af6d 	bne.w	80081ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082e8:	e034      	b.n	8008354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f886 	bl	80083fc <I2C_IsAcknowledgeFailed>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e034      	b.n	8008364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d028      	beq.n	8008354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008302:	f7ff f853 	bl	80073ac <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	429a      	cmp	r2, r3
 8008310:	d302      	bcc.n	8008318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11d      	bne.n	8008354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008322:	2b80      	cmp	r3, #128	@ 0x80
 8008324:	d016      	beq.n	8008354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008340:	f043 0220 	orr.w	r2, r3, #32
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e007      	b.n	8008364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800835e:	2b80      	cmp	r3, #128	@ 0x80
 8008360:	d1c3      	bne.n	80082ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008378:	e034      	b.n	80083e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f83e 	bl	80083fc <I2C_IsAcknowledgeFailed>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e034      	b.n	80083f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008390:	d028      	beq.n	80083e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008392:	f7ff f80b 	bl	80073ac <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d302      	bcc.n	80083a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d11d      	bne.n	80083e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f003 0304 	and.w	r3, r3, #4
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d016      	beq.n	80083e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d0:	f043 0220 	orr.w	r2, r3, #32
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e007      	b.n	80083f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d1c3      	bne.n	800837a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800840e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008412:	d11b      	bne.n	800844c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800841c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	f043 0204 	orr.w	r2, r3, #4
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
	...

0800845c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e267      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d075      	beq.n	8008566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800847a:	4b88      	ldr	r3, [pc, #544]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 030c 	and.w	r3, r3, #12
 8008482:	2b04      	cmp	r3, #4
 8008484:	d00c      	beq.n	80084a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008486:	4b85      	ldr	r3, [pc, #532]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800848e:	2b08      	cmp	r3, #8
 8008490:	d112      	bne.n	80084b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008492:	4b82      	ldr	r3, [pc, #520]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800849a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800849e:	d10b      	bne.n	80084b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084a0:	4b7e      	ldr	r3, [pc, #504]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d05b      	beq.n	8008564 <HAL_RCC_OscConfig+0x108>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d157      	bne.n	8008564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e242      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084c0:	d106      	bne.n	80084d0 <HAL_RCC_OscConfig+0x74>
 80084c2:	4b76      	ldr	r3, [pc, #472]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a75      	ldr	r2, [pc, #468]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	e01d      	b.n	800850c <HAL_RCC_OscConfig+0xb0>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084d8:	d10c      	bne.n	80084f4 <HAL_RCC_OscConfig+0x98>
 80084da:	4b70      	ldr	r3, [pc, #448]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a6f      	ldr	r2, [pc, #444]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	4b6d      	ldr	r3, [pc, #436]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a6c      	ldr	r2, [pc, #432]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e00b      	b.n	800850c <HAL_RCC_OscConfig+0xb0>
 80084f4:	4b69      	ldr	r3, [pc, #420]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a68      	ldr	r2, [pc, #416]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80084fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	4b66      	ldr	r3, [pc, #408]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a65      	ldr	r2, [pc, #404]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800850a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d013      	beq.n	800853c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008514:	f7fe ff4a 	bl	80073ac <HAL_GetTick>
 8008518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800851c:	f7fe ff46 	bl	80073ac <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b64      	cmp	r3, #100	@ 0x64
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e207      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800852e:	4b5b      	ldr	r3, [pc, #364]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f0      	beq.n	800851c <HAL_RCC_OscConfig+0xc0>
 800853a:	e014      	b.n	8008566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800853c:	f7fe ff36 	bl	80073ac <HAL_GetTick>
 8008540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008542:	e008      	b.n	8008556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008544:	f7fe ff32 	bl	80073ac <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	2b64      	cmp	r3, #100	@ 0x64
 8008550:	d901      	bls.n	8008556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e1f3      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008556:	4b51      	ldr	r3, [pc, #324]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f0      	bne.n	8008544 <HAL_RCC_OscConfig+0xe8>
 8008562:	e000      	b.n	8008566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d063      	beq.n	800863a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008572:	4b4a      	ldr	r3, [pc, #296]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 030c 	and.w	r3, r3, #12
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800857e:	4b47      	ldr	r3, [pc, #284]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008586:	2b08      	cmp	r3, #8
 8008588:	d11c      	bne.n	80085c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800858a:	4b44      	ldr	r3, [pc, #272]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d116      	bne.n	80085c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008596:	4b41      	ldr	r3, [pc, #260]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <HAL_RCC_OscConfig+0x152>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d001      	beq.n	80085ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e1c7      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ae:	4b3b      	ldr	r3, [pc, #236]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4937      	ldr	r1, [pc, #220]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085c2:	e03a      	b.n	800863a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d020      	beq.n	800860e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085cc:	4b34      	ldr	r3, [pc, #208]	@ (80086a0 <HAL_RCC_OscConfig+0x244>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d2:	f7fe feeb 	bl	80073ac <HAL_GetTick>
 80085d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085d8:	e008      	b.n	80085ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085da:	f7fe fee7 	bl	80073ac <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e1a8      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ec:	4b2b      	ldr	r3, [pc, #172]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0f0      	beq.n	80085da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f8:	4b28      	ldr	r3, [pc, #160]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	4925      	ldr	r1, [pc, #148]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008608:	4313      	orrs	r3, r2
 800860a:	600b      	str	r3, [r1, #0]
 800860c:	e015      	b.n	800863a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800860e:	4b24      	ldr	r3, [pc, #144]	@ (80086a0 <HAL_RCC_OscConfig+0x244>)
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008614:	f7fe feca 	bl	80073ac <HAL_GetTick>
 8008618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800861a:	e008      	b.n	800862e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800861c:	f7fe fec6 	bl	80073ac <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e187      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800862e:	4b1b      	ldr	r3, [pc, #108]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1f0      	bne.n	800861c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	2b00      	cmp	r3, #0
 8008644:	d036      	beq.n	80086b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d016      	beq.n	800867c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800864e:	4b15      	ldr	r3, [pc, #84]	@ (80086a4 <HAL_RCC_OscConfig+0x248>)
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008654:	f7fe feaa 	bl	80073ac <HAL_GetTick>
 8008658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800865c:	f7fe fea6 	bl	80073ac <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e167      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800866e:	4b0b      	ldr	r3, [pc, #44]	@ (800869c <HAL_RCC_OscConfig+0x240>)
 8008670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f0      	beq.n	800865c <HAL_RCC_OscConfig+0x200>
 800867a:	e01b      	b.n	80086b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800867c:	4b09      	ldr	r3, [pc, #36]	@ (80086a4 <HAL_RCC_OscConfig+0x248>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008682:	f7fe fe93 	bl	80073ac <HAL_GetTick>
 8008686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008688:	e00e      	b.n	80086a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800868a:	f7fe fe8f 	bl	80073ac <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	2b02      	cmp	r3, #2
 8008696:	d907      	bls.n	80086a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e150      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
 800869c:	40023800 	.word	0x40023800
 80086a0:	42470000 	.word	0x42470000
 80086a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086a8:	4b88      	ldr	r3, [pc, #544]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80086aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1ea      	bne.n	800868a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8097 	beq.w	80087f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086c6:	4b81      	ldr	r3, [pc, #516]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80086c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10f      	bne.n	80086f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086d2:	2300      	movs	r3, #0
 80086d4:	60bb      	str	r3, [r7, #8]
 80086d6:	4b7d      	ldr	r3, [pc, #500]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80086d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086da:	4a7c      	ldr	r2, [pc, #496]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80086dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80086e2:	4b7a      	ldr	r3, [pc, #488]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086ea:	60bb      	str	r3, [r7, #8]
 80086ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086f2:	4b77      	ldr	r3, [pc, #476]	@ (80088d0 <HAL_RCC_OscConfig+0x474>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d118      	bne.n	8008730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086fe:	4b74      	ldr	r3, [pc, #464]	@ (80088d0 <HAL_RCC_OscConfig+0x474>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a73      	ldr	r2, [pc, #460]	@ (80088d0 <HAL_RCC_OscConfig+0x474>)
 8008704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800870a:	f7fe fe4f 	bl	80073ac <HAL_GetTick>
 800870e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008710:	e008      	b.n	8008724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008712:	f7fe fe4b 	bl	80073ac <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e10c      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008724:	4b6a      	ldr	r3, [pc, #424]	@ (80088d0 <HAL_RCC_OscConfig+0x474>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0f0      	beq.n	8008712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d106      	bne.n	8008746 <HAL_RCC_OscConfig+0x2ea>
 8008738:	4b64      	ldr	r3, [pc, #400]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 800873a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873c:	4a63      	ldr	r2, [pc, #396]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 800873e:	f043 0301 	orr.w	r3, r3, #1
 8008742:	6713      	str	r3, [r2, #112]	@ 0x70
 8008744:	e01c      	b.n	8008780 <HAL_RCC_OscConfig+0x324>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2b05      	cmp	r3, #5
 800874c:	d10c      	bne.n	8008768 <HAL_RCC_OscConfig+0x30c>
 800874e:	4b5f      	ldr	r3, [pc, #380]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 8008750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008752:	4a5e      	ldr	r2, [pc, #376]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 8008754:	f043 0304 	orr.w	r3, r3, #4
 8008758:	6713      	str	r3, [r2, #112]	@ 0x70
 800875a:	4b5c      	ldr	r3, [pc, #368]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 800875c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875e:	4a5b      	ldr	r2, [pc, #364]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	6713      	str	r3, [r2, #112]	@ 0x70
 8008766:	e00b      	b.n	8008780 <HAL_RCC_OscConfig+0x324>
 8008768:	4b58      	ldr	r3, [pc, #352]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 800876a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800876c:	4a57      	ldr	r2, [pc, #348]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	6713      	str	r3, [r2, #112]	@ 0x70
 8008774:	4b55      	ldr	r3, [pc, #340]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 8008776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008778:	4a54      	ldr	r2, [pc, #336]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 800877a:	f023 0304 	bic.w	r3, r3, #4
 800877e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d015      	beq.n	80087b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008788:	f7fe fe10 	bl	80073ac <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800878e:	e00a      	b.n	80087a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008790:	f7fe fe0c 	bl	80073ac <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800879e:	4293      	cmp	r3, r2
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e0cb      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a6:	4b49      	ldr	r3, [pc, #292]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80087a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087aa:	f003 0302 	and.w	r3, r3, #2
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0ee      	beq.n	8008790 <HAL_RCC_OscConfig+0x334>
 80087b2:	e014      	b.n	80087de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087b4:	f7fe fdfa 	bl	80073ac <HAL_GetTick>
 80087b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087ba:	e00a      	b.n	80087d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087bc:	f7fe fdf6 	bl	80073ac <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e0b5      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087d2:	4b3e      	ldr	r3, [pc, #248]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1ee      	bne.n	80087bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d105      	bne.n	80087f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087e4:	4b39      	ldr	r3, [pc, #228]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80087e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e8:	4a38      	ldr	r2, [pc, #224]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80087ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80a1 	beq.w	800893c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087fa:	4b34      	ldr	r3, [pc, #208]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 030c 	and.w	r3, r3, #12
 8008802:	2b08      	cmp	r3, #8
 8008804:	d05c      	beq.n	80088c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d141      	bne.n	8008892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880e:	4b31      	ldr	r3, [pc, #196]	@ (80088d4 <HAL_RCC_OscConfig+0x478>)
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008814:	f7fe fdca 	bl	80073ac <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800881c:	f7fe fdc6 	bl	80073ac <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e087      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882e:	4b27      	ldr	r3, [pc, #156]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f0      	bne.n	800881c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	69da      	ldr	r2, [r3, #28]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008848:	019b      	lsls	r3, r3, #6
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	3b01      	subs	r3, #1
 8008854:	041b      	lsls	r3, r3, #16
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	061b      	lsls	r3, r3, #24
 800885e:	491b      	ldr	r1, [pc, #108]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 8008860:	4313      	orrs	r3, r2
 8008862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008864:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <HAL_RCC_OscConfig+0x478>)
 8008866:	2201      	movs	r2, #1
 8008868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800886a:	f7fe fd9f 	bl	80073ac <HAL_GetTick>
 800886e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008870:	e008      	b.n	8008884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008872:	f7fe fd9b 	bl	80073ac <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d901      	bls.n	8008884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e05c      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008884:	4b11      	ldr	r3, [pc, #68]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0f0      	beq.n	8008872 <HAL_RCC_OscConfig+0x416>
 8008890:	e054      	b.n	800893c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008892:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <HAL_RCC_OscConfig+0x478>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008898:	f7fe fd88 	bl	80073ac <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088a0:	f7fe fd84 	bl	80073ac <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e045      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b2:	4b06      	ldr	r3, [pc, #24]	@ (80088cc <HAL_RCC_OscConfig+0x470>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0x444>
 80088be:	e03d      	b.n	800893c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d107      	bne.n	80088d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e038      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
 80088cc:	40023800 	.word	0x40023800
 80088d0:	40007000 	.word	0x40007000
 80088d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80088d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008948 <HAL_RCC_OscConfig+0x4ec>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d028      	beq.n	8008938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d121      	bne.n	8008938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fe:	429a      	cmp	r2, r3
 8008900:	d11a      	bne.n	8008938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008908:	4013      	ands	r3, r2
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800890e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008910:	4293      	cmp	r3, r2
 8008912:	d111      	bne.n	8008938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	3b01      	subs	r3, #1
 8008922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008924:	429a      	cmp	r2, r3
 8008926:	d107      	bne.n	8008938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008934:	429a      	cmp	r2, r3
 8008936:	d001      	beq.n	800893c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40023800 	.word	0x40023800

0800894c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e0cc      	b.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008960:	4b68      	ldr	r3, [pc, #416]	@ (8008b04 <HAL_RCC_ClockConfig+0x1b8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0307 	and.w	r3, r3, #7
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d90c      	bls.n	8008988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800896e:	4b65      	ldr	r3, [pc, #404]	@ (8008b04 <HAL_RCC_ClockConfig+0x1b8>)
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008976:	4b63      	ldr	r3, [pc, #396]	@ (8008b04 <HAL_RCC_ClockConfig+0x1b8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d001      	beq.n	8008988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e0b8      	b.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d020      	beq.n	80089d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089a0:	4b59      	ldr	r3, [pc, #356]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	4a58      	ldr	r2, [pc, #352]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 80089a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d005      	beq.n	80089c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089b8:	4b53      	ldr	r3, [pc, #332]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	4a52      	ldr	r2, [pc, #328]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 80089be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80089c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089c4:	4b50      	ldr	r3, [pc, #320]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	494d      	ldr	r1, [pc, #308]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d044      	beq.n	8008a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d107      	bne.n	80089fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089ea:	4b47      	ldr	r3, [pc, #284]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d119      	bne.n	8008a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e07f      	b.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d003      	beq.n	8008a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d107      	bne.n	8008a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e06f      	b.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e067      	b.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a2a:	4b37      	ldr	r3, [pc, #220]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f023 0203 	bic.w	r2, r3, #3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	4934      	ldr	r1, [pc, #208]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a3c:	f7fe fcb6 	bl	80073ac <HAL_GetTick>
 8008a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a42:	e00a      	b.n	8008a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a44:	f7fe fcb2 	bl	80073ac <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e04f      	b.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f003 020c 	and.w	r2, r3, #12
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d1eb      	bne.n	8008a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a6c:	4b25      	ldr	r3, [pc, #148]	@ (8008b04 <HAL_RCC_ClockConfig+0x1b8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d20c      	bcs.n	8008a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a7a:	4b22      	ldr	r3, [pc, #136]	@ (8008b04 <HAL_RCC_ClockConfig+0x1b8>)
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a82:	4b20      	ldr	r3, [pc, #128]	@ (8008b04 <HAL_RCC_ClockConfig+0x1b8>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d001      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e032      	b.n	8008afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d008      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008aa0:	4b19      	ldr	r3, [pc, #100]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	4916      	ldr	r1, [pc, #88]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008abe:	4b12      	ldr	r3, [pc, #72]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	490e      	ldr	r1, [pc, #56]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008ad2:	f000 f821 	bl	8008b18 <HAL_RCC_GetSysClockFreq>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8008b08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	091b      	lsrs	r3, r3, #4
 8008ade:	f003 030f 	and.w	r3, r3, #15
 8008ae2:	490a      	ldr	r1, [pc, #40]	@ (8008b0c <HAL_RCC_ClockConfig+0x1c0>)
 8008ae4:	5ccb      	ldrb	r3, [r1, r3]
 8008ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8008aea:	4a09      	ldr	r2, [pc, #36]	@ (8008b10 <HAL_RCC_ClockConfig+0x1c4>)
 8008aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008aee:	4b09      	ldr	r3, [pc, #36]	@ (8008b14 <HAL_RCC_ClockConfig+0x1c8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe fc16 	bl	8007324 <HAL_InitTick>

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	40023c00 	.word	0x40023c00
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	080111f8 	.word	0x080111f8
 8008b10:	200000e0 	.word	0x200000e0
 8008b14:	200000e4 	.word	0x200000e4

08008b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b1c:	b094      	sub	sp, #80	@ 0x50
 8008b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b24:	2300      	movs	r3, #0
 8008b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b28:	2300      	movs	r3, #0
 8008b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b30:	4b79      	ldr	r3, [pc, #484]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d00d      	beq.n	8008b58 <HAL_RCC_GetSysClockFreq+0x40>
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	f200 80e1 	bhi.w	8008d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_RCC_GetSysClockFreq+0x34>
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d003      	beq.n	8008b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b4a:	e0db      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b4c:	4b73      	ldr	r3, [pc, #460]	@ (8008d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8008b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008b50:	e0db      	b.n	8008d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b52:	4b73      	ldr	r3, [pc, #460]	@ (8008d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8008b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b56:	e0d8      	b.n	8008d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b58:	4b6f      	ldr	r3, [pc, #444]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b60:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b62:	4b6d      	ldr	r3, [pc, #436]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d063      	beq.n	8008c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	099b      	lsrs	r3, r3, #6
 8008b74:	2200      	movs	r2, #0
 8008b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b82:	2300      	movs	r3, #0
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	f04f 0000 	mov.w	r0, #0
 8008b92:	f04f 0100 	mov.w	r1, #0
 8008b96:	0159      	lsls	r1, r3, #5
 8008b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b9c:	0150      	lsls	r0, r2, #5
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	1a51      	subs	r1, r2, r1
 8008ba6:	6139      	str	r1, [r7, #16]
 8008ba8:	4629      	mov	r1, r5
 8008baa:	eb63 0301 	sbc.w	r3, r3, r1
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	f04f 0200 	mov.w	r2, #0
 8008bb4:	f04f 0300 	mov.w	r3, #0
 8008bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bbc:	4659      	mov	r1, fp
 8008bbe:	018b      	lsls	r3, r1, #6
 8008bc0:	4651      	mov	r1, sl
 8008bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bc6:	4651      	mov	r1, sl
 8008bc8:	018a      	lsls	r2, r1, #6
 8008bca:	4651      	mov	r1, sl
 8008bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8008bd6:	f04f 0200 	mov.w	r2, #0
 8008bda:	f04f 0300 	mov.w	r3, #0
 8008bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bea:	4690      	mov	r8, r2
 8008bec:	4699      	mov	r9, r3
 8008bee:	4623      	mov	r3, r4
 8008bf0:	eb18 0303 	adds.w	r3, r8, r3
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	eb49 0303 	adc.w	r3, r9, r3
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	024b      	lsls	r3, r1, #9
 8008c0e:	4621      	mov	r1, r4
 8008c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c14:	4621      	mov	r1, r4
 8008c16:	024a      	lsls	r2, r1, #9
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c1e:	2200      	movs	r2, #0
 8008c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c28:	f7f8 f82e 	bl	8000c88 <__aeabi_uldivmod>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4613      	mov	r3, r2
 8008c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c34:	e058      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c36:	4b38      	ldr	r3, [pc, #224]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	099b      	lsrs	r3, r3, #6
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	4611      	mov	r1, r2
 8008c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c46:	623b      	str	r3, [r7, #32]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	f04f 0000 	mov.w	r0, #0
 8008c58:	f04f 0100 	mov.w	r1, #0
 8008c5c:	0159      	lsls	r1, r3, #5
 8008c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c62:	0150      	lsls	r0, r2, #5
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4641      	mov	r1, r8
 8008c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c6e:	4649      	mov	r1, r9
 8008c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c74:	f04f 0200 	mov.w	r2, #0
 8008c78:	f04f 0300 	mov.w	r3, #0
 8008c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c88:	ebb2 040a 	subs.w	r4, r2, sl
 8008c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	00eb      	lsls	r3, r5, #3
 8008c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c9e:	00e2      	lsls	r2, r4, #3
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	461d      	mov	r5, r3
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	18e3      	adds	r3, r4, r3
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	464b      	mov	r3, r9
 8008cac:	eb45 0303 	adc.w	r3, r5, r3
 8008cb0:	607b      	str	r3, [r7, #4]
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	f04f 0300 	mov.w	r3, #0
 8008cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	028b      	lsls	r3, r1, #10
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cc8:	4621      	mov	r1, r4
 8008cca:	028a      	lsls	r2, r1, #10
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	61fa      	str	r2, [r7, #28]
 8008cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cdc:	f7f7 ffd4 	bl	8000c88 <__aeabi_uldivmod>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	0c1b      	lsrs	r3, r3, #16
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d02:	e002      	b.n	8008d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d04:	4b05      	ldr	r3, [pc, #20]	@ (8008d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8008d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3750      	adds	r7, #80	@ 0x50
 8008d10:	46bd      	mov	sp, r7
 8008d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d16:	bf00      	nop
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	00f42400 	.word	0x00f42400
 8008d20:	007a1200 	.word	0x007a1200

08008d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d28:	4b03      	ldr	r3, [pc, #12]	@ (8008d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	200000e0 	.word	0x200000e0

08008d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d40:	f7ff fff0 	bl	8008d24 <HAL_RCC_GetHCLKFreq>
 8008d44:	4602      	mov	r2, r0
 8008d46:	4b05      	ldr	r3, [pc, #20]	@ (8008d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	0a9b      	lsrs	r3, r3, #10
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	4903      	ldr	r1, [pc, #12]	@ (8008d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d52:	5ccb      	ldrb	r3, [r1, r3]
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	08011208 	.word	0x08011208

08008d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d68:	f7ff ffdc 	bl	8008d24 <HAL_RCC_GetHCLKFreq>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	0b5b      	lsrs	r3, r3, #13
 8008d74:	f003 0307 	and.w	r3, r3, #7
 8008d78:	4903      	ldr	r1, [pc, #12]	@ (8008d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d7a:	5ccb      	ldrb	r3, [r1, r3]
 8008d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40023800 	.word	0x40023800
 8008d88:	08011208 	.word	0x08011208

08008d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e041      	b.n	8008e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fd ff78 	bl	8006ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4610      	mov	r0, r2
 8008dcc:	f000 fc48 	bl	8009660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e041      	b.n	8008ec0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f839 	bl	8008ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f000 fbf9 	bl	8009660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d109      	bne.n	8008f04 <HAL_TIM_PWM_Start_IT+0x28>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	e022      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0x6e>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d109      	bne.n	8008f1e <HAL_TIM_PWM_Start_IT+0x42>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	bf14      	ite	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	2300      	moveq	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	e015      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0x6e>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d109      	bne.n	8008f38 <HAL_TIM_PWM_Start_IT+0x5c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	bf14      	ite	ne
 8008f30:	2301      	movne	r3, #1
 8008f32:	2300      	moveq	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	e008      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0x6e>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	bf14      	ite	ne
 8008f44:	2301      	movne	r3, #1
 8008f46:	2300      	moveq	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e0c7      	b.n	80090e2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <HAL_TIM_PWM_Start_IT+0x86>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f60:	e013      	b.n	8008f8a <HAL_TIM_PWM_Start_IT+0xae>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d104      	bne.n	8008f72 <HAL_TIM_PWM_Start_IT+0x96>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f70:	e00b      	b.n	8008f8a <HAL_TIM_PWM_Start_IT+0xae>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d104      	bne.n	8008f82 <HAL_TIM_PWM_Start_IT+0xa6>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f80:	e003      	b.n	8008f8a <HAL_TIM_PWM_Start_IT+0xae>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b0c      	cmp	r3, #12
 8008f8e:	d841      	bhi.n	8009014 <HAL_TIM_PWM_Start_IT+0x138>
 8008f90:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <HAL_TIM_PWM_Start_IT+0xbc>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fcd 	.word	0x08008fcd
 8008f9c:	08009015 	.word	0x08009015
 8008fa0:	08009015 	.word	0x08009015
 8008fa4:	08009015 	.word	0x08009015
 8008fa8:	08008fdf 	.word	0x08008fdf
 8008fac:	08009015 	.word	0x08009015
 8008fb0:	08009015 	.word	0x08009015
 8008fb4:	08009015 	.word	0x08009015
 8008fb8:	08008ff1 	.word	0x08008ff1
 8008fbc:	08009015 	.word	0x08009015
 8008fc0:	08009015 	.word	0x08009015
 8008fc4:	08009015 	.word	0x08009015
 8008fc8:	08009003 	.word	0x08009003
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0202 	orr.w	r2, r2, #2
 8008fda:	60da      	str	r2, [r3, #12]
      break;
 8008fdc:	e01d      	b.n	800901a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f042 0204 	orr.w	r2, r2, #4
 8008fec:	60da      	str	r2, [r3, #12]
      break;
 8008fee:	e014      	b.n	800901a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0208 	orr.w	r2, r2, #8
 8008ffe:	60da      	str	r2, [r3, #12]
      break;
 8009000:	e00b      	b.n	800901a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f042 0210 	orr.w	r2, r2, #16
 8009010:	60da      	str	r2, [r3, #12]
      break;
 8009012:	e002      	b.n	800901a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	73fb      	strb	r3, [r7, #15]
      break;
 8009018:	bf00      	nop
  }

  if (status == HAL_OK)
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d15f      	bne.n	80090e0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2201      	movs	r2, #1
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fe0f 	bl	8009c4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a2e      	ldr	r2, [pc, #184]	@ (80090ec <HAL_TIM_PWM_Start_IT+0x210>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d004      	beq.n	8009042 <HAL_TIM_PWM_Start_IT+0x166>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a2c      	ldr	r2, [pc, #176]	@ (80090f0 <HAL_TIM_PWM_Start_IT+0x214>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d101      	bne.n	8009046 <HAL_TIM_PWM_Start_IT+0x16a>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <HAL_TIM_PWM_Start_IT+0x16c>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800905a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a22      	ldr	r2, [pc, #136]	@ (80090ec <HAL_TIM_PWM_Start_IT+0x210>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d022      	beq.n	80090ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800906e:	d01d      	beq.n	80090ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1f      	ldr	r2, [pc, #124]	@ (80090f4 <HAL_TIM_PWM_Start_IT+0x218>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d018      	beq.n	80090ac <HAL_TIM_PWM_Start_IT+0x1d0>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a1e      	ldr	r2, [pc, #120]	@ (80090f8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d013      	beq.n	80090ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1c      	ldr	r2, [pc, #112]	@ (80090fc <HAL_TIM_PWM_Start_IT+0x220>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d00e      	beq.n	80090ac <HAL_TIM_PWM_Start_IT+0x1d0>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a17      	ldr	r2, [pc, #92]	@ (80090f0 <HAL_TIM_PWM_Start_IT+0x214>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d009      	beq.n	80090ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a18      	ldr	r2, [pc, #96]	@ (8009100 <HAL_TIM_PWM_Start_IT+0x224>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d004      	beq.n	80090ac <HAL_TIM_PWM_Start_IT+0x1d0>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a17      	ldr	r2, [pc, #92]	@ (8009104 <HAL_TIM_PWM_Start_IT+0x228>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d111      	bne.n	80090d0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b06      	cmp	r3, #6
 80090bc:	d010      	beq.n	80090e0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0201 	orr.w	r2, r2, #1
 80090cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ce:	e007      	b.n	80090e0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0201 	orr.w	r2, r2, #1
 80090de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40010000 	.word	0x40010000
 80090f0:	40010400 	.word	0x40010400
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	40014000 	.word	0x40014000
 8009104:	40001800 	.word	0x40001800

08009108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d020      	beq.n	800916c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01b      	beq.n	800916c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f06f 0202 	mvn.w	r2, #2
 800913c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa65 	bl	8009622 <HAL_TIM_IC_CaptureCallback>
 8009158:	e005      	b.n	8009166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fa57 	bl	800960e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa68 	bl	8009636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f003 0304 	and.w	r3, r3, #4
 8009172:	2b00      	cmp	r3, #0
 8009174:	d020      	beq.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01b      	beq.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f06f 0204 	mvn.w	r2, #4
 8009188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fa3f 	bl	8009622 <HAL_TIM_IC_CaptureCallback>
 80091a4:	e005      	b.n	80091b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa31 	bl	800960e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa42 	bl	8009636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d020      	beq.n	8009204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f003 0308 	and.w	r3, r3, #8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01b      	beq.n	8009204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0208 	mvn.w	r2, #8
 80091d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2204      	movs	r2, #4
 80091da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa19 	bl	8009622 <HAL_TIM_IC_CaptureCallback>
 80091f0:	e005      	b.n	80091fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa0b 	bl	800960e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fa1c 	bl	8009636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b00      	cmp	r3, #0
 800920c:	d020      	beq.n	8009250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f003 0310 	and.w	r3, r3, #16
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01b      	beq.n	8009250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0210 	mvn.w	r2, #16
 8009220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2208      	movs	r2, #8
 8009226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f9f3 	bl	8009622 <HAL_TIM_IC_CaptureCallback>
 800923c:	e005      	b.n	800924a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9e5 	bl	800960e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f9f6 	bl	8009636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00c      	beq.n	8009274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d007      	beq.n	8009274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0201 	mvn.w	r2, #1
 800926c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f9c3 	bl	80095fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00c      	beq.n	8009298 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fdd8 	bl	8009e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00c      	beq.n	80092bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d007      	beq.n	80092bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f9c7 	bl	800964a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00c      	beq.n	80092e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d007      	beq.n	80092e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f06f 0220 	mvn.w	r2, #32
 80092d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fdaa 	bl	8009e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009302:	2302      	movs	r3, #2
 8009304:	e0ae      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b0c      	cmp	r3, #12
 8009312:	f200 809f 	bhi.w	8009454 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009316:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	08009351 	.word	0x08009351
 8009320:	08009455 	.word	0x08009455
 8009324:	08009455 	.word	0x08009455
 8009328:	08009455 	.word	0x08009455
 800932c:	08009391 	.word	0x08009391
 8009330:	08009455 	.word	0x08009455
 8009334:	08009455 	.word	0x08009455
 8009338:	08009455 	.word	0x08009455
 800933c:	080093d3 	.word	0x080093d3
 8009340:	08009455 	.word	0x08009455
 8009344:	08009455 	.word	0x08009455
 8009348:	08009455 	.word	0x08009455
 800934c:	08009413 	.word	0x08009413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fa2e 	bl	80097b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 0208 	orr.w	r2, r2, #8
 800936a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	699a      	ldr	r2, [r3, #24]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0204 	bic.w	r2, r2, #4
 800937a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6999      	ldr	r1, [r3, #24]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	691a      	ldr	r2, [r3, #16]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	619a      	str	r2, [r3, #24]
      break;
 800938e:	e064      	b.n	800945a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fa7e 	bl	8009898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699a      	ldr	r2, [r3, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6999      	ldr	r1, [r3, #24]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	021a      	lsls	r2, r3, #8
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	619a      	str	r2, [r3, #24]
      break;
 80093d0:	e043      	b.n	800945a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fad3 	bl	8009984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69da      	ldr	r2, [r3, #28]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 0208 	orr.w	r2, r2, #8
 80093ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69da      	ldr	r2, [r3, #28]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0204 	bic.w	r2, r2, #4
 80093fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69d9      	ldr	r1, [r3, #28]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	61da      	str	r2, [r3, #28]
      break;
 8009410:	e023      	b.n	800945a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 fb27 	bl	8009a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800942c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69da      	ldr	r2, [r3, #28]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800943c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69d9      	ldr	r1, [r3, #28]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	021a      	lsls	r2, r3, #8
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	61da      	str	r2, [r3, #28]
      break;
 8009452:	e002      	b.n	800945a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	75fb      	strb	r3, [r7, #23]
      break;
 8009458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009462:	7dfb      	ldrb	r3, [r7, #23]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_TIM_ConfigClockSource+0x1c>
 8009484:	2302      	movs	r3, #2
 8009486:	e0b4      	b.n	80095f2 <HAL_TIM_ConfigClockSource+0x186>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094c0:	d03e      	beq.n	8009540 <HAL_TIM_ConfigClockSource+0xd4>
 80094c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094c6:	f200 8087 	bhi.w	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 80094ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ce:	f000 8086 	beq.w	80095de <HAL_TIM_ConfigClockSource+0x172>
 80094d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094d6:	d87f      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 80094d8:	2b70      	cmp	r3, #112	@ 0x70
 80094da:	d01a      	beq.n	8009512 <HAL_TIM_ConfigClockSource+0xa6>
 80094dc:	2b70      	cmp	r3, #112	@ 0x70
 80094de:	d87b      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 80094e0:	2b60      	cmp	r3, #96	@ 0x60
 80094e2:	d050      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x11a>
 80094e4:	2b60      	cmp	r3, #96	@ 0x60
 80094e6:	d877      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 80094e8:	2b50      	cmp	r3, #80	@ 0x50
 80094ea:	d03c      	beq.n	8009566 <HAL_TIM_ConfigClockSource+0xfa>
 80094ec:	2b50      	cmp	r3, #80	@ 0x50
 80094ee:	d873      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 80094f0:	2b40      	cmp	r3, #64	@ 0x40
 80094f2:	d058      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x13a>
 80094f4:	2b40      	cmp	r3, #64	@ 0x40
 80094f6:	d86f      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 80094f8:	2b30      	cmp	r3, #48	@ 0x30
 80094fa:	d064      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x15a>
 80094fc:	2b30      	cmp	r3, #48	@ 0x30
 80094fe:	d86b      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 8009500:	2b20      	cmp	r3, #32
 8009502:	d060      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x15a>
 8009504:	2b20      	cmp	r3, #32
 8009506:	d867      	bhi.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
 8009508:	2b00      	cmp	r3, #0
 800950a:	d05c      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x15a>
 800950c:	2b10      	cmp	r3, #16
 800950e:	d05a      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x15a>
 8009510:	e062      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009522:	f000 fb73 	bl	8009c0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	609a      	str	r2, [r3, #8]
      break;
 800953e:	e04f      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009550:	f000 fb5c 	bl	8009c0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009562:	609a      	str	r2, [r3, #8]
      break;
 8009564:	e03c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009572:	461a      	mov	r2, r3
 8009574:	f000 fad0 	bl	8009b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2150      	movs	r1, #80	@ 0x50
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fb29 	bl	8009bd6 <TIM_ITRx_SetConfig>
      break;
 8009584:	e02c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009592:	461a      	mov	r2, r3
 8009594:	f000 faef 	bl	8009b76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2160      	movs	r1, #96	@ 0x60
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fb19 	bl	8009bd6 <TIM_ITRx_SetConfig>
      break;
 80095a4:	e01c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b2:	461a      	mov	r2, r3
 80095b4:	f000 fab0 	bl	8009b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2140      	movs	r1, #64	@ 0x40
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fb09 	bl	8009bd6 <TIM_ITRx_SetConfig>
      break;
 80095c4:	e00c      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f000 fb00 	bl	8009bd6 <TIM_ITRx_SetConfig>
      break;
 80095d6:	e003      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	73fb      	strb	r3, [r7, #15]
      break;
 80095dc:	e000      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80095de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009652:	bf00      	nop
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
	...

08009660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a46      	ldr	r2, [pc, #280]	@ (800978c <TIM_Base_SetConfig+0x12c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d013      	beq.n	80096a0 <TIM_Base_SetConfig+0x40>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800967e:	d00f      	beq.n	80096a0 <TIM_Base_SetConfig+0x40>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a43      	ldr	r2, [pc, #268]	@ (8009790 <TIM_Base_SetConfig+0x130>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00b      	beq.n	80096a0 <TIM_Base_SetConfig+0x40>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a42      	ldr	r2, [pc, #264]	@ (8009794 <TIM_Base_SetConfig+0x134>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d007      	beq.n	80096a0 <TIM_Base_SetConfig+0x40>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a41      	ldr	r2, [pc, #260]	@ (8009798 <TIM_Base_SetConfig+0x138>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_Base_SetConfig+0x40>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a40      	ldr	r2, [pc, #256]	@ (800979c <TIM_Base_SetConfig+0x13c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d108      	bne.n	80096b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a35      	ldr	r2, [pc, #212]	@ (800978c <TIM_Base_SetConfig+0x12c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d02b      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096c0:	d027      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a32      	ldr	r2, [pc, #200]	@ (8009790 <TIM_Base_SetConfig+0x130>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d023      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a31      	ldr	r2, [pc, #196]	@ (8009794 <TIM_Base_SetConfig+0x134>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d01f      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a30      	ldr	r2, [pc, #192]	@ (8009798 <TIM_Base_SetConfig+0x138>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d01b      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a2f      	ldr	r2, [pc, #188]	@ (800979c <TIM_Base_SetConfig+0x13c>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d017      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a2e      	ldr	r2, [pc, #184]	@ (80097a0 <TIM_Base_SetConfig+0x140>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d013      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a2d      	ldr	r2, [pc, #180]	@ (80097a4 <TIM_Base_SetConfig+0x144>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00f      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a2c      	ldr	r2, [pc, #176]	@ (80097a8 <TIM_Base_SetConfig+0x148>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00b      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a2b      	ldr	r2, [pc, #172]	@ (80097ac <TIM_Base_SetConfig+0x14c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d007      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a2a      	ldr	r2, [pc, #168]	@ (80097b0 <TIM_Base_SetConfig+0x150>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d003      	beq.n	8009712 <TIM_Base_SetConfig+0xb2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a29      	ldr	r2, [pc, #164]	@ (80097b4 <TIM_Base_SetConfig+0x154>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d108      	bne.n	8009724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a10      	ldr	r2, [pc, #64]	@ (800978c <TIM_Base_SetConfig+0x12c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d003      	beq.n	8009758 <TIM_Base_SetConfig+0xf8>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a12      	ldr	r2, [pc, #72]	@ (800979c <TIM_Base_SetConfig+0x13c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d103      	bne.n	8009760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b01      	cmp	r3, #1
 8009770:	d105      	bne.n	800977e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f023 0201 	bic.w	r2, r3, #1
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	611a      	str	r2, [r3, #16]
  }
}
 800977e:	bf00      	nop
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	40010000 	.word	0x40010000
 8009790:	40000400 	.word	0x40000400
 8009794:	40000800 	.word	0x40000800
 8009798:	40000c00 	.word	0x40000c00
 800979c:	40010400 	.word	0x40010400
 80097a0:	40014000 	.word	0x40014000
 80097a4:	40014400 	.word	0x40014400
 80097a8:	40014800 	.word	0x40014800
 80097ac:	40001800 	.word	0x40001800
 80097b0:	40001c00 	.word	0x40001c00
 80097b4:	40002000 	.word	0x40002000

080097b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	f023 0201 	bic.w	r2, r3, #1
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0303 	bic.w	r3, r3, #3
 80097ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f023 0302 	bic.w	r3, r3, #2
 8009800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a20      	ldr	r2, [pc, #128]	@ (8009890 <TIM_OC1_SetConfig+0xd8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d003      	beq.n	800981c <TIM_OC1_SetConfig+0x64>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a1f      	ldr	r2, [pc, #124]	@ (8009894 <TIM_OC1_SetConfig+0xdc>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d10c      	bne.n	8009836 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f023 0308 	bic.w	r3, r3, #8
 8009822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	4313      	orrs	r3, r2
 800982c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f023 0304 	bic.w	r3, r3, #4
 8009834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a15      	ldr	r2, [pc, #84]	@ (8009890 <TIM_OC1_SetConfig+0xd8>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d003      	beq.n	8009846 <TIM_OC1_SetConfig+0x8e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a14      	ldr	r2, [pc, #80]	@ (8009894 <TIM_OC1_SetConfig+0xdc>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d111      	bne.n	800986a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800984c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	621a      	str	r2, [r3, #32]
}
 8009884:	bf00      	nop
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	40010000 	.word	0x40010000
 8009894:	40010400 	.word	0x40010400

08009898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f023 0210 	bic.w	r2, r3, #16
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f023 0320 	bic.w	r3, r3, #32
 80098e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a22      	ldr	r2, [pc, #136]	@ (800997c <TIM_OC2_SetConfig+0xe4>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_OC2_SetConfig+0x68>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a21      	ldr	r2, [pc, #132]	@ (8009980 <TIM_OC2_SetConfig+0xe8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d10d      	bne.n	800991c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800991a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a17      	ldr	r2, [pc, #92]	@ (800997c <TIM_OC2_SetConfig+0xe4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC2_SetConfig+0x94>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a16      	ldr	r2, [pc, #88]	@ (8009980 <TIM_OC2_SetConfig+0xe8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d113      	bne.n	8009954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800993a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	40010000 	.word	0x40010000
 8009980:	40010400 	.word	0x40010400

08009984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a21      	ldr	r2, [pc, #132]	@ (8009a64 <TIM_OC3_SetConfig+0xe0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d003      	beq.n	80099ea <TIM_OC3_SetConfig+0x66>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a20      	ldr	r2, [pc, #128]	@ (8009a68 <TIM_OC3_SetConfig+0xe4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d10d      	bne.n	8009a06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	021b      	lsls	r3, r3, #8
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a16      	ldr	r2, [pc, #88]	@ (8009a64 <TIM_OC3_SetConfig+0xe0>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d003      	beq.n	8009a16 <TIM_OC3_SetConfig+0x92>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a15      	ldr	r2, [pc, #84]	@ (8009a68 <TIM_OC3_SetConfig+0xe4>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d113      	bne.n	8009a3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	621a      	str	r2, [r3, #32]
}
 8009a58:	bf00      	nop
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	40010000 	.word	0x40010000
 8009a68:	40010400 	.word	0x40010400

08009a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a1b      	ldr	r3, [r3, #32]
 8009a80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	031b      	lsls	r3, r3, #12
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a12      	ldr	r2, [pc, #72]	@ (8009b10 <TIM_OC4_SetConfig+0xa4>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d003      	beq.n	8009ad4 <TIM_OC4_SetConfig+0x68>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a11      	ldr	r2, [pc, #68]	@ (8009b14 <TIM_OC4_SetConfig+0xa8>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d109      	bne.n	8009ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	019b      	lsls	r3, r3, #6
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	621a      	str	r2, [r3, #32]
}
 8009b02:	bf00      	nop
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40010000 	.word	0x40010000
 8009b14:	40010400 	.word	0x40010400

08009b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	f023 0201 	bic.w	r2, r3, #1
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f023 030a 	bic.w	r3, r3, #10
 8009b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	621a      	str	r2, [r3, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b087      	sub	sp, #28
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	f023 0210 	bic.w	r2, r3, #16
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	031b      	lsls	r3, r3, #12
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	621a      	str	r2, [r3, #32]
}
 8009bca:	bf00      	nop
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	f043 0307 	orr.w	r3, r3, #7
 8009bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	609a      	str	r2, [r3, #8]
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	021a      	lsls	r2, r3, #8
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	609a      	str	r2, [r3, #8]
}
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 031f 	and.w	r3, r3, #31
 8009c5e:	2201      	movs	r2, #1
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1a      	ldr	r2, [r3, #32]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	43db      	mvns	r3, r3
 8009c6e:	401a      	ands	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a1a      	ldr	r2, [r3, #32]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f003 031f 	and.w	r3, r3, #31
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	fa01 f303 	lsl.w	r3, r1, r3
 8009c84:	431a      	orrs	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	621a      	str	r2, [r3, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
	...

08009c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e05a      	b.n	8009d66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a21      	ldr	r2, [pc, #132]	@ (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d022      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cfc:	d01d      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a1d      	ldr	r2, [pc, #116]	@ (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d018      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a1a      	ldr	r2, [pc, #104]	@ (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00e      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a18      	ldr	r2, [pc, #96]	@ (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d009      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a17      	ldr	r2, [pc, #92]	@ (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d004      	beq.n	8009d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a15      	ldr	r2, [pc, #84]	@ (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d10c      	bne.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40010000 	.word	0x40010000
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	40010400 	.word	0x40010400
 8009d88:	40014000 	.word	0x40014000
 8009d8c:	40001800 	.word	0x40001800

08009d90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d101      	bne.n	8009dac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e03d      	b.n	8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e042      	b.n	8009ef4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7fc fffc 	bl	8006e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2224      	movs	r2, #36	@ 0x24
 8009e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fcdb 	bl	800a85c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	691a      	ldr	r2, [r3, #16]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	695a      	ldr	r2, [r3, #20]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68da      	ldr	r2, [r3, #12]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2220      	movs	r2, #32
 8009ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	4613      	mov	r3, r2
 8009f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d112      	bne.n	8009f3c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <HAL_UART_Receive_IT+0x26>
 8009f1c:	88fb      	ldrh	r3, [r7, #6]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e00b      	b.n	8009f3e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 faba 	bl	800a4ac <UART_Start_Receive_IT>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	e000      	b.n	8009f3e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009f3c:	2302      	movs	r3, #2
  }
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f7e:	f003 030f 	and.w	r3, r3, #15
 8009f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10f      	bne.n	8009fae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <HAL_UART_IRQHandler+0x66>
 8009f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fb99 	bl	800a6de <UART_Receive_IT>
      return;
 8009fac:	e25b      	b.n	800a466 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80de 	beq.w	800a174 <HAL_UART_IRQHandler+0x22c>
 8009fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d106      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80d1 	beq.w	800a174 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <HAL_UART_IRQHandler+0xae>
 8009fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d005      	beq.n	8009ff6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fee:	f043 0201 	orr.w	r2, r3, #1
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00b      	beq.n	800a01a <HAL_UART_IRQHandler+0xd2>
 800a002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a012:	f043 0202 	orr.w	r2, r3, #2
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <HAL_UART_IRQHandler+0xf6>
 800a026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a036:	f043 0204 	orr.w	r2, r3, #4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d011      	beq.n	800a06e <HAL_UART_IRQHandler+0x126>
 800a04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a066:	f043 0208 	orr.w	r2, r3, #8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 81f2 	beq.w	800a45c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a07c:	f003 0320 	and.w	r3, r3, #32
 800a080:	2b00      	cmp	r3, #0
 800a082:	d008      	beq.n	800a096 <HAL_UART_IRQHandler+0x14e>
 800a084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fb24 	bl	800a6de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a0:	2b40      	cmp	r3, #64	@ 0x40
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2301      	moveq	r3, #1
 800a0a6:	2300      	movne	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d103      	bne.n	800a0c2 <HAL_UART_IRQHandler+0x17a>
 800a0ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d04f      	beq.n	800a162 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fa2c 	bl	800a520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d2:	2b40      	cmp	r3, #64	@ 0x40
 800a0d4:	d141      	bne.n	800a15a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3314      	adds	r3, #20
 800a0dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a0ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a0f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a102:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a10e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a11a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1d9      	bne.n	800a0d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d013      	beq.n	800a152 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a12e:	4a7e      	ldr	r2, [pc, #504]	@ (800a328 <HAL_UART_IRQHandler+0x3e0>)
 800a130:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a136:	4618      	mov	r0, r3
 800a138:	f7fd fae9 	bl	800770e <HAL_DMA_Abort_IT>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d016      	beq.n	800a170 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a150:	e00e      	b.n	800a170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f994 	bl	800a480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a158:	e00a      	b.n	800a170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f990 	bl	800a480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a160:	e006      	b.n	800a170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f98c 	bl	800a480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a16e:	e175      	b.n	800a45c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a170:	bf00      	nop
    return;
 800a172:	e173      	b.n	800a45c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a178:	2b01      	cmp	r3, #1
 800a17a:	f040 814f 	bne.w	800a41c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a182:	f003 0310 	and.w	r3, r3, #16
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 8148 	beq.w	800a41c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 8141 	beq.w	800a41c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a19a:	2300      	movs	r3, #0
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60bb      	str	r3, [r7, #8]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	60bb      	str	r3, [r7, #8]
 800a1ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ba:	2b40      	cmp	r3, #64	@ 0x40
 800a1bc:	f040 80b6 	bne.w	800a32c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 8145 	beq.w	800a460 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a1da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	f080 813e 	bcs.w	800a460 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a1ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1f6:	f000 8088 	beq.w	800a30a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	330c      	adds	r3, #12
 800a200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a204:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	330c      	adds	r3, #12
 800a222:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a226:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a22a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a232:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a23e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1d9      	bne.n	800a1fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3314      	adds	r3, #20
 800a24c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a258:	f023 0301 	bic.w	r3, r3, #1
 800a25c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a26a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a26e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a270:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a272:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a27c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e1      	bne.n	800a246 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3314      	adds	r3, #20
 800a288:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a2a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a2a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a2ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a2ae:	e841 2300 	strex	r3, r2, [r1]
 800a2b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a2b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1e3      	bne.n	800a282 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	330c      	adds	r3, #12
 800a2ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a2d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2da:	f023 0310 	bic.w	r3, r3, #16
 800a2de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	330c      	adds	r3, #12
 800a2e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a2ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a2ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a2fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e3      	bne.n	800a2c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a304:	4618      	mov	r0, r3
 800a306:	f7fd f992 	bl	800762e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2202      	movs	r2, #2
 800a30e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a318:	b29b      	uxth	r3, r3
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f8b7 	bl	800a494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a326:	e09b      	b.n	800a460 <HAL_UART_IRQHandler+0x518>
 800a328:	0800a5e7 	.word	0x0800a5e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a334:	b29b      	uxth	r3, r3
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a340:	b29b      	uxth	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 808e 	beq.w	800a464 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8089 	beq.w	800a464 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	330c      	adds	r3, #12
 800a358:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a368:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	330c      	adds	r3, #12
 800a372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a376:	647a      	str	r2, [r7, #68]	@ 0x44
 800a378:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a37c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e3      	bne.n	800a352 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3314      	adds	r3, #20
 800a390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	623b      	str	r3, [r7, #32]
   return(result);
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	f023 0301 	bic.w	r3, r3, #1
 800a3a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3314      	adds	r3, #20
 800a3aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a3ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800a3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e3      	bne.n	800a38a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	330c      	adds	r3, #12
 800a3d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 0310 	bic.w	r3, r3, #16
 800a3e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	330c      	adds	r3, #12
 800a3f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a3f4:	61fa      	str	r2, [r7, #28]
 800a3f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f8:	69b9      	ldr	r1, [r7, #24]
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	e841 2300 	strex	r3, r2, [r1]
 800a400:	617b      	str	r3, [r7, #20]
   return(result);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e3      	bne.n	800a3d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a40e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f83d 	bl	800a494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a41a:	e023      	b.n	800a464 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a424:	2b00      	cmp	r3, #0
 800a426:	d009      	beq.n	800a43c <HAL_UART_IRQHandler+0x4f4>
 800a428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a42c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a430:	2b00      	cmp	r3, #0
 800a432:	d003      	beq.n	800a43c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8ea 	bl	800a60e <UART_Transmit_IT>
    return;
 800a43a:	e014      	b.n	800a466 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00e      	beq.n	800a466 <HAL_UART_IRQHandler+0x51e>
 800a448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a450:	2b00      	cmp	r3, #0
 800a452:	d008      	beq.n	800a466 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f92a 	bl	800a6ae <UART_EndTransmit_IT>
    return;
 800a45a:	e004      	b.n	800a466 <HAL_UART_IRQHandler+0x51e>
    return;
 800a45c:	bf00      	nop
 800a45e:	e002      	b.n	800a466 <HAL_UART_IRQHandler+0x51e>
      return;
 800a460:	bf00      	nop
 800a462:	e000      	b.n	800a466 <HAL_UART_IRQHandler+0x51e>
      return;
 800a464:	bf00      	nop
  }
}
 800a466:	37e8      	adds	r7, #232	@ 0xe8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	88fa      	ldrh	r2, [r7, #6]
 800a4c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	88fa      	ldrh	r2, [r7, #6]
 800a4ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2222      	movs	r2, #34	@ 0x22
 800a4d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d007      	beq.n	800a4f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68da      	ldr	r2, [r3, #12]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	695a      	ldr	r2, [r3, #20]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0201 	orr.w	r2, r2, #1
 800a500:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0220 	orr.w	r2, r2, #32
 800a510:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a520:	b480      	push	{r7}
 800a522:	b095      	sub	sp, #84	@ 0x54
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	330c      	adds	r3, #12
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a53e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a548:	643a      	str	r2, [r7, #64]	@ 0x40
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a54e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e5      	bne.n	800a528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3314      	adds	r3, #20
 800a562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	f023 0301 	bic.w	r3, r3, #1
 800a572:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3314      	adds	r3, #20
 800a57a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a57c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a57e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e5      	bne.n	800a55c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a594:	2b01      	cmp	r3, #1
 800a596:	d119      	bne.n	800a5cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	330c      	adds	r3, #12
 800a59e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	e853 3f00 	ldrex	r3, [r3]
 800a5a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f023 0310 	bic.w	r3, r3, #16
 800a5ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	330c      	adds	r3, #12
 800a5b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5b8:	61ba      	str	r2, [r7, #24]
 800a5ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	6979      	ldr	r1, [r7, #20]
 800a5be:	69ba      	ldr	r2, [r7, #24]
 800a5c0:	e841 2300 	strex	r3, r2, [r1]
 800a5c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e5      	bne.n	800a598 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a5da:	bf00      	nop
 800a5dc:	3754      	adds	r7, #84	@ 0x54
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff ff3d 	bl	800a480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a606:	bf00      	nop
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a60e:	b480      	push	{r7}
 800a610:	b085      	sub	sp, #20
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b21      	cmp	r3, #33	@ 0x21
 800a620:	d13e      	bne.n	800a6a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a62a:	d114      	bne.n	800a656 <UART_Transmit_IT+0x48>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d110      	bne.n	800a656 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a648:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	1c9a      	adds	r2, r3, #2
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	621a      	str	r2, [r3, #32]
 800a654:	e008      	b.n	800a668 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	1c59      	adds	r1, r3, #1
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6211      	str	r1, [r2, #32]
 800a660:	781a      	ldrb	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	3b01      	subs	r3, #1
 800a670:	b29b      	uxth	r3, r3
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	4619      	mov	r1, r3
 800a676:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10f      	bne.n	800a69c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a68a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a69a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	e000      	b.n	800a6a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a6a0:	2302      	movs	r3, #2
  }
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7ff fecc 	bl	800a46c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b08c      	sub	sp, #48	@ 0x30
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b22      	cmp	r3, #34	@ 0x22
 800a6f0:	f040 80ae 	bne.w	800a850 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6fc:	d117      	bne.n	800a72e <UART_Receive_IT+0x50>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d113      	bne.n	800a72e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a706:	2300      	movs	r3, #0
 800a708:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	b29b      	uxth	r3, r3
 800a718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a726:	1c9a      	adds	r2, r3, #2
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a72c:	e026      	b.n	800a77c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a732:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a734:	2300      	movs	r3, #0
 800a736:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a740:	d007      	beq.n	800a752 <UART_Receive_IT+0x74>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <UART_Receive_IT+0x82>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	e008      	b.n	800a772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a780:	b29b      	uxth	r3, r3
 800a782:	3b01      	subs	r3, #1
 800a784:	b29b      	uxth	r3, r3
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	4619      	mov	r1, r3
 800a78a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d15d      	bne.n	800a84c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68da      	ldr	r2, [r3, #12]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f022 0220 	bic.w	r2, r2, #32
 800a79e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695a      	ldr	r2, [r3, #20]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 0201 	bic.w	r2, r2, #1
 800a7be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d135      	bne.n	800a842 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	e853 3f00 	ldrex	r3, [r3]
 800a7ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f023 0310 	bic.w	r3, r3, #16
 800a7f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7fc:	623a      	str	r2, [r7, #32]
 800a7fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a800:	69f9      	ldr	r1, [r7, #28]
 800a802:	6a3a      	ldr	r2, [r7, #32]
 800a804:	e841 2300 	strex	r3, r2, [r1]
 800a808:	61bb      	str	r3, [r7, #24]
   return(result);
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e5      	bne.n	800a7dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0310 	and.w	r3, r3, #16
 800a81a:	2b10      	cmp	r3, #16
 800a81c:	d10a      	bne.n	800a834 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a81e:	2300      	movs	r3, #0
 800a820:	60fb      	str	r3, [r7, #12]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	60fb      	str	r3, [r7, #12]
 800a832:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7ff fe2a 	bl	800a494 <HAL_UARTEx_RxEventCallback>
 800a840:	e002      	b.n	800a848 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7f9 fcba 	bl	80041bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	e002      	b.n	800a852 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e000      	b.n	800a852 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a850:	2302      	movs	r3, #2
  }
}
 800a852:	4618      	mov	r0, r3
 800a854:	3730      	adds	r7, #48	@ 0x30
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a85c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a860:	b0c0      	sub	sp, #256	@ 0x100
 800a862:	af00      	add	r7, sp, #0
 800a864:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a878:	68d9      	ldr	r1, [r3, #12]
 800a87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	ea40 0301 	orr.w	r3, r0, r1
 800a884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	431a      	orrs	r2, r3
 800a894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	431a      	orrs	r2, r3
 800a89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a8b4:	f021 010c 	bic.w	r1, r1, #12
 800a8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8c2:	430b      	orrs	r3, r1
 800a8c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d6:	6999      	ldr	r1, [r3, #24]
 800a8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	ea40 0301 	orr.w	r3, r0, r1
 800a8e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	4b8f      	ldr	r3, [pc, #572]	@ (800ab28 <UART_SetConfig+0x2cc>)
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d005      	beq.n	800a8fc <UART_SetConfig+0xa0>
 800a8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	4b8d      	ldr	r3, [pc, #564]	@ (800ab2c <UART_SetConfig+0x2d0>)
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d104      	bne.n	800a906 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8fc:	f7fe fa32 	bl	8008d64 <HAL_RCC_GetPCLK2Freq>
 800a900:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a904:	e003      	b.n	800a90e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a906:	f7fe fa19 	bl	8008d3c <HAL_RCC_GetPCLK1Freq>
 800a90a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a918:	f040 810c 	bne.w	800ab34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a91c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a920:	2200      	movs	r2, #0
 800a922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a926:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a92a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	1891      	adds	r1, r2, r2
 800a934:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a936:	415b      	adcs	r3, r3
 800a938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a93a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a93e:	4621      	mov	r1, r4
 800a940:	eb12 0801 	adds.w	r8, r2, r1
 800a944:	4629      	mov	r1, r5
 800a946:	eb43 0901 	adc.w	r9, r3, r1
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a95a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a95e:	4690      	mov	r8, r2
 800a960:	4699      	mov	r9, r3
 800a962:	4623      	mov	r3, r4
 800a964:	eb18 0303 	adds.w	r3, r8, r3
 800a968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a96c:	462b      	mov	r3, r5
 800a96e:	eb49 0303 	adc.w	r3, r9, r3
 800a972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a982:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a98a:	460b      	mov	r3, r1
 800a98c:	18db      	adds	r3, r3, r3
 800a98e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a990:	4613      	mov	r3, r2
 800a992:	eb42 0303 	adc.w	r3, r2, r3
 800a996:	657b      	str	r3, [r7, #84]	@ 0x54
 800a998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a99c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a9a0:	f7f6 f972 	bl	8000c88 <__aeabi_uldivmod>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4b61      	ldr	r3, [pc, #388]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800a9aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a9ae:	095b      	lsrs	r3, r3, #5
 800a9b0:	011c      	lsls	r4, r3, #4
 800a9b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a9c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	1891      	adds	r1, r2, r2
 800a9ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a9cc:	415b      	adcs	r3, r3
 800a9ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a9d4:	4641      	mov	r1, r8
 800a9d6:	eb12 0a01 	adds.w	sl, r2, r1
 800a9da:	4649      	mov	r1, r9
 800a9dc:	eb43 0b01 	adc.w	fp, r3, r1
 800a9e0:	f04f 0200 	mov.w	r2, #0
 800a9e4:	f04f 0300 	mov.w	r3, #0
 800a9e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a9ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a9f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9f4:	4692      	mov	sl, r2
 800a9f6:	469b      	mov	fp, r3
 800a9f8:	4643      	mov	r3, r8
 800a9fa:	eb1a 0303 	adds.w	r3, sl, r3
 800a9fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa02:	464b      	mov	r3, r9
 800aa04:	eb4b 0303 	adc.w	r3, fp, r3
 800aa08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aa1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aa20:	460b      	mov	r3, r1
 800aa22:	18db      	adds	r3, r3, r3
 800aa24:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa26:	4613      	mov	r3, r2
 800aa28:	eb42 0303 	adc.w	r3, r2, r3
 800aa2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aa32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aa36:	f7f6 f927 	bl	8000c88 <__aeabi_uldivmod>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4b3b      	ldr	r3, [pc, #236]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800aa42:	fba3 2301 	umull	r2, r3, r3, r1
 800aa46:	095b      	lsrs	r3, r3, #5
 800aa48:	2264      	movs	r2, #100	@ 0x64
 800aa4a:	fb02 f303 	mul.w	r3, r2, r3
 800aa4e:	1acb      	subs	r3, r1, r3
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aa56:	4b36      	ldr	r3, [pc, #216]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800aa58:	fba3 2302 	umull	r2, r3, r3, r2
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aa64:	441c      	add	r4, r3
 800aa66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aa74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aa78:	4642      	mov	r2, r8
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	1891      	adds	r1, r2, r2
 800aa7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aa80:	415b      	adcs	r3, r3
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aa88:	4641      	mov	r1, r8
 800aa8a:	1851      	adds	r1, r2, r1
 800aa8c:	6339      	str	r1, [r7, #48]	@ 0x30
 800aa8e:	4649      	mov	r1, r9
 800aa90:	414b      	adcs	r3, r1
 800aa92:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa94:	f04f 0200 	mov.w	r2, #0
 800aa98:	f04f 0300 	mov.w	r3, #0
 800aa9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	00cb      	lsls	r3, r1, #3
 800aaa4:	4651      	mov	r1, sl
 800aaa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaaa:	4651      	mov	r1, sl
 800aaac:	00ca      	lsls	r2, r1, #3
 800aaae:	4610      	mov	r0, r2
 800aab0:	4619      	mov	r1, r3
 800aab2:	4603      	mov	r3, r0
 800aab4:	4642      	mov	r2, r8
 800aab6:	189b      	adds	r3, r3, r2
 800aab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aabc:	464b      	mov	r3, r9
 800aabe:	460a      	mov	r2, r1
 800aac0:	eb42 0303 	adc.w	r3, r2, r3
 800aac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aad4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aadc:	460b      	mov	r3, r1
 800aade:	18db      	adds	r3, r3, r3
 800aae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aae2:	4613      	mov	r3, r2
 800aae4:	eb42 0303 	adc.w	r3, r2, r3
 800aae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aaee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aaf2:	f7f6 f8c9 	bl	8000c88 <__aeabi_uldivmod>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4b0d      	ldr	r3, [pc, #52]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800aafc:	fba3 1302 	umull	r1, r3, r3, r2
 800ab00:	095b      	lsrs	r3, r3, #5
 800ab02:	2164      	movs	r1, #100	@ 0x64
 800ab04:	fb01 f303 	mul.w	r3, r1, r3
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	3332      	adds	r3, #50	@ 0x32
 800ab0e:	4a08      	ldr	r2, [pc, #32]	@ (800ab30 <UART_SetConfig+0x2d4>)
 800ab10:	fba2 2303 	umull	r2, r3, r2, r3
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	f003 0207 	and.w	r2, r3, #7
 800ab1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4422      	add	r2, r4
 800ab22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab24:	e106      	b.n	800ad34 <UART_SetConfig+0x4d8>
 800ab26:	bf00      	nop
 800ab28:	40011000 	.word	0x40011000
 800ab2c:	40011400 	.word	0x40011400
 800ab30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ab42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ab46:	4642      	mov	r2, r8
 800ab48:	464b      	mov	r3, r9
 800ab4a:	1891      	adds	r1, r2, r2
 800ab4c:	6239      	str	r1, [r7, #32]
 800ab4e:	415b      	adcs	r3, r3
 800ab50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab56:	4641      	mov	r1, r8
 800ab58:	1854      	adds	r4, r2, r1
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	eb43 0501 	adc.w	r5, r3, r1
 800ab60:	f04f 0200 	mov.w	r2, #0
 800ab64:	f04f 0300 	mov.w	r3, #0
 800ab68:	00eb      	lsls	r3, r5, #3
 800ab6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab6e:	00e2      	lsls	r2, r4, #3
 800ab70:	4614      	mov	r4, r2
 800ab72:	461d      	mov	r5, r3
 800ab74:	4643      	mov	r3, r8
 800ab76:	18e3      	adds	r3, r4, r3
 800ab78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab7c:	464b      	mov	r3, r9
 800ab7e:	eb45 0303 	adc.w	r3, r5, r3
 800ab82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ab96:	f04f 0200 	mov.w	r2, #0
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aba2:	4629      	mov	r1, r5
 800aba4:	008b      	lsls	r3, r1, #2
 800aba6:	4621      	mov	r1, r4
 800aba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abac:	4621      	mov	r1, r4
 800abae:	008a      	lsls	r2, r1, #2
 800abb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800abb4:	f7f6 f868 	bl	8000c88 <__aeabi_uldivmod>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4b60      	ldr	r3, [pc, #384]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800abbe:	fba3 2302 	umull	r2, r3, r3, r2
 800abc2:	095b      	lsrs	r3, r3, #5
 800abc4:	011c      	lsls	r4, r3, #4
 800abc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800abd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800abd8:	4642      	mov	r2, r8
 800abda:	464b      	mov	r3, r9
 800abdc:	1891      	adds	r1, r2, r2
 800abde:	61b9      	str	r1, [r7, #24]
 800abe0:	415b      	adcs	r3, r3
 800abe2:	61fb      	str	r3, [r7, #28]
 800abe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abe8:	4641      	mov	r1, r8
 800abea:	1851      	adds	r1, r2, r1
 800abec:	6139      	str	r1, [r7, #16]
 800abee:	4649      	mov	r1, r9
 800abf0:	414b      	adcs	r3, r1
 800abf2:	617b      	str	r3, [r7, #20]
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac00:	4659      	mov	r1, fp
 800ac02:	00cb      	lsls	r3, r1, #3
 800ac04:	4651      	mov	r1, sl
 800ac06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac0a:	4651      	mov	r1, sl
 800ac0c:	00ca      	lsls	r2, r1, #3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	4619      	mov	r1, r3
 800ac12:	4603      	mov	r3, r0
 800ac14:	4642      	mov	r2, r8
 800ac16:	189b      	adds	r3, r3, r2
 800ac18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac1c:	464b      	mov	r3, r9
 800ac1e:	460a      	mov	r2, r1
 800ac20:	eb42 0303 	adc.w	r3, r2, r3
 800ac24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ac34:	f04f 0200 	mov.w	r2, #0
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ac40:	4649      	mov	r1, r9
 800ac42:	008b      	lsls	r3, r1, #2
 800ac44:	4641      	mov	r1, r8
 800ac46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac4a:	4641      	mov	r1, r8
 800ac4c:	008a      	lsls	r2, r1, #2
 800ac4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ac52:	f7f6 f819 	bl	8000c88 <__aeabi_uldivmod>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4b38      	ldr	r3, [pc, #224]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ac5e:	fba3 2301 	umull	r2, r3, r3, r1
 800ac62:	095b      	lsrs	r3, r3, #5
 800ac64:	2264      	movs	r2, #100	@ 0x64
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	1acb      	subs	r3, r1, r3
 800ac6c:	011b      	lsls	r3, r3, #4
 800ac6e:	3332      	adds	r3, #50	@ 0x32
 800ac70:	4a33      	ldr	r2, [pc, #204]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	095b      	lsrs	r3, r3, #5
 800ac78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac7c:	441c      	add	r4, r3
 800ac7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac82:	2200      	movs	r2, #0
 800ac84:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac86:	677a      	str	r2, [r7, #116]	@ 0x74
 800ac88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ac8c:	4642      	mov	r2, r8
 800ac8e:	464b      	mov	r3, r9
 800ac90:	1891      	adds	r1, r2, r2
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	415b      	adcs	r3, r3
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	1851      	adds	r1, r2, r1
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	4649      	mov	r1, r9
 800aca4:	414b      	adcs	r3, r1
 800aca6:	607b      	str	r3, [r7, #4]
 800aca8:	f04f 0200 	mov.w	r2, #0
 800acac:	f04f 0300 	mov.w	r3, #0
 800acb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800acb4:	4659      	mov	r1, fp
 800acb6:	00cb      	lsls	r3, r1, #3
 800acb8:	4651      	mov	r1, sl
 800acba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acbe:	4651      	mov	r1, sl
 800acc0:	00ca      	lsls	r2, r1, #3
 800acc2:	4610      	mov	r0, r2
 800acc4:	4619      	mov	r1, r3
 800acc6:	4603      	mov	r3, r0
 800acc8:	4642      	mov	r2, r8
 800acca:	189b      	adds	r3, r3, r2
 800accc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acce:	464b      	mov	r3, r9
 800acd0:	460a      	mov	r2, r1
 800acd2:	eb42 0303 	adc.w	r3, r2, r3
 800acd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	663b      	str	r3, [r7, #96]	@ 0x60
 800ace2:	667a      	str	r2, [r7, #100]	@ 0x64
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	f04f 0300 	mov.w	r3, #0
 800acec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800acf0:	4649      	mov	r1, r9
 800acf2:	008b      	lsls	r3, r1, #2
 800acf4:	4641      	mov	r1, r8
 800acf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acfa:	4641      	mov	r1, r8
 800acfc:	008a      	lsls	r2, r1, #2
 800acfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad02:	f7f5 ffc1 	bl	8000c88 <__aeabi_uldivmod>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ad0c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad10:	095b      	lsrs	r3, r3, #5
 800ad12:	2164      	movs	r1, #100	@ 0x64
 800ad14:	fb01 f303 	mul.w	r3, r1, r3
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	3332      	adds	r3, #50	@ 0x32
 800ad1e:	4a08      	ldr	r2, [pc, #32]	@ (800ad40 <UART_SetConfig+0x4e4>)
 800ad20:	fba2 2303 	umull	r2, r3, r2, r3
 800ad24:	095b      	lsrs	r3, r3, #5
 800ad26:	f003 020f 	and.w	r2, r3, #15
 800ad2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4422      	add	r2, r4
 800ad32:	609a      	str	r2, [r3, #8]
}
 800ad34:	bf00      	nop
 800ad36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad40:	51eb851f 	.word	0x51eb851f

0800ad44 <atof>:
 800ad44:	2100      	movs	r1, #0
 800ad46:	f000 be0d 	b.w	800b964 <strtod>

0800ad4a <atoi>:
 800ad4a:	220a      	movs	r2, #10
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	f000 be91 	b.w	800ba74 <strtol>

0800ad52 <sulp>:
 800ad52:	b570      	push	{r4, r5, r6, lr}
 800ad54:	4604      	mov	r4, r0
 800ad56:	460d      	mov	r5, r1
 800ad58:	ec45 4b10 	vmov	d0, r4, r5
 800ad5c:	4616      	mov	r6, r2
 800ad5e:	f003 fd5b 	bl	800e818 <__ulp>
 800ad62:	ec51 0b10 	vmov	r0, r1, d0
 800ad66:	b17e      	cbz	r6, 800ad88 <sulp+0x36>
 800ad68:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad6c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dd09      	ble.n	800ad88 <sulp+0x36>
 800ad74:	051b      	lsls	r3, r3, #20
 800ad76:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ad7a:	2400      	movs	r4, #0
 800ad7c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ad80:	4622      	mov	r2, r4
 800ad82:	462b      	mov	r3, r5
 800ad84:	f7f5 fc38 	bl	80005f8 <__aeabi_dmul>
 800ad88:	ec41 0b10 	vmov	d0, r0, r1
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad90 <_strtod_l>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	b09f      	sub	sp, #124	@ 0x7c
 800ad96:	460c      	mov	r4, r1
 800ad98:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad9e:	9005      	str	r0, [sp, #20]
 800ada0:	f04f 0a00 	mov.w	sl, #0
 800ada4:	f04f 0b00 	mov.w	fp, #0
 800ada8:	460a      	mov	r2, r1
 800adaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800adac:	7811      	ldrb	r1, [r2, #0]
 800adae:	292b      	cmp	r1, #43	@ 0x2b
 800adb0:	d04a      	beq.n	800ae48 <_strtod_l+0xb8>
 800adb2:	d838      	bhi.n	800ae26 <_strtod_l+0x96>
 800adb4:	290d      	cmp	r1, #13
 800adb6:	d832      	bhi.n	800ae1e <_strtod_l+0x8e>
 800adb8:	2908      	cmp	r1, #8
 800adba:	d832      	bhi.n	800ae22 <_strtod_l+0x92>
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d03b      	beq.n	800ae38 <_strtod_l+0xa8>
 800adc0:	2200      	movs	r2, #0
 800adc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800adc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800adc6:	782a      	ldrb	r2, [r5, #0]
 800adc8:	2a30      	cmp	r2, #48	@ 0x30
 800adca:	f040 80b3 	bne.w	800af34 <_strtod_l+0x1a4>
 800adce:	786a      	ldrb	r2, [r5, #1]
 800add0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800add4:	2a58      	cmp	r2, #88	@ 0x58
 800add6:	d16e      	bne.n	800aeb6 <_strtod_l+0x126>
 800add8:	9302      	str	r3, [sp, #8]
 800adda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	ab1a      	add	r3, sp, #104	@ 0x68
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	4a8e      	ldr	r2, [pc, #568]	@ (800b01c <_strtod_l+0x28c>)
 800ade4:	9805      	ldr	r0, [sp, #20]
 800ade6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ade8:	a919      	add	r1, sp, #100	@ 0x64
 800adea:	f002 fe07 	bl	800d9fc <__gethex>
 800adee:	f010 060f 	ands.w	r6, r0, #15
 800adf2:	4604      	mov	r4, r0
 800adf4:	d005      	beq.n	800ae02 <_strtod_l+0x72>
 800adf6:	2e06      	cmp	r6, #6
 800adf8:	d128      	bne.n	800ae4c <_strtod_l+0xbc>
 800adfa:	3501      	adds	r5, #1
 800adfc:	2300      	movs	r3, #0
 800adfe:	9519      	str	r5, [sp, #100]	@ 0x64
 800ae00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f040 858e 	bne.w	800b926 <_strtod_l+0xb96>
 800ae0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae0c:	b1cb      	cbz	r3, 800ae42 <_strtod_l+0xb2>
 800ae0e:	4652      	mov	r2, sl
 800ae10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ae14:	ec43 2b10 	vmov	d0, r2, r3
 800ae18:	b01f      	add	sp, #124	@ 0x7c
 800ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1e:	2920      	cmp	r1, #32
 800ae20:	d1ce      	bne.n	800adc0 <_strtod_l+0x30>
 800ae22:	3201      	adds	r2, #1
 800ae24:	e7c1      	b.n	800adaa <_strtod_l+0x1a>
 800ae26:	292d      	cmp	r1, #45	@ 0x2d
 800ae28:	d1ca      	bne.n	800adc0 <_strtod_l+0x30>
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae2e:	1c51      	adds	r1, r2, #1
 800ae30:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae32:	7852      	ldrb	r2, [r2, #1]
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	d1c5      	bne.n	800adc4 <_strtod_l+0x34>
 800ae38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 8570 	bne.w	800b922 <_strtod_l+0xb92>
 800ae42:	4652      	mov	r2, sl
 800ae44:	465b      	mov	r3, fp
 800ae46:	e7e5      	b.n	800ae14 <_strtod_l+0x84>
 800ae48:	2100      	movs	r1, #0
 800ae4a:	e7ef      	b.n	800ae2c <_strtod_l+0x9c>
 800ae4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ae4e:	b13a      	cbz	r2, 800ae60 <_strtod_l+0xd0>
 800ae50:	2135      	movs	r1, #53	@ 0x35
 800ae52:	a81c      	add	r0, sp, #112	@ 0x70
 800ae54:	f003 fdda 	bl	800ea0c <__copybits>
 800ae58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae5a:	9805      	ldr	r0, [sp, #20]
 800ae5c:	f003 f9a8 	bl	800e1b0 <_Bfree>
 800ae60:	3e01      	subs	r6, #1
 800ae62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ae64:	2e04      	cmp	r6, #4
 800ae66:	d806      	bhi.n	800ae76 <_strtod_l+0xe6>
 800ae68:	e8df f006 	tbb	[pc, r6]
 800ae6c:	201d0314 	.word	0x201d0314
 800ae70:	14          	.byte	0x14
 800ae71:	00          	.byte	0x00
 800ae72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ae76:	05e1      	lsls	r1, r4, #23
 800ae78:	bf48      	it	mi
 800ae7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ae7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae82:	0d1b      	lsrs	r3, r3, #20
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1bb      	bne.n	800ae02 <_strtod_l+0x72>
 800ae8a:	f001 fe4f 	bl	800cb2c <__errno>
 800ae8e:	2322      	movs	r3, #34	@ 0x22
 800ae90:	6003      	str	r3, [r0, #0]
 800ae92:	e7b6      	b.n	800ae02 <_strtod_l+0x72>
 800ae94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aea0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aea4:	e7e7      	b.n	800ae76 <_strtod_l+0xe6>
 800aea6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b024 <_strtod_l+0x294>
 800aeaa:	e7e4      	b.n	800ae76 <_strtod_l+0xe6>
 800aeac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aeb0:	f04f 3aff 	mov.w	sl, #4294967295
 800aeb4:	e7df      	b.n	800ae76 <_strtod_l+0xe6>
 800aeb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	9219      	str	r2, [sp, #100]	@ 0x64
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b30      	cmp	r3, #48	@ 0x30
 800aec0:	d0f9      	beq.n	800aeb6 <_strtod_l+0x126>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d09d      	beq.n	800ae02 <_strtod_l+0x72>
 800aec6:	2301      	movs	r3, #1
 800aec8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aecc:	930c      	str	r3, [sp, #48]	@ 0x30
 800aece:	2300      	movs	r3, #0
 800aed0:	9308      	str	r3, [sp, #32]
 800aed2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aed4:	461f      	mov	r7, r3
 800aed6:	220a      	movs	r2, #10
 800aed8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aeda:	7805      	ldrb	r5, [r0, #0]
 800aedc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aee0:	b2d9      	uxtb	r1, r3
 800aee2:	2909      	cmp	r1, #9
 800aee4:	d928      	bls.n	800af38 <_strtod_l+0x1a8>
 800aee6:	494e      	ldr	r1, [pc, #312]	@ (800b020 <_strtod_l+0x290>)
 800aee8:	2201      	movs	r2, #1
 800aeea:	f001 fd66 	bl	800c9ba <strncmp>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d032      	beq.n	800af58 <_strtod_l+0x1c8>
 800aef2:	2000      	movs	r0, #0
 800aef4:	462a      	mov	r2, r5
 800aef6:	4681      	mov	r9, r0
 800aef8:	463d      	mov	r5, r7
 800aefa:	4603      	mov	r3, r0
 800aefc:	2a65      	cmp	r2, #101	@ 0x65
 800aefe:	d001      	beq.n	800af04 <_strtod_l+0x174>
 800af00:	2a45      	cmp	r2, #69	@ 0x45
 800af02:	d114      	bne.n	800af2e <_strtod_l+0x19e>
 800af04:	b91d      	cbnz	r5, 800af0e <_strtod_l+0x17e>
 800af06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af08:	4302      	orrs	r2, r0
 800af0a:	d095      	beq.n	800ae38 <_strtod_l+0xa8>
 800af0c:	2500      	movs	r5, #0
 800af0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800af10:	1c62      	adds	r2, r4, #1
 800af12:	9219      	str	r2, [sp, #100]	@ 0x64
 800af14:	7862      	ldrb	r2, [r4, #1]
 800af16:	2a2b      	cmp	r2, #43	@ 0x2b
 800af18:	d077      	beq.n	800b00a <_strtod_l+0x27a>
 800af1a:	2a2d      	cmp	r2, #45	@ 0x2d
 800af1c:	d07b      	beq.n	800b016 <_strtod_l+0x286>
 800af1e:	f04f 0c00 	mov.w	ip, #0
 800af22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800af26:	2909      	cmp	r1, #9
 800af28:	f240 8082 	bls.w	800b030 <_strtod_l+0x2a0>
 800af2c:	9419      	str	r4, [sp, #100]	@ 0x64
 800af2e:	f04f 0800 	mov.w	r8, #0
 800af32:	e0a2      	b.n	800b07a <_strtod_l+0x2ea>
 800af34:	2300      	movs	r3, #0
 800af36:	e7c7      	b.n	800aec8 <_strtod_l+0x138>
 800af38:	2f08      	cmp	r7, #8
 800af3a:	bfd5      	itete	le
 800af3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800af3e:	9908      	ldrgt	r1, [sp, #32]
 800af40:	fb02 3301 	mlale	r3, r2, r1, r3
 800af44:	fb02 3301 	mlagt	r3, r2, r1, r3
 800af48:	f100 0001 	add.w	r0, r0, #1
 800af4c:	bfd4      	ite	le
 800af4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800af50:	9308      	strgt	r3, [sp, #32]
 800af52:	3701      	adds	r7, #1
 800af54:	9019      	str	r0, [sp, #100]	@ 0x64
 800af56:	e7bf      	b.n	800aed8 <_strtod_l+0x148>
 800af58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	9219      	str	r2, [sp, #100]	@ 0x64
 800af5e:	785a      	ldrb	r2, [r3, #1]
 800af60:	b37f      	cbz	r7, 800afc2 <_strtod_l+0x232>
 800af62:	4681      	mov	r9, r0
 800af64:	463d      	mov	r5, r7
 800af66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d912      	bls.n	800af94 <_strtod_l+0x204>
 800af6e:	2301      	movs	r3, #1
 800af70:	e7c4      	b.n	800aefc <_strtod_l+0x16c>
 800af72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	9219      	str	r2, [sp, #100]	@ 0x64
 800af78:	785a      	ldrb	r2, [r3, #1]
 800af7a:	3001      	adds	r0, #1
 800af7c:	2a30      	cmp	r2, #48	@ 0x30
 800af7e:	d0f8      	beq.n	800af72 <_strtod_l+0x1e2>
 800af80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800af84:	2b08      	cmp	r3, #8
 800af86:	f200 84d3 	bhi.w	800b930 <_strtod_l+0xba0>
 800af8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af8e:	4681      	mov	r9, r0
 800af90:	2000      	movs	r0, #0
 800af92:	4605      	mov	r5, r0
 800af94:	3a30      	subs	r2, #48	@ 0x30
 800af96:	f100 0301 	add.w	r3, r0, #1
 800af9a:	d02a      	beq.n	800aff2 <_strtod_l+0x262>
 800af9c:	4499      	add	r9, r3
 800af9e:	eb00 0c05 	add.w	ip, r0, r5
 800afa2:	462b      	mov	r3, r5
 800afa4:	210a      	movs	r1, #10
 800afa6:	4563      	cmp	r3, ip
 800afa8:	d10d      	bne.n	800afc6 <_strtod_l+0x236>
 800afaa:	1c69      	adds	r1, r5, #1
 800afac:	4401      	add	r1, r0
 800afae:	4428      	add	r0, r5
 800afb0:	2808      	cmp	r0, #8
 800afb2:	dc16      	bgt.n	800afe2 <_strtod_l+0x252>
 800afb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800afb6:	230a      	movs	r3, #10
 800afb8:	fb03 2300 	mla	r3, r3, r0, r2
 800afbc:	930a      	str	r3, [sp, #40]	@ 0x28
 800afbe:	2300      	movs	r3, #0
 800afc0:	e018      	b.n	800aff4 <_strtod_l+0x264>
 800afc2:	4638      	mov	r0, r7
 800afc4:	e7da      	b.n	800af7c <_strtod_l+0x1ec>
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	f103 0301 	add.w	r3, r3, #1
 800afcc:	dc03      	bgt.n	800afd6 <_strtod_l+0x246>
 800afce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800afd0:	434e      	muls	r6, r1
 800afd2:	960a      	str	r6, [sp, #40]	@ 0x28
 800afd4:	e7e7      	b.n	800afa6 <_strtod_l+0x216>
 800afd6:	2b10      	cmp	r3, #16
 800afd8:	bfde      	ittt	le
 800afda:	9e08      	ldrle	r6, [sp, #32]
 800afdc:	434e      	mulle	r6, r1
 800afde:	9608      	strle	r6, [sp, #32]
 800afe0:	e7e1      	b.n	800afa6 <_strtod_l+0x216>
 800afe2:	280f      	cmp	r0, #15
 800afe4:	dceb      	bgt.n	800afbe <_strtod_l+0x22e>
 800afe6:	9808      	ldr	r0, [sp, #32]
 800afe8:	230a      	movs	r3, #10
 800afea:	fb03 2300 	mla	r3, r3, r0, r2
 800afee:	9308      	str	r3, [sp, #32]
 800aff0:	e7e5      	b.n	800afbe <_strtod_l+0x22e>
 800aff2:	4629      	mov	r1, r5
 800aff4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aff6:	1c50      	adds	r0, r2, #1
 800aff8:	9019      	str	r0, [sp, #100]	@ 0x64
 800affa:	7852      	ldrb	r2, [r2, #1]
 800affc:	4618      	mov	r0, r3
 800affe:	460d      	mov	r5, r1
 800b000:	e7b1      	b.n	800af66 <_strtod_l+0x1d6>
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	2301      	movs	r3, #1
 800b008:	e77d      	b.n	800af06 <_strtod_l+0x176>
 800b00a:	f04f 0c00 	mov.w	ip, #0
 800b00e:	1ca2      	adds	r2, r4, #2
 800b010:	9219      	str	r2, [sp, #100]	@ 0x64
 800b012:	78a2      	ldrb	r2, [r4, #2]
 800b014:	e785      	b.n	800af22 <_strtod_l+0x192>
 800b016:	f04f 0c01 	mov.w	ip, #1
 800b01a:	e7f8      	b.n	800b00e <_strtod_l+0x27e>
 800b01c:	08011228 	.word	0x08011228
 800b020:	08011210 	.word	0x08011210
 800b024:	7ff00000 	.word	0x7ff00000
 800b028:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b02a:	1c51      	adds	r1, r2, #1
 800b02c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b02e:	7852      	ldrb	r2, [r2, #1]
 800b030:	2a30      	cmp	r2, #48	@ 0x30
 800b032:	d0f9      	beq.n	800b028 <_strtod_l+0x298>
 800b034:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b038:	2908      	cmp	r1, #8
 800b03a:	f63f af78 	bhi.w	800af2e <_strtod_l+0x19e>
 800b03e:	3a30      	subs	r2, #48	@ 0x30
 800b040:	920e      	str	r2, [sp, #56]	@ 0x38
 800b042:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b044:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b046:	f04f 080a 	mov.w	r8, #10
 800b04a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b04c:	1c56      	adds	r6, r2, #1
 800b04e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b050:	7852      	ldrb	r2, [r2, #1]
 800b052:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b056:	f1be 0f09 	cmp.w	lr, #9
 800b05a:	d939      	bls.n	800b0d0 <_strtod_l+0x340>
 800b05c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b05e:	1a76      	subs	r6, r6, r1
 800b060:	2e08      	cmp	r6, #8
 800b062:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b066:	dc03      	bgt.n	800b070 <_strtod_l+0x2e0>
 800b068:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b06a:	4588      	cmp	r8, r1
 800b06c:	bfa8      	it	ge
 800b06e:	4688      	movge	r8, r1
 800b070:	f1bc 0f00 	cmp.w	ip, #0
 800b074:	d001      	beq.n	800b07a <_strtod_l+0x2ea>
 800b076:	f1c8 0800 	rsb	r8, r8, #0
 800b07a:	2d00      	cmp	r5, #0
 800b07c:	d14e      	bne.n	800b11c <_strtod_l+0x38c>
 800b07e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b080:	4308      	orrs	r0, r1
 800b082:	f47f aebe 	bne.w	800ae02 <_strtod_l+0x72>
 800b086:	2b00      	cmp	r3, #0
 800b088:	f47f aed6 	bne.w	800ae38 <_strtod_l+0xa8>
 800b08c:	2a69      	cmp	r2, #105	@ 0x69
 800b08e:	d028      	beq.n	800b0e2 <_strtod_l+0x352>
 800b090:	dc25      	bgt.n	800b0de <_strtod_l+0x34e>
 800b092:	2a49      	cmp	r2, #73	@ 0x49
 800b094:	d025      	beq.n	800b0e2 <_strtod_l+0x352>
 800b096:	2a4e      	cmp	r2, #78	@ 0x4e
 800b098:	f47f aece 	bne.w	800ae38 <_strtod_l+0xa8>
 800b09c:	499b      	ldr	r1, [pc, #620]	@ (800b30c <_strtod_l+0x57c>)
 800b09e:	a819      	add	r0, sp, #100	@ 0x64
 800b0a0:	f002 fece 	bl	800de40 <__match>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f43f aec7 	beq.w	800ae38 <_strtod_l+0xa8>
 800b0aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	2b28      	cmp	r3, #40	@ 0x28
 800b0b0:	d12e      	bne.n	800b110 <_strtod_l+0x380>
 800b0b2:	4997      	ldr	r1, [pc, #604]	@ (800b310 <_strtod_l+0x580>)
 800b0b4:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0b6:	a819      	add	r0, sp, #100	@ 0x64
 800b0b8:	f002 fed6 	bl	800de68 <__hexnan>
 800b0bc:	2805      	cmp	r0, #5
 800b0be:	d127      	bne.n	800b110 <_strtod_l+0x380>
 800b0c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b0c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b0ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b0ce:	e698      	b.n	800ae02 <_strtod_l+0x72>
 800b0d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b0d2:	fb08 2101 	mla	r1, r8, r1, r2
 800b0d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b0da:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0dc:	e7b5      	b.n	800b04a <_strtod_l+0x2ba>
 800b0de:	2a6e      	cmp	r2, #110	@ 0x6e
 800b0e0:	e7da      	b.n	800b098 <_strtod_l+0x308>
 800b0e2:	498c      	ldr	r1, [pc, #560]	@ (800b314 <_strtod_l+0x584>)
 800b0e4:	a819      	add	r0, sp, #100	@ 0x64
 800b0e6:	f002 feab 	bl	800de40 <__match>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	f43f aea4 	beq.w	800ae38 <_strtod_l+0xa8>
 800b0f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0f2:	4989      	ldr	r1, [pc, #548]	@ (800b318 <_strtod_l+0x588>)
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	a819      	add	r0, sp, #100	@ 0x64
 800b0f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b0fa:	f002 fea1 	bl	800de40 <__match>
 800b0fe:	b910      	cbnz	r0, 800b106 <_strtod_l+0x376>
 800b100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b102:	3301      	adds	r3, #1
 800b104:	9319      	str	r3, [sp, #100]	@ 0x64
 800b106:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b328 <_strtod_l+0x598>
 800b10a:	f04f 0a00 	mov.w	sl, #0
 800b10e:	e678      	b.n	800ae02 <_strtod_l+0x72>
 800b110:	4882      	ldr	r0, [pc, #520]	@ (800b31c <_strtod_l+0x58c>)
 800b112:	f001 fd49 	bl	800cba8 <nan>
 800b116:	ec5b ab10 	vmov	sl, fp, d0
 800b11a:	e672      	b.n	800ae02 <_strtod_l+0x72>
 800b11c:	eba8 0309 	sub.w	r3, r8, r9
 800b120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b122:	9309      	str	r3, [sp, #36]	@ 0x24
 800b124:	2f00      	cmp	r7, #0
 800b126:	bf08      	it	eq
 800b128:	462f      	moveq	r7, r5
 800b12a:	2d10      	cmp	r5, #16
 800b12c:	462c      	mov	r4, r5
 800b12e:	bfa8      	it	ge
 800b130:	2410      	movge	r4, #16
 800b132:	f7f5 f9e7 	bl	8000504 <__aeabi_ui2d>
 800b136:	2d09      	cmp	r5, #9
 800b138:	4682      	mov	sl, r0
 800b13a:	468b      	mov	fp, r1
 800b13c:	dc13      	bgt.n	800b166 <_strtod_l+0x3d6>
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	2b00      	cmp	r3, #0
 800b142:	f43f ae5e 	beq.w	800ae02 <_strtod_l+0x72>
 800b146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b148:	dd78      	ble.n	800b23c <_strtod_l+0x4ac>
 800b14a:	2b16      	cmp	r3, #22
 800b14c:	dc5f      	bgt.n	800b20e <_strtod_l+0x47e>
 800b14e:	4974      	ldr	r1, [pc, #464]	@ (800b320 <_strtod_l+0x590>)
 800b150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b158:	4652      	mov	r2, sl
 800b15a:	465b      	mov	r3, fp
 800b15c:	f7f5 fa4c 	bl	80005f8 <__aeabi_dmul>
 800b160:	4682      	mov	sl, r0
 800b162:	468b      	mov	fp, r1
 800b164:	e64d      	b.n	800ae02 <_strtod_l+0x72>
 800b166:	4b6e      	ldr	r3, [pc, #440]	@ (800b320 <_strtod_l+0x590>)
 800b168:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b16c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b170:	f7f5 fa42 	bl	80005f8 <__aeabi_dmul>
 800b174:	4682      	mov	sl, r0
 800b176:	9808      	ldr	r0, [sp, #32]
 800b178:	468b      	mov	fp, r1
 800b17a:	f7f5 f9c3 	bl	8000504 <__aeabi_ui2d>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4650      	mov	r0, sl
 800b184:	4659      	mov	r1, fp
 800b186:	f7f5 f881 	bl	800028c <__adddf3>
 800b18a:	2d0f      	cmp	r5, #15
 800b18c:	4682      	mov	sl, r0
 800b18e:	468b      	mov	fp, r1
 800b190:	ddd5      	ble.n	800b13e <_strtod_l+0x3ae>
 800b192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b194:	1b2c      	subs	r4, r5, r4
 800b196:	441c      	add	r4, r3
 800b198:	2c00      	cmp	r4, #0
 800b19a:	f340 8096 	ble.w	800b2ca <_strtod_l+0x53a>
 800b19e:	f014 030f 	ands.w	r3, r4, #15
 800b1a2:	d00a      	beq.n	800b1ba <_strtod_l+0x42a>
 800b1a4:	495e      	ldr	r1, [pc, #376]	@ (800b320 <_strtod_l+0x590>)
 800b1a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	465b      	mov	r3, fp
 800b1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1b2:	f7f5 fa21 	bl	80005f8 <__aeabi_dmul>
 800b1b6:	4682      	mov	sl, r0
 800b1b8:	468b      	mov	fp, r1
 800b1ba:	f034 040f 	bics.w	r4, r4, #15
 800b1be:	d073      	beq.n	800b2a8 <_strtod_l+0x518>
 800b1c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b1c4:	dd48      	ble.n	800b258 <_strtod_l+0x4c8>
 800b1c6:	2400      	movs	r4, #0
 800b1c8:	46a0      	mov	r8, r4
 800b1ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800b1cc:	46a1      	mov	r9, r4
 800b1ce:	9a05      	ldr	r2, [sp, #20]
 800b1d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b328 <_strtod_l+0x598>
 800b1d4:	2322      	movs	r3, #34	@ 0x22
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	f04f 0a00 	mov.w	sl, #0
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f43f ae0f 	beq.w	800ae02 <_strtod_l+0x72>
 800b1e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1e6:	9805      	ldr	r0, [sp, #20]
 800b1e8:	f002 ffe2 	bl	800e1b0 <_Bfree>
 800b1ec:	9805      	ldr	r0, [sp, #20]
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	f002 ffde 	bl	800e1b0 <_Bfree>
 800b1f4:	9805      	ldr	r0, [sp, #20]
 800b1f6:	4641      	mov	r1, r8
 800b1f8:	f002 ffda 	bl	800e1b0 <_Bfree>
 800b1fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1fe:	9805      	ldr	r0, [sp, #20]
 800b200:	f002 ffd6 	bl	800e1b0 <_Bfree>
 800b204:	9805      	ldr	r0, [sp, #20]
 800b206:	4621      	mov	r1, r4
 800b208:	f002 ffd2 	bl	800e1b0 <_Bfree>
 800b20c:	e5f9      	b.n	800ae02 <_strtod_l+0x72>
 800b20e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b210:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b214:	4293      	cmp	r3, r2
 800b216:	dbbc      	blt.n	800b192 <_strtod_l+0x402>
 800b218:	4c41      	ldr	r4, [pc, #260]	@ (800b320 <_strtod_l+0x590>)
 800b21a:	f1c5 050f 	rsb	r5, r5, #15
 800b21e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b222:	4652      	mov	r2, sl
 800b224:	465b      	mov	r3, fp
 800b226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b22a:	f7f5 f9e5 	bl	80005f8 <__aeabi_dmul>
 800b22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b230:	1b5d      	subs	r5, r3, r5
 800b232:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b236:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b23a:	e78f      	b.n	800b15c <_strtod_l+0x3cc>
 800b23c:	3316      	adds	r3, #22
 800b23e:	dba8      	blt.n	800b192 <_strtod_l+0x402>
 800b240:	4b37      	ldr	r3, [pc, #220]	@ (800b320 <_strtod_l+0x590>)
 800b242:	eba9 0808 	sub.w	r8, r9, r8
 800b246:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b24a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b24e:	4650      	mov	r0, sl
 800b250:	4659      	mov	r1, fp
 800b252:	f7f5 fafb 	bl	800084c <__aeabi_ddiv>
 800b256:	e783      	b.n	800b160 <_strtod_l+0x3d0>
 800b258:	4b32      	ldr	r3, [pc, #200]	@ (800b324 <_strtod_l+0x594>)
 800b25a:	9308      	str	r3, [sp, #32]
 800b25c:	2300      	movs	r3, #0
 800b25e:	1124      	asrs	r4, r4, #4
 800b260:	4650      	mov	r0, sl
 800b262:	4659      	mov	r1, fp
 800b264:	461e      	mov	r6, r3
 800b266:	2c01      	cmp	r4, #1
 800b268:	dc21      	bgt.n	800b2ae <_strtod_l+0x51e>
 800b26a:	b10b      	cbz	r3, 800b270 <_strtod_l+0x4e0>
 800b26c:	4682      	mov	sl, r0
 800b26e:	468b      	mov	fp, r1
 800b270:	492c      	ldr	r1, [pc, #176]	@ (800b324 <_strtod_l+0x594>)
 800b272:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b276:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b27a:	4652      	mov	r2, sl
 800b27c:	465b      	mov	r3, fp
 800b27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b282:	f7f5 f9b9 	bl	80005f8 <__aeabi_dmul>
 800b286:	4b28      	ldr	r3, [pc, #160]	@ (800b328 <_strtod_l+0x598>)
 800b288:	460a      	mov	r2, r1
 800b28a:	400b      	ands	r3, r1
 800b28c:	4927      	ldr	r1, [pc, #156]	@ (800b32c <_strtod_l+0x59c>)
 800b28e:	428b      	cmp	r3, r1
 800b290:	4682      	mov	sl, r0
 800b292:	d898      	bhi.n	800b1c6 <_strtod_l+0x436>
 800b294:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b298:	428b      	cmp	r3, r1
 800b29a:	bf86      	itte	hi
 800b29c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b330 <_strtod_l+0x5a0>
 800b2a0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b2a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9308      	str	r3, [sp, #32]
 800b2ac:	e07a      	b.n	800b3a4 <_strtod_l+0x614>
 800b2ae:	07e2      	lsls	r2, r4, #31
 800b2b0:	d505      	bpl.n	800b2be <_strtod_l+0x52e>
 800b2b2:	9b08      	ldr	r3, [sp, #32]
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f7f5 f99e 	bl	80005f8 <__aeabi_dmul>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	9a08      	ldr	r2, [sp, #32]
 800b2c0:	3208      	adds	r2, #8
 800b2c2:	3601      	adds	r6, #1
 800b2c4:	1064      	asrs	r4, r4, #1
 800b2c6:	9208      	str	r2, [sp, #32]
 800b2c8:	e7cd      	b.n	800b266 <_strtod_l+0x4d6>
 800b2ca:	d0ed      	beq.n	800b2a8 <_strtod_l+0x518>
 800b2cc:	4264      	negs	r4, r4
 800b2ce:	f014 020f 	ands.w	r2, r4, #15
 800b2d2:	d00a      	beq.n	800b2ea <_strtod_l+0x55a>
 800b2d4:	4b12      	ldr	r3, [pc, #72]	@ (800b320 <_strtod_l+0x590>)
 800b2d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2da:	4650      	mov	r0, sl
 800b2dc:	4659      	mov	r1, fp
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	f7f5 fab3 	bl	800084c <__aeabi_ddiv>
 800b2e6:	4682      	mov	sl, r0
 800b2e8:	468b      	mov	fp, r1
 800b2ea:	1124      	asrs	r4, r4, #4
 800b2ec:	d0dc      	beq.n	800b2a8 <_strtod_l+0x518>
 800b2ee:	2c1f      	cmp	r4, #31
 800b2f0:	dd20      	ble.n	800b334 <_strtod_l+0x5a4>
 800b2f2:	2400      	movs	r4, #0
 800b2f4:	46a0      	mov	r8, r4
 800b2f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2f8:	46a1      	mov	r9, r4
 800b2fa:	9a05      	ldr	r2, [sp, #20]
 800b2fc:	2322      	movs	r3, #34	@ 0x22
 800b2fe:	f04f 0a00 	mov.w	sl, #0
 800b302:	f04f 0b00 	mov.w	fp, #0
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	e768      	b.n	800b1dc <_strtod_l+0x44c>
 800b30a:	bf00      	nop
 800b30c:	08011376 	.word	0x08011376
 800b310:	08011214 	.word	0x08011214
 800b314:	0801136e 	.word	0x0801136e
 800b318:	0801145a 	.word	0x0801145a
 800b31c:	08011456 	.word	0x08011456
 800b320:	080115c0 	.word	0x080115c0
 800b324:	08011598 	.word	0x08011598
 800b328:	7ff00000 	.word	0x7ff00000
 800b32c:	7ca00000 	.word	0x7ca00000
 800b330:	7fefffff 	.word	0x7fefffff
 800b334:	f014 0310 	ands.w	r3, r4, #16
 800b338:	bf18      	it	ne
 800b33a:	236a      	movne	r3, #106	@ 0x6a
 800b33c:	4ea9      	ldr	r6, [pc, #676]	@ (800b5e4 <_strtod_l+0x854>)
 800b33e:	9308      	str	r3, [sp, #32]
 800b340:	4650      	mov	r0, sl
 800b342:	4659      	mov	r1, fp
 800b344:	2300      	movs	r3, #0
 800b346:	07e2      	lsls	r2, r4, #31
 800b348:	d504      	bpl.n	800b354 <_strtod_l+0x5c4>
 800b34a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b34e:	f7f5 f953 	bl	80005f8 <__aeabi_dmul>
 800b352:	2301      	movs	r3, #1
 800b354:	1064      	asrs	r4, r4, #1
 800b356:	f106 0608 	add.w	r6, r6, #8
 800b35a:	d1f4      	bne.n	800b346 <_strtod_l+0x5b6>
 800b35c:	b10b      	cbz	r3, 800b362 <_strtod_l+0x5d2>
 800b35e:	4682      	mov	sl, r0
 800b360:	468b      	mov	fp, r1
 800b362:	9b08      	ldr	r3, [sp, #32]
 800b364:	b1b3      	cbz	r3, 800b394 <_strtod_l+0x604>
 800b366:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b36a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b36e:	2b00      	cmp	r3, #0
 800b370:	4659      	mov	r1, fp
 800b372:	dd0f      	ble.n	800b394 <_strtod_l+0x604>
 800b374:	2b1f      	cmp	r3, #31
 800b376:	dd55      	ble.n	800b424 <_strtod_l+0x694>
 800b378:	2b34      	cmp	r3, #52	@ 0x34
 800b37a:	bfde      	ittt	le
 800b37c:	f04f 33ff 	movle.w	r3, #4294967295
 800b380:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b384:	4093      	lslle	r3, r2
 800b386:	f04f 0a00 	mov.w	sl, #0
 800b38a:	bfcc      	ite	gt
 800b38c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b390:	ea03 0b01 	andle.w	fp, r3, r1
 800b394:	2200      	movs	r2, #0
 800b396:	2300      	movs	r3, #0
 800b398:	4650      	mov	r0, sl
 800b39a:	4659      	mov	r1, fp
 800b39c:	f7f5 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d1a6      	bne.n	800b2f2 <_strtod_l+0x562>
 800b3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b3aa:	9805      	ldr	r0, [sp, #20]
 800b3ac:	462b      	mov	r3, r5
 800b3ae:	463a      	mov	r2, r7
 800b3b0:	f002 ff66 	bl	800e280 <__s2b>
 800b3b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f43f af05 	beq.w	800b1c6 <_strtod_l+0x436>
 800b3bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	eba9 0308 	sub.w	r3, r9, r8
 800b3c4:	bfa8      	it	ge
 800b3c6:	2300      	movge	r3, #0
 800b3c8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b3ca:	2400      	movs	r4, #0
 800b3cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3d0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b3d2:	46a0      	mov	r8, r4
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d6:	9805      	ldr	r0, [sp, #20]
 800b3d8:	6859      	ldr	r1, [r3, #4]
 800b3da:	f002 fea9 	bl	800e130 <_Balloc>
 800b3de:	4681      	mov	r9, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f43f aef4 	beq.w	800b1ce <_strtod_l+0x43e>
 800b3e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3e8:	691a      	ldr	r2, [r3, #16]
 800b3ea:	3202      	adds	r2, #2
 800b3ec:	f103 010c 	add.w	r1, r3, #12
 800b3f0:	0092      	lsls	r2, r2, #2
 800b3f2:	300c      	adds	r0, #12
 800b3f4:	f001 fbc7 	bl	800cb86 <memcpy>
 800b3f8:	ec4b ab10 	vmov	d0, sl, fp
 800b3fc:	9805      	ldr	r0, [sp, #20]
 800b3fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800b400:	a91b      	add	r1, sp, #108	@ 0x6c
 800b402:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b406:	f003 fa77 	bl	800e8f8 <__d2b>
 800b40a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b40c:	2800      	cmp	r0, #0
 800b40e:	f43f aede 	beq.w	800b1ce <_strtod_l+0x43e>
 800b412:	9805      	ldr	r0, [sp, #20]
 800b414:	2101      	movs	r1, #1
 800b416:	f002 ffc9 	bl	800e3ac <__i2b>
 800b41a:	4680      	mov	r8, r0
 800b41c:	b948      	cbnz	r0, 800b432 <_strtod_l+0x6a2>
 800b41e:	f04f 0800 	mov.w	r8, #0
 800b422:	e6d4      	b.n	800b1ce <_strtod_l+0x43e>
 800b424:	f04f 32ff 	mov.w	r2, #4294967295
 800b428:	fa02 f303 	lsl.w	r3, r2, r3
 800b42c:	ea03 0a0a 	and.w	sl, r3, sl
 800b430:	e7b0      	b.n	800b394 <_strtod_l+0x604>
 800b432:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b434:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b436:	2d00      	cmp	r5, #0
 800b438:	bfab      	itete	ge
 800b43a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b43c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b43e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b440:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b442:	bfac      	ite	ge
 800b444:	18ef      	addge	r7, r5, r3
 800b446:	1b5e      	sublt	r6, r3, r5
 800b448:	9b08      	ldr	r3, [sp, #32]
 800b44a:	1aed      	subs	r5, r5, r3
 800b44c:	4415      	add	r5, r2
 800b44e:	4b66      	ldr	r3, [pc, #408]	@ (800b5e8 <_strtod_l+0x858>)
 800b450:	3d01      	subs	r5, #1
 800b452:	429d      	cmp	r5, r3
 800b454:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b458:	da50      	bge.n	800b4fc <_strtod_l+0x76c>
 800b45a:	1b5b      	subs	r3, r3, r5
 800b45c:	2b1f      	cmp	r3, #31
 800b45e:	eba2 0203 	sub.w	r2, r2, r3
 800b462:	f04f 0101 	mov.w	r1, #1
 800b466:	dc3d      	bgt.n	800b4e4 <_strtod_l+0x754>
 800b468:	fa01 f303 	lsl.w	r3, r1, r3
 800b46c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b46e:	2300      	movs	r3, #0
 800b470:	9310      	str	r3, [sp, #64]	@ 0x40
 800b472:	18bd      	adds	r5, r7, r2
 800b474:	9b08      	ldr	r3, [sp, #32]
 800b476:	42af      	cmp	r7, r5
 800b478:	4416      	add	r6, r2
 800b47a:	441e      	add	r6, r3
 800b47c:	463b      	mov	r3, r7
 800b47e:	bfa8      	it	ge
 800b480:	462b      	movge	r3, r5
 800b482:	42b3      	cmp	r3, r6
 800b484:	bfa8      	it	ge
 800b486:	4633      	movge	r3, r6
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bfc2      	ittt	gt
 800b48c:	1aed      	subgt	r5, r5, r3
 800b48e:	1af6      	subgt	r6, r6, r3
 800b490:	1aff      	subgt	r7, r7, r3
 800b492:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd16      	ble.n	800b4c6 <_strtod_l+0x736>
 800b498:	4641      	mov	r1, r8
 800b49a:	9805      	ldr	r0, [sp, #20]
 800b49c:	461a      	mov	r2, r3
 800b49e:	f003 f845 	bl	800e52c <__pow5mult>
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0ba      	beq.n	800b41e <_strtod_l+0x68e>
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b4ac:	9805      	ldr	r0, [sp, #20]
 800b4ae:	f002 ff93 	bl	800e3d8 <__multiply>
 800b4b2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f43f ae8a 	beq.w	800b1ce <_strtod_l+0x43e>
 800b4ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4bc:	9805      	ldr	r0, [sp, #20]
 800b4be:	f002 fe77 	bl	800e1b0 <_Bfree>
 800b4c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4c6:	2d00      	cmp	r5, #0
 800b4c8:	dc1d      	bgt.n	800b506 <_strtod_l+0x776>
 800b4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	dd23      	ble.n	800b518 <_strtod_l+0x788>
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b4d4:	9805      	ldr	r0, [sp, #20]
 800b4d6:	f003 f829 	bl	800e52c <__pow5mult>
 800b4da:	4681      	mov	r9, r0
 800b4dc:	b9e0      	cbnz	r0, 800b518 <_strtod_l+0x788>
 800b4de:	f04f 0900 	mov.w	r9, #0
 800b4e2:	e674      	b.n	800b1ce <_strtod_l+0x43e>
 800b4e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b4e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b4ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b4f0:	35e2      	adds	r5, #226	@ 0xe2
 800b4f2:	fa01 f305 	lsl.w	r3, r1, r5
 800b4f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b4fa:	e7ba      	b.n	800b472 <_strtod_l+0x6e2>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800b500:	2301      	movs	r3, #1
 800b502:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b504:	e7b5      	b.n	800b472 <_strtod_l+0x6e2>
 800b506:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b508:	9805      	ldr	r0, [sp, #20]
 800b50a:	462a      	mov	r2, r5
 800b50c:	f003 f868 	bl	800e5e0 <__lshift>
 800b510:	901a      	str	r0, [sp, #104]	@ 0x68
 800b512:	2800      	cmp	r0, #0
 800b514:	d1d9      	bne.n	800b4ca <_strtod_l+0x73a>
 800b516:	e65a      	b.n	800b1ce <_strtod_l+0x43e>
 800b518:	2e00      	cmp	r6, #0
 800b51a:	dd07      	ble.n	800b52c <_strtod_l+0x79c>
 800b51c:	4649      	mov	r1, r9
 800b51e:	9805      	ldr	r0, [sp, #20]
 800b520:	4632      	mov	r2, r6
 800b522:	f003 f85d 	bl	800e5e0 <__lshift>
 800b526:	4681      	mov	r9, r0
 800b528:	2800      	cmp	r0, #0
 800b52a:	d0d8      	beq.n	800b4de <_strtod_l+0x74e>
 800b52c:	2f00      	cmp	r7, #0
 800b52e:	dd08      	ble.n	800b542 <_strtod_l+0x7b2>
 800b530:	4641      	mov	r1, r8
 800b532:	9805      	ldr	r0, [sp, #20]
 800b534:	463a      	mov	r2, r7
 800b536:	f003 f853 	bl	800e5e0 <__lshift>
 800b53a:	4680      	mov	r8, r0
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f43f ae46 	beq.w	800b1ce <_strtod_l+0x43e>
 800b542:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b544:	9805      	ldr	r0, [sp, #20]
 800b546:	464a      	mov	r2, r9
 800b548:	f003 f8d2 	bl	800e6f0 <__mdiff>
 800b54c:	4604      	mov	r4, r0
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f ae3d 	beq.w	800b1ce <_strtod_l+0x43e>
 800b554:	68c3      	ldr	r3, [r0, #12]
 800b556:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b558:	2300      	movs	r3, #0
 800b55a:	60c3      	str	r3, [r0, #12]
 800b55c:	4641      	mov	r1, r8
 800b55e:	f003 f8ab 	bl	800e6b8 <__mcmp>
 800b562:	2800      	cmp	r0, #0
 800b564:	da46      	bge.n	800b5f4 <_strtod_l+0x864>
 800b566:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b568:	ea53 030a 	orrs.w	r3, r3, sl
 800b56c:	d16c      	bne.n	800b648 <_strtod_l+0x8b8>
 800b56e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b572:	2b00      	cmp	r3, #0
 800b574:	d168      	bne.n	800b648 <_strtod_l+0x8b8>
 800b576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b57a:	0d1b      	lsrs	r3, r3, #20
 800b57c:	051b      	lsls	r3, r3, #20
 800b57e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b582:	d961      	bls.n	800b648 <_strtod_l+0x8b8>
 800b584:	6963      	ldr	r3, [r4, #20]
 800b586:	b913      	cbnz	r3, 800b58e <_strtod_l+0x7fe>
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	dd5c      	ble.n	800b648 <_strtod_l+0x8b8>
 800b58e:	4621      	mov	r1, r4
 800b590:	2201      	movs	r2, #1
 800b592:	9805      	ldr	r0, [sp, #20]
 800b594:	f003 f824 	bl	800e5e0 <__lshift>
 800b598:	4641      	mov	r1, r8
 800b59a:	4604      	mov	r4, r0
 800b59c:	f003 f88c 	bl	800e6b8 <__mcmp>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	dd51      	ble.n	800b648 <_strtod_l+0x8b8>
 800b5a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5a8:	9a08      	ldr	r2, [sp, #32]
 800b5aa:	0d1b      	lsrs	r3, r3, #20
 800b5ac:	051b      	lsls	r3, r3, #20
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	d06b      	beq.n	800b68a <_strtod_l+0x8fa>
 800b5b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b5b6:	d868      	bhi.n	800b68a <_strtod_l+0x8fa>
 800b5b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b5bc:	f67f ae9d 	bls.w	800b2fa <_strtod_l+0x56a>
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ec <_strtod_l+0x85c>)
 800b5c2:	4650      	mov	r0, sl
 800b5c4:	4659      	mov	r1, fp
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f7f5 f816 	bl	80005f8 <__aeabi_dmul>
 800b5cc:	4b08      	ldr	r3, [pc, #32]	@ (800b5f0 <_strtod_l+0x860>)
 800b5ce:	400b      	ands	r3, r1
 800b5d0:	4682      	mov	sl, r0
 800b5d2:	468b      	mov	fp, r1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f47f ae05 	bne.w	800b1e4 <_strtod_l+0x454>
 800b5da:	9a05      	ldr	r2, [sp, #20]
 800b5dc:	2322      	movs	r3, #34	@ 0x22
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	e600      	b.n	800b1e4 <_strtod_l+0x454>
 800b5e2:	bf00      	nop
 800b5e4:	08011240 	.word	0x08011240
 800b5e8:	fffffc02 	.word	0xfffffc02
 800b5ec:	39500000 	.word	0x39500000
 800b5f0:	7ff00000 	.word	0x7ff00000
 800b5f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b5f8:	d165      	bne.n	800b6c6 <_strtod_l+0x936>
 800b5fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b600:	b35a      	cbz	r2, 800b65a <_strtod_l+0x8ca>
 800b602:	4a9f      	ldr	r2, [pc, #636]	@ (800b880 <_strtod_l+0xaf0>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d12b      	bne.n	800b660 <_strtod_l+0x8d0>
 800b608:	9b08      	ldr	r3, [sp, #32]
 800b60a:	4651      	mov	r1, sl
 800b60c:	b303      	cbz	r3, 800b650 <_strtod_l+0x8c0>
 800b60e:	4b9d      	ldr	r3, [pc, #628]	@ (800b884 <_strtod_l+0xaf4>)
 800b610:	465a      	mov	r2, fp
 800b612:	4013      	ands	r3, r2
 800b614:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b618:	f04f 32ff 	mov.w	r2, #4294967295
 800b61c:	d81b      	bhi.n	800b656 <_strtod_l+0x8c6>
 800b61e:	0d1b      	lsrs	r3, r3, #20
 800b620:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b624:	fa02 f303 	lsl.w	r3, r2, r3
 800b628:	4299      	cmp	r1, r3
 800b62a:	d119      	bne.n	800b660 <_strtod_l+0x8d0>
 800b62c:	4b96      	ldr	r3, [pc, #600]	@ (800b888 <_strtod_l+0xaf8>)
 800b62e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b630:	429a      	cmp	r2, r3
 800b632:	d102      	bne.n	800b63a <_strtod_l+0x8aa>
 800b634:	3101      	adds	r1, #1
 800b636:	f43f adca 	beq.w	800b1ce <_strtod_l+0x43e>
 800b63a:	4b92      	ldr	r3, [pc, #584]	@ (800b884 <_strtod_l+0xaf4>)
 800b63c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b63e:	401a      	ands	r2, r3
 800b640:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b644:	f04f 0a00 	mov.w	sl, #0
 800b648:	9b08      	ldr	r3, [sp, #32]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1b8      	bne.n	800b5c0 <_strtod_l+0x830>
 800b64e:	e5c9      	b.n	800b1e4 <_strtod_l+0x454>
 800b650:	f04f 33ff 	mov.w	r3, #4294967295
 800b654:	e7e8      	b.n	800b628 <_strtod_l+0x898>
 800b656:	4613      	mov	r3, r2
 800b658:	e7e6      	b.n	800b628 <_strtod_l+0x898>
 800b65a:	ea53 030a 	orrs.w	r3, r3, sl
 800b65e:	d0a1      	beq.n	800b5a4 <_strtod_l+0x814>
 800b660:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b662:	b1db      	cbz	r3, 800b69c <_strtod_l+0x90c>
 800b664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b666:	4213      	tst	r3, r2
 800b668:	d0ee      	beq.n	800b648 <_strtod_l+0x8b8>
 800b66a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b66c:	9a08      	ldr	r2, [sp, #32]
 800b66e:	4650      	mov	r0, sl
 800b670:	4659      	mov	r1, fp
 800b672:	b1bb      	cbz	r3, 800b6a4 <_strtod_l+0x914>
 800b674:	f7ff fb6d 	bl	800ad52 <sulp>
 800b678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b67c:	ec53 2b10 	vmov	r2, r3, d0
 800b680:	f7f4 fe04 	bl	800028c <__adddf3>
 800b684:	4682      	mov	sl, r0
 800b686:	468b      	mov	fp, r1
 800b688:	e7de      	b.n	800b648 <_strtod_l+0x8b8>
 800b68a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b68e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b692:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b696:	f04f 3aff 	mov.w	sl, #4294967295
 800b69a:	e7d5      	b.n	800b648 <_strtod_l+0x8b8>
 800b69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b69e:	ea13 0f0a 	tst.w	r3, sl
 800b6a2:	e7e1      	b.n	800b668 <_strtod_l+0x8d8>
 800b6a4:	f7ff fb55 	bl	800ad52 <sulp>
 800b6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6ac:	ec53 2b10 	vmov	r2, r3, d0
 800b6b0:	f7f4 fdea 	bl	8000288 <__aeabi_dsub>
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	468b      	mov	fp, r1
 800b6bc:	f7f5 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d0c1      	beq.n	800b648 <_strtod_l+0x8b8>
 800b6c4:	e619      	b.n	800b2fa <_strtod_l+0x56a>
 800b6c6:	4641      	mov	r1, r8
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f003 f96d 	bl	800e9a8 <__ratio>
 800b6ce:	ec57 6b10 	vmov	r6, r7, d0
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b6d8:	4630      	mov	r0, r6
 800b6da:	4639      	mov	r1, r7
 800b6dc:	f7f5 fa08 	bl	8000af0 <__aeabi_dcmple>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d06f      	beq.n	800b7c4 <_strtod_l+0xa34>
 800b6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d17a      	bne.n	800b7e0 <_strtod_l+0xa50>
 800b6ea:	f1ba 0f00 	cmp.w	sl, #0
 800b6ee:	d158      	bne.n	800b7a2 <_strtod_l+0xa12>
 800b6f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d15a      	bne.n	800b7b0 <_strtod_l+0xa20>
 800b6fa:	4b64      	ldr	r3, [pc, #400]	@ (800b88c <_strtod_l+0xafc>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	4630      	mov	r0, r6
 800b700:	4639      	mov	r1, r7
 800b702:	f7f5 f9eb 	bl	8000adc <__aeabi_dcmplt>
 800b706:	2800      	cmp	r0, #0
 800b708:	d159      	bne.n	800b7be <_strtod_l+0xa2e>
 800b70a:	4630      	mov	r0, r6
 800b70c:	4639      	mov	r1, r7
 800b70e:	4b60      	ldr	r3, [pc, #384]	@ (800b890 <_strtod_l+0xb00>)
 800b710:	2200      	movs	r2, #0
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	4606      	mov	r6, r0
 800b718:	460f      	mov	r7, r1
 800b71a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b71e:	9606      	str	r6, [sp, #24]
 800b720:	9307      	str	r3, [sp, #28]
 800b722:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b726:	4d57      	ldr	r5, [pc, #348]	@ (800b884 <_strtod_l+0xaf4>)
 800b728:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b72c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b72e:	401d      	ands	r5, r3
 800b730:	4b58      	ldr	r3, [pc, #352]	@ (800b894 <_strtod_l+0xb04>)
 800b732:	429d      	cmp	r5, r3
 800b734:	f040 80b2 	bne.w	800b89c <_strtod_l+0xb0c>
 800b738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b73a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b73e:	ec4b ab10 	vmov	d0, sl, fp
 800b742:	f003 f869 	bl	800e818 <__ulp>
 800b746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b74a:	ec51 0b10 	vmov	r0, r1, d0
 800b74e:	f7f4 ff53 	bl	80005f8 <__aeabi_dmul>
 800b752:	4652      	mov	r2, sl
 800b754:	465b      	mov	r3, fp
 800b756:	f7f4 fd99 	bl	800028c <__adddf3>
 800b75a:	460b      	mov	r3, r1
 800b75c:	4949      	ldr	r1, [pc, #292]	@ (800b884 <_strtod_l+0xaf4>)
 800b75e:	4a4e      	ldr	r2, [pc, #312]	@ (800b898 <_strtod_l+0xb08>)
 800b760:	4019      	ands	r1, r3
 800b762:	4291      	cmp	r1, r2
 800b764:	4682      	mov	sl, r0
 800b766:	d942      	bls.n	800b7ee <_strtod_l+0xa5e>
 800b768:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b76a:	4b47      	ldr	r3, [pc, #284]	@ (800b888 <_strtod_l+0xaf8>)
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d103      	bne.n	800b778 <_strtod_l+0x9e8>
 800b770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b772:	3301      	adds	r3, #1
 800b774:	f43f ad2b 	beq.w	800b1ce <_strtod_l+0x43e>
 800b778:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b888 <_strtod_l+0xaf8>
 800b77c:	f04f 3aff 	mov.w	sl, #4294967295
 800b780:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b782:	9805      	ldr	r0, [sp, #20]
 800b784:	f002 fd14 	bl	800e1b0 <_Bfree>
 800b788:	9805      	ldr	r0, [sp, #20]
 800b78a:	4649      	mov	r1, r9
 800b78c:	f002 fd10 	bl	800e1b0 <_Bfree>
 800b790:	9805      	ldr	r0, [sp, #20]
 800b792:	4641      	mov	r1, r8
 800b794:	f002 fd0c 	bl	800e1b0 <_Bfree>
 800b798:	9805      	ldr	r0, [sp, #20]
 800b79a:	4621      	mov	r1, r4
 800b79c:	f002 fd08 	bl	800e1b0 <_Bfree>
 800b7a0:	e618      	b.n	800b3d4 <_strtod_l+0x644>
 800b7a2:	f1ba 0f01 	cmp.w	sl, #1
 800b7a6:	d103      	bne.n	800b7b0 <_strtod_l+0xa20>
 800b7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f43f ada5 	beq.w	800b2fa <_strtod_l+0x56a>
 800b7b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b860 <_strtod_l+0xad0>
 800b7b4:	4f35      	ldr	r7, [pc, #212]	@ (800b88c <_strtod_l+0xafc>)
 800b7b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7ba:	2600      	movs	r6, #0
 800b7bc:	e7b1      	b.n	800b722 <_strtod_l+0x992>
 800b7be:	4f34      	ldr	r7, [pc, #208]	@ (800b890 <_strtod_l+0xb00>)
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	e7aa      	b.n	800b71a <_strtod_l+0x98a>
 800b7c4:	4b32      	ldr	r3, [pc, #200]	@ (800b890 <_strtod_l+0xb00>)
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f7f4 ff14 	bl	80005f8 <__aeabi_dmul>
 800b7d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460f      	mov	r7, r1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d09f      	beq.n	800b71a <_strtod_l+0x98a>
 800b7da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b7de:	e7a0      	b.n	800b722 <_strtod_l+0x992>
 800b7e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b868 <_strtod_l+0xad8>
 800b7e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7e8:	ec57 6b17 	vmov	r6, r7, d7
 800b7ec:	e799      	b.n	800b722 <_strtod_l+0x992>
 800b7ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b7f2:	9b08      	ldr	r3, [sp, #32]
 800b7f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1c1      	bne.n	800b780 <_strtod_l+0x9f0>
 800b7fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b800:	0d1b      	lsrs	r3, r3, #20
 800b802:	051b      	lsls	r3, r3, #20
 800b804:	429d      	cmp	r5, r3
 800b806:	d1bb      	bne.n	800b780 <_strtod_l+0x9f0>
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f5 fa54 	bl	8000cb8 <__aeabi_d2lz>
 800b810:	f7f4 fec4 	bl	800059c <__aeabi_l2d>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4630      	mov	r0, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	f7f4 fd34 	bl	8000288 <__aeabi_dsub>
 800b820:	460b      	mov	r3, r1
 800b822:	4602      	mov	r2, r0
 800b824:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b828:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b82e:	ea46 060a 	orr.w	r6, r6, sl
 800b832:	431e      	orrs	r6, r3
 800b834:	d06f      	beq.n	800b916 <_strtod_l+0xb86>
 800b836:	a30e      	add	r3, pc, #56	@ (adr r3, 800b870 <_strtod_l+0xae0>)
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f7f5 f94e 	bl	8000adc <__aeabi_dcmplt>
 800b840:	2800      	cmp	r0, #0
 800b842:	f47f accf 	bne.w	800b1e4 <_strtod_l+0x454>
 800b846:	a30c      	add	r3, pc, #48	@ (adr r3, 800b878 <_strtod_l+0xae8>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b850:	f7f5 f962 	bl	8000b18 <__aeabi_dcmpgt>
 800b854:	2800      	cmp	r0, #0
 800b856:	d093      	beq.n	800b780 <_strtod_l+0x9f0>
 800b858:	e4c4      	b.n	800b1e4 <_strtod_l+0x454>
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w
 800b860:	00000000 	.word	0x00000000
 800b864:	bff00000 	.word	0xbff00000
 800b868:	00000000 	.word	0x00000000
 800b86c:	3ff00000 	.word	0x3ff00000
 800b870:	94a03595 	.word	0x94a03595
 800b874:	3fdfffff 	.word	0x3fdfffff
 800b878:	35afe535 	.word	0x35afe535
 800b87c:	3fe00000 	.word	0x3fe00000
 800b880:	000fffff 	.word	0x000fffff
 800b884:	7ff00000 	.word	0x7ff00000
 800b888:	7fefffff 	.word	0x7fefffff
 800b88c:	3ff00000 	.word	0x3ff00000
 800b890:	3fe00000 	.word	0x3fe00000
 800b894:	7fe00000 	.word	0x7fe00000
 800b898:	7c9fffff 	.word	0x7c9fffff
 800b89c:	9b08      	ldr	r3, [sp, #32]
 800b89e:	b323      	cbz	r3, 800b8ea <_strtod_l+0xb5a>
 800b8a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b8a4:	d821      	bhi.n	800b8ea <_strtod_l+0xb5a>
 800b8a6:	a328      	add	r3, pc, #160	@ (adr r3, 800b948 <_strtod_l+0xbb8>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f5 f91e 	bl	8000af0 <__aeabi_dcmple>
 800b8b4:	b1a0      	cbz	r0, 800b8e0 <_strtod_l+0xb50>
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f7f5 f975 	bl	8000ba8 <__aeabi_d2uiz>
 800b8be:	2801      	cmp	r0, #1
 800b8c0:	bf38      	it	cc
 800b8c2:	2001      	movcc	r0, #1
 800b8c4:	f7f4 fe1e 	bl	8000504 <__aeabi_ui2d>
 800b8c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	b9fb      	cbnz	r3, 800b910 <_strtod_l+0xb80>
 800b8d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b8d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b8d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b8d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b8dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b8e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b8e6:	1b5b      	subs	r3, r3, r5
 800b8e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b8ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b8f2:	f002 ff91 	bl	800e818 <__ulp>
 800b8f6:	4650      	mov	r0, sl
 800b8f8:	ec53 2b10 	vmov	r2, r3, d0
 800b8fc:	4659      	mov	r1, fp
 800b8fe:	f7f4 fe7b 	bl	80005f8 <__aeabi_dmul>
 800b902:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b906:	f7f4 fcc1 	bl	800028c <__adddf3>
 800b90a:	4682      	mov	sl, r0
 800b90c:	468b      	mov	fp, r1
 800b90e:	e770      	b.n	800b7f2 <_strtod_l+0xa62>
 800b910:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b914:	e7e0      	b.n	800b8d8 <_strtod_l+0xb48>
 800b916:	a30e      	add	r3, pc, #56	@ (adr r3, 800b950 <_strtod_l+0xbc0>)
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f7f5 f8de 	bl	8000adc <__aeabi_dcmplt>
 800b920:	e798      	b.n	800b854 <_strtod_l+0xac4>
 800b922:	2300      	movs	r3, #0
 800b924:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b926:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b928:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	f7ff ba6d 	b.w	800ae0a <_strtod_l+0x7a>
 800b930:	2a65      	cmp	r2, #101	@ 0x65
 800b932:	f43f ab66 	beq.w	800b002 <_strtod_l+0x272>
 800b936:	2a45      	cmp	r2, #69	@ 0x45
 800b938:	f43f ab63 	beq.w	800b002 <_strtod_l+0x272>
 800b93c:	2301      	movs	r3, #1
 800b93e:	f7ff bb9e 	b.w	800b07e <_strtod_l+0x2ee>
 800b942:	bf00      	nop
 800b944:	f3af 8000 	nop.w
 800b948:	ffc00000 	.word	0xffc00000
 800b94c:	41dfffff 	.word	0x41dfffff
 800b950:	94a03595 	.word	0x94a03595
 800b954:	3fcfffff 	.word	0x3fcfffff

0800b958 <_strtod_r>:
 800b958:	4b01      	ldr	r3, [pc, #4]	@ (800b960 <_strtod_r+0x8>)
 800b95a:	f7ff ba19 	b.w	800ad90 <_strtod_l>
 800b95e:	bf00      	nop
 800b960:	200000f8 	.word	0x200000f8

0800b964 <strtod>:
 800b964:	460a      	mov	r2, r1
 800b966:	4601      	mov	r1, r0
 800b968:	4802      	ldr	r0, [pc, #8]	@ (800b974 <strtod+0x10>)
 800b96a:	4b03      	ldr	r3, [pc, #12]	@ (800b978 <strtod+0x14>)
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	f7ff ba0f 	b.w	800ad90 <_strtod_l>
 800b972:	bf00      	nop
 800b974:	20000264 	.word	0x20000264
 800b978:	200000f8 	.word	0x200000f8

0800b97c <_strtol_l.constprop.0>:
 800b97c:	2b24      	cmp	r3, #36	@ 0x24
 800b97e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b982:	4686      	mov	lr, r0
 800b984:	4690      	mov	r8, r2
 800b986:	d801      	bhi.n	800b98c <_strtol_l.constprop.0+0x10>
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d106      	bne.n	800b99a <_strtol_l.constprop.0+0x1e>
 800b98c:	f001 f8ce 	bl	800cb2c <__errno>
 800b990:	2316      	movs	r3, #22
 800b992:	6003      	str	r3, [r0, #0]
 800b994:	2000      	movs	r0, #0
 800b996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99a:	4834      	ldr	r0, [pc, #208]	@ (800ba6c <_strtol_l.constprop.0+0xf0>)
 800b99c:	460d      	mov	r5, r1
 800b99e:	462a      	mov	r2, r5
 800b9a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9a4:	5d06      	ldrb	r6, [r0, r4]
 800b9a6:	f016 0608 	ands.w	r6, r6, #8
 800b9aa:	d1f8      	bne.n	800b99e <_strtol_l.constprop.0+0x22>
 800b9ac:	2c2d      	cmp	r4, #45	@ 0x2d
 800b9ae:	d12d      	bne.n	800ba0c <_strtol_l.constprop.0+0x90>
 800b9b0:	782c      	ldrb	r4, [r5, #0]
 800b9b2:	2601      	movs	r6, #1
 800b9b4:	1c95      	adds	r5, r2, #2
 800b9b6:	f033 0210 	bics.w	r2, r3, #16
 800b9ba:	d109      	bne.n	800b9d0 <_strtol_l.constprop.0+0x54>
 800b9bc:	2c30      	cmp	r4, #48	@ 0x30
 800b9be:	d12a      	bne.n	800ba16 <_strtol_l.constprop.0+0x9a>
 800b9c0:	782a      	ldrb	r2, [r5, #0]
 800b9c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b9c6:	2a58      	cmp	r2, #88	@ 0x58
 800b9c8:	d125      	bne.n	800ba16 <_strtol_l.constprop.0+0x9a>
 800b9ca:	786c      	ldrb	r4, [r5, #1]
 800b9cc:	2310      	movs	r3, #16
 800b9ce:	3502      	adds	r5, #2
 800b9d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b9d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b9d8:	2200      	movs	r2, #0
 800b9da:	fbbc f9f3 	udiv	r9, ip, r3
 800b9de:	4610      	mov	r0, r2
 800b9e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b9e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b9e8:	2f09      	cmp	r7, #9
 800b9ea:	d81b      	bhi.n	800ba24 <_strtol_l.constprop.0+0xa8>
 800b9ec:	463c      	mov	r4, r7
 800b9ee:	42a3      	cmp	r3, r4
 800b9f0:	dd27      	ble.n	800ba42 <_strtol_l.constprop.0+0xc6>
 800b9f2:	1c57      	adds	r7, r2, #1
 800b9f4:	d007      	beq.n	800ba06 <_strtol_l.constprop.0+0x8a>
 800b9f6:	4581      	cmp	r9, r0
 800b9f8:	d320      	bcc.n	800ba3c <_strtol_l.constprop.0+0xc0>
 800b9fa:	d101      	bne.n	800ba00 <_strtol_l.constprop.0+0x84>
 800b9fc:	45a2      	cmp	sl, r4
 800b9fe:	db1d      	blt.n	800ba3c <_strtol_l.constprop.0+0xc0>
 800ba00:	fb00 4003 	mla	r0, r0, r3, r4
 800ba04:	2201      	movs	r2, #1
 800ba06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba0a:	e7eb      	b.n	800b9e4 <_strtol_l.constprop.0+0x68>
 800ba0c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ba0e:	bf04      	itt	eq
 800ba10:	782c      	ldrbeq	r4, [r5, #0]
 800ba12:	1c95      	addeq	r5, r2, #2
 800ba14:	e7cf      	b.n	800b9b6 <_strtol_l.constprop.0+0x3a>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1da      	bne.n	800b9d0 <_strtol_l.constprop.0+0x54>
 800ba1a:	2c30      	cmp	r4, #48	@ 0x30
 800ba1c:	bf0c      	ite	eq
 800ba1e:	2308      	moveq	r3, #8
 800ba20:	230a      	movne	r3, #10
 800ba22:	e7d5      	b.n	800b9d0 <_strtol_l.constprop.0+0x54>
 800ba24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ba28:	2f19      	cmp	r7, #25
 800ba2a:	d801      	bhi.n	800ba30 <_strtol_l.constprop.0+0xb4>
 800ba2c:	3c37      	subs	r4, #55	@ 0x37
 800ba2e:	e7de      	b.n	800b9ee <_strtol_l.constprop.0+0x72>
 800ba30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ba34:	2f19      	cmp	r7, #25
 800ba36:	d804      	bhi.n	800ba42 <_strtol_l.constprop.0+0xc6>
 800ba38:	3c57      	subs	r4, #87	@ 0x57
 800ba3a:	e7d8      	b.n	800b9ee <_strtol_l.constprop.0+0x72>
 800ba3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba40:	e7e1      	b.n	800ba06 <_strtol_l.constprop.0+0x8a>
 800ba42:	1c53      	adds	r3, r2, #1
 800ba44:	d108      	bne.n	800ba58 <_strtol_l.constprop.0+0xdc>
 800ba46:	2322      	movs	r3, #34	@ 0x22
 800ba48:	f8ce 3000 	str.w	r3, [lr]
 800ba4c:	4660      	mov	r0, ip
 800ba4e:	f1b8 0f00 	cmp.w	r8, #0
 800ba52:	d0a0      	beq.n	800b996 <_strtol_l.constprop.0+0x1a>
 800ba54:	1e69      	subs	r1, r5, #1
 800ba56:	e006      	b.n	800ba66 <_strtol_l.constprop.0+0xea>
 800ba58:	b106      	cbz	r6, 800ba5c <_strtol_l.constprop.0+0xe0>
 800ba5a:	4240      	negs	r0, r0
 800ba5c:	f1b8 0f00 	cmp.w	r8, #0
 800ba60:	d099      	beq.n	800b996 <_strtol_l.constprop.0+0x1a>
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	d1f6      	bne.n	800ba54 <_strtol_l.constprop.0+0xd8>
 800ba66:	f8c8 1000 	str.w	r1, [r8]
 800ba6a:	e794      	b.n	800b996 <_strtol_l.constprop.0+0x1a>
 800ba6c:	08011269 	.word	0x08011269

0800ba70 <_strtol_r>:
 800ba70:	f7ff bf84 	b.w	800b97c <_strtol_l.constprop.0>

0800ba74 <strtol>:
 800ba74:	4613      	mov	r3, r2
 800ba76:	460a      	mov	r2, r1
 800ba78:	4601      	mov	r1, r0
 800ba7a:	4802      	ldr	r0, [pc, #8]	@ (800ba84 <strtol+0x10>)
 800ba7c:	6800      	ldr	r0, [r0, #0]
 800ba7e:	f7ff bf7d 	b.w	800b97c <_strtol_l.constprop.0>
 800ba82:	bf00      	nop
 800ba84:	20000264 	.word	0x20000264

0800ba88 <__cvt>:
 800ba88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	ec57 6b10 	vmov	r6, r7, d0
 800ba90:	2f00      	cmp	r7, #0
 800ba92:	460c      	mov	r4, r1
 800ba94:	4619      	mov	r1, r3
 800ba96:	463b      	mov	r3, r7
 800ba98:	bfbb      	ittet	lt
 800ba9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ba9e:	461f      	movlt	r7, r3
 800baa0:	2300      	movge	r3, #0
 800baa2:	232d      	movlt	r3, #45	@ 0x2d
 800baa4:	700b      	strb	r3, [r1, #0]
 800baa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800baa8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800baac:	4691      	mov	r9, r2
 800baae:	f023 0820 	bic.w	r8, r3, #32
 800bab2:	bfbc      	itt	lt
 800bab4:	4632      	movlt	r2, r6
 800bab6:	4616      	movlt	r6, r2
 800bab8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800babc:	d005      	beq.n	800baca <__cvt+0x42>
 800babe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bac2:	d100      	bne.n	800bac6 <__cvt+0x3e>
 800bac4:	3401      	adds	r4, #1
 800bac6:	2102      	movs	r1, #2
 800bac8:	e000      	b.n	800bacc <__cvt+0x44>
 800baca:	2103      	movs	r1, #3
 800bacc:	ab03      	add	r3, sp, #12
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	ab02      	add	r3, sp, #8
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	ec47 6b10 	vmov	d0, r6, r7
 800bad8:	4653      	mov	r3, sl
 800bada:	4622      	mov	r2, r4
 800badc:	f001 f918 	bl	800cd10 <_dtoa_r>
 800bae0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bae4:	4605      	mov	r5, r0
 800bae6:	d119      	bne.n	800bb1c <__cvt+0x94>
 800bae8:	f019 0f01 	tst.w	r9, #1
 800baec:	d00e      	beq.n	800bb0c <__cvt+0x84>
 800baee:	eb00 0904 	add.w	r9, r0, r4
 800baf2:	2200      	movs	r2, #0
 800baf4:	2300      	movs	r3, #0
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bafe:	b108      	cbz	r0, 800bb04 <__cvt+0x7c>
 800bb00:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb04:	2230      	movs	r2, #48	@ 0x30
 800bb06:	9b03      	ldr	r3, [sp, #12]
 800bb08:	454b      	cmp	r3, r9
 800bb0a:	d31e      	bcc.n	800bb4a <__cvt+0xc2>
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb10:	1b5b      	subs	r3, r3, r5
 800bb12:	4628      	mov	r0, r5
 800bb14:	6013      	str	r3, [r2, #0]
 800bb16:	b004      	add	sp, #16
 800bb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb20:	eb00 0904 	add.w	r9, r0, r4
 800bb24:	d1e5      	bne.n	800baf2 <__cvt+0x6a>
 800bb26:	7803      	ldrb	r3, [r0, #0]
 800bb28:	2b30      	cmp	r3, #48	@ 0x30
 800bb2a:	d10a      	bne.n	800bb42 <__cvt+0xba>
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2300      	movs	r3, #0
 800bb30:	4630      	mov	r0, r6
 800bb32:	4639      	mov	r1, r7
 800bb34:	f7f4 ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb38:	b918      	cbnz	r0, 800bb42 <__cvt+0xba>
 800bb3a:	f1c4 0401 	rsb	r4, r4, #1
 800bb3e:	f8ca 4000 	str.w	r4, [sl]
 800bb42:	f8da 3000 	ldr.w	r3, [sl]
 800bb46:	4499      	add	r9, r3
 800bb48:	e7d3      	b.n	800baf2 <__cvt+0x6a>
 800bb4a:	1c59      	adds	r1, r3, #1
 800bb4c:	9103      	str	r1, [sp, #12]
 800bb4e:	701a      	strb	r2, [r3, #0]
 800bb50:	e7d9      	b.n	800bb06 <__cvt+0x7e>

0800bb52 <__exponent>:
 800bb52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb54:	2900      	cmp	r1, #0
 800bb56:	bfba      	itte	lt
 800bb58:	4249      	neglt	r1, r1
 800bb5a:	232d      	movlt	r3, #45	@ 0x2d
 800bb5c:	232b      	movge	r3, #43	@ 0x2b
 800bb5e:	2909      	cmp	r1, #9
 800bb60:	7002      	strb	r2, [r0, #0]
 800bb62:	7043      	strb	r3, [r0, #1]
 800bb64:	dd29      	ble.n	800bbba <__exponent+0x68>
 800bb66:	f10d 0307 	add.w	r3, sp, #7
 800bb6a:	461d      	mov	r5, r3
 800bb6c:	270a      	movs	r7, #10
 800bb6e:	461a      	mov	r2, r3
 800bb70:	fbb1 f6f7 	udiv	r6, r1, r7
 800bb74:	fb07 1416 	mls	r4, r7, r6, r1
 800bb78:	3430      	adds	r4, #48	@ 0x30
 800bb7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bb7e:	460c      	mov	r4, r1
 800bb80:	2c63      	cmp	r4, #99	@ 0x63
 800bb82:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb86:	4631      	mov	r1, r6
 800bb88:	dcf1      	bgt.n	800bb6e <__exponent+0x1c>
 800bb8a:	3130      	adds	r1, #48	@ 0x30
 800bb8c:	1e94      	subs	r4, r2, #2
 800bb8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bb92:	1c41      	adds	r1, r0, #1
 800bb94:	4623      	mov	r3, r4
 800bb96:	42ab      	cmp	r3, r5
 800bb98:	d30a      	bcc.n	800bbb0 <__exponent+0x5e>
 800bb9a:	f10d 0309 	add.w	r3, sp, #9
 800bb9e:	1a9b      	subs	r3, r3, r2
 800bba0:	42ac      	cmp	r4, r5
 800bba2:	bf88      	it	hi
 800bba4:	2300      	movhi	r3, #0
 800bba6:	3302      	adds	r3, #2
 800bba8:	4403      	add	r3, r0
 800bbaa:	1a18      	subs	r0, r3, r0
 800bbac:	b003      	add	sp, #12
 800bbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bbb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bbb8:	e7ed      	b.n	800bb96 <__exponent+0x44>
 800bbba:	2330      	movs	r3, #48	@ 0x30
 800bbbc:	3130      	adds	r1, #48	@ 0x30
 800bbbe:	7083      	strb	r3, [r0, #2]
 800bbc0:	70c1      	strb	r1, [r0, #3]
 800bbc2:	1d03      	adds	r3, r0, #4
 800bbc4:	e7f1      	b.n	800bbaa <__exponent+0x58>
	...

0800bbc8 <_printf_float>:
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	b08d      	sub	sp, #52	@ 0x34
 800bbce:	460c      	mov	r4, r1
 800bbd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bbd4:	4616      	mov	r6, r2
 800bbd6:	461f      	mov	r7, r3
 800bbd8:	4605      	mov	r5, r0
 800bbda:	f000 ff5d 	bl	800ca98 <_localeconv_r>
 800bbde:	6803      	ldr	r3, [r0, #0]
 800bbe0:	9304      	str	r3, [sp, #16]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f4 fb44 	bl	8000270 <strlen>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbec:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf0:	9005      	str	r0, [sp, #20]
 800bbf2:	3307      	adds	r3, #7
 800bbf4:	f023 0307 	bic.w	r3, r3, #7
 800bbf8:	f103 0208 	add.w	r2, r3, #8
 800bbfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc00:	f8d4 b000 	ldr.w	fp, [r4]
 800bc04:	f8c8 2000 	str.w	r2, [r8]
 800bc08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc10:	9307      	str	r3, [sp, #28]
 800bc12:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc1e:	4b9c      	ldr	r3, [pc, #624]	@ (800be90 <_printf_float+0x2c8>)
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	f7f4 ff82 	bl	8000b2c <__aeabi_dcmpun>
 800bc28:	bb70      	cbnz	r0, 800bc88 <_printf_float+0xc0>
 800bc2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc2e:	4b98      	ldr	r3, [pc, #608]	@ (800be90 <_printf_float+0x2c8>)
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	f7f4 ff5c 	bl	8000af0 <__aeabi_dcmple>
 800bc38:	bb30      	cbnz	r0, 800bc88 <_printf_float+0xc0>
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 ff4b 	bl	8000adc <__aeabi_dcmplt>
 800bc46:	b110      	cbz	r0, 800bc4e <_printf_float+0x86>
 800bc48:	232d      	movs	r3, #45	@ 0x2d
 800bc4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc4e:	4a91      	ldr	r2, [pc, #580]	@ (800be94 <_printf_float+0x2cc>)
 800bc50:	4b91      	ldr	r3, [pc, #580]	@ (800be98 <_printf_float+0x2d0>)
 800bc52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc56:	bf94      	ite	ls
 800bc58:	4690      	movls	r8, r2
 800bc5a:	4698      	movhi	r8, r3
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	6123      	str	r3, [r4, #16]
 800bc60:	f02b 0304 	bic.w	r3, fp, #4
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	f04f 0900 	mov.w	r9, #0
 800bc6a:	9700      	str	r7, [sp, #0]
 800bc6c:	4633      	mov	r3, r6
 800bc6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bc70:	4621      	mov	r1, r4
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 f9d2 	bl	800c01c <_printf_common>
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f040 808d 	bne.w	800bd98 <_printf_float+0x1d0>
 800bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc82:	b00d      	add	sp, #52	@ 0x34
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc88:	4642      	mov	r2, r8
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	4640      	mov	r0, r8
 800bc8e:	4649      	mov	r1, r9
 800bc90:	f7f4 ff4c 	bl	8000b2c <__aeabi_dcmpun>
 800bc94:	b140      	cbz	r0, 800bca8 <_printf_float+0xe0>
 800bc96:	464b      	mov	r3, r9
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bfbc      	itt	lt
 800bc9c:	232d      	movlt	r3, #45	@ 0x2d
 800bc9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bca2:	4a7e      	ldr	r2, [pc, #504]	@ (800be9c <_printf_float+0x2d4>)
 800bca4:	4b7e      	ldr	r3, [pc, #504]	@ (800bea0 <_printf_float+0x2d8>)
 800bca6:	e7d4      	b.n	800bc52 <_printf_float+0x8a>
 800bca8:	6863      	ldr	r3, [r4, #4]
 800bcaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bcae:	9206      	str	r2, [sp, #24]
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	d13b      	bne.n	800bd2c <_printf_float+0x164>
 800bcb4:	2306      	movs	r3, #6
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6022      	str	r2, [r4, #0]
 800bcc0:	9303      	str	r3, [sp, #12]
 800bcc2:	ab0a      	add	r3, sp, #40	@ 0x28
 800bcc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bcc8:	ab09      	add	r3, sp, #36	@ 0x24
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	6861      	ldr	r1, [r4, #4]
 800bcce:	ec49 8b10 	vmov	d0, r8, r9
 800bcd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f7ff fed6 	bl	800ba88 <__cvt>
 800bcdc:	9b06      	ldr	r3, [sp, #24]
 800bcde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bce0:	2b47      	cmp	r3, #71	@ 0x47
 800bce2:	4680      	mov	r8, r0
 800bce4:	d129      	bne.n	800bd3a <_printf_float+0x172>
 800bce6:	1cc8      	adds	r0, r1, #3
 800bce8:	db02      	blt.n	800bcf0 <_printf_float+0x128>
 800bcea:	6863      	ldr	r3, [r4, #4]
 800bcec:	4299      	cmp	r1, r3
 800bcee:	dd41      	ble.n	800bd74 <_printf_float+0x1ac>
 800bcf0:	f1aa 0a02 	sub.w	sl, sl, #2
 800bcf4:	fa5f fa8a 	uxtb.w	sl, sl
 800bcf8:	3901      	subs	r1, #1
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd00:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd02:	f7ff ff26 	bl	800bb52 <__exponent>
 800bd06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd08:	1813      	adds	r3, r2, r0
 800bd0a:	2a01      	cmp	r2, #1
 800bd0c:	4681      	mov	r9, r0
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	dc02      	bgt.n	800bd18 <_printf_float+0x150>
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	07d2      	lsls	r2, r2, #31
 800bd16:	d501      	bpl.n	800bd1c <_printf_float+0x154>
 800bd18:	3301      	adds	r3, #1
 800bd1a:	6123      	str	r3, [r4, #16]
 800bd1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0a2      	beq.n	800bc6a <_printf_float+0xa2>
 800bd24:	232d      	movs	r3, #45	@ 0x2d
 800bd26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd2a:	e79e      	b.n	800bc6a <_printf_float+0xa2>
 800bd2c:	9a06      	ldr	r2, [sp, #24]
 800bd2e:	2a47      	cmp	r2, #71	@ 0x47
 800bd30:	d1c2      	bne.n	800bcb8 <_printf_float+0xf0>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1c0      	bne.n	800bcb8 <_printf_float+0xf0>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e7bd      	b.n	800bcb6 <_printf_float+0xee>
 800bd3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd3e:	d9db      	bls.n	800bcf8 <_printf_float+0x130>
 800bd40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bd44:	d118      	bne.n	800bd78 <_printf_float+0x1b0>
 800bd46:	2900      	cmp	r1, #0
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	dd0b      	ble.n	800bd64 <_printf_float+0x19c>
 800bd4c:	6121      	str	r1, [r4, #16]
 800bd4e:	b913      	cbnz	r3, 800bd56 <_printf_float+0x18e>
 800bd50:	6822      	ldr	r2, [r4, #0]
 800bd52:	07d0      	lsls	r0, r2, #31
 800bd54:	d502      	bpl.n	800bd5c <_printf_float+0x194>
 800bd56:	3301      	adds	r3, #1
 800bd58:	440b      	add	r3, r1
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bd5e:	f04f 0900 	mov.w	r9, #0
 800bd62:	e7db      	b.n	800bd1c <_printf_float+0x154>
 800bd64:	b913      	cbnz	r3, 800bd6c <_printf_float+0x1a4>
 800bd66:	6822      	ldr	r2, [r4, #0]
 800bd68:	07d2      	lsls	r2, r2, #31
 800bd6a:	d501      	bpl.n	800bd70 <_printf_float+0x1a8>
 800bd6c:	3302      	adds	r3, #2
 800bd6e:	e7f4      	b.n	800bd5a <_printf_float+0x192>
 800bd70:	2301      	movs	r3, #1
 800bd72:	e7f2      	b.n	800bd5a <_printf_float+0x192>
 800bd74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bd78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd7a:	4299      	cmp	r1, r3
 800bd7c:	db05      	blt.n	800bd8a <_printf_float+0x1c2>
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	6121      	str	r1, [r4, #16]
 800bd82:	07d8      	lsls	r0, r3, #31
 800bd84:	d5ea      	bpl.n	800bd5c <_printf_float+0x194>
 800bd86:	1c4b      	adds	r3, r1, #1
 800bd88:	e7e7      	b.n	800bd5a <_printf_float+0x192>
 800bd8a:	2900      	cmp	r1, #0
 800bd8c:	bfd4      	ite	le
 800bd8e:	f1c1 0202 	rsble	r2, r1, #2
 800bd92:	2201      	movgt	r2, #1
 800bd94:	4413      	add	r3, r2
 800bd96:	e7e0      	b.n	800bd5a <_printf_float+0x192>
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	055a      	lsls	r2, r3, #21
 800bd9c:	d407      	bmi.n	800bdae <_printf_float+0x1e6>
 800bd9e:	6923      	ldr	r3, [r4, #16]
 800bda0:	4642      	mov	r2, r8
 800bda2:	4631      	mov	r1, r6
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b8      	blx	r7
 800bda8:	3001      	adds	r0, #1
 800bdaa:	d12b      	bne.n	800be04 <_printf_float+0x23c>
 800bdac:	e767      	b.n	800bc7e <_printf_float+0xb6>
 800bdae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bdb2:	f240 80dd 	bls.w	800bf70 <_printf_float+0x3a8>
 800bdb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f7f4 fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d033      	beq.n	800be2e <_printf_float+0x266>
 800bdc6:	4a37      	ldr	r2, [pc, #220]	@ (800bea4 <_printf_float+0x2dc>)
 800bdc8:	2301      	movs	r3, #1
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f43f af54 	beq.w	800bc7e <_printf_float+0xb6>
 800bdd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bdda:	4543      	cmp	r3, r8
 800bddc:	db02      	blt.n	800bde4 <_printf_float+0x21c>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	07d8      	lsls	r0, r3, #31
 800bde2:	d50f      	bpl.n	800be04 <_printf_float+0x23c>
 800bde4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bde8:	4631      	mov	r1, r6
 800bdea:	4628      	mov	r0, r5
 800bdec:	47b8      	blx	r7
 800bdee:	3001      	adds	r0, #1
 800bdf0:	f43f af45 	beq.w	800bc7e <_printf_float+0xb6>
 800bdf4:	f04f 0900 	mov.w	r9, #0
 800bdf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdfc:	f104 0a1a 	add.w	sl, r4, #26
 800be00:	45c8      	cmp	r8, r9
 800be02:	dc09      	bgt.n	800be18 <_printf_float+0x250>
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	079b      	lsls	r3, r3, #30
 800be08:	f100 8103 	bmi.w	800c012 <_printf_float+0x44a>
 800be0c:	68e0      	ldr	r0, [r4, #12]
 800be0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be10:	4298      	cmp	r0, r3
 800be12:	bfb8      	it	lt
 800be14:	4618      	movlt	r0, r3
 800be16:	e734      	b.n	800bc82 <_printf_float+0xba>
 800be18:	2301      	movs	r3, #1
 800be1a:	4652      	mov	r2, sl
 800be1c:	4631      	mov	r1, r6
 800be1e:	4628      	mov	r0, r5
 800be20:	47b8      	blx	r7
 800be22:	3001      	adds	r0, #1
 800be24:	f43f af2b 	beq.w	800bc7e <_printf_float+0xb6>
 800be28:	f109 0901 	add.w	r9, r9, #1
 800be2c:	e7e8      	b.n	800be00 <_printf_float+0x238>
 800be2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be30:	2b00      	cmp	r3, #0
 800be32:	dc39      	bgt.n	800bea8 <_printf_float+0x2e0>
 800be34:	4a1b      	ldr	r2, [pc, #108]	@ (800bea4 <_printf_float+0x2dc>)
 800be36:	2301      	movs	r3, #1
 800be38:	4631      	mov	r1, r6
 800be3a:	4628      	mov	r0, r5
 800be3c:	47b8      	blx	r7
 800be3e:	3001      	adds	r0, #1
 800be40:	f43f af1d 	beq.w	800bc7e <_printf_float+0xb6>
 800be44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800be48:	ea59 0303 	orrs.w	r3, r9, r3
 800be4c:	d102      	bne.n	800be54 <_printf_float+0x28c>
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	07d9      	lsls	r1, r3, #31
 800be52:	d5d7      	bpl.n	800be04 <_printf_float+0x23c>
 800be54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be58:	4631      	mov	r1, r6
 800be5a:	4628      	mov	r0, r5
 800be5c:	47b8      	blx	r7
 800be5e:	3001      	adds	r0, #1
 800be60:	f43f af0d 	beq.w	800bc7e <_printf_float+0xb6>
 800be64:	f04f 0a00 	mov.w	sl, #0
 800be68:	f104 0b1a 	add.w	fp, r4, #26
 800be6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6e:	425b      	negs	r3, r3
 800be70:	4553      	cmp	r3, sl
 800be72:	dc01      	bgt.n	800be78 <_printf_float+0x2b0>
 800be74:	464b      	mov	r3, r9
 800be76:	e793      	b.n	800bda0 <_printf_float+0x1d8>
 800be78:	2301      	movs	r3, #1
 800be7a:	465a      	mov	r2, fp
 800be7c:	4631      	mov	r1, r6
 800be7e:	4628      	mov	r0, r5
 800be80:	47b8      	blx	r7
 800be82:	3001      	adds	r0, #1
 800be84:	f43f aefb 	beq.w	800bc7e <_printf_float+0xb6>
 800be88:	f10a 0a01 	add.w	sl, sl, #1
 800be8c:	e7ee      	b.n	800be6c <_printf_float+0x2a4>
 800be8e:	bf00      	nop
 800be90:	7fefffff 	.word	0x7fefffff
 800be94:	08011369 	.word	0x08011369
 800be98:	0801136d 	.word	0x0801136d
 800be9c:	08011371 	.word	0x08011371
 800bea0:	08011375 	.word	0x08011375
 800bea4:	08011379 	.word	0x08011379
 800bea8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800beaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800beae:	4553      	cmp	r3, sl
 800beb0:	bfa8      	it	ge
 800beb2:	4653      	movge	r3, sl
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	4699      	mov	r9, r3
 800beb8:	dc36      	bgt.n	800bf28 <_printf_float+0x360>
 800beba:	f04f 0b00 	mov.w	fp, #0
 800bebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bec2:	f104 021a 	add.w	r2, r4, #26
 800bec6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bec8:	9306      	str	r3, [sp, #24]
 800beca:	eba3 0309 	sub.w	r3, r3, r9
 800bece:	455b      	cmp	r3, fp
 800bed0:	dc31      	bgt.n	800bf36 <_printf_float+0x36e>
 800bed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed4:	459a      	cmp	sl, r3
 800bed6:	dc3a      	bgt.n	800bf4e <_printf_float+0x386>
 800bed8:	6823      	ldr	r3, [r4, #0]
 800beda:	07da      	lsls	r2, r3, #31
 800bedc:	d437      	bmi.n	800bf4e <_printf_float+0x386>
 800bede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee0:	ebaa 0903 	sub.w	r9, sl, r3
 800bee4:	9b06      	ldr	r3, [sp, #24]
 800bee6:	ebaa 0303 	sub.w	r3, sl, r3
 800beea:	4599      	cmp	r9, r3
 800beec:	bfa8      	it	ge
 800beee:	4699      	movge	r9, r3
 800bef0:	f1b9 0f00 	cmp.w	r9, #0
 800bef4:	dc33      	bgt.n	800bf5e <_printf_float+0x396>
 800bef6:	f04f 0800 	mov.w	r8, #0
 800befa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800befe:	f104 0b1a 	add.w	fp, r4, #26
 800bf02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf04:	ebaa 0303 	sub.w	r3, sl, r3
 800bf08:	eba3 0309 	sub.w	r3, r3, r9
 800bf0c:	4543      	cmp	r3, r8
 800bf0e:	f77f af79 	ble.w	800be04 <_printf_float+0x23c>
 800bf12:	2301      	movs	r3, #1
 800bf14:	465a      	mov	r2, fp
 800bf16:	4631      	mov	r1, r6
 800bf18:	4628      	mov	r0, r5
 800bf1a:	47b8      	blx	r7
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	f43f aeae 	beq.w	800bc7e <_printf_float+0xb6>
 800bf22:	f108 0801 	add.w	r8, r8, #1
 800bf26:	e7ec      	b.n	800bf02 <_printf_float+0x33a>
 800bf28:	4642      	mov	r2, r8
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b8      	blx	r7
 800bf30:	3001      	adds	r0, #1
 800bf32:	d1c2      	bne.n	800beba <_printf_float+0x2f2>
 800bf34:	e6a3      	b.n	800bc7e <_printf_float+0xb6>
 800bf36:	2301      	movs	r3, #1
 800bf38:	4631      	mov	r1, r6
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	9206      	str	r2, [sp, #24]
 800bf3e:	47b8      	blx	r7
 800bf40:	3001      	adds	r0, #1
 800bf42:	f43f ae9c 	beq.w	800bc7e <_printf_float+0xb6>
 800bf46:	9a06      	ldr	r2, [sp, #24]
 800bf48:	f10b 0b01 	add.w	fp, fp, #1
 800bf4c:	e7bb      	b.n	800bec6 <_printf_float+0x2fe>
 800bf4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf52:	4631      	mov	r1, r6
 800bf54:	4628      	mov	r0, r5
 800bf56:	47b8      	blx	r7
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d1c0      	bne.n	800bede <_printf_float+0x316>
 800bf5c:	e68f      	b.n	800bc7e <_printf_float+0xb6>
 800bf5e:	9a06      	ldr	r2, [sp, #24]
 800bf60:	464b      	mov	r3, r9
 800bf62:	4442      	add	r2, r8
 800bf64:	4631      	mov	r1, r6
 800bf66:	4628      	mov	r0, r5
 800bf68:	47b8      	blx	r7
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	d1c3      	bne.n	800bef6 <_printf_float+0x32e>
 800bf6e:	e686      	b.n	800bc7e <_printf_float+0xb6>
 800bf70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf74:	f1ba 0f01 	cmp.w	sl, #1
 800bf78:	dc01      	bgt.n	800bf7e <_printf_float+0x3b6>
 800bf7a:	07db      	lsls	r3, r3, #31
 800bf7c:	d536      	bpl.n	800bfec <_printf_float+0x424>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	4642      	mov	r2, r8
 800bf82:	4631      	mov	r1, r6
 800bf84:	4628      	mov	r0, r5
 800bf86:	47b8      	blx	r7
 800bf88:	3001      	adds	r0, #1
 800bf8a:	f43f ae78 	beq.w	800bc7e <_printf_float+0xb6>
 800bf8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf92:	4631      	mov	r1, r6
 800bf94:	4628      	mov	r0, r5
 800bf96:	47b8      	blx	r7
 800bf98:	3001      	adds	r0, #1
 800bf9a:	f43f ae70 	beq.w	800bc7e <_printf_float+0xb6>
 800bf9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfaa:	f7f4 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfae:	b9c0      	cbnz	r0, 800bfe2 <_printf_float+0x41a>
 800bfb0:	4653      	mov	r3, sl
 800bfb2:	f108 0201 	add.w	r2, r8, #1
 800bfb6:	4631      	mov	r1, r6
 800bfb8:	4628      	mov	r0, r5
 800bfba:	47b8      	blx	r7
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d10c      	bne.n	800bfda <_printf_float+0x412>
 800bfc0:	e65d      	b.n	800bc7e <_printf_float+0xb6>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	465a      	mov	r2, fp
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	4628      	mov	r0, r5
 800bfca:	47b8      	blx	r7
 800bfcc:	3001      	adds	r0, #1
 800bfce:	f43f ae56 	beq.w	800bc7e <_printf_float+0xb6>
 800bfd2:	f108 0801 	add.w	r8, r8, #1
 800bfd6:	45d0      	cmp	r8, sl
 800bfd8:	dbf3      	blt.n	800bfc2 <_printf_float+0x3fa>
 800bfda:	464b      	mov	r3, r9
 800bfdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bfe0:	e6df      	b.n	800bda2 <_printf_float+0x1da>
 800bfe2:	f04f 0800 	mov.w	r8, #0
 800bfe6:	f104 0b1a 	add.w	fp, r4, #26
 800bfea:	e7f4      	b.n	800bfd6 <_printf_float+0x40e>
 800bfec:	2301      	movs	r3, #1
 800bfee:	4642      	mov	r2, r8
 800bff0:	e7e1      	b.n	800bfb6 <_printf_float+0x3ee>
 800bff2:	2301      	movs	r3, #1
 800bff4:	464a      	mov	r2, r9
 800bff6:	4631      	mov	r1, r6
 800bff8:	4628      	mov	r0, r5
 800bffa:	47b8      	blx	r7
 800bffc:	3001      	adds	r0, #1
 800bffe:	f43f ae3e 	beq.w	800bc7e <_printf_float+0xb6>
 800c002:	f108 0801 	add.w	r8, r8, #1
 800c006:	68e3      	ldr	r3, [r4, #12]
 800c008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c00a:	1a5b      	subs	r3, r3, r1
 800c00c:	4543      	cmp	r3, r8
 800c00e:	dcf0      	bgt.n	800bff2 <_printf_float+0x42a>
 800c010:	e6fc      	b.n	800be0c <_printf_float+0x244>
 800c012:	f04f 0800 	mov.w	r8, #0
 800c016:	f104 0919 	add.w	r9, r4, #25
 800c01a:	e7f4      	b.n	800c006 <_printf_float+0x43e>

0800c01c <_printf_common>:
 800c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c020:	4616      	mov	r6, r2
 800c022:	4698      	mov	r8, r3
 800c024:	688a      	ldr	r2, [r1, #8]
 800c026:	690b      	ldr	r3, [r1, #16]
 800c028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c02c:	4293      	cmp	r3, r2
 800c02e:	bfb8      	it	lt
 800c030:	4613      	movlt	r3, r2
 800c032:	6033      	str	r3, [r6, #0]
 800c034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c038:	4607      	mov	r7, r0
 800c03a:	460c      	mov	r4, r1
 800c03c:	b10a      	cbz	r2, 800c042 <_printf_common+0x26>
 800c03e:	3301      	adds	r3, #1
 800c040:	6033      	str	r3, [r6, #0]
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	0699      	lsls	r1, r3, #26
 800c046:	bf42      	ittt	mi
 800c048:	6833      	ldrmi	r3, [r6, #0]
 800c04a:	3302      	addmi	r3, #2
 800c04c:	6033      	strmi	r3, [r6, #0]
 800c04e:	6825      	ldr	r5, [r4, #0]
 800c050:	f015 0506 	ands.w	r5, r5, #6
 800c054:	d106      	bne.n	800c064 <_printf_common+0x48>
 800c056:	f104 0a19 	add.w	sl, r4, #25
 800c05a:	68e3      	ldr	r3, [r4, #12]
 800c05c:	6832      	ldr	r2, [r6, #0]
 800c05e:	1a9b      	subs	r3, r3, r2
 800c060:	42ab      	cmp	r3, r5
 800c062:	dc26      	bgt.n	800c0b2 <_printf_common+0x96>
 800c064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c068:	6822      	ldr	r2, [r4, #0]
 800c06a:	3b00      	subs	r3, #0
 800c06c:	bf18      	it	ne
 800c06e:	2301      	movne	r3, #1
 800c070:	0692      	lsls	r2, r2, #26
 800c072:	d42b      	bmi.n	800c0cc <_printf_common+0xb0>
 800c074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c078:	4641      	mov	r1, r8
 800c07a:	4638      	mov	r0, r7
 800c07c:	47c8      	blx	r9
 800c07e:	3001      	adds	r0, #1
 800c080:	d01e      	beq.n	800c0c0 <_printf_common+0xa4>
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	6922      	ldr	r2, [r4, #16]
 800c086:	f003 0306 	and.w	r3, r3, #6
 800c08a:	2b04      	cmp	r3, #4
 800c08c:	bf02      	ittt	eq
 800c08e:	68e5      	ldreq	r5, [r4, #12]
 800c090:	6833      	ldreq	r3, [r6, #0]
 800c092:	1aed      	subeq	r5, r5, r3
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	bf0c      	ite	eq
 800c098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c09c:	2500      	movne	r5, #0
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	bfc4      	itt	gt
 800c0a2:	1a9b      	subgt	r3, r3, r2
 800c0a4:	18ed      	addgt	r5, r5, r3
 800c0a6:	2600      	movs	r6, #0
 800c0a8:	341a      	adds	r4, #26
 800c0aa:	42b5      	cmp	r5, r6
 800c0ac:	d11a      	bne.n	800c0e4 <_printf_common+0xc8>
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	e008      	b.n	800c0c4 <_printf_common+0xa8>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	4652      	mov	r2, sl
 800c0b6:	4641      	mov	r1, r8
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	47c8      	blx	r9
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d103      	bne.n	800c0c8 <_printf_common+0xac>
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c8:	3501      	adds	r5, #1
 800c0ca:	e7c6      	b.n	800c05a <_printf_common+0x3e>
 800c0cc:	18e1      	adds	r1, r4, r3
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	2030      	movs	r0, #48	@ 0x30
 800c0d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c0d6:	4422      	add	r2, r4
 800c0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c0dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c0e0:	3302      	adds	r3, #2
 800c0e2:	e7c7      	b.n	800c074 <_printf_common+0x58>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	4622      	mov	r2, r4
 800c0e8:	4641      	mov	r1, r8
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	47c8      	blx	r9
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d0e6      	beq.n	800c0c0 <_printf_common+0xa4>
 800c0f2:	3601      	adds	r6, #1
 800c0f4:	e7d9      	b.n	800c0aa <_printf_common+0x8e>
	...

0800c0f8 <_printf_i>:
 800c0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fc:	7e0f      	ldrb	r7, [r1, #24]
 800c0fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c100:	2f78      	cmp	r7, #120	@ 0x78
 800c102:	4691      	mov	r9, r2
 800c104:	4680      	mov	r8, r0
 800c106:	460c      	mov	r4, r1
 800c108:	469a      	mov	sl, r3
 800c10a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c10e:	d807      	bhi.n	800c120 <_printf_i+0x28>
 800c110:	2f62      	cmp	r7, #98	@ 0x62
 800c112:	d80a      	bhi.n	800c12a <_printf_i+0x32>
 800c114:	2f00      	cmp	r7, #0
 800c116:	f000 80d2 	beq.w	800c2be <_printf_i+0x1c6>
 800c11a:	2f58      	cmp	r7, #88	@ 0x58
 800c11c:	f000 80b9 	beq.w	800c292 <_printf_i+0x19a>
 800c120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c128:	e03a      	b.n	800c1a0 <_printf_i+0xa8>
 800c12a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c12e:	2b15      	cmp	r3, #21
 800c130:	d8f6      	bhi.n	800c120 <_printf_i+0x28>
 800c132:	a101      	add	r1, pc, #4	@ (adr r1, 800c138 <_printf_i+0x40>)
 800c134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c138:	0800c191 	.word	0x0800c191
 800c13c:	0800c1a5 	.word	0x0800c1a5
 800c140:	0800c121 	.word	0x0800c121
 800c144:	0800c121 	.word	0x0800c121
 800c148:	0800c121 	.word	0x0800c121
 800c14c:	0800c121 	.word	0x0800c121
 800c150:	0800c1a5 	.word	0x0800c1a5
 800c154:	0800c121 	.word	0x0800c121
 800c158:	0800c121 	.word	0x0800c121
 800c15c:	0800c121 	.word	0x0800c121
 800c160:	0800c121 	.word	0x0800c121
 800c164:	0800c2a5 	.word	0x0800c2a5
 800c168:	0800c1cf 	.word	0x0800c1cf
 800c16c:	0800c25f 	.word	0x0800c25f
 800c170:	0800c121 	.word	0x0800c121
 800c174:	0800c121 	.word	0x0800c121
 800c178:	0800c2c7 	.word	0x0800c2c7
 800c17c:	0800c121 	.word	0x0800c121
 800c180:	0800c1cf 	.word	0x0800c1cf
 800c184:	0800c121 	.word	0x0800c121
 800c188:	0800c121 	.word	0x0800c121
 800c18c:	0800c267 	.word	0x0800c267
 800c190:	6833      	ldr	r3, [r6, #0]
 800c192:	1d1a      	adds	r2, r3, #4
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6032      	str	r2, [r6, #0]
 800c198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c19c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e09d      	b.n	800c2e0 <_printf_i+0x1e8>
 800c1a4:	6833      	ldr	r3, [r6, #0]
 800c1a6:	6820      	ldr	r0, [r4, #0]
 800c1a8:	1d19      	adds	r1, r3, #4
 800c1aa:	6031      	str	r1, [r6, #0]
 800c1ac:	0606      	lsls	r6, r0, #24
 800c1ae:	d501      	bpl.n	800c1b4 <_printf_i+0xbc>
 800c1b0:	681d      	ldr	r5, [r3, #0]
 800c1b2:	e003      	b.n	800c1bc <_printf_i+0xc4>
 800c1b4:	0645      	lsls	r5, r0, #25
 800c1b6:	d5fb      	bpl.n	800c1b0 <_printf_i+0xb8>
 800c1b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1bc:	2d00      	cmp	r5, #0
 800c1be:	da03      	bge.n	800c1c8 <_printf_i+0xd0>
 800c1c0:	232d      	movs	r3, #45	@ 0x2d
 800c1c2:	426d      	negs	r5, r5
 800c1c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1c8:	4859      	ldr	r0, [pc, #356]	@ (800c330 <_printf_i+0x238>)
 800c1ca:	230a      	movs	r3, #10
 800c1cc:	e011      	b.n	800c1f2 <_printf_i+0xfa>
 800c1ce:	6821      	ldr	r1, [r4, #0]
 800c1d0:	6833      	ldr	r3, [r6, #0]
 800c1d2:	0608      	lsls	r0, r1, #24
 800c1d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c1d8:	d402      	bmi.n	800c1e0 <_printf_i+0xe8>
 800c1da:	0649      	lsls	r1, r1, #25
 800c1dc:	bf48      	it	mi
 800c1de:	b2ad      	uxthmi	r5, r5
 800c1e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c1e2:	4853      	ldr	r0, [pc, #332]	@ (800c330 <_printf_i+0x238>)
 800c1e4:	6033      	str	r3, [r6, #0]
 800c1e6:	bf14      	ite	ne
 800c1e8:	230a      	movne	r3, #10
 800c1ea:	2308      	moveq	r3, #8
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c1f2:	6866      	ldr	r6, [r4, #4]
 800c1f4:	60a6      	str	r6, [r4, #8]
 800c1f6:	2e00      	cmp	r6, #0
 800c1f8:	bfa2      	ittt	ge
 800c1fa:	6821      	ldrge	r1, [r4, #0]
 800c1fc:	f021 0104 	bicge.w	r1, r1, #4
 800c200:	6021      	strge	r1, [r4, #0]
 800c202:	b90d      	cbnz	r5, 800c208 <_printf_i+0x110>
 800c204:	2e00      	cmp	r6, #0
 800c206:	d04b      	beq.n	800c2a0 <_printf_i+0x1a8>
 800c208:	4616      	mov	r6, r2
 800c20a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c20e:	fb03 5711 	mls	r7, r3, r1, r5
 800c212:	5dc7      	ldrb	r7, [r0, r7]
 800c214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c218:	462f      	mov	r7, r5
 800c21a:	42bb      	cmp	r3, r7
 800c21c:	460d      	mov	r5, r1
 800c21e:	d9f4      	bls.n	800c20a <_printf_i+0x112>
 800c220:	2b08      	cmp	r3, #8
 800c222:	d10b      	bne.n	800c23c <_printf_i+0x144>
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	07df      	lsls	r7, r3, #31
 800c228:	d508      	bpl.n	800c23c <_printf_i+0x144>
 800c22a:	6923      	ldr	r3, [r4, #16]
 800c22c:	6861      	ldr	r1, [r4, #4]
 800c22e:	4299      	cmp	r1, r3
 800c230:	bfde      	ittt	le
 800c232:	2330      	movle	r3, #48	@ 0x30
 800c234:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c238:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c23c:	1b92      	subs	r2, r2, r6
 800c23e:	6122      	str	r2, [r4, #16]
 800c240:	f8cd a000 	str.w	sl, [sp]
 800c244:	464b      	mov	r3, r9
 800c246:	aa03      	add	r2, sp, #12
 800c248:	4621      	mov	r1, r4
 800c24a:	4640      	mov	r0, r8
 800c24c:	f7ff fee6 	bl	800c01c <_printf_common>
 800c250:	3001      	adds	r0, #1
 800c252:	d14a      	bne.n	800c2ea <_printf_i+0x1f2>
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	b004      	add	sp, #16
 800c25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	f043 0320 	orr.w	r3, r3, #32
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	4833      	ldr	r0, [pc, #204]	@ (800c334 <_printf_i+0x23c>)
 800c268:	2778      	movs	r7, #120	@ 0x78
 800c26a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	6831      	ldr	r1, [r6, #0]
 800c272:	061f      	lsls	r7, r3, #24
 800c274:	f851 5b04 	ldr.w	r5, [r1], #4
 800c278:	d402      	bmi.n	800c280 <_printf_i+0x188>
 800c27a:	065f      	lsls	r7, r3, #25
 800c27c:	bf48      	it	mi
 800c27e:	b2ad      	uxthmi	r5, r5
 800c280:	6031      	str	r1, [r6, #0]
 800c282:	07d9      	lsls	r1, r3, #31
 800c284:	bf44      	itt	mi
 800c286:	f043 0320 	orrmi.w	r3, r3, #32
 800c28a:	6023      	strmi	r3, [r4, #0]
 800c28c:	b11d      	cbz	r5, 800c296 <_printf_i+0x19e>
 800c28e:	2310      	movs	r3, #16
 800c290:	e7ac      	b.n	800c1ec <_printf_i+0xf4>
 800c292:	4827      	ldr	r0, [pc, #156]	@ (800c330 <_printf_i+0x238>)
 800c294:	e7e9      	b.n	800c26a <_printf_i+0x172>
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	f023 0320 	bic.w	r3, r3, #32
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	e7f6      	b.n	800c28e <_printf_i+0x196>
 800c2a0:	4616      	mov	r6, r2
 800c2a2:	e7bd      	b.n	800c220 <_printf_i+0x128>
 800c2a4:	6833      	ldr	r3, [r6, #0]
 800c2a6:	6825      	ldr	r5, [r4, #0]
 800c2a8:	6961      	ldr	r1, [r4, #20]
 800c2aa:	1d18      	adds	r0, r3, #4
 800c2ac:	6030      	str	r0, [r6, #0]
 800c2ae:	062e      	lsls	r6, r5, #24
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	d501      	bpl.n	800c2b8 <_printf_i+0x1c0>
 800c2b4:	6019      	str	r1, [r3, #0]
 800c2b6:	e002      	b.n	800c2be <_printf_i+0x1c6>
 800c2b8:	0668      	lsls	r0, r5, #25
 800c2ba:	d5fb      	bpl.n	800c2b4 <_printf_i+0x1bc>
 800c2bc:	8019      	strh	r1, [r3, #0]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	6123      	str	r3, [r4, #16]
 800c2c2:	4616      	mov	r6, r2
 800c2c4:	e7bc      	b.n	800c240 <_printf_i+0x148>
 800c2c6:	6833      	ldr	r3, [r6, #0]
 800c2c8:	1d1a      	adds	r2, r3, #4
 800c2ca:	6032      	str	r2, [r6, #0]
 800c2cc:	681e      	ldr	r6, [r3, #0]
 800c2ce:	6862      	ldr	r2, [r4, #4]
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7f3 ff7c 	bl	80001d0 <memchr>
 800c2d8:	b108      	cbz	r0, 800c2de <_printf_i+0x1e6>
 800c2da:	1b80      	subs	r0, r0, r6
 800c2dc:	6060      	str	r0, [r4, #4]
 800c2de:	6863      	ldr	r3, [r4, #4]
 800c2e0:	6123      	str	r3, [r4, #16]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2e8:	e7aa      	b.n	800c240 <_printf_i+0x148>
 800c2ea:	6923      	ldr	r3, [r4, #16]
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	47d0      	blx	sl
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	d0ad      	beq.n	800c254 <_printf_i+0x15c>
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	079b      	lsls	r3, r3, #30
 800c2fc:	d413      	bmi.n	800c326 <_printf_i+0x22e>
 800c2fe:	68e0      	ldr	r0, [r4, #12]
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	4298      	cmp	r0, r3
 800c304:	bfb8      	it	lt
 800c306:	4618      	movlt	r0, r3
 800c308:	e7a6      	b.n	800c258 <_printf_i+0x160>
 800c30a:	2301      	movs	r3, #1
 800c30c:	4632      	mov	r2, r6
 800c30e:	4649      	mov	r1, r9
 800c310:	4640      	mov	r0, r8
 800c312:	47d0      	blx	sl
 800c314:	3001      	adds	r0, #1
 800c316:	d09d      	beq.n	800c254 <_printf_i+0x15c>
 800c318:	3501      	adds	r5, #1
 800c31a:	68e3      	ldr	r3, [r4, #12]
 800c31c:	9903      	ldr	r1, [sp, #12]
 800c31e:	1a5b      	subs	r3, r3, r1
 800c320:	42ab      	cmp	r3, r5
 800c322:	dcf2      	bgt.n	800c30a <_printf_i+0x212>
 800c324:	e7eb      	b.n	800c2fe <_printf_i+0x206>
 800c326:	2500      	movs	r5, #0
 800c328:	f104 0619 	add.w	r6, r4, #25
 800c32c:	e7f5      	b.n	800c31a <_printf_i+0x222>
 800c32e:	bf00      	nop
 800c330:	0801137b 	.word	0x0801137b
 800c334:	0801138c 	.word	0x0801138c

0800c338 <_scanf_float>:
 800c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	b087      	sub	sp, #28
 800c33e:	4617      	mov	r7, r2
 800c340:	9303      	str	r3, [sp, #12]
 800c342:	688b      	ldr	r3, [r1, #8]
 800c344:	1e5a      	subs	r2, r3, #1
 800c346:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c34a:	bf81      	itttt	hi
 800c34c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c350:	eb03 0b05 	addhi.w	fp, r3, r5
 800c354:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c358:	608b      	strhi	r3, [r1, #8]
 800c35a:	680b      	ldr	r3, [r1, #0]
 800c35c:	460a      	mov	r2, r1
 800c35e:	f04f 0500 	mov.w	r5, #0
 800c362:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c366:	f842 3b1c 	str.w	r3, [r2], #28
 800c36a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c36e:	4680      	mov	r8, r0
 800c370:	460c      	mov	r4, r1
 800c372:	bf98      	it	ls
 800c374:	f04f 0b00 	movls.w	fp, #0
 800c378:	9201      	str	r2, [sp, #4]
 800c37a:	4616      	mov	r6, r2
 800c37c:	46aa      	mov	sl, r5
 800c37e:	46a9      	mov	r9, r5
 800c380:	9502      	str	r5, [sp, #8]
 800c382:	68a2      	ldr	r2, [r4, #8]
 800c384:	b152      	cbz	r2, 800c39c <_scanf_float+0x64>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	2b4e      	cmp	r3, #78	@ 0x4e
 800c38c:	d864      	bhi.n	800c458 <_scanf_float+0x120>
 800c38e:	2b40      	cmp	r3, #64	@ 0x40
 800c390:	d83c      	bhi.n	800c40c <_scanf_float+0xd4>
 800c392:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c396:	b2c8      	uxtb	r0, r1
 800c398:	280e      	cmp	r0, #14
 800c39a:	d93a      	bls.n	800c412 <_scanf_float+0xda>
 800c39c:	f1b9 0f00 	cmp.w	r9, #0
 800c3a0:	d003      	beq.n	800c3aa <_scanf_float+0x72>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3ae:	f1ba 0f01 	cmp.w	sl, #1
 800c3b2:	f200 8117 	bhi.w	800c5e4 <_scanf_float+0x2ac>
 800c3b6:	9b01      	ldr	r3, [sp, #4]
 800c3b8:	429e      	cmp	r6, r3
 800c3ba:	f200 8108 	bhi.w	800c5ce <_scanf_float+0x296>
 800c3be:	2001      	movs	r0, #1
 800c3c0:	b007      	add	sp, #28
 800c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c3ca:	2a0d      	cmp	r2, #13
 800c3cc:	d8e6      	bhi.n	800c39c <_scanf_float+0x64>
 800c3ce:	a101      	add	r1, pc, #4	@ (adr r1, 800c3d4 <_scanf_float+0x9c>)
 800c3d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3d4:	0800c51b 	.word	0x0800c51b
 800c3d8:	0800c39d 	.word	0x0800c39d
 800c3dc:	0800c39d 	.word	0x0800c39d
 800c3e0:	0800c39d 	.word	0x0800c39d
 800c3e4:	0800c57b 	.word	0x0800c57b
 800c3e8:	0800c553 	.word	0x0800c553
 800c3ec:	0800c39d 	.word	0x0800c39d
 800c3f0:	0800c39d 	.word	0x0800c39d
 800c3f4:	0800c529 	.word	0x0800c529
 800c3f8:	0800c39d 	.word	0x0800c39d
 800c3fc:	0800c39d 	.word	0x0800c39d
 800c400:	0800c39d 	.word	0x0800c39d
 800c404:	0800c39d 	.word	0x0800c39d
 800c408:	0800c4e1 	.word	0x0800c4e1
 800c40c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c410:	e7db      	b.n	800c3ca <_scanf_float+0x92>
 800c412:	290e      	cmp	r1, #14
 800c414:	d8c2      	bhi.n	800c39c <_scanf_float+0x64>
 800c416:	a001      	add	r0, pc, #4	@ (adr r0, 800c41c <_scanf_float+0xe4>)
 800c418:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c41c:	0800c4d1 	.word	0x0800c4d1
 800c420:	0800c39d 	.word	0x0800c39d
 800c424:	0800c4d1 	.word	0x0800c4d1
 800c428:	0800c567 	.word	0x0800c567
 800c42c:	0800c39d 	.word	0x0800c39d
 800c430:	0800c479 	.word	0x0800c479
 800c434:	0800c4b7 	.word	0x0800c4b7
 800c438:	0800c4b7 	.word	0x0800c4b7
 800c43c:	0800c4b7 	.word	0x0800c4b7
 800c440:	0800c4b7 	.word	0x0800c4b7
 800c444:	0800c4b7 	.word	0x0800c4b7
 800c448:	0800c4b7 	.word	0x0800c4b7
 800c44c:	0800c4b7 	.word	0x0800c4b7
 800c450:	0800c4b7 	.word	0x0800c4b7
 800c454:	0800c4b7 	.word	0x0800c4b7
 800c458:	2b6e      	cmp	r3, #110	@ 0x6e
 800c45a:	d809      	bhi.n	800c470 <_scanf_float+0x138>
 800c45c:	2b60      	cmp	r3, #96	@ 0x60
 800c45e:	d8b2      	bhi.n	800c3c6 <_scanf_float+0x8e>
 800c460:	2b54      	cmp	r3, #84	@ 0x54
 800c462:	d07b      	beq.n	800c55c <_scanf_float+0x224>
 800c464:	2b59      	cmp	r3, #89	@ 0x59
 800c466:	d199      	bne.n	800c39c <_scanf_float+0x64>
 800c468:	2d07      	cmp	r5, #7
 800c46a:	d197      	bne.n	800c39c <_scanf_float+0x64>
 800c46c:	2508      	movs	r5, #8
 800c46e:	e02c      	b.n	800c4ca <_scanf_float+0x192>
 800c470:	2b74      	cmp	r3, #116	@ 0x74
 800c472:	d073      	beq.n	800c55c <_scanf_float+0x224>
 800c474:	2b79      	cmp	r3, #121	@ 0x79
 800c476:	e7f6      	b.n	800c466 <_scanf_float+0x12e>
 800c478:	6821      	ldr	r1, [r4, #0]
 800c47a:	05c8      	lsls	r0, r1, #23
 800c47c:	d51b      	bpl.n	800c4b6 <_scanf_float+0x17e>
 800c47e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c482:	6021      	str	r1, [r4, #0]
 800c484:	f109 0901 	add.w	r9, r9, #1
 800c488:	f1bb 0f00 	cmp.w	fp, #0
 800c48c:	d003      	beq.n	800c496 <_scanf_float+0x15e>
 800c48e:	3201      	adds	r2, #1
 800c490:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c494:	60a2      	str	r2, [r4, #8]
 800c496:	68a3      	ldr	r3, [r4, #8]
 800c498:	3b01      	subs	r3, #1
 800c49a:	60a3      	str	r3, [r4, #8]
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	6123      	str	r3, [r4, #16]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	607b      	str	r3, [r7, #4]
 800c4aa:	f340 8087 	ble.w	800c5bc <_scanf_float+0x284>
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	e765      	b.n	800c382 <_scanf_float+0x4a>
 800c4b6:	eb1a 0105 	adds.w	r1, sl, r5
 800c4ba:	f47f af6f 	bne.w	800c39c <_scanf_float+0x64>
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c4c4:	6022      	str	r2, [r4, #0]
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	468a      	mov	sl, r1
 800c4ca:	f806 3b01 	strb.w	r3, [r6], #1
 800c4ce:	e7e2      	b.n	800c496 <_scanf_float+0x15e>
 800c4d0:	6822      	ldr	r2, [r4, #0]
 800c4d2:	0610      	lsls	r0, r2, #24
 800c4d4:	f57f af62 	bpl.w	800c39c <_scanf_float+0x64>
 800c4d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c4dc:	6022      	str	r2, [r4, #0]
 800c4de:	e7f4      	b.n	800c4ca <_scanf_float+0x192>
 800c4e0:	f1ba 0f00 	cmp.w	sl, #0
 800c4e4:	d10e      	bne.n	800c504 <_scanf_float+0x1cc>
 800c4e6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ea:	d10e      	bne.n	800c50a <_scanf_float+0x1d2>
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c4f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c4f6:	d108      	bne.n	800c50a <_scanf_float+0x1d2>
 800c4f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c4fc:	6022      	str	r2, [r4, #0]
 800c4fe:	f04f 0a01 	mov.w	sl, #1
 800c502:	e7e2      	b.n	800c4ca <_scanf_float+0x192>
 800c504:	f1ba 0f02 	cmp.w	sl, #2
 800c508:	d055      	beq.n	800c5b6 <_scanf_float+0x27e>
 800c50a:	2d01      	cmp	r5, #1
 800c50c:	d002      	beq.n	800c514 <_scanf_float+0x1dc>
 800c50e:	2d04      	cmp	r5, #4
 800c510:	f47f af44 	bne.w	800c39c <_scanf_float+0x64>
 800c514:	3501      	adds	r5, #1
 800c516:	b2ed      	uxtb	r5, r5
 800c518:	e7d7      	b.n	800c4ca <_scanf_float+0x192>
 800c51a:	f1ba 0f01 	cmp.w	sl, #1
 800c51e:	f47f af3d 	bne.w	800c39c <_scanf_float+0x64>
 800c522:	f04f 0a02 	mov.w	sl, #2
 800c526:	e7d0      	b.n	800c4ca <_scanf_float+0x192>
 800c528:	b97d      	cbnz	r5, 800c54a <_scanf_float+0x212>
 800c52a:	f1b9 0f00 	cmp.w	r9, #0
 800c52e:	f47f af38 	bne.w	800c3a2 <_scanf_float+0x6a>
 800c532:	6822      	ldr	r2, [r4, #0]
 800c534:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c538:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c53c:	f040 8108 	bne.w	800c750 <_scanf_float+0x418>
 800c540:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c544:	6022      	str	r2, [r4, #0]
 800c546:	2501      	movs	r5, #1
 800c548:	e7bf      	b.n	800c4ca <_scanf_float+0x192>
 800c54a:	2d03      	cmp	r5, #3
 800c54c:	d0e2      	beq.n	800c514 <_scanf_float+0x1dc>
 800c54e:	2d05      	cmp	r5, #5
 800c550:	e7de      	b.n	800c510 <_scanf_float+0x1d8>
 800c552:	2d02      	cmp	r5, #2
 800c554:	f47f af22 	bne.w	800c39c <_scanf_float+0x64>
 800c558:	2503      	movs	r5, #3
 800c55a:	e7b6      	b.n	800c4ca <_scanf_float+0x192>
 800c55c:	2d06      	cmp	r5, #6
 800c55e:	f47f af1d 	bne.w	800c39c <_scanf_float+0x64>
 800c562:	2507      	movs	r5, #7
 800c564:	e7b1      	b.n	800c4ca <_scanf_float+0x192>
 800c566:	6822      	ldr	r2, [r4, #0]
 800c568:	0591      	lsls	r1, r2, #22
 800c56a:	f57f af17 	bpl.w	800c39c <_scanf_float+0x64>
 800c56e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c572:	6022      	str	r2, [r4, #0]
 800c574:	f8cd 9008 	str.w	r9, [sp, #8]
 800c578:	e7a7      	b.n	800c4ca <_scanf_float+0x192>
 800c57a:	6822      	ldr	r2, [r4, #0]
 800c57c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c580:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c584:	d006      	beq.n	800c594 <_scanf_float+0x25c>
 800c586:	0550      	lsls	r0, r2, #21
 800c588:	f57f af08 	bpl.w	800c39c <_scanf_float+0x64>
 800c58c:	f1b9 0f00 	cmp.w	r9, #0
 800c590:	f000 80de 	beq.w	800c750 <_scanf_float+0x418>
 800c594:	0591      	lsls	r1, r2, #22
 800c596:	bf58      	it	pl
 800c598:	9902      	ldrpl	r1, [sp, #8]
 800c59a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c59e:	bf58      	it	pl
 800c5a0:	eba9 0101 	subpl.w	r1, r9, r1
 800c5a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c5a8:	bf58      	it	pl
 800c5aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c5ae:	6022      	str	r2, [r4, #0]
 800c5b0:	f04f 0900 	mov.w	r9, #0
 800c5b4:	e789      	b.n	800c4ca <_scanf_float+0x192>
 800c5b6:	f04f 0a03 	mov.w	sl, #3
 800c5ba:	e786      	b.n	800c4ca <_scanf_float+0x192>
 800c5bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	4640      	mov	r0, r8
 800c5c4:	4798      	blx	r3
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f43f aedb 	beq.w	800c382 <_scanf_float+0x4a>
 800c5cc:	e6e6      	b.n	800c39c <_scanf_float+0x64>
 800c5ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5d6:	463a      	mov	r2, r7
 800c5d8:	4640      	mov	r0, r8
 800c5da:	4798      	blx	r3
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	6123      	str	r3, [r4, #16]
 800c5e2:	e6e8      	b.n	800c3b6 <_scanf_float+0x7e>
 800c5e4:	1e6b      	subs	r3, r5, #1
 800c5e6:	2b06      	cmp	r3, #6
 800c5e8:	d824      	bhi.n	800c634 <_scanf_float+0x2fc>
 800c5ea:	2d02      	cmp	r5, #2
 800c5ec:	d836      	bhi.n	800c65c <_scanf_float+0x324>
 800c5ee:	9b01      	ldr	r3, [sp, #4]
 800c5f0:	429e      	cmp	r6, r3
 800c5f2:	f67f aee4 	bls.w	800c3be <_scanf_float+0x86>
 800c5f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5fe:	463a      	mov	r2, r7
 800c600:	4640      	mov	r0, r8
 800c602:	4798      	blx	r3
 800c604:	6923      	ldr	r3, [r4, #16]
 800c606:	3b01      	subs	r3, #1
 800c608:	6123      	str	r3, [r4, #16]
 800c60a:	e7f0      	b.n	800c5ee <_scanf_float+0x2b6>
 800c60c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c610:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c614:	463a      	mov	r2, r7
 800c616:	4640      	mov	r0, r8
 800c618:	4798      	blx	r3
 800c61a:	6923      	ldr	r3, [r4, #16]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	6123      	str	r3, [r4, #16]
 800c620:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c624:	fa5f fa8a 	uxtb.w	sl, sl
 800c628:	f1ba 0f02 	cmp.w	sl, #2
 800c62c:	d1ee      	bne.n	800c60c <_scanf_float+0x2d4>
 800c62e:	3d03      	subs	r5, #3
 800c630:	b2ed      	uxtb	r5, r5
 800c632:	1b76      	subs	r6, r6, r5
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	05da      	lsls	r2, r3, #23
 800c638:	d530      	bpl.n	800c69c <_scanf_float+0x364>
 800c63a:	055b      	lsls	r3, r3, #21
 800c63c:	d511      	bpl.n	800c662 <_scanf_float+0x32a>
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	429e      	cmp	r6, r3
 800c642:	f67f aebc 	bls.w	800c3be <_scanf_float+0x86>
 800c646:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c64a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c64e:	463a      	mov	r2, r7
 800c650:	4640      	mov	r0, r8
 800c652:	4798      	blx	r3
 800c654:	6923      	ldr	r3, [r4, #16]
 800c656:	3b01      	subs	r3, #1
 800c658:	6123      	str	r3, [r4, #16]
 800c65a:	e7f0      	b.n	800c63e <_scanf_float+0x306>
 800c65c:	46aa      	mov	sl, r5
 800c65e:	46b3      	mov	fp, r6
 800c660:	e7de      	b.n	800c620 <_scanf_float+0x2e8>
 800c662:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c666:	6923      	ldr	r3, [r4, #16]
 800c668:	2965      	cmp	r1, #101	@ 0x65
 800c66a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c66e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c672:	6123      	str	r3, [r4, #16]
 800c674:	d00c      	beq.n	800c690 <_scanf_float+0x358>
 800c676:	2945      	cmp	r1, #69	@ 0x45
 800c678:	d00a      	beq.n	800c690 <_scanf_float+0x358>
 800c67a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c67e:	463a      	mov	r2, r7
 800c680:	4640      	mov	r0, r8
 800c682:	4798      	blx	r3
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	1eb5      	subs	r5, r6, #2
 800c68e:	6123      	str	r3, [r4, #16]
 800c690:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c694:	463a      	mov	r2, r7
 800c696:	4640      	mov	r0, r8
 800c698:	4798      	blx	r3
 800c69a:	462e      	mov	r6, r5
 800c69c:	6822      	ldr	r2, [r4, #0]
 800c69e:	f012 0210 	ands.w	r2, r2, #16
 800c6a2:	d001      	beq.n	800c6a8 <_scanf_float+0x370>
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	e68b      	b.n	800c3c0 <_scanf_float+0x88>
 800c6a8:	7032      	strb	r2, [r6, #0]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c6b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6b4:	d11c      	bne.n	800c6f0 <_scanf_float+0x3b8>
 800c6b6:	9b02      	ldr	r3, [sp, #8]
 800c6b8:	454b      	cmp	r3, r9
 800c6ba:	eba3 0209 	sub.w	r2, r3, r9
 800c6be:	d123      	bne.n	800c708 <_scanf_float+0x3d0>
 800c6c0:	9901      	ldr	r1, [sp, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	f7ff f947 	bl	800b958 <_strtod_r>
 800c6ca:	9b03      	ldr	r3, [sp, #12]
 800c6cc:	6821      	ldr	r1, [r4, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f011 0f02 	tst.w	r1, #2
 800c6d4:	ec57 6b10 	vmov	r6, r7, d0
 800c6d8:	f103 0204 	add.w	r2, r3, #4
 800c6dc:	d01f      	beq.n	800c71e <_scanf_float+0x3e6>
 800c6de:	9903      	ldr	r1, [sp, #12]
 800c6e0:	600a      	str	r2, [r1, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	e9c3 6700 	strd	r6, r7, [r3]
 800c6e8:	68e3      	ldr	r3, [r4, #12]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	60e3      	str	r3, [r4, #12]
 800c6ee:	e7d9      	b.n	800c6a4 <_scanf_float+0x36c>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0e4      	beq.n	800c6c0 <_scanf_float+0x388>
 800c6f6:	9905      	ldr	r1, [sp, #20]
 800c6f8:	230a      	movs	r3, #10
 800c6fa:	3101      	adds	r1, #1
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	f7ff f9b7 	bl	800ba70 <_strtol_r>
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	9e05      	ldr	r6, [sp, #20]
 800c706:	1ac2      	subs	r2, r0, r3
 800c708:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c70c:	429e      	cmp	r6, r3
 800c70e:	bf28      	it	cs
 800c710:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c714:	4910      	ldr	r1, [pc, #64]	@ (800c758 <_scanf_float+0x420>)
 800c716:	4630      	mov	r0, r6
 800c718:	f000 f8e4 	bl	800c8e4 <siprintf>
 800c71c:	e7d0      	b.n	800c6c0 <_scanf_float+0x388>
 800c71e:	f011 0f04 	tst.w	r1, #4
 800c722:	9903      	ldr	r1, [sp, #12]
 800c724:	600a      	str	r2, [r1, #0]
 800c726:	d1dc      	bne.n	800c6e2 <_scanf_float+0x3aa>
 800c728:	681d      	ldr	r5, [r3, #0]
 800c72a:	4632      	mov	r2, r6
 800c72c:	463b      	mov	r3, r7
 800c72e:	4630      	mov	r0, r6
 800c730:	4639      	mov	r1, r7
 800c732:	f7f4 f9fb 	bl	8000b2c <__aeabi_dcmpun>
 800c736:	b128      	cbz	r0, 800c744 <_scanf_float+0x40c>
 800c738:	4808      	ldr	r0, [pc, #32]	@ (800c75c <_scanf_float+0x424>)
 800c73a:	f000 fa3d 	bl	800cbb8 <nanf>
 800c73e:	ed85 0a00 	vstr	s0, [r5]
 800c742:	e7d1      	b.n	800c6e8 <_scanf_float+0x3b0>
 800c744:	4630      	mov	r0, r6
 800c746:	4639      	mov	r1, r7
 800c748:	f7f4 fa4e 	bl	8000be8 <__aeabi_d2f>
 800c74c:	6028      	str	r0, [r5, #0]
 800c74e:	e7cb      	b.n	800c6e8 <_scanf_float+0x3b0>
 800c750:	f04f 0900 	mov.w	r9, #0
 800c754:	e629      	b.n	800c3aa <_scanf_float+0x72>
 800c756:	bf00      	nop
 800c758:	0801139d 	.word	0x0801139d
 800c75c:	08011456 	.word	0x08011456

0800c760 <std>:
 800c760:	2300      	movs	r3, #0
 800c762:	b510      	push	{r4, lr}
 800c764:	4604      	mov	r4, r0
 800c766:	e9c0 3300 	strd	r3, r3, [r0]
 800c76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c76e:	6083      	str	r3, [r0, #8]
 800c770:	8181      	strh	r1, [r0, #12]
 800c772:	6643      	str	r3, [r0, #100]	@ 0x64
 800c774:	81c2      	strh	r2, [r0, #14]
 800c776:	6183      	str	r3, [r0, #24]
 800c778:	4619      	mov	r1, r3
 800c77a:	2208      	movs	r2, #8
 800c77c:	305c      	adds	r0, #92	@ 0x5c
 800c77e:	f000 f914 	bl	800c9aa <memset>
 800c782:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b8 <std+0x58>)
 800c784:	6263      	str	r3, [r4, #36]	@ 0x24
 800c786:	4b0d      	ldr	r3, [pc, #52]	@ (800c7bc <std+0x5c>)
 800c788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c78a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c0 <std+0x60>)
 800c78c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c78e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c4 <std+0x64>)
 800c790:	6323      	str	r3, [r4, #48]	@ 0x30
 800c792:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c8 <std+0x68>)
 800c794:	6224      	str	r4, [r4, #32]
 800c796:	429c      	cmp	r4, r3
 800c798:	d006      	beq.n	800c7a8 <std+0x48>
 800c79a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c79e:	4294      	cmp	r4, r2
 800c7a0:	d002      	beq.n	800c7a8 <std+0x48>
 800c7a2:	33d0      	adds	r3, #208	@ 0xd0
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	d105      	bne.n	800c7b4 <std+0x54>
 800c7a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7b0:	f000 b9e6 	b.w	800cb80 <__retarget_lock_init_recursive>
 800c7b4:	bd10      	pop	{r4, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0800c925 	.word	0x0800c925
 800c7bc:	0800c947 	.word	0x0800c947
 800c7c0:	0800c97f 	.word	0x0800c97f
 800c7c4:	0800c9a3 	.word	0x0800c9a3
 800c7c8:	20000634 	.word	0x20000634

0800c7cc <stdio_exit_handler>:
 800c7cc:	4a02      	ldr	r2, [pc, #8]	@ (800c7d8 <stdio_exit_handler+0xc>)
 800c7ce:	4903      	ldr	r1, [pc, #12]	@ (800c7dc <stdio_exit_handler+0x10>)
 800c7d0:	4803      	ldr	r0, [pc, #12]	@ (800c7e0 <stdio_exit_handler+0x14>)
 800c7d2:	f000 b869 	b.w	800c8a8 <_fwalk_sglue>
 800c7d6:	bf00      	nop
 800c7d8:	200000ec 	.word	0x200000ec
 800c7dc:	0800ee65 	.word	0x0800ee65
 800c7e0:	20000268 	.word	0x20000268

0800c7e4 <cleanup_stdio>:
 800c7e4:	6841      	ldr	r1, [r0, #4]
 800c7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c818 <cleanup_stdio+0x34>)
 800c7e8:	4299      	cmp	r1, r3
 800c7ea:	b510      	push	{r4, lr}
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	d001      	beq.n	800c7f4 <cleanup_stdio+0x10>
 800c7f0:	f002 fb38 	bl	800ee64 <_fflush_r>
 800c7f4:	68a1      	ldr	r1, [r4, #8]
 800c7f6:	4b09      	ldr	r3, [pc, #36]	@ (800c81c <cleanup_stdio+0x38>)
 800c7f8:	4299      	cmp	r1, r3
 800c7fa:	d002      	beq.n	800c802 <cleanup_stdio+0x1e>
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f002 fb31 	bl	800ee64 <_fflush_r>
 800c802:	68e1      	ldr	r1, [r4, #12]
 800c804:	4b06      	ldr	r3, [pc, #24]	@ (800c820 <cleanup_stdio+0x3c>)
 800c806:	4299      	cmp	r1, r3
 800c808:	d004      	beq.n	800c814 <cleanup_stdio+0x30>
 800c80a:	4620      	mov	r0, r4
 800c80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c810:	f002 bb28 	b.w	800ee64 <_fflush_r>
 800c814:	bd10      	pop	{r4, pc}
 800c816:	bf00      	nop
 800c818:	20000634 	.word	0x20000634
 800c81c:	2000069c 	.word	0x2000069c
 800c820:	20000704 	.word	0x20000704

0800c824 <global_stdio_init.part.0>:
 800c824:	b510      	push	{r4, lr}
 800c826:	4b0b      	ldr	r3, [pc, #44]	@ (800c854 <global_stdio_init.part.0+0x30>)
 800c828:	4c0b      	ldr	r4, [pc, #44]	@ (800c858 <global_stdio_init.part.0+0x34>)
 800c82a:	4a0c      	ldr	r2, [pc, #48]	@ (800c85c <global_stdio_init.part.0+0x38>)
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	4620      	mov	r0, r4
 800c830:	2200      	movs	r2, #0
 800c832:	2104      	movs	r1, #4
 800c834:	f7ff ff94 	bl	800c760 <std>
 800c838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c83c:	2201      	movs	r2, #1
 800c83e:	2109      	movs	r1, #9
 800c840:	f7ff ff8e 	bl	800c760 <std>
 800c844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c848:	2202      	movs	r2, #2
 800c84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c84e:	2112      	movs	r1, #18
 800c850:	f7ff bf86 	b.w	800c760 <std>
 800c854:	2000076c 	.word	0x2000076c
 800c858:	20000634 	.word	0x20000634
 800c85c:	0800c7cd 	.word	0x0800c7cd

0800c860 <__sfp_lock_acquire>:
 800c860:	4801      	ldr	r0, [pc, #4]	@ (800c868 <__sfp_lock_acquire+0x8>)
 800c862:	f000 b98e 	b.w	800cb82 <__retarget_lock_acquire_recursive>
 800c866:	bf00      	nop
 800c868:	20000775 	.word	0x20000775

0800c86c <__sfp_lock_release>:
 800c86c:	4801      	ldr	r0, [pc, #4]	@ (800c874 <__sfp_lock_release+0x8>)
 800c86e:	f000 b989 	b.w	800cb84 <__retarget_lock_release_recursive>
 800c872:	bf00      	nop
 800c874:	20000775 	.word	0x20000775

0800c878 <__sinit>:
 800c878:	b510      	push	{r4, lr}
 800c87a:	4604      	mov	r4, r0
 800c87c:	f7ff fff0 	bl	800c860 <__sfp_lock_acquire>
 800c880:	6a23      	ldr	r3, [r4, #32]
 800c882:	b11b      	cbz	r3, 800c88c <__sinit+0x14>
 800c884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c888:	f7ff bff0 	b.w	800c86c <__sfp_lock_release>
 800c88c:	4b04      	ldr	r3, [pc, #16]	@ (800c8a0 <__sinit+0x28>)
 800c88e:	6223      	str	r3, [r4, #32]
 800c890:	4b04      	ldr	r3, [pc, #16]	@ (800c8a4 <__sinit+0x2c>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1f5      	bne.n	800c884 <__sinit+0xc>
 800c898:	f7ff ffc4 	bl	800c824 <global_stdio_init.part.0>
 800c89c:	e7f2      	b.n	800c884 <__sinit+0xc>
 800c89e:	bf00      	nop
 800c8a0:	0800c7e5 	.word	0x0800c7e5
 800c8a4:	2000076c 	.word	0x2000076c

0800c8a8 <_fwalk_sglue>:
 800c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	4688      	mov	r8, r1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	2600      	movs	r6, #0
 800c8b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c8bc:	d505      	bpl.n	800c8ca <_fwalk_sglue+0x22>
 800c8be:	6824      	ldr	r4, [r4, #0]
 800c8c0:	2c00      	cmp	r4, #0
 800c8c2:	d1f7      	bne.n	800c8b4 <_fwalk_sglue+0xc>
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ca:	89ab      	ldrh	r3, [r5, #12]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d907      	bls.n	800c8e0 <_fwalk_sglue+0x38>
 800c8d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	d003      	beq.n	800c8e0 <_fwalk_sglue+0x38>
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4638      	mov	r0, r7
 800c8dc:	47c0      	blx	r8
 800c8de:	4306      	orrs	r6, r0
 800c8e0:	3568      	adds	r5, #104	@ 0x68
 800c8e2:	e7e9      	b.n	800c8b8 <_fwalk_sglue+0x10>

0800c8e4 <siprintf>:
 800c8e4:	b40e      	push	{r1, r2, r3}
 800c8e6:	b500      	push	{lr}
 800c8e8:	b09c      	sub	sp, #112	@ 0x70
 800c8ea:	ab1d      	add	r3, sp, #116	@ 0x74
 800c8ec:	9002      	str	r0, [sp, #8]
 800c8ee:	9006      	str	r0, [sp, #24]
 800c8f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c8f4:	4809      	ldr	r0, [pc, #36]	@ (800c91c <siprintf+0x38>)
 800c8f6:	9107      	str	r1, [sp, #28]
 800c8f8:	9104      	str	r1, [sp, #16]
 800c8fa:	4909      	ldr	r1, [pc, #36]	@ (800c920 <siprintf+0x3c>)
 800c8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c900:	9105      	str	r1, [sp, #20]
 800c902:	6800      	ldr	r0, [r0, #0]
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	a902      	add	r1, sp, #8
 800c908:	f002 f92c 	bl	800eb64 <_svfiprintf_r>
 800c90c:	9b02      	ldr	r3, [sp, #8]
 800c90e:	2200      	movs	r2, #0
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	b01c      	add	sp, #112	@ 0x70
 800c914:	f85d eb04 	ldr.w	lr, [sp], #4
 800c918:	b003      	add	sp, #12
 800c91a:	4770      	bx	lr
 800c91c:	20000264 	.word	0x20000264
 800c920:	ffff0208 	.word	0xffff0208

0800c924 <__sread>:
 800c924:	b510      	push	{r4, lr}
 800c926:	460c      	mov	r4, r1
 800c928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c92c:	f000 f8da 	bl	800cae4 <_read_r>
 800c930:	2800      	cmp	r0, #0
 800c932:	bfab      	itete	ge
 800c934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c936:	89a3      	ldrhlt	r3, [r4, #12]
 800c938:	181b      	addge	r3, r3, r0
 800c93a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c93e:	bfac      	ite	ge
 800c940:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c942:	81a3      	strhlt	r3, [r4, #12]
 800c944:	bd10      	pop	{r4, pc}

0800c946 <__swrite>:
 800c946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94a:	461f      	mov	r7, r3
 800c94c:	898b      	ldrh	r3, [r1, #12]
 800c94e:	05db      	lsls	r3, r3, #23
 800c950:	4605      	mov	r5, r0
 800c952:	460c      	mov	r4, r1
 800c954:	4616      	mov	r6, r2
 800c956:	d505      	bpl.n	800c964 <__swrite+0x1e>
 800c958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95c:	2302      	movs	r3, #2
 800c95e:	2200      	movs	r2, #0
 800c960:	f000 f8ae 	bl	800cac0 <_lseek_r>
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c96a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	4632      	mov	r2, r6
 800c972:	463b      	mov	r3, r7
 800c974:	4628      	mov	r0, r5
 800c976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c97a:	f000 b8c5 	b.w	800cb08 <_write_r>

0800c97e <__sseek>:
 800c97e:	b510      	push	{r4, lr}
 800c980:	460c      	mov	r4, r1
 800c982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c986:	f000 f89b 	bl	800cac0 <_lseek_r>
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	bf15      	itete	ne
 800c990:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c992:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c996:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c99a:	81a3      	strheq	r3, [r4, #12]
 800c99c:	bf18      	it	ne
 800c99e:	81a3      	strhne	r3, [r4, #12]
 800c9a0:	bd10      	pop	{r4, pc}

0800c9a2 <__sclose>:
 800c9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a6:	f000 b87b 	b.w	800caa0 <_close_r>

0800c9aa <memset>:
 800c9aa:	4402      	add	r2, r0
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d100      	bne.n	800c9b4 <memset+0xa>
 800c9b2:	4770      	bx	lr
 800c9b4:	f803 1b01 	strb.w	r1, [r3], #1
 800c9b8:	e7f9      	b.n	800c9ae <memset+0x4>

0800c9ba <strncmp>:
 800c9ba:	b510      	push	{r4, lr}
 800c9bc:	b16a      	cbz	r2, 800c9da <strncmp+0x20>
 800c9be:	3901      	subs	r1, #1
 800c9c0:	1884      	adds	r4, r0, r2
 800c9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d103      	bne.n	800c9d6 <strncmp+0x1c>
 800c9ce:	42a0      	cmp	r0, r4
 800c9d0:	d001      	beq.n	800c9d6 <strncmp+0x1c>
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d1f5      	bne.n	800c9c2 <strncmp+0x8>
 800c9d6:	1ad0      	subs	r0, r2, r3
 800c9d8:	bd10      	pop	{r4, pc}
 800c9da:	4610      	mov	r0, r2
 800c9dc:	e7fc      	b.n	800c9d8 <strncmp+0x1e>
	...

0800c9e0 <strtok>:
 800c9e0:	4b16      	ldr	r3, [pc, #88]	@ (800ca3c <strtok+0x5c>)
 800c9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e6:	681f      	ldr	r7, [r3, #0]
 800c9e8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	460e      	mov	r6, r1
 800c9ee:	b9ec      	cbnz	r4, 800ca2c <strtok+0x4c>
 800c9f0:	2050      	movs	r0, #80	@ 0x50
 800c9f2:	f001 fad5 	bl	800dfa0 <malloc>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	6478      	str	r0, [r7, #68]	@ 0x44
 800c9fa:	b920      	cbnz	r0, 800ca06 <strtok+0x26>
 800c9fc:	4b10      	ldr	r3, [pc, #64]	@ (800ca40 <strtok+0x60>)
 800c9fe:	4811      	ldr	r0, [pc, #68]	@ (800ca44 <strtok+0x64>)
 800ca00:	215b      	movs	r1, #91	@ 0x5b
 800ca02:	f000 f8df 	bl	800cbc4 <__assert_func>
 800ca06:	e9c0 4400 	strd	r4, r4, [r0]
 800ca0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ca0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ca12:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ca16:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ca1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ca1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ca22:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ca26:	6184      	str	r4, [r0, #24]
 800ca28:	7704      	strb	r4, [r0, #28]
 800ca2a:	6244      	str	r4, [r0, #36]	@ 0x24
 800ca2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4628      	mov	r0, r5
 800ca32:	2301      	movs	r3, #1
 800ca34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca38:	f000 b806 	b.w	800ca48 <__strtok_r>
 800ca3c:	20000264 	.word	0x20000264
 800ca40:	080113a2 	.word	0x080113a2
 800ca44:	080113b9 	.word	0x080113b9

0800ca48 <__strtok_r>:
 800ca48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	b908      	cbnz	r0, 800ca52 <__strtok_r+0xa>
 800ca4e:	6814      	ldr	r4, [r2, #0]
 800ca50:	b144      	cbz	r4, 800ca64 <__strtok_r+0x1c>
 800ca52:	4620      	mov	r0, r4
 800ca54:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ca58:	460f      	mov	r7, r1
 800ca5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ca5e:	b91e      	cbnz	r6, 800ca68 <__strtok_r+0x20>
 800ca60:	b965      	cbnz	r5, 800ca7c <__strtok_r+0x34>
 800ca62:	6015      	str	r5, [r2, #0]
 800ca64:	2000      	movs	r0, #0
 800ca66:	e005      	b.n	800ca74 <__strtok_r+0x2c>
 800ca68:	42b5      	cmp	r5, r6
 800ca6a:	d1f6      	bne.n	800ca5a <__strtok_r+0x12>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1f0      	bne.n	800ca52 <__strtok_r+0xa>
 800ca70:	6014      	str	r4, [r2, #0]
 800ca72:	7003      	strb	r3, [r0, #0]
 800ca74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca76:	461c      	mov	r4, r3
 800ca78:	e00c      	b.n	800ca94 <__strtok_r+0x4c>
 800ca7a:	b915      	cbnz	r5, 800ca82 <__strtok_r+0x3a>
 800ca7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca80:	460e      	mov	r6, r1
 800ca82:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ca86:	42ab      	cmp	r3, r5
 800ca88:	d1f7      	bne.n	800ca7a <__strtok_r+0x32>
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d0f3      	beq.n	800ca76 <__strtok_r+0x2e>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ca94:	6014      	str	r4, [r2, #0]
 800ca96:	e7ed      	b.n	800ca74 <__strtok_r+0x2c>

0800ca98 <_localeconv_r>:
 800ca98:	4800      	ldr	r0, [pc, #0]	@ (800ca9c <_localeconv_r+0x4>)
 800ca9a:	4770      	bx	lr
 800ca9c:	200001e8 	.word	0x200001e8

0800caa0 <_close_r>:
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	4d06      	ldr	r5, [pc, #24]	@ (800cabc <_close_r+0x1c>)
 800caa4:	2300      	movs	r3, #0
 800caa6:	4604      	mov	r4, r0
 800caa8:	4608      	mov	r0, r1
 800caaa:	602b      	str	r3, [r5, #0]
 800caac:	f7fa fb72 	bl	8007194 <_close>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	d102      	bne.n	800caba <_close_r+0x1a>
 800cab4:	682b      	ldr	r3, [r5, #0]
 800cab6:	b103      	cbz	r3, 800caba <_close_r+0x1a>
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	bd38      	pop	{r3, r4, r5, pc}
 800cabc:	20000770 	.word	0x20000770

0800cac0 <_lseek_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4d07      	ldr	r5, [pc, #28]	@ (800cae0 <_lseek_r+0x20>)
 800cac4:	4604      	mov	r4, r0
 800cac6:	4608      	mov	r0, r1
 800cac8:	4611      	mov	r1, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	602a      	str	r2, [r5, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	f7fa fb87 	bl	80071e2 <_lseek>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d102      	bne.n	800cade <_lseek_r+0x1e>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	b103      	cbz	r3, 800cade <_lseek_r+0x1e>
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	20000770 	.word	0x20000770

0800cae4 <_read_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4d07      	ldr	r5, [pc, #28]	@ (800cb04 <_read_r+0x20>)
 800cae8:	4604      	mov	r4, r0
 800caea:	4608      	mov	r0, r1
 800caec:	4611      	mov	r1, r2
 800caee:	2200      	movs	r2, #0
 800caf0:	602a      	str	r2, [r5, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f7fa fb15 	bl	8007122 <_read>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d102      	bne.n	800cb02 <_read_r+0x1e>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b103      	cbz	r3, 800cb02 <_read_r+0x1e>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	20000770 	.word	0x20000770

0800cb08 <_write_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4d07      	ldr	r5, [pc, #28]	@ (800cb28 <_write_r+0x20>)
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	4608      	mov	r0, r1
 800cb10:	4611      	mov	r1, r2
 800cb12:	2200      	movs	r2, #0
 800cb14:	602a      	str	r2, [r5, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	f7fa fb20 	bl	800715c <_write>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d102      	bne.n	800cb26 <_write_r+0x1e>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	b103      	cbz	r3, 800cb26 <_write_r+0x1e>
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	20000770 	.word	0x20000770

0800cb2c <__errno>:
 800cb2c:	4b01      	ldr	r3, [pc, #4]	@ (800cb34 <__errno+0x8>)
 800cb2e:	6818      	ldr	r0, [r3, #0]
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	20000264 	.word	0x20000264

0800cb38 <__libc_init_array>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	4d0d      	ldr	r5, [pc, #52]	@ (800cb70 <__libc_init_array+0x38>)
 800cb3c:	4c0d      	ldr	r4, [pc, #52]	@ (800cb74 <__libc_init_array+0x3c>)
 800cb3e:	1b64      	subs	r4, r4, r5
 800cb40:	10a4      	asrs	r4, r4, #2
 800cb42:	2600      	movs	r6, #0
 800cb44:	42a6      	cmp	r6, r4
 800cb46:	d109      	bne.n	800cb5c <__libc_init_array+0x24>
 800cb48:	4d0b      	ldr	r5, [pc, #44]	@ (800cb78 <__libc_init_array+0x40>)
 800cb4a:	4c0c      	ldr	r4, [pc, #48]	@ (800cb7c <__libc_init_array+0x44>)
 800cb4c:	f004 fa74 	bl	8011038 <_init>
 800cb50:	1b64      	subs	r4, r4, r5
 800cb52:	10a4      	asrs	r4, r4, #2
 800cb54:	2600      	movs	r6, #0
 800cb56:	42a6      	cmp	r6, r4
 800cb58:	d105      	bne.n	800cb66 <__libc_init_array+0x2e>
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}
 800cb5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb60:	4798      	blx	r3
 800cb62:	3601      	adds	r6, #1
 800cb64:	e7ee      	b.n	800cb44 <__libc_init_array+0xc>
 800cb66:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb6a:	4798      	blx	r3
 800cb6c:	3601      	adds	r6, #1
 800cb6e:	e7f2      	b.n	800cb56 <__libc_init_array+0x1e>
 800cb70:	080118f0 	.word	0x080118f0
 800cb74:	080118f0 	.word	0x080118f0
 800cb78:	080118f0 	.word	0x080118f0
 800cb7c:	080118f4 	.word	0x080118f4

0800cb80 <__retarget_lock_init_recursive>:
 800cb80:	4770      	bx	lr

0800cb82 <__retarget_lock_acquire_recursive>:
 800cb82:	4770      	bx	lr

0800cb84 <__retarget_lock_release_recursive>:
 800cb84:	4770      	bx	lr

0800cb86 <memcpy>:
 800cb86:	440a      	add	r2, r1
 800cb88:	4291      	cmp	r1, r2
 800cb8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb8e:	d100      	bne.n	800cb92 <memcpy+0xc>
 800cb90:	4770      	bx	lr
 800cb92:	b510      	push	{r4, lr}
 800cb94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb9c:	4291      	cmp	r1, r2
 800cb9e:	d1f9      	bne.n	800cb94 <memcpy+0xe>
 800cba0:	bd10      	pop	{r4, pc}
 800cba2:	0000      	movs	r0, r0
 800cba4:	0000      	movs	r0, r0
	...

0800cba8 <nan>:
 800cba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cbb0 <nan+0x8>
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	00000000 	.word	0x00000000
 800cbb4:	7ff80000 	.word	0x7ff80000

0800cbb8 <nanf>:
 800cbb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cbc0 <nanf+0x8>
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	7fc00000 	.word	0x7fc00000

0800cbc4 <__assert_func>:
 800cbc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbc6:	4614      	mov	r4, r2
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4b09      	ldr	r3, [pc, #36]	@ (800cbf0 <__assert_func+0x2c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4605      	mov	r5, r0
 800cbd0:	68d8      	ldr	r0, [r3, #12]
 800cbd2:	b954      	cbnz	r4, 800cbea <__assert_func+0x26>
 800cbd4:	4b07      	ldr	r3, [pc, #28]	@ (800cbf4 <__assert_func+0x30>)
 800cbd6:	461c      	mov	r4, r3
 800cbd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbdc:	9100      	str	r1, [sp, #0]
 800cbde:	462b      	mov	r3, r5
 800cbe0:	4905      	ldr	r1, [pc, #20]	@ (800cbf8 <__assert_func+0x34>)
 800cbe2:	f002 f967 	bl	800eeb4 <fiprintf>
 800cbe6:	f002 f9a1 	bl	800ef2c <abort>
 800cbea:	4b04      	ldr	r3, [pc, #16]	@ (800cbfc <__assert_func+0x38>)
 800cbec:	e7f4      	b.n	800cbd8 <__assert_func+0x14>
 800cbee:	bf00      	nop
 800cbf0:	20000264 	.word	0x20000264
 800cbf4:	08011456 	.word	0x08011456
 800cbf8:	08011428 	.word	0x08011428
 800cbfc:	0801141b 	.word	0x0801141b

0800cc00 <quorem>:
 800cc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	6903      	ldr	r3, [r0, #16]
 800cc06:	690c      	ldr	r4, [r1, #16]
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	4607      	mov	r7, r0
 800cc0c:	db7e      	blt.n	800cd0c <quorem+0x10c>
 800cc0e:	3c01      	subs	r4, #1
 800cc10:	f101 0814 	add.w	r8, r1, #20
 800cc14:	00a3      	lsls	r3, r4, #2
 800cc16:	f100 0514 	add.w	r5, r0, #20
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc32:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc36:	d32e      	bcc.n	800cc96 <quorem+0x96>
 800cc38:	f04f 0a00 	mov.w	sl, #0
 800cc3c:	46c4      	mov	ip, r8
 800cc3e:	46ae      	mov	lr, r5
 800cc40:	46d3      	mov	fp, sl
 800cc42:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc46:	b298      	uxth	r0, r3
 800cc48:	fb06 a000 	mla	r0, r6, r0, sl
 800cc4c:	0c02      	lsrs	r2, r0, #16
 800cc4e:	0c1b      	lsrs	r3, r3, #16
 800cc50:	fb06 2303 	mla	r3, r6, r3, r2
 800cc54:	f8de 2000 	ldr.w	r2, [lr]
 800cc58:	b280      	uxth	r0, r0
 800cc5a:	b292      	uxth	r2, r2
 800cc5c:	1a12      	subs	r2, r2, r0
 800cc5e:	445a      	add	r2, fp
 800cc60:	f8de 0000 	ldr.w	r0, [lr]
 800cc64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc72:	b292      	uxth	r2, r2
 800cc74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc78:	45e1      	cmp	r9, ip
 800cc7a:	f84e 2b04 	str.w	r2, [lr], #4
 800cc7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc82:	d2de      	bcs.n	800cc42 <quorem+0x42>
 800cc84:	9b00      	ldr	r3, [sp, #0]
 800cc86:	58eb      	ldr	r3, [r5, r3]
 800cc88:	b92b      	cbnz	r3, 800cc96 <quorem+0x96>
 800cc8a:	9b01      	ldr	r3, [sp, #4]
 800cc8c:	3b04      	subs	r3, #4
 800cc8e:	429d      	cmp	r5, r3
 800cc90:	461a      	mov	r2, r3
 800cc92:	d32f      	bcc.n	800ccf4 <quorem+0xf4>
 800cc94:	613c      	str	r4, [r7, #16]
 800cc96:	4638      	mov	r0, r7
 800cc98:	f001 fd0e 	bl	800e6b8 <__mcmp>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	db25      	blt.n	800ccec <quorem+0xec>
 800cca0:	4629      	mov	r1, r5
 800cca2:	2000      	movs	r0, #0
 800cca4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cca8:	f8d1 c000 	ldr.w	ip, [r1]
 800ccac:	fa1f fe82 	uxth.w	lr, r2
 800ccb0:	fa1f f38c 	uxth.w	r3, ip
 800ccb4:	eba3 030e 	sub.w	r3, r3, lr
 800ccb8:	4403      	add	r3, r0
 800ccba:	0c12      	lsrs	r2, r2, #16
 800ccbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ccc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccca:	45c1      	cmp	r9, r8
 800cccc:	f841 3b04 	str.w	r3, [r1], #4
 800ccd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ccd4:	d2e6      	bcs.n	800cca4 <quorem+0xa4>
 800ccd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccde:	b922      	cbnz	r2, 800ccea <quorem+0xea>
 800cce0:	3b04      	subs	r3, #4
 800cce2:	429d      	cmp	r5, r3
 800cce4:	461a      	mov	r2, r3
 800cce6:	d30b      	bcc.n	800cd00 <quorem+0x100>
 800cce8:	613c      	str	r4, [r7, #16]
 800ccea:	3601      	adds	r6, #1
 800ccec:	4630      	mov	r0, r6
 800ccee:	b003      	add	sp, #12
 800ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf4:	6812      	ldr	r2, [r2, #0]
 800ccf6:	3b04      	subs	r3, #4
 800ccf8:	2a00      	cmp	r2, #0
 800ccfa:	d1cb      	bne.n	800cc94 <quorem+0x94>
 800ccfc:	3c01      	subs	r4, #1
 800ccfe:	e7c6      	b.n	800cc8e <quorem+0x8e>
 800cd00:	6812      	ldr	r2, [r2, #0]
 800cd02:	3b04      	subs	r3, #4
 800cd04:	2a00      	cmp	r2, #0
 800cd06:	d1ef      	bne.n	800cce8 <quorem+0xe8>
 800cd08:	3c01      	subs	r4, #1
 800cd0a:	e7ea      	b.n	800cce2 <quorem+0xe2>
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e7ee      	b.n	800ccee <quorem+0xee>

0800cd10 <_dtoa_r>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	69c7      	ldr	r7, [r0, #28]
 800cd16:	b099      	sub	sp, #100	@ 0x64
 800cd18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cd1c:	ec55 4b10 	vmov	r4, r5, d0
 800cd20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cd22:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd24:	4683      	mov	fp, r0
 800cd26:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd2a:	b97f      	cbnz	r7, 800cd4c <_dtoa_r+0x3c>
 800cd2c:	2010      	movs	r0, #16
 800cd2e:	f001 f937 	bl	800dfa0 <malloc>
 800cd32:	4602      	mov	r2, r0
 800cd34:	f8cb 001c 	str.w	r0, [fp, #28]
 800cd38:	b920      	cbnz	r0, 800cd44 <_dtoa_r+0x34>
 800cd3a:	4ba7      	ldr	r3, [pc, #668]	@ (800cfd8 <_dtoa_r+0x2c8>)
 800cd3c:	21ef      	movs	r1, #239	@ 0xef
 800cd3e:	48a7      	ldr	r0, [pc, #668]	@ (800cfdc <_dtoa_r+0x2cc>)
 800cd40:	f7ff ff40 	bl	800cbc4 <__assert_func>
 800cd44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cd48:	6007      	str	r7, [r0, #0]
 800cd4a:	60c7      	str	r7, [r0, #12]
 800cd4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd50:	6819      	ldr	r1, [r3, #0]
 800cd52:	b159      	cbz	r1, 800cd6c <_dtoa_r+0x5c>
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	604a      	str	r2, [r1, #4]
 800cd58:	2301      	movs	r3, #1
 800cd5a:	4093      	lsls	r3, r2
 800cd5c:	608b      	str	r3, [r1, #8]
 800cd5e:	4658      	mov	r0, fp
 800cd60:	f001 fa26 	bl	800e1b0 <_Bfree>
 800cd64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	1e2b      	subs	r3, r5, #0
 800cd6e:	bfb9      	ittee	lt
 800cd70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd74:	9303      	strlt	r3, [sp, #12]
 800cd76:	2300      	movge	r3, #0
 800cd78:	6033      	strge	r3, [r6, #0]
 800cd7a:	9f03      	ldr	r7, [sp, #12]
 800cd7c:	4b98      	ldr	r3, [pc, #608]	@ (800cfe0 <_dtoa_r+0x2d0>)
 800cd7e:	bfbc      	itt	lt
 800cd80:	2201      	movlt	r2, #1
 800cd82:	6032      	strlt	r2, [r6, #0]
 800cd84:	43bb      	bics	r3, r7
 800cd86:	d112      	bne.n	800cdae <_dtoa_r+0x9e>
 800cd88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd94:	4323      	orrs	r3, r4
 800cd96:	f000 854d 	beq.w	800d834 <_dtoa_r+0xb24>
 800cd9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cff4 <_dtoa_r+0x2e4>
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 854f 	beq.w	800d844 <_dtoa_r+0xb34>
 800cda6:	f10a 0303 	add.w	r3, sl, #3
 800cdaa:	f000 bd49 	b.w	800d840 <_dtoa_r+0xb30>
 800cdae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	ec51 0b17 	vmov	r0, r1, d7
 800cdb8:	2300      	movs	r3, #0
 800cdba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cdbe:	f7f3 fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	b158      	cbz	r0, 800cdde <_dtoa_r+0xce>
 800cdc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cdc8:	2301      	movs	r3, #1
 800cdca:	6013      	str	r3, [r2, #0]
 800cdcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cdce:	b113      	cbz	r3, 800cdd6 <_dtoa_r+0xc6>
 800cdd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cdd2:	4b84      	ldr	r3, [pc, #528]	@ (800cfe4 <_dtoa_r+0x2d4>)
 800cdd4:	6013      	str	r3, [r2, #0]
 800cdd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cff8 <_dtoa_r+0x2e8>
 800cdda:	f000 bd33 	b.w	800d844 <_dtoa_r+0xb34>
 800cdde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cde2:	aa16      	add	r2, sp, #88	@ 0x58
 800cde4:	a917      	add	r1, sp, #92	@ 0x5c
 800cde6:	4658      	mov	r0, fp
 800cde8:	f001 fd86 	bl	800e8f8 <__d2b>
 800cdec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cdf0:	4681      	mov	r9, r0
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	d077      	beq.n	800cee6 <_dtoa_r+0x1d6>
 800cdf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cdfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ce08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ce0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ce10:	4619      	mov	r1, r3
 800ce12:	2200      	movs	r2, #0
 800ce14:	4b74      	ldr	r3, [pc, #464]	@ (800cfe8 <_dtoa_r+0x2d8>)
 800ce16:	f7f3 fa37 	bl	8000288 <__aeabi_dsub>
 800ce1a:	a369      	add	r3, pc, #420	@ (adr r3, 800cfc0 <_dtoa_r+0x2b0>)
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	f7f3 fbea 	bl	80005f8 <__aeabi_dmul>
 800ce24:	a368      	add	r3, pc, #416	@ (adr r3, 800cfc8 <_dtoa_r+0x2b8>)
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	f7f3 fa2f 	bl	800028c <__adddf3>
 800ce2e:	4604      	mov	r4, r0
 800ce30:	4630      	mov	r0, r6
 800ce32:	460d      	mov	r5, r1
 800ce34:	f7f3 fb76 	bl	8000524 <__aeabi_i2d>
 800ce38:	a365      	add	r3, pc, #404	@ (adr r3, 800cfd0 <_dtoa_r+0x2c0>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	f7f3 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4620      	mov	r0, r4
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7f3 fa1f 	bl	800028c <__adddf3>
 800ce4e:	4604      	mov	r4, r0
 800ce50:	460d      	mov	r5, r1
 800ce52:	f7f3 fe81 	bl	8000b58 <__aeabi_d2iz>
 800ce56:	2200      	movs	r2, #0
 800ce58:	4607      	mov	r7, r0
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	4629      	mov	r1, r5
 800ce60:	f7f3 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800ce64:	b140      	cbz	r0, 800ce78 <_dtoa_r+0x168>
 800ce66:	4638      	mov	r0, r7
 800ce68:	f7f3 fb5c 	bl	8000524 <__aeabi_i2d>
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	462b      	mov	r3, r5
 800ce70:	f7f3 fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce74:	b900      	cbnz	r0, 800ce78 <_dtoa_r+0x168>
 800ce76:	3f01      	subs	r7, #1
 800ce78:	2f16      	cmp	r7, #22
 800ce7a:	d851      	bhi.n	800cf20 <_dtoa_r+0x210>
 800ce7c:	4b5b      	ldr	r3, [pc, #364]	@ (800cfec <_dtoa_r+0x2dc>)
 800ce7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce8a:	f7f3 fe27 	bl	8000adc <__aeabi_dcmplt>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d048      	beq.n	800cf24 <_dtoa_r+0x214>
 800ce92:	3f01      	subs	r7, #1
 800ce94:	2300      	movs	r3, #0
 800ce96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce9a:	1b9b      	subs	r3, r3, r6
 800ce9c:	1e5a      	subs	r2, r3, #1
 800ce9e:	bf44      	itt	mi
 800cea0:	f1c3 0801 	rsbmi	r8, r3, #1
 800cea4:	2300      	movmi	r3, #0
 800cea6:	9208      	str	r2, [sp, #32]
 800cea8:	bf54      	ite	pl
 800ceaa:	f04f 0800 	movpl.w	r8, #0
 800ceae:	9308      	strmi	r3, [sp, #32]
 800ceb0:	2f00      	cmp	r7, #0
 800ceb2:	db39      	blt.n	800cf28 <_dtoa_r+0x218>
 800ceb4:	9b08      	ldr	r3, [sp, #32]
 800ceb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ceb8:	443b      	add	r3, r7
 800ceba:	9308      	str	r3, [sp, #32]
 800cebc:	2300      	movs	r3, #0
 800cebe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec2:	2b09      	cmp	r3, #9
 800cec4:	d864      	bhi.n	800cf90 <_dtoa_r+0x280>
 800cec6:	2b05      	cmp	r3, #5
 800cec8:	bfc4      	itt	gt
 800ceca:	3b04      	subgt	r3, #4
 800cecc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced0:	f1a3 0302 	sub.w	r3, r3, #2
 800ced4:	bfcc      	ite	gt
 800ced6:	2400      	movgt	r4, #0
 800ced8:	2401      	movle	r4, #1
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d863      	bhi.n	800cfa6 <_dtoa_r+0x296>
 800cede:	e8df f003 	tbb	[pc, r3]
 800cee2:	372a      	.short	0x372a
 800cee4:	5535      	.short	0x5535
 800cee6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ceea:	441e      	add	r6, r3
 800ceec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cef0:	2b20      	cmp	r3, #32
 800cef2:	bfc1      	itttt	gt
 800cef4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cef8:	409f      	lslgt	r7, r3
 800cefa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cefe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cf02:	bfd6      	itet	le
 800cf04:	f1c3 0320 	rsble	r3, r3, #32
 800cf08:	ea47 0003 	orrgt.w	r0, r7, r3
 800cf0c:	fa04 f003 	lslle.w	r0, r4, r3
 800cf10:	f7f3 faf8 	bl	8000504 <__aeabi_ui2d>
 800cf14:	2201      	movs	r2, #1
 800cf16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cf1a:	3e01      	subs	r6, #1
 800cf1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cf1e:	e777      	b.n	800ce10 <_dtoa_r+0x100>
 800cf20:	2301      	movs	r3, #1
 800cf22:	e7b8      	b.n	800ce96 <_dtoa_r+0x186>
 800cf24:	9012      	str	r0, [sp, #72]	@ 0x48
 800cf26:	e7b7      	b.n	800ce98 <_dtoa_r+0x188>
 800cf28:	427b      	negs	r3, r7
 800cf2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	eba8 0807 	sub.w	r8, r8, r7
 800cf32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf34:	e7c4      	b.n	800cec0 <_dtoa_r+0x1b0>
 800cf36:	2300      	movs	r3, #0
 800cf38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	dc35      	bgt.n	800cfac <_dtoa_r+0x29c>
 800cf40:	2301      	movs	r3, #1
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	9307      	str	r3, [sp, #28]
 800cf46:	461a      	mov	r2, r3
 800cf48:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf4a:	e00b      	b.n	800cf64 <_dtoa_r+0x254>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e7f3      	b.n	800cf38 <_dtoa_r+0x228>
 800cf50:	2300      	movs	r3, #0
 800cf52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf56:	18fb      	adds	r3, r7, r3
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	9307      	str	r3, [sp, #28]
 800cf60:	bfb8      	it	lt
 800cf62:	2301      	movlt	r3, #1
 800cf64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cf68:	2100      	movs	r1, #0
 800cf6a:	2204      	movs	r2, #4
 800cf6c:	f102 0514 	add.w	r5, r2, #20
 800cf70:	429d      	cmp	r5, r3
 800cf72:	d91f      	bls.n	800cfb4 <_dtoa_r+0x2a4>
 800cf74:	6041      	str	r1, [r0, #4]
 800cf76:	4658      	mov	r0, fp
 800cf78:	f001 f8da 	bl	800e130 <_Balloc>
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d13c      	bne.n	800cffc <_dtoa_r+0x2ec>
 800cf82:	4b1b      	ldr	r3, [pc, #108]	@ (800cff0 <_dtoa_r+0x2e0>)
 800cf84:	4602      	mov	r2, r0
 800cf86:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf8a:	e6d8      	b.n	800cd3e <_dtoa_r+0x2e>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e7e0      	b.n	800cf52 <_dtoa_r+0x242>
 800cf90:	2401      	movs	r4, #1
 800cf92:	2300      	movs	r3, #0
 800cf94:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf98:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	9307      	str	r3, [sp, #28]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2312      	movs	r3, #18
 800cfa4:	e7d0      	b.n	800cf48 <_dtoa_r+0x238>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfaa:	e7f5      	b.n	800cf98 <_dtoa_r+0x288>
 800cfac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	9307      	str	r3, [sp, #28]
 800cfb2:	e7d7      	b.n	800cf64 <_dtoa_r+0x254>
 800cfb4:	3101      	adds	r1, #1
 800cfb6:	0052      	lsls	r2, r2, #1
 800cfb8:	e7d8      	b.n	800cf6c <_dtoa_r+0x25c>
 800cfba:	bf00      	nop
 800cfbc:	f3af 8000 	nop.w
 800cfc0:	636f4361 	.word	0x636f4361
 800cfc4:	3fd287a7 	.word	0x3fd287a7
 800cfc8:	8b60c8b3 	.word	0x8b60c8b3
 800cfcc:	3fc68a28 	.word	0x3fc68a28
 800cfd0:	509f79fb 	.word	0x509f79fb
 800cfd4:	3fd34413 	.word	0x3fd34413
 800cfd8:	080113a2 	.word	0x080113a2
 800cfdc:	08011464 	.word	0x08011464
 800cfe0:	7ff00000 	.word	0x7ff00000
 800cfe4:	0801137a 	.word	0x0801137a
 800cfe8:	3ff80000 	.word	0x3ff80000
 800cfec:	080115c0 	.word	0x080115c0
 800cff0:	080114bc 	.word	0x080114bc
 800cff4:	08011460 	.word	0x08011460
 800cff8:	08011379 	.word	0x08011379
 800cffc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d000:	6018      	str	r0, [r3, #0]
 800d002:	9b07      	ldr	r3, [sp, #28]
 800d004:	2b0e      	cmp	r3, #14
 800d006:	f200 80a4 	bhi.w	800d152 <_dtoa_r+0x442>
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	f000 80a1 	beq.w	800d152 <_dtoa_r+0x442>
 800d010:	2f00      	cmp	r7, #0
 800d012:	dd33      	ble.n	800d07c <_dtoa_r+0x36c>
 800d014:	4bad      	ldr	r3, [pc, #692]	@ (800d2cc <_dtoa_r+0x5bc>)
 800d016:	f007 020f 	and.w	r2, r7, #15
 800d01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d01e:	ed93 7b00 	vldr	d7, [r3]
 800d022:	05f8      	lsls	r0, r7, #23
 800d024:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d028:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d02c:	d516      	bpl.n	800d05c <_dtoa_r+0x34c>
 800d02e:	4ba8      	ldr	r3, [pc, #672]	@ (800d2d0 <_dtoa_r+0x5c0>)
 800d030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d038:	f7f3 fc08 	bl	800084c <__aeabi_ddiv>
 800d03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d040:	f004 040f 	and.w	r4, r4, #15
 800d044:	2603      	movs	r6, #3
 800d046:	4da2      	ldr	r5, [pc, #648]	@ (800d2d0 <_dtoa_r+0x5c0>)
 800d048:	b954      	cbnz	r4, 800d060 <_dtoa_r+0x350>
 800d04a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d052:	f7f3 fbfb 	bl	800084c <__aeabi_ddiv>
 800d056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d05a:	e028      	b.n	800d0ae <_dtoa_r+0x39e>
 800d05c:	2602      	movs	r6, #2
 800d05e:	e7f2      	b.n	800d046 <_dtoa_r+0x336>
 800d060:	07e1      	lsls	r1, r4, #31
 800d062:	d508      	bpl.n	800d076 <_dtoa_r+0x366>
 800d064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d06c:	f7f3 fac4 	bl	80005f8 <__aeabi_dmul>
 800d070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d074:	3601      	adds	r6, #1
 800d076:	1064      	asrs	r4, r4, #1
 800d078:	3508      	adds	r5, #8
 800d07a:	e7e5      	b.n	800d048 <_dtoa_r+0x338>
 800d07c:	f000 80d2 	beq.w	800d224 <_dtoa_r+0x514>
 800d080:	427c      	negs	r4, r7
 800d082:	4b92      	ldr	r3, [pc, #584]	@ (800d2cc <_dtoa_r+0x5bc>)
 800d084:	4d92      	ldr	r5, [pc, #584]	@ (800d2d0 <_dtoa_r+0x5c0>)
 800d086:	f004 020f 	and.w	r2, r4, #15
 800d08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d096:	f7f3 faaf 	bl	80005f8 <__aeabi_dmul>
 800d09a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d09e:	1124      	asrs	r4, r4, #4
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	2602      	movs	r6, #2
 800d0a4:	2c00      	cmp	r4, #0
 800d0a6:	f040 80b2 	bne.w	800d20e <_dtoa_r+0x4fe>
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1d3      	bne.n	800d056 <_dtoa_r+0x346>
 800d0ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d0b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 80b7 	beq.w	800d228 <_dtoa_r+0x518>
 800d0ba:	4b86      	ldr	r3, [pc, #536]	@ (800d2d4 <_dtoa_r+0x5c4>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	f7f3 fd0b 	bl	8000adc <__aeabi_dcmplt>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	f000 80ae 	beq.w	800d228 <_dtoa_r+0x518>
 800d0cc:	9b07      	ldr	r3, [sp, #28]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 80aa 	beq.w	800d228 <_dtoa_r+0x518>
 800d0d4:	9b00      	ldr	r3, [sp, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	dd37      	ble.n	800d14a <_dtoa_r+0x43a>
 800d0da:	1e7b      	subs	r3, r7, #1
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	4620      	mov	r0, r4
 800d0e0:	4b7d      	ldr	r3, [pc, #500]	@ (800d2d8 <_dtoa_r+0x5c8>)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	f7f3 fa87 	bl	80005f8 <__aeabi_dmul>
 800d0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ee:	9c00      	ldr	r4, [sp, #0]
 800d0f0:	3601      	adds	r6, #1
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7f3 fa16 	bl	8000524 <__aeabi_i2d>
 800d0f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	4b76      	ldr	r3, [pc, #472]	@ (800d2dc <_dtoa_r+0x5cc>)
 800d102:	2200      	movs	r2, #0
 800d104:	f7f3 f8c2 	bl	800028c <__adddf3>
 800d108:	4605      	mov	r5, r0
 800d10a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d10e:	2c00      	cmp	r4, #0
 800d110:	f040 808d 	bne.w	800d22e <_dtoa_r+0x51e>
 800d114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d118:	4b71      	ldr	r3, [pc, #452]	@ (800d2e0 <_dtoa_r+0x5d0>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	f7f3 f8b4 	bl	8000288 <__aeabi_dsub>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d128:	462a      	mov	r2, r5
 800d12a:	4633      	mov	r3, r6
 800d12c:	f7f3 fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 800d130:	2800      	cmp	r0, #0
 800d132:	f040 828b 	bne.w	800d64c <_dtoa_r+0x93c>
 800d136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d13a:	462a      	mov	r2, r5
 800d13c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d140:	f7f3 fccc 	bl	8000adc <__aeabi_dcmplt>
 800d144:	2800      	cmp	r0, #0
 800d146:	f040 8128 	bne.w	800d39a <_dtoa_r+0x68a>
 800d14a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d14e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d154:	2b00      	cmp	r3, #0
 800d156:	f2c0 815a 	blt.w	800d40e <_dtoa_r+0x6fe>
 800d15a:	2f0e      	cmp	r7, #14
 800d15c:	f300 8157 	bgt.w	800d40e <_dtoa_r+0x6fe>
 800d160:	4b5a      	ldr	r3, [pc, #360]	@ (800d2cc <_dtoa_r+0x5bc>)
 800d162:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d166:	ed93 7b00 	vldr	d7, [r3]
 800d16a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	ed8d 7b00 	vstr	d7, [sp]
 800d172:	da03      	bge.n	800d17c <_dtoa_r+0x46c>
 800d174:	9b07      	ldr	r3, [sp, #28]
 800d176:	2b00      	cmp	r3, #0
 800d178:	f340 8101 	ble.w	800d37e <_dtoa_r+0x66e>
 800d17c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d180:	4656      	mov	r6, sl
 800d182:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d186:	4620      	mov	r0, r4
 800d188:	4629      	mov	r1, r5
 800d18a:	f7f3 fb5f 	bl	800084c <__aeabi_ddiv>
 800d18e:	f7f3 fce3 	bl	8000b58 <__aeabi_d2iz>
 800d192:	4680      	mov	r8, r0
 800d194:	f7f3 f9c6 	bl	8000524 <__aeabi_i2d>
 800d198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d19c:	f7f3 fa2c 	bl	80005f8 <__aeabi_dmul>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d1ac:	f7f3 f86c 	bl	8000288 <__aeabi_dsub>
 800d1b0:	f806 4b01 	strb.w	r4, [r6], #1
 800d1b4:	9d07      	ldr	r5, [sp, #28]
 800d1b6:	eba6 040a 	sub.w	r4, r6, sl
 800d1ba:	42a5      	cmp	r5, r4
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	f040 8117 	bne.w	800d3f2 <_dtoa_r+0x6e2>
 800d1c4:	f7f3 f862 	bl	800028c <__adddf3>
 800d1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	f7f3 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	f040 80f9 	bne.w	800d3cc <_dtoa_r+0x6bc>
 800d1da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1de:	4620      	mov	r0, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f7f3 fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1e6:	b118      	cbz	r0, 800d1f0 <_dtoa_r+0x4e0>
 800d1e8:	f018 0f01 	tst.w	r8, #1
 800d1ec:	f040 80ee 	bne.w	800d3cc <_dtoa_r+0x6bc>
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	4658      	mov	r0, fp
 800d1f4:	f000 ffdc 	bl	800e1b0 <_Bfree>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	7033      	strb	r3, [r6, #0]
 800d1fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1fe:	3701      	adds	r7, #1
 800d200:	601f      	str	r7, [r3, #0]
 800d202:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 831d 	beq.w	800d844 <_dtoa_r+0xb34>
 800d20a:	601e      	str	r6, [r3, #0]
 800d20c:	e31a      	b.n	800d844 <_dtoa_r+0xb34>
 800d20e:	07e2      	lsls	r2, r4, #31
 800d210:	d505      	bpl.n	800d21e <_dtoa_r+0x50e>
 800d212:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d216:	f7f3 f9ef 	bl	80005f8 <__aeabi_dmul>
 800d21a:	3601      	adds	r6, #1
 800d21c:	2301      	movs	r3, #1
 800d21e:	1064      	asrs	r4, r4, #1
 800d220:	3508      	adds	r5, #8
 800d222:	e73f      	b.n	800d0a4 <_dtoa_r+0x394>
 800d224:	2602      	movs	r6, #2
 800d226:	e742      	b.n	800d0ae <_dtoa_r+0x39e>
 800d228:	9c07      	ldr	r4, [sp, #28]
 800d22a:	9704      	str	r7, [sp, #16]
 800d22c:	e761      	b.n	800d0f2 <_dtoa_r+0x3e2>
 800d22e:	4b27      	ldr	r3, [pc, #156]	@ (800d2cc <_dtoa_r+0x5bc>)
 800d230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d232:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d236:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d23a:	4454      	add	r4, sl
 800d23c:	2900      	cmp	r1, #0
 800d23e:	d053      	beq.n	800d2e8 <_dtoa_r+0x5d8>
 800d240:	4928      	ldr	r1, [pc, #160]	@ (800d2e4 <_dtoa_r+0x5d4>)
 800d242:	2000      	movs	r0, #0
 800d244:	f7f3 fb02 	bl	800084c <__aeabi_ddiv>
 800d248:	4633      	mov	r3, r6
 800d24a:	462a      	mov	r2, r5
 800d24c:	f7f3 f81c 	bl	8000288 <__aeabi_dsub>
 800d250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d254:	4656      	mov	r6, sl
 800d256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d25a:	f7f3 fc7d 	bl	8000b58 <__aeabi_d2iz>
 800d25e:	4605      	mov	r5, r0
 800d260:	f7f3 f960 	bl	8000524 <__aeabi_i2d>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d26c:	f7f3 f80c 	bl	8000288 <__aeabi_dsub>
 800d270:	3530      	adds	r5, #48	@ 0x30
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d27a:	f806 5b01 	strb.w	r5, [r6], #1
 800d27e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d282:	f7f3 fc2b 	bl	8000adc <__aeabi_dcmplt>
 800d286:	2800      	cmp	r0, #0
 800d288:	d171      	bne.n	800d36e <_dtoa_r+0x65e>
 800d28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d28e:	4911      	ldr	r1, [pc, #68]	@ (800d2d4 <_dtoa_r+0x5c4>)
 800d290:	2000      	movs	r0, #0
 800d292:	f7f2 fff9 	bl	8000288 <__aeabi_dsub>
 800d296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d29a:	f7f3 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	f040 8095 	bne.w	800d3ce <_dtoa_r+0x6be>
 800d2a4:	42a6      	cmp	r6, r4
 800d2a6:	f43f af50 	beq.w	800d14a <_dtoa_r+0x43a>
 800d2aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d2ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d8 <_dtoa_r+0x5c8>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f7f3 f9a1 	bl	80005f8 <__aeabi_dmul>
 800d2b6:	4b08      	ldr	r3, [pc, #32]	@ (800d2d8 <_dtoa_r+0x5c8>)
 800d2b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2bc:	2200      	movs	r2, #0
 800d2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2c2:	f7f3 f999 	bl	80005f8 <__aeabi_dmul>
 800d2c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2ca:	e7c4      	b.n	800d256 <_dtoa_r+0x546>
 800d2cc:	080115c0 	.word	0x080115c0
 800d2d0:	08011598 	.word	0x08011598
 800d2d4:	3ff00000 	.word	0x3ff00000
 800d2d8:	40240000 	.word	0x40240000
 800d2dc:	401c0000 	.word	0x401c0000
 800d2e0:	40140000 	.word	0x40140000
 800d2e4:	3fe00000 	.word	0x3fe00000
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f7f3 f984 	bl	80005f8 <__aeabi_dmul>
 800d2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d2f6:	4656      	mov	r6, sl
 800d2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2fc:	f7f3 fc2c 	bl	8000b58 <__aeabi_d2iz>
 800d300:	4605      	mov	r5, r0
 800d302:	f7f3 f90f 	bl	8000524 <__aeabi_i2d>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d30e:	f7f2 ffbb 	bl	8000288 <__aeabi_dsub>
 800d312:	3530      	adds	r5, #48	@ 0x30
 800d314:	f806 5b01 	strb.w	r5, [r6], #1
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	42a6      	cmp	r6, r4
 800d31e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d322:	f04f 0200 	mov.w	r2, #0
 800d326:	d124      	bne.n	800d372 <_dtoa_r+0x662>
 800d328:	4bac      	ldr	r3, [pc, #688]	@ (800d5dc <_dtoa_r+0x8cc>)
 800d32a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d32e:	f7f2 ffad 	bl	800028c <__adddf3>
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d33a:	f7f3 fbed 	bl	8000b18 <__aeabi_dcmpgt>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d145      	bne.n	800d3ce <_dtoa_r+0x6be>
 800d342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d346:	49a5      	ldr	r1, [pc, #660]	@ (800d5dc <_dtoa_r+0x8cc>)
 800d348:	2000      	movs	r0, #0
 800d34a:	f7f2 ff9d 	bl	8000288 <__aeabi_dsub>
 800d34e:	4602      	mov	r2, r0
 800d350:	460b      	mov	r3, r1
 800d352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d356:	f7f3 fbc1 	bl	8000adc <__aeabi_dcmplt>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f43f aef5 	beq.w	800d14a <_dtoa_r+0x43a>
 800d360:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d362:	1e73      	subs	r3, r6, #1
 800d364:	9315      	str	r3, [sp, #84]	@ 0x54
 800d366:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d36a:	2b30      	cmp	r3, #48	@ 0x30
 800d36c:	d0f8      	beq.n	800d360 <_dtoa_r+0x650>
 800d36e:	9f04      	ldr	r7, [sp, #16]
 800d370:	e73e      	b.n	800d1f0 <_dtoa_r+0x4e0>
 800d372:	4b9b      	ldr	r3, [pc, #620]	@ (800d5e0 <_dtoa_r+0x8d0>)
 800d374:	f7f3 f940 	bl	80005f8 <__aeabi_dmul>
 800d378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d37c:	e7bc      	b.n	800d2f8 <_dtoa_r+0x5e8>
 800d37e:	d10c      	bne.n	800d39a <_dtoa_r+0x68a>
 800d380:	4b98      	ldr	r3, [pc, #608]	@ (800d5e4 <_dtoa_r+0x8d4>)
 800d382:	2200      	movs	r2, #0
 800d384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d388:	f7f3 f936 	bl	80005f8 <__aeabi_dmul>
 800d38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d390:	f7f3 fbb8 	bl	8000b04 <__aeabi_dcmpge>
 800d394:	2800      	cmp	r0, #0
 800d396:	f000 8157 	beq.w	800d648 <_dtoa_r+0x938>
 800d39a:	2400      	movs	r4, #0
 800d39c:	4625      	mov	r5, r4
 800d39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3a0:	43db      	mvns	r3, r3
 800d3a2:	9304      	str	r3, [sp, #16]
 800d3a4:	4656      	mov	r6, sl
 800d3a6:	2700      	movs	r7, #0
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	4658      	mov	r0, fp
 800d3ac:	f000 ff00 	bl	800e1b0 <_Bfree>
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	d0dc      	beq.n	800d36e <_dtoa_r+0x65e>
 800d3b4:	b12f      	cbz	r7, 800d3c2 <_dtoa_r+0x6b2>
 800d3b6:	42af      	cmp	r7, r5
 800d3b8:	d003      	beq.n	800d3c2 <_dtoa_r+0x6b2>
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	4658      	mov	r0, fp
 800d3be:	f000 fef7 	bl	800e1b0 <_Bfree>
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	f000 fef3 	bl	800e1b0 <_Bfree>
 800d3ca:	e7d0      	b.n	800d36e <_dtoa_r+0x65e>
 800d3cc:	9704      	str	r7, [sp, #16]
 800d3ce:	4633      	mov	r3, r6
 800d3d0:	461e      	mov	r6, r3
 800d3d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3d6:	2a39      	cmp	r2, #57	@ 0x39
 800d3d8:	d107      	bne.n	800d3ea <_dtoa_r+0x6da>
 800d3da:	459a      	cmp	sl, r3
 800d3dc:	d1f8      	bne.n	800d3d0 <_dtoa_r+0x6c0>
 800d3de:	9a04      	ldr	r2, [sp, #16]
 800d3e0:	3201      	adds	r2, #1
 800d3e2:	9204      	str	r2, [sp, #16]
 800d3e4:	2230      	movs	r2, #48	@ 0x30
 800d3e6:	f88a 2000 	strb.w	r2, [sl]
 800d3ea:	781a      	ldrb	r2, [r3, #0]
 800d3ec:	3201      	adds	r2, #1
 800d3ee:	701a      	strb	r2, [r3, #0]
 800d3f0:	e7bd      	b.n	800d36e <_dtoa_r+0x65e>
 800d3f2:	4b7b      	ldr	r3, [pc, #492]	@ (800d5e0 <_dtoa_r+0x8d0>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f7f3 f8ff 	bl	80005f8 <__aeabi_dmul>
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4604      	mov	r4, r0
 800d400:	460d      	mov	r5, r1
 800d402:	f7f3 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 800d406:	2800      	cmp	r0, #0
 800d408:	f43f aebb 	beq.w	800d182 <_dtoa_r+0x472>
 800d40c:	e6f0      	b.n	800d1f0 <_dtoa_r+0x4e0>
 800d40e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d410:	2a00      	cmp	r2, #0
 800d412:	f000 80db 	beq.w	800d5cc <_dtoa_r+0x8bc>
 800d416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d418:	2a01      	cmp	r2, #1
 800d41a:	f300 80bf 	bgt.w	800d59c <_dtoa_r+0x88c>
 800d41e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d420:	2a00      	cmp	r2, #0
 800d422:	f000 80b7 	beq.w	800d594 <_dtoa_r+0x884>
 800d426:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d42a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d42c:	4646      	mov	r6, r8
 800d42e:	9a08      	ldr	r2, [sp, #32]
 800d430:	2101      	movs	r1, #1
 800d432:	441a      	add	r2, r3
 800d434:	4658      	mov	r0, fp
 800d436:	4498      	add	r8, r3
 800d438:	9208      	str	r2, [sp, #32]
 800d43a:	f000 ffb7 	bl	800e3ac <__i2b>
 800d43e:	4605      	mov	r5, r0
 800d440:	b15e      	cbz	r6, 800d45a <_dtoa_r+0x74a>
 800d442:	9b08      	ldr	r3, [sp, #32]
 800d444:	2b00      	cmp	r3, #0
 800d446:	dd08      	ble.n	800d45a <_dtoa_r+0x74a>
 800d448:	42b3      	cmp	r3, r6
 800d44a:	9a08      	ldr	r2, [sp, #32]
 800d44c:	bfa8      	it	ge
 800d44e:	4633      	movge	r3, r6
 800d450:	eba8 0803 	sub.w	r8, r8, r3
 800d454:	1af6      	subs	r6, r6, r3
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	9308      	str	r3, [sp, #32]
 800d45a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d45c:	b1f3      	cbz	r3, 800d49c <_dtoa_r+0x78c>
 800d45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d460:	2b00      	cmp	r3, #0
 800d462:	f000 80b7 	beq.w	800d5d4 <_dtoa_r+0x8c4>
 800d466:	b18c      	cbz	r4, 800d48c <_dtoa_r+0x77c>
 800d468:	4629      	mov	r1, r5
 800d46a:	4622      	mov	r2, r4
 800d46c:	4658      	mov	r0, fp
 800d46e:	f001 f85d 	bl	800e52c <__pow5mult>
 800d472:	464a      	mov	r2, r9
 800d474:	4601      	mov	r1, r0
 800d476:	4605      	mov	r5, r0
 800d478:	4658      	mov	r0, fp
 800d47a:	f000 ffad 	bl	800e3d8 <__multiply>
 800d47e:	4649      	mov	r1, r9
 800d480:	9004      	str	r0, [sp, #16]
 800d482:	4658      	mov	r0, fp
 800d484:	f000 fe94 	bl	800e1b0 <_Bfree>
 800d488:	9b04      	ldr	r3, [sp, #16]
 800d48a:	4699      	mov	r9, r3
 800d48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d48e:	1b1a      	subs	r2, r3, r4
 800d490:	d004      	beq.n	800d49c <_dtoa_r+0x78c>
 800d492:	4649      	mov	r1, r9
 800d494:	4658      	mov	r0, fp
 800d496:	f001 f849 	bl	800e52c <__pow5mult>
 800d49a:	4681      	mov	r9, r0
 800d49c:	2101      	movs	r1, #1
 800d49e:	4658      	mov	r0, fp
 800d4a0:	f000 ff84 	bl	800e3ac <__i2b>
 800d4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 81cf 	beq.w	800d84c <_dtoa_r+0xb3c>
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	4601      	mov	r1, r0
 800d4b2:	4658      	mov	r0, fp
 800d4b4:	f001 f83a 	bl	800e52c <__pow5mult>
 800d4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	4604      	mov	r4, r0
 800d4be:	f300 8095 	bgt.w	800d5ec <_dtoa_r+0x8dc>
 800d4c2:	9b02      	ldr	r3, [sp, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f040 8087 	bne.w	800d5d8 <_dtoa_r+0x8c8>
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f040 8089 	bne.w	800d5e8 <_dtoa_r+0x8d8>
 800d4d6:	9b03      	ldr	r3, [sp, #12]
 800d4d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d4dc:	0d1b      	lsrs	r3, r3, #20
 800d4de:	051b      	lsls	r3, r3, #20
 800d4e0:	b12b      	cbz	r3, 800d4ee <_dtoa_r+0x7de>
 800d4e2:	9b08      	ldr	r3, [sp, #32]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	9308      	str	r3, [sp, #32]
 800d4e8:	f108 0801 	add.w	r8, r8, #1
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 81b0 	beq.w	800d858 <_dtoa_r+0xb48>
 800d4f8:	6923      	ldr	r3, [r4, #16]
 800d4fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4fe:	6918      	ldr	r0, [r3, #16]
 800d500:	f000 ff08 	bl	800e314 <__hi0bits>
 800d504:	f1c0 0020 	rsb	r0, r0, #32
 800d508:	9b08      	ldr	r3, [sp, #32]
 800d50a:	4418      	add	r0, r3
 800d50c:	f010 001f 	ands.w	r0, r0, #31
 800d510:	d077      	beq.n	800d602 <_dtoa_r+0x8f2>
 800d512:	f1c0 0320 	rsb	r3, r0, #32
 800d516:	2b04      	cmp	r3, #4
 800d518:	dd6b      	ble.n	800d5f2 <_dtoa_r+0x8e2>
 800d51a:	9b08      	ldr	r3, [sp, #32]
 800d51c:	f1c0 001c 	rsb	r0, r0, #28
 800d520:	4403      	add	r3, r0
 800d522:	4480      	add	r8, r0
 800d524:	4406      	add	r6, r0
 800d526:	9308      	str	r3, [sp, #32]
 800d528:	f1b8 0f00 	cmp.w	r8, #0
 800d52c:	dd05      	ble.n	800d53a <_dtoa_r+0x82a>
 800d52e:	4649      	mov	r1, r9
 800d530:	4642      	mov	r2, r8
 800d532:	4658      	mov	r0, fp
 800d534:	f001 f854 	bl	800e5e0 <__lshift>
 800d538:	4681      	mov	r9, r0
 800d53a:	9b08      	ldr	r3, [sp, #32]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	dd05      	ble.n	800d54c <_dtoa_r+0x83c>
 800d540:	4621      	mov	r1, r4
 800d542:	461a      	mov	r2, r3
 800d544:	4658      	mov	r0, fp
 800d546:	f001 f84b 	bl	800e5e0 <__lshift>
 800d54a:	4604      	mov	r4, r0
 800d54c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d059      	beq.n	800d606 <_dtoa_r+0x8f6>
 800d552:	4621      	mov	r1, r4
 800d554:	4648      	mov	r0, r9
 800d556:	f001 f8af 	bl	800e6b8 <__mcmp>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	da53      	bge.n	800d606 <_dtoa_r+0x8f6>
 800d55e:	1e7b      	subs	r3, r7, #1
 800d560:	9304      	str	r3, [sp, #16]
 800d562:	4649      	mov	r1, r9
 800d564:	2300      	movs	r3, #0
 800d566:	220a      	movs	r2, #10
 800d568:	4658      	mov	r0, fp
 800d56a:	f000 fe43 	bl	800e1f4 <__multadd>
 800d56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d570:	4681      	mov	r9, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 8172 	beq.w	800d85c <_dtoa_r+0xb4c>
 800d578:	2300      	movs	r3, #0
 800d57a:	4629      	mov	r1, r5
 800d57c:	220a      	movs	r2, #10
 800d57e:	4658      	mov	r0, fp
 800d580:	f000 fe38 	bl	800e1f4 <__multadd>
 800d584:	9b00      	ldr	r3, [sp, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	4605      	mov	r5, r0
 800d58a:	dc67      	bgt.n	800d65c <_dtoa_r+0x94c>
 800d58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58e:	2b02      	cmp	r3, #2
 800d590:	dc41      	bgt.n	800d616 <_dtoa_r+0x906>
 800d592:	e063      	b.n	800d65c <_dtoa_r+0x94c>
 800d594:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d596:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d59a:	e746      	b.n	800d42a <_dtoa_r+0x71a>
 800d59c:	9b07      	ldr	r3, [sp, #28]
 800d59e:	1e5c      	subs	r4, r3, #1
 800d5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5a2:	42a3      	cmp	r3, r4
 800d5a4:	bfbf      	itttt	lt
 800d5a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d5a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d5aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d5ac:	1ae3      	sublt	r3, r4, r3
 800d5ae:	bfb4      	ite	lt
 800d5b0:	18d2      	addlt	r2, r2, r3
 800d5b2:	1b1c      	subge	r4, r3, r4
 800d5b4:	9b07      	ldr	r3, [sp, #28]
 800d5b6:	bfbc      	itt	lt
 800d5b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d5ba:	2400      	movlt	r4, #0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	bfb5      	itete	lt
 800d5c0:	eba8 0603 	sublt.w	r6, r8, r3
 800d5c4:	9b07      	ldrge	r3, [sp, #28]
 800d5c6:	2300      	movlt	r3, #0
 800d5c8:	4646      	movge	r6, r8
 800d5ca:	e730      	b.n	800d42e <_dtoa_r+0x71e>
 800d5cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d5ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d5d0:	4646      	mov	r6, r8
 800d5d2:	e735      	b.n	800d440 <_dtoa_r+0x730>
 800d5d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5d6:	e75c      	b.n	800d492 <_dtoa_r+0x782>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	e788      	b.n	800d4ee <_dtoa_r+0x7de>
 800d5dc:	3fe00000 	.word	0x3fe00000
 800d5e0:	40240000 	.word	0x40240000
 800d5e4:	40140000 	.word	0x40140000
 800d5e8:	9b02      	ldr	r3, [sp, #8]
 800d5ea:	e780      	b.n	800d4ee <_dtoa_r+0x7de>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5f0:	e782      	b.n	800d4f8 <_dtoa_r+0x7e8>
 800d5f2:	d099      	beq.n	800d528 <_dtoa_r+0x818>
 800d5f4:	9a08      	ldr	r2, [sp, #32]
 800d5f6:	331c      	adds	r3, #28
 800d5f8:	441a      	add	r2, r3
 800d5fa:	4498      	add	r8, r3
 800d5fc:	441e      	add	r6, r3
 800d5fe:	9208      	str	r2, [sp, #32]
 800d600:	e792      	b.n	800d528 <_dtoa_r+0x818>
 800d602:	4603      	mov	r3, r0
 800d604:	e7f6      	b.n	800d5f4 <_dtoa_r+0x8e4>
 800d606:	9b07      	ldr	r3, [sp, #28]
 800d608:	9704      	str	r7, [sp, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	dc20      	bgt.n	800d650 <_dtoa_r+0x940>
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d612:	2b02      	cmp	r3, #2
 800d614:	dd1e      	ble.n	800d654 <_dtoa_r+0x944>
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f47f aec0 	bne.w	800d39e <_dtoa_r+0x68e>
 800d61e:	4621      	mov	r1, r4
 800d620:	2205      	movs	r2, #5
 800d622:	4658      	mov	r0, fp
 800d624:	f000 fde6 	bl	800e1f4 <__multadd>
 800d628:	4601      	mov	r1, r0
 800d62a:	4604      	mov	r4, r0
 800d62c:	4648      	mov	r0, r9
 800d62e:	f001 f843 	bl	800e6b8 <__mcmp>
 800d632:	2800      	cmp	r0, #0
 800d634:	f77f aeb3 	ble.w	800d39e <_dtoa_r+0x68e>
 800d638:	4656      	mov	r6, sl
 800d63a:	2331      	movs	r3, #49	@ 0x31
 800d63c:	f806 3b01 	strb.w	r3, [r6], #1
 800d640:	9b04      	ldr	r3, [sp, #16]
 800d642:	3301      	adds	r3, #1
 800d644:	9304      	str	r3, [sp, #16]
 800d646:	e6ae      	b.n	800d3a6 <_dtoa_r+0x696>
 800d648:	9c07      	ldr	r4, [sp, #28]
 800d64a:	9704      	str	r7, [sp, #16]
 800d64c:	4625      	mov	r5, r4
 800d64e:	e7f3      	b.n	800d638 <_dtoa_r+0x928>
 800d650:	9b07      	ldr	r3, [sp, #28]
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 8104 	beq.w	800d864 <_dtoa_r+0xb54>
 800d65c:	2e00      	cmp	r6, #0
 800d65e:	dd05      	ble.n	800d66c <_dtoa_r+0x95c>
 800d660:	4629      	mov	r1, r5
 800d662:	4632      	mov	r2, r6
 800d664:	4658      	mov	r0, fp
 800d666:	f000 ffbb 	bl	800e5e0 <__lshift>
 800d66a:	4605      	mov	r5, r0
 800d66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d05a      	beq.n	800d728 <_dtoa_r+0xa18>
 800d672:	6869      	ldr	r1, [r5, #4]
 800d674:	4658      	mov	r0, fp
 800d676:	f000 fd5b 	bl	800e130 <_Balloc>
 800d67a:	4606      	mov	r6, r0
 800d67c:	b928      	cbnz	r0, 800d68a <_dtoa_r+0x97a>
 800d67e:	4b84      	ldr	r3, [pc, #528]	@ (800d890 <_dtoa_r+0xb80>)
 800d680:	4602      	mov	r2, r0
 800d682:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d686:	f7ff bb5a 	b.w	800cd3e <_dtoa_r+0x2e>
 800d68a:	692a      	ldr	r2, [r5, #16]
 800d68c:	3202      	adds	r2, #2
 800d68e:	0092      	lsls	r2, r2, #2
 800d690:	f105 010c 	add.w	r1, r5, #12
 800d694:	300c      	adds	r0, #12
 800d696:	f7ff fa76 	bl	800cb86 <memcpy>
 800d69a:	2201      	movs	r2, #1
 800d69c:	4631      	mov	r1, r6
 800d69e:	4658      	mov	r0, fp
 800d6a0:	f000 ff9e 	bl	800e5e0 <__lshift>
 800d6a4:	f10a 0301 	add.w	r3, sl, #1
 800d6a8:	9307      	str	r3, [sp, #28]
 800d6aa:	9b00      	ldr	r3, [sp, #0]
 800d6ac:	4453      	add	r3, sl
 800d6ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6b0:	9b02      	ldr	r3, [sp, #8]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	462f      	mov	r7, r5
 800d6b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	9b07      	ldr	r3, [sp, #28]
 800d6be:	4621      	mov	r1, r4
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	4648      	mov	r0, r9
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	f7ff fa9b 	bl	800cc00 <quorem>
 800d6ca:	4639      	mov	r1, r7
 800d6cc:	9002      	str	r0, [sp, #8]
 800d6ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d6d2:	4648      	mov	r0, r9
 800d6d4:	f000 fff0 	bl	800e6b8 <__mcmp>
 800d6d8:	462a      	mov	r2, r5
 800d6da:	9008      	str	r0, [sp, #32]
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4658      	mov	r0, fp
 800d6e0:	f001 f806 	bl	800e6f0 <__mdiff>
 800d6e4:	68c2      	ldr	r2, [r0, #12]
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	bb02      	cbnz	r2, 800d72c <_dtoa_r+0xa1c>
 800d6ea:	4601      	mov	r1, r0
 800d6ec:	4648      	mov	r0, r9
 800d6ee:	f000 ffe3 	bl	800e6b8 <__mcmp>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4658      	mov	r0, fp
 800d6f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6fa:	f000 fd59 	bl	800e1b0 <_Bfree>
 800d6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d702:	9e07      	ldr	r6, [sp, #28]
 800d704:	ea43 0102 	orr.w	r1, r3, r2
 800d708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d70a:	4319      	orrs	r1, r3
 800d70c:	d110      	bne.n	800d730 <_dtoa_r+0xa20>
 800d70e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d712:	d029      	beq.n	800d768 <_dtoa_r+0xa58>
 800d714:	9b08      	ldr	r3, [sp, #32]
 800d716:	2b00      	cmp	r3, #0
 800d718:	dd02      	ble.n	800d720 <_dtoa_r+0xa10>
 800d71a:	9b02      	ldr	r3, [sp, #8]
 800d71c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d720:	9b00      	ldr	r3, [sp, #0]
 800d722:	f883 8000 	strb.w	r8, [r3]
 800d726:	e63f      	b.n	800d3a8 <_dtoa_r+0x698>
 800d728:	4628      	mov	r0, r5
 800d72a:	e7bb      	b.n	800d6a4 <_dtoa_r+0x994>
 800d72c:	2201      	movs	r2, #1
 800d72e:	e7e1      	b.n	800d6f4 <_dtoa_r+0x9e4>
 800d730:	9b08      	ldr	r3, [sp, #32]
 800d732:	2b00      	cmp	r3, #0
 800d734:	db04      	blt.n	800d740 <_dtoa_r+0xa30>
 800d736:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d738:	430b      	orrs	r3, r1
 800d73a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d73c:	430b      	orrs	r3, r1
 800d73e:	d120      	bne.n	800d782 <_dtoa_r+0xa72>
 800d740:	2a00      	cmp	r2, #0
 800d742:	dded      	ble.n	800d720 <_dtoa_r+0xa10>
 800d744:	4649      	mov	r1, r9
 800d746:	2201      	movs	r2, #1
 800d748:	4658      	mov	r0, fp
 800d74a:	f000 ff49 	bl	800e5e0 <__lshift>
 800d74e:	4621      	mov	r1, r4
 800d750:	4681      	mov	r9, r0
 800d752:	f000 ffb1 	bl	800e6b8 <__mcmp>
 800d756:	2800      	cmp	r0, #0
 800d758:	dc03      	bgt.n	800d762 <_dtoa_r+0xa52>
 800d75a:	d1e1      	bne.n	800d720 <_dtoa_r+0xa10>
 800d75c:	f018 0f01 	tst.w	r8, #1
 800d760:	d0de      	beq.n	800d720 <_dtoa_r+0xa10>
 800d762:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d766:	d1d8      	bne.n	800d71a <_dtoa_r+0xa0a>
 800d768:	9a00      	ldr	r2, [sp, #0]
 800d76a:	2339      	movs	r3, #57	@ 0x39
 800d76c:	7013      	strb	r3, [r2, #0]
 800d76e:	4633      	mov	r3, r6
 800d770:	461e      	mov	r6, r3
 800d772:	3b01      	subs	r3, #1
 800d774:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d778:	2a39      	cmp	r2, #57	@ 0x39
 800d77a:	d052      	beq.n	800d822 <_dtoa_r+0xb12>
 800d77c:	3201      	adds	r2, #1
 800d77e:	701a      	strb	r2, [r3, #0]
 800d780:	e612      	b.n	800d3a8 <_dtoa_r+0x698>
 800d782:	2a00      	cmp	r2, #0
 800d784:	dd07      	ble.n	800d796 <_dtoa_r+0xa86>
 800d786:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d78a:	d0ed      	beq.n	800d768 <_dtoa_r+0xa58>
 800d78c:	9a00      	ldr	r2, [sp, #0]
 800d78e:	f108 0301 	add.w	r3, r8, #1
 800d792:	7013      	strb	r3, [r2, #0]
 800d794:	e608      	b.n	800d3a8 <_dtoa_r+0x698>
 800d796:	9b07      	ldr	r3, [sp, #28]
 800d798:	9a07      	ldr	r2, [sp, #28]
 800d79a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d028      	beq.n	800d7f6 <_dtoa_r+0xae6>
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	220a      	movs	r2, #10
 800d7aa:	4658      	mov	r0, fp
 800d7ac:	f000 fd22 	bl	800e1f4 <__multadd>
 800d7b0:	42af      	cmp	r7, r5
 800d7b2:	4681      	mov	r9, r0
 800d7b4:	f04f 0300 	mov.w	r3, #0
 800d7b8:	f04f 020a 	mov.w	r2, #10
 800d7bc:	4639      	mov	r1, r7
 800d7be:	4658      	mov	r0, fp
 800d7c0:	d107      	bne.n	800d7d2 <_dtoa_r+0xac2>
 800d7c2:	f000 fd17 	bl	800e1f4 <__multadd>
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	9b07      	ldr	r3, [sp, #28]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	9307      	str	r3, [sp, #28]
 800d7d0:	e774      	b.n	800d6bc <_dtoa_r+0x9ac>
 800d7d2:	f000 fd0f 	bl	800e1f4 <__multadd>
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	4607      	mov	r7, r0
 800d7da:	2300      	movs	r3, #0
 800d7dc:	220a      	movs	r2, #10
 800d7de:	4658      	mov	r0, fp
 800d7e0:	f000 fd08 	bl	800e1f4 <__multadd>
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	e7f0      	b.n	800d7ca <_dtoa_r+0xaba>
 800d7e8:	9b00      	ldr	r3, [sp, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	bfcc      	ite	gt
 800d7ee:	461e      	movgt	r6, r3
 800d7f0:	2601      	movle	r6, #1
 800d7f2:	4456      	add	r6, sl
 800d7f4:	2700      	movs	r7, #0
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	4658      	mov	r0, fp
 800d7fc:	f000 fef0 	bl	800e5e0 <__lshift>
 800d800:	4621      	mov	r1, r4
 800d802:	4681      	mov	r9, r0
 800d804:	f000 ff58 	bl	800e6b8 <__mcmp>
 800d808:	2800      	cmp	r0, #0
 800d80a:	dcb0      	bgt.n	800d76e <_dtoa_r+0xa5e>
 800d80c:	d102      	bne.n	800d814 <_dtoa_r+0xb04>
 800d80e:	f018 0f01 	tst.w	r8, #1
 800d812:	d1ac      	bne.n	800d76e <_dtoa_r+0xa5e>
 800d814:	4633      	mov	r3, r6
 800d816:	461e      	mov	r6, r3
 800d818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d81c:	2a30      	cmp	r2, #48	@ 0x30
 800d81e:	d0fa      	beq.n	800d816 <_dtoa_r+0xb06>
 800d820:	e5c2      	b.n	800d3a8 <_dtoa_r+0x698>
 800d822:	459a      	cmp	sl, r3
 800d824:	d1a4      	bne.n	800d770 <_dtoa_r+0xa60>
 800d826:	9b04      	ldr	r3, [sp, #16]
 800d828:	3301      	adds	r3, #1
 800d82a:	9304      	str	r3, [sp, #16]
 800d82c:	2331      	movs	r3, #49	@ 0x31
 800d82e:	f88a 3000 	strb.w	r3, [sl]
 800d832:	e5b9      	b.n	800d3a8 <_dtoa_r+0x698>
 800d834:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d836:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d894 <_dtoa_r+0xb84>
 800d83a:	b11b      	cbz	r3, 800d844 <_dtoa_r+0xb34>
 800d83c:	f10a 0308 	add.w	r3, sl, #8
 800d840:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	4650      	mov	r0, sl
 800d846:	b019      	add	sp, #100	@ 0x64
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d84e:	2b01      	cmp	r3, #1
 800d850:	f77f ae37 	ble.w	800d4c2 <_dtoa_r+0x7b2>
 800d854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d856:	930a      	str	r3, [sp, #40]	@ 0x28
 800d858:	2001      	movs	r0, #1
 800d85a:	e655      	b.n	800d508 <_dtoa_r+0x7f8>
 800d85c:	9b00      	ldr	r3, [sp, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f77f aed6 	ble.w	800d610 <_dtoa_r+0x900>
 800d864:	4656      	mov	r6, sl
 800d866:	4621      	mov	r1, r4
 800d868:	4648      	mov	r0, r9
 800d86a:	f7ff f9c9 	bl	800cc00 <quorem>
 800d86e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d872:	f806 8b01 	strb.w	r8, [r6], #1
 800d876:	9b00      	ldr	r3, [sp, #0]
 800d878:	eba6 020a 	sub.w	r2, r6, sl
 800d87c:	4293      	cmp	r3, r2
 800d87e:	ddb3      	ble.n	800d7e8 <_dtoa_r+0xad8>
 800d880:	4649      	mov	r1, r9
 800d882:	2300      	movs	r3, #0
 800d884:	220a      	movs	r2, #10
 800d886:	4658      	mov	r0, fp
 800d888:	f000 fcb4 	bl	800e1f4 <__multadd>
 800d88c:	4681      	mov	r9, r0
 800d88e:	e7ea      	b.n	800d866 <_dtoa_r+0xb56>
 800d890:	080114bc 	.word	0x080114bc
 800d894:	08011457 	.word	0x08011457

0800d898 <_free_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4605      	mov	r5, r0
 800d89c:	2900      	cmp	r1, #0
 800d89e:	d041      	beq.n	800d924 <_free_r+0x8c>
 800d8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8a4:	1f0c      	subs	r4, r1, #4
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	bfb8      	it	lt
 800d8aa:	18e4      	addlt	r4, r4, r3
 800d8ac:	f000 fc34 	bl	800e118 <__malloc_lock>
 800d8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d928 <_free_r+0x90>)
 800d8b2:	6813      	ldr	r3, [r2, #0]
 800d8b4:	b933      	cbnz	r3, 800d8c4 <_free_r+0x2c>
 800d8b6:	6063      	str	r3, [r4, #4]
 800d8b8:	6014      	str	r4, [r2, #0]
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8c0:	f000 bc30 	b.w	800e124 <__malloc_unlock>
 800d8c4:	42a3      	cmp	r3, r4
 800d8c6:	d908      	bls.n	800d8da <_free_r+0x42>
 800d8c8:	6820      	ldr	r0, [r4, #0]
 800d8ca:	1821      	adds	r1, r4, r0
 800d8cc:	428b      	cmp	r3, r1
 800d8ce:	bf01      	itttt	eq
 800d8d0:	6819      	ldreq	r1, [r3, #0]
 800d8d2:	685b      	ldreq	r3, [r3, #4]
 800d8d4:	1809      	addeq	r1, r1, r0
 800d8d6:	6021      	streq	r1, [r4, #0]
 800d8d8:	e7ed      	b.n	800d8b6 <_free_r+0x1e>
 800d8da:	461a      	mov	r2, r3
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	b10b      	cbz	r3, 800d8e4 <_free_r+0x4c>
 800d8e0:	42a3      	cmp	r3, r4
 800d8e2:	d9fa      	bls.n	800d8da <_free_r+0x42>
 800d8e4:	6811      	ldr	r1, [r2, #0]
 800d8e6:	1850      	adds	r0, r2, r1
 800d8e8:	42a0      	cmp	r0, r4
 800d8ea:	d10b      	bne.n	800d904 <_free_r+0x6c>
 800d8ec:	6820      	ldr	r0, [r4, #0]
 800d8ee:	4401      	add	r1, r0
 800d8f0:	1850      	adds	r0, r2, r1
 800d8f2:	4283      	cmp	r3, r0
 800d8f4:	6011      	str	r1, [r2, #0]
 800d8f6:	d1e0      	bne.n	800d8ba <_free_r+0x22>
 800d8f8:	6818      	ldr	r0, [r3, #0]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	6053      	str	r3, [r2, #4]
 800d8fe:	4408      	add	r0, r1
 800d900:	6010      	str	r0, [r2, #0]
 800d902:	e7da      	b.n	800d8ba <_free_r+0x22>
 800d904:	d902      	bls.n	800d90c <_free_r+0x74>
 800d906:	230c      	movs	r3, #12
 800d908:	602b      	str	r3, [r5, #0]
 800d90a:	e7d6      	b.n	800d8ba <_free_r+0x22>
 800d90c:	6820      	ldr	r0, [r4, #0]
 800d90e:	1821      	adds	r1, r4, r0
 800d910:	428b      	cmp	r3, r1
 800d912:	bf04      	itt	eq
 800d914:	6819      	ldreq	r1, [r3, #0]
 800d916:	685b      	ldreq	r3, [r3, #4]
 800d918:	6063      	str	r3, [r4, #4]
 800d91a:	bf04      	itt	eq
 800d91c:	1809      	addeq	r1, r1, r0
 800d91e:	6021      	streq	r1, [r4, #0]
 800d920:	6054      	str	r4, [r2, #4]
 800d922:	e7ca      	b.n	800d8ba <_free_r+0x22>
 800d924:	bd38      	pop	{r3, r4, r5, pc}
 800d926:	bf00      	nop
 800d928:	2000077c 	.word	0x2000077c

0800d92c <rshift>:
 800d92c:	6903      	ldr	r3, [r0, #16]
 800d92e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d936:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d93a:	f100 0414 	add.w	r4, r0, #20
 800d93e:	dd45      	ble.n	800d9cc <rshift+0xa0>
 800d940:	f011 011f 	ands.w	r1, r1, #31
 800d944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d94c:	d10c      	bne.n	800d968 <rshift+0x3c>
 800d94e:	f100 0710 	add.w	r7, r0, #16
 800d952:	4629      	mov	r1, r5
 800d954:	42b1      	cmp	r1, r6
 800d956:	d334      	bcc.n	800d9c2 <rshift+0x96>
 800d958:	1a9b      	subs	r3, r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	1eea      	subs	r2, r5, #3
 800d95e:	4296      	cmp	r6, r2
 800d960:	bf38      	it	cc
 800d962:	2300      	movcc	r3, #0
 800d964:	4423      	add	r3, r4
 800d966:	e015      	b.n	800d994 <rshift+0x68>
 800d968:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d96c:	f1c1 0820 	rsb	r8, r1, #32
 800d970:	40cf      	lsrs	r7, r1
 800d972:	f105 0e04 	add.w	lr, r5, #4
 800d976:	46a1      	mov	r9, r4
 800d978:	4576      	cmp	r6, lr
 800d97a:	46f4      	mov	ip, lr
 800d97c:	d815      	bhi.n	800d9aa <rshift+0x7e>
 800d97e:	1a9a      	subs	r2, r3, r2
 800d980:	0092      	lsls	r2, r2, #2
 800d982:	3a04      	subs	r2, #4
 800d984:	3501      	adds	r5, #1
 800d986:	42ae      	cmp	r6, r5
 800d988:	bf38      	it	cc
 800d98a:	2200      	movcc	r2, #0
 800d98c:	18a3      	adds	r3, r4, r2
 800d98e:	50a7      	str	r7, [r4, r2]
 800d990:	b107      	cbz	r7, 800d994 <rshift+0x68>
 800d992:	3304      	adds	r3, #4
 800d994:	1b1a      	subs	r2, r3, r4
 800d996:	42a3      	cmp	r3, r4
 800d998:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d99c:	bf08      	it	eq
 800d99e:	2300      	moveq	r3, #0
 800d9a0:	6102      	str	r2, [r0, #16]
 800d9a2:	bf08      	it	eq
 800d9a4:	6143      	streq	r3, [r0, #20]
 800d9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9aa:	f8dc c000 	ldr.w	ip, [ip]
 800d9ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800d9b2:	ea4c 0707 	orr.w	r7, ip, r7
 800d9b6:	f849 7b04 	str.w	r7, [r9], #4
 800d9ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9be:	40cf      	lsrs	r7, r1
 800d9c0:	e7da      	b.n	800d978 <rshift+0x4c>
 800d9c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9ca:	e7c3      	b.n	800d954 <rshift+0x28>
 800d9cc:	4623      	mov	r3, r4
 800d9ce:	e7e1      	b.n	800d994 <rshift+0x68>

0800d9d0 <__hexdig_fun>:
 800d9d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d9d4:	2b09      	cmp	r3, #9
 800d9d6:	d802      	bhi.n	800d9de <__hexdig_fun+0xe>
 800d9d8:	3820      	subs	r0, #32
 800d9da:	b2c0      	uxtb	r0, r0
 800d9dc:	4770      	bx	lr
 800d9de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d9e2:	2b05      	cmp	r3, #5
 800d9e4:	d801      	bhi.n	800d9ea <__hexdig_fun+0x1a>
 800d9e6:	3847      	subs	r0, #71	@ 0x47
 800d9e8:	e7f7      	b.n	800d9da <__hexdig_fun+0xa>
 800d9ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d9ee:	2b05      	cmp	r3, #5
 800d9f0:	d801      	bhi.n	800d9f6 <__hexdig_fun+0x26>
 800d9f2:	3827      	subs	r0, #39	@ 0x27
 800d9f4:	e7f1      	b.n	800d9da <__hexdig_fun+0xa>
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	4770      	bx	lr
	...

0800d9fc <__gethex>:
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	b085      	sub	sp, #20
 800da02:	468a      	mov	sl, r1
 800da04:	9302      	str	r3, [sp, #8]
 800da06:	680b      	ldr	r3, [r1, #0]
 800da08:	9001      	str	r0, [sp, #4]
 800da0a:	4690      	mov	r8, r2
 800da0c:	1c9c      	adds	r4, r3, #2
 800da0e:	46a1      	mov	r9, r4
 800da10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800da14:	2830      	cmp	r0, #48	@ 0x30
 800da16:	d0fa      	beq.n	800da0e <__gethex+0x12>
 800da18:	eba9 0303 	sub.w	r3, r9, r3
 800da1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800da20:	f7ff ffd6 	bl	800d9d0 <__hexdig_fun>
 800da24:	4605      	mov	r5, r0
 800da26:	2800      	cmp	r0, #0
 800da28:	d168      	bne.n	800dafc <__gethex+0x100>
 800da2a:	49a0      	ldr	r1, [pc, #640]	@ (800dcac <__gethex+0x2b0>)
 800da2c:	2201      	movs	r2, #1
 800da2e:	4648      	mov	r0, r9
 800da30:	f7fe ffc3 	bl	800c9ba <strncmp>
 800da34:	4607      	mov	r7, r0
 800da36:	2800      	cmp	r0, #0
 800da38:	d167      	bne.n	800db0a <__gethex+0x10e>
 800da3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800da3e:	4626      	mov	r6, r4
 800da40:	f7ff ffc6 	bl	800d9d0 <__hexdig_fun>
 800da44:	2800      	cmp	r0, #0
 800da46:	d062      	beq.n	800db0e <__gethex+0x112>
 800da48:	4623      	mov	r3, r4
 800da4a:	7818      	ldrb	r0, [r3, #0]
 800da4c:	2830      	cmp	r0, #48	@ 0x30
 800da4e:	4699      	mov	r9, r3
 800da50:	f103 0301 	add.w	r3, r3, #1
 800da54:	d0f9      	beq.n	800da4a <__gethex+0x4e>
 800da56:	f7ff ffbb 	bl	800d9d0 <__hexdig_fun>
 800da5a:	fab0 f580 	clz	r5, r0
 800da5e:	096d      	lsrs	r5, r5, #5
 800da60:	f04f 0b01 	mov.w	fp, #1
 800da64:	464a      	mov	r2, r9
 800da66:	4616      	mov	r6, r2
 800da68:	3201      	adds	r2, #1
 800da6a:	7830      	ldrb	r0, [r6, #0]
 800da6c:	f7ff ffb0 	bl	800d9d0 <__hexdig_fun>
 800da70:	2800      	cmp	r0, #0
 800da72:	d1f8      	bne.n	800da66 <__gethex+0x6a>
 800da74:	498d      	ldr	r1, [pc, #564]	@ (800dcac <__gethex+0x2b0>)
 800da76:	2201      	movs	r2, #1
 800da78:	4630      	mov	r0, r6
 800da7a:	f7fe ff9e 	bl	800c9ba <strncmp>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d13f      	bne.n	800db02 <__gethex+0x106>
 800da82:	b944      	cbnz	r4, 800da96 <__gethex+0x9a>
 800da84:	1c74      	adds	r4, r6, #1
 800da86:	4622      	mov	r2, r4
 800da88:	4616      	mov	r6, r2
 800da8a:	3201      	adds	r2, #1
 800da8c:	7830      	ldrb	r0, [r6, #0]
 800da8e:	f7ff ff9f 	bl	800d9d0 <__hexdig_fun>
 800da92:	2800      	cmp	r0, #0
 800da94:	d1f8      	bne.n	800da88 <__gethex+0x8c>
 800da96:	1ba4      	subs	r4, r4, r6
 800da98:	00a7      	lsls	r7, r4, #2
 800da9a:	7833      	ldrb	r3, [r6, #0]
 800da9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800daa0:	2b50      	cmp	r3, #80	@ 0x50
 800daa2:	d13e      	bne.n	800db22 <__gethex+0x126>
 800daa4:	7873      	ldrb	r3, [r6, #1]
 800daa6:	2b2b      	cmp	r3, #43	@ 0x2b
 800daa8:	d033      	beq.n	800db12 <__gethex+0x116>
 800daaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800daac:	d034      	beq.n	800db18 <__gethex+0x11c>
 800daae:	1c71      	adds	r1, r6, #1
 800dab0:	2400      	movs	r4, #0
 800dab2:	7808      	ldrb	r0, [r1, #0]
 800dab4:	f7ff ff8c 	bl	800d9d0 <__hexdig_fun>
 800dab8:	1e43      	subs	r3, r0, #1
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b18      	cmp	r3, #24
 800dabe:	d830      	bhi.n	800db22 <__gethex+0x126>
 800dac0:	f1a0 0210 	sub.w	r2, r0, #16
 800dac4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dac8:	f7ff ff82 	bl	800d9d0 <__hexdig_fun>
 800dacc:	f100 3cff 	add.w	ip, r0, #4294967295
 800dad0:	fa5f fc8c 	uxtb.w	ip, ip
 800dad4:	f1bc 0f18 	cmp.w	ip, #24
 800dad8:	f04f 030a 	mov.w	r3, #10
 800dadc:	d91e      	bls.n	800db1c <__gethex+0x120>
 800dade:	b104      	cbz	r4, 800dae2 <__gethex+0xe6>
 800dae0:	4252      	negs	r2, r2
 800dae2:	4417      	add	r7, r2
 800dae4:	f8ca 1000 	str.w	r1, [sl]
 800dae8:	b1ed      	cbz	r5, 800db26 <__gethex+0x12a>
 800daea:	f1bb 0f00 	cmp.w	fp, #0
 800daee:	bf0c      	ite	eq
 800daf0:	2506      	moveq	r5, #6
 800daf2:	2500      	movne	r5, #0
 800daf4:	4628      	mov	r0, r5
 800daf6:	b005      	add	sp, #20
 800daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafc:	2500      	movs	r5, #0
 800dafe:	462c      	mov	r4, r5
 800db00:	e7b0      	b.n	800da64 <__gethex+0x68>
 800db02:	2c00      	cmp	r4, #0
 800db04:	d1c7      	bne.n	800da96 <__gethex+0x9a>
 800db06:	4627      	mov	r7, r4
 800db08:	e7c7      	b.n	800da9a <__gethex+0x9e>
 800db0a:	464e      	mov	r6, r9
 800db0c:	462f      	mov	r7, r5
 800db0e:	2501      	movs	r5, #1
 800db10:	e7c3      	b.n	800da9a <__gethex+0x9e>
 800db12:	2400      	movs	r4, #0
 800db14:	1cb1      	adds	r1, r6, #2
 800db16:	e7cc      	b.n	800dab2 <__gethex+0xb6>
 800db18:	2401      	movs	r4, #1
 800db1a:	e7fb      	b.n	800db14 <__gethex+0x118>
 800db1c:	fb03 0002 	mla	r0, r3, r2, r0
 800db20:	e7ce      	b.n	800dac0 <__gethex+0xc4>
 800db22:	4631      	mov	r1, r6
 800db24:	e7de      	b.n	800dae4 <__gethex+0xe8>
 800db26:	eba6 0309 	sub.w	r3, r6, r9
 800db2a:	3b01      	subs	r3, #1
 800db2c:	4629      	mov	r1, r5
 800db2e:	2b07      	cmp	r3, #7
 800db30:	dc0a      	bgt.n	800db48 <__gethex+0x14c>
 800db32:	9801      	ldr	r0, [sp, #4]
 800db34:	f000 fafc 	bl	800e130 <_Balloc>
 800db38:	4604      	mov	r4, r0
 800db3a:	b940      	cbnz	r0, 800db4e <__gethex+0x152>
 800db3c:	4b5c      	ldr	r3, [pc, #368]	@ (800dcb0 <__gethex+0x2b4>)
 800db3e:	4602      	mov	r2, r0
 800db40:	21e4      	movs	r1, #228	@ 0xe4
 800db42:	485c      	ldr	r0, [pc, #368]	@ (800dcb4 <__gethex+0x2b8>)
 800db44:	f7ff f83e 	bl	800cbc4 <__assert_func>
 800db48:	3101      	adds	r1, #1
 800db4a:	105b      	asrs	r3, r3, #1
 800db4c:	e7ef      	b.n	800db2e <__gethex+0x132>
 800db4e:	f100 0a14 	add.w	sl, r0, #20
 800db52:	2300      	movs	r3, #0
 800db54:	4655      	mov	r5, sl
 800db56:	469b      	mov	fp, r3
 800db58:	45b1      	cmp	r9, r6
 800db5a:	d337      	bcc.n	800dbcc <__gethex+0x1d0>
 800db5c:	f845 bb04 	str.w	fp, [r5], #4
 800db60:	eba5 050a 	sub.w	r5, r5, sl
 800db64:	10ad      	asrs	r5, r5, #2
 800db66:	6125      	str	r5, [r4, #16]
 800db68:	4658      	mov	r0, fp
 800db6a:	f000 fbd3 	bl	800e314 <__hi0bits>
 800db6e:	016d      	lsls	r5, r5, #5
 800db70:	f8d8 6000 	ldr.w	r6, [r8]
 800db74:	1a2d      	subs	r5, r5, r0
 800db76:	42b5      	cmp	r5, r6
 800db78:	dd54      	ble.n	800dc24 <__gethex+0x228>
 800db7a:	1bad      	subs	r5, r5, r6
 800db7c:	4629      	mov	r1, r5
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 ff67 	bl	800ea52 <__any_on>
 800db84:	4681      	mov	r9, r0
 800db86:	b178      	cbz	r0, 800dba8 <__gethex+0x1ac>
 800db88:	1e6b      	subs	r3, r5, #1
 800db8a:	1159      	asrs	r1, r3, #5
 800db8c:	f003 021f 	and.w	r2, r3, #31
 800db90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db94:	f04f 0901 	mov.w	r9, #1
 800db98:	fa09 f202 	lsl.w	r2, r9, r2
 800db9c:	420a      	tst	r2, r1
 800db9e:	d003      	beq.n	800dba8 <__gethex+0x1ac>
 800dba0:	454b      	cmp	r3, r9
 800dba2:	dc36      	bgt.n	800dc12 <__gethex+0x216>
 800dba4:	f04f 0902 	mov.w	r9, #2
 800dba8:	4629      	mov	r1, r5
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f7ff febe 	bl	800d92c <rshift>
 800dbb0:	442f      	add	r7, r5
 800dbb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbb6:	42bb      	cmp	r3, r7
 800dbb8:	da42      	bge.n	800dc40 <__gethex+0x244>
 800dbba:	9801      	ldr	r0, [sp, #4]
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	f000 faf7 	bl	800e1b0 <_Bfree>
 800dbc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	25a3      	movs	r5, #163	@ 0xa3
 800dbca:	e793      	b.n	800daf4 <__gethex+0xf8>
 800dbcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dbd0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dbd2:	d012      	beq.n	800dbfa <__gethex+0x1fe>
 800dbd4:	2b20      	cmp	r3, #32
 800dbd6:	d104      	bne.n	800dbe2 <__gethex+0x1e6>
 800dbd8:	f845 bb04 	str.w	fp, [r5], #4
 800dbdc:	f04f 0b00 	mov.w	fp, #0
 800dbe0:	465b      	mov	r3, fp
 800dbe2:	7830      	ldrb	r0, [r6, #0]
 800dbe4:	9303      	str	r3, [sp, #12]
 800dbe6:	f7ff fef3 	bl	800d9d0 <__hexdig_fun>
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	f000 000f 	and.w	r0, r0, #15
 800dbf0:	4098      	lsls	r0, r3
 800dbf2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	e7ae      	b.n	800db58 <__gethex+0x15c>
 800dbfa:	45b1      	cmp	r9, r6
 800dbfc:	d8ea      	bhi.n	800dbd4 <__gethex+0x1d8>
 800dbfe:	492b      	ldr	r1, [pc, #172]	@ (800dcac <__gethex+0x2b0>)
 800dc00:	9303      	str	r3, [sp, #12]
 800dc02:	2201      	movs	r2, #1
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7fe fed8 	bl	800c9ba <strncmp>
 800dc0a:	9b03      	ldr	r3, [sp, #12]
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d1e1      	bne.n	800dbd4 <__gethex+0x1d8>
 800dc10:	e7a2      	b.n	800db58 <__gethex+0x15c>
 800dc12:	1ea9      	subs	r1, r5, #2
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 ff1c 	bl	800ea52 <__any_on>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d0c2      	beq.n	800dba4 <__gethex+0x1a8>
 800dc1e:	f04f 0903 	mov.w	r9, #3
 800dc22:	e7c1      	b.n	800dba8 <__gethex+0x1ac>
 800dc24:	da09      	bge.n	800dc3a <__gethex+0x23e>
 800dc26:	1b75      	subs	r5, r6, r5
 800dc28:	4621      	mov	r1, r4
 800dc2a:	9801      	ldr	r0, [sp, #4]
 800dc2c:	462a      	mov	r2, r5
 800dc2e:	f000 fcd7 	bl	800e5e0 <__lshift>
 800dc32:	1b7f      	subs	r7, r7, r5
 800dc34:	4604      	mov	r4, r0
 800dc36:	f100 0a14 	add.w	sl, r0, #20
 800dc3a:	f04f 0900 	mov.w	r9, #0
 800dc3e:	e7b8      	b.n	800dbb2 <__gethex+0x1b6>
 800dc40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc44:	42bd      	cmp	r5, r7
 800dc46:	dd6f      	ble.n	800dd28 <__gethex+0x32c>
 800dc48:	1bed      	subs	r5, r5, r7
 800dc4a:	42ae      	cmp	r6, r5
 800dc4c:	dc34      	bgt.n	800dcb8 <__gethex+0x2bc>
 800dc4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d022      	beq.n	800dc9c <__gethex+0x2a0>
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d024      	beq.n	800dca4 <__gethex+0x2a8>
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d115      	bne.n	800dc8a <__gethex+0x28e>
 800dc5e:	42ae      	cmp	r6, r5
 800dc60:	d113      	bne.n	800dc8a <__gethex+0x28e>
 800dc62:	2e01      	cmp	r6, #1
 800dc64:	d10b      	bne.n	800dc7e <__gethex+0x282>
 800dc66:	9a02      	ldr	r2, [sp, #8]
 800dc68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc6c:	6013      	str	r3, [r2, #0]
 800dc6e:	2301      	movs	r3, #1
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	f8ca 3000 	str.w	r3, [sl]
 800dc76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc78:	2562      	movs	r5, #98	@ 0x62
 800dc7a:	601c      	str	r4, [r3, #0]
 800dc7c:	e73a      	b.n	800daf4 <__gethex+0xf8>
 800dc7e:	1e71      	subs	r1, r6, #1
 800dc80:	4620      	mov	r0, r4
 800dc82:	f000 fee6 	bl	800ea52 <__any_on>
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d1ed      	bne.n	800dc66 <__gethex+0x26a>
 800dc8a:	9801      	ldr	r0, [sp, #4]
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	f000 fa8f 	bl	800e1b0 <_Bfree>
 800dc92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc94:	2300      	movs	r3, #0
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	2550      	movs	r5, #80	@ 0x50
 800dc9a:	e72b      	b.n	800daf4 <__gethex+0xf8>
 800dc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1f3      	bne.n	800dc8a <__gethex+0x28e>
 800dca2:	e7e0      	b.n	800dc66 <__gethex+0x26a>
 800dca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d1dd      	bne.n	800dc66 <__gethex+0x26a>
 800dcaa:	e7ee      	b.n	800dc8a <__gethex+0x28e>
 800dcac:	08011210 	.word	0x08011210
 800dcb0:	080114bc 	.word	0x080114bc
 800dcb4:	080114cd 	.word	0x080114cd
 800dcb8:	1e6f      	subs	r7, r5, #1
 800dcba:	f1b9 0f00 	cmp.w	r9, #0
 800dcbe:	d130      	bne.n	800dd22 <__gethex+0x326>
 800dcc0:	b127      	cbz	r7, 800dccc <__gethex+0x2d0>
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	f000 fec4 	bl	800ea52 <__any_on>
 800dcca:	4681      	mov	r9, r0
 800dccc:	117a      	asrs	r2, r7, #5
 800dcce:	2301      	movs	r3, #1
 800dcd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dcd4:	f007 071f 	and.w	r7, r7, #31
 800dcd8:	40bb      	lsls	r3, r7
 800dcda:	4213      	tst	r3, r2
 800dcdc:	4629      	mov	r1, r5
 800dcde:	4620      	mov	r0, r4
 800dce0:	bf18      	it	ne
 800dce2:	f049 0902 	orrne.w	r9, r9, #2
 800dce6:	f7ff fe21 	bl	800d92c <rshift>
 800dcea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dcee:	1b76      	subs	r6, r6, r5
 800dcf0:	2502      	movs	r5, #2
 800dcf2:	f1b9 0f00 	cmp.w	r9, #0
 800dcf6:	d047      	beq.n	800dd88 <__gethex+0x38c>
 800dcf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcfc:	2b02      	cmp	r3, #2
 800dcfe:	d015      	beq.n	800dd2c <__gethex+0x330>
 800dd00:	2b03      	cmp	r3, #3
 800dd02:	d017      	beq.n	800dd34 <__gethex+0x338>
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d109      	bne.n	800dd1c <__gethex+0x320>
 800dd08:	f019 0f02 	tst.w	r9, #2
 800dd0c:	d006      	beq.n	800dd1c <__gethex+0x320>
 800dd0e:	f8da 3000 	ldr.w	r3, [sl]
 800dd12:	ea49 0903 	orr.w	r9, r9, r3
 800dd16:	f019 0f01 	tst.w	r9, #1
 800dd1a:	d10e      	bne.n	800dd3a <__gethex+0x33e>
 800dd1c:	f045 0510 	orr.w	r5, r5, #16
 800dd20:	e032      	b.n	800dd88 <__gethex+0x38c>
 800dd22:	f04f 0901 	mov.w	r9, #1
 800dd26:	e7d1      	b.n	800dccc <__gethex+0x2d0>
 800dd28:	2501      	movs	r5, #1
 800dd2a:	e7e2      	b.n	800dcf2 <__gethex+0x2f6>
 800dd2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd2e:	f1c3 0301 	rsb	r3, r3, #1
 800dd32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0f0      	beq.n	800dd1c <__gethex+0x320>
 800dd3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd3e:	f104 0314 	add.w	r3, r4, #20
 800dd42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd4a:	f04f 0c00 	mov.w	ip, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd58:	d01b      	beq.n	800dd92 <__gethex+0x396>
 800dd5a:	3201      	adds	r2, #1
 800dd5c:	6002      	str	r2, [r0, #0]
 800dd5e:	2d02      	cmp	r5, #2
 800dd60:	f104 0314 	add.w	r3, r4, #20
 800dd64:	d13c      	bne.n	800dde0 <__gethex+0x3e4>
 800dd66:	f8d8 2000 	ldr.w	r2, [r8]
 800dd6a:	3a01      	subs	r2, #1
 800dd6c:	42b2      	cmp	r2, r6
 800dd6e:	d109      	bne.n	800dd84 <__gethex+0x388>
 800dd70:	1171      	asrs	r1, r6, #5
 800dd72:	2201      	movs	r2, #1
 800dd74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd78:	f006 061f 	and.w	r6, r6, #31
 800dd7c:	fa02 f606 	lsl.w	r6, r2, r6
 800dd80:	421e      	tst	r6, r3
 800dd82:	d13a      	bne.n	800ddfa <__gethex+0x3fe>
 800dd84:	f045 0520 	orr.w	r5, r5, #32
 800dd88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd8a:	601c      	str	r4, [r3, #0]
 800dd8c:	9b02      	ldr	r3, [sp, #8]
 800dd8e:	601f      	str	r7, [r3, #0]
 800dd90:	e6b0      	b.n	800daf4 <__gethex+0xf8>
 800dd92:	4299      	cmp	r1, r3
 800dd94:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd98:	d8d9      	bhi.n	800dd4e <__gethex+0x352>
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	459b      	cmp	fp, r3
 800dd9e:	db17      	blt.n	800ddd0 <__gethex+0x3d4>
 800dda0:	6861      	ldr	r1, [r4, #4]
 800dda2:	9801      	ldr	r0, [sp, #4]
 800dda4:	3101      	adds	r1, #1
 800dda6:	f000 f9c3 	bl	800e130 <_Balloc>
 800ddaa:	4681      	mov	r9, r0
 800ddac:	b918      	cbnz	r0, 800ddb6 <__gethex+0x3ba>
 800ddae:	4b1a      	ldr	r3, [pc, #104]	@ (800de18 <__gethex+0x41c>)
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	2184      	movs	r1, #132	@ 0x84
 800ddb4:	e6c5      	b.n	800db42 <__gethex+0x146>
 800ddb6:	6922      	ldr	r2, [r4, #16]
 800ddb8:	3202      	adds	r2, #2
 800ddba:	f104 010c 	add.w	r1, r4, #12
 800ddbe:	0092      	lsls	r2, r2, #2
 800ddc0:	300c      	adds	r0, #12
 800ddc2:	f7fe fee0 	bl	800cb86 <memcpy>
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	9801      	ldr	r0, [sp, #4]
 800ddca:	f000 f9f1 	bl	800e1b0 <_Bfree>
 800ddce:	464c      	mov	r4, r9
 800ddd0:	6923      	ldr	r3, [r4, #16]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ddd8:	6122      	str	r2, [r4, #16]
 800ddda:	2201      	movs	r2, #1
 800dddc:	615a      	str	r2, [r3, #20]
 800ddde:	e7be      	b.n	800dd5e <__gethex+0x362>
 800dde0:	6922      	ldr	r2, [r4, #16]
 800dde2:	455a      	cmp	r2, fp
 800dde4:	dd0b      	ble.n	800ddfe <__gethex+0x402>
 800dde6:	2101      	movs	r1, #1
 800dde8:	4620      	mov	r0, r4
 800ddea:	f7ff fd9f 	bl	800d92c <rshift>
 800ddee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddf2:	3701      	adds	r7, #1
 800ddf4:	42bb      	cmp	r3, r7
 800ddf6:	f6ff aee0 	blt.w	800dbba <__gethex+0x1be>
 800ddfa:	2501      	movs	r5, #1
 800ddfc:	e7c2      	b.n	800dd84 <__gethex+0x388>
 800ddfe:	f016 061f 	ands.w	r6, r6, #31
 800de02:	d0fa      	beq.n	800ddfa <__gethex+0x3fe>
 800de04:	4453      	add	r3, sl
 800de06:	f1c6 0620 	rsb	r6, r6, #32
 800de0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800de0e:	f000 fa81 	bl	800e314 <__hi0bits>
 800de12:	42b0      	cmp	r0, r6
 800de14:	dbe7      	blt.n	800dde6 <__gethex+0x3ea>
 800de16:	e7f0      	b.n	800ddfa <__gethex+0x3fe>
 800de18:	080114bc 	.word	0x080114bc

0800de1c <L_shift>:
 800de1c:	f1c2 0208 	rsb	r2, r2, #8
 800de20:	0092      	lsls	r2, r2, #2
 800de22:	b570      	push	{r4, r5, r6, lr}
 800de24:	f1c2 0620 	rsb	r6, r2, #32
 800de28:	6843      	ldr	r3, [r0, #4]
 800de2a:	6804      	ldr	r4, [r0, #0]
 800de2c:	fa03 f506 	lsl.w	r5, r3, r6
 800de30:	432c      	orrs	r4, r5
 800de32:	40d3      	lsrs	r3, r2
 800de34:	6004      	str	r4, [r0, #0]
 800de36:	f840 3f04 	str.w	r3, [r0, #4]!
 800de3a:	4288      	cmp	r0, r1
 800de3c:	d3f4      	bcc.n	800de28 <L_shift+0xc>
 800de3e:	bd70      	pop	{r4, r5, r6, pc}

0800de40 <__match>:
 800de40:	b530      	push	{r4, r5, lr}
 800de42:	6803      	ldr	r3, [r0, #0]
 800de44:	3301      	adds	r3, #1
 800de46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de4a:	b914      	cbnz	r4, 800de52 <__match+0x12>
 800de4c:	6003      	str	r3, [r0, #0]
 800de4e:	2001      	movs	r0, #1
 800de50:	bd30      	pop	{r4, r5, pc}
 800de52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800de5a:	2d19      	cmp	r5, #25
 800de5c:	bf98      	it	ls
 800de5e:	3220      	addls	r2, #32
 800de60:	42a2      	cmp	r2, r4
 800de62:	d0f0      	beq.n	800de46 <__match+0x6>
 800de64:	2000      	movs	r0, #0
 800de66:	e7f3      	b.n	800de50 <__match+0x10>

0800de68 <__hexnan>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	680b      	ldr	r3, [r1, #0]
 800de6e:	6801      	ldr	r1, [r0, #0]
 800de70:	115e      	asrs	r6, r3, #5
 800de72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de76:	f013 031f 	ands.w	r3, r3, #31
 800de7a:	b087      	sub	sp, #28
 800de7c:	bf18      	it	ne
 800de7e:	3604      	addne	r6, #4
 800de80:	2500      	movs	r5, #0
 800de82:	1f37      	subs	r7, r6, #4
 800de84:	4682      	mov	sl, r0
 800de86:	4690      	mov	r8, r2
 800de88:	9301      	str	r3, [sp, #4]
 800de8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800de8e:	46b9      	mov	r9, r7
 800de90:	463c      	mov	r4, r7
 800de92:	9502      	str	r5, [sp, #8]
 800de94:	46ab      	mov	fp, r5
 800de96:	784a      	ldrb	r2, [r1, #1]
 800de98:	1c4b      	adds	r3, r1, #1
 800de9a:	9303      	str	r3, [sp, #12]
 800de9c:	b342      	cbz	r2, 800def0 <__hexnan+0x88>
 800de9e:	4610      	mov	r0, r2
 800dea0:	9105      	str	r1, [sp, #20]
 800dea2:	9204      	str	r2, [sp, #16]
 800dea4:	f7ff fd94 	bl	800d9d0 <__hexdig_fun>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d151      	bne.n	800df50 <__hexnan+0xe8>
 800deac:	9a04      	ldr	r2, [sp, #16]
 800deae:	9905      	ldr	r1, [sp, #20]
 800deb0:	2a20      	cmp	r2, #32
 800deb2:	d818      	bhi.n	800dee6 <__hexnan+0x7e>
 800deb4:	9b02      	ldr	r3, [sp, #8]
 800deb6:	459b      	cmp	fp, r3
 800deb8:	dd13      	ble.n	800dee2 <__hexnan+0x7a>
 800deba:	454c      	cmp	r4, r9
 800debc:	d206      	bcs.n	800decc <__hexnan+0x64>
 800debe:	2d07      	cmp	r5, #7
 800dec0:	dc04      	bgt.n	800decc <__hexnan+0x64>
 800dec2:	462a      	mov	r2, r5
 800dec4:	4649      	mov	r1, r9
 800dec6:	4620      	mov	r0, r4
 800dec8:	f7ff ffa8 	bl	800de1c <L_shift>
 800decc:	4544      	cmp	r4, r8
 800dece:	d952      	bls.n	800df76 <__hexnan+0x10e>
 800ded0:	2300      	movs	r3, #0
 800ded2:	f1a4 0904 	sub.w	r9, r4, #4
 800ded6:	f844 3c04 	str.w	r3, [r4, #-4]
 800deda:	f8cd b008 	str.w	fp, [sp, #8]
 800dede:	464c      	mov	r4, r9
 800dee0:	461d      	mov	r5, r3
 800dee2:	9903      	ldr	r1, [sp, #12]
 800dee4:	e7d7      	b.n	800de96 <__hexnan+0x2e>
 800dee6:	2a29      	cmp	r2, #41	@ 0x29
 800dee8:	d157      	bne.n	800df9a <__hexnan+0x132>
 800deea:	3102      	adds	r1, #2
 800deec:	f8ca 1000 	str.w	r1, [sl]
 800def0:	f1bb 0f00 	cmp.w	fp, #0
 800def4:	d051      	beq.n	800df9a <__hexnan+0x132>
 800def6:	454c      	cmp	r4, r9
 800def8:	d206      	bcs.n	800df08 <__hexnan+0xa0>
 800defa:	2d07      	cmp	r5, #7
 800defc:	dc04      	bgt.n	800df08 <__hexnan+0xa0>
 800defe:	462a      	mov	r2, r5
 800df00:	4649      	mov	r1, r9
 800df02:	4620      	mov	r0, r4
 800df04:	f7ff ff8a 	bl	800de1c <L_shift>
 800df08:	4544      	cmp	r4, r8
 800df0a:	d936      	bls.n	800df7a <__hexnan+0x112>
 800df0c:	f1a8 0204 	sub.w	r2, r8, #4
 800df10:	4623      	mov	r3, r4
 800df12:	f853 1b04 	ldr.w	r1, [r3], #4
 800df16:	f842 1f04 	str.w	r1, [r2, #4]!
 800df1a:	429f      	cmp	r7, r3
 800df1c:	d2f9      	bcs.n	800df12 <__hexnan+0xaa>
 800df1e:	1b3b      	subs	r3, r7, r4
 800df20:	f023 0303 	bic.w	r3, r3, #3
 800df24:	3304      	adds	r3, #4
 800df26:	3401      	adds	r4, #1
 800df28:	3e03      	subs	r6, #3
 800df2a:	42b4      	cmp	r4, r6
 800df2c:	bf88      	it	hi
 800df2e:	2304      	movhi	r3, #4
 800df30:	4443      	add	r3, r8
 800df32:	2200      	movs	r2, #0
 800df34:	f843 2b04 	str.w	r2, [r3], #4
 800df38:	429f      	cmp	r7, r3
 800df3a:	d2fb      	bcs.n	800df34 <__hexnan+0xcc>
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	b91b      	cbnz	r3, 800df48 <__hexnan+0xe0>
 800df40:	4547      	cmp	r7, r8
 800df42:	d128      	bne.n	800df96 <__hexnan+0x12e>
 800df44:	2301      	movs	r3, #1
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	2005      	movs	r0, #5
 800df4a:	b007      	add	sp, #28
 800df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df50:	3501      	adds	r5, #1
 800df52:	2d08      	cmp	r5, #8
 800df54:	f10b 0b01 	add.w	fp, fp, #1
 800df58:	dd06      	ble.n	800df68 <__hexnan+0x100>
 800df5a:	4544      	cmp	r4, r8
 800df5c:	d9c1      	bls.n	800dee2 <__hexnan+0x7a>
 800df5e:	2300      	movs	r3, #0
 800df60:	f844 3c04 	str.w	r3, [r4, #-4]
 800df64:	2501      	movs	r5, #1
 800df66:	3c04      	subs	r4, #4
 800df68:	6822      	ldr	r2, [r4, #0]
 800df6a:	f000 000f 	and.w	r0, r0, #15
 800df6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df72:	6020      	str	r0, [r4, #0]
 800df74:	e7b5      	b.n	800dee2 <__hexnan+0x7a>
 800df76:	2508      	movs	r5, #8
 800df78:	e7b3      	b.n	800dee2 <__hexnan+0x7a>
 800df7a:	9b01      	ldr	r3, [sp, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d0dd      	beq.n	800df3c <__hexnan+0xd4>
 800df80:	f1c3 0320 	rsb	r3, r3, #32
 800df84:	f04f 32ff 	mov.w	r2, #4294967295
 800df88:	40da      	lsrs	r2, r3
 800df8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800df8e:	4013      	ands	r3, r2
 800df90:	f846 3c04 	str.w	r3, [r6, #-4]
 800df94:	e7d2      	b.n	800df3c <__hexnan+0xd4>
 800df96:	3f04      	subs	r7, #4
 800df98:	e7d0      	b.n	800df3c <__hexnan+0xd4>
 800df9a:	2004      	movs	r0, #4
 800df9c:	e7d5      	b.n	800df4a <__hexnan+0xe2>
	...

0800dfa0 <malloc>:
 800dfa0:	4b02      	ldr	r3, [pc, #8]	@ (800dfac <malloc+0xc>)
 800dfa2:	4601      	mov	r1, r0
 800dfa4:	6818      	ldr	r0, [r3, #0]
 800dfa6:	f000 b825 	b.w	800dff4 <_malloc_r>
 800dfaa:	bf00      	nop
 800dfac:	20000264 	.word	0x20000264

0800dfb0 <sbrk_aligned>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	4e0f      	ldr	r6, [pc, #60]	@ (800dff0 <sbrk_aligned+0x40>)
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	6831      	ldr	r1, [r6, #0]
 800dfb8:	4605      	mov	r5, r0
 800dfba:	b911      	cbnz	r1, 800dfc2 <sbrk_aligned+0x12>
 800dfbc:	f000 ffa6 	bl	800ef0c <_sbrk_r>
 800dfc0:	6030      	str	r0, [r6, #0]
 800dfc2:	4621      	mov	r1, r4
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	f000 ffa1 	bl	800ef0c <_sbrk_r>
 800dfca:	1c43      	adds	r3, r0, #1
 800dfcc:	d103      	bne.n	800dfd6 <sbrk_aligned+0x26>
 800dfce:	f04f 34ff 	mov.w	r4, #4294967295
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	bd70      	pop	{r4, r5, r6, pc}
 800dfd6:	1cc4      	adds	r4, r0, #3
 800dfd8:	f024 0403 	bic.w	r4, r4, #3
 800dfdc:	42a0      	cmp	r0, r4
 800dfde:	d0f8      	beq.n	800dfd2 <sbrk_aligned+0x22>
 800dfe0:	1a21      	subs	r1, r4, r0
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f000 ff92 	bl	800ef0c <_sbrk_r>
 800dfe8:	3001      	adds	r0, #1
 800dfea:	d1f2      	bne.n	800dfd2 <sbrk_aligned+0x22>
 800dfec:	e7ef      	b.n	800dfce <sbrk_aligned+0x1e>
 800dfee:	bf00      	nop
 800dff0:	20000778 	.word	0x20000778

0800dff4 <_malloc_r>:
 800dff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dff8:	1ccd      	adds	r5, r1, #3
 800dffa:	f025 0503 	bic.w	r5, r5, #3
 800dffe:	3508      	adds	r5, #8
 800e000:	2d0c      	cmp	r5, #12
 800e002:	bf38      	it	cc
 800e004:	250c      	movcc	r5, #12
 800e006:	2d00      	cmp	r5, #0
 800e008:	4606      	mov	r6, r0
 800e00a:	db01      	blt.n	800e010 <_malloc_r+0x1c>
 800e00c:	42a9      	cmp	r1, r5
 800e00e:	d904      	bls.n	800e01a <_malloc_r+0x26>
 800e010:	230c      	movs	r3, #12
 800e012:	6033      	str	r3, [r6, #0]
 800e014:	2000      	movs	r0, #0
 800e016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e01a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0f0 <_malloc_r+0xfc>
 800e01e:	f000 f87b 	bl	800e118 <__malloc_lock>
 800e022:	f8d8 3000 	ldr.w	r3, [r8]
 800e026:	461c      	mov	r4, r3
 800e028:	bb44      	cbnz	r4, 800e07c <_malloc_r+0x88>
 800e02a:	4629      	mov	r1, r5
 800e02c:	4630      	mov	r0, r6
 800e02e:	f7ff ffbf 	bl	800dfb0 <sbrk_aligned>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	4604      	mov	r4, r0
 800e036:	d158      	bne.n	800e0ea <_malloc_r+0xf6>
 800e038:	f8d8 4000 	ldr.w	r4, [r8]
 800e03c:	4627      	mov	r7, r4
 800e03e:	2f00      	cmp	r7, #0
 800e040:	d143      	bne.n	800e0ca <_malloc_r+0xd6>
 800e042:	2c00      	cmp	r4, #0
 800e044:	d04b      	beq.n	800e0de <_malloc_r+0xea>
 800e046:	6823      	ldr	r3, [r4, #0]
 800e048:	4639      	mov	r1, r7
 800e04a:	4630      	mov	r0, r6
 800e04c:	eb04 0903 	add.w	r9, r4, r3
 800e050:	f000 ff5c 	bl	800ef0c <_sbrk_r>
 800e054:	4581      	cmp	r9, r0
 800e056:	d142      	bne.n	800e0de <_malloc_r+0xea>
 800e058:	6821      	ldr	r1, [r4, #0]
 800e05a:	1a6d      	subs	r5, r5, r1
 800e05c:	4629      	mov	r1, r5
 800e05e:	4630      	mov	r0, r6
 800e060:	f7ff ffa6 	bl	800dfb0 <sbrk_aligned>
 800e064:	3001      	adds	r0, #1
 800e066:	d03a      	beq.n	800e0de <_malloc_r+0xea>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	442b      	add	r3, r5
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	f8d8 3000 	ldr.w	r3, [r8]
 800e072:	685a      	ldr	r2, [r3, #4]
 800e074:	bb62      	cbnz	r2, 800e0d0 <_malloc_r+0xdc>
 800e076:	f8c8 7000 	str.w	r7, [r8]
 800e07a:	e00f      	b.n	800e09c <_malloc_r+0xa8>
 800e07c:	6822      	ldr	r2, [r4, #0]
 800e07e:	1b52      	subs	r2, r2, r5
 800e080:	d420      	bmi.n	800e0c4 <_malloc_r+0xd0>
 800e082:	2a0b      	cmp	r2, #11
 800e084:	d917      	bls.n	800e0b6 <_malloc_r+0xc2>
 800e086:	1961      	adds	r1, r4, r5
 800e088:	42a3      	cmp	r3, r4
 800e08a:	6025      	str	r5, [r4, #0]
 800e08c:	bf18      	it	ne
 800e08e:	6059      	strne	r1, [r3, #4]
 800e090:	6863      	ldr	r3, [r4, #4]
 800e092:	bf08      	it	eq
 800e094:	f8c8 1000 	streq.w	r1, [r8]
 800e098:	5162      	str	r2, [r4, r5]
 800e09a:	604b      	str	r3, [r1, #4]
 800e09c:	4630      	mov	r0, r6
 800e09e:	f000 f841 	bl	800e124 <__malloc_unlock>
 800e0a2:	f104 000b 	add.w	r0, r4, #11
 800e0a6:	1d23      	adds	r3, r4, #4
 800e0a8:	f020 0007 	bic.w	r0, r0, #7
 800e0ac:	1ac2      	subs	r2, r0, r3
 800e0ae:	bf1c      	itt	ne
 800e0b0:	1a1b      	subne	r3, r3, r0
 800e0b2:	50a3      	strne	r3, [r4, r2]
 800e0b4:	e7af      	b.n	800e016 <_malloc_r+0x22>
 800e0b6:	6862      	ldr	r2, [r4, #4]
 800e0b8:	42a3      	cmp	r3, r4
 800e0ba:	bf0c      	ite	eq
 800e0bc:	f8c8 2000 	streq.w	r2, [r8]
 800e0c0:	605a      	strne	r2, [r3, #4]
 800e0c2:	e7eb      	b.n	800e09c <_malloc_r+0xa8>
 800e0c4:	4623      	mov	r3, r4
 800e0c6:	6864      	ldr	r4, [r4, #4]
 800e0c8:	e7ae      	b.n	800e028 <_malloc_r+0x34>
 800e0ca:	463c      	mov	r4, r7
 800e0cc:	687f      	ldr	r7, [r7, #4]
 800e0ce:	e7b6      	b.n	800e03e <_malloc_r+0x4a>
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	42a3      	cmp	r3, r4
 800e0d6:	d1fb      	bne.n	800e0d0 <_malloc_r+0xdc>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	6053      	str	r3, [r2, #4]
 800e0dc:	e7de      	b.n	800e09c <_malloc_r+0xa8>
 800e0de:	230c      	movs	r3, #12
 800e0e0:	6033      	str	r3, [r6, #0]
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f000 f81e 	bl	800e124 <__malloc_unlock>
 800e0e8:	e794      	b.n	800e014 <_malloc_r+0x20>
 800e0ea:	6005      	str	r5, [r0, #0]
 800e0ec:	e7d6      	b.n	800e09c <_malloc_r+0xa8>
 800e0ee:	bf00      	nop
 800e0f0:	2000077c 	.word	0x2000077c

0800e0f4 <__ascii_mbtowc>:
 800e0f4:	b082      	sub	sp, #8
 800e0f6:	b901      	cbnz	r1, 800e0fa <__ascii_mbtowc+0x6>
 800e0f8:	a901      	add	r1, sp, #4
 800e0fa:	b142      	cbz	r2, 800e10e <__ascii_mbtowc+0x1a>
 800e0fc:	b14b      	cbz	r3, 800e112 <__ascii_mbtowc+0x1e>
 800e0fe:	7813      	ldrb	r3, [r2, #0]
 800e100:	600b      	str	r3, [r1, #0]
 800e102:	7812      	ldrb	r2, [r2, #0]
 800e104:	1e10      	subs	r0, r2, #0
 800e106:	bf18      	it	ne
 800e108:	2001      	movne	r0, #1
 800e10a:	b002      	add	sp, #8
 800e10c:	4770      	bx	lr
 800e10e:	4610      	mov	r0, r2
 800e110:	e7fb      	b.n	800e10a <__ascii_mbtowc+0x16>
 800e112:	f06f 0001 	mvn.w	r0, #1
 800e116:	e7f8      	b.n	800e10a <__ascii_mbtowc+0x16>

0800e118 <__malloc_lock>:
 800e118:	4801      	ldr	r0, [pc, #4]	@ (800e120 <__malloc_lock+0x8>)
 800e11a:	f7fe bd32 	b.w	800cb82 <__retarget_lock_acquire_recursive>
 800e11e:	bf00      	nop
 800e120:	20000774 	.word	0x20000774

0800e124 <__malloc_unlock>:
 800e124:	4801      	ldr	r0, [pc, #4]	@ (800e12c <__malloc_unlock+0x8>)
 800e126:	f7fe bd2d 	b.w	800cb84 <__retarget_lock_release_recursive>
 800e12a:	bf00      	nop
 800e12c:	20000774 	.word	0x20000774

0800e130 <_Balloc>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	69c6      	ldr	r6, [r0, #28]
 800e134:	4604      	mov	r4, r0
 800e136:	460d      	mov	r5, r1
 800e138:	b976      	cbnz	r6, 800e158 <_Balloc+0x28>
 800e13a:	2010      	movs	r0, #16
 800e13c:	f7ff ff30 	bl	800dfa0 <malloc>
 800e140:	4602      	mov	r2, r0
 800e142:	61e0      	str	r0, [r4, #28]
 800e144:	b920      	cbnz	r0, 800e150 <_Balloc+0x20>
 800e146:	4b18      	ldr	r3, [pc, #96]	@ (800e1a8 <_Balloc+0x78>)
 800e148:	4818      	ldr	r0, [pc, #96]	@ (800e1ac <_Balloc+0x7c>)
 800e14a:	216b      	movs	r1, #107	@ 0x6b
 800e14c:	f7fe fd3a 	bl	800cbc4 <__assert_func>
 800e150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e154:	6006      	str	r6, [r0, #0]
 800e156:	60c6      	str	r6, [r0, #12]
 800e158:	69e6      	ldr	r6, [r4, #28]
 800e15a:	68f3      	ldr	r3, [r6, #12]
 800e15c:	b183      	cbz	r3, 800e180 <_Balloc+0x50>
 800e15e:	69e3      	ldr	r3, [r4, #28]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e166:	b9b8      	cbnz	r0, 800e198 <_Balloc+0x68>
 800e168:	2101      	movs	r1, #1
 800e16a:	fa01 f605 	lsl.w	r6, r1, r5
 800e16e:	1d72      	adds	r2, r6, #5
 800e170:	0092      	lsls	r2, r2, #2
 800e172:	4620      	mov	r0, r4
 800e174:	f000 fee1 	bl	800ef3a <_calloc_r>
 800e178:	b160      	cbz	r0, 800e194 <_Balloc+0x64>
 800e17a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e17e:	e00e      	b.n	800e19e <_Balloc+0x6e>
 800e180:	2221      	movs	r2, #33	@ 0x21
 800e182:	2104      	movs	r1, #4
 800e184:	4620      	mov	r0, r4
 800e186:	f000 fed8 	bl	800ef3a <_calloc_r>
 800e18a:	69e3      	ldr	r3, [r4, #28]
 800e18c:	60f0      	str	r0, [r6, #12]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1e4      	bne.n	800e15e <_Balloc+0x2e>
 800e194:	2000      	movs	r0, #0
 800e196:	bd70      	pop	{r4, r5, r6, pc}
 800e198:	6802      	ldr	r2, [r0, #0]
 800e19a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1a4:	e7f7      	b.n	800e196 <_Balloc+0x66>
 800e1a6:	bf00      	nop
 800e1a8:	080113a2 	.word	0x080113a2
 800e1ac:	0801152d 	.word	0x0801152d

0800e1b0 <_Bfree>:
 800e1b0:	b570      	push	{r4, r5, r6, lr}
 800e1b2:	69c6      	ldr	r6, [r0, #28]
 800e1b4:	4605      	mov	r5, r0
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	b976      	cbnz	r6, 800e1d8 <_Bfree+0x28>
 800e1ba:	2010      	movs	r0, #16
 800e1bc:	f7ff fef0 	bl	800dfa0 <malloc>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	61e8      	str	r0, [r5, #28]
 800e1c4:	b920      	cbnz	r0, 800e1d0 <_Bfree+0x20>
 800e1c6:	4b09      	ldr	r3, [pc, #36]	@ (800e1ec <_Bfree+0x3c>)
 800e1c8:	4809      	ldr	r0, [pc, #36]	@ (800e1f0 <_Bfree+0x40>)
 800e1ca:	218f      	movs	r1, #143	@ 0x8f
 800e1cc:	f7fe fcfa 	bl	800cbc4 <__assert_func>
 800e1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1d4:	6006      	str	r6, [r0, #0]
 800e1d6:	60c6      	str	r6, [r0, #12]
 800e1d8:	b13c      	cbz	r4, 800e1ea <_Bfree+0x3a>
 800e1da:	69eb      	ldr	r3, [r5, #28]
 800e1dc:	6862      	ldr	r2, [r4, #4]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1e4:	6021      	str	r1, [r4, #0]
 800e1e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	080113a2 	.word	0x080113a2
 800e1f0:	0801152d 	.word	0x0801152d

0800e1f4 <__multadd>:
 800e1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f8:	690d      	ldr	r5, [r1, #16]
 800e1fa:	4607      	mov	r7, r0
 800e1fc:	460c      	mov	r4, r1
 800e1fe:	461e      	mov	r6, r3
 800e200:	f101 0c14 	add.w	ip, r1, #20
 800e204:	2000      	movs	r0, #0
 800e206:	f8dc 3000 	ldr.w	r3, [ip]
 800e20a:	b299      	uxth	r1, r3
 800e20c:	fb02 6101 	mla	r1, r2, r1, r6
 800e210:	0c1e      	lsrs	r6, r3, #16
 800e212:	0c0b      	lsrs	r3, r1, #16
 800e214:	fb02 3306 	mla	r3, r2, r6, r3
 800e218:	b289      	uxth	r1, r1
 800e21a:	3001      	adds	r0, #1
 800e21c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e220:	4285      	cmp	r5, r0
 800e222:	f84c 1b04 	str.w	r1, [ip], #4
 800e226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e22a:	dcec      	bgt.n	800e206 <__multadd+0x12>
 800e22c:	b30e      	cbz	r6, 800e272 <__multadd+0x7e>
 800e22e:	68a3      	ldr	r3, [r4, #8]
 800e230:	42ab      	cmp	r3, r5
 800e232:	dc19      	bgt.n	800e268 <__multadd+0x74>
 800e234:	6861      	ldr	r1, [r4, #4]
 800e236:	4638      	mov	r0, r7
 800e238:	3101      	adds	r1, #1
 800e23a:	f7ff ff79 	bl	800e130 <_Balloc>
 800e23e:	4680      	mov	r8, r0
 800e240:	b928      	cbnz	r0, 800e24e <__multadd+0x5a>
 800e242:	4602      	mov	r2, r0
 800e244:	4b0c      	ldr	r3, [pc, #48]	@ (800e278 <__multadd+0x84>)
 800e246:	480d      	ldr	r0, [pc, #52]	@ (800e27c <__multadd+0x88>)
 800e248:	21ba      	movs	r1, #186	@ 0xba
 800e24a:	f7fe fcbb 	bl	800cbc4 <__assert_func>
 800e24e:	6922      	ldr	r2, [r4, #16]
 800e250:	3202      	adds	r2, #2
 800e252:	f104 010c 	add.w	r1, r4, #12
 800e256:	0092      	lsls	r2, r2, #2
 800e258:	300c      	adds	r0, #12
 800e25a:	f7fe fc94 	bl	800cb86 <memcpy>
 800e25e:	4621      	mov	r1, r4
 800e260:	4638      	mov	r0, r7
 800e262:	f7ff ffa5 	bl	800e1b0 <_Bfree>
 800e266:	4644      	mov	r4, r8
 800e268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e26c:	3501      	adds	r5, #1
 800e26e:	615e      	str	r6, [r3, #20]
 800e270:	6125      	str	r5, [r4, #16]
 800e272:	4620      	mov	r0, r4
 800e274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e278:	080114bc 	.word	0x080114bc
 800e27c:	0801152d 	.word	0x0801152d

0800e280 <__s2b>:
 800e280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e284:	460c      	mov	r4, r1
 800e286:	4615      	mov	r5, r2
 800e288:	461f      	mov	r7, r3
 800e28a:	2209      	movs	r2, #9
 800e28c:	3308      	adds	r3, #8
 800e28e:	4606      	mov	r6, r0
 800e290:	fb93 f3f2 	sdiv	r3, r3, r2
 800e294:	2100      	movs	r1, #0
 800e296:	2201      	movs	r2, #1
 800e298:	429a      	cmp	r2, r3
 800e29a:	db09      	blt.n	800e2b0 <__s2b+0x30>
 800e29c:	4630      	mov	r0, r6
 800e29e:	f7ff ff47 	bl	800e130 <_Balloc>
 800e2a2:	b940      	cbnz	r0, 800e2b6 <__s2b+0x36>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	4b19      	ldr	r3, [pc, #100]	@ (800e30c <__s2b+0x8c>)
 800e2a8:	4819      	ldr	r0, [pc, #100]	@ (800e310 <__s2b+0x90>)
 800e2aa:	21d3      	movs	r1, #211	@ 0xd3
 800e2ac:	f7fe fc8a 	bl	800cbc4 <__assert_func>
 800e2b0:	0052      	lsls	r2, r2, #1
 800e2b2:	3101      	adds	r1, #1
 800e2b4:	e7f0      	b.n	800e298 <__s2b+0x18>
 800e2b6:	9b08      	ldr	r3, [sp, #32]
 800e2b8:	6143      	str	r3, [r0, #20]
 800e2ba:	2d09      	cmp	r5, #9
 800e2bc:	f04f 0301 	mov.w	r3, #1
 800e2c0:	6103      	str	r3, [r0, #16]
 800e2c2:	dd16      	ble.n	800e2f2 <__s2b+0x72>
 800e2c4:	f104 0909 	add.w	r9, r4, #9
 800e2c8:	46c8      	mov	r8, r9
 800e2ca:	442c      	add	r4, r5
 800e2cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e2d0:	4601      	mov	r1, r0
 800e2d2:	3b30      	subs	r3, #48	@ 0x30
 800e2d4:	220a      	movs	r2, #10
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	f7ff ff8c 	bl	800e1f4 <__multadd>
 800e2dc:	45a0      	cmp	r8, r4
 800e2de:	d1f5      	bne.n	800e2cc <__s2b+0x4c>
 800e2e0:	f1a5 0408 	sub.w	r4, r5, #8
 800e2e4:	444c      	add	r4, r9
 800e2e6:	1b2d      	subs	r5, r5, r4
 800e2e8:	1963      	adds	r3, r4, r5
 800e2ea:	42bb      	cmp	r3, r7
 800e2ec:	db04      	blt.n	800e2f8 <__s2b+0x78>
 800e2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2f2:	340a      	adds	r4, #10
 800e2f4:	2509      	movs	r5, #9
 800e2f6:	e7f6      	b.n	800e2e6 <__s2b+0x66>
 800e2f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e2fc:	4601      	mov	r1, r0
 800e2fe:	3b30      	subs	r3, #48	@ 0x30
 800e300:	220a      	movs	r2, #10
 800e302:	4630      	mov	r0, r6
 800e304:	f7ff ff76 	bl	800e1f4 <__multadd>
 800e308:	e7ee      	b.n	800e2e8 <__s2b+0x68>
 800e30a:	bf00      	nop
 800e30c:	080114bc 	.word	0x080114bc
 800e310:	0801152d 	.word	0x0801152d

0800e314 <__hi0bits>:
 800e314:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e318:	4603      	mov	r3, r0
 800e31a:	bf36      	itet	cc
 800e31c:	0403      	lslcc	r3, r0, #16
 800e31e:	2000      	movcs	r0, #0
 800e320:	2010      	movcc	r0, #16
 800e322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e326:	bf3c      	itt	cc
 800e328:	021b      	lslcc	r3, r3, #8
 800e32a:	3008      	addcc	r0, #8
 800e32c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e330:	bf3c      	itt	cc
 800e332:	011b      	lslcc	r3, r3, #4
 800e334:	3004      	addcc	r0, #4
 800e336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e33a:	bf3c      	itt	cc
 800e33c:	009b      	lslcc	r3, r3, #2
 800e33e:	3002      	addcc	r0, #2
 800e340:	2b00      	cmp	r3, #0
 800e342:	db05      	blt.n	800e350 <__hi0bits+0x3c>
 800e344:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e348:	f100 0001 	add.w	r0, r0, #1
 800e34c:	bf08      	it	eq
 800e34e:	2020      	moveq	r0, #32
 800e350:	4770      	bx	lr

0800e352 <__lo0bits>:
 800e352:	6803      	ldr	r3, [r0, #0]
 800e354:	4602      	mov	r2, r0
 800e356:	f013 0007 	ands.w	r0, r3, #7
 800e35a:	d00b      	beq.n	800e374 <__lo0bits+0x22>
 800e35c:	07d9      	lsls	r1, r3, #31
 800e35e:	d421      	bmi.n	800e3a4 <__lo0bits+0x52>
 800e360:	0798      	lsls	r0, r3, #30
 800e362:	bf49      	itett	mi
 800e364:	085b      	lsrmi	r3, r3, #1
 800e366:	089b      	lsrpl	r3, r3, #2
 800e368:	2001      	movmi	r0, #1
 800e36a:	6013      	strmi	r3, [r2, #0]
 800e36c:	bf5c      	itt	pl
 800e36e:	6013      	strpl	r3, [r2, #0]
 800e370:	2002      	movpl	r0, #2
 800e372:	4770      	bx	lr
 800e374:	b299      	uxth	r1, r3
 800e376:	b909      	cbnz	r1, 800e37c <__lo0bits+0x2a>
 800e378:	0c1b      	lsrs	r3, r3, #16
 800e37a:	2010      	movs	r0, #16
 800e37c:	b2d9      	uxtb	r1, r3
 800e37e:	b909      	cbnz	r1, 800e384 <__lo0bits+0x32>
 800e380:	3008      	adds	r0, #8
 800e382:	0a1b      	lsrs	r3, r3, #8
 800e384:	0719      	lsls	r1, r3, #28
 800e386:	bf04      	itt	eq
 800e388:	091b      	lsreq	r3, r3, #4
 800e38a:	3004      	addeq	r0, #4
 800e38c:	0799      	lsls	r1, r3, #30
 800e38e:	bf04      	itt	eq
 800e390:	089b      	lsreq	r3, r3, #2
 800e392:	3002      	addeq	r0, #2
 800e394:	07d9      	lsls	r1, r3, #31
 800e396:	d403      	bmi.n	800e3a0 <__lo0bits+0x4e>
 800e398:	085b      	lsrs	r3, r3, #1
 800e39a:	f100 0001 	add.w	r0, r0, #1
 800e39e:	d003      	beq.n	800e3a8 <__lo0bits+0x56>
 800e3a0:	6013      	str	r3, [r2, #0]
 800e3a2:	4770      	bx	lr
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	4770      	bx	lr
 800e3a8:	2020      	movs	r0, #32
 800e3aa:	4770      	bx	lr

0800e3ac <__i2b>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	2101      	movs	r1, #1
 800e3b2:	f7ff febd 	bl	800e130 <_Balloc>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	b928      	cbnz	r0, 800e3c6 <__i2b+0x1a>
 800e3ba:	4b05      	ldr	r3, [pc, #20]	@ (800e3d0 <__i2b+0x24>)
 800e3bc:	4805      	ldr	r0, [pc, #20]	@ (800e3d4 <__i2b+0x28>)
 800e3be:	f240 1145 	movw	r1, #325	@ 0x145
 800e3c2:	f7fe fbff 	bl	800cbc4 <__assert_func>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	6144      	str	r4, [r0, #20]
 800e3ca:	6103      	str	r3, [r0, #16]
 800e3cc:	bd10      	pop	{r4, pc}
 800e3ce:	bf00      	nop
 800e3d0:	080114bc 	.word	0x080114bc
 800e3d4:	0801152d 	.word	0x0801152d

0800e3d8 <__multiply>:
 800e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3dc:	4614      	mov	r4, r2
 800e3de:	690a      	ldr	r2, [r1, #16]
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	bfa8      	it	ge
 800e3e6:	4623      	movge	r3, r4
 800e3e8:	460f      	mov	r7, r1
 800e3ea:	bfa4      	itt	ge
 800e3ec:	460c      	movge	r4, r1
 800e3ee:	461f      	movge	r7, r3
 800e3f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e3f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e3f8:	68a3      	ldr	r3, [r4, #8]
 800e3fa:	6861      	ldr	r1, [r4, #4]
 800e3fc:	eb0a 0609 	add.w	r6, sl, r9
 800e400:	42b3      	cmp	r3, r6
 800e402:	b085      	sub	sp, #20
 800e404:	bfb8      	it	lt
 800e406:	3101      	addlt	r1, #1
 800e408:	f7ff fe92 	bl	800e130 <_Balloc>
 800e40c:	b930      	cbnz	r0, 800e41c <__multiply+0x44>
 800e40e:	4602      	mov	r2, r0
 800e410:	4b44      	ldr	r3, [pc, #272]	@ (800e524 <__multiply+0x14c>)
 800e412:	4845      	ldr	r0, [pc, #276]	@ (800e528 <__multiply+0x150>)
 800e414:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e418:	f7fe fbd4 	bl	800cbc4 <__assert_func>
 800e41c:	f100 0514 	add.w	r5, r0, #20
 800e420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e424:	462b      	mov	r3, r5
 800e426:	2200      	movs	r2, #0
 800e428:	4543      	cmp	r3, r8
 800e42a:	d321      	bcc.n	800e470 <__multiply+0x98>
 800e42c:	f107 0114 	add.w	r1, r7, #20
 800e430:	f104 0214 	add.w	r2, r4, #20
 800e434:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e438:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e43c:	9302      	str	r3, [sp, #8]
 800e43e:	1b13      	subs	r3, r2, r4
 800e440:	3b15      	subs	r3, #21
 800e442:	f023 0303 	bic.w	r3, r3, #3
 800e446:	3304      	adds	r3, #4
 800e448:	f104 0715 	add.w	r7, r4, #21
 800e44c:	42ba      	cmp	r2, r7
 800e44e:	bf38      	it	cc
 800e450:	2304      	movcc	r3, #4
 800e452:	9301      	str	r3, [sp, #4]
 800e454:	9b02      	ldr	r3, [sp, #8]
 800e456:	9103      	str	r1, [sp, #12]
 800e458:	428b      	cmp	r3, r1
 800e45a:	d80c      	bhi.n	800e476 <__multiply+0x9e>
 800e45c:	2e00      	cmp	r6, #0
 800e45e:	dd03      	ble.n	800e468 <__multiply+0x90>
 800e460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e464:	2b00      	cmp	r3, #0
 800e466:	d05b      	beq.n	800e520 <__multiply+0x148>
 800e468:	6106      	str	r6, [r0, #16]
 800e46a:	b005      	add	sp, #20
 800e46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e470:	f843 2b04 	str.w	r2, [r3], #4
 800e474:	e7d8      	b.n	800e428 <__multiply+0x50>
 800e476:	f8b1 a000 	ldrh.w	sl, [r1]
 800e47a:	f1ba 0f00 	cmp.w	sl, #0
 800e47e:	d024      	beq.n	800e4ca <__multiply+0xf2>
 800e480:	f104 0e14 	add.w	lr, r4, #20
 800e484:	46a9      	mov	r9, r5
 800e486:	f04f 0c00 	mov.w	ip, #0
 800e48a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e48e:	f8d9 3000 	ldr.w	r3, [r9]
 800e492:	fa1f fb87 	uxth.w	fp, r7
 800e496:	b29b      	uxth	r3, r3
 800e498:	fb0a 330b 	mla	r3, sl, fp, r3
 800e49c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e4a0:	f8d9 7000 	ldr.w	r7, [r9]
 800e4a4:	4463      	add	r3, ip
 800e4a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800e4ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4b8:	4572      	cmp	r2, lr
 800e4ba:	f849 3b04 	str.w	r3, [r9], #4
 800e4be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4c2:	d8e2      	bhi.n	800e48a <__multiply+0xb2>
 800e4c4:	9b01      	ldr	r3, [sp, #4]
 800e4c6:	f845 c003 	str.w	ip, [r5, r3]
 800e4ca:	9b03      	ldr	r3, [sp, #12]
 800e4cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e4d0:	3104      	adds	r1, #4
 800e4d2:	f1b9 0f00 	cmp.w	r9, #0
 800e4d6:	d021      	beq.n	800e51c <__multiply+0x144>
 800e4d8:	682b      	ldr	r3, [r5, #0]
 800e4da:	f104 0c14 	add.w	ip, r4, #20
 800e4de:	46ae      	mov	lr, r5
 800e4e0:	f04f 0a00 	mov.w	sl, #0
 800e4e4:	f8bc b000 	ldrh.w	fp, [ip]
 800e4e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e4ec:	fb09 770b 	mla	r7, r9, fp, r7
 800e4f0:	4457      	add	r7, sl
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4f8:	f84e 3b04 	str.w	r3, [lr], #4
 800e4fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e504:	f8be 3000 	ldrh.w	r3, [lr]
 800e508:	fb09 330a 	mla	r3, r9, sl, r3
 800e50c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e510:	4562      	cmp	r2, ip
 800e512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e516:	d8e5      	bhi.n	800e4e4 <__multiply+0x10c>
 800e518:	9f01      	ldr	r7, [sp, #4]
 800e51a:	51eb      	str	r3, [r5, r7]
 800e51c:	3504      	adds	r5, #4
 800e51e:	e799      	b.n	800e454 <__multiply+0x7c>
 800e520:	3e01      	subs	r6, #1
 800e522:	e79b      	b.n	800e45c <__multiply+0x84>
 800e524:	080114bc 	.word	0x080114bc
 800e528:	0801152d 	.word	0x0801152d

0800e52c <__pow5mult>:
 800e52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e530:	4615      	mov	r5, r2
 800e532:	f012 0203 	ands.w	r2, r2, #3
 800e536:	4607      	mov	r7, r0
 800e538:	460e      	mov	r6, r1
 800e53a:	d007      	beq.n	800e54c <__pow5mult+0x20>
 800e53c:	4c25      	ldr	r4, [pc, #148]	@ (800e5d4 <__pow5mult+0xa8>)
 800e53e:	3a01      	subs	r2, #1
 800e540:	2300      	movs	r3, #0
 800e542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e546:	f7ff fe55 	bl	800e1f4 <__multadd>
 800e54a:	4606      	mov	r6, r0
 800e54c:	10ad      	asrs	r5, r5, #2
 800e54e:	d03d      	beq.n	800e5cc <__pow5mult+0xa0>
 800e550:	69fc      	ldr	r4, [r7, #28]
 800e552:	b97c      	cbnz	r4, 800e574 <__pow5mult+0x48>
 800e554:	2010      	movs	r0, #16
 800e556:	f7ff fd23 	bl	800dfa0 <malloc>
 800e55a:	4602      	mov	r2, r0
 800e55c:	61f8      	str	r0, [r7, #28]
 800e55e:	b928      	cbnz	r0, 800e56c <__pow5mult+0x40>
 800e560:	4b1d      	ldr	r3, [pc, #116]	@ (800e5d8 <__pow5mult+0xac>)
 800e562:	481e      	ldr	r0, [pc, #120]	@ (800e5dc <__pow5mult+0xb0>)
 800e564:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e568:	f7fe fb2c 	bl	800cbc4 <__assert_func>
 800e56c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e570:	6004      	str	r4, [r0, #0]
 800e572:	60c4      	str	r4, [r0, #12]
 800e574:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e57c:	b94c      	cbnz	r4, 800e592 <__pow5mult+0x66>
 800e57e:	f240 2171 	movw	r1, #625	@ 0x271
 800e582:	4638      	mov	r0, r7
 800e584:	f7ff ff12 	bl	800e3ac <__i2b>
 800e588:	2300      	movs	r3, #0
 800e58a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e58e:	4604      	mov	r4, r0
 800e590:	6003      	str	r3, [r0, #0]
 800e592:	f04f 0900 	mov.w	r9, #0
 800e596:	07eb      	lsls	r3, r5, #31
 800e598:	d50a      	bpl.n	800e5b0 <__pow5mult+0x84>
 800e59a:	4631      	mov	r1, r6
 800e59c:	4622      	mov	r2, r4
 800e59e:	4638      	mov	r0, r7
 800e5a0:	f7ff ff1a 	bl	800e3d8 <__multiply>
 800e5a4:	4631      	mov	r1, r6
 800e5a6:	4680      	mov	r8, r0
 800e5a8:	4638      	mov	r0, r7
 800e5aa:	f7ff fe01 	bl	800e1b0 <_Bfree>
 800e5ae:	4646      	mov	r6, r8
 800e5b0:	106d      	asrs	r5, r5, #1
 800e5b2:	d00b      	beq.n	800e5cc <__pow5mult+0xa0>
 800e5b4:	6820      	ldr	r0, [r4, #0]
 800e5b6:	b938      	cbnz	r0, 800e5c8 <__pow5mult+0x9c>
 800e5b8:	4622      	mov	r2, r4
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	4638      	mov	r0, r7
 800e5be:	f7ff ff0b 	bl	800e3d8 <__multiply>
 800e5c2:	6020      	str	r0, [r4, #0]
 800e5c4:	f8c0 9000 	str.w	r9, [r0]
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	e7e4      	b.n	800e596 <__pow5mult+0x6a>
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d2:	bf00      	nop
 800e5d4:	08011588 	.word	0x08011588
 800e5d8:	080113a2 	.word	0x080113a2
 800e5dc:	0801152d 	.word	0x0801152d

0800e5e0 <__lshift>:
 800e5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e4:	460c      	mov	r4, r1
 800e5e6:	6849      	ldr	r1, [r1, #4]
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5ee:	68a3      	ldr	r3, [r4, #8]
 800e5f0:	4607      	mov	r7, r0
 800e5f2:	4691      	mov	r9, r2
 800e5f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5f8:	f108 0601 	add.w	r6, r8, #1
 800e5fc:	42b3      	cmp	r3, r6
 800e5fe:	db0b      	blt.n	800e618 <__lshift+0x38>
 800e600:	4638      	mov	r0, r7
 800e602:	f7ff fd95 	bl	800e130 <_Balloc>
 800e606:	4605      	mov	r5, r0
 800e608:	b948      	cbnz	r0, 800e61e <__lshift+0x3e>
 800e60a:	4602      	mov	r2, r0
 800e60c:	4b28      	ldr	r3, [pc, #160]	@ (800e6b0 <__lshift+0xd0>)
 800e60e:	4829      	ldr	r0, [pc, #164]	@ (800e6b4 <__lshift+0xd4>)
 800e610:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e614:	f7fe fad6 	bl	800cbc4 <__assert_func>
 800e618:	3101      	adds	r1, #1
 800e61a:	005b      	lsls	r3, r3, #1
 800e61c:	e7ee      	b.n	800e5fc <__lshift+0x1c>
 800e61e:	2300      	movs	r3, #0
 800e620:	f100 0114 	add.w	r1, r0, #20
 800e624:	f100 0210 	add.w	r2, r0, #16
 800e628:	4618      	mov	r0, r3
 800e62a:	4553      	cmp	r3, sl
 800e62c:	db33      	blt.n	800e696 <__lshift+0xb6>
 800e62e:	6920      	ldr	r0, [r4, #16]
 800e630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e634:	f104 0314 	add.w	r3, r4, #20
 800e638:	f019 091f 	ands.w	r9, r9, #31
 800e63c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e644:	d02b      	beq.n	800e69e <__lshift+0xbe>
 800e646:	f1c9 0e20 	rsb	lr, r9, #32
 800e64a:	468a      	mov	sl, r1
 800e64c:	2200      	movs	r2, #0
 800e64e:	6818      	ldr	r0, [r3, #0]
 800e650:	fa00 f009 	lsl.w	r0, r0, r9
 800e654:	4310      	orrs	r0, r2
 800e656:	f84a 0b04 	str.w	r0, [sl], #4
 800e65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e65e:	459c      	cmp	ip, r3
 800e660:	fa22 f20e 	lsr.w	r2, r2, lr
 800e664:	d8f3      	bhi.n	800e64e <__lshift+0x6e>
 800e666:	ebac 0304 	sub.w	r3, ip, r4
 800e66a:	3b15      	subs	r3, #21
 800e66c:	f023 0303 	bic.w	r3, r3, #3
 800e670:	3304      	adds	r3, #4
 800e672:	f104 0015 	add.w	r0, r4, #21
 800e676:	4584      	cmp	ip, r0
 800e678:	bf38      	it	cc
 800e67a:	2304      	movcc	r3, #4
 800e67c:	50ca      	str	r2, [r1, r3]
 800e67e:	b10a      	cbz	r2, 800e684 <__lshift+0xa4>
 800e680:	f108 0602 	add.w	r6, r8, #2
 800e684:	3e01      	subs	r6, #1
 800e686:	4638      	mov	r0, r7
 800e688:	612e      	str	r6, [r5, #16]
 800e68a:	4621      	mov	r1, r4
 800e68c:	f7ff fd90 	bl	800e1b0 <_Bfree>
 800e690:	4628      	mov	r0, r5
 800e692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e696:	f842 0f04 	str.w	r0, [r2, #4]!
 800e69a:	3301      	adds	r3, #1
 800e69c:	e7c5      	b.n	800e62a <__lshift+0x4a>
 800e69e:	3904      	subs	r1, #4
 800e6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6a8:	459c      	cmp	ip, r3
 800e6aa:	d8f9      	bhi.n	800e6a0 <__lshift+0xc0>
 800e6ac:	e7ea      	b.n	800e684 <__lshift+0xa4>
 800e6ae:	bf00      	nop
 800e6b0:	080114bc 	.word	0x080114bc
 800e6b4:	0801152d 	.word	0x0801152d

0800e6b8 <__mcmp>:
 800e6b8:	690a      	ldr	r2, [r1, #16]
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	6900      	ldr	r0, [r0, #16]
 800e6be:	1a80      	subs	r0, r0, r2
 800e6c0:	b530      	push	{r4, r5, lr}
 800e6c2:	d10e      	bne.n	800e6e2 <__mcmp+0x2a>
 800e6c4:	3314      	adds	r3, #20
 800e6c6:	3114      	adds	r1, #20
 800e6c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e6cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e6d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e6d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e6d8:	4295      	cmp	r5, r2
 800e6da:	d003      	beq.n	800e6e4 <__mcmp+0x2c>
 800e6dc:	d205      	bcs.n	800e6ea <__mcmp+0x32>
 800e6de:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e2:	bd30      	pop	{r4, r5, pc}
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	d3f3      	bcc.n	800e6d0 <__mcmp+0x18>
 800e6e8:	e7fb      	b.n	800e6e2 <__mcmp+0x2a>
 800e6ea:	2001      	movs	r0, #1
 800e6ec:	e7f9      	b.n	800e6e2 <__mcmp+0x2a>
	...

0800e6f0 <__mdiff>:
 800e6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f4:	4689      	mov	r9, r1
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4648      	mov	r0, r9
 800e6fc:	4614      	mov	r4, r2
 800e6fe:	f7ff ffdb 	bl	800e6b8 <__mcmp>
 800e702:	1e05      	subs	r5, r0, #0
 800e704:	d112      	bne.n	800e72c <__mdiff+0x3c>
 800e706:	4629      	mov	r1, r5
 800e708:	4630      	mov	r0, r6
 800e70a:	f7ff fd11 	bl	800e130 <_Balloc>
 800e70e:	4602      	mov	r2, r0
 800e710:	b928      	cbnz	r0, 800e71e <__mdiff+0x2e>
 800e712:	4b3f      	ldr	r3, [pc, #252]	@ (800e810 <__mdiff+0x120>)
 800e714:	f240 2137 	movw	r1, #567	@ 0x237
 800e718:	483e      	ldr	r0, [pc, #248]	@ (800e814 <__mdiff+0x124>)
 800e71a:	f7fe fa53 	bl	800cbc4 <__assert_func>
 800e71e:	2301      	movs	r3, #1
 800e720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e724:	4610      	mov	r0, r2
 800e726:	b003      	add	sp, #12
 800e728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72c:	bfbc      	itt	lt
 800e72e:	464b      	movlt	r3, r9
 800e730:	46a1      	movlt	r9, r4
 800e732:	4630      	mov	r0, r6
 800e734:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e738:	bfba      	itte	lt
 800e73a:	461c      	movlt	r4, r3
 800e73c:	2501      	movlt	r5, #1
 800e73e:	2500      	movge	r5, #0
 800e740:	f7ff fcf6 	bl	800e130 <_Balloc>
 800e744:	4602      	mov	r2, r0
 800e746:	b918      	cbnz	r0, 800e750 <__mdiff+0x60>
 800e748:	4b31      	ldr	r3, [pc, #196]	@ (800e810 <__mdiff+0x120>)
 800e74a:	f240 2145 	movw	r1, #581	@ 0x245
 800e74e:	e7e3      	b.n	800e718 <__mdiff+0x28>
 800e750:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e754:	6926      	ldr	r6, [r4, #16]
 800e756:	60c5      	str	r5, [r0, #12]
 800e758:	f109 0310 	add.w	r3, r9, #16
 800e75c:	f109 0514 	add.w	r5, r9, #20
 800e760:	f104 0e14 	add.w	lr, r4, #20
 800e764:	f100 0b14 	add.w	fp, r0, #20
 800e768:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e76c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e770:	9301      	str	r3, [sp, #4]
 800e772:	46d9      	mov	r9, fp
 800e774:	f04f 0c00 	mov.w	ip, #0
 800e778:	9b01      	ldr	r3, [sp, #4]
 800e77a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e77e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	fa1f f38a 	uxth.w	r3, sl
 800e788:	4619      	mov	r1, r3
 800e78a:	b283      	uxth	r3, r0
 800e78c:	1acb      	subs	r3, r1, r3
 800e78e:	0c00      	lsrs	r0, r0, #16
 800e790:	4463      	add	r3, ip
 800e792:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e796:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e7a0:	4576      	cmp	r6, lr
 800e7a2:	f849 3b04 	str.w	r3, [r9], #4
 800e7a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7aa:	d8e5      	bhi.n	800e778 <__mdiff+0x88>
 800e7ac:	1b33      	subs	r3, r6, r4
 800e7ae:	3b15      	subs	r3, #21
 800e7b0:	f023 0303 	bic.w	r3, r3, #3
 800e7b4:	3415      	adds	r4, #21
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	42a6      	cmp	r6, r4
 800e7ba:	bf38      	it	cc
 800e7bc:	2304      	movcc	r3, #4
 800e7be:	441d      	add	r5, r3
 800e7c0:	445b      	add	r3, fp
 800e7c2:	461e      	mov	r6, r3
 800e7c4:	462c      	mov	r4, r5
 800e7c6:	4544      	cmp	r4, r8
 800e7c8:	d30e      	bcc.n	800e7e8 <__mdiff+0xf8>
 800e7ca:	f108 0103 	add.w	r1, r8, #3
 800e7ce:	1b49      	subs	r1, r1, r5
 800e7d0:	f021 0103 	bic.w	r1, r1, #3
 800e7d4:	3d03      	subs	r5, #3
 800e7d6:	45a8      	cmp	r8, r5
 800e7d8:	bf38      	it	cc
 800e7da:	2100      	movcc	r1, #0
 800e7dc:	440b      	add	r3, r1
 800e7de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7e2:	b191      	cbz	r1, 800e80a <__mdiff+0x11a>
 800e7e4:	6117      	str	r7, [r2, #16]
 800e7e6:	e79d      	b.n	800e724 <__mdiff+0x34>
 800e7e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7ec:	46e6      	mov	lr, ip
 800e7ee:	0c08      	lsrs	r0, r1, #16
 800e7f0:	fa1c fc81 	uxtah	ip, ip, r1
 800e7f4:	4471      	add	r1, lr
 800e7f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e7fa:	b289      	uxth	r1, r1
 800e7fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e800:	f846 1b04 	str.w	r1, [r6], #4
 800e804:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e808:	e7dd      	b.n	800e7c6 <__mdiff+0xd6>
 800e80a:	3f01      	subs	r7, #1
 800e80c:	e7e7      	b.n	800e7de <__mdiff+0xee>
 800e80e:	bf00      	nop
 800e810:	080114bc 	.word	0x080114bc
 800e814:	0801152d 	.word	0x0801152d

0800e818 <__ulp>:
 800e818:	b082      	sub	sp, #8
 800e81a:	ed8d 0b00 	vstr	d0, [sp]
 800e81e:	9a01      	ldr	r2, [sp, #4]
 800e820:	4b0f      	ldr	r3, [pc, #60]	@ (800e860 <__ulp+0x48>)
 800e822:	4013      	ands	r3, r2
 800e824:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	dc08      	bgt.n	800e83e <__ulp+0x26>
 800e82c:	425b      	negs	r3, r3
 800e82e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e832:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e836:	da04      	bge.n	800e842 <__ulp+0x2a>
 800e838:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e83c:	4113      	asrs	r3, r2
 800e83e:	2200      	movs	r2, #0
 800e840:	e008      	b.n	800e854 <__ulp+0x3c>
 800e842:	f1a2 0314 	sub.w	r3, r2, #20
 800e846:	2b1e      	cmp	r3, #30
 800e848:	bfda      	itte	le
 800e84a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e84e:	40da      	lsrle	r2, r3
 800e850:	2201      	movgt	r2, #1
 800e852:	2300      	movs	r3, #0
 800e854:	4619      	mov	r1, r3
 800e856:	4610      	mov	r0, r2
 800e858:	ec41 0b10 	vmov	d0, r0, r1
 800e85c:	b002      	add	sp, #8
 800e85e:	4770      	bx	lr
 800e860:	7ff00000 	.word	0x7ff00000

0800e864 <__b2d>:
 800e864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e868:	6906      	ldr	r6, [r0, #16]
 800e86a:	f100 0814 	add.w	r8, r0, #20
 800e86e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e872:	1f37      	subs	r7, r6, #4
 800e874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e878:	4610      	mov	r0, r2
 800e87a:	f7ff fd4b 	bl	800e314 <__hi0bits>
 800e87e:	f1c0 0320 	rsb	r3, r0, #32
 800e882:	280a      	cmp	r0, #10
 800e884:	600b      	str	r3, [r1, #0]
 800e886:	491b      	ldr	r1, [pc, #108]	@ (800e8f4 <__b2d+0x90>)
 800e888:	dc15      	bgt.n	800e8b6 <__b2d+0x52>
 800e88a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e88e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e892:	45b8      	cmp	r8, r7
 800e894:	ea43 0501 	orr.w	r5, r3, r1
 800e898:	bf34      	ite	cc
 800e89a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e89e:	2300      	movcs	r3, #0
 800e8a0:	3015      	adds	r0, #21
 800e8a2:	fa02 f000 	lsl.w	r0, r2, r0
 800e8a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e8aa:	4303      	orrs	r3, r0
 800e8ac:	461c      	mov	r4, r3
 800e8ae:	ec45 4b10 	vmov	d0, r4, r5
 800e8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8b6:	45b8      	cmp	r8, r7
 800e8b8:	bf3a      	itte	cc
 800e8ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e8be:	f1a6 0708 	subcc.w	r7, r6, #8
 800e8c2:	2300      	movcs	r3, #0
 800e8c4:	380b      	subs	r0, #11
 800e8c6:	d012      	beq.n	800e8ee <__b2d+0x8a>
 800e8c8:	f1c0 0120 	rsb	r1, r0, #32
 800e8cc:	fa23 f401 	lsr.w	r4, r3, r1
 800e8d0:	4082      	lsls	r2, r0
 800e8d2:	4322      	orrs	r2, r4
 800e8d4:	4547      	cmp	r7, r8
 800e8d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e8da:	bf8c      	ite	hi
 800e8dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e8e0:	2200      	movls	r2, #0
 800e8e2:	4083      	lsls	r3, r0
 800e8e4:	40ca      	lsrs	r2, r1
 800e8e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	e7de      	b.n	800e8ac <__b2d+0x48>
 800e8ee:	ea42 0501 	orr.w	r5, r2, r1
 800e8f2:	e7db      	b.n	800e8ac <__b2d+0x48>
 800e8f4:	3ff00000 	.word	0x3ff00000

0800e8f8 <__d2b>:
 800e8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8fc:	460f      	mov	r7, r1
 800e8fe:	2101      	movs	r1, #1
 800e900:	ec59 8b10 	vmov	r8, r9, d0
 800e904:	4616      	mov	r6, r2
 800e906:	f7ff fc13 	bl	800e130 <_Balloc>
 800e90a:	4604      	mov	r4, r0
 800e90c:	b930      	cbnz	r0, 800e91c <__d2b+0x24>
 800e90e:	4602      	mov	r2, r0
 800e910:	4b23      	ldr	r3, [pc, #140]	@ (800e9a0 <__d2b+0xa8>)
 800e912:	4824      	ldr	r0, [pc, #144]	@ (800e9a4 <__d2b+0xac>)
 800e914:	f240 310f 	movw	r1, #783	@ 0x30f
 800e918:	f7fe f954 	bl	800cbc4 <__assert_func>
 800e91c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e924:	b10d      	cbz	r5, 800e92a <__d2b+0x32>
 800e926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e92a:	9301      	str	r3, [sp, #4]
 800e92c:	f1b8 0300 	subs.w	r3, r8, #0
 800e930:	d023      	beq.n	800e97a <__d2b+0x82>
 800e932:	4668      	mov	r0, sp
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	f7ff fd0c 	bl	800e352 <__lo0bits>
 800e93a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e93e:	b1d0      	cbz	r0, 800e976 <__d2b+0x7e>
 800e940:	f1c0 0320 	rsb	r3, r0, #32
 800e944:	fa02 f303 	lsl.w	r3, r2, r3
 800e948:	430b      	orrs	r3, r1
 800e94a:	40c2      	lsrs	r2, r0
 800e94c:	6163      	str	r3, [r4, #20]
 800e94e:	9201      	str	r2, [sp, #4]
 800e950:	9b01      	ldr	r3, [sp, #4]
 800e952:	61a3      	str	r3, [r4, #24]
 800e954:	2b00      	cmp	r3, #0
 800e956:	bf0c      	ite	eq
 800e958:	2201      	moveq	r2, #1
 800e95a:	2202      	movne	r2, #2
 800e95c:	6122      	str	r2, [r4, #16]
 800e95e:	b1a5      	cbz	r5, 800e98a <__d2b+0x92>
 800e960:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e964:	4405      	add	r5, r0
 800e966:	603d      	str	r5, [r7, #0]
 800e968:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e96c:	6030      	str	r0, [r6, #0]
 800e96e:	4620      	mov	r0, r4
 800e970:	b003      	add	sp, #12
 800e972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e976:	6161      	str	r1, [r4, #20]
 800e978:	e7ea      	b.n	800e950 <__d2b+0x58>
 800e97a:	a801      	add	r0, sp, #4
 800e97c:	f7ff fce9 	bl	800e352 <__lo0bits>
 800e980:	9b01      	ldr	r3, [sp, #4]
 800e982:	6163      	str	r3, [r4, #20]
 800e984:	3020      	adds	r0, #32
 800e986:	2201      	movs	r2, #1
 800e988:	e7e8      	b.n	800e95c <__d2b+0x64>
 800e98a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e98e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e992:	6038      	str	r0, [r7, #0]
 800e994:	6918      	ldr	r0, [r3, #16]
 800e996:	f7ff fcbd 	bl	800e314 <__hi0bits>
 800e99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e99e:	e7e5      	b.n	800e96c <__d2b+0x74>
 800e9a0:	080114bc 	.word	0x080114bc
 800e9a4:	0801152d 	.word	0x0801152d

0800e9a8 <__ratio>:
 800e9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	e9cd 1000 	strd	r1, r0, [sp]
 800e9b2:	a902      	add	r1, sp, #8
 800e9b4:	f7ff ff56 	bl	800e864 <__b2d>
 800e9b8:	9800      	ldr	r0, [sp, #0]
 800e9ba:	a903      	add	r1, sp, #12
 800e9bc:	ec55 4b10 	vmov	r4, r5, d0
 800e9c0:	f7ff ff50 	bl	800e864 <__b2d>
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	6919      	ldr	r1, [r3, #16]
 800e9c8:	9b00      	ldr	r3, [sp, #0]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	1ac9      	subs	r1, r1, r3
 800e9ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e9d2:	1a9b      	subs	r3, r3, r2
 800e9d4:	ec5b ab10 	vmov	sl, fp, d0
 800e9d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	bfce      	itee	gt
 800e9e0:	462a      	movgt	r2, r5
 800e9e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e9e6:	465a      	movle	r2, fp
 800e9e8:	462f      	mov	r7, r5
 800e9ea:	46d9      	mov	r9, fp
 800e9ec:	bfcc      	ite	gt
 800e9ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e9f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e9f6:	464b      	mov	r3, r9
 800e9f8:	4652      	mov	r2, sl
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f7f1 ff25 	bl	800084c <__aeabi_ddiv>
 800ea02:	ec41 0b10 	vmov	d0, r0, r1
 800ea06:	b005      	add	sp, #20
 800ea08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea0c <__copybits>:
 800ea0c:	3901      	subs	r1, #1
 800ea0e:	b570      	push	{r4, r5, r6, lr}
 800ea10:	1149      	asrs	r1, r1, #5
 800ea12:	6914      	ldr	r4, [r2, #16]
 800ea14:	3101      	adds	r1, #1
 800ea16:	f102 0314 	add.w	r3, r2, #20
 800ea1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea22:	1f05      	subs	r5, r0, #4
 800ea24:	42a3      	cmp	r3, r4
 800ea26:	d30c      	bcc.n	800ea42 <__copybits+0x36>
 800ea28:	1aa3      	subs	r3, r4, r2
 800ea2a:	3b11      	subs	r3, #17
 800ea2c:	f023 0303 	bic.w	r3, r3, #3
 800ea30:	3211      	adds	r2, #17
 800ea32:	42a2      	cmp	r2, r4
 800ea34:	bf88      	it	hi
 800ea36:	2300      	movhi	r3, #0
 800ea38:	4418      	add	r0, r3
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	4288      	cmp	r0, r1
 800ea3e:	d305      	bcc.n	800ea4c <__copybits+0x40>
 800ea40:	bd70      	pop	{r4, r5, r6, pc}
 800ea42:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea46:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea4a:	e7eb      	b.n	800ea24 <__copybits+0x18>
 800ea4c:	f840 3b04 	str.w	r3, [r0], #4
 800ea50:	e7f4      	b.n	800ea3c <__copybits+0x30>

0800ea52 <__any_on>:
 800ea52:	f100 0214 	add.w	r2, r0, #20
 800ea56:	6900      	ldr	r0, [r0, #16]
 800ea58:	114b      	asrs	r3, r1, #5
 800ea5a:	4298      	cmp	r0, r3
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	db11      	blt.n	800ea84 <__any_on+0x32>
 800ea60:	dd0a      	ble.n	800ea78 <__any_on+0x26>
 800ea62:	f011 011f 	ands.w	r1, r1, #31
 800ea66:	d007      	beq.n	800ea78 <__any_on+0x26>
 800ea68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea6c:	fa24 f001 	lsr.w	r0, r4, r1
 800ea70:	fa00 f101 	lsl.w	r1, r0, r1
 800ea74:	428c      	cmp	r4, r1
 800ea76:	d10b      	bne.n	800ea90 <__any_on+0x3e>
 800ea78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d803      	bhi.n	800ea88 <__any_on+0x36>
 800ea80:	2000      	movs	r0, #0
 800ea82:	bd10      	pop	{r4, pc}
 800ea84:	4603      	mov	r3, r0
 800ea86:	e7f7      	b.n	800ea78 <__any_on+0x26>
 800ea88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea8c:	2900      	cmp	r1, #0
 800ea8e:	d0f5      	beq.n	800ea7c <__any_on+0x2a>
 800ea90:	2001      	movs	r0, #1
 800ea92:	e7f6      	b.n	800ea82 <__any_on+0x30>

0800ea94 <__ascii_wctomb>:
 800ea94:	4603      	mov	r3, r0
 800ea96:	4608      	mov	r0, r1
 800ea98:	b141      	cbz	r1, 800eaac <__ascii_wctomb+0x18>
 800ea9a:	2aff      	cmp	r2, #255	@ 0xff
 800ea9c:	d904      	bls.n	800eaa8 <__ascii_wctomb+0x14>
 800ea9e:	228a      	movs	r2, #138	@ 0x8a
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa6:	4770      	bx	lr
 800eaa8:	700a      	strb	r2, [r1, #0]
 800eaaa:	2001      	movs	r0, #1
 800eaac:	4770      	bx	lr

0800eaae <__ssputs_r>:
 800eaae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab2:	688e      	ldr	r6, [r1, #8]
 800eab4:	461f      	mov	r7, r3
 800eab6:	42be      	cmp	r6, r7
 800eab8:	680b      	ldr	r3, [r1, #0]
 800eaba:	4682      	mov	sl, r0
 800eabc:	460c      	mov	r4, r1
 800eabe:	4690      	mov	r8, r2
 800eac0:	d82d      	bhi.n	800eb1e <__ssputs_r+0x70>
 800eac2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eac6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eaca:	d026      	beq.n	800eb1a <__ssputs_r+0x6c>
 800eacc:	6965      	ldr	r5, [r4, #20]
 800eace:	6909      	ldr	r1, [r1, #16]
 800ead0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ead4:	eba3 0901 	sub.w	r9, r3, r1
 800ead8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eadc:	1c7b      	adds	r3, r7, #1
 800eade:	444b      	add	r3, r9
 800eae0:	106d      	asrs	r5, r5, #1
 800eae2:	429d      	cmp	r5, r3
 800eae4:	bf38      	it	cc
 800eae6:	461d      	movcc	r5, r3
 800eae8:	0553      	lsls	r3, r2, #21
 800eaea:	d527      	bpl.n	800eb3c <__ssputs_r+0x8e>
 800eaec:	4629      	mov	r1, r5
 800eaee:	f7ff fa81 	bl	800dff4 <_malloc_r>
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	b360      	cbz	r0, 800eb50 <__ssputs_r+0xa2>
 800eaf6:	6921      	ldr	r1, [r4, #16]
 800eaf8:	464a      	mov	r2, r9
 800eafa:	f7fe f844 	bl	800cb86 <memcpy>
 800eafe:	89a3      	ldrh	r3, [r4, #12]
 800eb00:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb08:	81a3      	strh	r3, [r4, #12]
 800eb0a:	6126      	str	r6, [r4, #16]
 800eb0c:	6165      	str	r5, [r4, #20]
 800eb0e:	444e      	add	r6, r9
 800eb10:	eba5 0509 	sub.w	r5, r5, r9
 800eb14:	6026      	str	r6, [r4, #0]
 800eb16:	60a5      	str	r5, [r4, #8]
 800eb18:	463e      	mov	r6, r7
 800eb1a:	42be      	cmp	r6, r7
 800eb1c:	d900      	bls.n	800eb20 <__ssputs_r+0x72>
 800eb1e:	463e      	mov	r6, r7
 800eb20:	6820      	ldr	r0, [r4, #0]
 800eb22:	4632      	mov	r2, r6
 800eb24:	4641      	mov	r1, r8
 800eb26:	f000 f9d7 	bl	800eed8 <memmove>
 800eb2a:	68a3      	ldr	r3, [r4, #8]
 800eb2c:	1b9b      	subs	r3, r3, r6
 800eb2e:	60a3      	str	r3, [r4, #8]
 800eb30:	6823      	ldr	r3, [r4, #0]
 800eb32:	4433      	add	r3, r6
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	2000      	movs	r0, #0
 800eb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb3c:	462a      	mov	r2, r5
 800eb3e:	f000 fa10 	bl	800ef62 <_realloc_r>
 800eb42:	4606      	mov	r6, r0
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d1e0      	bne.n	800eb0a <__ssputs_r+0x5c>
 800eb48:	6921      	ldr	r1, [r4, #16]
 800eb4a:	4650      	mov	r0, sl
 800eb4c:	f7fe fea4 	bl	800d898 <_free_r>
 800eb50:	230c      	movs	r3, #12
 800eb52:	f8ca 3000 	str.w	r3, [sl]
 800eb56:	89a3      	ldrh	r3, [r4, #12]
 800eb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb5c:	81a3      	strh	r3, [r4, #12]
 800eb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb62:	e7e9      	b.n	800eb38 <__ssputs_r+0x8a>

0800eb64 <_svfiprintf_r>:
 800eb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb68:	4698      	mov	r8, r3
 800eb6a:	898b      	ldrh	r3, [r1, #12]
 800eb6c:	061b      	lsls	r3, r3, #24
 800eb6e:	b09d      	sub	sp, #116	@ 0x74
 800eb70:	4607      	mov	r7, r0
 800eb72:	460d      	mov	r5, r1
 800eb74:	4614      	mov	r4, r2
 800eb76:	d510      	bpl.n	800eb9a <_svfiprintf_r+0x36>
 800eb78:	690b      	ldr	r3, [r1, #16]
 800eb7a:	b973      	cbnz	r3, 800eb9a <_svfiprintf_r+0x36>
 800eb7c:	2140      	movs	r1, #64	@ 0x40
 800eb7e:	f7ff fa39 	bl	800dff4 <_malloc_r>
 800eb82:	6028      	str	r0, [r5, #0]
 800eb84:	6128      	str	r0, [r5, #16]
 800eb86:	b930      	cbnz	r0, 800eb96 <_svfiprintf_r+0x32>
 800eb88:	230c      	movs	r3, #12
 800eb8a:	603b      	str	r3, [r7, #0]
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb90:	b01d      	add	sp, #116	@ 0x74
 800eb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb96:	2340      	movs	r3, #64	@ 0x40
 800eb98:	616b      	str	r3, [r5, #20]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb9e:	2320      	movs	r3, #32
 800eba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eba8:	2330      	movs	r3, #48	@ 0x30
 800ebaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ed48 <_svfiprintf_r+0x1e4>
 800ebae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebb2:	f04f 0901 	mov.w	r9, #1
 800ebb6:	4623      	mov	r3, r4
 800ebb8:	469a      	mov	sl, r3
 800ebba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebbe:	b10a      	cbz	r2, 800ebc4 <_svfiprintf_r+0x60>
 800ebc0:	2a25      	cmp	r2, #37	@ 0x25
 800ebc2:	d1f9      	bne.n	800ebb8 <_svfiprintf_r+0x54>
 800ebc4:	ebba 0b04 	subs.w	fp, sl, r4
 800ebc8:	d00b      	beq.n	800ebe2 <_svfiprintf_r+0x7e>
 800ebca:	465b      	mov	r3, fp
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4629      	mov	r1, r5
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	f7ff ff6c 	bl	800eaae <__ssputs_r>
 800ebd6:	3001      	adds	r0, #1
 800ebd8:	f000 80a7 	beq.w	800ed2a <_svfiprintf_r+0x1c6>
 800ebdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebde:	445a      	add	r2, fp
 800ebe0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebe2:	f89a 3000 	ldrb.w	r3, [sl]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f000 809f 	beq.w	800ed2a <_svfiprintf_r+0x1c6>
 800ebec:	2300      	movs	r3, #0
 800ebee:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebf6:	f10a 0a01 	add.w	sl, sl, #1
 800ebfa:	9304      	str	r3, [sp, #16]
 800ebfc:	9307      	str	r3, [sp, #28]
 800ebfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec02:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec04:	4654      	mov	r4, sl
 800ec06:	2205      	movs	r2, #5
 800ec08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec0c:	484e      	ldr	r0, [pc, #312]	@ (800ed48 <_svfiprintf_r+0x1e4>)
 800ec0e:	f7f1 fadf 	bl	80001d0 <memchr>
 800ec12:	9a04      	ldr	r2, [sp, #16]
 800ec14:	b9d8      	cbnz	r0, 800ec4e <_svfiprintf_r+0xea>
 800ec16:	06d0      	lsls	r0, r2, #27
 800ec18:	bf44      	itt	mi
 800ec1a:	2320      	movmi	r3, #32
 800ec1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec20:	0711      	lsls	r1, r2, #28
 800ec22:	bf44      	itt	mi
 800ec24:	232b      	movmi	r3, #43	@ 0x2b
 800ec26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec30:	d015      	beq.n	800ec5e <_svfiprintf_r+0xfa>
 800ec32:	9a07      	ldr	r2, [sp, #28]
 800ec34:	4654      	mov	r4, sl
 800ec36:	2000      	movs	r0, #0
 800ec38:	f04f 0c0a 	mov.w	ip, #10
 800ec3c:	4621      	mov	r1, r4
 800ec3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec42:	3b30      	subs	r3, #48	@ 0x30
 800ec44:	2b09      	cmp	r3, #9
 800ec46:	d94b      	bls.n	800ece0 <_svfiprintf_r+0x17c>
 800ec48:	b1b0      	cbz	r0, 800ec78 <_svfiprintf_r+0x114>
 800ec4a:	9207      	str	r2, [sp, #28]
 800ec4c:	e014      	b.n	800ec78 <_svfiprintf_r+0x114>
 800ec4e:	eba0 0308 	sub.w	r3, r0, r8
 800ec52:	fa09 f303 	lsl.w	r3, r9, r3
 800ec56:	4313      	orrs	r3, r2
 800ec58:	9304      	str	r3, [sp, #16]
 800ec5a:	46a2      	mov	sl, r4
 800ec5c:	e7d2      	b.n	800ec04 <_svfiprintf_r+0xa0>
 800ec5e:	9b03      	ldr	r3, [sp, #12]
 800ec60:	1d19      	adds	r1, r3, #4
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	9103      	str	r1, [sp, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	bfbb      	ittet	lt
 800ec6a:	425b      	neglt	r3, r3
 800ec6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ec70:	9307      	strge	r3, [sp, #28]
 800ec72:	9307      	strlt	r3, [sp, #28]
 800ec74:	bfb8      	it	lt
 800ec76:	9204      	strlt	r2, [sp, #16]
 800ec78:	7823      	ldrb	r3, [r4, #0]
 800ec7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec7c:	d10a      	bne.n	800ec94 <_svfiprintf_r+0x130>
 800ec7e:	7863      	ldrb	r3, [r4, #1]
 800ec80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec82:	d132      	bne.n	800ecea <_svfiprintf_r+0x186>
 800ec84:	9b03      	ldr	r3, [sp, #12]
 800ec86:	1d1a      	adds	r2, r3, #4
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	9203      	str	r2, [sp, #12]
 800ec8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec90:	3402      	adds	r4, #2
 800ec92:	9305      	str	r3, [sp, #20]
 800ec94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ed58 <_svfiprintf_r+0x1f4>
 800ec98:	7821      	ldrb	r1, [r4, #0]
 800ec9a:	2203      	movs	r2, #3
 800ec9c:	4650      	mov	r0, sl
 800ec9e:	f7f1 fa97 	bl	80001d0 <memchr>
 800eca2:	b138      	cbz	r0, 800ecb4 <_svfiprintf_r+0x150>
 800eca4:	9b04      	ldr	r3, [sp, #16]
 800eca6:	eba0 000a 	sub.w	r0, r0, sl
 800ecaa:	2240      	movs	r2, #64	@ 0x40
 800ecac:	4082      	lsls	r2, r0
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	3401      	adds	r4, #1
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb8:	4824      	ldr	r0, [pc, #144]	@ (800ed4c <_svfiprintf_r+0x1e8>)
 800ecba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecbe:	2206      	movs	r2, #6
 800ecc0:	f7f1 fa86 	bl	80001d0 <memchr>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d036      	beq.n	800ed36 <_svfiprintf_r+0x1d2>
 800ecc8:	4b21      	ldr	r3, [pc, #132]	@ (800ed50 <_svfiprintf_r+0x1ec>)
 800ecca:	bb1b      	cbnz	r3, 800ed14 <_svfiprintf_r+0x1b0>
 800eccc:	9b03      	ldr	r3, [sp, #12]
 800ecce:	3307      	adds	r3, #7
 800ecd0:	f023 0307 	bic.w	r3, r3, #7
 800ecd4:	3308      	adds	r3, #8
 800ecd6:	9303      	str	r3, [sp, #12]
 800ecd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecda:	4433      	add	r3, r6
 800ecdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecde:	e76a      	b.n	800ebb6 <_svfiprintf_r+0x52>
 800ece0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ece4:	460c      	mov	r4, r1
 800ece6:	2001      	movs	r0, #1
 800ece8:	e7a8      	b.n	800ec3c <_svfiprintf_r+0xd8>
 800ecea:	2300      	movs	r3, #0
 800ecec:	3401      	adds	r4, #1
 800ecee:	9305      	str	r3, [sp, #20]
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	f04f 0c0a 	mov.w	ip, #10
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecfc:	3a30      	subs	r2, #48	@ 0x30
 800ecfe:	2a09      	cmp	r2, #9
 800ed00:	d903      	bls.n	800ed0a <_svfiprintf_r+0x1a6>
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d0c6      	beq.n	800ec94 <_svfiprintf_r+0x130>
 800ed06:	9105      	str	r1, [sp, #20]
 800ed08:	e7c4      	b.n	800ec94 <_svfiprintf_r+0x130>
 800ed0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed0e:	4604      	mov	r4, r0
 800ed10:	2301      	movs	r3, #1
 800ed12:	e7f0      	b.n	800ecf6 <_svfiprintf_r+0x192>
 800ed14:	ab03      	add	r3, sp, #12
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	462a      	mov	r2, r5
 800ed1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ed54 <_svfiprintf_r+0x1f0>)
 800ed1c:	a904      	add	r1, sp, #16
 800ed1e:	4638      	mov	r0, r7
 800ed20:	f7fc ff52 	bl	800bbc8 <_printf_float>
 800ed24:	1c42      	adds	r2, r0, #1
 800ed26:	4606      	mov	r6, r0
 800ed28:	d1d6      	bne.n	800ecd8 <_svfiprintf_r+0x174>
 800ed2a:	89ab      	ldrh	r3, [r5, #12]
 800ed2c:	065b      	lsls	r3, r3, #25
 800ed2e:	f53f af2d 	bmi.w	800eb8c <_svfiprintf_r+0x28>
 800ed32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed34:	e72c      	b.n	800eb90 <_svfiprintf_r+0x2c>
 800ed36:	ab03      	add	r3, sp, #12
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	462a      	mov	r2, r5
 800ed3c:	4b05      	ldr	r3, [pc, #20]	@ (800ed54 <_svfiprintf_r+0x1f0>)
 800ed3e:	a904      	add	r1, sp, #16
 800ed40:	4638      	mov	r0, r7
 800ed42:	f7fd f9d9 	bl	800c0f8 <_printf_i>
 800ed46:	e7ed      	b.n	800ed24 <_svfiprintf_r+0x1c0>
 800ed48:	08011688 	.word	0x08011688
 800ed4c:	08011692 	.word	0x08011692
 800ed50:	0800bbc9 	.word	0x0800bbc9
 800ed54:	0800eaaf 	.word	0x0800eaaf
 800ed58:	0801168e 	.word	0x0801168e

0800ed5c <__sflush_r>:
 800ed5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed64:	0716      	lsls	r6, r2, #28
 800ed66:	4605      	mov	r5, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	d454      	bmi.n	800ee16 <__sflush_r+0xba>
 800ed6c:	684b      	ldr	r3, [r1, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	dc02      	bgt.n	800ed78 <__sflush_r+0x1c>
 800ed72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	dd48      	ble.n	800ee0a <__sflush_r+0xae>
 800ed78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed7a:	2e00      	cmp	r6, #0
 800ed7c:	d045      	beq.n	800ee0a <__sflush_r+0xae>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed84:	682f      	ldr	r7, [r5, #0]
 800ed86:	6a21      	ldr	r1, [r4, #32]
 800ed88:	602b      	str	r3, [r5, #0]
 800ed8a:	d030      	beq.n	800edee <__sflush_r+0x92>
 800ed8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	0759      	lsls	r1, r3, #29
 800ed92:	d505      	bpl.n	800eda0 <__sflush_r+0x44>
 800ed94:	6863      	ldr	r3, [r4, #4]
 800ed96:	1ad2      	subs	r2, r2, r3
 800ed98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed9a:	b10b      	cbz	r3, 800eda0 <__sflush_r+0x44>
 800ed9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed9e:	1ad2      	subs	r2, r2, r3
 800eda0:	2300      	movs	r3, #0
 800eda2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eda4:	6a21      	ldr	r1, [r4, #32]
 800eda6:	4628      	mov	r0, r5
 800eda8:	47b0      	blx	r6
 800edaa:	1c43      	adds	r3, r0, #1
 800edac:	89a3      	ldrh	r3, [r4, #12]
 800edae:	d106      	bne.n	800edbe <__sflush_r+0x62>
 800edb0:	6829      	ldr	r1, [r5, #0]
 800edb2:	291d      	cmp	r1, #29
 800edb4:	d82b      	bhi.n	800ee0e <__sflush_r+0xb2>
 800edb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ee60 <__sflush_r+0x104>)
 800edb8:	410a      	asrs	r2, r1
 800edba:	07d6      	lsls	r6, r2, #31
 800edbc:	d427      	bmi.n	800ee0e <__sflush_r+0xb2>
 800edbe:	2200      	movs	r2, #0
 800edc0:	6062      	str	r2, [r4, #4]
 800edc2:	04d9      	lsls	r1, r3, #19
 800edc4:	6922      	ldr	r2, [r4, #16]
 800edc6:	6022      	str	r2, [r4, #0]
 800edc8:	d504      	bpl.n	800edd4 <__sflush_r+0x78>
 800edca:	1c42      	adds	r2, r0, #1
 800edcc:	d101      	bne.n	800edd2 <__sflush_r+0x76>
 800edce:	682b      	ldr	r3, [r5, #0]
 800edd0:	b903      	cbnz	r3, 800edd4 <__sflush_r+0x78>
 800edd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800edd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edd6:	602f      	str	r7, [r5, #0]
 800edd8:	b1b9      	cbz	r1, 800ee0a <__sflush_r+0xae>
 800edda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edde:	4299      	cmp	r1, r3
 800ede0:	d002      	beq.n	800ede8 <__sflush_r+0x8c>
 800ede2:	4628      	mov	r0, r5
 800ede4:	f7fe fd58 	bl	800d898 <_free_r>
 800ede8:	2300      	movs	r3, #0
 800edea:	6363      	str	r3, [r4, #52]	@ 0x34
 800edec:	e00d      	b.n	800ee0a <__sflush_r+0xae>
 800edee:	2301      	movs	r3, #1
 800edf0:	4628      	mov	r0, r5
 800edf2:	47b0      	blx	r6
 800edf4:	4602      	mov	r2, r0
 800edf6:	1c50      	adds	r0, r2, #1
 800edf8:	d1c9      	bne.n	800ed8e <__sflush_r+0x32>
 800edfa:	682b      	ldr	r3, [r5, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d0c6      	beq.n	800ed8e <__sflush_r+0x32>
 800ee00:	2b1d      	cmp	r3, #29
 800ee02:	d001      	beq.n	800ee08 <__sflush_r+0xac>
 800ee04:	2b16      	cmp	r3, #22
 800ee06:	d11e      	bne.n	800ee46 <__sflush_r+0xea>
 800ee08:	602f      	str	r7, [r5, #0]
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e022      	b.n	800ee54 <__sflush_r+0xf8>
 800ee0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee12:	b21b      	sxth	r3, r3
 800ee14:	e01b      	b.n	800ee4e <__sflush_r+0xf2>
 800ee16:	690f      	ldr	r7, [r1, #16]
 800ee18:	2f00      	cmp	r7, #0
 800ee1a:	d0f6      	beq.n	800ee0a <__sflush_r+0xae>
 800ee1c:	0793      	lsls	r3, r2, #30
 800ee1e:	680e      	ldr	r6, [r1, #0]
 800ee20:	bf08      	it	eq
 800ee22:	694b      	ldreq	r3, [r1, #20]
 800ee24:	600f      	str	r7, [r1, #0]
 800ee26:	bf18      	it	ne
 800ee28:	2300      	movne	r3, #0
 800ee2a:	eba6 0807 	sub.w	r8, r6, r7
 800ee2e:	608b      	str	r3, [r1, #8]
 800ee30:	f1b8 0f00 	cmp.w	r8, #0
 800ee34:	dde9      	ble.n	800ee0a <__sflush_r+0xae>
 800ee36:	6a21      	ldr	r1, [r4, #32]
 800ee38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee3a:	4643      	mov	r3, r8
 800ee3c:	463a      	mov	r2, r7
 800ee3e:	4628      	mov	r0, r5
 800ee40:	47b0      	blx	r6
 800ee42:	2800      	cmp	r0, #0
 800ee44:	dc08      	bgt.n	800ee58 <__sflush_r+0xfc>
 800ee46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee4e:	81a3      	strh	r3, [r4, #12]
 800ee50:	f04f 30ff 	mov.w	r0, #4294967295
 800ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee58:	4407      	add	r7, r0
 800ee5a:	eba8 0800 	sub.w	r8, r8, r0
 800ee5e:	e7e7      	b.n	800ee30 <__sflush_r+0xd4>
 800ee60:	dfbffffe 	.word	0xdfbffffe

0800ee64 <_fflush_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	690b      	ldr	r3, [r1, #16]
 800ee68:	4605      	mov	r5, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	b913      	cbnz	r3, 800ee74 <_fflush_r+0x10>
 800ee6e:	2500      	movs	r5, #0
 800ee70:	4628      	mov	r0, r5
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	b118      	cbz	r0, 800ee7e <_fflush_r+0x1a>
 800ee76:	6a03      	ldr	r3, [r0, #32]
 800ee78:	b90b      	cbnz	r3, 800ee7e <_fflush_r+0x1a>
 800ee7a:	f7fd fcfd 	bl	800c878 <__sinit>
 800ee7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d0f3      	beq.n	800ee6e <_fflush_r+0xa>
 800ee86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee88:	07d0      	lsls	r0, r2, #31
 800ee8a:	d404      	bmi.n	800ee96 <_fflush_r+0x32>
 800ee8c:	0599      	lsls	r1, r3, #22
 800ee8e:	d402      	bmi.n	800ee96 <_fflush_r+0x32>
 800ee90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee92:	f7fd fe76 	bl	800cb82 <__retarget_lock_acquire_recursive>
 800ee96:	4628      	mov	r0, r5
 800ee98:	4621      	mov	r1, r4
 800ee9a:	f7ff ff5f 	bl	800ed5c <__sflush_r>
 800ee9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eea0:	07da      	lsls	r2, r3, #31
 800eea2:	4605      	mov	r5, r0
 800eea4:	d4e4      	bmi.n	800ee70 <_fflush_r+0xc>
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	059b      	lsls	r3, r3, #22
 800eeaa:	d4e1      	bmi.n	800ee70 <_fflush_r+0xc>
 800eeac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeae:	f7fd fe69 	bl	800cb84 <__retarget_lock_release_recursive>
 800eeb2:	e7dd      	b.n	800ee70 <_fflush_r+0xc>

0800eeb4 <fiprintf>:
 800eeb4:	b40e      	push	{r1, r2, r3}
 800eeb6:	b503      	push	{r0, r1, lr}
 800eeb8:	4601      	mov	r1, r0
 800eeba:	ab03      	add	r3, sp, #12
 800eebc:	4805      	ldr	r0, [pc, #20]	@ (800eed4 <fiprintf+0x20>)
 800eebe:	f853 2b04 	ldr.w	r2, [r3], #4
 800eec2:	6800      	ldr	r0, [r0, #0]
 800eec4:	9301      	str	r3, [sp, #4]
 800eec6:	f000 f8a3 	bl	800f010 <_vfiprintf_r>
 800eeca:	b002      	add	sp, #8
 800eecc:	f85d eb04 	ldr.w	lr, [sp], #4
 800eed0:	b003      	add	sp, #12
 800eed2:	4770      	bx	lr
 800eed4:	20000264 	.word	0x20000264

0800eed8 <memmove>:
 800eed8:	4288      	cmp	r0, r1
 800eeda:	b510      	push	{r4, lr}
 800eedc:	eb01 0402 	add.w	r4, r1, r2
 800eee0:	d902      	bls.n	800eee8 <memmove+0x10>
 800eee2:	4284      	cmp	r4, r0
 800eee4:	4623      	mov	r3, r4
 800eee6:	d807      	bhi.n	800eef8 <memmove+0x20>
 800eee8:	1e43      	subs	r3, r0, #1
 800eeea:	42a1      	cmp	r1, r4
 800eeec:	d008      	beq.n	800ef00 <memmove+0x28>
 800eeee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eef6:	e7f8      	b.n	800eeea <memmove+0x12>
 800eef8:	4402      	add	r2, r0
 800eefa:	4601      	mov	r1, r0
 800eefc:	428a      	cmp	r2, r1
 800eefe:	d100      	bne.n	800ef02 <memmove+0x2a>
 800ef00:	bd10      	pop	{r4, pc}
 800ef02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef0a:	e7f7      	b.n	800eefc <memmove+0x24>

0800ef0c <_sbrk_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4d06      	ldr	r5, [pc, #24]	@ (800ef28 <_sbrk_r+0x1c>)
 800ef10:	2300      	movs	r3, #0
 800ef12:	4604      	mov	r4, r0
 800ef14:	4608      	mov	r0, r1
 800ef16:	602b      	str	r3, [r5, #0]
 800ef18:	f7f8 f970 	bl	80071fc <_sbrk>
 800ef1c:	1c43      	adds	r3, r0, #1
 800ef1e:	d102      	bne.n	800ef26 <_sbrk_r+0x1a>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	b103      	cbz	r3, 800ef26 <_sbrk_r+0x1a>
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	bd38      	pop	{r3, r4, r5, pc}
 800ef28:	20000770 	.word	0x20000770

0800ef2c <abort>:
 800ef2c:	b508      	push	{r3, lr}
 800ef2e:	2006      	movs	r0, #6
 800ef30:	f000 fa42 	bl	800f3b8 <raise>
 800ef34:	2001      	movs	r0, #1
 800ef36:	f7f8 f8e9 	bl	800710c <_exit>

0800ef3a <_calloc_r>:
 800ef3a:	b570      	push	{r4, r5, r6, lr}
 800ef3c:	fba1 5402 	umull	r5, r4, r1, r2
 800ef40:	b93c      	cbnz	r4, 800ef52 <_calloc_r+0x18>
 800ef42:	4629      	mov	r1, r5
 800ef44:	f7ff f856 	bl	800dff4 <_malloc_r>
 800ef48:	4606      	mov	r6, r0
 800ef4a:	b928      	cbnz	r0, 800ef58 <_calloc_r+0x1e>
 800ef4c:	2600      	movs	r6, #0
 800ef4e:	4630      	mov	r0, r6
 800ef50:	bd70      	pop	{r4, r5, r6, pc}
 800ef52:	220c      	movs	r2, #12
 800ef54:	6002      	str	r2, [r0, #0]
 800ef56:	e7f9      	b.n	800ef4c <_calloc_r+0x12>
 800ef58:	462a      	mov	r2, r5
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	f7fd fd25 	bl	800c9aa <memset>
 800ef60:	e7f5      	b.n	800ef4e <_calloc_r+0x14>

0800ef62 <_realloc_r>:
 800ef62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef66:	4680      	mov	r8, r0
 800ef68:	4615      	mov	r5, r2
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	b921      	cbnz	r1, 800ef78 <_realloc_r+0x16>
 800ef6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	4611      	mov	r1, r2
 800ef74:	f7ff b83e 	b.w	800dff4 <_malloc_r>
 800ef78:	b92a      	cbnz	r2, 800ef86 <_realloc_r+0x24>
 800ef7a:	f7fe fc8d 	bl	800d898 <_free_r>
 800ef7e:	2400      	movs	r4, #0
 800ef80:	4620      	mov	r0, r4
 800ef82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef86:	f000 fa33 	bl	800f3f0 <_malloc_usable_size_r>
 800ef8a:	4285      	cmp	r5, r0
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	d802      	bhi.n	800ef96 <_realloc_r+0x34>
 800ef90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ef94:	d8f4      	bhi.n	800ef80 <_realloc_r+0x1e>
 800ef96:	4629      	mov	r1, r5
 800ef98:	4640      	mov	r0, r8
 800ef9a:	f7ff f82b 	bl	800dff4 <_malloc_r>
 800ef9e:	4607      	mov	r7, r0
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d0ec      	beq.n	800ef7e <_realloc_r+0x1c>
 800efa4:	42b5      	cmp	r5, r6
 800efa6:	462a      	mov	r2, r5
 800efa8:	4621      	mov	r1, r4
 800efaa:	bf28      	it	cs
 800efac:	4632      	movcs	r2, r6
 800efae:	f7fd fdea 	bl	800cb86 <memcpy>
 800efb2:	4621      	mov	r1, r4
 800efb4:	4640      	mov	r0, r8
 800efb6:	f7fe fc6f 	bl	800d898 <_free_r>
 800efba:	463c      	mov	r4, r7
 800efbc:	e7e0      	b.n	800ef80 <_realloc_r+0x1e>

0800efbe <__sfputc_r>:
 800efbe:	6893      	ldr	r3, [r2, #8]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	b410      	push	{r4}
 800efc6:	6093      	str	r3, [r2, #8]
 800efc8:	da08      	bge.n	800efdc <__sfputc_r+0x1e>
 800efca:	6994      	ldr	r4, [r2, #24]
 800efcc:	42a3      	cmp	r3, r4
 800efce:	db01      	blt.n	800efd4 <__sfputc_r+0x16>
 800efd0:	290a      	cmp	r1, #10
 800efd2:	d103      	bne.n	800efdc <__sfputc_r+0x1e>
 800efd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efd8:	f000 b932 	b.w	800f240 <__swbuf_r>
 800efdc:	6813      	ldr	r3, [r2, #0]
 800efde:	1c58      	adds	r0, r3, #1
 800efe0:	6010      	str	r0, [r2, #0]
 800efe2:	7019      	strb	r1, [r3, #0]
 800efe4:	4608      	mov	r0, r1
 800efe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efea:	4770      	bx	lr

0800efec <__sfputs_r>:
 800efec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efee:	4606      	mov	r6, r0
 800eff0:	460f      	mov	r7, r1
 800eff2:	4614      	mov	r4, r2
 800eff4:	18d5      	adds	r5, r2, r3
 800eff6:	42ac      	cmp	r4, r5
 800eff8:	d101      	bne.n	800effe <__sfputs_r+0x12>
 800effa:	2000      	movs	r0, #0
 800effc:	e007      	b.n	800f00e <__sfputs_r+0x22>
 800effe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f002:	463a      	mov	r2, r7
 800f004:	4630      	mov	r0, r6
 800f006:	f7ff ffda 	bl	800efbe <__sfputc_r>
 800f00a:	1c43      	adds	r3, r0, #1
 800f00c:	d1f3      	bne.n	800eff6 <__sfputs_r+0xa>
 800f00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f010 <_vfiprintf_r>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	460d      	mov	r5, r1
 800f016:	b09d      	sub	sp, #116	@ 0x74
 800f018:	4614      	mov	r4, r2
 800f01a:	4698      	mov	r8, r3
 800f01c:	4606      	mov	r6, r0
 800f01e:	b118      	cbz	r0, 800f028 <_vfiprintf_r+0x18>
 800f020:	6a03      	ldr	r3, [r0, #32]
 800f022:	b90b      	cbnz	r3, 800f028 <_vfiprintf_r+0x18>
 800f024:	f7fd fc28 	bl	800c878 <__sinit>
 800f028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f02a:	07d9      	lsls	r1, r3, #31
 800f02c:	d405      	bmi.n	800f03a <_vfiprintf_r+0x2a>
 800f02e:	89ab      	ldrh	r3, [r5, #12]
 800f030:	059a      	lsls	r2, r3, #22
 800f032:	d402      	bmi.n	800f03a <_vfiprintf_r+0x2a>
 800f034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f036:	f7fd fda4 	bl	800cb82 <__retarget_lock_acquire_recursive>
 800f03a:	89ab      	ldrh	r3, [r5, #12]
 800f03c:	071b      	lsls	r3, r3, #28
 800f03e:	d501      	bpl.n	800f044 <_vfiprintf_r+0x34>
 800f040:	692b      	ldr	r3, [r5, #16]
 800f042:	b99b      	cbnz	r3, 800f06c <_vfiprintf_r+0x5c>
 800f044:	4629      	mov	r1, r5
 800f046:	4630      	mov	r0, r6
 800f048:	f000 f938 	bl	800f2bc <__swsetup_r>
 800f04c:	b170      	cbz	r0, 800f06c <_vfiprintf_r+0x5c>
 800f04e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f050:	07dc      	lsls	r4, r3, #31
 800f052:	d504      	bpl.n	800f05e <_vfiprintf_r+0x4e>
 800f054:	f04f 30ff 	mov.w	r0, #4294967295
 800f058:	b01d      	add	sp, #116	@ 0x74
 800f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f05e:	89ab      	ldrh	r3, [r5, #12]
 800f060:	0598      	lsls	r0, r3, #22
 800f062:	d4f7      	bmi.n	800f054 <_vfiprintf_r+0x44>
 800f064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f066:	f7fd fd8d 	bl	800cb84 <__retarget_lock_release_recursive>
 800f06a:	e7f3      	b.n	800f054 <_vfiprintf_r+0x44>
 800f06c:	2300      	movs	r3, #0
 800f06e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f070:	2320      	movs	r3, #32
 800f072:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f076:	f8cd 800c 	str.w	r8, [sp, #12]
 800f07a:	2330      	movs	r3, #48	@ 0x30
 800f07c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f22c <_vfiprintf_r+0x21c>
 800f080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f084:	f04f 0901 	mov.w	r9, #1
 800f088:	4623      	mov	r3, r4
 800f08a:	469a      	mov	sl, r3
 800f08c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f090:	b10a      	cbz	r2, 800f096 <_vfiprintf_r+0x86>
 800f092:	2a25      	cmp	r2, #37	@ 0x25
 800f094:	d1f9      	bne.n	800f08a <_vfiprintf_r+0x7a>
 800f096:	ebba 0b04 	subs.w	fp, sl, r4
 800f09a:	d00b      	beq.n	800f0b4 <_vfiprintf_r+0xa4>
 800f09c:	465b      	mov	r3, fp
 800f09e:	4622      	mov	r2, r4
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f7ff ffa2 	bl	800efec <__sfputs_r>
 800f0a8:	3001      	adds	r0, #1
 800f0aa:	f000 80a7 	beq.w	800f1fc <_vfiprintf_r+0x1ec>
 800f0ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0b0:	445a      	add	r2, fp
 800f0b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f000 809f 	beq.w	800f1fc <_vfiprintf_r+0x1ec>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0c8:	f10a 0a01 	add.w	sl, sl, #1
 800f0cc:	9304      	str	r3, [sp, #16]
 800f0ce:	9307      	str	r3, [sp, #28]
 800f0d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0d6:	4654      	mov	r4, sl
 800f0d8:	2205      	movs	r2, #5
 800f0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0de:	4853      	ldr	r0, [pc, #332]	@ (800f22c <_vfiprintf_r+0x21c>)
 800f0e0:	f7f1 f876 	bl	80001d0 <memchr>
 800f0e4:	9a04      	ldr	r2, [sp, #16]
 800f0e6:	b9d8      	cbnz	r0, 800f120 <_vfiprintf_r+0x110>
 800f0e8:	06d1      	lsls	r1, r2, #27
 800f0ea:	bf44      	itt	mi
 800f0ec:	2320      	movmi	r3, #32
 800f0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0f2:	0713      	lsls	r3, r2, #28
 800f0f4:	bf44      	itt	mi
 800f0f6:	232b      	movmi	r3, #43	@ 0x2b
 800f0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f100:	2b2a      	cmp	r3, #42	@ 0x2a
 800f102:	d015      	beq.n	800f130 <_vfiprintf_r+0x120>
 800f104:	9a07      	ldr	r2, [sp, #28]
 800f106:	4654      	mov	r4, sl
 800f108:	2000      	movs	r0, #0
 800f10a:	f04f 0c0a 	mov.w	ip, #10
 800f10e:	4621      	mov	r1, r4
 800f110:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f114:	3b30      	subs	r3, #48	@ 0x30
 800f116:	2b09      	cmp	r3, #9
 800f118:	d94b      	bls.n	800f1b2 <_vfiprintf_r+0x1a2>
 800f11a:	b1b0      	cbz	r0, 800f14a <_vfiprintf_r+0x13a>
 800f11c:	9207      	str	r2, [sp, #28]
 800f11e:	e014      	b.n	800f14a <_vfiprintf_r+0x13a>
 800f120:	eba0 0308 	sub.w	r3, r0, r8
 800f124:	fa09 f303 	lsl.w	r3, r9, r3
 800f128:	4313      	orrs	r3, r2
 800f12a:	9304      	str	r3, [sp, #16]
 800f12c:	46a2      	mov	sl, r4
 800f12e:	e7d2      	b.n	800f0d6 <_vfiprintf_r+0xc6>
 800f130:	9b03      	ldr	r3, [sp, #12]
 800f132:	1d19      	adds	r1, r3, #4
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	9103      	str	r1, [sp, #12]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	bfbb      	ittet	lt
 800f13c:	425b      	neglt	r3, r3
 800f13e:	f042 0202 	orrlt.w	r2, r2, #2
 800f142:	9307      	strge	r3, [sp, #28]
 800f144:	9307      	strlt	r3, [sp, #28]
 800f146:	bfb8      	it	lt
 800f148:	9204      	strlt	r2, [sp, #16]
 800f14a:	7823      	ldrb	r3, [r4, #0]
 800f14c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f14e:	d10a      	bne.n	800f166 <_vfiprintf_r+0x156>
 800f150:	7863      	ldrb	r3, [r4, #1]
 800f152:	2b2a      	cmp	r3, #42	@ 0x2a
 800f154:	d132      	bne.n	800f1bc <_vfiprintf_r+0x1ac>
 800f156:	9b03      	ldr	r3, [sp, #12]
 800f158:	1d1a      	adds	r2, r3, #4
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	9203      	str	r2, [sp, #12]
 800f15e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f162:	3402      	adds	r4, #2
 800f164:	9305      	str	r3, [sp, #20]
 800f166:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f23c <_vfiprintf_r+0x22c>
 800f16a:	7821      	ldrb	r1, [r4, #0]
 800f16c:	2203      	movs	r2, #3
 800f16e:	4650      	mov	r0, sl
 800f170:	f7f1 f82e 	bl	80001d0 <memchr>
 800f174:	b138      	cbz	r0, 800f186 <_vfiprintf_r+0x176>
 800f176:	9b04      	ldr	r3, [sp, #16]
 800f178:	eba0 000a 	sub.w	r0, r0, sl
 800f17c:	2240      	movs	r2, #64	@ 0x40
 800f17e:	4082      	lsls	r2, r0
 800f180:	4313      	orrs	r3, r2
 800f182:	3401      	adds	r4, #1
 800f184:	9304      	str	r3, [sp, #16]
 800f186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f18a:	4829      	ldr	r0, [pc, #164]	@ (800f230 <_vfiprintf_r+0x220>)
 800f18c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f190:	2206      	movs	r2, #6
 800f192:	f7f1 f81d 	bl	80001d0 <memchr>
 800f196:	2800      	cmp	r0, #0
 800f198:	d03f      	beq.n	800f21a <_vfiprintf_r+0x20a>
 800f19a:	4b26      	ldr	r3, [pc, #152]	@ (800f234 <_vfiprintf_r+0x224>)
 800f19c:	bb1b      	cbnz	r3, 800f1e6 <_vfiprintf_r+0x1d6>
 800f19e:	9b03      	ldr	r3, [sp, #12]
 800f1a0:	3307      	adds	r3, #7
 800f1a2:	f023 0307 	bic.w	r3, r3, #7
 800f1a6:	3308      	adds	r3, #8
 800f1a8:	9303      	str	r3, [sp, #12]
 800f1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1ac:	443b      	add	r3, r7
 800f1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1b0:	e76a      	b.n	800f088 <_vfiprintf_r+0x78>
 800f1b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	2001      	movs	r0, #1
 800f1ba:	e7a8      	b.n	800f10e <_vfiprintf_r+0xfe>
 800f1bc:	2300      	movs	r3, #0
 800f1be:	3401      	adds	r4, #1
 800f1c0:	9305      	str	r3, [sp, #20]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	f04f 0c0a 	mov.w	ip, #10
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1ce:	3a30      	subs	r2, #48	@ 0x30
 800f1d0:	2a09      	cmp	r2, #9
 800f1d2:	d903      	bls.n	800f1dc <_vfiprintf_r+0x1cc>
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d0c6      	beq.n	800f166 <_vfiprintf_r+0x156>
 800f1d8:	9105      	str	r1, [sp, #20]
 800f1da:	e7c4      	b.n	800f166 <_vfiprintf_r+0x156>
 800f1dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	e7f0      	b.n	800f1c8 <_vfiprintf_r+0x1b8>
 800f1e6:	ab03      	add	r3, sp, #12
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	462a      	mov	r2, r5
 800f1ec:	4b12      	ldr	r3, [pc, #72]	@ (800f238 <_vfiprintf_r+0x228>)
 800f1ee:	a904      	add	r1, sp, #16
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f7fc fce9 	bl	800bbc8 <_printf_float>
 800f1f6:	4607      	mov	r7, r0
 800f1f8:	1c78      	adds	r0, r7, #1
 800f1fa:	d1d6      	bne.n	800f1aa <_vfiprintf_r+0x19a>
 800f1fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1fe:	07d9      	lsls	r1, r3, #31
 800f200:	d405      	bmi.n	800f20e <_vfiprintf_r+0x1fe>
 800f202:	89ab      	ldrh	r3, [r5, #12]
 800f204:	059a      	lsls	r2, r3, #22
 800f206:	d402      	bmi.n	800f20e <_vfiprintf_r+0x1fe>
 800f208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f20a:	f7fd fcbb 	bl	800cb84 <__retarget_lock_release_recursive>
 800f20e:	89ab      	ldrh	r3, [r5, #12]
 800f210:	065b      	lsls	r3, r3, #25
 800f212:	f53f af1f 	bmi.w	800f054 <_vfiprintf_r+0x44>
 800f216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f218:	e71e      	b.n	800f058 <_vfiprintf_r+0x48>
 800f21a:	ab03      	add	r3, sp, #12
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	462a      	mov	r2, r5
 800f220:	4b05      	ldr	r3, [pc, #20]	@ (800f238 <_vfiprintf_r+0x228>)
 800f222:	a904      	add	r1, sp, #16
 800f224:	4630      	mov	r0, r6
 800f226:	f7fc ff67 	bl	800c0f8 <_printf_i>
 800f22a:	e7e4      	b.n	800f1f6 <_vfiprintf_r+0x1e6>
 800f22c:	08011688 	.word	0x08011688
 800f230:	08011692 	.word	0x08011692
 800f234:	0800bbc9 	.word	0x0800bbc9
 800f238:	0800efed 	.word	0x0800efed
 800f23c:	0801168e 	.word	0x0801168e

0800f240 <__swbuf_r>:
 800f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f242:	460e      	mov	r6, r1
 800f244:	4614      	mov	r4, r2
 800f246:	4605      	mov	r5, r0
 800f248:	b118      	cbz	r0, 800f252 <__swbuf_r+0x12>
 800f24a:	6a03      	ldr	r3, [r0, #32]
 800f24c:	b90b      	cbnz	r3, 800f252 <__swbuf_r+0x12>
 800f24e:	f7fd fb13 	bl	800c878 <__sinit>
 800f252:	69a3      	ldr	r3, [r4, #24]
 800f254:	60a3      	str	r3, [r4, #8]
 800f256:	89a3      	ldrh	r3, [r4, #12]
 800f258:	071a      	lsls	r2, r3, #28
 800f25a:	d501      	bpl.n	800f260 <__swbuf_r+0x20>
 800f25c:	6923      	ldr	r3, [r4, #16]
 800f25e:	b943      	cbnz	r3, 800f272 <__swbuf_r+0x32>
 800f260:	4621      	mov	r1, r4
 800f262:	4628      	mov	r0, r5
 800f264:	f000 f82a 	bl	800f2bc <__swsetup_r>
 800f268:	b118      	cbz	r0, 800f272 <__swbuf_r+0x32>
 800f26a:	f04f 37ff 	mov.w	r7, #4294967295
 800f26e:	4638      	mov	r0, r7
 800f270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f272:	6823      	ldr	r3, [r4, #0]
 800f274:	6922      	ldr	r2, [r4, #16]
 800f276:	1a98      	subs	r0, r3, r2
 800f278:	6963      	ldr	r3, [r4, #20]
 800f27a:	b2f6      	uxtb	r6, r6
 800f27c:	4283      	cmp	r3, r0
 800f27e:	4637      	mov	r7, r6
 800f280:	dc05      	bgt.n	800f28e <__swbuf_r+0x4e>
 800f282:	4621      	mov	r1, r4
 800f284:	4628      	mov	r0, r5
 800f286:	f7ff fded 	bl	800ee64 <_fflush_r>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d1ed      	bne.n	800f26a <__swbuf_r+0x2a>
 800f28e:	68a3      	ldr	r3, [r4, #8]
 800f290:	3b01      	subs	r3, #1
 800f292:	60a3      	str	r3, [r4, #8]
 800f294:	6823      	ldr	r3, [r4, #0]
 800f296:	1c5a      	adds	r2, r3, #1
 800f298:	6022      	str	r2, [r4, #0]
 800f29a:	701e      	strb	r6, [r3, #0]
 800f29c:	6962      	ldr	r2, [r4, #20]
 800f29e:	1c43      	adds	r3, r0, #1
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d004      	beq.n	800f2ae <__swbuf_r+0x6e>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	07db      	lsls	r3, r3, #31
 800f2a8:	d5e1      	bpl.n	800f26e <__swbuf_r+0x2e>
 800f2aa:	2e0a      	cmp	r6, #10
 800f2ac:	d1df      	bne.n	800f26e <__swbuf_r+0x2e>
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	f7ff fdd7 	bl	800ee64 <_fflush_r>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	d0d9      	beq.n	800f26e <__swbuf_r+0x2e>
 800f2ba:	e7d6      	b.n	800f26a <__swbuf_r+0x2a>

0800f2bc <__swsetup_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4b29      	ldr	r3, [pc, #164]	@ (800f364 <__swsetup_r+0xa8>)
 800f2c0:	4605      	mov	r5, r0
 800f2c2:	6818      	ldr	r0, [r3, #0]
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	b118      	cbz	r0, 800f2d0 <__swsetup_r+0x14>
 800f2c8:	6a03      	ldr	r3, [r0, #32]
 800f2ca:	b90b      	cbnz	r3, 800f2d0 <__swsetup_r+0x14>
 800f2cc:	f7fd fad4 	bl	800c878 <__sinit>
 800f2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2d4:	0719      	lsls	r1, r3, #28
 800f2d6:	d422      	bmi.n	800f31e <__swsetup_r+0x62>
 800f2d8:	06da      	lsls	r2, r3, #27
 800f2da:	d407      	bmi.n	800f2ec <__swsetup_r+0x30>
 800f2dc:	2209      	movs	r2, #9
 800f2de:	602a      	str	r2, [r5, #0]
 800f2e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2e4:	81a3      	strh	r3, [r4, #12]
 800f2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ea:	e033      	b.n	800f354 <__swsetup_r+0x98>
 800f2ec:	0758      	lsls	r0, r3, #29
 800f2ee:	d512      	bpl.n	800f316 <__swsetup_r+0x5a>
 800f2f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2f2:	b141      	cbz	r1, 800f306 <__swsetup_r+0x4a>
 800f2f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2f8:	4299      	cmp	r1, r3
 800f2fa:	d002      	beq.n	800f302 <__swsetup_r+0x46>
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f7fe facb 	bl	800d898 <_free_r>
 800f302:	2300      	movs	r3, #0
 800f304:	6363      	str	r3, [r4, #52]	@ 0x34
 800f306:	89a3      	ldrh	r3, [r4, #12]
 800f308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f30c:	81a3      	strh	r3, [r4, #12]
 800f30e:	2300      	movs	r3, #0
 800f310:	6063      	str	r3, [r4, #4]
 800f312:	6923      	ldr	r3, [r4, #16]
 800f314:	6023      	str	r3, [r4, #0]
 800f316:	89a3      	ldrh	r3, [r4, #12]
 800f318:	f043 0308 	orr.w	r3, r3, #8
 800f31c:	81a3      	strh	r3, [r4, #12]
 800f31e:	6923      	ldr	r3, [r4, #16]
 800f320:	b94b      	cbnz	r3, 800f336 <__swsetup_r+0x7a>
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f32c:	d003      	beq.n	800f336 <__swsetup_r+0x7a>
 800f32e:	4621      	mov	r1, r4
 800f330:	4628      	mov	r0, r5
 800f332:	f000 f88b 	bl	800f44c <__smakebuf_r>
 800f336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f33a:	f013 0201 	ands.w	r2, r3, #1
 800f33e:	d00a      	beq.n	800f356 <__swsetup_r+0x9a>
 800f340:	2200      	movs	r2, #0
 800f342:	60a2      	str	r2, [r4, #8]
 800f344:	6962      	ldr	r2, [r4, #20]
 800f346:	4252      	negs	r2, r2
 800f348:	61a2      	str	r2, [r4, #24]
 800f34a:	6922      	ldr	r2, [r4, #16]
 800f34c:	b942      	cbnz	r2, 800f360 <__swsetup_r+0xa4>
 800f34e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f352:	d1c5      	bne.n	800f2e0 <__swsetup_r+0x24>
 800f354:	bd38      	pop	{r3, r4, r5, pc}
 800f356:	0799      	lsls	r1, r3, #30
 800f358:	bf58      	it	pl
 800f35a:	6962      	ldrpl	r2, [r4, #20]
 800f35c:	60a2      	str	r2, [r4, #8]
 800f35e:	e7f4      	b.n	800f34a <__swsetup_r+0x8e>
 800f360:	2000      	movs	r0, #0
 800f362:	e7f7      	b.n	800f354 <__swsetup_r+0x98>
 800f364:	20000264 	.word	0x20000264

0800f368 <_raise_r>:
 800f368:	291f      	cmp	r1, #31
 800f36a:	b538      	push	{r3, r4, r5, lr}
 800f36c:	4605      	mov	r5, r0
 800f36e:	460c      	mov	r4, r1
 800f370:	d904      	bls.n	800f37c <_raise_r+0x14>
 800f372:	2316      	movs	r3, #22
 800f374:	6003      	str	r3, [r0, #0]
 800f376:	f04f 30ff 	mov.w	r0, #4294967295
 800f37a:	bd38      	pop	{r3, r4, r5, pc}
 800f37c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f37e:	b112      	cbz	r2, 800f386 <_raise_r+0x1e>
 800f380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f384:	b94b      	cbnz	r3, 800f39a <_raise_r+0x32>
 800f386:	4628      	mov	r0, r5
 800f388:	f000 f830 	bl	800f3ec <_getpid_r>
 800f38c:	4622      	mov	r2, r4
 800f38e:	4601      	mov	r1, r0
 800f390:	4628      	mov	r0, r5
 800f392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f396:	f000 b817 	b.w	800f3c8 <_kill_r>
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d00a      	beq.n	800f3b4 <_raise_r+0x4c>
 800f39e:	1c59      	adds	r1, r3, #1
 800f3a0:	d103      	bne.n	800f3aa <_raise_r+0x42>
 800f3a2:	2316      	movs	r3, #22
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	2001      	movs	r0, #1
 800f3a8:	e7e7      	b.n	800f37a <_raise_r+0x12>
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	4798      	blx	r3
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e7e0      	b.n	800f37a <_raise_r+0x12>

0800f3b8 <raise>:
 800f3b8:	4b02      	ldr	r3, [pc, #8]	@ (800f3c4 <raise+0xc>)
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	f7ff bfd3 	b.w	800f368 <_raise_r>
 800f3c2:	bf00      	nop
 800f3c4:	20000264 	.word	0x20000264

0800f3c8 <_kill_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4d07      	ldr	r5, [pc, #28]	@ (800f3e8 <_kill_r+0x20>)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	602b      	str	r3, [r5, #0]
 800f3d6:	f7f7 fe89 	bl	80070ec <_kill>
 800f3da:	1c43      	adds	r3, r0, #1
 800f3dc:	d102      	bne.n	800f3e4 <_kill_r+0x1c>
 800f3de:	682b      	ldr	r3, [r5, #0]
 800f3e0:	b103      	cbz	r3, 800f3e4 <_kill_r+0x1c>
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	bd38      	pop	{r3, r4, r5, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20000770 	.word	0x20000770

0800f3ec <_getpid_r>:
 800f3ec:	f7f7 be76 	b.w	80070dc <_getpid>

0800f3f0 <_malloc_usable_size_r>:
 800f3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3f4:	1f18      	subs	r0, r3, #4
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	bfbc      	itt	lt
 800f3fa:	580b      	ldrlt	r3, [r1, r0]
 800f3fc:	18c0      	addlt	r0, r0, r3
 800f3fe:	4770      	bx	lr

0800f400 <__swhatbuf_r>:
 800f400:	b570      	push	{r4, r5, r6, lr}
 800f402:	460c      	mov	r4, r1
 800f404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f408:	2900      	cmp	r1, #0
 800f40a:	b096      	sub	sp, #88	@ 0x58
 800f40c:	4615      	mov	r5, r2
 800f40e:	461e      	mov	r6, r3
 800f410:	da0d      	bge.n	800f42e <__swhatbuf_r+0x2e>
 800f412:	89a3      	ldrh	r3, [r4, #12]
 800f414:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f418:	f04f 0100 	mov.w	r1, #0
 800f41c:	bf14      	ite	ne
 800f41e:	2340      	movne	r3, #64	@ 0x40
 800f420:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f424:	2000      	movs	r0, #0
 800f426:	6031      	str	r1, [r6, #0]
 800f428:	602b      	str	r3, [r5, #0]
 800f42a:	b016      	add	sp, #88	@ 0x58
 800f42c:	bd70      	pop	{r4, r5, r6, pc}
 800f42e:	466a      	mov	r2, sp
 800f430:	f000 f848 	bl	800f4c4 <_fstat_r>
 800f434:	2800      	cmp	r0, #0
 800f436:	dbec      	blt.n	800f412 <__swhatbuf_r+0x12>
 800f438:	9901      	ldr	r1, [sp, #4]
 800f43a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f43e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f442:	4259      	negs	r1, r3
 800f444:	4159      	adcs	r1, r3
 800f446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f44a:	e7eb      	b.n	800f424 <__swhatbuf_r+0x24>

0800f44c <__smakebuf_r>:
 800f44c:	898b      	ldrh	r3, [r1, #12]
 800f44e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f450:	079d      	lsls	r5, r3, #30
 800f452:	4606      	mov	r6, r0
 800f454:	460c      	mov	r4, r1
 800f456:	d507      	bpl.n	800f468 <__smakebuf_r+0x1c>
 800f458:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	6123      	str	r3, [r4, #16]
 800f460:	2301      	movs	r3, #1
 800f462:	6163      	str	r3, [r4, #20]
 800f464:	b003      	add	sp, #12
 800f466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f468:	ab01      	add	r3, sp, #4
 800f46a:	466a      	mov	r2, sp
 800f46c:	f7ff ffc8 	bl	800f400 <__swhatbuf_r>
 800f470:	9f00      	ldr	r7, [sp, #0]
 800f472:	4605      	mov	r5, r0
 800f474:	4639      	mov	r1, r7
 800f476:	4630      	mov	r0, r6
 800f478:	f7fe fdbc 	bl	800dff4 <_malloc_r>
 800f47c:	b948      	cbnz	r0, 800f492 <__smakebuf_r+0x46>
 800f47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f482:	059a      	lsls	r2, r3, #22
 800f484:	d4ee      	bmi.n	800f464 <__smakebuf_r+0x18>
 800f486:	f023 0303 	bic.w	r3, r3, #3
 800f48a:	f043 0302 	orr.w	r3, r3, #2
 800f48e:	81a3      	strh	r3, [r4, #12]
 800f490:	e7e2      	b.n	800f458 <__smakebuf_r+0xc>
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	6020      	str	r0, [r4, #0]
 800f496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f49a:	81a3      	strh	r3, [r4, #12]
 800f49c:	9b01      	ldr	r3, [sp, #4]
 800f49e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f4a2:	b15b      	cbz	r3, 800f4bc <__smakebuf_r+0x70>
 800f4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f000 f81d 	bl	800f4e8 <_isatty_r>
 800f4ae:	b128      	cbz	r0, 800f4bc <__smakebuf_r+0x70>
 800f4b0:	89a3      	ldrh	r3, [r4, #12]
 800f4b2:	f023 0303 	bic.w	r3, r3, #3
 800f4b6:	f043 0301 	orr.w	r3, r3, #1
 800f4ba:	81a3      	strh	r3, [r4, #12]
 800f4bc:	89a3      	ldrh	r3, [r4, #12]
 800f4be:	431d      	orrs	r5, r3
 800f4c0:	81a5      	strh	r5, [r4, #12]
 800f4c2:	e7cf      	b.n	800f464 <__smakebuf_r+0x18>

0800f4c4 <_fstat_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4d07      	ldr	r5, [pc, #28]	@ (800f4e4 <_fstat_r+0x20>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	f7f7 fe6b 	bl	80071ac <_fstat>
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	d102      	bne.n	800f4e0 <_fstat_r+0x1c>
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	b103      	cbz	r3, 800f4e0 <_fstat_r+0x1c>
 800f4de:	6023      	str	r3, [r4, #0]
 800f4e0:	bd38      	pop	{r3, r4, r5, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000770 	.word	0x20000770

0800f4e8 <_isatty_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4d06      	ldr	r5, [pc, #24]	@ (800f504 <_isatty_r+0x1c>)
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	f7f7 fe6a 	bl	80071cc <_isatty>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_isatty_r+0x1a>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_isatty_r+0x1a>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	20000770 	.word	0x20000770

0800f508 <atan2>:
 800f508:	f000 baee 	b.w	800fae8 <__ieee754_atan2>
 800f50c:	0000      	movs	r0, r0
	...

0800f510 <hypot>:
 800f510:	b508      	push	{r3, lr}
 800f512:	ed2d 8b06 	vpush	{d8-d10}
 800f516:	eeb0 aa40 	vmov.f32	s20, s0
 800f51a:	eef0 aa60 	vmov.f32	s21, s1
 800f51e:	eeb0 9a41 	vmov.f32	s18, s2
 800f522:	eef0 9a61 	vmov.f32	s19, s3
 800f526:	f000 fba5 	bl	800fc74 <__ieee754_hypot>
 800f52a:	eeb0 8a40 	vmov.f32	s16, s0
 800f52e:	eef0 8a60 	vmov.f32	s17, s1
 800f532:	f000 f8c9 	bl	800f6c8 <finite>
 800f536:	b998      	cbnz	r0, 800f560 <hypot+0x50>
 800f538:	eeb0 0a4a 	vmov.f32	s0, s20
 800f53c:	eef0 0a6a 	vmov.f32	s1, s21
 800f540:	f000 f8c2 	bl	800f6c8 <finite>
 800f544:	b160      	cbz	r0, 800f560 <hypot+0x50>
 800f546:	eeb0 0a49 	vmov.f32	s0, s18
 800f54a:	eef0 0a69 	vmov.f32	s1, s19
 800f54e:	f000 f8bb 	bl	800f6c8 <finite>
 800f552:	b128      	cbz	r0, 800f560 <hypot+0x50>
 800f554:	f7fd faea 	bl	800cb2c <__errno>
 800f558:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800f570 <hypot+0x60>
 800f55c:	2322      	movs	r3, #34	@ 0x22
 800f55e:	6003      	str	r3, [r0, #0]
 800f560:	eeb0 0a48 	vmov.f32	s0, s16
 800f564:	eef0 0a68 	vmov.f32	s1, s17
 800f568:	ecbd 8b06 	vpop	{d8-d10}
 800f56c:	bd08      	pop	{r3, pc}
 800f56e:	bf00      	nop
 800f570:	00000000 	.word	0x00000000
 800f574:	7ff00000 	.word	0x7ff00000

0800f578 <cos>:
 800f578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f57a:	ec53 2b10 	vmov	r2, r3, d0
 800f57e:	4826      	ldr	r0, [pc, #152]	@ (800f618 <cos+0xa0>)
 800f580:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f584:	4281      	cmp	r1, r0
 800f586:	d806      	bhi.n	800f596 <cos+0x1e>
 800f588:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f610 <cos+0x98>
 800f58c:	b005      	add	sp, #20
 800f58e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f592:	f000 b925 	b.w	800f7e0 <__kernel_cos>
 800f596:	4821      	ldr	r0, [pc, #132]	@ (800f61c <cos+0xa4>)
 800f598:	4281      	cmp	r1, r0
 800f59a:	d908      	bls.n	800f5ae <cos+0x36>
 800f59c:	4610      	mov	r0, r2
 800f59e:	4619      	mov	r1, r3
 800f5a0:	f7f0 fe72 	bl	8000288 <__aeabi_dsub>
 800f5a4:	ec41 0b10 	vmov	d0, r0, r1
 800f5a8:	b005      	add	sp, #20
 800f5aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5ae:	4668      	mov	r0, sp
 800f5b0:	f000 fc76 	bl	800fea0 <__ieee754_rem_pio2>
 800f5b4:	f000 0003 	and.w	r0, r0, #3
 800f5b8:	2801      	cmp	r0, #1
 800f5ba:	d00b      	beq.n	800f5d4 <cos+0x5c>
 800f5bc:	2802      	cmp	r0, #2
 800f5be:	d015      	beq.n	800f5ec <cos+0x74>
 800f5c0:	b9d8      	cbnz	r0, 800f5fa <cos+0x82>
 800f5c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5c6:	ed9d 0b00 	vldr	d0, [sp]
 800f5ca:	f000 f909 	bl	800f7e0 <__kernel_cos>
 800f5ce:	ec51 0b10 	vmov	r0, r1, d0
 800f5d2:	e7e7      	b.n	800f5a4 <cos+0x2c>
 800f5d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5d8:	ed9d 0b00 	vldr	d0, [sp]
 800f5dc:	f000 f9c8 	bl	800f970 <__kernel_sin>
 800f5e0:	ec53 2b10 	vmov	r2, r3, d0
 800f5e4:	4610      	mov	r0, r2
 800f5e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f5ea:	e7db      	b.n	800f5a4 <cos+0x2c>
 800f5ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5f0:	ed9d 0b00 	vldr	d0, [sp]
 800f5f4:	f000 f8f4 	bl	800f7e0 <__kernel_cos>
 800f5f8:	e7f2      	b.n	800f5e0 <cos+0x68>
 800f5fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5fe:	ed9d 0b00 	vldr	d0, [sp]
 800f602:	2001      	movs	r0, #1
 800f604:	f000 f9b4 	bl	800f970 <__kernel_sin>
 800f608:	e7e1      	b.n	800f5ce <cos+0x56>
 800f60a:	bf00      	nop
 800f60c:	f3af 8000 	nop.w
	...
 800f618:	3fe921fb 	.word	0x3fe921fb
 800f61c:	7fefffff 	.word	0x7fefffff

0800f620 <sin>:
 800f620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f622:	ec53 2b10 	vmov	r2, r3, d0
 800f626:	4826      	ldr	r0, [pc, #152]	@ (800f6c0 <sin+0xa0>)
 800f628:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f62c:	4281      	cmp	r1, r0
 800f62e:	d807      	bhi.n	800f640 <sin+0x20>
 800f630:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f6b8 <sin+0x98>
 800f634:	2000      	movs	r0, #0
 800f636:	b005      	add	sp, #20
 800f638:	f85d eb04 	ldr.w	lr, [sp], #4
 800f63c:	f000 b998 	b.w	800f970 <__kernel_sin>
 800f640:	4820      	ldr	r0, [pc, #128]	@ (800f6c4 <sin+0xa4>)
 800f642:	4281      	cmp	r1, r0
 800f644:	d908      	bls.n	800f658 <sin+0x38>
 800f646:	4610      	mov	r0, r2
 800f648:	4619      	mov	r1, r3
 800f64a:	f7f0 fe1d 	bl	8000288 <__aeabi_dsub>
 800f64e:	ec41 0b10 	vmov	d0, r0, r1
 800f652:	b005      	add	sp, #20
 800f654:	f85d fb04 	ldr.w	pc, [sp], #4
 800f658:	4668      	mov	r0, sp
 800f65a:	f000 fc21 	bl	800fea0 <__ieee754_rem_pio2>
 800f65e:	f000 0003 	and.w	r0, r0, #3
 800f662:	2801      	cmp	r0, #1
 800f664:	d00c      	beq.n	800f680 <sin+0x60>
 800f666:	2802      	cmp	r0, #2
 800f668:	d011      	beq.n	800f68e <sin+0x6e>
 800f66a:	b9e8      	cbnz	r0, 800f6a8 <sin+0x88>
 800f66c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f670:	ed9d 0b00 	vldr	d0, [sp]
 800f674:	2001      	movs	r0, #1
 800f676:	f000 f97b 	bl	800f970 <__kernel_sin>
 800f67a:	ec51 0b10 	vmov	r0, r1, d0
 800f67e:	e7e6      	b.n	800f64e <sin+0x2e>
 800f680:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f684:	ed9d 0b00 	vldr	d0, [sp]
 800f688:	f000 f8aa 	bl	800f7e0 <__kernel_cos>
 800f68c:	e7f5      	b.n	800f67a <sin+0x5a>
 800f68e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f692:	ed9d 0b00 	vldr	d0, [sp]
 800f696:	2001      	movs	r0, #1
 800f698:	f000 f96a 	bl	800f970 <__kernel_sin>
 800f69c:	ec53 2b10 	vmov	r2, r3, d0
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f6a6:	e7d2      	b.n	800f64e <sin+0x2e>
 800f6a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6ac:	ed9d 0b00 	vldr	d0, [sp]
 800f6b0:	f000 f896 	bl	800f7e0 <__kernel_cos>
 800f6b4:	e7f2      	b.n	800f69c <sin+0x7c>
 800f6b6:	bf00      	nop
	...
 800f6c0:	3fe921fb 	.word	0x3fe921fb
 800f6c4:	7fefffff 	.word	0x7fefffff

0800f6c8 <finite>:
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	ed8d 0b00 	vstr	d0, [sp]
 800f6ce:	9801      	ldr	r0, [sp, #4]
 800f6d0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f6d4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f6d8:	0fc0      	lsrs	r0, r0, #31
 800f6da:	b002      	add	sp, #8
 800f6dc:	4770      	bx	lr

0800f6de <fmax>:
 800f6de:	b508      	push	{r3, lr}
 800f6e0:	ed2d 8b04 	vpush	{d8-d9}
 800f6e4:	eeb0 8a40 	vmov.f32	s16, s0
 800f6e8:	eef0 8a60 	vmov.f32	s17, s1
 800f6ec:	eeb0 9a41 	vmov.f32	s18, s2
 800f6f0:	eef0 9a61 	vmov.f32	s19, s3
 800f6f4:	f000 f848 	bl	800f788 <__fpclassifyd>
 800f6f8:	b950      	cbnz	r0, 800f710 <fmax+0x32>
 800f6fa:	eeb0 8a49 	vmov.f32	s16, s18
 800f6fe:	eef0 8a69 	vmov.f32	s17, s19
 800f702:	eeb0 0a48 	vmov.f32	s0, s16
 800f706:	eef0 0a68 	vmov.f32	s1, s17
 800f70a:	ecbd 8b04 	vpop	{d8-d9}
 800f70e:	bd08      	pop	{r3, pc}
 800f710:	eeb0 0a49 	vmov.f32	s0, s18
 800f714:	eef0 0a69 	vmov.f32	s1, s19
 800f718:	f000 f836 	bl	800f788 <__fpclassifyd>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d0f0      	beq.n	800f702 <fmax+0x24>
 800f720:	ec53 2b19 	vmov	r2, r3, d9
 800f724:	ec51 0b18 	vmov	r0, r1, d8
 800f728:	f7f1 f9f6 	bl	8000b18 <__aeabi_dcmpgt>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d0e4      	beq.n	800f6fa <fmax+0x1c>
 800f730:	e7e7      	b.n	800f702 <fmax+0x24>

0800f732 <fmin>:
 800f732:	b508      	push	{r3, lr}
 800f734:	ed2d 8b04 	vpush	{d8-d9}
 800f738:	eeb0 8a40 	vmov.f32	s16, s0
 800f73c:	eef0 8a60 	vmov.f32	s17, s1
 800f740:	eeb0 9a41 	vmov.f32	s18, s2
 800f744:	eef0 9a61 	vmov.f32	s19, s3
 800f748:	f000 f81e 	bl	800f788 <__fpclassifyd>
 800f74c:	b950      	cbnz	r0, 800f764 <fmin+0x32>
 800f74e:	eeb0 8a49 	vmov.f32	s16, s18
 800f752:	eef0 8a69 	vmov.f32	s17, s19
 800f756:	eeb0 0a48 	vmov.f32	s0, s16
 800f75a:	eef0 0a68 	vmov.f32	s1, s17
 800f75e:	ecbd 8b04 	vpop	{d8-d9}
 800f762:	bd08      	pop	{r3, pc}
 800f764:	eeb0 0a49 	vmov.f32	s0, s18
 800f768:	eef0 0a69 	vmov.f32	s1, s19
 800f76c:	f000 f80c 	bl	800f788 <__fpclassifyd>
 800f770:	2800      	cmp	r0, #0
 800f772:	d0f0      	beq.n	800f756 <fmin+0x24>
 800f774:	ec53 2b19 	vmov	r2, r3, d9
 800f778:	ec51 0b18 	vmov	r0, r1, d8
 800f77c:	f7f1 f9ae 	bl	8000adc <__aeabi_dcmplt>
 800f780:	2800      	cmp	r0, #0
 800f782:	d0e4      	beq.n	800f74e <fmin+0x1c>
 800f784:	e7e7      	b.n	800f756 <fmin+0x24>
	...

0800f788 <__fpclassifyd>:
 800f788:	ec51 0b10 	vmov	r0, r1, d0
 800f78c:	b510      	push	{r4, lr}
 800f78e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800f792:	460b      	mov	r3, r1
 800f794:	d019      	beq.n	800f7ca <__fpclassifyd+0x42>
 800f796:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800f79a:	490e      	ldr	r1, [pc, #56]	@ (800f7d4 <__fpclassifyd+0x4c>)
 800f79c:	428a      	cmp	r2, r1
 800f79e:	d90e      	bls.n	800f7be <__fpclassifyd+0x36>
 800f7a0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800f7a4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800f7a8:	428a      	cmp	r2, r1
 800f7aa:	d908      	bls.n	800f7be <__fpclassifyd+0x36>
 800f7ac:	4a0a      	ldr	r2, [pc, #40]	@ (800f7d8 <__fpclassifyd+0x50>)
 800f7ae:	4213      	tst	r3, r2
 800f7b0:	d007      	beq.n	800f7c2 <__fpclassifyd+0x3a>
 800f7b2:	4294      	cmp	r4, r2
 800f7b4:	d107      	bne.n	800f7c6 <__fpclassifyd+0x3e>
 800f7b6:	fab0 f080 	clz	r0, r0
 800f7ba:	0940      	lsrs	r0, r0, #5
 800f7bc:	bd10      	pop	{r4, pc}
 800f7be:	2004      	movs	r0, #4
 800f7c0:	e7fc      	b.n	800f7bc <__fpclassifyd+0x34>
 800f7c2:	2003      	movs	r0, #3
 800f7c4:	e7fa      	b.n	800f7bc <__fpclassifyd+0x34>
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	e7f8      	b.n	800f7bc <__fpclassifyd+0x34>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	d1ee      	bne.n	800f7ac <__fpclassifyd+0x24>
 800f7ce:	2002      	movs	r0, #2
 800f7d0:	e7f4      	b.n	800f7bc <__fpclassifyd+0x34>
 800f7d2:	bf00      	nop
 800f7d4:	7fdfffff 	.word	0x7fdfffff
 800f7d8:	7ff00000 	.word	0x7ff00000
 800f7dc:	00000000 	.word	0x00000000

0800f7e0 <__kernel_cos>:
 800f7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e4:	ec57 6b10 	vmov	r6, r7, d0
 800f7e8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f7ec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f7f0:	ed8d 1b00 	vstr	d1, [sp]
 800f7f4:	d206      	bcs.n	800f804 <__kernel_cos+0x24>
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	f7f1 f9ad 	bl	8000b58 <__aeabi_d2iz>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	f000 8088 	beq.w	800f914 <__kernel_cos+0x134>
 800f804:	4632      	mov	r2, r6
 800f806:	463b      	mov	r3, r7
 800f808:	4630      	mov	r0, r6
 800f80a:	4639      	mov	r1, r7
 800f80c:	f7f0 fef4 	bl	80005f8 <__aeabi_dmul>
 800f810:	4b51      	ldr	r3, [pc, #324]	@ (800f958 <__kernel_cos+0x178>)
 800f812:	2200      	movs	r2, #0
 800f814:	4604      	mov	r4, r0
 800f816:	460d      	mov	r5, r1
 800f818:	f7f0 feee 	bl	80005f8 <__aeabi_dmul>
 800f81c:	a340      	add	r3, pc, #256	@ (adr r3, 800f920 <__kernel_cos+0x140>)
 800f81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f822:	4682      	mov	sl, r0
 800f824:	468b      	mov	fp, r1
 800f826:	4620      	mov	r0, r4
 800f828:	4629      	mov	r1, r5
 800f82a:	f7f0 fee5 	bl	80005f8 <__aeabi_dmul>
 800f82e:	a33e      	add	r3, pc, #248	@ (adr r3, 800f928 <__kernel_cos+0x148>)
 800f830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f834:	f7f0 fd2a 	bl	800028c <__adddf3>
 800f838:	4622      	mov	r2, r4
 800f83a:	462b      	mov	r3, r5
 800f83c:	f7f0 fedc 	bl	80005f8 <__aeabi_dmul>
 800f840:	a33b      	add	r3, pc, #236	@ (adr r3, 800f930 <__kernel_cos+0x150>)
 800f842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f846:	f7f0 fd1f 	bl	8000288 <__aeabi_dsub>
 800f84a:	4622      	mov	r2, r4
 800f84c:	462b      	mov	r3, r5
 800f84e:	f7f0 fed3 	bl	80005f8 <__aeabi_dmul>
 800f852:	a339      	add	r3, pc, #228	@ (adr r3, 800f938 <__kernel_cos+0x158>)
 800f854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f858:	f7f0 fd18 	bl	800028c <__adddf3>
 800f85c:	4622      	mov	r2, r4
 800f85e:	462b      	mov	r3, r5
 800f860:	f7f0 feca 	bl	80005f8 <__aeabi_dmul>
 800f864:	a336      	add	r3, pc, #216	@ (adr r3, 800f940 <__kernel_cos+0x160>)
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	f7f0 fd0d 	bl	8000288 <__aeabi_dsub>
 800f86e:	4622      	mov	r2, r4
 800f870:	462b      	mov	r3, r5
 800f872:	f7f0 fec1 	bl	80005f8 <__aeabi_dmul>
 800f876:	a334      	add	r3, pc, #208	@ (adr r3, 800f948 <__kernel_cos+0x168>)
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	f7f0 fd06 	bl	800028c <__adddf3>
 800f880:	4622      	mov	r2, r4
 800f882:	462b      	mov	r3, r5
 800f884:	f7f0 feb8 	bl	80005f8 <__aeabi_dmul>
 800f888:	4622      	mov	r2, r4
 800f88a:	462b      	mov	r3, r5
 800f88c:	f7f0 feb4 	bl	80005f8 <__aeabi_dmul>
 800f890:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f894:	4604      	mov	r4, r0
 800f896:	460d      	mov	r5, r1
 800f898:	4630      	mov	r0, r6
 800f89a:	4639      	mov	r1, r7
 800f89c:	f7f0 feac 	bl	80005f8 <__aeabi_dmul>
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f7f0 fcee 	bl	8000288 <__aeabi_dsub>
 800f8ac:	4b2b      	ldr	r3, [pc, #172]	@ (800f95c <__kernel_cos+0x17c>)
 800f8ae:	4598      	cmp	r8, r3
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	460f      	mov	r7, r1
 800f8b4:	d810      	bhi.n	800f8d8 <__kernel_cos+0xf8>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	4650      	mov	r0, sl
 800f8bc:	4659      	mov	r1, fp
 800f8be:	f7f0 fce3 	bl	8000288 <__aeabi_dsub>
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	4926      	ldr	r1, [pc, #152]	@ (800f960 <__kernel_cos+0x180>)
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	f7f0 fcdd 	bl	8000288 <__aeabi_dsub>
 800f8ce:	ec41 0b10 	vmov	d0, r0, r1
 800f8d2:	b003      	add	sp, #12
 800f8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d8:	4b22      	ldr	r3, [pc, #136]	@ (800f964 <__kernel_cos+0x184>)
 800f8da:	4921      	ldr	r1, [pc, #132]	@ (800f960 <__kernel_cos+0x180>)
 800f8dc:	4598      	cmp	r8, r3
 800f8de:	bf8c      	ite	hi
 800f8e0:	4d21      	ldrhi	r5, [pc, #132]	@ (800f968 <__kernel_cos+0x188>)
 800f8e2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f8e6:	2400      	movs	r4, #0
 800f8e8:	4622      	mov	r2, r4
 800f8ea:	462b      	mov	r3, r5
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	f7f0 fccb 	bl	8000288 <__aeabi_dsub>
 800f8f2:	4622      	mov	r2, r4
 800f8f4:	4680      	mov	r8, r0
 800f8f6:	4689      	mov	r9, r1
 800f8f8:	462b      	mov	r3, r5
 800f8fa:	4650      	mov	r0, sl
 800f8fc:	4659      	mov	r1, fp
 800f8fe:	f7f0 fcc3 	bl	8000288 <__aeabi_dsub>
 800f902:	4632      	mov	r2, r6
 800f904:	463b      	mov	r3, r7
 800f906:	f7f0 fcbf 	bl	8000288 <__aeabi_dsub>
 800f90a:	4602      	mov	r2, r0
 800f90c:	460b      	mov	r3, r1
 800f90e:	4640      	mov	r0, r8
 800f910:	4649      	mov	r1, r9
 800f912:	e7da      	b.n	800f8ca <__kernel_cos+0xea>
 800f914:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f950 <__kernel_cos+0x170>
 800f918:	e7db      	b.n	800f8d2 <__kernel_cos+0xf2>
 800f91a:	bf00      	nop
 800f91c:	f3af 8000 	nop.w
 800f920:	be8838d4 	.word	0xbe8838d4
 800f924:	bda8fae9 	.word	0xbda8fae9
 800f928:	bdb4b1c4 	.word	0xbdb4b1c4
 800f92c:	3e21ee9e 	.word	0x3e21ee9e
 800f930:	809c52ad 	.word	0x809c52ad
 800f934:	3e927e4f 	.word	0x3e927e4f
 800f938:	19cb1590 	.word	0x19cb1590
 800f93c:	3efa01a0 	.word	0x3efa01a0
 800f940:	16c15177 	.word	0x16c15177
 800f944:	3f56c16c 	.word	0x3f56c16c
 800f948:	5555554c 	.word	0x5555554c
 800f94c:	3fa55555 	.word	0x3fa55555
 800f950:	00000000 	.word	0x00000000
 800f954:	3ff00000 	.word	0x3ff00000
 800f958:	3fe00000 	.word	0x3fe00000
 800f95c:	3fd33332 	.word	0x3fd33332
 800f960:	3ff00000 	.word	0x3ff00000
 800f964:	3fe90000 	.word	0x3fe90000
 800f968:	3fd20000 	.word	0x3fd20000
 800f96c:	00000000 	.word	0x00000000

0800f970 <__kernel_sin>:
 800f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f974:	ec55 4b10 	vmov	r4, r5, d0
 800f978:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f97c:	b085      	sub	sp, #20
 800f97e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f982:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f986:	4680      	mov	r8, r0
 800f988:	d205      	bcs.n	800f996 <__kernel_sin+0x26>
 800f98a:	4620      	mov	r0, r4
 800f98c:	4629      	mov	r1, r5
 800f98e:	f7f1 f8e3 	bl	8000b58 <__aeabi_d2iz>
 800f992:	2800      	cmp	r0, #0
 800f994:	d052      	beq.n	800fa3c <__kernel_sin+0xcc>
 800f996:	4622      	mov	r2, r4
 800f998:	462b      	mov	r3, r5
 800f99a:	4620      	mov	r0, r4
 800f99c:	4629      	mov	r1, r5
 800f99e:	f7f0 fe2b 	bl	80005f8 <__aeabi_dmul>
 800f9a2:	4682      	mov	sl, r0
 800f9a4:	468b      	mov	fp, r1
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	f7f0 fe23 	bl	80005f8 <__aeabi_dmul>
 800f9b2:	a342      	add	r3, pc, #264	@ (adr r3, 800fabc <__kernel_sin+0x14c>)
 800f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b8:	e9cd 0100 	strd	r0, r1, [sp]
 800f9bc:	4650      	mov	r0, sl
 800f9be:	4659      	mov	r1, fp
 800f9c0:	f7f0 fe1a 	bl	80005f8 <__aeabi_dmul>
 800f9c4:	a33f      	add	r3, pc, #252	@ (adr r3, 800fac4 <__kernel_sin+0x154>)
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	f7f0 fc5d 	bl	8000288 <__aeabi_dsub>
 800f9ce:	4652      	mov	r2, sl
 800f9d0:	465b      	mov	r3, fp
 800f9d2:	f7f0 fe11 	bl	80005f8 <__aeabi_dmul>
 800f9d6:	a33d      	add	r3, pc, #244	@ (adr r3, 800facc <__kernel_sin+0x15c>)
 800f9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9dc:	f7f0 fc56 	bl	800028c <__adddf3>
 800f9e0:	4652      	mov	r2, sl
 800f9e2:	465b      	mov	r3, fp
 800f9e4:	f7f0 fe08 	bl	80005f8 <__aeabi_dmul>
 800f9e8:	a33a      	add	r3, pc, #232	@ (adr r3, 800fad4 <__kernel_sin+0x164>)
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	f7f0 fc4b 	bl	8000288 <__aeabi_dsub>
 800f9f2:	4652      	mov	r2, sl
 800f9f4:	465b      	mov	r3, fp
 800f9f6:	f7f0 fdff 	bl	80005f8 <__aeabi_dmul>
 800f9fa:	a338      	add	r3, pc, #224	@ (adr r3, 800fadc <__kernel_sin+0x16c>)
 800f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa00:	f7f0 fc44 	bl	800028c <__adddf3>
 800fa04:	4606      	mov	r6, r0
 800fa06:	460f      	mov	r7, r1
 800fa08:	f1b8 0f00 	cmp.w	r8, #0
 800fa0c:	d11b      	bne.n	800fa46 <__kernel_sin+0xd6>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	460b      	mov	r3, r1
 800fa12:	4650      	mov	r0, sl
 800fa14:	4659      	mov	r1, fp
 800fa16:	f7f0 fdef 	bl	80005f8 <__aeabi_dmul>
 800fa1a:	a325      	add	r3, pc, #148	@ (adr r3, 800fab0 <__kernel_sin+0x140>)
 800fa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa20:	f7f0 fc32 	bl	8000288 <__aeabi_dsub>
 800fa24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa28:	f7f0 fde6 	bl	80005f8 <__aeabi_dmul>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4620      	mov	r0, r4
 800fa32:	4629      	mov	r1, r5
 800fa34:	f7f0 fc2a 	bl	800028c <__adddf3>
 800fa38:	4604      	mov	r4, r0
 800fa3a:	460d      	mov	r5, r1
 800fa3c:	ec45 4b10 	vmov	d0, r4, r5
 800fa40:	b005      	add	sp, #20
 800fa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa4a:	4b1b      	ldr	r3, [pc, #108]	@ (800fab8 <__kernel_sin+0x148>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	f7f0 fdd3 	bl	80005f8 <__aeabi_dmul>
 800fa52:	4632      	mov	r2, r6
 800fa54:	4680      	mov	r8, r0
 800fa56:	4689      	mov	r9, r1
 800fa58:	463b      	mov	r3, r7
 800fa5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa5e:	f7f0 fdcb 	bl	80005f8 <__aeabi_dmul>
 800fa62:	4602      	mov	r2, r0
 800fa64:	460b      	mov	r3, r1
 800fa66:	4640      	mov	r0, r8
 800fa68:	4649      	mov	r1, r9
 800fa6a:	f7f0 fc0d 	bl	8000288 <__aeabi_dsub>
 800fa6e:	4652      	mov	r2, sl
 800fa70:	465b      	mov	r3, fp
 800fa72:	f7f0 fdc1 	bl	80005f8 <__aeabi_dmul>
 800fa76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa7a:	f7f0 fc05 	bl	8000288 <__aeabi_dsub>
 800fa7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800fab0 <__kernel_sin+0x140>)
 800fa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa84:	4606      	mov	r6, r0
 800fa86:	460f      	mov	r7, r1
 800fa88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa8c:	f7f0 fdb4 	bl	80005f8 <__aeabi_dmul>
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
 800fa94:	4630      	mov	r0, r6
 800fa96:	4639      	mov	r1, r7
 800fa98:	f7f0 fbf8 	bl	800028c <__adddf3>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	4620      	mov	r0, r4
 800faa2:	4629      	mov	r1, r5
 800faa4:	f7f0 fbf0 	bl	8000288 <__aeabi_dsub>
 800faa8:	e7c6      	b.n	800fa38 <__kernel_sin+0xc8>
 800faaa:	bf00      	nop
 800faac:	f3af 8000 	nop.w
 800fab0:	55555549 	.word	0x55555549
 800fab4:	3fc55555 	.word	0x3fc55555
 800fab8:	3fe00000 	.word	0x3fe00000
 800fabc:	5acfd57c 	.word	0x5acfd57c
 800fac0:	3de5d93a 	.word	0x3de5d93a
 800fac4:	8a2b9ceb 	.word	0x8a2b9ceb
 800fac8:	3e5ae5e6 	.word	0x3e5ae5e6
 800facc:	57b1fe7d 	.word	0x57b1fe7d
 800fad0:	3ec71de3 	.word	0x3ec71de3
 800fad4:	19c161d5 	.word	0x19c161d5
 800fad8:	3f2a01a0 	.word	0x3f2a01a0
 800fadc:	1110f8a6 	.word	0x1110f8a6
 800fae0:	3f811111 	.word	0x3f811111
 800fae4:	00000000 	.word	0x00000000

0800fae8 <__ieee754_atan2>:
 800fae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faec:	ec57 6b11 	vmov	r6, r7, d1
 800faf0:	4273      	negs	r3, r6
 800faf2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800fc70 <__ieee754_atan2+0x188>
 800faf6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fafa:	4333      	orrs	r3, r6
 800fafc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fb00:	4543      	cmp	r3, r8
 800fb02:	ec51 0b10 	vmov	r0, r1, d0
 800fb06:	4635      	mov	r5, r6
 800fb08:	d809      	bhi.n	800fb1e <__ieee754_atan2+0x36>
 800fb0a:	4244      	negs	r4, r0
 800fb0c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fb10:	4304      	orrs	r4, r0
 800fb12:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fb16:	4544      	cmp	r4, r8
 800fb18:	468e      	mov	lr, r1
 800fb1a:	4681      	mov	r9, r0
 800fb1c:	d907      	bls.n	800fb2e <__ieee754_atan2+0x46>
 800fb1e:	4632      	mov	r2, r6
 800fb20:	463b      	mov	r3, r7
 800fb22:	f7f0 fbb3 	bl	800028c <__adddf3>
 800fb26:	ec41 0b10 	vmov	d0, r0, r1
 800fb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb2e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fb32:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fb36:	4334      	orrs	r4, r6
 800fb38:	d103      	bne.n	800fb42 <__ieee754_atan2+0x5a>
 800fb3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb3e:	f000 bbab 	b.w	8010298 <atan>
 800fb42:	17bc      	asrs	r4, r7, #30
 800fb44:	f004 0402 	and.w	r4, r4, #2
 800fb48:	ea53 0909 	orrs.w	r9, r3, r9
 800fb4c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fb50:	d107      	bne.n	800fb62 <__ieee754_atan2+0x7a>
 800fb52:	2c02      	cmp	r4, #2
 800fb54:	d05f      	beq.n	800fc16 <__ieee754_atan2+0x12e>
 800fb56:	2c03      	cmp	r4, #3
 800fb58:	d1e5      	bne.n	800fb26 <__ieee754_atan2+0x3e>
 800fb5a:	a141      	add	r1, pc, #260	@ (adr r1, 800fc60 <__ieee754_atan2+0x178>)
 800fb5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb60:	e7e1      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fb62:	4315      	orrs	r5, r2
 800fb64:	d106      	bne.n	800fb74 <__ieee754_atan2+0x8c>
 800fb66:	f1be 0f00 	cmp.w	lr, #0
 800fb6a:	da5f      	bge.n	800fc2c <__ieee754_atan2+0x144>
 800fb6c:	a13e      	add	r1, pc, #248	@ (adr r1, 800fc68 <__ieee754_atan2+0x180>)
 800fb6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb72:	e7d8      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fb74:	4542      	cmp	r2, r8
 800fb76:	d10f      	bne.n	800fb98 <__ieee754_atan2+0xb0>
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fb7e:	d107      	bne.n	800fb90 <__ieee754_atan2+0xa8>
 800fb80:	2c02      	cmp	r4, #2
 800fb82:	d84c      	bhi.n	800fc1e <__ieee754_atan2+0x136>
 800fb84:	4b34      	ldr	r3, [pc, #208]	@ (800fc58 <__ieee754_atan2+0x170>)
 800fb86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb8e:	e7ca      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fb90:	2c02      	cmp	r4, #2
 800fb92:	d848      	bhi.n	800fc26 <__ieee754_atan2+0x13e>
 800fb94:	4b31      	ldr	r3, [pc, #196]	@ (800fc5c <__ieee754_atan2+0x174>)
 800fb96:	e7f6      	b.n	800fb86 <__ieee754_atan2+0x9e>
 800fb98:	4543      	cmp	r3, r8
 800fb9a:	d0e4      	beq.n	800fb66 <__ieee754_atan2+0x7e>
 800fb9c:	1a9b      	subs	r3, r3, r2
 800fb9e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fba6:	da1e      	bge.n	800fbe6 <__ieee754_atan2+0xfe>
 800fba8:	2f00      	cmp	r7, #0
 800fbaa:	da01      	bge.n	800fbb0 <__ieee754_atan2+0xc8>
 800fbac:	323c      	adds	r2, #60	@ 0x3c
 800fbae:	db1e      	blt.n	800fbee <__ieee754_atan2+0x106>
 800fbb0:	4632      	mov	r2, r6
 800fbb2:	463b      	mov	r3, r7
 800fbb4:	f7f0 fe4a 	bl	800084c <__aeabi_ddiv>
 800fbb8:	ec41 0b10 	vmov	d0, r0, r1
 800fbbc:	f000 fd04 	bl	80105c8 <fabs>
 800fbc0:	f000 fb6a 	bl	8010298 <atan>
 800fbc4:	ec51 0b10 	vmov	r0, r1, d0
 800fbc8:	2c01      	cmp	r4, #1
 800fbca:	d013      	beq.n	800fbf4 <__ieee754_atan2+0x10c>
 800fbcc:	2c02      	cmp	r4, #2
 800fbce:	d015      	beq.n	800fbfc <__ieee754_atan2+0x114>
 800fbd0:	2c00      	cmp	r4, #0
 800fbd2:	d0a8      	beq.n	800fb26 <__ieee754_atan2+0x3e>
 800fbd4:	a318      	add	r3, pc, #96	@ (adr r3, 800fc38 <__ieee754_atan2+0x150>)
 800fbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbda:	f7f0 fb55 	bl	8000288 <__aeabi_dsub>
 800fbde:	a318      	add	r3, pc, #96	@ (adr r3, 800fc40 <__ieee754_atan2+0x158>)
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	e014      	b.n	800fc10 <__ieee754_atan2+0x128>
 800fbe6:	a118      	add	r1, pc, #96	@ (adr r1, 800fc48 <__ieee754_atan2+0x160>)
 800fbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbec:	e7ec      	b.n	800fbc8 <__ieee754_atan2+0xe0>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	e7e9      	b.n	800fbc8 <__ieee754_atan2+0xe0>
 800fbf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	e794      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fbfc:	a30e      	add	r3, pc, #56	@ (adr r3, 800fc38 <__ieee754_atan2+0x150>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	f7f0 fb41 	bl	8000288 <__aeabi_dsub>
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	a10d      	add	r1, pc, #52	@ (adr r1, 800fc40 <__ieee754_atan2+0x158>)
 800fc0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc10:	f7f0 fb3a 	bl	8000288 <__aeabi_dsub>
 800fc14:	e787      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc16:	a10a      	add	r1, pc, #40	@ (adr r1, 800fc40 <__ieee754_atan2+0x158>)
 800fc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc1c:	e783      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc1e:	a10c      	add	r1, pc, #48	@ (adr r1, 800fc50 <__ieee754_atan2+0x168>)
 800fc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc24:	e77f      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc26:	2000      	movs	r0, #0
 800fc28:	2100      	movs	r1, #0
 800fc2a:	e77c      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc2c:	a106      	add	r1, pc, #24	@ (adr r1, 800fc48 <__ieee754_atan2+0x160>)
 800fc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc32:	e778      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc34:	f3af 8000 	nop.w
 800fc38:	33145c07 	.word	0x33145c07
 800fc3c:	3ca1a626 	.word	0x3ca1a626
 800fc40:	54442d18 	.word	0x54442d18
 800fc44:	400921fb 	.word	0x400921fb
 800fc48:	54442d18 	.word	0x54442d18
 800fc4c:	3ff921fb 	.word	0x3ff921fb
 800fc50:	54442d18 	.word	0x54442d18
 800fc54:	3fe921fb 	.word	0x3fe921fb
 800fc58:	080116b8 	.word	0x080116b8
 800fc5c:	080116a0 	.word	0x080116a0
 800fc60:	54442d18 	.word	0x54442d18
 800fc64:	c00921fb 	.word	0xc00921fb
 800fc68:	54442d18 	.word	0x54442d18
 800fc6c:	bff921fb 	.word	0xbff921fb
 800fc70:	7ff00000 	.word	0x7ff00000

0800fc74 <__ieee754_hypot>:
 800fc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc78:	ec51 0b10 	vmov	r0, r1, d0
 800fc7c:	ec53 2b11 	vmov	r2, r3, d1
 800fc80:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800fc84:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800fc88:	42a5      	cmp	r5, r4
 800fc8a:	b087      	sub	sp, #28
 800fc8c:	da05      	bge.n	800fc9a <__ieee754_hypot+0x26>
 800fc8e:	462e      	mov	r6, r5
 800fc90:	4625      	mov	r5, r4
 800fc92:	4634      	mov	r4, r6
 800fc94:	4606      	mov	r6, r0
 800fc96:	4610      	mov	r0, r2
 800fc98:	4632      	mov	r2, r6
 800fc9a:	1b2b      	subs	r3, r5, r4
 800fc9c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800fca0:	4629      	mov	r1, r5
 800fca2:	4682      	mov	sl, r0
 800fca4:	46ab      	mov	fp, r5
 800fca6:	4616      	mov	r6, r2
 800fca8:	4627      	mov	r7, r4
 800fcaa:	dd05      	ble.n	800fcb8 <__ieee754_hypot+0x44>
 800fcac:	4623      	mov	r3, r4
 800fcae:	f7f0 faed 	bl	800028c <__adddf3>
 800fcb2:	4682      	mov	sl, r0
 800fcb4:	468b      	mov	fp, r1
 800fcb6:	e016      	b.n	800fce6 <__ieee754_hypot+0x72>
 800fcb8:	4b75      	ldr	r3, [pc, #468]	@ (800fe90 <__ieee754_hypot+0x21c>)
 800fcba:	429d      	cmp	r5, r3
 800fcbc:	f340 8096 	ble.w	800fdec <__ieee754_hypot+0x178>
 800fcc0:	4b74      	ldr	r3, [pc, #464]	@ (800fe94 <__ieee754_hypot+0x220>)
 800fcc2:	429d      	cmp	r5, r3
 800fcc4:	dd14      	ble.n	800fcf0 <__ieee754_hypot+0x7c>
 800fcc6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fcca:	4305      	orrs	r5, r0
 800fccc:	d004      	beq.n	800fcd8 <__ieee754_hypot+0x64>
 800fcce:	4623      	mov	r3, r4
 800fcd0:	f7f0 fadc 	bl	800028c <__adddf3>
 800fcd4:	4682      	mov	sl, r0
 800fcd6:	468b      	mov	fp, r1
 800fcd8:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800fcdc:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800fce0:	4334      	orrs	r4, r6
 800fce2:	f000 80d2 	beq.w	800fe8a <__ieee754_hypot+0x216>
 800fce6:	ec4b ab10 	vmov	d0, sl, fp
 800fcea:	b007      	add	sp, #28
 800fcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800fcf4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800fcf8:	46ab      	mov	fp, r5
 800fcfa:	4627      	mov	r7, r4
 800fcfc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800fd00:	9301      	str	r3, [sp, #4]
 800fd02:	4b65      	ldr	r3, [pc, #404]	@ (800fe98 <__ieee754_hypot+0x224>)
 800fd04:	429c      	cmp	r4, r3
 800fd06:	dc19      	bgt.n	800fd3c <__ieee754_hypot+0xc8>
 800fd08:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800fd0c:	da70      	bge.n	800fdf0 <__ieee754_hypot+0x17c>
 800fd0e:	4633      	mov	r3, r6
 800fd10:	4323      	orrs	r3, r4
 800fd12:	d0e8      	beq.n	800fce6 <__ieee754_hypot+0x72>
 800fd14:	4b61      	ldr	r3, [pc, #388]	@ (800fe9c <__ieee754_hypot+0x228>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	f7f0 fc6c 	bl	80005f8 <__aeabi_dmul>
 800fd20:	4b5e      	ldr	r3, [pc, #376]	@ (800fe9c <__ieee754_hypot+0x228>)
 800fd22:	4606      	mov	r6, r0
 800fd24:	460f      	mov	r7, r1
 800fd26:	4650      	mov	r0, sl
 800fd28:	4659      	mov	r1, fp
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f7f0 fc64 	bl	80005f8 <__aeabi_dmul>
 800fd30:	9b01      	ldr	r3, [sp, #4]
 800fd32:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800fd36:	4682      	mov	sl, r0
 800fd38:	468b      	mov	fp, r1
 800fd3a:	9301      	str	r3, [sp, #4]
 800fd3c:	4632      	mov	r2, r6
 800fd3e:	463b      	mov	r3, r7
 800fd40:	4650      	mov	r0, sl
 800fd42:	4659      	mov	r1, fp
 800fd44:	f7f0 faa0 	bl	8000288 <__aeabi_dsub>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4680      	mov	r8, r0
 800fd4e:	4689      	mov	r9, r1
 800fd50:	4630      	mov	r0, r6
 800fd52:	4639      	mov	r1, r7
 800fd54:	f7f0 fec2 	bl	8000adc <__aeabi_dcmplt>
 800fd58:	2200      	movs	r2, #0
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	d053      	beq.n	800fe06 <__ieee754_hypot+0x192>
 800fd5e:	462b      	mov	r3, r5
 800fd60:	4610      	mov	r0, r2
 800fd62:	4629      	mov	r1, r5
 800fd64:	4614      	mov	r4, r2
 800fd66:	f7f0 fc47 	bl	80005f8 <__aeabi_dmul>
 800fd6a:	4632      	mov	r2, r6
 800fd6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd70:	463b      	mov	r3, r7
 800fd72:	4630      	mov	r0, r6
 800fd74:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800fd78:	f7f0 fc3e 	bl	80005f8 <__aeabi_dmul>
 800fd7c:	4622      	mov	r2, r4
 800fd7e:	4606      	mov	r6, r0
 800fd80:	460f      	mov	r7, r1
 800fd82:	462b      	mov	r3, r5
 800fd84:	4650      	mov	r0, sl
 800fd86:	4659      	mov	r1, fp
 800fd88:	f7f0 fa80 	bl	800028c <__adddf3>
 800fd8c:	4622      	mov	r2, r4
 800fd8e:	4680      	mov	r8, r0
 800fd90:	4689      	mov	r9, r1
 800fd92:	462b      	mov	r3, r5
 800fd94:	4650      	mov	r0, sl
 800fd96:	4659      	mov	r1, fp
 800fd98:	f7f0 fa76 	bl	8000288 <__aeabi_dsub>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4640      	mov	r0, r8
 800fda2:	4649      	mov	r1, r9
 800fda4:	f7f0 fc28 	bl	80005f8 <__aeabi_dmul>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	460b      	mov	r3, r1
 800fdac:	4630      	mov	r0, r6
 800fdae:	4639      	mov	r1, r7
 800fdb0:	f7f0 fa6a 	bl	8000288 <__aeabi_dsub>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdbc:	f7f0 fa64 	bl	8000288 <__aeabi_dsub>
 800fdc0:	ec41 0b10 	vmov	d0, r0, r1
 800fdc4:	f000 fc08 	bl	80105d8 <__ieee754_sqrt>
 800fdc8:	9b01      	ldr	r3, [sp, #4]
 800fdca:	ec5b ab10 	vmov	sl, fp, d0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d089      	beq.n	800fce6 <__ieee754_hypot+0x72>
 800fdd2:	051b      	lsls	r3, r3, #20
 800fdd4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800fdd8:	2000      	movs	r0, #0
 800fdda:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800fdde:	4602      	mov	r2, r0
 800fde0:	460b      	mov	r3, r1
 800fde2:	4650      	mov	r0, sl
 800fde4:	4659      	mov	r1, fp
 800fde6:	f7f0 fc07 	bl	80005f8 <__aeabi_dmul>
 800fdea:	e762      	b.n	800fcb2 <__ieee754_hypot+0x3e>
 800fdec:	2300      	movs	r3, #0
 800fdee:	e787      	b.n	800fd00 <__ieee754_hypot+0x8c>
 800fdf0:	9b01      	ldr	r3, [sp, #4]
 800fdf2:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800fdf6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800fdfa:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	46ab      	mov	fp, r5
 800fe02:	4627      	mov	r7, r4
 800fe04:	e79a      	b.n	800fd3c <__ieee754_hypot+0xc8>
 800fe06:	4623      	mov	r3, r4
 800fe08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800fe16:	4614      	mov	r4, r2
 800fe18:	461d      	mov	r5, r3
 800fe1a:	f7f0 fbed 	bl	80005f8 <__aeabi_dmul>
 800fe1e:	4642      	mov	r2, r8
 800fe20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe24:	464b      	mov	r3, r9
 800fe26:	4640      	mov	r0, r8
 800fe28:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800fe2c:	f7f0 fbe4 	bl	80005f8 <__aeabi_dmul>
 800fe30:	4652      	mov	r2, sl
 800fe32:	465b      	mov	r3, fp
 800fe34:	4680      	mov	r8, r0
 800fe36:	4689      	mov	r9, r1
 800fe38:	4650      	mov	r0, sl
 800fe3a:	4659      	mov	r1, fp
 800fe3c:	f7f0 fa26 	bl	800028c <__adddf3>
 800fe40:	4622      	mov	r2, r4
 800fe42:	462b      	mov	r3, r5
 800fe44:	f7f0 fa20 	bl	8000288 <__aeabi_dsub>
 800fe48:	4632      	mov	r2, r6
 800fe4a:	463b      	mov	r3, r7
 800fe4c:	f7f0 fbd4 	bl	80005f8 <__aeabi_dmul>
 800fe50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe54:	4682      	mov	sl, r0
 800fe56:	468b      	mov	fp, r1
 800fe58:	4630      	mov	r0, r6
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	f7f0 fa14 	bl	8000288 <__aeabi_dsub>
 800fe60:	4622      	mov	r2, r4
 800fe62:	462b      	mov	r3, r5
 800fe64:	f7f0 fbc8 	bl	80005f8 <__aeabi_dmul>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4650      	mov	r0, sl
 800fe6e:	4659      	mov	r1, fp
 800fe70:	f7f0 fa0c 	bl	800028c <__adddf3>
 800fe74:	4602      	mov	r2, r0
 800fe76:	460b      	mov	r3, r1
 800fe78:	4640      	mov	r0, r8
 800fe7a:	4649      	mov	r1, r9
 800fe7c:	f7f0 fa04 	bl	8000288 <__aeabi_dsub>
 800fe80:	4602      	mov	r2, r0
 800fe82:	460b      	mov	r3, r1
 800fe84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe88:	e798      	b.n	800fdbc <__ieee754_hypot+0x148>
 800fe8a:	46b2      	mov	sl, r6
 800fe8c:	46bb      	mov	fp, r7
 800fe8e:	e72a      	b.n	800fce6 <__ieee754_hypot+0x72>
 800fe90:	5f300000 	.word	0x5f300000
 800fe94:	7fefffff 	.word	0x7fefffff
 800fe98:	20afffff 	.word	0x20afffff
 800fe9c:	7fd00000 	.word	0x7fd00000

0800fea0 <__ieee754_rem_pio2>:
 800fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea4:	ec57 6b10 	vmov	r6, r7, d0
 800fea8:	4bc5      	ldr	r3, [pc, #788]	@ (80101c0 <__ieee754_rem_pio2+0x320>)
 800feaa:	b08d      	sub	sp, #52	@ 0x34
 800feac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800feb0:	4598      	cmp	r8, r3
 800feb2:	4604      	mov	r4, r0
 800feb4:	9704      	str	r7, [sp, #16]
 800feb6:	d807      	bhi.n	800fec8 <__ieee754_rem_pio2+0x28>
 800feb8:	2200      	movs	r2, #0
 800feba:	2300      	movs	r3, #0
 800febc:	ed80 0b00 	vstr	d0, [r0]
 800fec0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fec4:	2500      	movs	r5, #0
 800fec6:	e028      	b.n	800ff1a <__ieee754_rem_pio2+0x7a>
 800fec8:	4bbe      	ldr	r3, [pc, #760]	@ (80101c4 <__ieee754_rem_pio2+0x324>)
 800feca:	4598      	cmp	r8, r3
 800fecc:	d878      	bhi.n	800ffc0 <__ieee754_rem_pio2+0x120>
 800fece:	9b04      	ldr	r3, [sp, #16]
 800fed0:	4dbd      	ldr	r5, [pc, #756]	@ (80101c8 <__ieee754_rem_pio2+0x328>)
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	4630      	mov	r0, r6
 800fed6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010188 <__ieee754_rem_pio2+0x2e8>)
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	4639      	mov	r1, r7
 800fede:	dd38      	ble.n	800ff52 <__ieee754_rem_pio2+0xb2>
 800fee0:	f7f0 f9d2 	bl	8000288 <__aeabi_dsub>
 800fee4:	45a8      	cmp	r8, r5
 800fee6:	4606      	mov	r6, r0
 800fee8:	460f      	mov	r7, r1
 800feea:	d01a      	beq.n	800ff22 <__ieee754_rem_pio2+0x82>
 800feec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010190 <__ieee754_rem_pio2+0x2f0>)
 800feee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef2:	f7f0 f9c9 	bl	8000288 <__aeabi_dsub>
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4680      	mov	r8, r0
 800fefc:	4689      	mov	r9, r1
 800fefe:	4630      	mov	r0, r6
 800ff00:	4639      	mov	r1, r7
 800ff02:	f7f0 f9c1 	bl	8000288 <__aeabi_dsub>
 800ff06:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010190 <__ieee754_rem_pio2+0x2f0>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	f7f0 f9bc 	bl	8000288 <__aeabi_dsub>
 800ff10:	e9c4 8900 	strd	r8, r9, [r4]
 800ff14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff18:	2501      	movs	r5, #1
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	b00d      	add	sp, #52	@ 0x34
 800ff1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff22:	a39d      	add	r3, pc, #628	@ (adr r3, 8010198 <__ieee754_rem_pio2+0x2f8>)
 800ff24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff28:	f7f0 f9ae 	bl	8000288 <__aeabi_dsub>
 800ff2c:	a39c      	add	r3, pc, #624	@ (adr r3, 80101a0 <__ieee754_rem_pio2+0x300>)
 800ff2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff32:	4606      	mov	r6, r0
 800ff34:	460f      	mov	r7, r1
 800ff36:	f7f0 f9a7 	bl	8000288 <__aeabi_dsub>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4680      	mov	r8, r0
 800ff40:	4689      	mov	r9, r1
 800ff42:	4630      	mov	r0, r6
 800ff44:	4639      	mov	r1, r7
 800ff46:	f7f0 f99f 	bl	8000288 <__aeabi_dsub>
 800ff4a:	a395      	add	r3, pc, #596	@ (adr r3, 80101a0 <__ieee754_rem_pio2+0x300>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	e7dc      	b.n	800ff0c <__ieee754_rem_pio2+0x6c>
 800ff52:	f7f0 f99b 	bl	800028c <__adddf3>
 800ff56:	45a8      	cmp	r8, r5
 800ff58:	4606      	mov	r6, r0
 800ff5a:	460f      	mov	r7, r1
 800ff5c:	d018      	beq.n	800ff90 <__ieee754_rem_pio2+0xf0>
 800ff5e:	a38c      	add	r3, pc, #560	@ (adr r3, 8010190 <__ieee754_rem_pio2+0x2f0>)
 800ff60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff64:	f7f0 f992 	bl	800028c <__adddf3>
 800ff68:	4602      	mov	r2, r0
 800ff6a:	460b      	mov	r3, r1
 800ff6c:	4680      	mov	r8, r0
 800ff6e:	4689      	mov	r9, r1
 800ff70:	4630      	mov	r0, r6
 800ff72:	4639      	mov	r1, r7
 800ff74:	f7f0 f988 	bl	8000288 <__aeabi_dsub>
 800ff78:	a385      	add	r3, pc, #532	@ (adr r3, 8010190 <__ieee754_rem_pio2+0x2f0>)
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	f7f0 f985 	bl	800028c <__adddf3>
 800ff82:	f04f 35ff 	mov.w	r5, #4294967295
 800ff86:	e9c4 8900 	strd	r8, r9, [r4]
 800ff8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff8e:	e7c4      	b.n	800ff1a <__ieee754_rem_pio2+0x7a>
 800ff90:	a381      	add	r3, pc, #516	@ (adr r3, 8010198 <__ieee754_rem_pio2+0x2f8>)
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	f7f0 f979 	bl	800028c <__adddf3>
 800ff9a:	a381      	add	r3, pc, #516	@ (adr r3, 80101a0 <__ieee754_rem_pio2+0x300>)
 800ff9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa0:	4606      	mov	r6, r0
 800ffa2:	460f      	mov	r7, r1
 800ffa4:	f7f0 f972 	bl	800028c <__adddf3>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	4680      	mov	r8, r0
 800ffae:	4689      	mov	r9, r1
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	4639      	mov	r1, r7
 800ffb4:	f7f0 f968 	bl	8000288 <__aeabi_dsub>
 800ffb8:	a379      	add	r3, pc, #484	@ (adr r3, 80101a0 <__ieee754_rem_pio2+0x300>)
 800ffba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbe:	e7de      	b.n	800ff7e <__ieee754_rem_pio2+0xde>
 800ffc0:	4b82      	ldr	r3, [pc, #520]	@ (80101cc <__ieee754_rem_pio2+0x32c>)
 800ffc2:	4598      	cmp	r8, r3
 800ffc4:	f200 80d1 	bhi.w	801016a <__ieee754_rem_pio2+0x2ca>
 800ffc8:	f000 fafe 	bl	80105c8 <fabs>
 800ffcc:	ec57 6b10 	vmov	r6, r7, d0
 800ffd0:	a375      	add	r3, pc, #468	@ (adr r3, 80101a8 <__ieee754_rem_pio2+0x308>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	4639      	mov	r1, r7
 800ffda:	f7f0 fb0d 	bl	80005f8 <__aeabi_dmul>
 800ffde:	4b7c      	ldr	r3, [pc, #496]	@ (80101d0 <__ieee754_rem_pio2+0x330>)
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f7f0 f953 	bl	800028c <__adddf3>
 800ffe6:	f7f0 fdb7 	bl	8000b58 <__aeabi_d2iz>
 800ffea:	4605      	mov	r5, r0
 800ffec:	f7f0 fa9a 	bl	8000524 <__aeabi_i2d>
 800fff0:	4602      	mov	r2, r0
 800fff2:	460b      	mov	r3, r1
 800fff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fff8:	a363      	add	r3, pc, #396	@ (adr r3, 8010188 <__ieee754_rem_pio2+0x2e8>)
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	f7f0 fafb 	bl	80005f8 <__aeabi_dmul>
 8010002:	4602      	mov	r2, r0
 8010004:	460b      	mov	r3, r1
 8010006:	4630      	mov	r0, r6
 8010008:	4639      	mov	r1, r7
 801000a:	f7f0 f93d 	bl	8000288 <__aeabi_dsub>
 801000e:	a360      	add	r3, pc, #384	@ (adr r3, 8010190 <__ieee754_rem_pio2+0x2f0>)
 8010010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010014:	4682      	mov	sl, r0
 8010016:	468b      	mov	fp, r1
 8010018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801001c:	f7f0 faec 	bl	80005f8 <__aeabi_dmul>
 8010020:	2d1f      	cmp	r5, #31
 8010022:	4606      	mov	r6, r0
 8010024:	460f      	mov	r7, r1
 8010026:	dc0c      	bgt.n	8010042 <__ieee754_rem_pio2+0x1a2>
 8010028:	4b6a      	ldr	r3, [pc, #424]	@ (80101d4 <__ieee754_rem_pio2+0x334>)
 801002a:	1e6a      	subs	r2, r5, #1
 801002c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010030:	4543      	cmp	r3, r8
 8010032:	d006      	beq.n	8010042 <__ieee754_rem_pio2+0x1a2>
 8010034:	4632      	mov	r2, r6
 8010036:	463b      	mov	r3, r7
 8010038:	4650      	mov	r0, sl
 801003a:	4659      	mov	r1, fp
 801003c:	f7f0 f924 	bl	8000288 <__aeabi_dsub>
 8010040:	e00e      	b.n	8010060 <__ieee754_rem_pio2+0x1c0>
 8010042:	463b      	mov	r3, r7
 8010044:	4632      	mov	r2, r6
 8010046:	4650      	mov	r0, sl
 8010048:	4659      	mov	r1, fp
 801004a:	f7f0 f91d 	bl	8000288 <__aeabi_dsub>
 801004e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010052:	9305      	str	r3, [sp, #20]
 8010054:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010058:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801005c:	2b10      	cmp	r3, #16
 801005e:	dc02      	bgt.n	8010066 <__ieee754_rem_pio2+0x1c6>
 8010060:	e9c4 0100 	strd	r0, r1, [r4]
 8010064:	e039      	b.n	80100da <__ieee754_rem_pio2+0x23a>
 8010066:	a34c      	add	r3, pc, #304	@ (adr r3, 8010198 <__ieee754_rem_pio2+0x2f8>)
 8010068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010070:	f7f0 fac2 	bl	80005f8 <__aeabi_dmul>
 8010074:	4606      	mov	r6, r0
 8010076:	460f      	mov	r7, r1
 8010078:	4602      	mov	r2, r0
 801007a:	460b      	mov	r3, r1
 801007c:	4650      	mov	r0, sl
 801007e:	4659      	mov	r1, fp
 8010080:	f7f0 f902 	bl	8000288 <__aeabi_dsub>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	4680      	mov	r8, r0
 801008a:	4689      	mov	r9, r1
 801008c:	4650      	mov	r0, sl
 801008e:	4659      	mov	r1, fp
 8010090:	f7f0 f8fa 	bl	8000288 <__aeabi_dsub>
 8010094:	4632      	mov	r2, r6
 8010096:	463b      	mov	r3, r7
 8010098:	f7f0 f8f6 	bl	8000288 <__aeabi_dsub>
 801009c:	a340      	add	r3, pc, #256	@ (adr r3, 80101a0 <__ieee754_rem_pio2+0x300>)
 801009e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a2:	4606      	mov	r6, r0
 80100a4:	460f      	mov	r7, r1
 80100a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100aa:	f7f0 faa5 	bl	80005f8 <__aeabi_dmul>
 80100ae:	4632      	mov	r2, r6
 80100b0:	463b      	mov	r3, r7
 80100b2:	f7f0 f8e9 	bl	8000288 <__aeabi_dsub>
 80100b6:	4602      	mov	r2, r0
 80100b8:	460b      	mov	r3, r1
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	4640      	mov	r0, r8
 80100c0:	4649      	mov	r1, r9
 80100c2:	f7f0 f8e1 	bl	8000288 <__aeabi_dsub>
 80100c6:	9a05      	ldr	r2, [sp, #20]
 80100c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	2b31      	cmp	r3, #49	@ 0x31
 80100d0:	dc20      	bgt.n	8010114 <__ieee754_rem_pio2+0x274>
 80100d2:	e9c4 0100 	strd	r0, r1, [r4]
 80100d6:	46c2      	mov	sl, r8
 80100d8:	46cb      	mov	fp, r9
 80100da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80100de:	4650      	mov	r0, sl
 80100e0:	4642      	mov	r2, r8
 80100e2:	464b      	mov	r3, r9
 80100e4:	4659      	mov	r1, fp
 80100e6:	f7f0 f8cf 	bl	8000288 <__aeabi_dsub>
 80100ea:	463b      	mov	r3, r7
 80100ec:	4632      	mov	r2, r6
 80100ee:	f7f0 f8cb 	bl	8000288 <__aeabi_dsub>
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80100fa:	f6bf af0e 	bge.w	800ff1a <__ieee754_rem_pio2+0x7a>
 80100fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010102:	6063      	str	r3, [r4, #4]
 8010104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010108:	f8c4 8000 	str.w	r8, [r4]
 801010c:	60a0      	str	r0, [r4, #8]
 801010e:	60e3      	str	r3, [r4, #12]
 8010110:	426d      	negs	r5, r5
 8010112:	e702      	b.n	800ff1a <__ieee754_rem_pio2+0x7a>
 8010114:	a326      	add	r3, pc, #152	@ (adr r3, 80101b0 <__ieee754_rem_pio2+0x310>)
 8010116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801011e:	f7f0 fa6b 	bl	80005f8 <__aeabi_dmul>
 8010122:	4606      	mov	r6, r0
 8010124:	460f      	mov	r7, r1
 8010126:	4602      	mov	r2, r0
 8010128:	460b      	mov	r3, r1
 801012a:	4640      	mov	r0, r8
 801012c:	4649      	mov	r1, r9
 801012e:	f7f0 f8ab 	bl	8000288 <__aeabi_dsub>
 8010132:	4602      	mov	r2, r0
 8010134:	460b      	mov	r3, r1
 8010136:	4682      	mov	sl, r0
 8010138:	468b      	mov	fp, r1
 801013a:	4640      	mov	r0, r8
 801013c:	4649      	mov	r1, r9
 801013e:	f7f0 f8a3 	bl	8000288 <__aeabi_dsub>
 8010142:	4632      	mov	r2, r6
 8010144:	463b      	mov	r3, r7
 8010146:	f7f0 f89f 	bl	8000288 <__aeabi_dsub>
 801014a:	a31b      	add	r3, pc, #108	@ (adr r3, 80101b8 <__ieee754_rem_pio2+0x318>)
 801014c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010150:	4606      	mov	r6, r0
 8010152:	460f      	mov	r7, r1
 8010154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010158:	f7f0 fa4e 	bl	80005f8 <__aeabi_dmul>
 801015c:	4632      	mov	r2, r6
 801015e:	463b      	mov	r3, r7
 8010160:	f7f0 f892 	bl	8000288 <__aeabi_dsub>
 8010164:	4606      	mov	r6, r0
 8010166:	460f      	mov	r7, r1
 8010168:	e764      	b.n	8010034 <__ieee754_rem_pio2+0x194>
 801016a:	4b1b      	ldr	r3, [pc, #108]	@ (80101d8 <__ieee754_rem_pio2+0x338>)
 801016c:	4598      	cmp	r8, r3
 801016e:	d935      	bls.n	80101dc <__ieee754_rem_pio2+0x33c>
 8010170:	4632      	mov	r2, r6
 8010172:	463b      	mov	r3, r7
 8010174:	4630      	mov	r0, r6
 8010176:	4639      	mov	r1, r7
 8010178:	f7f0 f886 	bl	8000288 <__aeabi_dsub>
 801017c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010180:	e9c4 0100 	strd	r0, r1, [r4]
 8010184:	e69e      	b.n	800fec4 <__ieee754_rem_pio2+0x24>
 8010186:	bf00      	nop
 8010188:	54400000 	.word	0x54400000
 801018c:	3ff921fb 	.word	0x3ff921fb
 8010190:	1a626331 	.word	0x1a626331
 8010194:	3dd0b461 	.word	0x3dd0b461
 8010198:	1a600000 	.word	0x1a600000
 801019c:	3dd0b461 	.word	0x3dd0b461
 80101a0:	2e037073 	.word	0x2e037073
 80101a4:	3ba3198a 	.word	0x3ba3198a
 80101a8:	6dc9c883 	.word	0x6dc9c883
 80101ac:	3fe45f30 	.word	0x3fe45f30
 80101b0:	2e000000 	.word	0x2e000000
 80101b4:	3ba3198a 	.word	0x3ba3198a
 80101b8:	252049c1 	.word	0x252049c1
 80101bc:	397b839a 	.word	0x397b839a
 80101c0:	3fe921fb 	.word	0x3fe921fb
 80101c4:	4002d97b 	.word	0x4002d97b
 80101c8:	3ff921fb 	.word	0x3ff921fb
 80101cc:	413921fb 	.word	0x413921fb
 80101d0:	3fe00000 	.word	0x3fe00000
 80101d4:	080116d0 	.word	0x080116d0
 80101d8:	7fefffff 	.word	0x7fefffff
 80101dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80101e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80101e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80101e8:	4630      	mov	r0, r6
 80101ea:	460f      	mov	r7, r1
 80101ec:	f7f0 fcb4 	bl	8000b58 <__aeabi_d2iz>
 80101f0:	f7f0 f998 	bl	8000524 <__aeabi_i2d>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	4630      	mov	r0, r6
 80101fa:	4639      	mov	r1, r7
 80101fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010200:	f7f0 f842 	bl	8000288 <__aeabi_dsub>
 8010204:	4b22      	ldr	r3, [pc, #136]	@ (8010290 <__ieee754_rem_pio2+0x3f0>)
 8010206:	2200      	movs	r2, #0
 8010208:	f7f0 f9f6 	bl	80005f8 <__aeabi_dmul>
 801020c:	460f      	mov	r7, r1
 801020e:	4606      	mov	r6, r0
 8010210:	f7f0 fca2 	bl	8000b58 <__aeabi_d2iz>
 8010214:	f7f0 f986 	bl	8000524 <__aeabi_i2d>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4630      	mov	r0, r6
 801021e:	4639      	mov	r1, r7
 8010220:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010224:	f7f0 f830 	bl	8000288 <__aeabi_dsub>
 8010228:	4b19      	ldr	r3, [pc, #100]	@ (8010290 <__ieee754_rem_pio2+0x3f0>)
 801022a:	2200      	movs	r2, #0
 801022c:	f7f0 f9e4 	bl	80005f8 <__aeabi_dmul>
 8010230:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010234:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010238:	f04f 0803 	mov.w	r8, #3
 801023c:	2600      	movs	r6, #0
 801023e:	2700      	movs	r7, #0
 8010240:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010244:	4632      	mov	r2, r6
 8010246:	463b      	mov	r3, r7
 8010248:	46c2      	mov	sl, r8
 801024a:	f108 38ff 	add.w	r8, r8, #4294967295
 801024e:	f7f0 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010252:	2800      	cmp	r0, #0
 8010254:	d1f4      	bne.n	8010240 <__ieee754_rem_pio2+0x3a0>
 8010256:	4b0f      	ldr	r3, [pc, #60]	@ (8010294 <__ieee754_rem_pio2+0x3f4>)
 8010258:	9301      	str	r3, [sp, #4]
 801025a:	2302      	movs	r3, #2
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	462a      	mov	r2, r5
 8010260:	4653      	mov	r3, sl
 8010262:	4621      	mov	r1, r4
 8010264:	a806      	add	r0, sp, #24
 8010266:	f000 fa93 	bl	8010790 <__kernel_rem_pio2>
 801026a:	9b04      	ldr	r3, [sp, #16]
 801026c:	2b00      	cmp	r3, #0
 801026e:	4605      	mov	r5, r0
 8010270:	f6bf ae53 	bge.w	800ff1a <__ieee754_rem_pio2+0x7a>
 8010274:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801027c:	e9c4 2300 	strd	r2, r3, [r4]
 8010280:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010288:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801028c:	e740      	b.n	8010110 <__ieee754_rem_pio2+0x270>
 801028e:	bf00      	nop
 8010290:	41700000 	.word	0x41700000
 8010294:	08011750 	.word	0x08011750

08010298 <atan>:
 8010298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801029c:	ec55 4b10 	vmov	r4, r5, d0
 80102a0:	4bbf      	ldr	r3, [pc, #764]	@ (80105a0 <atan+0x308>)
 80102a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80102a6:	429e      	cmp	r6, r3
 80102a8:	46ab      	mov	fp, r5
 80102aa:	d918      	bls.n	80102de <atan+0x46>
 80102ac:	4bbd      	ldr	r3, [pc, #756]	@ (80105a4 <atan+0x30c>)
 80102ae:	429e      	cmp	r6, r3
 80102b0:	d801      	bhi.n	80102b6 <atan+0x1e>
 80102b2:	d109      	bne.n	80102c8 <atan+0x30>
 80102b4:	b144      	cbz	r4, 80102c8 <atan+0x30>
 80102b6:	4622      	mov	r2, r4
 80102b8:	462b      	mov	r3, r5
 80102ba:	4620      	mov	r0, r4
 80102bc:	4629      	mov	r1, r5
 80102be:	f7ef ffe5 	bl	800028c <__adddf3>
 80102c2:	4604      	mov	r4, r0
 80102c4:	460d      	mov	r5, r1
 80102c6:	e006      	b.n	80102d6 <atan+0x3e>
 80102c8:	f1bb 0f00 	cmp.w	fp, #0
 80102cc:	f340 812b 	ble.w	8010526 <atan+0x28e>
 80102d0:	a597      	add	r5, pc, #604	@ (adr r5, 8010530 <atan+0x298>)
 80102d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80102d6:	ec45 4b10 	vmov	d0, r4, r5
 80102da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102de:	4bb2      	ldr	r3, [pc, #712]	@ (80105a8 <atan+0x310>)
 80102e0:	429e      	cmp	r6, r3
 80102e2:	d813      	bhi.n	801030c <atan+0x74>
 80102e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80102e8:	429e      	cmp	r6, r3
 80102ea:	d80c      	bhi.n	8010306 <atan+0x6e>
 80102ec:	a392      	add	r3, pc, #584	@ (adr r3, 8010538 <atan+0x2a0>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	4620      	mov	r0, r4
 80102f4:	4629      	mov	r1, r5
 80102f6:	f7ef ffc9 	bl	800028c <__adddf3>
 80102fa:	4bac      	ldr	r3, [pc, #688]	@ (80105ac <atan+0x314>)
 80102fc:	2200      	movs	r2, #0
 80102fe:	f7f0 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 8010302:	2800      	cmp	r0, #0
 8010304:	d1e7      	bne.n	80102d6 <atan+0x3e>
 8010306:	f04f 3aff 	mov.w	sl, #4294967295
 801030a:	e029      	b.n	8010360 <atan+0xc8>
 801030c:	f000 f95c 	bl	80105c8 <fabs>
 8010310:	4ba7      	ldr	r3, [pc, #668]	@ (80105b0 <atan+0x318>)
 8010312:	429e      	cmp	r6, r3
 8010314:	ec55 4b10 	vmov	r4, r5, d0
 8010318:	f200 80bc 	bhi.w	8010494 <atan+0x1fc>
 801031c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010320:	429e      	cmp	r6, r3
 8010322:	f200 809e 	bhi.w	8010462 <atan+0x1ca>
 8010326:	4622      	mov	r2, r4
 8010328:	462b      	mov	r3, r5
 801032a:	4620      	mov	r0, r4
 801032c:	4629      	mov	r1, r5
 801032e:	f7ef ffad 	bl	800028c <__adddf3>
 8010332:	4b9e      	ldr	r3, [pc, #632]	@ (80105ac <atan+0x314>)
 8010334:	2200      	movs	r2, #0
 8010336:	f7ef ffa7 	bl	8000288 <__aeabi_dsub>
 801033a:	2200      	movs	r2, #0
 801033c:	4606      	mov	r6, r0
 801033e:	460f      	mov	r7, r1
 8010340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010344:	4620      	mov	r0, r4
 8010346:	4629      	mov	r1, r5
 8010348:	f7ef ffa0 	bl	800028c <__adddf3>
 801034c:	4602      	mov	r2, r0
 801034e:	460b      	mov	r3, r1
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7f0 fa7a 	bl	800084c <__aeabi_ddiv>
 8010358:	f04f 0a00 	mov.w	sl, #0
 801035c:	4604      	mov	r4, r0
 801035e:	460d      	mov	r5, r1
 8010360:	4622      	mov	r2, r4
 8010362:	462b      	mov	r3, r5
 8010364:	4620      	mov	r0, r4
 8010366:	4629      	mov	r1, r5
 8010368:	f7f0 f946 	bl	80005f8 <__aeabi_dmul>
 801036c:	4602      	mov	r2, r0
 801036e:	460b      	mov	r3, r1
 8010370:	4680      	mov	r8, r0
 8010372:	4689      	mov	r9, r1
 8010374:	f7f0 f940 	bl	80005f8 <__aeabi_dmul>
 8010378:	a371      	add	r3, pc, #452	@ (adr r3, 8010540 <atan+0x2a8>)
 801037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037e:	4606      	mov	r6, r0
 8010380:	460f      	mov	r7, r1
 8010382:	f7f0 f939 	bl	80005f8 <__aeabi_dmul>
 8010386:	a370      	add	r3, pc, #448	@ (adr r3, 8010548 <atan+0x2b0>)
 8010388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038c:	f7ef ff7e 	bl	800028c <__adddf3>
 8010390:	4632      	mov	r2, r6
 8010392:	463b      	mov	r3, r7
 8010394:	f7f0 f930 	bl	80005f8 <__aeabi_dmul>
 8010398:	a36d      	add	r3, pc, #436	@ (adr r3, 8010550 <atan+0x2b8>)
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	f7ef ff75 	bl	800028c <__adddf3>
 80103a2:	4632      	mov	r2, r6
 80103a4:	463b      	mov	r3, r7
 80103a6:	f7f0 f927 	bl	80005f8 <__aeabi_dmul>
 80103aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8010558 <atan+0x2c0>)
 80103ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b0:	f7ef ff6c 	bl	800028c <__adddf3>
 80103b4:	4632      	mov	r2, r6
 80103b6:	463b      	mov	r3, r7
 80103b8:	f7f0 f91e 	bl	80005f8 <__aeabi_dmul>
 80103bc:	a368      	add	r3, pc, #416	@ (adr r3, 8010560 <atan+0x2c8>)
 80103be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c2:	f7ef ff63 	bl	800028c <__adddf3>
 80103c6:	4632      	mov	r2, r6
 80103c8:	463b      	mov	r3, r7
 80103ca:	f7f0 f915 	bl	80005f8 <__aeabi_dmul>
 80103ce:	a366      	add	r3, pc, #408	@ (adr r3, 8010568 <atan+0x2d0>)
 80103d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d4:	f7ef ff5a 	bl	800028c <__adddf3>
 80103d8:	4642      	mov	r2, r8
 80103da:	464b      	mov	r3, r9
 80103dc:	f7f0 f90c 	bl	80005f8 <__aeabi_dmul>
 80103e0:	a363      	add	r3, pc, #396	@ (adr r3, 8010570 <atan+0x2d8>)
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	4680      	mov	r8, r0
 80103e8:	4689      	mov	r9, r1
 80103ea:	4630      	mov	r0, r6
 80103ec:	4639      	mov	r1, r7
 80103ee:	f7f0 f903 	bl	80005f8 <__aeabi_dmul>
 80103f2:	a361      	add	r3, pc, #388	@ (adr r3, 8010578 <atan+0x2e0>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	f7ef ff46 	bl	8000288 <__aeabi_dsub>
 80103fc:	4632      	mov	r2, r6
 80103fe:	463b      	mov	r3, r7
 8010400:	f7f0 f8fa 	bl	80005f8 <__aeabi_dmul>
 8010404:	a35e      	add	r3, pc, #376	@ (adr r3, 8010580 <atan+0x2e8>)
 8010406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040a:	f7ef ff3d 	bl	8000288 <__aeabi_dsub>
 801040e:	4632      	mov	r2, r6
 8010410:	463b      	mov	r3, r7
 8010412:	f7f0 f8f1 	bl	80005f8 <__aeabi_dmul>
 8010416:	a35c      	add	r3, pc, #368	@ (adr r3, 8010588 <atan+0x2f0>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	f7ef ff34 	bl	8000288 <__aeabi_dsub>
 8010420:	4632      	mov	r2, r6
 8010422:	463b      	mov	r3, r7
 8010424:	f7f0 f8e8 	bl	80005f8 <__aeabi_dmul>
 8010428:	a359      	add	r3, pc, #356	@ (adr r3, 8010590 <atan+0x2f8>)
 801042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042e:	f7ef ff2b 	bl	8000288 <__aeabi_dsub>
 8010432:	4632      	mov	r2, r6
 8010434:	463b      	mov	r3, r7
 8010436:	f7f0 f8df 	bl	80005f8 <__aeabi_dmul>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	4640      	mov	r0, r8
 8010440:	4649      	mov	r1, r9
 8010442:	f7ef ff23 	bl	800028c <__adddf3>
 8010446:	4622      	mov	r2, r4
 8010448:	462b      	mov	r3, r5
 801044a:	f7f0 f8d5 	bl	80005f8 <__aeabi_dmul>
 801044e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010452:	4602      	mov	r2, r0
 8010454:	460b      	mov	r3, r1
 8010456:	d148      	bne.n	80104ea <atan+0x252>
 8010458:	4620      	mov	r0, r4
 801045a:	4629      	mov	r1, r5
 801045c:	f7ef ff14 	bl	8000288 <__aeabi_dsub>
 8010460:	e72f      	b.n	80102c2 <atan+0x2a>
 8010462:	4b52      	ldr	r3, [pc, #328]	@ (80105ac <atan+0x314>)
 8010464:	2200      	movs	r2, #0
 8010466:	4620      	mov	r0, r4
 8010468:	4629      	mov	r1, r5
 801046a:	f7ef ff0d 	bl	8000288 <__aeabi_dsub>
 801046e:	4b4f      	ldr	r3, [pc, #316]	@ (80105ac <atan+0x314>)
 8010470:	4606      	mov	r6, r0
 8010472:	460f      	mov	r7, r1
 8010474:	2200      	movs	r2, #0
 8010476:	4620      	mov	r0, r4
 8010478:	4629      	mov	r1, r5
 801047a:	f7ef ff07 	bl	800028c <__adddf3>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	4630      	mov	r0, r6
 8010484:	4639      	mov	r1, r7
 8010486:	f7f0 f9e1 	bl	800084c <__aeabi_ddiv>
 801048a:	f04f 0a01 	mov.w	sl, #1
 801048e:	4604      	mov	r4, r0
 8010490:	460d      	mov	r5, r1
 8010492:	e765      	b.n	8010360 <atan+0xc8>
 8010494:	4b47      	ldr	r3, [pc, #284]	@ (80105b4 <atan+0x31c>)
 8010496:	429e      	cmp	r6, r3
 8010498:	d21c      	bcs.n	80104d4 <atan+0x23c>
 801049a:	4b47      	ldr	r3, [pc, #284]	@ (80105b8 <atan+0x320>)
 801049c:	2200      	movs	r2, #0
 801049e:	4620      	mov	r0, r4
 80104a0:	4629      	mov	r1, r5
 80104a2:	f7ef fef1 	bl	8000288 <__aeabi_dsub>
 80104a6:	4b44      	ldr	r3, [pc, #272]	@ (80105b8 <atan+0x320>)
 80104a8:	4606      	mov	r6, r0
 80104aa:	460f      	mov	r7, r1
 80104ac:	2200      	movs	r2, #0
 80104ae:	4620      	mov	r0, r4
 80104b0:	4629      	mov	r1, r5
 80104b2:	f7f0 f8a1 	bl	80005f8 <__aeabi_dmul>
 80104b6:	4b3d      	ldr	r3, [pc, #244]	@ (80105ac <atan+0x314>)
 80104b8:	2200      	movs	r2, #0
 80104ba:	f7ef fee7 	bl	800028c <__adddf3>
 80104be:	4602      	mov	r2, r0
 80104c0:	460b      	mov	r3, r1
 80104c2:	4630      	mov	r0, r6
 80104c4:	4639      	mov	r1, r7
 80104c6:	f7f0 f9c1 	bl	800084c <__aeabi_ddiv>
 80104ca:	f04f 0a02 	mov.w	sl, #2
 80104ce:	4604      	mov	r4, r0
 80104d0:	460d      	mov	r5, r1
 80104d2:	e745      	b.n	8010360 <atan+0xc8>
 80104d4:	4622      	mov	r2, r4
 80104d6:	462b      	mov	r3, r5
 80104d8:	4938      	ldr	r1, [pc, #224]	@ (80105bc <atan+0x324>)
 80104da:	2000      	movs	r0, #0
 80104dc:	f7f0 f9b6 	bl	800084c <__aeabi_ddiv>
 80104e0:	f04f 0a03 	mov.w	sl, #3
 80104e4:	4604      	mov	r4, r0
 80104e6:	460d      	mov	r5, r1
 80104e8:	e73a      	b.n	8010360 <atan+0xc8>
 80104ea:	4b35      	ldr	r3, [pc, #212]	@ (80105c0 <atan+0x328>)
 80104ec:	4e35      	ldr	r6, [pc, #212]	@ (80105c4 <atan+0x32c>)
 80104ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f6:	f7ef fec7 	bl	8000288 <__aeabi_dsub>
 80104fa:	4622      	mov	r2, r4
 80104fc:	462b      	mov	r3, r5
 80104fe:	f7ef fec3 	bl	8000288 <__aeabi_dsub>
 8010502:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010506:	4602      	mov	r2, r0
 8010508:	460b      	mov	r3, r1
 801050a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801050e:	f7ef febb 	bl	8000288 <__aeabi_dsub>
 8010512:	f1bb 0f00 	cmp.w	fp, #0
 8010516:	4604      	mov	r4, r0
 8010518:	460d      	mov	r5, r1
 801051a:	f6bf aedc 	bge.w	80102d6 <atan+0x3e>
 801051e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010522:	461d      	mov	r5, r3
 8010524:	e6d7      	b.n	80102d6 <atan+0x3e>
 8010526:	a51c      	add	r5, pc, #112	@ (adr r5, 8010598 <atan+0x300>)
 8010528:	e9d5 4500 	ldrd	r4, r5, [r5]
 801052c:	e6d3      	b.n	80102d6 <atan+0x3e>
 801052e:	bf00      	nop
 8010530:	54442d18 	.word	0x54442d18
 8010534:	3ff921fb 	.word	0x3ff921fb
 8010538:	8800759c 	.word	0x8800759c
 801053c:	7e37e43c 	.word	0x7e37e43c
 8010540:	e322da11 	.word	0xe322da11
 8010544:	3f90ad3a 	.word	0x3f90ad3a
 8010548:	24760deb 	.word	0x24760deb
 801054c:	3fa97b4b 	.word	0x3fa97b4b
 8010550:	a0d03d51 	.word	0xa0d03d51
 8010554:	3fb10d66 	.word	0x3fb10d66
 8010558:	c54c206e 	.word	0xc54c206e
 801055c:	3fb745cd 	.word	0x3fb745cd
 8010560:	920083ff 	.word	0x920083ff
 8010564:	3fc24924 	.word	0x3fc24924
 8010568:	5555550d 	.word	0x5555550d
 801056c:	3fd55555 	.word	0x3fd55555
 8010570:	2c6a6c2f 	.word	0x2c6a6c2f
 8010574:	bfa2b444 	.word	0xbfa2b444
 8010578:	52defd9a 	.word	0x52defd9a
 801057c:	3fadde2d 	.word	0x3fadde2d
 8010580:	af749a6d 	.word	0xaf749a6d
 8010584:	3fb3b0f2 	.word	0x3fb3b0f2
 8010588:	fe231671 	.word	0xfe231671
 801058c:	3fbc71c6 	.word	0x3fbc71c6
 8010590:	9998ebc4 	.word	0x9998ebc4
 8010594:	3fc99999 	.word	0x3fc99999
 8010598:	54442d18 	.word	0x54442d18
 801059c:	bff921fb 	.word	0xbff921fb
 80105a0:	440fffff 	.word	0x440fffff
 80105a4:	7ff00000 	.word	0x7ff00000
 80105a8:	3fdbffff 	.word	0x3fdbffff
 80105ac:	3ff00000 	.word	0x3ff00000
 80105b0:	3ff2ffff 	.word	0x3ff2ffff
 80105b4:	40038000 	.word	0x40038000
 80105b8:	3ff80000 	.word	0x3ff80000
 80105bc:	bff00000 	.word	0xbff00000
 80105c0:	08011858 	.word	0x08011858
 80105c4:	08011878 	.word	0x08011878

080105c8 <fabs>:
 80105c8:	ec51 0b10 	vmov	r0, r1, d0
 80105cc:	4602      	mov	r2, r0
 80105ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80105d2:	ec43 2b10 	vmov	d0, r2, r3
 80105d6:	4770      	bx	lr

080105d8 <__ieee754_sqrt>:
 80105d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105dc:	4a68      	ldr	r2, [pc, #416]	@ (8010780 <__ieee754_sqrt+0x1a8>)
 80105de:	ec55 4b10 	vmov	r4, r5, d0
 80105e2:	43aa      	bics	r2, r5
 80105e4:	462b      	mov	r3, r5
 80105e6:	4621      	mov	r1, r4
 80105e8:	d110      	bne.n	801060c <__ieee754_sqrt+0x34>
 80105ea:	4622      	mov	r2, r4
 80105ec:	4620      	mov	r0, r4
 80105ee:	4629      	mov	r1, r5
 80105f0:	f7f0 f802 	bl	80005f8 <__aeabi_dmul>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	4620      	mov	r0, r4
 80105fa:	4629      	mov	r1, r5
 80105fc:	f7ef fe46 	bl	800028c <__adddf3>
 8010600:	4604      	mov	r4, r0
 8010602:	460d      	mov	r5, r1
 8010604:	ec45 4b10 	vmov	d0, r4, r5
 8010608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	2d00      	cmp	r5, #0
 801060e:	dc0e      	bgt.n	801062e <__ieee754_sqrt+0x56>
 8010610:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010614:	4322      	orrs	r2, r4
 8010616:	d0f5      	beq.n	8010604 <__ieee754_sqrt+0x2c>
 8010618:	b19d      	cbz	r5, 8010642 <__ieee754_sqrt+0x6a>
 801061a:	4622      	mov	r2, r4
 801061c:	4620      	mov	r0, r4
 801061e:	4629      	mov	r1, r5
 8010620:	f7ef fe32 	bl	8000288 <__aeabi_dsub>
 8010624:	4602      	mov	r2, r0
 8010626:	460b      	mov	r3, r1
 8010628:	f7f0 f910 	bl	800084c <__aeabi_ddiv>
 801062c:	e7e8      	b.n	8010600 <__ieee754_sqrt+0x28>
 801062e:	152a      	asrs	r2, r5, #20
 8010630:	d115      	bne.n	801065e <__ieee754_sqrt+0x86>
 8010632:	2000      	movs	r0, #0
 8010634:	e009      	b.n	801064a <__ieee754_sqrt+0x72>
 8010636:	0acb      	lsrs	r3, r1, #11
 8010638:	3a15      	subs	r2, #21
 801063a:	0549      	lsls	r1, r1, #21
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0fa      	beq.n	8010636 <__ieee754_sqrt+0x5e>
 8010640:	e7f7      	b.n	8010632 <__ieee754_sqrt+0x5a>
 8010642:	462a      	mov	r2, r5
 8010644:	e7fa      	b.n	801063c <__ieee754_sqrt+0x64>
 8010646:	005b      	lsls	r3, r3, #1
 8010648:	3001      	adds	r0, #1
 801064a:	02dc      	lsls	r4, r3, #11
 801064c:	d5fb      	bpl.n	8010646 <__ieee754_sqrt+0x6e>
 801064e:	1e44      	subs	r4, r0, #1
 8010650:	1b12      	subs	r2, r2, r4
 8010652:	f1c0 0420 	rsb	r4, r0, #32
 8010656:	fa21 f404 	lsr.w	r4, r1, r4
 801065a:	4323      	orrs	r3, r4
 801065c:	4081      	lsls	r1, r0
 801065e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010662:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801066a:	07d2      	lsls	r2, r2, #31
 801066c:	bf5c      	itt	pl
 801066e:	005b      	lslpl	r3, r3, #1
 8010670:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010674:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010678:	bf58      	it	pl
 801067a:	0049      	lslpl	r1, r1, #1
 801067c:	2600      	movs	r6, #0
 801067e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010682:	106d      	asrs	r5, r5, #1
 8010684:	0049      	lsls	r1, r1, #1
 8010686:	2016      	movs	r0, #22
 8010688:	4632      	mov	r2, r6
 801068a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801068e:	1917      	adds	r7, r2, r4
 8010690:	429f      	cmp	r7, r3
 8010692:	bfde      	ittt	le
 8010694:	193a      	addle	r2, r7, r4
 8010696:	1bdb      	suble	r3, r3, r7
 8010698:	1936      	addle	r6, r6, r4
 801069a:	0fcf      	lsrs	r7, r1, #31
 801069c:	3801      	subs	r0, #1
 801069e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80106a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80106a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80106aa:	d1f0      	bne.n	801068e <__ieee754_sqrt+0xb6>
 80106ac:	4604      	mov	r4, r0
 80106ae:	2720      	movs	r7, #32
 80106b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80106b4:	429a      	cmp	r2, r3
 80106b6:	eb00 0e0c 	add.w	lr, r0, ip
 80106ba:	db02      	blt.n	80106c2 <__ieee754_sqrt+0xea>
 80106bc:	d113      	bne.n	80106e6 <__ieee754_sqrt+0x10e>
 80106be:	458e      	cmp	lr, r1
 80106c0:	d811      	bhi.n	80106e6 <__ieee754_sqrt+0x10e>
 80106c2:	f1be 0f00 	cmp.w	lr, #0
 80106c6:	eb0e 000c 	add.w	r0, lr, ip
 80106ca:	da42      	bge.n	8010752 <__ieee754_sqrt+0x17a>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	db40      	blt.n	8010752 <__ieee754_sqrt+0x17a>
 80106d0:	f102 0801 	add.w	r8, r2, #1
 80106d4:	1a9b      	subs	r3, r3, r2
 80106d6:	458e      	cmp	lr, r1
 80106d8:	bf88      	it	hi
 80106da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80106de:	eba1 010e 	sub.w	r1, r1, lr
 80106e2:	4464      	add	r4, ip
 80106e4:	4642      	mov	r2, r8
 80106e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80106ea:	3f01      	subs	r7, #1
 80106ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80106f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80106f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80106f8:	d1dc      	bne.n	80106b4 <__ieee754_sqrt+0xdc>
 80106fa:	4319      	orrs	r1, r3
 80106fc:	d01b      	beq.n	8010736 <__ieee754_sqrt+0x15e>
 80106fe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010784 <__ieee754_sqrt+0x1ac>
 8010702:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010788 <__ieee754_sqrt+0x1b0>
 8010706:	e9da 0100 	ldrd	r0, r1, [sl]
 801070a:	e9db 2300 	ldrd	r2, r3, [fp]
 801070e:	f7ef fdbb 	bl	8000288 <__aeabi_dsub>
 8010712:	e9da 8900 	ldrd	r8, r9, [sl]
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	4640      	mov	r0, r8
 801071c:	4649      	mov	r1, r9
 801071e:	f7f0 f9e7 	bl	8000af0 <__aeabi_dcmple>
 8010722:	b140      	cbz	r0, 8010736 <__ieee754_sqrt+0x15e>
 8010724:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010728:	e9da 0100 	ldrd	r0, r1, [sl]
 801072c:	e9db 2300 	ldrd	r2, r3, [fp]
 8010730:	d111      	bne.n	8010756 <__ieee754_sqrt+0x17e>
 8010732:	3601      	adds	r6, #1
 8010734:	463c      	mov	r4, r7
 8010736:	1072      	asrs	r2, r6, #1
 8010738:	0863      	lsrs	r3, r4, #1
 801073a:	07f1      	lsls	r1, r6, #31
 801073c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010740:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010744:	bf48      	it	mi
 8010746:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801074a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801074e:	4618      	mov	r0, r3
 8010750:	e756      	b.n	8010600 <__ieee754_sqrt+0x28>
 8010752:	4690      	mov	r8, r2
 8010754:	e7be      	b.n	80106d4 <__ieee754_sqrt+0xfc>
 8010756:	f7ef fd99 	bl	800028c <__adddf3>
 801075a:	e9da 8900 	ldrd	r8, r9, [sl]
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	4640      	mov	r0, r8
 8010764:	4649      	mov	r1, r9
 8010766:	f7f0 f9b9 	bl	8000adc <__aeabi_dcmplt>
 801076a:	b120      	cbz	r0, 8010776 <__ieee754_sqrt+0x19e>
 801076c:	1ca0      	adds	r0, r4, #2
 801076e:	bf08      	it	eq
 8010770:	3601      	addeq	r6, #1
 8010772:	3402      	adds	r4, #2
 8010774:	e7df      	b.n	8010736 <__ieee754_sqrt+0x15e>
 8010776:	1c63      	adds	r3, r4, #1
 8010778:	f023 0401 	bic.w	r4, r3, #1
 801077c:	e7db      	b.n	8010736 <__ieee754_sqrt+0x15e>
 801077e:	bf00      	nop
 8010780:	7ff00000 	.word	0x7ff00000
 8010784:	200002c0 	.word	0x200002c0
 8010788:	200002b8 	.word	0x200002b8
 801078c:	00000000 	.word	0x00000000

08010790 <__kernel_rem_pio2>:
 8010790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010794:	ed2d 8b02 	vpush	{d8}
 8010798:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801079c:	f112 0f14 	cmn.w	r2, #20
 80107a0:	9306      	str	r3, [sp, #24]
 80107a2:	9104      	str	r1, [sp, #16]
 80107a4:	4bbe      	ldr	r3, [pc, #760]	@ (8010aa0 <__kernel_rem_pio2+0x310>)
 80107a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80107a8:	9008      	str	r0, [sp, #32]
 80107aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	9b06      	ldr	r3, [sp, #24]
 80107b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80107b6:	bfa8      	it	ge
 80107b8:	1ed4      	subge	r4, r2, #3
 80107ba:	9305      	str	r3, [sp, #20]
 80107bc:	bfb2      	itee	lt
 80107be:	2400      	movlt	r4, #0
 80107c0:	2318      	movge	r3, #24
 80107c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80107c6:	f06f 0317 	mvn.w	r3, #23
 80107ca:	fb04 3303 	mla	r3, r4, r3, r3
 80107ce:	eb03 0b02 	add.w	fp, r3, r2
 80107d2:	9b00      	ldr	r3, [sp, #0]
 80107d4:	9a05      	ldr	r2, [sp, #20]
 80107d6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8010a90 <__kernel_rem_pio2+0x300>
 80107da:	eb03 0802 	add.w	r8, r3, r2
 80107de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80107e0:	1aa7      	subs	r7, r4, r2
 80107e2:	ae20      	add	r6, sp, #128	@ 0x80
 80107e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80107e8:	2500      	movs	r5, #0
 80107ea:	4545      	cmp	r5, r8
 80107ec:	dd13      	ble.n	8010816 <__kernel_rem_pio2+0x86>
 80107ee:	9b06      	ldr	r3, [sp, #24]
 80107f0:	aa20      	add	r2, sp, #128	@ 0x80
 80107f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80107f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80107fa:	f04f 0800 	mov.w	r8, #0
 80107fe:	9b00      	ldr	r3, [sp, #0]
 8010800:	4598      	cmp	r8, r3
 8010802:	dc31      	bgt.n	8010868 <__kernel_rem_pio2+0xd8>
 8010804:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8010a90 <__kernel_rem_pio2+0x300>
 8010808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801080c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010810:	462f      	mov	r7, r5
 8010812:	2600      	movs	r6, #0
 8010814:	e01b      	b.n	801084e <__kernel_rem_pio2+0xbe>
 8010816:	42ef      	cmn	r7, r5
 8010818:	d407      	bmi.n	801082a <__kernel_rem_pio2+0x9a>
 801081a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801081e:	f7ef fe81 	bl	8000524 <__aeabi_i2d>
 8010822:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010826:	3501      	adds	r5, #1
 8010828:	e7df      	b.n	80107ea <__kernel_rem_pio2+0x5a>
 801082a:	ec51 0b18 	vmov	r0, r1, d8
 801082e:	e7f8      	b.n	8010822 <__kernel_rem_pio2+0x92>
 8010830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010834:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010838:	f7ef fede 	bl	80005f8 <__aeabi_dmul>
 801083c:	4602      	mov	r2, r0
 801083e:	460b      	mov	r3, r1
 8010840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010844:	f7ef fd22 	bl	800028c <__adddf3>
 8010848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801084c:	3601      	adds	r6, #1
 801084e:	9b05      	ldr	r3, [sp, #20]
 8010850:	429e      	cmp	r6, r3
 8010852:	f1a7 0708 	sub.w	r7, r7, #8
 8010856:	ddeb      	ble.n	8010830 <__kernel_rem_pio2+0xa0>
 8010858:	ed9d 7b02 	vldr	d7, [sp, #8]
 801085c:	f108 0801 	add.w	r8, r8, #1
 8010860:	ecaa 7b02 	vstmia	sl!, {d7}
 8010864:	3508      	adds	r5, #8
 8010866:	e7ca      	b.n	80107fe <__kernel_rem_pio2+0x6e>
 8010868:	9b00      	ldr	r3, [sp, #0]
 801086a:	f8dd 8000 	ldr.w	r8, [sp]
 801086e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010870:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010874:	930a      	str	r3, [sp, #40]	@ 0x28
 8010876:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010878:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801087c:	9309      	str	r3, [sp, #36]	@ 0x24
 801087e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010884:	ab98      	add	r3, sp, #608	@ 0x260
 8010886:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801088a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801088e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010892:	ac0c      	add	r4, sp, #48	@ 0x30
 8010894:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010896:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801089a:	46a1      	mov	r9, r4
 801089c:	46c2      	mov	sl, r8
 801089e:	f1ba 0f00 	cmp.w	sl, #0
 80108a2:	f1a5 0508 	sub.w	r5, r5, #8
 80108a6:	dc77      	bgt.n	8010998 <__kernel_rem_pio2+0x208>
 80108a8:	4658      	mov	r0, fp
 80108aa:	ed9d 0b02 	vldr	d0, [sp, #8]
 80108ae:	f000 fac7 	bl	8010e40 <scalbn>
 80108b2:	ec57 6b10 	vmov	r6, r7, d0
 80108b6:	2200      	movs	r2, #0
 80108b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80108bc:	4630      	mov	r0, r6
 80108be:	4639      	mov	r1, r7
 80108c0:	f7ef fe9a 	bl	80005f8 <__aeabi_dmul>
 80108c4:	ec41 0b10 	vmov	d0, r0, r1
 80108c8:	f000 fb3a 	bl	8010f40 <floor>
 80108cc:	4b75      	ldr	r3, [pc, #468]	@ (8010aa4 <__kernel_rem_pio2+0x314>)
 80108ce:	ec51 0b10 	vmov	r0, r1, d0
 80108d2:	2200      	movs	r2, #0
 80108d4:	f7ef fe90 	bl	80005f8 <__aeabi_dmul>
 80108d8:	4602      	mov	r2, r0
 80108da:	460b      	mov	r3, r1
 80108dc:	4630      	mov	r0, r6
 80108de:	4639      	mov	r1, r7
 80108e0:	f7ef fcd2 	bl	8000288 <__aeabi_dsub>
 80108e4:	460f      	mov	r7, r1
 80108e6:	4606      	mov	r6, r0
 80108e8:	f7f0 f936 	bl	8000b58 <__aeabi_d2iz>
 80108ec:	9002      	str	r0, [sp, #8]
 80108ee:	f7ef fe19 	bl	8000524 <__aeabi_i2d>
 80108f2:	4602      	mov	r2, r0
 80108f4:	460b      	mov	r3, r1
 80108f6:	4630      	mov	r0, r6
 80108f8:	4639      	mov	r1, r7
 80108fa:	f7ef fcc5 	bl	8000288 <__aeabi_dsub>
 80108fe:	f1bb 0f00 	cmp.w	fp, #0
 8010902:	4606      	mov	r6, r0
 8010904:	460f      	mov	r7, r1
 8010906:	dd6c      	ble.n	80109e2 <__kernel_rem_pio2+0x252>
 8010908:	f108 31ff 	add.w	r1, r8, #4294967295
 801090c:	ab0c      	add	r3, sp, #48	@ 0x30
 801090e:	9d02      	ldr	r5, [sp, #8]
 8010910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010914:	f1cb 0018 	rsb	r0, fp, #24
 8010918:	fa43 f200 	asr.w	r2, r3, r0
 801091c:	4415      	add	r5, r2
 801091e:	4082      	lsls	r2, r0
 8010920:	1a9b      	subs	r3, r3, r2
 8010922:	aa0c      	add	r2, sp, #48	@ 0x30
 8010924:	9502      	str	r5, [sp, #8]
 8010926:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801092a:	f1cb 0217 	rsb	r2, fp, #23
 801092e:	fa43 f902 	asr.w	r9, r3, r2
 8010932:	f1b9 0f00 	cmp.w	r9, #0
 8010936:	dd64      	ble.n	8010a02 <__kernel_rem_pio2+0x272>
 8010938:	9b02      	ldr	r3, [sp, #8]
 801093a:	2200      	movs	r2, #0
 801093c:	3301      	adds	r3, #1
 801093e:	9302      	str	r3, [sp, #8]
 8010940:	4615      	mov	r5, r2
 8010942:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010946:	4590      	cmp	r8, r2
 8010948:	f300 80b8 	bgt.w	8010abc <__kernel_rem_pio2+0x32c>
 801094c:	f1bb 0f00 	cmp.w	fp, #0
 8010950:	dd07      	ble.n	8010962 <__kernel_rem_pio2+0x1d2>
 8010952:	f1bb 0f01 	cmp.w	fp, #1
 8010956:	f000 80bf 	beq.w	8010ad8 <__kernel_rem_pio2+0x348>
 801095a:	f1bb 0f02 	cmp.w	fp, #2
 801095e:	f000 80c6 	beq.w	8010aee <__kernel_rem_pio2+0x35e>
 8010962:	f1b9 0f02 	cmp.w	r9, #2
 8010966:	d14c      	bne.n	8010a02 <__kernel_rem_pio2+0x272>
 8010968:	4632      	mov	r2, r6
 801096a:	463b      	mov	r3, r7
 801096c:	494e      	ldr	r1, [pc, #312]	@ (8010aa8 <__kernel_rem_pio2+0x318>)
 801096e:	2000      	movs	r0, #0
 8010970:	f7ef fc8a 	bl	8000288 <__aeabi_dsub>
 8010974:	4606      	mov	r6, r0
 8010976:	460f      	mov	r7, r1
 8010978:	2d00      	cmp	r5, #0
 801097a:	d042      	beq.n	8010a02 <__kernel_rem_pio2+0x272>
 801097c:	4658      	mov	r0, fp
 801097e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8010a98 <__kernel_rem_pio2+0x308>
 8010982:	f000 fa5d 	bl	8010e40 <scalbn>
 8010986:	4630      	mov	r0, r6
 8010988:	4639      	mov	r1, r7
 801098a:	ec53 2b10 	vmov	r2, r3, d0
 801098e:	f7ef fc7b 	bl	8000288 <__aeabi_dsub>
 8010992:	4606      	mov	r6, r0
 8010994:	460f      	mov	r7, r1
 8010996:	e034      	b.n	8010a02 <__kernel_rem_pio2+0x272>
 8010998:	4b44      	ldr	r3, [pc, #272]	@ (8010aac <__kernel_rem_pio2+0x31c>)
 801099a:	2200      	movs	r2, #0
 801099c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109a0:	f7ef fe2a 	bl	80005f8 <__aeabi_dmul>
 80109a4:	f7f0 f8d8 	bl	8000b58 <__aeabi_d2iz>
 80109a8:	f7ef fdbc 	bl	8000524 <__aeabi_i2d>
 80109ac:	4b40      	ldr	r3, [pc, #256]	@ (8010ab0 <__kernel_rem_pio2+0x320>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	4606      	mov	r6, r0
 80109b2:	460f      	mov	r7, r1
 80109b4:	f7ef fe20 	bl	80005f8 <__aeabi_dmul>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109c0:	f7ef fc62 	bl	8000288 <__aeabi_dsub>
 80109c4:	f7f0 f8c8 	bl	8000b58 <__aeabi_d2iz>
 80109c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80109cc:	f849 0b04 	str.w	r0, [r9], #4
 80109d0:	4639      	mov	r1, r7
 80109d2:	4630      	mov	r0, r6
 80109d4:	f7ef fc5a 	bl	800028c <__adddf3>
 80109d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109e0:	e75d      	b.n	801089e <__kernel_rem_pio2+0x10e>
 80109e2:	d107      	bne.n	80109f4 <__kernel_rem_pio2+0x264>
 80109e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80109e8:	aa0c      	add	r2, sp, #48	@ 0x30
 80109ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109ee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80109f2:	e79e      	b.n	8010932 <__kernel_rem_pio2+0x1a2>
 80109f4:	4b2f      	ldr	r3, [pc, #188]	@ (8010ab4 <__kernel_rem_pio2+0x324>)
 80109f6:	2200      	movs	r2, #0
 80109f8:	f7f0 f884 	bl	8000b04 <__aeabi_dcmpge>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d143      	bne.n	8010a88 <__kernel_rem_pio2+0x2f8>
 8010a00:	4681      	mov	r9, r0
 8010a02:	2200      	movs	r2, #0
 8010a04:	2300      	movs	r3, #0
 8010a06:	4630      	mov	r0, r6
 8010a08:	4639      	mov	r1, r7
 8010a0a:	f7f0 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	f000 80bf 	beq.w	8010b92 <__kernel_rem_pio2+0x402>
 8010a14:	f108 33ff 	add.w	r3, r8, #4294967295
 8010a18:	2200      	movs	r2, #0
 8010a1a:	9900      	ldr	r1, [sp, #0]
 8010a1c:	428b      	cmp	r3, r1
 8010a1e:	da6e      	bge.n	8010afe <__kernel_rem_pio2+0x36e>
 8010a20:	2a00      	cmp	r2, #0
 8010a22:	f000 8089 	beq.w	8010b38 <__kernel_rem_pio2+0x3a8>
 8010a26:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a2c:	f1ab 0b18 	sub.w	fp, fp, #24
 8010a30:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d0f6      	beq.n	8010a26 <__kernel_rem_pio2+0x296>
 8010a38:	4658      	mov	r0, fp
 8010a3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8010a98 <__kernel_rem_pio2+0x308>
 8010a3e:	f000 f9ff 	bl	8010e40 <scalbn>
 8010a42:	f108 0301 	add.w	r3, r8, #1
 8010a46:	00da      	lsls	r2, r3, #3
 8010a48:	9205      	str	r2, [sp, #20]
 8010a4a:	ec55 4b10 	vmov	r4, r5, d0
 8010a4e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010a50:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8010aac <__kernel_rem_pio2+0x31c>
 8010a54:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010a58:	4646      	mov	r6, r8
 8010a5a:	f04f 0a00 	mov.w	sl, #0
 8010a5e:	2e00      	cmp	r6, #0
 8010a60:	f280 80cf 	bge.w	8010c02 <__kernel_rem_pio2+0x472>
 8010a64:	4644      	mov	r4, r8
 8010a66:	2c00      	cmp	r4, #0
 8010a68:	f2c0 80fd 	blt.w	8010c66 <__kernel_rem_pio2+0x4d6>
 8010a6c:	4b12      	ldr	r3, [pc, #72]	@ (8010ab8 <__kernel_rem_pio2+0x328>)
 8010a6e:	461f      	mov	r7, r3
 8010a70:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010a72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a76:	9306      	str	r3, [sp, #24]
 8010a78:	f04f 0a00 	mov.w	sl, #0
 8010a7c:	f04f 0b00 	mov.w	fp, #0
 8010a80:	2600      	movs	r6, #0
 8010a82:	eba8 0504 	sub.w	r5, r8, r4
 8010a86:	e0e2      	b.n	8010c4e <__kernel_rem_pio2+0x4be>
 8010a88:	f04f 0902 	mov.w	r9, #2
 8010a8c:	e754      	b.n	8010938 <__kernel_rem_pio2+0x1a8>
 8010a8e:	bf00      	nop
	...
 8010a9c:	3ff00000 	.word	0x3ff00000
 8010aa0:	080118d8 	.word	0x080118d8
 8010aa4:	40200000 	.word	0x40200000
 8010aa8:	3ff00000 	.word	0x3ff00000
 8010aac:	3e700000 	.word	0x3e700000
 8010ab0:	41700000 	.word	0x41700000
 8010ab4:	3fe00000 	.word	0x3fe00000
 8010ab8:	08011898 	.word	0x08011898
 8010abc:	f854 3b04 	ldr.w	r3, [r4], #4
 8010ac0:	b945      	cbnz	r5, 8010ad4 <__kernel_rem_pio2+0x344>
 8010ac2:	b123      	cbz	r3, 8010ace <__kernel_rem_pio2+0x33e>
 8010ac4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010ac8:	f844 3c04 	str.w	r3, [r4, #-4]
 8010acc:	2301      	movs	r3, #1
 8010ace:	3201      	adds	r2, #1
 8010ad0:	461d      	mov	r5, r3
 8010ad2:	e738      	b.n	8010946 <__kernel_rem_pio2+0x1b6>
 8010ad4:	1acb      	subs	r3, r1, r3
 8010ad6:	e7f7      	b.n	8010ac8 <__kernel_rem_pio2+0x338>
 8010ad8:	f108 32ff 	add.w	r2, r8, #4294967295
 8010adc:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ae2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010ae6:	a90c      	add	r1, sp, #48	@ 0x30
 8010ae8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010aec:	e739      	b.n	8010962 <__kernel_rem_pio2+0x1d2>
 8010aee:	f108 32ff 	add.w	r2, r8, #4294967295
 8010af2:	ab0c      	add	r3, sp, #48	@ 0x30
 8010af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010afc:	e7f3      	b.n	8010ae6 <__kernel_rem_pio2+0x356>
 8010afe:	a90c      	add	r1, sp, #48	@ 0x30
 8010b00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010b04:	3b01      	subs	r3, #1
 8010b06:	430a      	orrs	r2, r1
 8010b08:	e787      	b.n	8010a1a <__kernel_rem_pio2+0x28a>
 8010b0a:	3401      	adds	r4, #1
 8010b0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010b10:	2a00      	cmp	r2, #0
 8010b12:	d0fa      	beq.n	8010b0a <__kernel_rem_pio2+0x37a>
 8010b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010b1a:	eb0d 0503 	add.w	r5, sp, r3
 8010b1e:	9b06      	ldr	r3, [sp, #24]
 8010b20:	aa20      	add	r2, sp, #128	@ 0x80
 8010b22:	4443      	add	r3, r8
 8010b24:	f108 0701 	add.w	r7, r8, #1
 8010b28:	3d98      	subs	r5, #152	@ 0x98
 8010b2a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010b2e:	4444      	add	r4, r8
 8010b30:	42bc      	cmp	r4, r7
 8010b32:	da04      	bge.n	8010b3e <__kernel_rem_pio2+0x3ae>
 8010b34:	46a0      	mov	r8, r4
 8010b36:	e6a2      	b.n	801087e <__kernel_rem_pio2+0xee>
 8010b38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b3a:	2401      	movs	r4, #1
 8010b3c:	e7e6      	b.n	8010b0c <__kernel_rem_pio2+0x37c>
 8010b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b40:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010b44:	f7ef fcee 	bl	8000524 <__aeabi_i2d>
 8010b48:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8010e10 <__kernel_rem_pio2+0x680>
 8010b4c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010b58:	46b2      	mov	sl, r6
 8010b5a:	f04f 0800 	mov.w	r8, #0
 8010b5e:	9b05      	ldr	r3, [sp, #20]
 8010b60:	4598      	cmp	r8, r3
 8010b62:	dd05      	ble.n	8010b70 <__kernel_rem_pio2+0x3e0>
 8010b64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b68:	3701      	adds	r7, #1
 8010b6a:	eca5 7b02 	vstmia	r5!, {d7}
 8010b6e:	e7df      	b.n	8010b30 <__kernel_rem_pio2+0x3a0>
 8010b70:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010b74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010b78:	f7ef fd3e 	bl	80005f8 <__aeabi_dmul>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	460b      	mov	r3, r1
 8010b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b84:	f7ef fb82 	bl	800028c <__adddf3>
 8010b88:	f108 0801 	add.w	r8, r8, #1
 8010b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b90:	e7e5      	b.n	8010b5e <__kernel_rem_pio2+0x3ce>
 8010b92:	f1cb 0000 	rsb	r0, fp, #0
 8010b96:	ec47 6b10 	vmov	d0, r6, r7
 8010b9a:	f000 f951 	bl	8010e40 <scalbn>
 8010b9e:	ec55 4b10 	vmov	r4, r5, d0
 8010ba2:	4b9d      	ldr	r3, [pc, #628]	@ (8010e18 <__kernel_rem_pio2+0x688>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	4629      	mov	r1, r5
 8010baa:	f7ef ffab 	bl	8000b04 <__aeabi_dcmpge>
 8010bae:	b300      	cbz	r0, 8010bf2 <__kernel_rem_pio2+0x462>
 8010bb0:	4b9a      	ldr	r3, [pc, #616]	@ (8010e1c <__kernel_rem_pio2+0x68c>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	f7ef fd1e 	bl	80005f8 <__aeabi_dmul>
 8010bbc:	f7ef ffcc 	bl	8000b58 <__aeabi_d2iz>
 8010bc0:	4606      	mov	r6, r0
 8010bc2:	f7ef fcaf 	bl	8000524 <__aeabi_i2d>
 8010bc6:	4b94      	ldr	r3, [pc, #592]	@ (8010e18 <__kernel_rem_pio2+0x688>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f7ef fd15 	bl	80005f8 <__aeabi_dmul>
 8010bce:	460b      	mov	r3, r1
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	4629      	mov	r1, r5
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f7ef fb57 	bl	8000288 <__aeabi_dsub>
 8010bda:	f7ef ffbd 	bl	8000b58 <__aeabi_d2iz>
 8010bde:	ab0c      	add	r3, sp, #48	@ 0x30
 8010be0:	f10b 0b18 	add.w	fp, fp, #24
 8010be4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010be8:	f108 0801 	add.w	r8, r8, #1
 8010bec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010bf0:	e722      	b.n	8010a38 <__kernel_rem_pio2+0x2a8>
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	f7ef ffaf 	bl	8000b58 <__aeabi_d2iz>
 8010bfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8010bfc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010c00:	e71a      	b.n	8010a38 <__kernel_rem_pio2+0x2a8>
 8010c02:	ab0c      	add	r3, sp, #48	@ 0x30
 8010c04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010c08:	f7ef fc8c 	bl	8000524 <__aeabi_i2d>
 8010c0c:	4622      	mov	r2, r4
 8010c0e:	462b      	mov	r3, r5
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	4652      	mov	r2, sl
 8010c16:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010c1a:	465b      	mov	r3, fp
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	4629      	mov	r1, r5
 8010c20:	f7ef fcea 	bl	80005f8 <__aeabi_dmul>
 8010c24:	3e01      	subs	r6, #1
 8010c26:	4604      	mov	r4, r0
 8010c28:	460d      	mov	r5, r1
 8010c2a:	e718      	b.n	8010a5e <__kernel_rem_pio2+0x2ce>
 8010c2c:	9906      	ldr	r1, [sp, #24]
 8010c2e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8010c32:	9106      	str	r1, [sp, #24]
 8010c34:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010c38:	f7ef fcde 	bl	80005f8 <__aeabi_dmul>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	460b      	mov	r3, r1
 8010c40:	4650      	mov	r0, sl
 8010c42:	4659      	mov	r1, fp
 8010c44:	f7ef fb22 	bl	800028c <__adddf3>
 8010c48:	3601      	adds	r6, #1
 8010c4a:	4682      	mov	sl, r0
 8010c4c:	468b      	mov	fp, r1
 8010c4e:	9b00      	ldr	r3, [sp, #0]
 8010c50:	429e      	cmp	r6, r3
 8010c52:	dc01      	bgt.n	8010c58 <__kernel_rem_pio2+0x4c8>
 8010c54:	42b5      	cmp	r5, r6
 8010c56:	dae9      	bge.n	8010c2c <__kernel_rem_pio2+0x49c>
 8010c58:	ab48      	add	r3, sp, #288	@ 0x120
 8010c5a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010c5e:	e9c5 ab00 	strd	sl, fp, [r5]
 8010c62:	3c01      	subs	r4, #1
 8010c64:	e6ff      	b.n	8010a66 <__kernel_rem_pio2+0x2d6>
 8010c66:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010c68:	2b02      	cmp	r3, #2
 8010c6a:	dc0b      	bgt.n	8010c84 <__kernel_rem_pio2+0x4f4>
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	dc39      	bgt.n	8010ce4 <__kernel_rem_pio2+0x554>
 8010c70:	d05d      	beq.n	8010d2e <__kernel_rem_pio2+0x59e>
 8010c72:	9b02      	ldr	r3, [sp, #8]
 8010c74:	f003 0007 	and.w	r0, r3, #7
 8010c78:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010c7c:	ecbd 8b02 	vpop	{d8}
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c84:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010c86:	2b03      	cmp	r3, #3
 8010c88:	d1f3      	bne.n	8010c72 <__kernel_rem_pio2+0x4e2>
 8010c8a:	9b05      	ldr	r3, [sp, #20]
 8010c8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010c90:	eb0d 0403 	add.w	r4, sp, r3
 8010c94:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010c98:	4625      	mov	r5, r4
 8010c9a:	46c2      	mov	sl, r8
 8010c9c:	f1ba 0f00 	cmp.w	sl, #0
 8010ca0:	f1a5 0508 	sub.w	r5, r5, #8
 8010ca4:	dc6b      	bgt.n	8010d7e <__kernel_rem_pio2+0x5ee>
 8010ca6:	4645      	mov	r5, r8
 8010ca8:	2d01      	cmp	r5, #1
 8010caa:	f1a4 0408 	sub.w	r4, r4, #8
 8010cae:	f300 8087 	bgt.w	8010dc0 <__kernel_rem_pio2+0x630>
 8010cb2:	9c05      	ldr	r4, [sp, #20]
 8010cb4:	ab48      	add	r3, sp, #288	@ 0x120
 8010cb6:	441c      	add	r4, r3
 8010cb8:	2000      	movs	r0, #0
 8010cba:	2100      	movs	r1, #0
 8010cbc:	f1b8 0f01 	cmp.w	r8, #1
 8010cc0:	f300 809c 	bgt.w	8010dfc <__kernel_rem_pio2+0x66c>
 8010cc4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8010cc8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8010ccc:	f1b9 0f00 	cmp.w	r9, #0
 8010cd0:	f040 80a6 	bne.w	8010e20 <__kernel_rem_pio2+0x690>
 8010cd4:	9b04      	ldr	r3, [sp, #16]
 8010cd6:	e9c3 7800 	strd	r7, r8, [r3]
 8010cda:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010cde:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010ce2:	e7c6      	b.n	8010c72 <__kernel_rem_pio2+0x4e2>
 8010ce4:	9d05      	ldr	r5, [sp, #20]
 8010ce6:	ab48      	add	r3, sp, #288	@ 0x120
 8010ce8:	441d      	add	r5, r3
 8010cea:	4644      	mov	r4, r8
 8010cec:	2000      	movs	r0, #0
 8010cee:	2100      	movs	r1, #0
 8010cf0:	2c00      	cmp	r4, #0
 8010cf2:	da35      	bge.n	8010d60 <__kernel_rem_pio2+0x5d0>
 8010cf4:	f1b9 0f00 	cmp.w	r9, #0
 8010cf8:	d038      	beq.n	8010d6c <__kernel_rem_pio2+0x5dc>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d00:	9c04      	ldr	r4, [sp, #16]
 8010d02:	e9c4 2300 	strd	r2, r3, [r4]
 8010d06:	4602      	mov	r2, r0
 8010d08:	460b      	mov	r3, r1
 8010d0a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8010d0e:	f7ef fabb 	bl	8000288 <__aeabi_dsub>
 8010d12:	ad4a      	add	r5, sp, #296	@ 0x128
 8010d14:	2401      	movs	r4, #1
 8010d16:	45a0      	cmp	r8, r4
 8010d18:	da2b      	bge.n	8010d72 <__kernel_rem_pio2+0x5e2>
 8010d1a:	f1b9 0f00 	cmp.w	r9, #0
 8010d1e:	d002      	beq.n	8010d26 <__kernel_rem_pio2+0x596>
 8010d20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d24:	4619      	mov	r1, r3
 8010d26:	9b04      	ldr	r3, [sp, #16]
 8010d28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010d2c:	e7a1      	b.n	8010c72 <__kernel_rem_pio2+0x4e2>
 8010d2e:	9c05      	ldr	r4, [sp, #20]
 8010d30:	ab48      	add	r3, sp, #288	@ 0x120
 8010d32:	441c      	add	r4, r3
 8010d34:	2000      	movs	r0, #0
 8010d36:	2100      	movs	r1, #0
 8010d38:	f1b8 0f00 	cmp.w	r8, #0
 8010d3c:	da09      	bge.n	8010d52 <__kernel_rem_pio2+0x5c2>
 8010d3e:	f1b9 0f00 	cmp.w	r9, #0
 8010d42:	d002      	beq.n	8010d4a <__kernel_rem_pio2+0x5ba>
 8010d44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d48:	4619      	mov	r1, r3
 8010d4a:	9b04      	ldr	r3, [sp, #16]
 8010d4c:	e9c3 0100 	strd	r0, r1, [r3]
 8010d50:	e78f      	b.n	8010c72 <__kernel_rem_pio2+0x4e2>
 8010d52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010d56:	f7ef fa99 	bl	800028c <__adddf3>
 8010d5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d5e:	e7eb      	b.n	8010d38 <__kernel_rem_pio2+0x5a8>
 8010d60:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010d64:	f7ef fa92 	bl	800028c <__adddf3>
 8010d68:	3c01      	subs	r4, #1
 8010d6a:	e7c1      	b.n	8010cf0 <__kernel_rem_pio2+0x560>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	e7c6      	b.n	8010d00 <__kernel_rem_pio2+0x570>
 8010d72:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010d76:	f7ef fa89 	bl	800028c <__adddf3>
 8010d7a:	3401      	adds	r4, #1
 8010d7c:	e7cb      	b.n	8010d16 <__kernel_rem_pio2+0x586>
 8010d7e:	ed95 7b00 	vldr	d7, [r5]
 8010d82:	ed8d 7b00 	vstr	d7, [sp]
 8010d86:	ed95 7b02 	vldr	d7, [r5, #8]
 8010d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d8e:	ec53 2b17 	vmov	r2, r3, d7
 8010d92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d96:	f7ef fa79 	bl	800028c <__adddf3>
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	4606      	mov	r6, r0
 8010da0:	460f      	mov	r7, r1
 8010da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010da6:	f7ef fa6f 	bl	8000288 <__aeabi_dsub>
 8010daa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010dae:	f7ef fa6d 	bl	800028c <__adddf3>
 8010db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010db6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010dba:	e9c5 6700 	strd	r6, r7, [r5]
 8010dbe:	e76d      	b.n	8010c9c <__kernel_rem_pio2+0x50c>
 8010dc0:	ed94 7b00 	vldr	d7, [r4]
 8010dc4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010dc8:	ec51 0b17 	vmov	r0, r1, d7
 8010dcc:	4652      	mov	r2, sl
 8010dce:	465b      	mov	r3, fp
 8010dd0:	ed8d 7b00 	vstr	d7, [sp]
 8010dd4:	f7ef fa5a 	bl	800028c <__adddf3>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	460b      	mov	r3, r1
 8010ddc:	4606      	mov	r6, r0
 8010dde:	460f      	mov	r7, r1
 8010de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010de4:	f7ef fa50 	bl	8000288 <__aeabi_dsub>
 8010de8:	4652      	mov	r2, sl
 8010dea:	465b      	mov	r3, fp
 8010dec:	f7ef fa4e 	bl	800028c <__adddf3>
 8010df0:	3d01      	subs	r5, #1
 8010df2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010df6:	e9c4 6700 	strd	r6, r7, [r4]
 8010dfa:	e755      	b.n	8010ca8 <__kernel_rem_pio2+0x518>
 8010dfc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010e00:	f7ef fa44 	bl	800028c <__adddf3>
 8010e04:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e08:	e758      	b.n	8010cbc <__kernel_rem_pio2+0x52c>
 8010e0a:	bf00      	nop
 8010e0c:	f3af 8000 	nop.w
	...
 8010e18:	41700000 	.word	0x41700000
 8010e1c:	3e700000 	.word	0x3e700000
 8010e20:	9b04      	ldr	r3, [sp, #16]
 8010e22:	9a04      	ldr	r2, [sp, #16]
 8010e24:	601f      	str	r7, [r3, #0]
 8010e26:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8010e2a:	605c      	str	r4, [r3, #4]
 8010e2c:	609d      	str	r5, [r3, #8]
 8010e2e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010e32:	60d3      	str	r3, [r2, #12]
 8010e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e38:	6110      	str	r0, [r2, #16]
 8010e3a:	6153      	str	r3, [r2, #20]
 8010e3c:	e719      	b.n	8010c72 <__kernel_rem_pio2+0x4e2>
 8010e3e:	bf00      	nop

08010e40 <scalbn>:
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	ec55 4b10 	vmov	r4, r5, d0
 8010e46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010e4a:	4606      	mov	r6, r0
 8010e4c:	462b      	mov	r3, r5
 8010e4e:	b991      	cbnz	r1, 8010e76 <scalbn+0x36>
 8010e50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010e54:	4323      	orrs	r3, r4
 8010e56:	d03d      	beq.n	8010ed4 <scalbn+0x94>
 8010e58:	4b35      	ldr	r3, [pc, #212]	@ (8010f30 <scalbn+0xf0>)
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f7ef fbca 	bl	80005f8 <__aeabi_dmul>
 8010e64:	4b33      	ldr	r3, [pc, #204]	@ (8010f34 <scalbn+0xf4>)
 8010e66:	429e      	cmp	r6, r3
 8010e68:	4604      	mov	r4, r0
 8010e6a:	460d      	mov	r5, r1
 8010e6c:	da0f      	bge.n	8010e8e <scalbn+0x4e>
 8010e6e:	a328      	add	r3, pc, #160	@ (adr r3, 8010f10 <scalbn+0xd0>)
 8010e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e74:	e01e      	b.n	8010eb4 <scalbn+0x74>
 8010e76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010e7a:	4291      	cmp	r1, r2
 8010e7c:	d10b      	bne.n	8010e96 <scalbn+0x56>
 8010e7e:	4622      	mov	r2, r4
 8010e80:	4620      	mov	r0, r4
 8010e82:	4629      	mov	r1, r5
 8010e84:	f7ef fa02 	bl	800028c <__adddf3>
 8010e88:	4604      	mov	r4, r0
 8010e8a:	460d      	mov	r5, r1
 8010e8c:	e022      	b.n	8010ed4 <scalbn+0x94>
 8010e8e:	460b      	mov	r3, r1
 8010e90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010e94:	3936      	subs	r1, #54	@ 0x36
 8010e96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010e9a:	4296      	cmp	r6, r2
 8010e9c:	dd0d      	ble.n	8010eba <scalbn+0x7a>
 8010e9e:	2d00      	cmp	r5, #0
 8010ea0:	a11d      	add	r1, pc, #116	@ (adr r1, 8010f18 <scalbn+0xd8>)
 8010ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ea6:	da02      	bge.n	8010eae <scalbn+0x6e>
 8010ea8:	a11d      	add	r1, pc, #116	@ (adr r1, 8010f20 <scalbn+0xe0>)
 8010eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eae:	a31a      	add	r3, pc, #104	@ (adr r3, 8010f18 <scalbn+0xd8>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef fba0 	bl	80005f8 <__aeabi_dmul>
 8010eb8:	e7e6      	b.n	8010e88 <scalbn+0x48>
 8010eba:	1872      	adds	r2, r6, r1
 8010ebc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010ec0:	428a      	cmp	r2, r1
 8010ec2:	dcec      	bgt.n	8010e9e <scalbn+0x5e>
 8010ec4:	2a00      	cmp	r2, #0
 8010ec6:	dd08      	ble.n	8010eda <scalbn+0x9a>
 8010ec8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010ecc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010ed0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010ed4:	ec45 4b10 	vmov	d0, r4, r5
 8010ed8:	bd70      	pop	{r4, r5, r6, pc}
 8010eda:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010ede:	da08      	bge.n	8010ef2 <scalbn+0xb2>
 8010ee0:	2d00      	cmp	r5, #0
 8010ee2:	a10b      	add	r1, pc, #44	@ (adr r1, 8010f10 <scalbn+0xd0>)
 8010ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ee8:	dac1      	bge.n	8010e6e <scalbn+0x2e>
 8010eea:	a10f      	add	r1, pc, #60	@ (adr r1, 8010f28 <scalbn+0xe8>)
 8010eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ef0:	e7bd      	b.n	8010e6e <scalbn+0x2e>
 8010ef2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010ef6:	3236      	adds	r2, #54	@ 0x36
 8010ef8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010efc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010f00:	4620      	mov	r0, r4
 8010f02:	4b0d      	ldr	r3, [pc, #52]	@ (8010f38 <scalbn+0xf8>)
 8010f04:	4629      	mov	r1, r5
 8010f06:	2200      	movs	r2, #0
 8010f08:	e7d4      	b.n	8010eb4 <scalbn+0x74>
 8010f0a:	bf00      	nop
 8010f0c:	f3af 8000 	nop.w
 8010f10:	c2f8f359 	.word	0xc2f8f359
 8010f14:	01a56e1f 	.word	0x01a56e1f
 8010f18:	8800759c 	.word	0x8800759c
 8010f1c:	7e37e43c 	.word	0x7e37e43c
 8010f20:	8800759c 	.word	0x8800759c
 8010f24:	fe37e43c 	.word	0xfe37e43c
 8010f28:	c2f8f359 	.word	0xc2f8f359
 8010f2c:	81a56e1f 	.word	0x81a56e1f
 8010f30:	43500000 	.word	0x43500000
 8010f34:	ffff3cb0 	.word	0xffff3cb0
 8010f38:	3c900000 	.word	0x3c900000
 8010f3c:	00000000 	.word	0x00000000

08010f40 <floor>:
 8010f40:	ec51 0b10 	vmov	r0, r1, d0
 8010f44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010f50:	2e13      	cmp	r6, #19
 8010f52:	460c      	mov	r4, r1
 8010f54:	4605      	mov	r5, r0
 8010f56:	4680      	mov	r8, r0
 8010f58:	dc34      	bgt.n	8010fc4 <floor+0x84>
 8010f5a:	2e00      	cmp	r6, #0
 8010f5c:	da17      	bge.n	8010f8e <floor+0x4e>
 8010f5e:	a332      	add	r3, pc, #200	@ (adr r3, 8011028 <floor+0xe8>)
 8010f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f64:	f7ef f992 	bl	800028c <__adddf3>
 8010f68:	2200      	movs	r2, #0
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	f7ef fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8010f70:	b150      	cbz	r0, 8010f88 <floor+0x48>
 8010f72:	2c00      	cmp	r4, #0
 8010f74:	da55      	bge.n	8011022 <floor+0xe2>
 8010f76:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010f7a:	432c      	orrs	r4, r5
 8010f7c:	2500      	movs	r5, #0
 8010f7e:	42ac      	cmp	r4, r5
 8010f80:	4c2b      	ldr	r4, [pc, #172]	@ (8011030 <floor+0xf0>)
 8010f82:	bf08      	it	eq
 8010f84:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010f88:	4621      	mov	r1, r4
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	e023      	b.n	8010fd6 <floor+0x96>
 8010f8e:	4f29      	ldr	r7, [pc, #164]	@ (8011034 <floor+0xf4>)
 8010f90:	4137      	asrs	r7, r6
 8010f92:	ea01 0307 	and.w	r3, r1, r7
 8010f96:	4303      	orrs	r3, r0
 8010f98:	d01d      	beq.n	8010fd6 <floor+0x96>
 8010f9a:	a323      	add	r3, pc, #140	@ (adr r3, 8011028 <floor+0xe8>)
 8010f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa0:	f7ef f974 	bl	800028c <__adddf3>
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	f7ef fdb6 	bl	8000b18 <__aeabi_dcmpgt>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d0eb      	beq.n	8010f88 <floor+0x48>
 8010fb0:	2c00      	cmp	r4, #0
 8010fb2:	bfbe      	ittt	lt
 8010fb4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010fb8:	4133      	asrlt	r3, r6
 8010fba:	18e4      	addlt	r4, r4, r3
 8010fbc:	ea24 0407 	bic.w	r4, r4, r7
 8010fc0:	2500      	movs	r5, #0
 8010fc2:	e7e1      	b.n	8010f88 <floor+0x48>
 8010fc4:	2e33      	cmp	r6, #51	@ 0x33
 8010fc6:	dd0a      	ble.n	8010fde <floor+0x9e>
 8010fc8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010fcc:	d103      	bne.n	8010fd6 <floor+0x96>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	f7ef f95b 	bl	800028c <__adddf3>
 8010fd6:	ec41 0b10 	vmov	d0, r0, r1
 8010fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fde:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010fe2:	f04f 37ff 	mov.w	r7, #4294967295
 8010fe6:	40df      	lsrs	r7, r3
 8010fe8:	4207      	tst	r7, r0
 8010fea:	d0f4      	beq.n	8010fd6 <floor+0x96>
 8010fec:	a30e      	add	r3, pc, #56	@ (adr r3, 8011028 <floor+0xe8>)
 8010fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff2:	f7ef f94b 	bl	800028c <__adddf3>
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	f7ef fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d0c2      	beq.n	8010f88 <floor+0x48>
 8011002:	2c00      	cmp	r4, #0
 8011004:	da0a      	bge.n	801101c <floor+0xdc>
 8011006:	2e14      	cmp	r6, #20
 8011008:	d101      	bne.n	801100e <floor+0xce>
 801100a:	3401      	adds	r4, #1
 801100c:	e006      	b.n	801101c <floor+0xdc>
 801100e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011012:	2301      	movs	r3, #1
 8011014:	40b3      	lsls	r3, r6
 8011016:	441d      	add	r5, r3
 8011018:	4545      	cmp	r5, r8
 801101a:	d3f6      	bcc.n	801100a <floor+0xca>
 801101c:	ea25 0507 	bic.w	r5, r5, r7
 8011020:	e7b2      	b.n	8010f88 <floor+0x48>
 8011022:	2500      	movs	r5, #0
 8011024:	462c      	mov	r4, r5
 8011026:	e7af      	b.n	8010f88 <floor+0x48>
 8011028:	8800759c 	.word	0x8800759c
 801102c:	7e37e43c 	.word	0x7e37e43c
 8011030:	bff00000 	.word	0xbff00000
 8011034:	000fffff 	.word	0x000fffff

08011038 <_init>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	bf00      	nop
 801103c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801103e:	bc08      	pop	{r3}
 8011040:	469e      	mov	lr, r3
 8011042:	4770      	bx	lr

08011044 <_fini>:
 8011044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011046:	bf00      	nop
 8011048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801104a:	bc08      	pop	{r3}
 801104c:	469e      	mov	lr, r3
 801104e:	4770      	bx	lr
